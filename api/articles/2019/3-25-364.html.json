{"title":"轻量化HTTP服务器环境快速搭建部署","slug":"系统运维/快速部署/Http","date":"2019-03-25T10:34:30.000Z","updated":"2023-01-31T02:29:10.385Z","url":"2019/3-25-364.html","path":"api/articles/2019/3-25-364.html.json","covers":["https://img.weiyigeek.top/2019/20190715164049.png","https://img.weiyigeek.top/2019/20190715164147.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-快速搭建轻量化HTTP服务器\"><a href=\"#0x01-快速搭建轻量化HTTP服务器\" class=\"headerlink\" title=\"0x01 快速搭建轻量化HTTP服务器\"></a>0x01 快速搭建轻量化HTTP服务器</h2><p>描述：在做运维或者安全相关的测试项目的时候，需要快速搭建HTML服务器环境来下载文件或者POC，主要针对于HTML代码与文件浏览下载;</p>\n<p><br/></p>\n<h3 id=\"1-Python的SimpleHTTPServer模块实现\"><a href=\"#1-Python的SimpleHTTPServer模块实现\" class=\"headerlink\" title=\"1.Python的SimpleHTTPServer模块实现\"></a>1.Python的SimpleHTTPServer模块实现</h3><p>命令示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python2</span></span><br><span class=\"line\">python -m SimpleHTTPServer 8080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python3已经改成了http.server</span></span><br><span class=\"line\">python -m http.server 端口号</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715164049.png\" alt=\"WeiyiGeek.python快速搭建web\" title=\"\" class=\"\">\n                <p>WeiyiGeek.python快速搭建web</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"2-php的-S命令实现\"><a href=\"#2-php的-S命令实现\" class=\"headerlink\" title=\"2.php的-S命令实现\"></a>2.php的-S命令实现</h3><p>命令示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exec</span> php -S 0:8081 index.php</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715164147.png\" alt=\"WeiyiGeek.php快速搭建web\" title=\"\" class=\"\">\n                <p>WeiyiGeek.php快速搭建web</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"3-PowerShell的System-Net-HttpListener对象实现\"><a href=\"#3-PowerShell的System-Net-HttpListener对象实现\" class=\"headerlink\" title=\"3.PowerShell的System.Net.HttpListener对象实现\"></a>3.PowerShell的<code>System.Net.HttpListener</code>对象实现</h3><p><a href=\"https://www.pstips.net/question/18306.html\" target=\"_blank\" rel=\"noopener\">https://www.pstips.net/question/18306.html</a><br>powershell New-Object System.Net.HttpListener<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$Port</span> = 8888</span><br><span class=\"line\"><span class=\"variable\">$Url</span> = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"variable\">$listener</span> = New-Object System.Net.HttpListener</span><br><span class=\"line\"><span class=\"variable\">$prefix</span> = <span class=\"string\">\"http://*:<span class=\"variable\">$Port</span>/<span class=\"variable\">$Url</span>\"</span></span><br><span class=\"line\"><span class=\"variable\">$listener</span>.Prefixes.Add(<span class=\"variable\">$prefix</span>)</span><br><span class=\"line\"><span class=\"variable\">$listener</span>.Start()</span><br><span class=\"line\"> </span><br><span class=\"line\">使用 <span class=\"variable\">$listener</span>.GetContext() 或 <span class=\"variable\">$listener</span>.BeginGetContext 都是等待任务运行完成才能处理下一个请求，如何同时处理多个请求？</span><br></pre></td></tr></table></figure></p>\n<p>最近有个项目要构建一个轻量化的HTTP服务器，而且需要支持HTTPS</p>\n<p>因为要求最好不使用IIS，所以用的是HttpListener类，HTTP部分已经完成，但是在增加HTTPS支持时出现报错</p>\n<p>已知需要支持HTTPS时，服务器Demo应该增加的部分首先是增加https开头的前缀</p>\n<p>$listener = New-Object System.Net.HttpListener<br>$prefix = “http://<em>:$Port/$Url”<br>$prefix_s = “https://</em>:$Port/$Url”<br>$listener.Prefixes.Add($prefix)<br>$listener.Prefixes.Add($prefix_s)</p>\n<p>然后应该做的是完成监听端口和证书的绑定，证书是使用openssl生成的自签名证书，仅用于Demo的测试</p>\n<p>$ openssl genrsa -des3 -out server.key 2048 #生成RSA私钥<br>$ openssl req -new -key server.key -out server.csr #生成证书签名请求<br>$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt #生成自签名证书<br>$ openssl pkcs12 -export -inkey server.key -in server.crt -out server.pfx #生成PFX格式的证书</p>\n<p>接着应该安装证书，使用Import-PfxCertificate可以完成这个工作</p>\n<p>$mypwd= ConvertTo-SecureString -String “<strong><em>**</em></strong>“ -Force -AsPlainText<br>Import-PfxCertificate -FilePath $mypath\\server.pfx Cert:\\CurrentUser\\My -Password $mypwd</p>\n<p>证书安装完成后就可以进行与端口的绑定了，Add-NetIPHttpsCertBinding应该是能完成这个功能的，参照微软文档中的Example如下：</p>\n<p>Add-NetIPHttpsCertBinding -IpPort “127.0.0.1:443” -CertificateHash “806ADBC1A866167765450EB5735C86F7AD35327C” -CertifcateStoreName  Cert:\\CurrentUser\\My -ApplicationId “{3ccf7768-e7d7-4b7f-af0c-f0ce698ef083}” -NullEncryption $false</p>\n<p>其中806ADBC1A866167765450EB5735C86F7AD35327C是证书中的指纹信息，3ccf7768-e7d7-4b7f-af0c-f0ce698ef083是使用[Guid]::NewGuid()生成的GUID，但是执行后报错信息如下：</p>\n<p>参照Add-NetIPHttpsCertBinding 命令的帮助文档CertifcateStoreName参数应对像下面那样：<br>Add-NetIPHttpsCertBinding -IpPort “10.1.1.1:443” -CertificateHash “0102030405060708090A0B0C0D0E0F1011121314” –CertifcateStoreName “My” –ApplicationId “{3F2504E0-4F89-11D3-9A0C-0305E82C3301}” -NullEncryption $false</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> Load-Packages</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    param ([string] <span class=\"variable\">$directory</span> = <span class=\"string\">'Packages'</span>)</span><br><span class=\"line\">    <span class=\"variable\">$assemblies</span> = Get-ChildItem <span class=\"variable\">$directory</span> -Recurse -Filter <span class=\"string\">'*.dll'</span> | Select -Expand FullName</span><br><span class=\"line\">    foreach (<span class=\"variable\">$assembly</span> <span class=\"keyword\">in</span> <span class=\"variable\">$assemblies</span>) &#123; [System.Reflection.Assembly]::LoadFrom(<span class=\"variable\">$assembly</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Load-Packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$routes</span> = @&#123;</span><br><span class=\"line\">    <span class=\"string\">\"/ola\"</span> = &#123; <span class=\"built_in\">return</span> <span class=\"string\">'&lt;html&gt;&lt;body&gt;Hello world!&lt;/body&gt;&lt;/html&gt;'</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">'http://localhost:8080/'</span></span><br><span class=\"line\"><span class=\"variable\">$listener</span> = New-Object System.Net.HttpListener</span><br><span class=\"line\"><span class=\"variable\">$listener</span>.Prefixes.Add(<span class=\"variable\">$url</span>)</span><br><span class=\"line\"><span class=\"variable\">$listener</span>.Start()</span><br><span class=\"line\"></span><br><span class=\"line\">Write-Host <span class=\"string\">\"Listening at <span class=\"variable\">$url</span>...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"variable\">$listener</span>.IsListening)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$context</span> = <span class=\"variable\">$listener</span>.GetContext()</span><br><span class=\"line\">    <span class=\"variable\">$requestUrl</span> = <span class=\"variable\">$context</span>.Request.Url</span><br><span class=\"line\">    <span class=\"variable\">$response</span> = <span class=\"variable\">$context</span>.Response</span><br><span class=\"line\"></span><br><span class=\"line\">    Write-Host <span class=\"string\">''</span></span><br><span class=\"line\">    Write-Host <span class=\"string\">\"&gt; <span class=\"variable\">$requestUrl</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$localPath</span> = <span class=\"variable\">$requestUrl</span>.LocalPath</span><br><span class=\"line\">    <span class=\"variable\">$route</span> = <span class=\"variable\">$routes</span>.Get_Item(<span class=\"variable\">$requestUrl</span>.LocalPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$route</span> -eq <span class=\"variable\">$null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$response</span>.StatusCode = 404</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$content</span> = &amp; <span class=\"variable\">$route</span></span><br><span class=\"line\">        <span class=\"variable\">$buffer</span> = [System.Text.Encoding]::UTF8.GetBytes(<span class=\"variable\">$content</span>)</span><br><span class=\"line\">        <span class=\"variable\">$response</span>.ContentLength64 = <span class=\"variable\">$buffer</span>.Length</span><br><span class=\"line\">        <span class=\"variable\">$response</span>.OutputStream.Write(<span class=\"variable\">$buffer</span>, 0, <span class=\"variable\">$buffer</span>.Length)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\">$response</span>.Close()</span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"部署运维","path":"api/categories/部署运维.json"},{"name":"环境快速搭建","path":"api/categories/环境快速搭建.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"}]}