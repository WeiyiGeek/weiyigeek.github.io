{"title":"1.Python3基础入门学习笔记(一)","slug":"编程世界/Python/基础学习/2.Python3基础入门学习笔记(一)","date":"2019-03-18T05:34:30.000Z","updated":"2022-05-26T13:25:54.702Z","url":"2019/3-18-333.html","path":"api/articles/2019/3-18-333.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031801.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031802.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031803.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031804.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031805.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031810.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031806.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031807.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031808.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031809.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031811.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031812.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031813.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031814.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031815.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031816.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031817.png"],"content":"<p>[TOC]</p>\n<h3 id=\"1-Python3简单介绍\"><a href=\"#1-Python3简单介绍\" class=\"headerlink\" title=\"1.Python3简单介绍\"></a>1.Python3简单介绍</h3><p>Python的3.0版本，常被称为Python 3000，或简称Py3k。</p>\n<p>Python 语言的广泛性 ：</p>\n<ul>\n<li><p>Web应用的开发<br>  服务器端编程，具有丰富的Web开发框架，如Django和TurboGears，快速完成一个网站的开发和Web服务。典型如国内的豆瓣、果壳网等；国外的Google、Dropbox等。</p>\n</li>\n<li><p>系统网络运维<br>在运维的工作中，有大量重复性工作的地方，并需要做管理系统、监控系统、发布系统等，将工作自动化起来，提高工作效率，这样的场景Python是一门非常合适的语言。</p>\n<a id=\"more\"></a></li>\n<li>科学与数字计算<br>  Python被广泛的运用于科学和数字计算中，例如生物信息学、物理、建筑、地理信息系统、图像可视化分析、生命科学等，常用numpy、SciPy、Biopython、SunPy等。</li>\n<li><p>3D游戏开发<br>Python有很好的3D渲染库和游戏开发框架，有很多使用Python开发的游戏，如迪斯尼卡通城、黑暗之刃。常用PyGame、Pykyra等和一个PyWeek的比赛。</p>\n</li>\n<li><p>图形界面开发<br>Python可编写桌面图形用户界面，还可以扩展微软的Windows，常用Tk、GTK+、PyQt、win32等</p>\n</li>\n<li><p>网络编程<br>除了网络和互联网的支持，Python还提供了对底层网络的支持，有易于使用的Socket接口和一个异步的网络编程框架Twisted Python</p>\n</li>\n</ul>\n<h3 id=\"2-Python3安装\"><a href=\"#2-Python3安装\" class=\"headerlink\" title=\"2.Python3安装\"></a>2.Python3安装</h3><p>在Linux中安装Python3命令，在官网下载 <a href=\"https://www.python.org/downloads/source/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/source/</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf Python-3.6.1.tgz</span><br><span class=\"line\">cd Python-3.6.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">python3 -V</span><br></pre></td></tr></table></figure><br>ipython 是一个 python 的交互式 shell（ i 代表 交互(interaction)），比默认的 python shell 好用得多，支持变量自动补全，自动缩进，支持 bash shell 命令，内置了许多很有用的功能和函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux 环境还可以使用以下命令安装：</span><br><span class=\"line\">pip install ipython</span><br><span class=\"line\">sudo apt-get install ipython #Ubuntu</span><br><span class=\"line\">yum install ipython  #c entos</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">环境变量配置：</span><br><span class=\"line\">setenv PATH &quot;$PATH:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python&quot;   &#x2F;&#x2F;csh shell</span><br><span class=\"line\">export PATH&#x3D;&quot;$PATH:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python&quot;   &#x2F;&#x2F; bash shell (Linux) 输入 </span><br><span class=\"line\">PATH&#x3D;&quot;$PATH:&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python&quot;  &#x2F;&#x2F;在 sh 或者 ksh shell 输入:</span><br><span class=\"line\">path&#x3D;%path%;C:\\Python   &#x2F;&#x2F;在 Windows 设置环境变量:</span><br><span class=\"line\"></span><br><span class=\"line\">Python 环境变量：</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031801.png\" alt=\"Python环境遍历\" title=\"\" class=\"\">\n                <p>Python环境遍历</p>\n            </figure>\n<p><b>运行Python的三种模式</b></p>\n<ul>\n<li>交互式解释器与脚本式编程</li>\n<li>在 Cloud Studio 中运行 Python3 程序（推荐：<a href=\"https://studio.dev.tencent.com/）\" target=\"_blank\" rel=\"noopener\">https://studio.dev.tencent.com/）</a></li>\n<li>使用交互式 ipython 运行 Python</li>\n</ul>\n<p>以下为Python命令行参数：<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031802.png\" alt=\"Python命令行参数\" title=\"\" class=\"\">\n                <p>Python命令行参数</p>\n            </figure></p>\n<h3 id=\"3-Python3与Python2-X对比\"><a href=\"#3-Python3与Python2-X对比\" class=\"headerlink\" title=\"3.Python3与Python2.X对比\"></a>3.Python3与Python2.X对比</h3><p><em>不同点0：采用print输出时候格式不同，Py2 采用 ‘’,而python3智能采用()函数形式</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Py2</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> a </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#py3</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点1：`反引号在Python2.x可用使用,Python3被废弃;其中原因之一与单引号容易混淆</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( b + a)   <span class=\"comment\">#3.x</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> b + a     <span class=\"comment\">#2.x</span></span><br><span class=\"line\"><span class=\"comment\"># 都会报错 ，解决方法</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> b + `a`  <span class=\"comment\">#2.x  </span></span><br><span class=\"line\">Weiyigeek1024        <span class=\"comment\">#其实repr与``是一致得能够把结果字符串转化为合法得Python表达式;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( b + repr(a))   <span class=\"comment\">#3.x 同上</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print( b + str(a))   <span class=\"comment\">#3.x</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点2：ptthon2中的raw_input()与Python3的input函数功能相同</em><br>描述：raw_input函数在py3中已经删除，与input函数合并为一个；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = raw_input(<span class=\"string\">\"请输入您的姓名：\"</span>)  <span class=\"comment\">#2.x</span></span><br><span class=\"line\">请输入您的姓名：WeiyiGeek</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(name)</span><br><span class=\"line\">WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点3：ptthon2中的有cmp比较函数而Python3中是不存在的</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmp(字符串,字符串) 或者 cmp(int,int) 比较字符串和整形</span></span><br><span class=\"line\">&gt;&gt;&gt; cmp(1,2)   <span class=\"comment\">#前者小于后者返回 -1</span></span><br><span class=\"line\">-1</span><br><span class=\"line\">&gt;&gt;&gt; cmp(<span class=\"string\">\"abc\"</span>,<span class=\"string\">\"abb\"</span>)  <span class=\"comment\">#前者大于后者返回 1</span></span><br><span class=\"line\">1</span><br><span class=\"line\">&gt;&gt;&gt; cmp(<span class=\"string\">\"abc\"</span>,<span class=\"string\">\"abc\"</span>)  <span class=\"comment\">#前者等于后者返回 0</span></span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点4：ptthon2与Python3中字符集不同</em><br>Python2种容易中文乱码,所有往往使用三种方法进行解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1；文件开头声明</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法2：</span></span><br><span class=\"line\">unicode_str = unicode(<span class=\"string\">'中文'</span>,encoding=<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span> unicode_str.encode(<span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法3：打开文件采用codes.open代替open函数；</span></span><br><span class=\"line\">import codecs</span><br><span class=\"line\">codecs.open(<span class=\"string\">'filename'</span>,encoding=<span class=\"string\">'utf-8'</span>);</span><br></pre></td></tr></table></figure><br>补充：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在未指定编码集的适合容易报错</span></span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xe4 in position 0: ordinal not in range(128)'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#发现是ascii编码的问题，在自己程序代码前面加上以下几句，即可解决问题：</span></span><br><span class=\"line\">import sys</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'gb18030'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点5：python3.5和Python2.7在套接字返回值解码上有区别:</em><br>str通过encode()方法可以编码为指定的bytes，反过来如果我们从网络或磁盘上读取了字节流是bytes,把bytes变为str就需要用decode()方法;<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Python3 - encode</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"我是一个网络安全从业者\"</span>.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe4\\xb8\\x80\\xe4\\xb8\\xaa\\xe7\\xbd\\x91\\xe7\\xbb\\x9c\\xe5\\xae\\x89\\xe5\\x85\\xa8\\xe4\\xbb\\x8e\\xe4\\xb8\\x9a\\xe8\\x80\\x85'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"我是一个网络安全从业者\"</span>.encode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\"><span class=\"string\">b'\\xce\\xd2\\xca\\xc7\\xd2\\xbb\\xb8\\xf6\\xcd\\xf8\\xc2\\xe7\\xb0\\xb2\\xc8\\xab\\xb4\\xd3\\xd2\\xb5\\xd5\\xdf'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Python3 - decode </span></span><br><span class=\"line\">se.decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\"><span class=\"string\">'我是一个网络安全从业者'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b'\\xe6\\x88\\x91\\xe6\\x98\\xaf\\xe4\\xb8\\x80\\xe4\\xb8\\xaa\\xe7\\xbd\\x91\\xe7\\xbb\\x9c\\xe5\\xae\\x89\\xe5\\x85\\xa8\\xe4\\xbb\\x8e\\xe4\\xb8\\x9a\\xe8\\x80\\x85'</span>.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"><span class=\"string\">'我是一个网络安全从业者'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>不同点6：python3、2有区别pip安装软件的区别</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mysql包的区别</span></span><br><span class=\"line\">py2：pip install mysql-python</span><br><span class=\"line\">py3：pip install mysqlclient</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-Python3基础语法\"><a href=\"#4-Python3基础语法\" class=\"headerlink\" title=\"4.Python3基础语法\"></a>4.Python3基础语法</h3><h4 id=\"4-1-Python中文编码\"><a href=\"#4-1-Python中文编码\" class=\"headerlink\" title=\"4.1 Python中文编码\"></a>4.1 Python中文编码</h4><p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错所有代码中包含中文，就需要在头部指定编码。<br>案例1：Python第一个程序Hello Wrold：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解决方法：只要在文件开头加入 # -*- coding: UTF-8 -*- 或者 #coding=utf-8 就行了</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding=utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: cp936 -*-</span></span><br><span class=\"line\">print(<span class=\"string\">\"Hello World, Python 3.x! 唯一\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"你好，世界\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031803.png\" alt=\"Python中文编码\" title=\"\" class=\"\">\n                <p>Python中文编码</p>\n            </figure>\n<p><strong>注意事项：</strong><br>Python3.X 源码文件默认使用utf-8编码，所以可以正常解析中文,无需指定 UTF-8 编码,但在开发得时候需要设置 py 文件存储的格式为 UTF-8，否则会出现类似以下错误信息</p>\n<h4 id=\"4-2-Python基础语法学习\"><a href=\"#4-2-Python基础语法学习\" class=\"headerlink\" title=\"4.2 Python基础语法学习\"></a>4.2 Python基础语法学习</h4><p>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头，且标识符是区分大小写；<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单下划线：以单下划线_foo开头的不能直接访问的类属性，需通过类提供的接口进行访问,不能用 from xxx import * 导入。</span><br><span class=\"line\">双下划线：双下划线开头的 __foo 代表类的私有成员，以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。</span><br></pre></td></tr></table></figure></p>\n<p><strong>Python 变量定义：</strong><br>Python 中的变量不需要声明，每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建；<br>由于Python是弱类型语言类型属于对象，变量是没有类型的，变量仅仅是一个对象的引用（一个指针）,<em>且一个变量可以通过赋值指向不同类型的对象</em>，比如：<br>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值，Python允许你同时为多个变量赋值；当你指定一个值时,Number 对象就会被创建，可以使用 <em>del语句</em> 删除一些对象引用；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&#x3D;[1,2,3]</span><br><span class=\"line\">a&#x3D;&quot;Runoob&quot;</span><br><span class=\"line\">#以上代码中，[1,2,3] 是 List 类型，&quot;Runoob&quot; 是 String 类型，而变量 a 是没有类型，她仅仅</span><br><span class=\"line\">#是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</span><br></pre></td></tr></table></figure></p>\n<p>在 python 中，strings, tuples, 和 numbers 是 <em>不可更改的对象</em>，而 list,dict ,set则是 <em>可以修改的对象</em>。</p>\n<ul>\n<li>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</li>\n<li>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li>\n</ul>\n<p>案例：Python变量赋值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：变量的定义与使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">int1 = <span class=\"number\">23</span></span><br><span class=\"line\">float1 = <span class=\"number\">100.0</span></span><br><span class=\"line\">string = <span class=\"string\">\"WeiyiGeek\"</span> </span><br><span class=\"line\">print(<span class=\"string\">\"姓名：\"</span>,string,<span class=\"string\">\"年龄：\"</span>,int1, <span class=\"string\">\"分数：\"</span>, float1,end=<span class=\"string\">\"\\n\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">a = b = c = <span class=\"number\">1</span>   <span class=\"comment\">#创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值</span></span><br><span class=\"line\">print(a,b,c,end=<span class=\"string\">\"\\n\"</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">a,b,c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">\"WeiyiGeek\"</span>  <span class=\"comment\">#两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 \"runoob\" 分配给变量 c。</span></span><br><span class=\"line\">print(a,b,c,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">del</span> a,b</span><br><span class=\"line\">print(a,b,c,end=<span class=\"string\">\" \"</span>)  <span class=\"comment\"># 这里会说 a ,b not define （未定义）</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031804.png\" alt=\"Python变量赋值\" title=\"\" class=\"\">\n                <p>Python变量赋值</p>\n            </figure></p>\n<p><strong>python 保留字符与函数帮助：</strong><br>这些保留字不能用作常数或变数，或任何其他标识符名称；内置函数帮助及Python3的输出格式:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class=\"line\">[<span class=\"string\">'False'</span>, <span class=\"string\">'None'</span>, <span class=\"string\">'True'</span>, <span class=\"string\">'and'</span>, <span class=\"string\">'as'</span>, <span class=\"string\">'assert'</span>, <span class=\"string\">'async'</span>, <span class=\"string\">'await'</span>, <span class=\"string\">'break'</span>, <span class=\"string\">'class'</span>, <span class=\"string\">'continue'</span>, <span class=\"string\">'def'</span>, <span class=\"string\">'del'</span>, <span class=\"string\">'elif'</span>, <span class=\"string\">'else'</span>, <span class=\"string\">'except'</span>, <span class=\"string\">'finally'</span>, <span class=\"string\">'for'</span>, <span class=\"string\">'from'</span>, <span class=\"string\">'global'</span>, <span class=\"string\">'if'</span>, <span class=\"string\">'import'</span>, <span class=\"string\">'in'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'lambda'</span>, <span class=\"string\">'nonlocal'</span>, <span class=\"string\">'not'</span>, <span class=\"string\">'or'</span>, <span class=\"string\">'pass'</span>, <span class=\"string\">'raise'</span>, <span class=\"string\">'return'</span>, <span class=\"string\">'try'</span>, <span class=\"string\">'while'</span>, <span class=\"string\">'with'</span>, <span class=\"string\">'yield'</span>]</span><br><span class=\"line\"><span class=\"comment\">#BIF=built-in functions  </span></span><br><span class=\"line\">&gt;&gt;&gt;dir(__builtins__)</span><br><span class=\"line\">&gt;&gt;&gt;help(int)</span><br><span class=\"line\">&gt;&gt;&gt;print(<span class=\"string\">\"string\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Python 中注释：</strong><br>采用 #  ‘’’  “”” 来注释代码，注意除了第一个都是成对使用，在输出函数中也能进行注释输出；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以下实例我们可以输出函数的注释：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">a</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''这是文档字符串'''</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">print(a.__doc__)  <span class=\"comment\">#   输出结果为：这是文档字符串</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Python 行和缩进：</strong><br>在Python代码块不再像其他语言一样使用{}来控制类，函数以及其他逻辑判断，而是以缩进的方式；<br>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数；建议你在每个缩进层次使用 <em>单个制表符</em> 或 <em>两个空格</em> 或 <em>四个空格</em> , 切记不能混用;<br><em>注意事项：</em> 缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</p>\n<p><strong>Python 中空行含义：</strong><br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错；但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构; 记住：空行也是程序代码的一部分。</p>\n<p><strong>Python 多行语句：</strong><br>通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句；但是在  [], {}, 或 () 中的多行语句直接使用’,’来分割，不需要使用反斜杠()；<br>在同一行中使用多条语句，语句之间使用分号(;)分割。</p>\n<p>案例：验证多行语句于，输入语句在一行的分割<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：验证Python多行语句</span></span><br><span class=\"line\">one = <span class=\"number\">1</span></span><br><span class=\"line\">two = <span class=\"number\">2</span></span><br><span class=\"line\">three = <span class=\"number\">3</span></span><br><span class=\"line\">add = one +\\</span><br><span class=\"line\">    two +\\</span><br><span class=\"line\">    three</span><br><span class=\"line\">print(<span class=\"string\">\"add =\"</span>,add);print(add);   <span class=\"comment\">#输出放在一行使用;分割</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Python 模块导入:</strong><br>在 python 用 import 或者 from…import 来导入相应的模块。</p>\n<ul>\n<li>将整个模块(somemodule)导入 |import modulename |</li>\n<li>从某个模块中导入某个函数  | from modulename import function |</li>\n<li>从某个模块中导入多个函数,格式为 | from modulename import function1,function1 |</li>\n<li>将某个模块中的全部函数导入 | from somemodule import * |</li>\n</ul>\n<h4 id=\"4-3-Python基础数据类型\"><a href=\"#4-3-Python基础数据类型\" class=\"headerlink\" title=\"4.3 Python基础数据类型\"></a>4.3 Python基础数据类型</h4><p>Python3 中有六个标准的数据类型：<br>Number（数字） String（字符串） List（列表） Tuple（元组）Set（集合）Dictionary（字典）</p>\n<ul>\n<li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）</li>\n<li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）</li>\n</ul>\n<p><em>数据类型别名：</em></p>\n<ul>\n<li>序列类型：列表/元祖/字符串</li>\n<li>映射容器：字典（存放对象）</li>\n</ul>\n<h5 id=\"4-3-1-整型-intger\"><a href=\"#4-3-1-整型-intger\" class=\"headerlink\" title=\"4.3.1 整型(intger)\"></a>4.3.1 整型(intger)</h5><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031805.png\" alt=\"Python整型数据变量\" title=\"\" class=\"\">\n                <p>Python整型数据变量</p>\n            </figure>\n<p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示,复数的实部a和虚部b都是浮点型;<br>e记法：15e10 =&gt; 15*10的10次方 = 150000000000.0;在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>price = <span class=\"number\">113.0625</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>_ = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>price + _    <span class=\"comment\">#此处， _ 变量应被用户视为只读变量。 </span></span><br><span class=\"line\"><span class=\"number\">113.0625</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>round(_, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">113.06</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：基础数据类型,与输入输出函数的使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----integer----#</span></span><br><span class=\"line\">temp = input(<span class=\"string\">\"请输入数字：\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"输入值为 : \"</span>,temp, <span class=\"string\">\" | 类型:\"</span>,type(temp))</span><br><span class=\"line\">temp = <span class=\"string\">'5'</span></span><br><span class=\"line\">number = int(temp)   <span class=\"comment\">#将字符转成整数类型</span></span><br><span class=\"line\">print(<span class=\"string\">\"字符转换整数 : \"</span>,number,<span class=\"string\">\" | 类型:\"</span>,type(number))</span><br><span class=\"line\">temp  = <span class=\"literal\">True</span></span><br><span class=\"line\">temp =  <span class=\"number\">4</span>+<span class=\"number\">3j</span>  <span class=\"comment\">#复数类型</span></span><br><span class=\"line\">print(<span class=\"string\">\"复数:\"</span>,temp,<span class=\"string\">\" | 类型:\"</span>,type(temp),end=<span class=\"string\">\"\\n\\n\"</span>)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031810.png\" alt=\"Python整型数据变量案例\" title=\"\" class=\"\">\n                <p>Python整型数据变量案例</p>\n            </figure></p>\n<p><em>注意事项：</em><br>1)Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。<br>2)Python3 中，把 True 和 False 定义成关键字了，它们的值还是 1 和 0，它们可以和数字相加。<br>3)Python3 中，使用十六进制和八进制来代表整数： number = 0xA0F # 十六进制 0o37 # 八进制<br>4)负数中j可以不分大小写的</p>\n<h5 id=\"4-3-2-字符串-string\"><a href=\"#4-3-2-字符串-string\" class=\"headerlink\" title=\"4.3.2 字符串(string)\"></a>4.3.2 字符串(string)</h5><p>python 中单引号和双引号使用完全相同且字符串 <em>不能被改变</em>，使用三引号(‘’’或”””)可以指定一个多行字符串进行跨行，WYSIWYG（所见即所得）格式；</p>\n<p>Python 不支持单字符类型,单字符在 Python 中也是作为一个字符串使用,如 str =’a’ ；字符串中可以包含换行符、制表符以及其他特殊字符。</p>\n<p>python 字符串可以用 + 运算符连接在一起，用 * 运算符重复，按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</p>\n<p>Python 通过索引截取字符串中字符，语法格式如下：变量[头下标:尾下标]（有两种索引方式，从左往右以0开始，从右往左以-1开始）<br>[:] 截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031806.png\" alt=\"Python字符串索引\" title=\"\" class=\"\">\n                <p>Python字符串索引</p>\n            </figure></p>\n<p><strong>Python转义字符:</strong><br>反斜杠可以用来转义，使用r可以让反斜杠不发生转义， 如 r”this is a line with \\n” 则\\n会显示，并不是换行。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031807.png\" alt=\"Python字符串格式化\" title=\"\" class=\"\">\n                <p>Python字符串格式化</p>\n            </figure></p>\n<p><strong>Python字符串格式化：</strong><br>基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中，与 C 中 sprintf 函数一样的语法。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031808.png\" alt=\"Python字符串格式化\" title=\"\" class=\"\">\n                <p>Python字符串格式化</p>\n            </figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031809.png\" alt=\"Python格式化操作符辅助指令\" title=\"\" class=\"\">\n                <p>Python格式化操作符辅助指令</p>\n            </figure></p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：字符串类型详解</span></span><br><span class=\"line\"><span class=\"comment\">##----String-----#</span></span><br><span class=\"line\">word = <span class=\"string\">'字符串'</span></span><br><span class=\"line\">sentence = <span class=\"string\">\"这是一个句子.\"</span></span><br><span class=\"line\">paragraph = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    这是一个段落，</span></span><br><span class=\"line\"><span class=\"string\">    可以由多行组成</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">A = <span class=\"string\">\" THIS A\"</span></span><br><span class=\"line\">B = <span class=\"string\">\"String !\"</span></span><br><span class=\"line\">C = A + B   <span class=\"comment\">#拼接字符串</span></span><br><span class=\"line\">print(C,end=<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"段落:\"</span>,paragraph)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#字符串的截取的语法格式如下：变量[头下标:尾下标:步长] </span></span><br><span class=\"line\">str1 = <span class=\"string\">'0123456789'</span></span><br><span class=\"line\">print(str1[<span class=\"number\">0</span>:<span class=\"number\">-1</span>])           <span class=\"comment\"># 输出第一个到倒数第二个的所有字符</span></span><br><span class=\"line\">print(str1[<span class=\"number\">2</span>:<span class=\"number\">5</span>])            <span class=\"comment\"># 输出从第三个开始到第五个的字符</span></span><br><span class=\"line\">print(str1[<span class=\"number\">-2</span>])             <span class=\"comment\"># 到数第二个数</span></span><br><span class=\"line\">print(str1 * <span class=\"number\">2</span>)             <span class=\"comment\"># 输出字符串两次 (关键字 * 重复)</span></span><br><span class=\"line\">print(<span class=\"string\">'数值:'</span> + str1)       <span class=\"comment\"># 连接字符串 (关键字 + 拼接)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##----字符转义-----#</span></span><br><span class=\"line\">print(<span class=\"string\">'hello\\nWeiyi'</span>)     <span class=\"comment\"># 使用反斜杠(\\)+n转义特殊字符</span></span><br><span class=\"line\">print(<span class=\"string\">r'c:\\\\windows'</span>)     <span class=\"comment\"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br><span class=\"line\"></span><br><span class=\"line\">var = <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"拼接字符串：\\a\"</span>,var[:<span class=\"number\">5</span>]+<span class=\"string\">\" World!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">r'\\n'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> (R<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"我叫 %s 今年 %d 岁 %#X  数值：%5.3f\"</span> % (<span class=\"string\">'小明'</span>,<span class=\"number\">10</span>,<span class=\"number\">255</span>,<span class=\"number\">12.85455</span>)) <span class=\"comment\">#格式化字符串</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\u6211\\u662f\\u6700\\u559c\\u7231\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e\"</span>) <span class=\"comment\">#unicode 输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进制的转换</span></span><br><span class=\"line\"><span class=\"string\">\"%o\"</span> % <span class=\"number\">10</span>   <span class=\"comment\">#'12'   || \"%#o\" % 10  #'0o12'</span></span><br><span class=\"line\"><span class=\"string\">\"%X\"</span> % <span class=\"number\">10</span>    <span class=\"comment\">#'A'    || \"%#X\" % 10  #'0XA'</span></span><br><span class=\"line\"><span class=\"string\">\"%x\"</span> % <span class=\"number\">10</span>    <span class=\"comment\">#'a'     ||  \"%#x\" % 10   #'0xa'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#浮点数格式化</span></span><br><span class=\"line\"><span class=\"string\">\"%5.2f\"</span> %<span class=\"number\">27.658</span>  <span class=\"comment\">#'27.66'</span></span><br><span class=\"line\"><span class=\"string\">\"%5.2f\"</span> %<span class=\"number\">27</span>         <span class=\"comment\">#'27.00'</span></span><br><span class=\"line\"><span class=\"string\">\"%f\"</span> %<span class=\"number\">27</span>              <span class=\"comment\">#float类型,小数点后保留6位数 '27.000000'</span></span><br><span class=\"line\"><span class=\"string\">\"%e\"</span> % <span class=\"number\">10000000</span>   <span class=\"comment\">#'1.000000e+07'</span></span><br><span class=\"line\"><span class=\"string\">\"%.2e\"</span> % <span class=\"number\">27.658</span>     <span class=\"comment\">#'2.77e+01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"%g\"</span> % <span class=\"number\">28.444455</span>     <span class=\"comment\">#智能选择 '28.4445'</span></span><br><span class=\"line\"><span class=\"string\">\"%g\"</span> % <span class=\"number\">28261465</span>     <span class=\"comment\">#'2.82615e+07'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"%5d\"</span> %<span class=\"number\">5</span>       <span class=\"comment\">#'    5'</span></span><br><span class=\"line\"><span class=\"string\">\"%-5d\"</span> %<span class=\"number\">5</span>      <span class=\"comment\">#'5    ' - 用于左对其</span></span><br><span class=\"line\"><span class=\"string\">\"%+d\"</span> % <span class=\"number\">5</span>      <span class=\"comment\">#'+5'  + 用于取正数和负数</span></span><br><span class=\"line\"><span class=\"string\">\"%+d\"</span> % <span class=\"number\">-5</span>    <span class=\"comment\">#'-5'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"%010d\"</span> % <span class=\"number\">5</span>   <span class=\"comment\">#'0000000005'</span></span><br><span class=\"line\"><span class=\"string\">\"%-010d\"</span> % <span class=\"number\">5</span>   <span class=\"comment\">#加个负号来个left对其,而这时0不会填充'5    </span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'%s'</span> % <span class=\"string\">\"I love you\"</span>)           <span class=\"comment\">#格式化字符串 'I love you' (常规方式)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#%f格式化定点数,M.N(M表示最小长度,N表示小数点后的位数?) 推荐方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'&#123;0:1f&#125;&#123;1&#125;'</span>.format(<span class=\"number\">27.586</span>,<span class=\"string\">\"Gb\"</span>)    <span class=\"comment\"># '27.586000Gb'</span></span><br><span class=\"line\"><span class=\"string\">'&#123;0:.1f&#125;&#123;1&#125;'</span>.format(<span class=\"number\">27.586</span>,<span class=\"string\">\"Gb\"</span>)   <span class=\"comment\"># '27.6Gb'  保留小数点后一位数值</span></span><br><span class=\"line\"><span class=\"string\">\"%c %c %c\"</span>  %  (<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>)         <span class=\"comment\">#格式化字符Ascll码转换 'a b c'</span></span><br><span class=\"line\"><span class=\"string\">'%d + %d = %d'</span> % (<span class=\"number\">4</span> ,<span class=\"number\">5</span> ,<span class=\"number\">4</span>+<span class=\"number\">5</span>)   <span class=\"comment\">#格式化整数 '4 + 5 = 9'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:+.2f&#125; &#123;:+.2f&#125;\"</span>.format(<span class=\"number\">3.1415926</span>,<span class=\"number\">-1</span>)  <span class=\"comment\">#带符号保留小数点后两位</span></span><br><span class=\"line\"><span class=\"string\">'+3.14 -1.00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:.0f&#125;\"</span>.format(<span class=\"number\">3.1415926</span>,<span class=\"number\">-1</span>)  <span class=\"comment\">#不带小数提取</span></span><br><span class=\"line\"><span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:0&gt;2d&#125;\"</span>.format(<span class=\"number\">3</span>)  <span class=\"comment\">#补充左边以零补充</span></span><br><span class=\"line\"><span class=\"string\">'03'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:0&lt;2d&#125;\"</span>.format(<span class=\"number\">3</span>)  <span class=\"comment\">#补充右边以零补充</span></span><br><span class=\"line\"><span class=\"string\">'30'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:,&#125;\"</span>.format(<span class=\"number\">30000000</span>)  <span class=\"comment\">#以逗号分割的数字格式</span></span><br><span class=\"line\"><span class=\"string\">'30,000,000'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:.2%&#125;\"</span>.format(<span class=\"number\">0.2657</span>)  <span class=\"comment\">#百分比格式</span></span><br><span class=\"line\"><span class=\"string\">'26.57%'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:.2e&#125;\"</span>.format(<span class=\"number\">10000000000000</span>)  <span class=\"comment\">#指数记发</span></span><br><span class=\"line\"><span class=\"string\">'1.00e+13'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:10d&#125;\"</span>.format(<span class=\"number\">100</span>)  <span class=\"comment\">#右对齐 10个单位的宽度</span></span><br><span class=\"line\"><span class=\"string\">'       100'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:&lt;10d&#125;\"</span>.format(<span class=\"number\">100</span>) <span class=\"comment\">#左对齐</span></span><br><span class=\"line\"><span class=\"string\">'100       '</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"&#123;:^10d&#125;\"</span>.format(<span class=\"number\">100</span>) <span class=\"comment\">#中间对齐</span></span><br><span class=\"line\"><span class=\"string\">'   100</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031811.png\" alt=\"Python字符串案例\" title=\"\" class=\"\">\n                <p>Python字符串案例</p>\n            </figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>在Python2中，普通字符串是以8位ASCII码进行存储的，而在Python3中，所有的字符串都是16位Unicode字符串表示的，使用的语法是在字符串前面加上前缀 u；</li>\n<li>与 C 字符串不同的是，Python 字符串不能被改变，向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</li>\n</ul>\n<h5 id=\"4-3-3-列表-list\"><a href=\"#4-3-3-列表-list\" class=\"headerlink\" title=\"4.3.3 列表(list)\"></a>4.3.3 列表(list)</h5><p>序列于列表是Python中最基本的数据结构,是使用最频繁的数据类型,可以进行的操作包括索引（从0开始）, 切片（slice组合[start:stop,step]）, 加，乘，检查成员;列表中元素的类型可以不相同（关键是还可以是列表）；可以对Python列表的数据项进行修改或更新；</p>\n<p>格式：列表是写在方括号 [] 之间、用逗号分隔开的元素列表，如 变量[头下标:尾下标]，和字符串一样列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031812.png\" alt=\"Python列表\" title=\"\" class=\"\">\n                <p>Python列表</p>\n            </figure></p>\n<p><strong>重点：列表推导（解析）</strong><br>列表推导式（List Comprehensions）也叫列表解析，灵感取值函数式编程语言Haskell，它是一个非常有用和灵活的工具，可以用来动态的创建列表。</p>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[有关A的表达式 for A in B]</span><br><span class=\"line\">如：list1 &#x3D; list(x**2 for x in range(10))  #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81])</span><br></pre></td></tr></table></figure></p>\n<p>案例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:验证列表(LIST)</span></span><br><span class=\"line\">             <span class=\"comment\">#-4 , -3 , -2  , -1   ,0</span></span><br><span class=\"line\">createlist = [<span class=\"number\">1</span>,<span class=\"number\">1.0</span>,<span class=\"literal\">True</span>,<span class=\"string\">\"WEIYIGEEK\"</span>,<span class=\"string\">'c'</span>]</span><br><span class=\"line\">pjlist = [<span class=\"string\">'Python'</span>,<span class=\"string\">'Version 3'</span>]</span><br><span class=\"line\">print(createlist) <span class=\"comment\">#完整列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(createlist[<span class=\"number\">0</span>])   <span class=\"comment\">#输出列表第一个元素</span></span><br><span class=\"line\">print(createlist[<span class=\"number\">1</span>:<span class=\"number\">3</span>])  <span class=\"comment\">#从第二个开始输出到第三个元素</span></span><br><span class=\"line\">print(createlist[<span class=\"number\">-3</span>:]) <span class=\"comment\">#从倒数第3个到倒数第一个元素  (特别值得关注输出从倒数第三个元素后的所有元素)</span></span><br><span class=\"line\">print(pjlist * <span class=\"number\">2</span>)            <span class=\"comment\"># 输出两次列表</span></span><br><span class=\"line\">print(createlist + pjlist)   <span class=\"comment\"># 列表拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">createlist[<span class=\"number\">0</span>] = <span class=\"string\">'This is a demo'</span>  <span class=\"comment\">#与Python字符串不一样的是，列表中的元素是可以改变的</span></span><br><span class=\"line\">print(createlist[:]) <span class=\"comment\">#完整列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">letters = [<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>]</span><br><span class=\"line\">print(letters[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">2</span>])  <span class=\"comment\">#步长实验 1-e  3-l</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031813.png\" alt=\"Python列表案例1\" title=\"\" class=\"\">\n                <p>Python列表案例1</p>\n            </figure></p>\n<p>案例2：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：列表类型详解</span></span><br><span class=\"line\"><span class=\"comment\">#更新列表</span></span><br><span class=\"line\">L=[<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>, <span class=\"string\">'Taobao'</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"L[1]列表修改前：\"</span>,L[<span class=\"number\">1</span>],end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">L[<span class=\"number\">1</span>] = <span class=\"string\">'Weiyigeek'</span></span><br><span class=\"line\">print(<span class=\"string\">\"修改后：\"</span>,L[<span class=\"number\">1</span>],end=<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除列表元素</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> L[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"删除L[2]后的列表 : \"</span>, L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表长度</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (len(L))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表组合</span></span><br><span class=\"line\">print(L+[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表重复</span></span><br><span class=\"line\">print(L * <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是否处于列表中</span></span><br><span class=\"line\">print(<span class=\"string\">'Weiyigeek'</span> <span class=\"keyword\">in</span> L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(len(L)):</span><br><span class=\"line\">    print(x,L[x],len(L[x]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#嵌套列表 类似于二维数组</span></span><br><span class=\"line\">x = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>]]</span><br><span class=\"line\">print(x[<span class=\"number\">0</span>][<span class=\"number\">1</span>])  <span class=\"comment\">#输出2</span></span><br><span class=\"line\">print(x[<span class=\"number\">1</span>][<span class=\"number\">1</span>])  <span class=\"comment\">#输出b#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：列表类型详解</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#V1.创建普通列表</span></span><br><span class=\"line\">L=[<span class=\"string\">'Google'</span>, <span class=\"string\">'Runoob'</span>, <span class=\"string\">'Taobao'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#V2.创建混合列表(嵌套的列表)</span></span><br><span class=\"line\">mix = [<span class=\"number\">1</span>,<span class=\"string\">'list0'</span>,<span class=\"number\">2.3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#V3.创建空列表</span></span><br><span class=\"line\">empty = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#更新列表 （也可以交换数组）</span></span><br><span class=\"line\">print(<span class=\"string\">\"L[1]列表修改前：\"</span>,L[<span class=\"number\">1</span>],end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">L[<span class=\"number\">1</span>] = <span class=\"string\">'Weiyigeek'</span></span><br><span class=\"line\">print(<span class=\"string\">\"修改后：\"</span>,L[<span class=\"number\">1</span>],end=<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除列表元素</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> L[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"删除L[2]后的列表 : \"</span>, L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表长度</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (len(L))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表组合</span></span><br><span class=\"line\">print(L+[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表重复</span></span><br><span class=\"line\">print(L * <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是否处于列表中</span></span><br><span class=\"line\">print(<span class=\"string\">'Weiyigeek'</span> <span class=\"keyword\">in</span> L)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#迭代</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(len(L)):</span><br><span class=\"line\">    print(x,L[x],len(L[x]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#嵌套列表 类似于二维数组</span></span><br><span class=\"line\">print(mix[<span class=\"number\">3</span>][<span class=\"number\">1</span>])  <span class=\"comment\">#输出2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#补充列表解析</span></span><br><span class=\"line\">list1 = [(x,y) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">if</span> y % <span class=\"number\">2</span> != <span class=\"number\">0</span>] <span class=\"comment\">#x能整除的2，而y不能整除2进行显示（x.y）</span></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"><span class=\"comment\">#[(0, 1), (0, 3), (0, 5), (0, 7), (0, 9), (2, 1), (2, 3), (2, 5), (2, 7), (2, 9), (4, 1), (4, 3), (4, 5), (4, 7), (4, 9), (6, 1), (6, 3), (6, 5), (6, 7), (6, 9), (8, 1), (8, 3), (8, 5), (8, 7), (8, 9)]</span></span><br><span class=\"line\"><span class=\"comment\">#等价于下面</span></span><br><span class=\"line\">list2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  (x % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &amp; (y % <span class=\"number\">2</span> !=<span class=\"number\">0</span>):</span><br><span class=\"line\">            list2.append((x,y))</span><br><span class=\"line\">print(list2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表解析进阶</span></span><br><span class=\"line\">list1 = [<span class=\"string\">'1.Jost do it'</span>,<span class=\"string\">'2.一切皆有了能'</span>,<span class=\"string\">'3.让编程改变世界'</span>]</span><br><span class=\"line\">list2 = [<span class=\"string\">'2.李宁'</span>,<span class=\"string\">'3.鱼C工作室'</span>,<span class=\"string\">'1.Nick'</span>]</span><br><span class=\"line\">list3 = [name+<span class=\"string\">':'</span>+title[<span class=\"number\">2</span>:] <span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> list1 <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> list2 <span class=\"keyword\">if</span> name[<span class=\"number\">0</span>] == title[<span class=\"number\">0</span>]]  <span class=\"comment\">#采用列表解析的方式进行 当for循环首字符变例一致的时候输出</span></span><br><span class=\"line\">print(list3)  <span class=\"comment\">#['1.Nick:Jost do it', '2.李宁:一切皆有了能', '3.鱼C工作室:让编程改变世界']</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031814.png\" alt=\"Python列表案例2\" title=\"\" class=\"\">\n                <p>Python列表案例2</p>\n            </figure></p>\n<p><em>注意事项:</em><br>1)列表是可以修改里面的元素的值，如 list[0] = ‘This is a demo’ ;<br>2)Python 列表截取可以接收第三个参数，参数作用是截取的步长以下实例在索引 1 到索引 4 位置并设置为步长为 2（间隔一个位置）来截取字符串；<br>3)通过赋值得到列表，会 <em>随着父列表的顺序的变化而变化</em>,</p>\n<p><br></p>\n<h5 id=\"4-3-4-元组-tuple\"><a href=\"#4-3-4-元组-tuple\" class=\"headerlink\" title=\"4.3.4 元组(tuple)\"></a>4.3.4 元组(tuple)</h5><p>元组tuple是戴上了 <em>枷锁的列表</em>（与数值/字符串类型一样不能随意对其元素改变），由于列表功能强大，需要进行一定的限制，</p>\n<p>格式：元组写在小括号 () 里，元素之间用逗号隔开（也可以直接 tuple = 1,2,3,4 方式）。 </p>\n<p>我们主要从创建和访问元组，更新和删除一个元组，元组相关的操作符进行学习：<br> 拼接操作符(两边的数据类型要一致)<br> 重复操作符( 8 * (8,))<br> 关系操作符(大于、小于等)<br> 成员操作符([in] [not in])<br> 逻辑操作符(not&gt;and&gt;or)</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:验证Tuple元组 , 元组tuple 戴上了枷锁的列表</span></span><br><span class=\"line\">tuple1 = (<span class=\"string\">'abc'</span>,<span class=\"number\">789</span>,<span class=\"number\">2.23</span>,<span class=\"string\">'WEIYIGEEK'</span>,<span class=\"number\">70.2</span>)</span><br><span class=\"line\">pjtuple = (<span class=\"string\">'Python'</span>,<span class=\"string\">'Version 3.7.2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(tuple1[<span class=\"number\">1</span>:<span class=\"number\">3</span>])       <span class=\"comment\">#从下标索引为1到下标索引为2的元素打印出来(注意元素的个数 3 -1 = 2)</span></span><br><span class=\"line\">print(pjtuple * <span class=\"number\">2</span>)       <span class=\"comment\">#重复</span></span><br><span class=\"line\">print(tuple1 + pjtuple)  <span class=\"comment\">#拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#构造包含 0 个或 1 个元素的元组比较特殊</span></span><br><span class=\"line\">tup1 = ()    <span class=\"comment\"># 空元组</span></span><br><span class=\"line\">tup2 = (<span class=\"number\">20</span>,) <span class=\"comment\"># 一个元素，需要在元素后添加逗号</span></span><br><span class=\"line\">print(<span class=\"string\">\"空元组\"</span>,tup1)</span><br><span class=\"line\">print(<span class=\"string\">\"一个元素\"</span>,tup2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#功能：元组tuple 戴上了枷锁的列表</span></span><br><span class=\"line\">tup = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)  <span class=\"comment\">#定义一个元组</span></span><br><span class=\"line\">temp = <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>   <span class=\"comment\">#另外一钟方法也能定义一个元组(值得学习)</span></span><br><span class=\"line\">print(<span class=\"string\">\"类型：\"</span>,type(temp))  <span class=\"comment\">#类型： &lt;class 'tuple'&gt;</span></span><br><span class=\"line\">print(<span class=\"string\">\"tuple创建：\"</span>,<span class=\"number\">8</span> * (<span class=\"number\">8</span>,)) <span class=\"comment\">#(两种方式必须有逗号)  tuple创建： (8, 8, 8, 8, 8, 8, 8, 8)</span></span><br><span class=\"line\">print(<span class=\"string\">\"切片：\"</span>,temp[<span class=\"number\">1</span>:<span class=\"number\">3</span>])  <span class=\"comment\">#切片slice(也可以利用此来拷贝元组) 切片： (2, 3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">temp = (<span class=\"string\">'小明'</span>,<span class=\"string\">'小经'</span>,<span class=\"string\">'小陈'</span>,<span class=\"string\">'小郑'</span>)</span><br><span class=\"line\">temp = temp[:<span class=\"number\">2</span>] + (<span class=\"string\">'郑老师'</span>,) +temp[<span class=\"number\">2</span>:] <span class=\"comment\">#利用切片方式分成两段加入新elements再拼接,注意逗号和类型. #拼接的元组： ('小明', '小经', '郑老师', '小陈', '小郑')</span></span><br><span class=\"line\">print(<span class=\"string\">\"拼接的元组：\"</span>,temp)</span><br><span class=\"line\"><span class=\"keyword\">del</span> temp <span class=\"comment\">#面向对象的编程语言就有回收机制</span></span><br><span class=\"line\">print(tup * <span class=\"number\">2</span>)   <span class=\"comment\">#(1, 2, 3, 4, 1, 2, 3, 4)</span></span><br><span class=\"line\">L = (<span class=\"string\">'Google'</span>, <span class=\"string\">'Taobao'</span>, <span class=\"string\">'Runoob'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;0&#125; , &#123;1&#125; , &#123;2&#125;\"</span>.format(L[<span class=\"number\">-1</span>],L[<span class=\"number\">1</span>],L[<span class=\"number\">0</span>]))  <span class=\"comment\">#格式化输出元组  Runoob , Taobao , Google</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#补充：生成器推导式(genexpr)</span></span><br><span class=\"line\">e = (i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>))</span><br><span class=\"line\">next(e)  <span class=\"comment\"># 1</span></span><br><span class=\"line\">next(e)  <span class=\"comment\"># 2</span></span><br><span class=\"line\">next(e)  <span class=\"comment\"># 3</span></span><br><span class=\"line\">next(e)  <span class=\"comment\"># 4</span></span><br><span class=\"line\">next(e)  <span class=\"comment\"># 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> e:</span><br><span class=\"line\">    print(each, end = <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#补充：实现 1 + 2 + 3 .。。 + 100 = 5050 </span></span><br><span class=\"line\">Sum = sum( i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">101</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Sum =\"</span>,Sum)  <span class=\"comment\">#5050</span></span><br><span class=\"line\"><span class=\"comment\">#####执行结果#####</span></span><br><span class=\"line\"><span class=\"comment\"># 5 6 7 8 9</span></span><br><span class=\"line\"><span class=\"comment\"># Sum = 5050</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031815.png\" alt=\"Python元组案例\" title=\"\" class=\"\">\n                <p>Python元组案例</p>\n            </figure></p>\n<p><em>注意事项:</em><br>1) 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。<br>2) 注意构造包含 0 或 1 个元素的元组的特殊语法规则,及空元组。<br>3) 元组/列表/字符串都属于 sequence（序列）都有共同点：通过索引获取元素（支持负数索引），可通过分片的方法得到一个范围内的元素的集合，有很多的共同的操作符如 <em>重复操作符，拼接操作符，成员关系操作符</em><br>4) 元组不存在列表推导式,而是生成器推导式 genexpr 之中;</p>\n<p><br></p>\n<h5 id=\"4-3-5-集合-set\"><a href=\"#4-3-5-集合-set\" class=\"headerlink\" title=\"4.3.5 集合(set)\"></a>4.3.5 集合(set)</h5><p>集合（set）是一个无序的不重复元素序列，是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员，基本功能是进行成员关系测试和删除重复元素。</p>\n<p>格式：使用大括号 { } 或者 set() 函数创建集合；如 parame = {value01,value02,…} ，set(value);<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">     set2 = set(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure></p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:验证set 集合 (区分大小写)</span></span><br><span class=\"line\"></span><br><span class=\"line\">student = &#123;<span class=\"string\">\"weiyigeek\"</span>,<span class=\"string\">\"WEIYIGEEK\"</span>,<span class=\"string\">\"陶海鹏\"</span>,<span class=\"string\">\"郑老狗\"</span>,<span class=\"string\">\"陈挥铭\"</span>,<span class=\"string\">'WEIYIGEEK'</span>&#125;</span><br><span class=\"line\">print(student) <span class=\"comment\"># 输出集合(随机排序)，重复的元素被自动去掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成员测试</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'weiyigeek'</span> <span class=\"keyword\">in</span> student:</span><br><span class=\"line\">    print(<span class=\"string\">\"weiyigeek 存在!\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"不存在!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set 可以进行集合运算</span></span><br><span class=\"line\">a = set(<span class=\"string\">'abracadabra'</span>)</span><br><span class=\"line\">b = set(<span class=\"string\">'alacazam'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面运算是值得学习的 集合可以进行 差集</span></span><br><span class=\"line\">print(a - b)     <span class=\"comment\"># a 和 b 的差集</span></span><br><span class=\"line\">print(a | b)     <span class=\"comment\"># a 和 b 的并集</span></span><br><span class=\"line\">print(a &amp; b)     <span class=\"comment\"># a 和 b 的交集</span></span><br><span class=\"line\">print(a ^ b)     <span class=\"comment\"># a 和 b 中不同时存在的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#功能：集合set</span></span><br><span class=\"line\">set1 = &#123;<span class=\"string\">'weiyi'</span>,<span class=\"string\">'geek'</span>,<span class=\"number\">12.345</span>&#125;</span><br><span class=\"line\">set2 = set(<span class=\"string\">\"Python\"</span>)</span><br><span class=\"line\">print(type(set1),set1)  <span class=\"comment\">#输出无序</span></span><br><span class=\"line\">print(type(set2),set2)  <span class=\"comment\">#输出无序</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(set1 - set2)   <span class=\"comment\">#类似列表推导式，同样集合支持集合推导式(Set comprehension)  #&#123;'geek', 'weiyi', 12.345&#125;</span></span><br><span class=\"line\">a = &#123;x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'abcasdsadsa'</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">'abc'</span>&#125;  <span class=\"comment\"># 显示 &#123;'d', 's'&#125;字符  , print(a) 集合支持集合推导式(Set comprehension)</span></span><br><span class=\"line\"></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>,<span class=\"number\">3.3</span>,ord(<span class=\"string\">'a'</span>))  <span class=\"comment\">#必须是同一类型</span></span><br><span class=\"line\">print(sum(tuple1))               <span class=\"comment\"># 6.6</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(sorted([<span class=\"number\">23</span>,<span class=\"number\">56</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">96</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">temp = [<span class=\"number\">23</span>,<span class=\"number\">56</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">96</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>]</span><br><span class=\"line\">print(list(reversed(temp)))</span><br><span class=\"line\"></span><br><span class=\"line\">print(list(enumerate([<span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">96</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>])))</span><br><span class=\"line\">print((<span class=\"number\">1</span>,<span class=\"number\">2.3</span>,<span class=\"number\">4</span>))</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031816.png\" alt=\"Python集合案例\" title=\"\" class=\"\">\n                <p>Python集合案例</p>\n            </figure></p>\n<p><em>注意事项:</em><br>1) 与列表推导式类似，同样集合支持集合推导式(Set comprehension)<br>2) 创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 </p>\n<h5 id=\"4-3-6-字典数据-dict\"><a href=\"#4-3-6-字典数据-dict\" class=\"headerlink\" title=\"4.3.6 字典数据(dict)\"></a>4.3.6 字典数据(dict)</h5><p>字典是另一种可变容器模型，且可存储任意类型对象，是集合的表亲；<em>字典与集合两者之间的区别</em> 在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>\n<p>字典是一种映射类型，空字典用 { } 标识，它是一个无序的键(key - 必须唯一不能重复) : 值(value - 使用不可变类型) 的集合。<br>使用构造函数 dict() 可以直接从键值对序列中构建字典，格式如下所示： </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict(([key,value],[key,value])) <span class=\"comment\">#创建字典</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">\"weiyigeek\"</span>,[key,value]&#125;</span><br></pre></td></tr></table></figure>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:Dictionary 字典类型 是一个 Key与Value,与set集合都使用&#123;&#125;来标识</span></span><br><span class=\"line\">d = &#123;key1 : value1, key2 : value2 &#125;</span><br><span class=\"line\">d[<span class=\"string\">'key1'</span>]               /**字典访问方式*/</span><br><span class=\"line\">d[<span class=\"string\">'key1] = value   /**字典赋值*/</span></span><br><span class=\"line\"><span class=\"string\">del d['</span>key1<span class=\"string\">']       /**删除指定字典的键值*/</span></span><br><span class=\"line\"><span class=\"string\">del d                   /**删除字典**/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">createdict = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">createdict['</span>one<span class=\"string\">'] = \"1 - Python3\"</span></span><br><span class=\"line\"><span class=\"string\">createdict['</span>two<span class=\"string\">'] = \"2 - Version 3.7.2\"</span></span><br><span class=\"line\"><span class=\"string\">tinydict = &#123;'</span>name<span class=\"string\">':\"weiyigeek\",'</span>age<span class=\"string\">':21,'</span>love<span class=\"string\">':\"Python3 PHP html5 JAVASCRIPT\"&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">print(createdict)  #输出字典值/value</span></span><br><span class=\"line\"><span class=\"string\">print(createdict['</span>one<span class=\"string\">']) #输出键为 '</span>one<span class=\"string\">' 的值</span></span><br><span class=\"line\"><span class=\"string\">print(tinydict.keys()) #输出所有键</span></span><br><span class=\"line\"><span class=\"string\">print(tinydict.values(),end=\"\\n\\n\") #输出所有值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#构造函数 dict() 可以直接从键值对序列中构建字典</span></span><br><span class=\"line\"><span class=\"string\">cdict1 = dict([('</span>Runoo<span class=\"string\">b', 1), ('</span>Google<span class=\"string\">', 2), ('</span>Taobao<span class=\"string\">', 3)])  #方式1 可迭代对象方式来构造字典</span></span><br><span class=\"line\"><span class=\"string\">cdict2  = dict(Runoob=1, Google=2, Taobao=3)                  #方式2 传入关键字</span></span><br><span class=\"line\"><span class=\"string\">cdict3  =  dict((['</span>a<span class=\"string\">',2],['</span><span class=\"string\">b',3]))                           #方式3 传入内嵌列表</span></span><br><span class=\"line\"><span class=\"string\">cdict4  = dict(zip(['</span>one<span class=\"string\">', '</span>two<span class=\"string\">', '</span>three<span class=\"string\">'], [1, 2, 3]))     #方式4 映射函数方式来构造字典</span></span><br><span class=\"line\"><span class=\"string\">jiecheng = &#123;x: x**2 for x in (2, 4, 6)&#125;              ##方式5 字典推导式</span></span><br><span class=\"line\"><span class=\"string\">print(cdict1)</span></span><br><span class=\"line\"><span class=\"string\">print(cdict2)</span></span><br><span class=\"line\"><span class=\"string\">print(jiecheng)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#补从字典推导式</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; x = &#123;i: i % 2 for i in range(10)&#125;   #这里是计算表达式</span></span><br><span class=\"line\"><span class=\"string\">&#123;0: 0, 1: 1, 2: 0, 3: 1, 4: 0, 5: 1, 6: 0, 7: 1, 8: 0, 9: 1&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; y = &#123;i: i % 2 == 0 for i in range(10)&#125;   #这里是条件表达式</span></span><br><span class=\"line\"><span class=\"string\">&#123;0: True, 1: False, 2: True, 3: False, 4: True, 5: False, 6: True, 7: False, 8: True, 9: False&#125;</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031817.png\" alt=\"Python字典案例\" title=\"\" class=\"\">\n                <p>Python字典案例</p>\n            </figure></p>\n<p><em>注意事项:</em><br>1) 列表是有序的对象集合，字典是无序的对象集合（类似于JSON）<br>2) 键必须是唯一的，但值则不必 ,值可以取任何数据类型，但键必须是不可变的(字符串，数字或元组)<br>3) 不允许同一个键出现两次，创建时如果同一个键被赋值两次，后一个值会覆盖前值。<br>4) 字典也有自己的推导式</p>\n","comments":true,"excerpt":"[TOC]1.Python3简单介绍Python的3.0版本，常被称为Python 3000，或简称Py3k。Python 语言的广泛性 ：Web应用的开发<br>  服务器端编程，具有丰富的Web开发框架，如Django和TurboGears，快速完成一个网站的开发和Web服务。典型如国内的豆瓣、果壳网等；国外的Google、Dropbox等。系统网络运维<br>在运维的工作中，有大量重复性工作的地方，并需要做管理系统、监控系统、发布系统等，将工作自动化起来，提高工作效率，这样的场景Python是一门非常合适的语言。","categories":[{"name":"Python3","path":"api/categories/Python3.json"}],"tags":[{"name":"编程入门学习","path":"api/tags/编程入门学习.json"}]}