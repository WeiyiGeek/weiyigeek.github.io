{"title":"SVN入门安装配置与实践使用","slug":"编程世界/开发必备/版本控制/SVN/SVN入门安装配置与实践使用","date":"2019-03-08T13:48:25.000Z","updated":"2023-02-16T09:40:33.752Z","url":"2019/3-8-371.html","path":"api/articles/2019/3-8-371.html.json","covers":["https://img.weiyigeek.top/2019/20190715110235.png","https://img.weiyigeek.top/2019/20190715104645.png","https://img.weiyigeek.top/2019/20190715104946.png","https://img.weiyigeek.top/2019/20190715105510.png","https://img.weiyigeek.top/2019/20190715105028.png","https://img.weiyigeek.top/2019/20190715105811.png","https://img.weiyigeek.top/2019/20190715105841.png","https://img.weiyigeek.top/2020/1/20200328125652.png","https://img.weiyigeek.top/2020/1/20200328130223.png","https://img.weiyigeek.top/2020/1/20200328130612.png"],"content":"<p>[toc]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><p>什么是SVN?<br>答：Apache Subversion 通常被缩写成 SVN,是一个开源的中心服务器版本控制系統，Subversion 在 2000 年由 CollabNet Inc 开发，现在发展成为 Apache 软件基金会的一个项目，同样是一个丰富的开发者和用户社区的一部分(<code>现在基本已经被git取代</code>);</p>\n<p><em>为什么要使用SVN？</em><br>答：程序员在编写程序的过程中，每个程序员都会生成很多不同的版本，这就需要程序员有效的管理代码，在需要的时候可以迅速，准确取出相应的版本。而这些数据是放置在一个中央资料档案库(repository) 中，这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动；这样您才能把档案恢复到旧的版本, 或是浏览文件的变动历史。 </p>\n<p><em>SVN 术语:</em></p>\n<ul>\n<li>repository(源代码库):源代码统一存放的地方</li>\n<li>Checkout(提取):当你手上没有源代码的时候，你需要从repository checkout一份</li>\n<li>Commit(提交):当你已经修改了代码，你就需要Commit到repository</li>\n<li>Update (更新):从中央服务器中拉取最新的代码到本地;</li>\n</ul>\n<p><em>SVN 的主要功能：</em></p>\n<ul>\n<li>（1）目录版本控制 </li>\n<li>（2）真实的版本历史 </li>\n<li>（3）自动提交 </li>\n<li>（4）纳入版本控管的元数据 </li>\n<li>（5）选择不同的网络层 </li>\n<li>（6）一致的数据处理方式 </li>\n<li>（7）有效的分支(branch)与标签(tag) </li>\n<li>（8）Hackability </li>\n</ul>\n<p><br></p>\n<p><em>SVN 生命周期</em></p>\n<ul>\n<li>1.创建版本库:版本库相当于一个集中的空间，用于存放开发者所有的工作成果,采用<code>Create 操作</code>是用来创建一个新的版本库；</li>\n<li>2.检出:Checkout 操作是用来从版本库创建一个工作副本(开发者私人的工作空间)。</li>\n<li>3.更新:Update 操作是用来更新版本库的使工作副本与版本库进行同步。</li>\n<li>4.执行变更: <ul>\n<li>commit 操作后将被添加进待变更列表中文件提交到版本库中。</li>\n<li>Rename 操作可以更改文件/目录的名字使之版本库也会相对应的更改。</li>\n</ul>\n</li>\n<li>5.复查变化: <ul>\n<li>Status 操作只是提供了一个变动列表，但并不提供变动的详细信息。</li>\n<li>diff 操作来查看这些变动的详细信息。</li>\n</ul>\n</li>\n<li>6.修复错误:revert 操作重置了对工作副本的修改。它可以重置一个或多个文件/目录</li>\n<li>7.解决冲突:合并的时候可能会发生冲突;<ul>\n<li>Merge 操作会自动处理可以安全合并的东西；</li>\n<li>Resolve 操作就是用来帮助用户找出冲突并告诉版本库如何处理这些冲突。</li>\n</ul>\n</li>\n<li>8.提交更改:Commit 操作是用来将更改从工作副本到版本库,并且Commit 是一个原子操作，也就是说要么完全提交成功，要么失败回滚。</li>\n</ul>\n<p><br></p>\n<p><em>问:搭建SVN服务常用什么工具？</em><br>答:Subversion</p>\n<p><em>Subversion是什么？</em><br>它是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，Subversion允许把数据恢复到早期版本，或是检查数据修改的历史，Subversion可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。</p>\n<p><em>TortoiseSVN图标介绍</em></p>\n<ul>\n<li>一个新检出的工作复本使用绿色的对勾重载，表示Subversion状态正常</li>\n<li>在你开始编辑一个文件之后，状态就变成了已修改，而图标重载已变成了红色感叹号。通过这种方式，你可以很容易地看出那些文件从你上次更新工作复本被修改过且需要提交</li>\n<li>如果在提交的过程中出现了冲突，图标就会变成了黄色感叹号</li>\n<li>加号告诉你有一个文件或者目录已经被计划加入到版本控制中</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715110235.png\" alt=\"WeiyiGeek.图标介绍\" title=\"\" class=\"\">\n                <p>WeiyiGeek.图标介绍</p>\n            </figure>\n<p><em>注意事项：</em></p>\n<ul>\n<li>.svn这个隐藏目录记录着两项关键信息：工作文件的基准版本和一个本地副本最后更新的时间戳，千万不要手动修改或者删除这个.svn隐藏目录和里面的文件!!,否则将会导致你本地的工作拷贝(静态试图)被破坏，无法再进行操作。</li>\n</ul>\n<hr>\n\n<h4 id=\"0x01-SVN服务搭建\"><a href=\"#0x01-SVN服务搭建\" class=\"headerlink\" title=\"0x01 SVN服务搭建\"></a>0x01 SVN服务搭建</h4><p>描述:SVN Server即可以在Windows上也可以在Linux中进行安装使用；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y subversion</span><br><span class=\"line\">apt-get install subversion</span><br></pre></td></tr></table></figure></p>\n<p>而我们下面实验是以Windows Server 2008R2环境为主，考虑到只是一些老项目在使用svn而现在大部分的开发也以及采用git进代码管理;</p>\n<p><strong>搭建实例</strong></p>\n<ol>\n<li>首先来下载和搭建SVN服务器,下载地址如下: <a href=\"http://subversion.apache.org/packages.html\" target=\"_blank\" rel=\"noopener\">http://subversion.apache.org/packages.html</a> (根据的系统位数和操作系统下载可以自己选择)<br>个人认为最好用VisualSVN server 服务端和 TortoiseSVN客户端搭配使用,下载地址：<a href=\"https://www.visualsvn.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.visualsvn.com/downloads/</a></li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715104645.png\" alt=\"WeiyiGeek.VisualSVN server\" title=\"\" class=\"\">\n                <p>WeiyiGeek.VisualSVN server</p>\n            </figure>\n<ol start=\"2\">\n<li>VisualSVN server服务端的安装与配置(基本下一步)</li>\n</ol>\n<ul>\n<li>安装选项 VisualSVN Server and Management Console </li>\n<li>标准安装还是专业安装自己根据需求选择</li>\n</ul>\n<ol start=\"3\">\n<li>点击【Finish】即可完成安装。安装完成后,启动VisualSVN Server Manager,如图:<br>窗口的右边看到版本库的一些信息,比如状态,日志,用户认证,版本库等.<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715104946.png\" alt=\"WeiyiGeek.SVN\" title=\"\" class=\"\">\n                <p>WeiyiGeek.SVN</p>\n            </figure>\n</li>\n</ol>\n<p><br></p>\n<ol start=\"4\">\n<li>TortoiseSVN 客服端的安装,需要下载两个一个语言包一个程序安装包，点开上面的<code>TortoiseSVNSVN连接,下载TortoiseSVNserver</code>,下载完成后双击安装如下图：</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715105510.png\" alt=\"WeiyiGeek.安装客户端\" title=\"\" class=\"\">\n                <p>WeiyiGeek.安装客户端</p>\n            </figure>\n<ol start=\"5\">\n<li>安装完成后，在我右键就可以看到TortoiseSVN;说明snv已经安装成功了！安装语言包直接打开下一步即可</li>\n</ol>\n<hr>\n<h4 id=\"0x02-基础使用\"><a href=\"#0x02-基础使用\" class=\"headerlink\" title=\"0x02 基础使用\"></a>0x02 基础使用</h4><p><strong>VisualSVN server</strong> </p>\n<ol>\n<li><p>要建立版本库,需要右键单击左边窗口的Repositores,如下图:在弹出的右键菜单中选择Create New Repository或者新建-&gt;Repository:</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715105028.png\" alt=\"WeiyiGeek.新建仓库\" title=\"\" class=\"\">\n                <p>WeiyiGeek.新建仓库</p>\n            </figure>\n</li>\n<li><p>设置建立的仓库权限：All Subcersion users have read / write access,点击【Finish】即可完成基本创建。</p>\n</li>\n</ol>\n<p><br></p>\n<p><strong>VisualSVN Client</strong> </p>\n<ol>\n<li><p>checkout项目文件:新建或者进入目录下(比如qianduan1)，右键 –&gt; Svn Checkout –&gt; 并且在先在代码浏览器里简历File;</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715105811.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n<li><p>将复制的版本库URL粘贴上,点击【ok】按钮后就可以检索出来，如下：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190715105841.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n<li><p>项目结构<br>建项目结构：E:\\Repositories\\WeiRepository\\TestProject，在Project里面建立.trunk、tags、branches三个目录</p>\n</li>\n</ol>\n<ul>\n<li><p>初始项目就放在trunk主干文件夹里(相当于你真正的项目代码在trunk文件夹里)，当trunk里可以发布第一个版本时,就用SVN创建分支,先放一份在branches/version/里;</p>\n</li>\n<li><p>然后可以把branches/version/里打个包放在tags里,然后继续在主干里开发后面的版本如果之前发布的版本有BUG，就直接在branches/version/里创建修订版本，还是放在branches/version(new)/;</p>\n</li>\n<li><p>tags里面只放置各版本，但不进行修改,branches里放发布版，及发布版对应的修订版，以版本号为子文件夹名，甚至还可以将修订版与trunk里合并;</p>\n</li>\n</ul>\n<p>4.复制档案及目录 branch</p>\n<ul>\n<li>比如:有另外一个复制的目录来进行新的编修，等到确定这个分支的修改已经完毕了，再合并到原来的主要开发版本,这时我只需要为 trunk 这个目录建立一个 branch。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200328125652.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>5.合并动作 merge</p>\n<ul>\n<li><p>假如我们在 branch 分支中对文件进行了修改或增加了文件，要 merge 回 trunk 目录中，方法很简单。以上面的例子来说，我们在 D:\\Secruity\\trunk目录空白处，按下鼠标右键，选择 Merge(合并):</p>\n</li>\n<li><p>前面的 From: 与 To: 是要问您打算从 Branch 中的哪个版本到哪个版本，merge 回原来的 trunk 目录中。因此，From 跟 To 的 URL 字段应当都是指定原来 branch 的目录下。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200328130223.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>6.制作 Tag 或是 Release</p>\n<ul>\n<li>所谓的 Tag 或是 Release 就是一个特别的版本，因为这个版本可能有特别的意义。其实 Tag 与 Release 的作法与 Branch 完全相同。只是 Branch 可能会需要 merge 回原来的 trunk 中，而 tag 及 release 大部分都不需要 merge 回 trunk 中。 </li>\n<li>成功的话，您就在对应的 Tag 目录下面建立了一个 v1.0 的目录。当然，如果您这时到 Tag 的目录下面去，会看不到这个目录，您需要在 Tag 目录下面 update 一下，才能看到它。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200328130612.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<hr>\n<h4 id=\"0x03-命令操作\"><a href=\"#0x03-命令操作\" class=\"headerlink\" title=\"0x03 命令操作\"></a>0x03 命令操作</h4><h5 id=\"1-SVN-Server\"><a href=\"#1-SVN-Server\" class=\"headerlink\" title=\"1.SVN Server\"></a>1.SVN Server</h5><p><strong>（1）版本库创建</strong><br>主要针对于在服务端进行SVN版本库的相关配置：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/svn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#利用svn命令创建版本库</span></span><br><span class=\"line\">svnadmin create /opt/svn/runoob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用命令svnserve启动服务</span></span><br><span class=\"line\">svnserve -d -r 目录 --listen-port 端口号</span><br></pre></td></tr></table></figure></p>\n<p>由于-r 配置方式的不一样，SVN启动就可以有两种不同的访问方式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式一：-r直接指定到版本库(称之为单库svnserve方式)</span></span><br><span class=\"line\">svnserve -d -r /opt/svn/runoob  <span class=\"comment\">#个svnserve只能为一个版本库工作。使用类似这样的URL：svn://192.168.0.1/　即可访问runoob版本库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#authz配置文件</span></span><br><span class=\"line\">[groups]</span><br><span class=\"line\">admin=user1</span><br><span class=\"line\">dev=user2</span><br><span class=\"line\">[/]</span><br><span class=\"line\">@admin=rw</span><br><span class=\"line\">user2=r</span><br></pre></td></tr></table></figure><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式二：指定到版本库的上级目录(称之为多库svnserve方式-常用)</span></span><br><span class=\"line\">svnserve -d -r /opt/svn <span class=\"comment\">#一个svnserve可以为多个版本库工作,使用类似这样的URL：svn://192.168.0.1/runoob　即可访问runoob版本库。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#authz配置文件</span></span><br><span class=\"line\">[groups]</span><br><span class=\"line\">admin=user1</span><br><span class=\"line\">dev=user2</span><br><span class=\"line\">[runoob:/]</span><br><span class=\"line\">@admin=rw</span><br><span class=\"line\">user2=r</span><br><span class=\"line\"></span><br><span class=\"line\">[Secruity:/]</span><br><span class=\"line\">@admin=rw</span><br><span class=\"line\">user2=r</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2) 用户和权限</strong><br>描述:进入<code>/opt/svn/Secruity/conf</code>目录修改默认配置文件配置，包括<code>svnserve.conf、passwd、authz</code>配置相关用户和权限。<br>svn服务配置文件为版本库目录中的文件conf/svnserve.conf<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[general]</span><br><span class=\"line\">anon-access = none</span><br><span class=\"line\">auth-access = write</span><br><span class=\"line\">password-db = /home/svn/passwd</span><br><span class=\"line\">authz-db = /home/svn/authz</span><br><span class=\"line\">realm = tiku</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>anon-access: 控制非鉴权用户访问版本库的权限，取值范围为”write”、”read”和”none”。 即”write”为可读可写，”read”为只读，”none”表示无访问权限。 默认值：read</p>\n</li>\n<li><p>auth-access: 控制鉴权用户访问版本库的权限。取值范围为”write”、”read”和”none”。 即”write”为可读可写，”read”为只读，”none”表示无访问权限。 默认值：write</p>\n</li>\n<li><p>authz-db: 指定权限配置文件名，通过该文件可以实现以路径为基础的访问控制。 除非指定绝对路径，否则文件位置为相对conf目录的相对路径。 默认值：authz</p>\n</li>\n<li><p>realm: 指定版本库的认证域，即在登录时提示的认证域名称。若两个版本库的 认证域相同，建议使用相同的用户名口令数据文件。 默认值：一个UUID(Universal Unique IDentifier，全局唯一标示)。</p>\n</li>\n</ul>\n<p><br/></p>\n<p>用户名口令文件passwd:由svnserve.conf的配置项password-db指定;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[users]</span><br><span class=\"line\">admin = admin</span><br><span class=\"line\">thinker = 123456</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>权限配置文件:由svnserve.conf的配置项authz-db指定，默认为conf目录中的authz<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#[groups]配置段中配置行格式如下：</span></span><br><span class=\"line\">&lt;用户组&gt; = &lt;用户列表&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#版本库路径权限段的段名格式如下：</span></span><br><span class=\"line\">[&lt;版本库名&gt;:&lt;路径&gt;] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基础性示例</span></span><br><span class=\"line\">[groups]</span><br><span class=\"line\">g_admin = admin,thinker</span><br><span class=\"line\"></span><br><span class=\"line\">[admintools:/]</span><br><span class=\"line\">@g_admin = rw</span><br><span class=\"line\">* =</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"built_in\">test</span>:/home/thinker]</span><br><span class=\"line\">thinker = rw</span><br><span class=\"line\">* = r</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-Client-Server\"><a href=\"#2-Client-Server\" class=\"headerlink\" title=\"2.Client Server\"></a>2.Client Server</h5><p><strong>(1)SVN 检出操作</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$svn</span> checkout svn://192.168.0.1/Secruity --username=user01</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2)SVN 提交操作</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看工作副本中的状态。</span></span><br><span class=\"line\">svn status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件readme加到版本控制，等待提交到版本库。</span></span><br><span class=\"line\">svn add readme </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时 readme的状态为A,它意味着这个文件已经被成功地添加到了版本控制中。</span></span><br><span class=\"line\"><span class=\"variable\">$svn</span> status     </span><br><span class=\"line\">A   readme</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#上注释信息来提交</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"SVN readme.\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(3)SVN 解决冲突</strong><br>版本冲突原因：<br>假设 A、B 两个用户都在版本号为 100 的时候，更新了 kingtuns.txt 这个文件，A 用户在修改完成之后提交 kingtuns.txt 到服务器， 这个时候提交成功，这个时候 kingtuns.txt 文件的版本号已经变成 101 了。<br>同时B用户在版本号为 100 的 kingtuns.txt 文件上作修改， 修改完成之后提交到服务器时，由于不是在当前最新的 101 版本上作的修改，所以导致提交失败。</p>\n<p>现版本冲突的解决方法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看更改</span></span><br><span class=\"line\">svn diff </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#提交更改</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"change HelloWorld.html first\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时提交失败，为了避免两人的代码被互相覆盖，Subversion 不允许我们进行这样的操作。</span></span><br><span class=\"line\"><span class=\"comment\">#所以我们在提交更改之前必须先更新工作副本。所以使用 update 命令</span></span><br><span class=\"line\">svn update  <span class=\"comment\">#输入\"mc\",以本地的文件为主。你也可以使用其选项对冲突的文件进行不同的操作</span></span><br><span class=\"line\"><span class=\"comment\"># 选择：（p）推迟，（DF）显示DIFF，（E）编辑文件，（M）合并，</span></span><br><span class=\"line\"><span class=\"comment\"># （MC）我冲突的一面，（TC），其冲突的一面，</span></span><br><span class=\"line\"><span class=\"comment\"># （s）显示全部选项：MC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认是更新到最新的版本(可以指定更新)</span></span><br><span class=\"line\">svn update -r6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时工作副本是和仓库已经同步，可以安全地提交更改了</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"change HelloWorld.html second\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>(4)SVN 版本回退</strong><br>描述:svn revert 操作将撤销任何文件或目录里的局部更改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">svn status</span><br><span class=\"line\"><span class=\"comment\">#通过 svn revert 文件 readme 回归到未修改状态。</span></span><br><span class=\"line\">svn revert readme </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行 revert 操作之后，readme 文件恢复了原始的状态</span></span><br><span class=\"line\">svn status </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#revert 操作不单单可以使单个文件恢复原状， 而且可以使整个目录恢复原状。恢复目录用 -R 命令</span></span><br><span class=\"line\">svn revert -R trunk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#假如我们想恢复一个已经提交的版本怎么办为了消除一个旧版本，我们必须撤销旧版本里的所有更改然后提交一个新版本( reverse merge)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#首先，找到仓库的当前版本，现在是版本 22，我们要撤销回之前的版本，比如版本 21。</span></span><br><span class=\"line\">svn merge -r 22:21 readme</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>(5)SVN 查看历史信息</strong><br>描述:通过svn命令可以根据时间或修订号去除过去的版本，或者某一版本所做的具体的修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#svn log: 用来展示svn 的版本作者、日期、路径等等。</span></span><br><span class=\"line\">svn <span class=\"built_in\">log</span> -r 6:8 <span class=\"comment\">#查看特定的某两个版本之间的信息</span></span><br><span class=\"line\">svn <span class=\"built_in\">log</span> trunk/HelloWorld.html  <span class=\"comment\">#查看某一个文件的版本修改信息</span></span><br><span class=\"line\">svn <span class=\"built_in\">log</span> -l N -v <span class=\"comment\">#目录的信息以及显示限定N条记录的目录信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#svn diff: 用来显示特定修改的行级详细信息。哺乳纲不带任何它将会比较你的工作文件与缓存在 .svn 的\"原始\"拷贝。</span></span><br><span class=\"line\">svn diff -r 3 rule.txt <span class=\"comment\">#比较你的工作拷贝（本地）和版本库中版本号为 3 的文件 rule.txt</span></span><br><span class=\"line\">svn diff -r 2:3 rule.txt <span class=\"comment\">#较版本库与版本库</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#svn cat: 取得在特定版本的某文件显示在当前屏幕。</span></span><br><span class=\"line\">svn cat -r 版本号 rule.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#svn list: 显示一个目录或某一版本存在的文件(可以在不下载文件到本地目录的情况下来察看目录中的文件)。</span></span><br><span class=\"line\">svn list http://192.168.0.1/Secruity</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>(6)SVN分支(重点)</strong><br>比如项目 demo 下有两个小组，svn 下有一个 trunk 版。</p>\n<ul>\n<li>由于客户需求突然变化，导致项目需要做较大改动，此时项目组决定由小组 1 继续完成原来正进行到一半的工作（某个模块），小组 2 进行新需求的开发。</li>\n<li>那么此时我们就可以为小组2建立一个分支，分支其实就是 trunk 版（主干线）的一个copy版，不过分支也是具有版本控制功能的，而且是和主干线相互独立的，当然，到最后我们可以通过（合并）功能，将分支合并到 trunk 上来，从而最后合并为一个项目。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.我们在本地副本中创建一个 my_branch 分支。</span></span><br><span class=\"line\">svn copy trunk/ branches/my_branch</span><br><span class=\"line\">svn status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.提交新增的分支到版本库。</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"add my_branch\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.接着我们就到 my_branch 分支进行开发，切换到分支路径并创建 index.html 文件并将其将加入版本控制，并提交到版本库中。</span></span><br><span class=\"line\">~/svn/Secruity/branches/my_branch<span class=\"comment\"># svn status</span></span><br><span class=\"line\">?       index.html</span><br><span class=\"line\">~/svn/Secruity/branches/my_branch<span class=\"comment\"># svn add index.html </span></span><br><span class=\"line\">A         index.html</span><br><span class=\"line\">~/svn/Secruity/branches/my_branch<span class=\"comment\"># svn commit -m \"add index.html\"</span></span><br><span class=\"line\">Adding         index.html</span><br><span class=\"line\">Transmitting file data .</span><br><span class=\"line\">Committed revision 10.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.切换到 trunk，执行 svn update，然后将 my_branch 分支合并到 trunk 中。</span></span><br><span class=\"line\">svn merge ../branches/my_branch/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5.此时可以看到 trunk 中已经多了 my_branch 分支创建的 index.html 文件。然后将合并好的 trunk 提交到版本库中。</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"add index.html\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>(7) SVN 标签（tag）</strong><br>描述；通过使用 tag 的概念，我们可以给某一个具体版本的代码一个更加有意义的名字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.我们在本地工作副本创建一个 tag。</span></span><br><span class=\"line\">svn copy trunk/ tags/v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.新的目录将会被创建在 tags 目录下。</span></span><br><span class=\"line\">ls tags/</span><br><span class=\"line\">ls tags/v1.0/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.查看状态</span></span><br><span class=\"line\">svn status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.提交tag内容</span></span><br><span class=\"line\">svn commit -m <span class=\"string\">\"tags v1.0\"</span></span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[toc]","categories":[{"name":"版本控制","path":"api/categories/版本控制.json"}],"tags":[{"name":"svn","path":"api/tags/svn.json"}]}