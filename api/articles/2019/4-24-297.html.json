{"title":"JAVA入门学习四","slug":"编程世界/Java/JAVA入门学习四","date":"2019-04-24T05:34:30.000Z","updated":"2022-03-29T05:39:06.303Z","url":"2019/4-24-297.html","path":"api/articles/2019/4-24-297.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190819083134.png"],"content":"<p>[TOC]<br><a id=\"more\"></a></p>\n<h4 id=\"JAVA包-package-与Java-API\"><a href=\"#JAVA包-package-与Java-API\" class=\"headerlink\" title=\"JAVA包(package)与Java API\"></a>JAVA包(package)与Java API</h4><p>面向对象:</p>\n<ul>\n<li>Java包Package使用</li>\n<li>权限修饰符</li>\n<li>匿名内部类</li>\n</ul>\n<p>Java API:</p>\n<ul>\n<li>概述了解</li>\n<li>Object类介绍与使用</li>\n</ul>\n<p><br></p>\n<h4 id=\"Java包Package\"><a href=\"#Java包Package\" class=\"headerlink\" title=\"Java包Package\"></a>Java包Package</h4><p>package关键字的概述及作用：</p>\n<p><em>为什么要有包</em>?<br>答：将字节码(.class)进行分类存放,防止重复的类名冲突</p>\n<p><em>包又是什么</em>?<br>答:包其实就是文件夹</p>\n<p>包的名称写法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.weiyigeek  <span class=\"comment\">#一般是域名倒着写多级包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#包的举例：</span></span><br><span class=\"line\">  <span class=\"comment\"># 学生：增加，删除，修改，查询</span></span><br><span class=\"line\">  <span class=\"comment\"># 老师：增加，删除，修改，查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从上面给出的案例我们可以有两种方案</span></span><br><span class=\"line\"><span class=\"comment\">#方案1：按照功能分</span></span><br><span class=\"line\">com.weiyi.add</span><br><span class=\"line\">  AddStudent</span><br><span class=\"line\">  AddTeacher</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方案2：按照模块分</span></span><br><span class=\"line\">com.hweiyigeek.teacher</span><br><span class=\"line\">  AddTeacher</span><br><span class=\"line\">  DeleteTeacher</span><br><span class=\"line\">  UpdateTeacher</span><br><span class=\"line\">  FindTeacher</span><br></pre></td></tr></table></figure></p>\n<p><br><br>包的定义格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package 包名;  <span class=\"comment\">#注意这里一般采用多级包用.分开即可</span></span><br><span class=\"line\">package com.weiyi.demo</span><br></pre></td></tr></table></figure><br>定义包的注意事项</p>\n<ul>\n<li>A:package语句必须是程序的第一条可执行的代码</li>\n<li>B:package语句在一个java文件中只能有一个</li>\n<li>C:如果没有package默认表示无包名</li>\n</ul>\n<p><em>示例1.手动编译包中的类</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Step1.Java代码示例</span></span><br><span class=\"line\">package com.weiyi;  //字节码文件应该放入com/weiyi/路径中</span><br><span class=\"line\">class Demo1 &#123;</span><br><span class=\"line\">  public static void main(String[] args)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Hello world! Java Package\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Step2.编译运行</span></span><br><span class=\"line\">&gt; javac -encoding UTF-8 .\\Demo1.java</span><br><span class=\"line\">&gt; mkdir com/weiyi</span><br><span class=\"line\">&gt; copy Demo1.java com/weiyi/  <span class=\"comment\">#将编译生成的字节码文件复制到包路径中</span></span><br><span class=\"line\">&gt; java com.weiyi.Demo1  <span class=\"comment\">#注意这里运行的时候需要包名+类名称</span></span><br><span class=\"line\">Hello world! Java Package</span><br></pre></td></tr></table></figure></p>\n<p><em>如何编译带包的类编译和运行?</em></p>\n<ul>\n<li>a:javac编译的时候带上-d即可 <code>javac -d . HelloWorld.java</code></li>\n<li>b:通过java命令执行 <code>java 包名.HellWord</code></li>\n</ul>\n<p><br></p>\n<h5 id=\"import-关键字\"><a href=\"#import-关键字\" class=\"headerlink\" title=\"import 关键字\"></a>import 关键字</h5><p>描述：有个这个关键字就是让有包的类对调用者可见,不用写全类名了;<br>比如我们前面在进行Scanner类示例化的对象来接收用户输入;</p>\n<p>导包格式 import 包名;<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner</span><br><span class=\"line\">Scanner sc = <span class=\"keyword\">new</span> java.util.Scanner(System.in)</span><br></pre></td></tr></table></figure></p>\n<p>示例2.不同包下类之间的访问手动编译和运行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#com.weiyi 包</span></span><br><span class=\"line\">package com.weiyi;</span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">  public String name;</span><br><span class=\"line\">  public int age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#构造方法</span></span><br><span class=\"line\">  public <span class=\"function\"><span class=\"title\">Person</span></span>()&#123;&#125;</span><br><span class=\"line\">  public Person(String name,int age)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  public String <span class=\"function\"><span class=\"title\">getName</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  public int <span class=\"function\"><span class=\"title\">getAge</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#com.demo 包</span></span><br><span class=\"line\">package com.demo;</span><br><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">  public static void main(String[] args)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    com.weiyi.Person p = new com.weiyi.Person(<span class=\"string\">\"张三\"</span>,23);  <span class=\"comment\">#注意这里是包名+类型进行调用其他包里 且类必须是公共类</span></span><br><span class=\"line\">    System.out.println(p.getName()+<span class=\"string\">\"---\"</span>+p.getAge());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#编译步骤:</span></span><br><span class=\"line\">javac -encoding UTF-8 -d . Person.java  <span class=\"comment\">#先编译需要调用的包和类文件</span></span><br><span class=\"line\">javac -encoding UTF-8 -d . Demo.java  <span class=\"comment\">#在编译主函数类</span></span><br><span class=\"line\">java com.demo.Demo   <span class=\"comment\">#执行编译后的java文件注意任然带上包名称+类名称</span></span><br><span class=\"line\">张三---23</span><br></pre></td></tr></table></figure></p>\n<p>示例3.import关键字使用案例<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"><span class=\"comment\">//import java.util.*;  //*通配符会到该包下挨个匹配上就导入,即该包下的所以类都是对我们可见的;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;  <span class=\"comment\">//推荐方式(开发中都是导入具体类)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Package_import</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"[导包学习]\\n请输入您的名字:\"</span>);</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    String name = sc.next();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"您的名字是:\"</span>+name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">[导包学习]</span><br><span class=\"line\">请输入您的名字:WeiyiGeek</span><br><span class=\"line\">您的名字是:WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>面试题:package(一个java文件中只有一个),import(可以有多个导入一个包就写一个),class之间有没有顺序关系;</li>\n<li>导入是到类的名称虽然可以最后写*但是不建议这么做,当您使用到包里面的类就定义包+类名提升效率;</li>\n</ul>\n<p><br></p>\n<h5 id=\"四种权限修饰符的测试\"><a href=\"#四种权限修饰符的测试\" class=\"headerlink\" title=\"四种权限修饰符的测试\"></a>四种权限修饰符的测试</h5><p>四种权限修饰符表格:</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>本类</th>\n<th>同一个包下(子类和无关类)</th>\n<th>不同包下(子类就是继承)</th>\n<th>不同包下(无关类)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>private</td>\n<td>Y</td>\n<td></td>\n</tr>\n<tr>\n<td>默认</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>protected</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n</tr>\n<tr>\n<td>public</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<p><strong>类及其组成所使用的常见修饰符</strong></p>\n<ul>\n<li><p>A:修饰符：</p>\n<ul>\n<li>权限修饰符：private，默认的，protected，public</li>\n<li>状态修饰符：static，final</li>\n<li>抽象修饰符：abstract</li>\n</ul>\n</li>\n<li><p>B:类：用的最修饰符的就是 public</p>\n<ul>\n<li>权限修饰符：默认修饰符，public</li>\n<li>状态修饰符：final (设置后不能被子类继承)</li>\n<li>抽象修饰符：abstract</li>\n</ul>\n</li>\n<li><p>C:成员变量：用的最多的就是 private </p>\n<ul>\n<li>权限修饰符：private，默认的，protected，public</li>\n<li>状态修饰符：static，final (设置后成员变量是常量)</li>\n</ul>\n</li>\n<li><p>D:构造方法：用的最多的就是：public</p>\n<ul>\n<li>权限修饰符：private，默认的，protected，public</li>\n</ul>\n</li>\n<li><p>E:成员方法：用的最多的就是public</p>\n<ul>\n<li>权限修饰符：private，默认的，protected，public</li>\n<li>状态修饰符：static，final (设置后成员方法不能重写)</li>\n<li>抽象修饰符：abstract</li>\n</ul>\n</li>\n<li><p>F:除此以外的组合规则：</p>\n<ul>\n<li>成员变量：public static final 接口</li>\n<li>成员方法：<ul>\n<li>public static <ul>\n<li>public abstract</li>\n</ul>\n</li>\n<li>public final</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#com.weiyi  (外部包类)</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi;</span><br><span class=\"line\"><span class=\"comment\">//#注意这里的修饰权限</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String love;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo1</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo1</span><span class=\"params\">(String love)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.love = love;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLove</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> love;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//#关键点 （protected）的修饰符</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">\"这里是不能被不同包下的无关类访问的!\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//com.weiye (集成外部包的类)</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiye;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Demo1; <span class=\"comment\">//#注意这里需要导包使用</span></span><br><span class=\"line\"><span class=\"comment\">//#继承其他包里面类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo2</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo2</span><span class=\"params\">(String love)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//引用父类构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(love);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"外部包继承类,访问父类中protected受保护的print方法!\"</span>);</span><br><span class=\"line\">    print();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//com.main (入口类)</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.main;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Demo1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiye.Demo2;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.不同包下(无关类)不能访问外部包下的除了public修饰的类和方法</span></span><br><span class=\"line\">    Demo1 demo1 = <span class=\"keyword\">new</span> Demo1(<span class=\"string\">\"计算机\"</span>);</span><br><span class=\"line\">    demo1.getLove();</span><br><span class=\"line\">    <span class=\"comment\">//demo1.print()  #将会报错由于不同包下的无关类不能调用外部包里面受保护的类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例2.不同包下(继承子类)可以访问外部包下受保护的类protected</span></span><br><span class=\"line\">    Demo2 demo2 = <span class=\"keyword\">new</span> Demo2(<span class=\"string\">\"运动\"</span>);</span><br><span class=\"line\">    demo2.method();     <span class=\"comment\">//关键点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>运行与执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@WeiyiGeek F:\\Study-Promgram\\JAVADemo\\src]<span class=\"variable\">$javac</span> -encoding utf-8 -d . Demo1.java</span><br><span class=\"line\">[root@WeiyiGeek F:\\Study-Promgram\\JAVADemo\\src]<span class=\"variable\">$javac</span> -encoding utf-8 -d . Demo2.java</span><br><span class=\"line\">[root@WeiyiGeek F:\\Study-Promgram\\JAVADemo\\src]<span class=\"variable\">$javac</span> -encoding utf-8 -d . Demo3.java</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$java</span> com.main.Demo3</span><br><span class=\"line\">外部包继承类,访问父类中protected受保护的<span class=\"built_in\">print</span>方法!</span><br><span class=\"line\">这里是不能被不同包下的无关类访问的!</span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"导包之键盘输入实例\"><a href=\"#导包之键盘输入实例\" class=\"headerlink\" title=\"导包之键盘输入实例\"></a>导包之键盘输入实例</h5><p><em>Q:如何实现键盘录入呢？</em><br>答：键盘输入数据让程序更有灵活性,更符合开发流程可以进行调试;</p>\n<ul>\n<li>导包 ：JAVA 底层提供的类库里面的类，就需要将此类的位置导入到JAVA文件中：import java.util.Scanner;<ul>\n<li>1.语法（syntax）：类名 变量名 = new 类名();</li>\n<li>创建键盘录入对象 Scanner sn = new Scanner(System.in);</li>\n<li>2.获取控制台的值,通过对象获取数据<br>sn.next(); 获取控制台输入的字符串类型的值<br>sn.nextInt(); 获取控制台输入的整形类型的值<br>sn.nextFloat(); 获取控制台输入的整形类型的值</li>\n<li>3.采用println()进行输出</li>\n<li>4.将sn进行关闭,释放内存 sn.close();</li>\n</ul>\n</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 键盘输入案例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; <span class=\"comment\">//导入包</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Input</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);  <span class=\"comment\">//#实例化Scanner类eclipse控制器输入输出类型</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个整数a: \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = sc.nextInt();   <span class=\"comment\">//将键盘输入的值存储进入到x中 （整形）</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个整数b: \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1 = sc.nextInt();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入您的名字：\"</span>);</span><br><span class=\"line\">        String n = sc.next(); <span class=\"comment\">//字符串类型</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"名字为\"</span>+n+<span class=\"string\">\" ,a + b = \"</span>+(x+x1));</span><br><span class=\"line\">        sc.close();  <span class=\"comment\">//释放内存</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//########### 执行案例 ###############</span></span><br><span class=\"line\"><span class=\"comment\">// 请输入一个整数a: 110</span></span><br><span class=\"line\"><span class=\"comment\">// 请输入一个整数b:120</span></span><br><span class=\"line\"><span class=\"comment\">// 请输入您的名字：WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\">// 名字为WeiyiGeek ,a + b = 230</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>供外部使用的类不能采用private的修饰符,因为这样做无意义</li>\n</ul>\n<p><br></p>\n<h5 id=\"静态导入包\"><a href=\"#静态导入包\" class=\"headerlink\" title=\"静态导入包\"></a>静态导入包</h5><p>概述:静态导入是JDK1.5新特性,它是导入类中的静态方法,在开发中基本不用但是还是要学习;<br>格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static 包名….类名.方法名;  <span class=\"comment\">#可以直接导入到方法的级别</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基础实例</span></span><br><span class=\"line\">import static java.util.Arrays.sort; <span class=\"comment\">#静态导致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以直接调用</span></span><br><span class=\"line\">int[] arr = &#123;11,588,687,47,10&#125;</span><br><span class=\"line\">sort(arr);  <span class=\"comment\">#//直接使用静态方法名称即可</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>方法必须是静态的,但是<code>如果有多个同名的静态方法，容易不知道使用谁?</code><ul>\n<li>这个时候要使用，必须加前缀。由此可见意义不大，所以一般不用但是要能看懂。</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4><p>描述: 在内中定义类我们叫做内部类</p>\n<p><em>内部类访问特点:</em></p>\n<ul>\n<li>a:内部类可以直接访问外部类的成员，包括私有private。</li>\n<li>b:外部类要访问内部类的成员，必须创建对象object。</li>\n<li>c:实例化格式: 外部类名.内部类名 对象名 = 外部类对象.内部类对象; (注意有两个new 关键字)</li>\n</ul>\n<p><em>成员私有内部类</em>:</p>\n<ul>\n<li>a:其他类无法直接访问外部类中私有成员内部类, 需要访问内部类的上级(外部)类中的公共方法进行调用;</li>\n</ul>\n<p><em>静态成员内部类（static）</em></p>\n<ul>\n<li>成员内部类被静态修饰后的访问方式是:外部类名.内部类名 对象名 = 外部类名.内部类对象;(就不用多加一个new了)</li>\n</ul>\n<p>案例演示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_InnerClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.外部类要访问内部类必须是 外部类.内部类 来创建对象 (内部类极其访问特点)</span></span><br><span class=\"line\">    Outer.Inner demo = <span class=\"keyword\">new</span> Outer().new Inner(); <span class=\"comment\">//内部类对象 (关键点)</span></span><br><span class=\"line\">    demo.method();  <span class=\"comment\">//调用内部类方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例2.其他类无法访问外部类中私有成员内部类</span></span><br><span class=\"line\">    <span class=\"comment\">//Outer.PriInner demo1 = new Outer().new PriInner();   //会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.可以采用Outer类中的公用方法，调用其私有内部类中的方法;</span></span><br><span class=\"line\">    Outer demo2 = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">    demo2.print();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例4.实例化外部类中的静态成员内部类</span></span><br><span class=\"line\">    <span class=\"comment\">//外部类.内部类 对象名称 = new 外部类.内部类对象;</span></span><br><span class=\"line\">    Outer.StaInner demo3 = <span class=\"keyword\">new</span> Outer.StaInner(); <span class=\"comment\">//关键点</span></span><br><span class=\"line\">    demo3.method();</span><br><span class=\"line\">    <span class=\"comment\">//还有一种情况静态的内部类和内部类中的静态方法</span></span><br><span class=\"line\">    Outer.StaInner.print();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//关键点：创建内部类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//内部类可以看做外部类的成员</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number=<span class=\"number\">1024</span>;</span><br><span class=\"line\">  <span class=\"comment\">//(1)内部类的 公共(默认)</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"内部类: 类中类!\\n\"</span>+<span class=\"string\">\"内部类可以访问外部类的私有成员number:\"</span>+number);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//(2)内部类的 私有</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriInner</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"私有内部类的公共方法\\n\"</span>+<span class=\"string\">\"外部类是无法访问的,除非为本类公共方法调用！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//本类的公共方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"私有内部类: 外部类中的公共方法 - 调用私有的内部类里面的方法\"</span>);</span><br><span class=\"line\">    PriInner i = <span class=\"keyword\">new</span> PriInner();</span><br><span class=\"line\">    i.method();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//############ 分割 #############</span></span><br><span class=\"line\">  <span class=\"comment\">//(3)静态内部类</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaInner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"静态内部类: 以进入内部类之中\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//还有一种:静态内部类中的静态方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"静态内部类: -&gt; 静态方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//###执行结果#####</span></span><br><span class=\"line\">公共内部类: 类中类!</span><br><span class=\"line\">内部类可以访问外部类的私有成员number:<span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">私有内部类: 外部类中的公共方法 - 调用私有的内部类里面的方法</span><br><span class=\"line\">私有内部类的公共方法</span><br><span class=\"line\">外部类是无法访问的,除非为本类公共方法调用</span><br><span class=\"line\"></span><br><span class=\"line\">静态内部类: 以进入内部类之中</span><br><span class=\"line\">静态内部类: -&gt; 静态方法</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>成员内部类的面试题:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//内部类之所以能获取到外部类成员，是因为他可以获取到外部类的引用外部类名.this</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClassTest</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Outer.Inner oi = <span class=\"keyword\">new</span> Outer().new Inner();</span><br><span class=\"line\">    oi.show();  <span class=\"comment\">//调用内部中的方法</span></span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//要求：使用已知的变量在控制台输出30，20，10。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num = <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"comment\">//关键点</span></span><br><span class=\"line\">      System.out.println(num);            <span class=\"comment\">//(1)就近原则方法中的变量;</span></span><br><span class=\"line\">      System.out.println(<span class=\"keyword\">this</span>.num);       <span class=\"comment\">//(2)类中的成员变量</span></span><br><span class=\"line\">      System.out.println(Outer.<span class=\"keyword\">this</span>.num); <span class=\"comment\">//(3)外部类.成员变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h5><p>描述: 在外部类中成员方法之中声明的类,我们叫做局部内部类;局部内部类访问局部变量必须用final修饰;</p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#####局部内部类访问局部变量的问题#####</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_localInnerClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Outer o = <span class=\"keyword\">new</span> Outer();</span><br><span class=\"line\">        o.method();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//外部类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//公共的成员方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> number = <span class=\"number\">1024</span>;</span><br><span class=\"line\">        <span class=\"comment\">//外部类中的成员方法声明的类,我们叫做局部内部类;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"局部内部类(调用方法中的成员变量必须加上final使之成为常量)：\"</span>+number);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//局部内部类的调用必须在同一个成员方法中实例化</span></span><br><span class=\"line\">        Inner i = <span class=\"keyword\">new</span> Inner();<span class=\"comment\">//局部内部类,只能在其所在的方法中访问;</span></span><br><span class=\"line\">        i.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">E:\\githubProject\\Study-Promgram\\JAVADemo\\src&gt;javac -encoding UTF-<span class=\"number\">8</span> Demo_localInnerClass.java</span><br><span class=\"line\">E:\\githubProject\\Study-Promgram\\JAVADemo\\src&gt;java Demo_localInnerClass</span><br><span class=\"line\">局部内部类(调用方法中的成员变量必须加上<span class=\"keyword\">final</span>使之成为常量)：<span class=\"number\">1024</span></span><br></pre></td></tr></table></figure><br><br></p>\n<p><em>为什么局部内部类在访问他所在方法中的局部变量必须用final修饰?</em></p>\n<ul>\n<li>因为当调用这个方法时<code>局部变量如果没有用final修饰</code>,他的生命周期和方法的生命周期是一样的,当方法弹栈,这个局部变量也会消失；</li>\n<li>那么如果局部内部类对象还没有马上消失想用这个局部变量就没有了;</li>\n<li>如果用final修饰会在类加载的时候进入常量池,即使方法弹栈,常量池的常量还在也可以继续使用;</li>\n<li>在jdk1.8中不加final也能使用,实际上没有手动添加系统底层也会默给你final;</li>\n</ul>\n<p><em>注意事项:</em></p>\n<ul>\n<li>用画图表示:栈(stack) 堆(heap) 方法区(function area)[常量池]    <ul>\n<li>栈(Stack) : 方法使用进栈,结束则弹栈</li>\n<li>堆(Heap) : 实例化对象(有一个地址栈指向它)</li>\n<li>方法区 : 将类加载进入内存之中;</li>\n<li>常量池属于方法区的一部分(比如上面被final修饰的变量或者方法将存入其中);</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n<h5 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h5><p>描述: 匿名内部类其实就是内部类的简化写法。<br>前提: 存在一个类或者interface接口（<code>该类可以是具体类也可以是抽象类</code>）本质是一个继承了该类或者实现了该接口的子类匿名<code>对象</code>。<br>格式:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new 类名() 继承这个类</span></span><br><span class=\"line\"><span class=\"comment\">//new 接口名() 实现这个接口（重写方法）</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> 类名或者接口名()&#123;</span><br><span class=\"line\">  重写方法;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>建议：<code>匿名内部类只针对于重写一个方法时候使用</code>,对于多个方法还是建议采用有名字的内部类;</p>\n<p>基础实例:匿名内部类的使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnonmouseInnerClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    Outer demo = <span class=\"keyword\">new</span> Outer();  <span class=\"comment\">//外部类</span></span><br><span class=\"line\">    demo.method();  <span class=\"comment\">//调用匿名内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名类实现的接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名类的外部类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//建立一个公共的方法,匿名内部类重写多个方法调用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//简化版的内部类(匿名内部类)</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Inter() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//重写实现接口中第一个方法</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匿名内部类: 重写实现接口中第一个方法\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//重写实现接口中第一个方法</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匿名内部类: 重写实现接口中第二个方法\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.show1();  <span class=\"comment\">//方式1(关键点)实现两个方法输出需要上面这块代码重写一次;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方式2:此种方法存在弊端</span></span><br><span class=\"line\">    Inter i = <span class=\"keyword\">new</span> Inter()&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匿名内部类: 重写实现接口中第一个方法\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//重写实现接口中第一个方法</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"匿名内部类: 重写实现接口中第二个方法\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">/** 弊端的产生:写一个自定义的方法</span></span><br><span class=\"line\"><span class=\"comment\">      public void show3() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(\"匿名内部类: 自定义的方法\");</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">      **/</span></span><br><span class=\"line\">    &#125;;  <span class=\"comment\">//注意此处需要 \";\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i.show1(); <span class=\"comment\">//编译看接口中定义的show1方法,运行看子类中的show1方法</span></span><br><span class=\"line\">    i.show2(); <span class=\"comment\">//编译看接口中定义的show2方法,运行看子类中的show2方法</span></span><br><span class=\"line\">    <span class=\"comment\">//i.show3(); //这里不能采用这样的形式由于编译看父类接口中定义的方法，而接口中没有这样的方法，所以会产生错误;</span></span><br><span class=\"line\">    <span class=\"comment\">//如果向下强转需要与子类的类名,而这里是匿名内部类;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$javac</span> -encoding UTF-8 AnonmouseInnerClass.java</span><br><span class=\"line\"><span class=\"variable\">$java</span> AnonmouseInnerClass</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">匿名内部类: 重写实现接口中第一个方法</span><br><span class=\"line\">匿名内部类: 重写实现接口中第一个方法</span><br><span class=\"line\">匿名内部类: 重写实现接口中第二个方法</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>匿名内部类在开发中的应用</p>\n<ul>\n<li>传递参数;</li>\n<li>本质把匿名内部类看作一个对象;</li>\n</ul>\n<p>基础实例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_AnonmouseClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//实例1.调用PersonDemo中的method方法</span></span><br><span class=\"line\">      PersonDemo pd = <span class=\"keyword\">new</span> PersonDemo();</span><br><span class=\"line\">      pd.method(<span class=\"keyword\">new</span> Student());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//实例2.匿名内部类实现参数传递</span></span><br><span class=\"line\">      pd.method(<span class=\"keyword\">new</span> Person()&#123;</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">              System.out.println(<span class=\"string\">\"匿名内部类的调用!\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//抽象类(abstract)或者接口(interface)都可以;</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//有名称的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Person p)</span>  <span class=\"comment\">//Person p = new Student</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    p.show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承重写</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"有名称的类\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"有名称的类型调用!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src&gt; javac -encoding UTF-8 Demo_AnonmouseClass.java</span><br><span class=\"line\">src&gt; java Demo_AnonmouseClass</span><br><span class=\"line\">有名称的类</span><br><span class=\"line\">有名称的类型调用!</span><br><span class=\"line\">匿名内部类的调用!</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>基础示例:匿名内部类的面试题<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_AnonmouseInnerClass1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//方式1：由于show方法是静态</span></span><br><span class=\"line\">    <span class=\"comment\">//链式编程每次调用方法后还能继续调用方法,证明调用方法返回的是对象;</span></span><br><span class=\"line\">    Outer.method().show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方式2:强制转换</span></span><br><span class=\"line\">    Inter i = Outer.method();</span><br><span class=\"line\">    i.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匿名内部类要实现的接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//外部类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Inter <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意这里返回的是一个匿名内部类，将重写接口方法（相当于是一个子类）</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Inter()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"匿名内部类的面试题!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac -encoding utf-8 Demo_AnonmouseInnerClass1.java</span><br><span class=\"line\">java Demo_AnonmouseInnerClass1</span><br><span class=\"line\">匿名内部类的面试题!</span><br><span class=\"line\">匿名内部类的面试题!</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Java-API\"><a href=\"#Java-API\" class=\"headerlink\" title=\"Java API\"></a>Java API</h4><p>描述: API(Application Programming Interface)应用程序编程接口,我们可以参考JDK帮助文档;</p>\n<p>简单的说:Java API就是Java提供给我们使用的类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190819083134.png\" alt=\"WeiyiGeek.API\" title=\"\" class=\"\">\n                <p>WeiyiGeek.API</p>\n            </figure>\n<p>帮助文档: <a href=\"https://blog.fondme.cn/apidoc/jdk-1.8-google/\" target=\"_blank\" rel=\"noopener\">https://blog.fondme.cn/apidoc/jdk-1.8-google/</a></p>\n<p><br></p>\n<h5 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h5><p>概述: 类层次结构的根类,所有类都直接或者间接的继承自该类;</p>\n<p><em>回想面向对象中为什么说？</em><br>比如我们类中的构造方法 public Object(),即子类的构造方法默认访问的是父类的无参构造方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Object</span><br><span class=\"line\">Class Object是类Object结构的根。每个班都有Object作为超类,所有对象（包括数组）都实现了这个类的方法。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Object类的hashCode()方法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public int hashCode() 返回对象的哈希码值。 </span><br><span class=\"line\"><span class=\"comment\">#Object的hashCode()默认是返回内存地址的，但是hashCode()可以重写，所以hashCode()不能代表内存地址的不同</span></span><br><span class=\"line\">System.identityHashCode(Object)  <span class=\"comment\">#方法可以返回对象的内存地址,不管该对象的类是否重写了hashCode()方法。</span></span><br></pre></td></tr></table></figure><br>支持这种方法是为了散列表,如HashMap提供的那样;返回该对象的哈希码值。默认情况下，<code>该方法会根据对象的地址来计算</code>。</p>\n<p><br></p>\n<p><strong>Object类的getClass()方法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final class getClass()  <span class=\"comment\">#返回此Object的运行时类。 </span></span><br><span class=\"line\"><span class=\"comment\">#返回的类对象是被表示类的static synchronized方法锁定的对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">实际结果的类型是Class&lt;? extends |X|&gt;其中|X|是静态类型上其表达的擦除getClass被调用</span><br><span class=\"line\"><span class=\"comment\">#可以通过Class类中的一个方法，获取对象的真实类的全名称 public String getName()</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Object类的toString()方法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String toString()  <span class=\"comment\">#返回该对象的字符串表示,由于默认情况下的数据对我们来说没有意义，一般建议重写该方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> getClass().getName() + <span class=\"string\">\"@\"</span> + Integer.toHexString(hashCode());</span><br><span class=\"line\">  <span class=\"comment\">#左边类名 @ hashcode的十六机制整数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意事项：</p>\n<ul>\n<li>toString 方法作用可以更方便的显示属性值;</li>\n<li>getAttr 方法是为了获取值,可以显示也可以赋值或其他操作;</li>\n</ul>\n<p><br></p>\n<p><strong>Object类的equals()方法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean equals(Object obj)  <span class=\"comment\">#指示其他某个对象是否与此对象“相等”。 </span></span><br><span class=\"line\"></span><br><span class=\"line\">equals方法在非空对象引用上实现等价关系：</span><br><span class=\"line\">自反性：对于任何非空的参考值x,x.equals(x)应该返回<span class=\"literal\">true</span> 。</span><br><span class=\"line\">它是对称的：对于任何非空引用值x和y, x.equals(y)应该返回<span class=\"literal\">true</span>当且仅当y.equals(x)回报<span class=\"literal\">true</span> 。</span><br><span class=\"line\">传递性：对于任何非空引用值x,y和z,如果x.equals(y)回报<span class=\"literal\">true</span>个y.equals(z)回报<span class=\"literal\">true</span> ，然后x.equals(z)应该返回<span class=\"literal\">true</span> 。</span><br><span class=\"line\">它是一致的: 对于任何非空引用值x和y,多次调用x.equals(y)始终返回<span class=\"literal\">true</span>或始终返回<span class=\"literal\">false</span> ，没有设置中使用的信息equals比较上的对象被修改。对于任何非空的参考值x ， x.equals(null)应该返回<span class=\"literal\">false</span> 。</span><br></pre></td></tr></table></figure>\n<p><em>注意事项：</em></p>\n<ul>\n<li>默认情况下比较的是对象的引用是否相同,由于比较对象的<code>引用没有意义</code>一般建议重写该方法。</li>\n<li>==号和equals方法的区别：<ul>\n<li>==是一个比较运算符号,<code>既可以比较基本数据类型也可以比较引用数据类型</code>,基本数据类型比较的是值,引用数据类型比较的是地址值</li>\n<li>equals方法是一个方法,<code>只能比较引用数据类型</code>,所有的对象都会继承Object类中的方法,如果没有重写Object类中的equals方法,<code>equals方法和==号比较引用数据类型无区别</code>,重写后的equals方法比较的是对象中的属性</li>\n</ul>\n</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1：hashCode() 的使用</span></span><br><span class=\"line\">    Object obj1 = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Object 对象：\"</span>+obj1.hashCode());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Object 对象地址：\"</span>+System.identityHashCode(obj1));</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//示例2.getclass() 的使用</span></span><br><span class=\"line\">    Person g = <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>,<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    Class demo = g.getClass(); <span class=\"comment\">//获取对象的字节码文件</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Person 类名称:\"</span>+demo.getName()); <span class=\"comment\">//获取类名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例3.toString() 的使用</span></span><br><span class=\"line\">    String info = g.toString();</span><br><span class=\"line\">    System.out.println(info);</span><br><span class=\"line\">    System.out.println(g); <span class=\"comment\">//如果直接答应对象的引用，会默认调用toString方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例4.equals() 的使用</span></span><br><span class=\"line\">    <span class=\"comment\">//Object中的equals方法比较对象的地址值,没有什么意义，我们需要重写他；</span></span><br><span class=\"line\">    <span class=\"comment\">//因为在开发中我们通常比较对象中的属性值,我们认为相同属性是同一对象,这样我们就需要重写他;</span></span><br><span class=\"line\">    Person g1= <span class=\"keyword\">new</span> Person(<span class=\"number\">1</span>,<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    System.out.println(g1.equals(g));  <span class=\"comment\">//实际还是采用下面==方式比较,但我们对方法进行了重写</span></span><br><span class=\"line\">    System.out.println(g1 == g );  <span class=\"comment\">//如果equals</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(<span class=\"keyword\">int</span> num,String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//关键点1</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"重写toString方法：num = \"</span>+num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//关键点2 : 重写object中的equals方法</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">    Person s = (Person)obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.equals(s.name) &amp;&amp; <span class=\"keyword\">this</span>.num == s.num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1：hashCode() 的使用</span></span><br><span class=\"line\">Object 对象：366712642</span><br><span class=\"line\">Object 对象地址：366712642</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.getclass() 的使用</span></span><br><span class=\"line\">Person 类名称:Person</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.toString() 的使用</span></span><br><span class=\"line\">重写toString方法：num = 1</span><br><span class=\"line\">Person@6d06d69c</span><br><span class=\"line\">重写toString方法：num = 1</span><br><span class=\"line\">Person@6d06d69c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.equals() 的使用</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]<br>","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}