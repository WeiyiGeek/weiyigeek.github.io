{"title":"2.Go语言编程学习课后实践","slug":"编程世界/Go/Example/2.Go语言编程学习课后实践","date":"2020-04-26T03:16:58.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2020/4-26-604.html","path":"api/articles/2020/4-26-604.html.json","covers":["https://img.weiyigeek.top/2021/5/20211121144442.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-反射章节\"><a href=\"#0x01-反射章节\" class=\"headerlink\" title=\"0x01 反射章节\"></a>0x01 反射章节</h2><p><strong>示例1.利用reflect反射实现一个ini配置文件的读取 (ini 文件解析器)。</strong></p>\n<p>首先需要准备一个 <code>config.ini</code> 配置文件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; mysqlDatabaeConfig</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">address&#x3D;192.168.1.20</span><br><span class=\"line\">port&#x3D;3306</span><br><span class=\"line\">username&#x3D;root</span><br><span class=\"line\">password&#x3D;mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># redusDatabaeConfig</span><br><span class=\"line\">[redis]</span><br><span class=\"line\">host&#x3D;192.168.1.21</span><br><span class=\"line\">port&#x3D;6379</span><br><span class=\"line\">password&#x3D;redis</span><br><span class=\"line\">database&#x3D;0</span><br><span class=\"line\">test&#x3D;false</span><br></pre></td></tr></table></figure></p>\n<p>其次是main.go利用反射方法读取赋予结构体对象之中<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"io/ioutil\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">  <span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">  <span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mysql 数据库配置结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> mysqlConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Address  <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"address\"`</span></span><br><span class=\"line\">  Port     <span class=\"keyword\">int</span>    <span class=\"string\">`ini:\"port\"`</span></span><br><span class=\"line\">  Username <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"username\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"password\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// redis 数据库配置结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> redisConfig <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Host     <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"host\"`</span></span><br><span class=\"line\">  Port     <span class=\"keyword\">int</span>    <span class=\"string\">`ini:\"port\"`</span></span><br><span class=\"line\">  Password <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"password\"`</span></span><br><span class=\"line\">  Database <span class=\"keyword\">string</span> <span class=\"string\">`ini:\"database\"`</span></span><br><span class=\"line\">  Test     <span class=\"keyword\">bool</span>   <span class=\"string\">`ini:\"test\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Config <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  mysqlConfig <span class=\"string\">`ini:\"mysql\"`</span></span><br><span class=\"line\">  redisConfig <span class=\"string\">`ini:\"redis\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadFileConfig</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;, configfile <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// (1) 参数校验</span></span><br><span class=\"line\">  t := reflect.TypeOf(data)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"参数校验:\"</span>, t, t.Kind(), t.Elem().Kind())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传递的data参数必须是指针类型(因为需要在函数中对其赋值)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> t.Kind() != reflect.Ptr &#123;</span><br><span class=\"line\">    <span class=\"comment\">// err = fmt.Errorf(\"[Error] 传递的data参数必须是指针类型\") //  不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">    err = errors.New(<span class=\"string\">\"data Param should be a [pointer] type\"</span>) <span class=\"comment\">//  不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 传递来data参数还必须是结构体类型的指针(因为配置文件中各种键值对需要赋予给结构体字段)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> t.Elem().Kind() != reflect.Struct &#123;</span><br><span class=\"line\">    err = errors.New(<span class=\"string\">\"data Param should be a [struct pointer] type\"</span>) <span class=\"comment\">//  不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (2) 读文件得到字节类型的数据</span></span><br><span class=\"line\">  ini, err := ioutil.ReadFile(configfile)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将文件内容转换为字符串,并按照每行指定字符串进行切割(Linux: '\\n', WIN: '\\r\\n')</span></span><br><span class=\"line\">  lineSlice := strings.Split(<span class=\"keyword\">string</span>(ini), <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取每行数据并且提取对于数据到传递的对象之中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> structName <span class=\"keyword\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, line := <span class=\"keyword\">range</span> lineSlice &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取消配置中的空格</span></span><br><span class=\"line\">    line = strings.TrimSpace(line)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注释判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> strings.HasPrefix(line, <span class=\"string\">\";\"</span>) || strings.HasPrefix(line, <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 空行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(line) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节[section]判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> strings.HasPrefix(line, <span class=\"string\">\"[\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断尾</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> !strings.HasSuffix(line, <span class=\"string\">\"]\"</span>) &#123;</span><br><span class=\"line\">        err = fmt.Errorf(<span class=\"string\">\"configini Line:%d Syntax Error\"</span>, index+<span class=\"number\">1</span>) <span class=\"comment\">// 不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 过滤[]中包含的空格，如果长度为0则表示格式错误，否则拿到节内容</span></span><br><span class=\"line\">      sectionName := strings.TrimSpace(line[<span class=\"number\">1</span> : <span class=\"built_in\">len</span>(line)<span class=\"number\">-1</span>])</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sectionName) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        err = fmt.Errorf(<span class=\"string\">\"configini Line:%d Syntax Error\"</span>, index+<span class=\"number\">1</span>) <span class=\"comment\">// 不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 根据[]中包含的字符串其data参数根据反射找对应结构体</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; t.Elem().NumField(); i++ &#123; <span class=\"comment\">// t.Elem() 拿取指针中的元素</span></span><br><span class=\"line\">        field := t.Elem().Field(i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sectionName == field.Tag.Get(<span class=\"string\">\"ini\"</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 记录对应的嵌套结构体的字段名称</span></span><br><span class=\"line\">          structName = field.Name</span><br><span class=\"line\">          fmt.Printf(<span class=\"string\">\"[+] 找到%s对应的嵌套结构体: %s\\n\"</span>, sectionName, structName)</span><br><span class=\"line\">          <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不是以 [  开头的行意味是将值对，配置文件 Key=value 判断与赋值给我们定义的结构体</span></span><br><span class=\"line\">      <span class=\"comment\">// 格式判断</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> !strings.Contains(line, <span class=\"string\">\"=\"</span>) || strings.HasPrefix(line, <span class=\"string\">\"=\"</span>) &#123;</span><br><span class=\"line\">        err = fmt.Errorf(<span class=\"string\">\"configini Line:%d Syntax Error\"</span>, index+<span class=\"number\">1</span>) <span class=\"comment\">// 不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 取出ini中每一行的数据key=value</span></span><br><span class=\"line\">      equalIndex := strings.Index(line, <span class=\"string\">\"=\"</span>)</span><br><span class=\"line\">      key := strings.TrimSpace(line[:equalIndex])</span><br><span class=\"line\">      value := strings.TrimSpace(line[equalIndex+<span class=\"number\">1</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 根据 structName 名称去data匿名把对应嵌套的结构体信息取出</span></span><br><span class=\"line\">      v := reflect.ValueOf(data)                 <span class=\"comment\">// 反射取值</span></span><br><span class=\"line\">      sValue := v.Elem().FieldByName(structName) <span class=\"comment\">// 嵌套结构体值信息</span></span><br><span class=\"line\">      sType := sValue.Type()                     <span class=\"comment\">// 嵌套结构体类型信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> sValue.Kind() != reflect.Struct &#123;</span><br><span class=\"line\">        err = fmt.Errorf(<span class=\"string\">\"[-] data 中 %s 字段应该是一个结构体\"</span>, structName) <span class=\"comment\">// 不能以标点符号结尾以及输入大写字符开头</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 遍历嵌套结构体中每一个字段，判断Tag是否等于Key。</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> fieldName <span class=\"keyword\">string</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> fieldType reflect.StructField</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; sValue.NumField(); i++ &#123;</span><br><span class=\"line\">        field := sType.Field(i) <span class=\"comment\">// 反射类型信息中存储了嵌套结构体中的Tag信息</span></span><br><span class=\"line\">        fieldType = field       <span class=\"comment\">// 反射类型信息中存储了嵌套结构体中的filed信息以供后续值类型判断使用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> field.Tag.Get(<span class=\"string\">\"ini\"</span>) == key &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 找到结构体中对应的字段</span></span><br><span class=\"line\">          fieldName = field.Name</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果字段名称不存在嵌套结构体中则跳过</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fieldName) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果key等于tag就给该字段赋值</span></span><br><span class=\"line\">      fieldObj := sValue.FieldByName(fieldName)</span><br><span class=\"line\">      fmt.Println(fieldName, fieldType.Type.Kind())</span><br><span class=\"line\">      <span class=\"comment\">// 将读取对应的字符串转为结构体字段中对应的值的类型，并将其赋予。</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> fieldType.Type.Kind() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> reflect.String:</span><br><span class=\"line\">        fieldObj.SetString(value) <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> valueInt <span class=\"keyword\">int64</span>                              <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">        valueInt, err = strconv.ParseInt(value, <span class=\"number\">10</span>, <span class=\"number\">64</span>) <span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          fmt.Printf(<span class=\"string\">\"configini Line:%d value type error,msg: %s\"</span>, index+<span class=\"number\">1</span>, err)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fieldObj.SetInt(valueInt)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> reflect.Float32, reflect.Float64:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> valueFloat <span class=\"keyword\">float64</span>                          <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">        valueFloat, err = strconv.ParseFloat(value, <span class=\"number\">64</span>) <span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          fmt.Printf(<span class=\"string\">\"configini Line:%d value type error,msg: %s\"</span>, index+<span class=\"number\">1</span>, err)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fieldObj.SetFloat(valueFloat)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">case</span> reflect.Bool:</span><br><span class=\"line\">        <span class=\"keyword\">var</span> valueBool <span class=\"keyword\">bool</span>                        <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">        valueBool, err = strconv.ParseBool(value) <span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          fmt.Printf(<span class=\"string\">\"configini Line:%d value type error,msg: %s\"</span>, index+<span class=\"number\">1</span>, err)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fieldObj.SetBool(valueBool)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cfg Config</span><br><span class=\"line\">  err := loadFileConfig(&amp;cfg, <span class=\"string\">\"./config.ini\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"[Error] Load File Config Failed\"</span>)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"嵌套结构体对象值: %v \\n\"</span>, cfg)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"嵌套结构体对象类型与值: %#v \\n\"</span>, cfg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数校验 *main.Config ptr struct</span><br><span class=\"line\">[+] 找到mysql对应的嵌套结构体: mysqlConfig</span><br><span class=\"line\">Address string</span><br><span class=\"line\">Port int</span><br><span class=\"line\">Username string</span><br><span class=\"line\">Password string</span><br><span class=\"line\">[+] 找到redis对应的嵌套结构体: redisConfig</span><br><span class=\"line\">Host string</span><br><span class=\"line\">Port int</span><br><span class=\"line\">Password string</span><br><span class=\"line\">Database string</span><br><span class=\"line\">Test bool</span><br><span class=\"line\">嵌套结构体对象值: &#123;&#123;192.168.1.20 3306 root mysql&#125; &#123;192.168.1.21 6379 redis 0 <span class=\"literal\">false</span>&#125;&#125; </span><br><span class=\"line\">嵌套结构体对象类型与值: main.Config&#123;mysqlConfig:main.mysqlConfig&#123;Address:<span class=\"string\">\"192.168.1.20\"</span>, Port:3306, Username:<span class=\"string\">\"root\"</span>, Password:<span class=\"string\">\"mysql\"</span>&#125;, redisConfig:main.redisConfig&#123;Host:<span class=\"string\">\"192.168.1.21\"</span>, Port:6379, Password:<span class=\"string\">\"redis\"</span>, Database:<span class=\"string\">\"0\"</span>, Test:<span class=\"literal\">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-Goroutine-章节\"><a href=\"#0x02-Goroutine-章节\" class=\"headerlink\" title=\"0x02 Goroutine 章节\"></a>0x02 Goroutine 章节</h2><p><strong>作业1.使用goroutine和channel实现一个计算int64随机数各位数和的程序。</strong><br>要求:</p>\n<ul>\n<li>开启一个goroutine循环生成int64类型的随机数，发送到jobChan</li>\n<li>开启24个goroutine从jobChan中取出随机数计算各位数的和，将结果发送到resultChan</li>\n<li>主goroutine从resultChan取出结果并打印到终端输出</li>\n</ul>\n<p>示例演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">  <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体声明</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> job <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  value <span class=\"keyword\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> result <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  job *job <span class=\"comment\">// 结构体嵌套</span></span><br><span class=\"line\">  sum <span class=\"keyword\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并发等待组声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化goroutine</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> jobChan = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *job, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> resultChan = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *result, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数g通道只写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">generate</span><span class=\"params\">(g <span class=\"keyword\">chan</span>&lt;- *job)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">  <span class=\"comment\">// 循环生成int64随机数</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    i := rand.Int63()</span><br><span class=\"line\">    <span class=\"comment\">// 实例化</span></span><br><span class=\"line\">    newJob := &amp;job&#123;</span><br><span class=\"line\">      value: i,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将实例化的对象存入通道中</span></span><br><span class=\"line\">    g &lt;- newJob</span><br><span class=\"line\">    time.Sleep(time.Millisecond * <span class=\"number\">500</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数r通道i只写，参数g通道只读</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">numberSum</span><span class=\"params\">(r <span class=\"keyword\">chan</span>&lt;- *result, g &lt;-<span class=\"keyword\">chan</span> *job)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">  <span class=\"comment\">// 循环取得number的每个数字并累积其和,将结果发送到通道r中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意点,此处将g通道值赋予给job</span></span><br><span class=\"line\">    job := &lt;-g</span><br><span class=\"line\">    sum := <span class=\"keyword\">int64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    number := job.value</span><br><span class=\"line\">    <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      sum += number % <span class=\"number\">10</span> <span class=\"comment\">// 取余</span></span><br><span class=\"line\">      number /= <span class=\"number\">10</span>       <span class=\"comment\">// 取商（整）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注意点,参数 g 传入的job类型的通道</span></span><br><span class=\"line\">    newResult := &amp;result&#123;</span><br><span class=\"line\">      job: job,</span><br><span class=\"line\">      sum: sum,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r &lt;- newResult</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此goroutine将会持续不断的生产随机数，以及取出随机数计算各位数的和。(将会一直执行，因为一直在取而另外一边一直在取)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.开启一个goroutine循环生成int64类型的随机数，发送到jobChan</span></span><br><span class=\"line\">  wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> generate(jobChan)</span><br><span class=\"line\">  <span class=\"comment\">// 2.开启24个goroutine从jobChan中取出随机数计算各位数的和，将结果发送到resultChan</span></span><br><span class=\"line\">  wg.Add(<span class=\"number\">24</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">24</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> numberSum(resultChan, jobChan)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 3.主goroutine从resultChan取出结果并打印到终端输出</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> res := <span class=\"keyword\">range</span> resultChan &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"number = %d, sum = %d\\n\"</span>, res.job.value, res.sum)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">5577006791947779410</span>, sum = <span class=\"number\">95</span></span><br><span class=\"line\">number = <span class=\"number\">8674665223082153551</span>, sum = <span class=\"number\">79</span></span><br><span class=\"line\">number = <span class=\"number\">6129484611666145821</span>, sum = <span class=\"number\">81</span></span><br><span class=\"line\">number = <span class=\"number\">4037200794235010051</span>, sum = <span class=\"number\">53</span></span><br><span class=\"line\">number = <span class=\"number\">3916589616287113937</span>, sum = <span class=\"number\">95</span></span><br><span class=\"line\">number = <span class=\"number\">6334824724549167320</span>, sum = <span class=\"number\">80</span></span><br><span class=\"line\">number = <span class=\"number\">605394647632969758</span>, sum = <span class=\"number\">99</span></span><br><span class=\"line\">number = <span class=\"number\">1443635317331776148</span>, sum = <span class=\"number\">77</span></span><br><span class=\"line\">number = <span class=\"number\">894385949183117216</span>, sum = <span class=\"number\">89</span></span><br><span class=\"line\">number = <span class=\"number\">2775422040480279449</span>, sum = <span class=\"number\">80</span></span><br><span class=\"line\">number = <span class=\"number\">4751997750760398084</span>, sum = <span class=\"number\">99</span></span><br><span class=\"line\">number = <span class=\"number\">7504504064263669287</span>, sum = <span class=\"number\">84</span></span><br><span class=\"line\">number = <span class=\"number\">1976235410884491574</span>, sum = <span class=\"number\">88</span></span><br><span class=\"line\">number = <span class=\"number\">3510942875414458836</span>, sum = <span class=\"number\">87</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x03-Socket-网络编程章节\"><a href=\"#0x03-Socket-网络编程章节\" class=\"headerlink\" title=\"0x03 Socket 网络编程章节\"></a>0x03 Socket 网络编程章节</h2><p><strong>示例1.利用Go实现一个简单的聊天示例程序</strong><br>描述: 本实践案例结合咱们前面所学的知识,实现一个简单的聊天示例程序,它可以在几个用户之间相互广播文本消息。</p>\n<p>服务端程序: 包含4 个 goroutine，分别是一个<code>主 goroutine</code> 和<code>广播（broadcaster）goroutine</code>，每一个连接里面又包含一个<code>连接处理（handleConn）goroutine</code> 和 一个<code>客户写入（clientwriter）goroutine</code>。</p>\n<ul>\n<li>主 （Main 函数） goroutine 的工作是监听端口，接受连接客户端的网络连接，对每一个连接，它将创建一个新的 handleConn goroutine。</li>\n<li><p>广播（broadcaster 函数）goroutine 的工作主要是负责广播所有用户发送的消息，使用select对三种不同的消息进行响应。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># select 开启一个多路复用的作用</span></span><br><span class=\"line\">* 每当有广播消息从 messages 发送进来，都会循环 cliens 对里面的每个 channel 发消息。</span><br><span class=\"line\">* 每当有消息从 entering 里面发送过来，就生成一个新的 key - value，相当于给 clients 里面增加一个新的 client。</span><br><span class=\"line\">* 每当有消息从 leaving 里面发送过来，就删掉这个 key - value 对，并关闭对应的 channel。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接处理（handleConn 函数）goroutine : 主要工作会为每个过来处理的 conn 都创建一个新的 channel，开启一个新的 goroutine 去把发送给这个 channel 的消息写进 conn。<br>它创建一个对外发送消息的新通道，然后通过 entering 通道通知广播者新客户到来，接着它读取客户发来的每一行文本，通过全局接收消息通道将每一行发送给广播者，发送时在每条消息前面加上发送者 ID 作为前缀。一旦从客户端读取完毕消息，handleConn 通过 leaving 通道通知客户离开，然后关闭连接。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该函数的执行过程可以简单总结为如下几个步骤：</span></span><br><span class=\"line\">* 获取连接过来的 ip 地址和端口号；</span><br><span class=\"line\">* 把欢迎信息写进 channel 返回给客户端；</span><br><span class=\"line\">* 生成一条广播消息写进 messages 里；</span><br><span class=\"line\">* 把这个 channel 加入到客户端集合，也就是 entering &lt;- ch；</span><br><span class=\"line\">* 监听客户端往 conn 里写的数据，每扫描到一条就将这条消息发送到广播 channel 中；</span><br><span class=\"line\">* 如果关闭了客户端，那么把队列离开写入 leaving 交给广播函数去删除这个客户端并关闭这个客户端；</span><br><span class=\"line\">* 广播通知其他客户端该客户端已关闭；</span><br><span class=\"line\">* 最后关闭这个客户端的连接 Conn.Close()。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户写入（clientwriter 函数）goroutine : 主要工作是将传入的ch通道进行遍历并将其中存储的信息传输到conn资源对象中。</p>\n</li>\n</ul>\n<p><br></p>\n<p>客户端程序: 主要包含一个并发匿名函数，用于接收服务端发送的信息打印到本地终端中。</p>\n<p><br/></p>\n<p>服务端完整代码:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server 端是一个接收客户端发送的信息并将信息进行广播.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"net\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (1) 声明对外发送消息的全局通道字符串类型.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> client <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (2) 声明客户端状态以及发送的信息</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  entering = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> client)</span><br><span class=\"line\">  leaving  = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> client)</span><br><span class=\"line\">  messages = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>) <span class=\"comment\">// 所有连接的客户端</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (4) 并发broadcaster广播器,循环监听通道中是否有内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">broadcaster</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 它使用局部变量 clients 来记录当前连接的客户集合，每个客户唯一被记录的信息是其对外发送消息通道的 ID.</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化声明,使用一个字典来保存用户 clients，字典的 key 是各连接申明的单向并发队列。</span></span><br><span class=\"line\">  clients := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[client]<span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环执行&amp;开启一个多路复用</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每当有广播消息从 messages 发送进来，都会循环 cliens 对里面的每个 channel 发消息。</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> msg := &lt;-messages:</span><br><span class=\"line\">      <span class=\"comment\">// 把所有接收到的消息广播给所有客户端</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> cli := <span class=\"keyword\">range</span> clients &#123;</span><br><span class=\"line\">        cli &lt;- msg <span class=\"comment\">// 发送消息通道</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 每当有消息从 entering 里面发送过来，就生成一个新的 key - value，相当于给 clients 里面增加一个新的 client。</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> cli := &lt;-entering:</span><br><span class=\"line\">      clients[cli] = <span class=\"literal\">true</span> <span class=\"comment\">// 表面客户端上线</span></span><br><span class=\"line\">    <span class=\"comment\">// 每当有消息从 leaving 里面发送过来，就删掉这个 key - value 对，并关闭对应的 channel。</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> cli := &lt;-leaving:</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(clients, cli) <span class=\"comment\">// 表面客户端离线,并删除对应的连接的 clients,cli</span></span><br><span class=\"line\">      <span class=\"built_in\">close</span>(cli)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (5) 并发 handleConn 函数创建一个对外发送消息的新通道,</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleConn</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对外发送客户消息的通道</span></span><br><span class=\"line\">  ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> clientWriter(conn, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取客户端;连接过来的网络地址和端口信息</span></span><br><span class=\"line\">  who := conn.RemoteAddr().String()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向通道传入客户端信息</span></span><br><span class=\"line\">  ch &lt;- <span class=\"string\">\"欢迎 \"</span> + who</span><br><span class=\"line\">  messages &lt;- who + <span class=\"string\">\" 上线\"</span></span><br><span class=\"line\">  entering &lt;- ch</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取客户端传入的信息并传入messages通道(利用其进行广播给其他客户端)</span></span><br><span class=\"line\">  input := bufio.NewScanner(conn)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> input.Scan() &#123;</span><br><span class=\"line\">    messages &lt;- who + <span class=\"string\">\": \"</span> + input.Text()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一旦从客户端读取完毕消息，handleConn 通过 leaving 通道通知客户离开，然后关闭连接。</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意：忽略 input.Err() 中可能的错误</span></span><br><span class=\"line\">  leaving &lt;- ch</span><br><span class=\"line\">  messages &lt;- who + <span class=\"string\">\" 下线\"</span></span><br><span class=\"line\">  conn.Close()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (6) clientWriter 实现向客户端发生通道中的信息.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">clientWriter</span><span class=\"params\">(conn net.Conn, ch &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> ch &#123;</span><br><span class=\"line\">    fmt.Fprintln(conn, msg) <span class=\"comment\">// 注意：忽略网络层面的错误</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"[info] %v - Send -&gt; Client %v\\n\"</span>, time.Now().Format(<span class=\"string\">\"2006-01-02 15:04:06\"</span>), msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (3) 入口函数,主要获得 listener 对象，然后不停的获取链接上来的 conn 对象，最后把这些对象丢给处理链接函数去进行处理。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 3.1 TCP server 端监控</span></span><br><span class=\"line\">  listener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"127.0.0.1:30000\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err) <span class=\"comment\">// 输出严重的错误并日志退出程序</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Server %v Listen Start....\\n\"</span>, listener.Addr().String())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.2 broadcaster函数.负责广播所有用户发送的消息。</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> broadcaster()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.3 循环接收客户端接入请求</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    conn, err := listener.Accept()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Print(err)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.4 每个客户自己的 goroutine</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> handleConn(conn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>客户端执行程序:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client 是一个简单的TCP服务器读/写客户端</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"io\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"net\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.连接到服务端</span></span><br><span class=\"line\">  conn, err := net.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"127.0.0.1:30000\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.声明初始化一个匿名结构体通道(值得学习)</span></span><br><span class=\"line\">  done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.利用goroutine执行任务</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wcount <span class=\"keyword\">int64</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：忽略错误,io.Copy 非常值的学习.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> wcount, err = io.Copy(os.Stdout, conn); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">\"CONN OUT os.Stdout Error!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"写入的长度: \"</span>, wcount)</span><br><span class=\"line\">    log.Println(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    done &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; <span class=\"comment\">// 向主Goroutine发出信号 (值的学习,如果不发main函数便不会停止,此时终端亦不会被阻塞)</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.将终端输入传递给conn资源对象给服务器</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"请输入信息:\"</span>)</span><br><span class=\"line\">  mustCopy(conn, os.Stdin)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 5.关闭conn资源</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;-done <span class=\"comment\">// 等待后台goroutine完成</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mustCopy</span><span class=\"params\">(dst io.Writer, src io.Reader)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := io.Copy(dst, src); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Fatal(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下图中展示了在同一台计算机上运行的一个服务端和三个客户端的执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分别编译执行Server.go与Client</span></span><br><span class=\"line\">Server $ go build &amp;&amp; ./Server</span><br><span class=\"line\">Client $ go build &amp;&amp; ./Client</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211121144442.png\" alt=\"WeiyiGeek.goroutine&Socket网络编程实例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.goroutine&Socket网络编程实例</p>\n            </figure></p>\n<hr>\n<h2 id=\"0x04-Unit-单元测试章节\"><a href=\"#0x04-Unit-单元测试章节\" class=\"headerlink\" title=\"0x04 Unit 单元测试章节\"></a>0x04 Unit 单元测试章节</h2><p><strong>作业1.针对走梯子算法优化后基准测试。</strong><br>当有如下阶梯对应的走法如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 =&gt; 1  <span class=\"comment\"># 1</span></span><br><span class=\"line\">2 =&gt; 2  <span class=\"comment\"># [(1,1) 2]</span></span><br><span class=\"line\">3 =&gt; 3  <span class=\"comment\"># [(1,1,1) (1,2) (2,1)]</span></span><br><span class=\"line\">4 =&gt; 5  <span class=\"comment\"># f(4) = 2f(4-2) + f(4-3) </span></span><br><span class=\"line\">4 =&gt; 5  <span class=\"comment\"># f(5) = 2f(5-2) + f(5-3)  # 优化点，减少递归的次数。</span></span><br></pre></td></tr></table></figure></p>\n<p>示例代码如下:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main 执行时的文件名称，weiyigeek.top/studygo/Day08/07perfomance/testdemo/stepdemotest.go</span></span><br><span class=\"line\"><span class=\"comment\">// 单元测试执行的问题，weiyigeek.top/studygo/Day08/07perfomance/testdemo/stepdemo_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分别记录 calcStep(n-1)，calcStep(n-2)，以及程序执行次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  x, y, c <span class=\"keyword\">uint</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # stepladder 常规方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">calcStep</span><span class=\"params\">(step <span class=\"keyword\">uint</span>)</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">  c += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> step &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"[ERR] - Input Step (%d) Must Greater than 0 \"</span>, step)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> step &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> calcStep(step<span class=\"number\">-1</span>) + calcStep(step<span class=\"number\">-2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// stepladder 优化后方法，减少递归次数</span></span><br><span class=\"line\"><span class=\"comment\">// 关系: f(4) = 2(f2) + f(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">optimizationcalcStep</span><span class=\"params\">(step <span class=\"keyword\">uint</span>)</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> step &lt;= <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> calcStep(step)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    x = calcStep(step - <span class=\"number\">2</span>)</span><br><span class=\"line\">    y = calcStep(step - <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 单元测试</span></span><br><span class=\"line\"><span class=\"comment\">// 注意Test后接的函数名称首字母大写(Go开发规范)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStepladder</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 常规方法</span></span><br><span class=\"line\">  got := calcStep(<span class=\"number\">16</span>)</span><br><span class=\"line\">  want := <span class=\"keyword\">uint</span>(<span class=\"number\">1597</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !(got == want) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试用例失败提醒</span></span><br><span class=\"line\">    t.Errorf(<span class=\"string\">\"Want: %v But Got:%v \\n\"</span>, want, got)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStepladderOpti</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 优化后</span></span><br><span class=\"line\">  got := optimizationcalcStep(<span class=\"number\">16</span>)</span><br><span class=\"line\">  want := <span class=\"keyword\">uint</span>(<span class=\"number\">1597</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !(got == want) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试用例失败提醒</span></span><br><span class=\"line\">    t.Errorf(<span class=\"string\">\"Want: %v But Got:%v \\n\"</span>, want, got)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 基准测试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">benchmarkstepladder</span><span class=\"params\">(b *testing.B, step <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    calcStep(step)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">benchmarkstepladderOpti</span><span class=\"params\">(b *testing.B, step <span class=\"keyword\">uint</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    optimizationcalcStep(step)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib1</span><span class=\"params\">(b *testing.B)</span></span>    &#123; benchmarkstepladder(b, <span class=\"number\">16</span>) &#125;     <span class=\"comment\">// 常规 16 步阶梯有多数种走法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFibOpt1</span><span class=\"params\">(b *testing.B)</span></span> &#123; benchmarkstepladderOpti(b, <span class=\"number\">16</span>) &#125; <span class=\"comment\">// 优化后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib2</span><span class=\"params\">(b *testing.B)</span></span>    &#123; benchmarkstepladder(b, <span class=\"number\">25</span>) &#125;     <span class=\"comment\">// 常规 25 步阶梯有多数种走法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFibOpt2</span><span class=\"params\">(b *testing.B)</span></span> &#123; benchmarkstepladderOpti(b, <span class=\"number\">25</span>) &#125; <span class=\"comment\">// 优化后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 示例函数</span></span><br><span class=\"line\"><span class=\"comment\">// Example_stepladder 常规方法的示例函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example_stepladder</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  got := calcStep(<span class=\"number\">16</span>)</span><br><span class=\"line\">  fmt.Println(got)</span><br><span class=\"line\">  <span class=\"comment\">// output:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1597</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Example_stepladderOpti 优化后方法的示例函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example_stepladderOpti</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  got := optimizationcalcStep(<span class=\"number\">16</span>)</span><br><span class=\"line\">  fmt.Println(got)</span><br><span class=\"line\">  <span class=\"comment\">// output:</span></span><br><span class=\"line\">  <span class=\"comment\">// 1597</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 走梯子计算优化函数</span></span><br><span class=\"line\">  ret := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(num <span class=\"keyword\">uint</span>)</span> <span class=\"title\">uint</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &lt;= <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> calcStep(num)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x = calcStep(num - <span class=\"number\">2</span>) <span class=\"comment\">// 减少递归次数</span></span><br><span class=\"line\">      y = calcStep(num - <span class=\"number\">3</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x + y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;(<span class=\"number\">16</span>)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"优化走梯子方法. 16步阶梯的走法 = %d，执行次数: %d\\n\"</span>, ret, c)</span><br><span class=\"line\">  c = <span class=\"number\">0</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"常规走梯子方法. 16步阶梯的走法 = %d, 执行次数: %d\\n\"</span>, calcStep(<span class=\"number\">16</span>), c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 执行 Main 看执行相同的值的斐波那契数列对应值，执行的次数、(注意此时文件名: stepdemotest.go)</span></span><br><span class=\"line\">➜  testdemo go run .</span><br><span class=\"line\">优化走梯子方法. 16步阶梯的走法 = 1597，执行次数: 752    <span class=\"comment\"># 可以看到执行的次数，大大减少，此数值会随着</span></span><br><span class=\"line\">常规走梯子方法. 16步阶梯的走法 = 1597, 执行次数: 1219</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 单元测试 &amp; 示例测试(注意此时文件名: stepdemo_test.go)</span></span><br><span class=\"line\">➜  testdemo go <span class=\"built_in\">test</span> -v</span><br><span class=\"line\">=== RUN   TestStepladder</span><br><span class=\"line\">--- PASS: TestStepladder (0.00s)</span><br><span class=\"line\">=== RUN   TestStepladderOpti</span><br><span class=\"line\">--- PASS: TestStepladderOpti (0.00s)  <span class=\"comment\"># 单元测试 通过</span></span><br><span class=\"line\">=== RUN   Example_stepladder</span><br><span class=\"line\">--- PASS: Example_stepladder (0.00s)  <span class=\"comment\"># 示例测试 通过</span></span><br><span class=\"line\">=== RUN   Example_stepladderOpti</span><br><span class=\"line\">--- PASS: Example_stepladderOpti (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/07perfomance/testdemo       0.002s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 常规与优化后走阶梯比较。(注意此时文件名: stepdemotest.go)</span></span><br><span class=\"line\">➜  testdemo go <span class=\"built_in\">test</span> -v -bench=. -benchmem --run=none</span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/07perfomance/testdemo</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkFib1</span><br><span class=\"line\">BenchmarkFib1-4           333187              3145 ns/op               0 B/op          0 allocs/op</span><br><span class=\"line\">BenchmarkFibOpt1</span><br><span class=\"line\">BenchmarkFibOpt1-4        632816              1860 ns/op               0 B/op          0 allocs/op   </span><br><span class=\"line\">BenchmarkFib2</span><br><span class=\"line\">BenchmarkFib2-4             4388            231205 ns/op               0 B/op          0 allocs/op</span><br><span class=\"line\">BenchmarkFibOpt2</span><br><span class=\"line\">BenchmarkFibOpt2-4          8421            141581 ns/op               0 B/op          0 allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/07perfomance/testdemo       6.360s</span><br></pre></td></tr></table></figure></p>\n<p>Tips: 用过上面的数据，可以看到同样的阶梯数，优化后执行的次数以及平均执行耗时都优于常规方式。</p>\n<p><br></p>\n<h2 id=\"0x05-Benchmark-测试章节\"><a href=\"#0x05-Benchmark-测试章节\" class=\"headerlink\" title=\"0x05 Benchmark 测试章节\"></a>0x05 Benchmark 测试章节</h2><p><strong>作业1.使用gin框架编写一个接口，使用go-wrk进行压测，使用性能调优工具采集数据绘制出调用图和火焰图。</strong></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}