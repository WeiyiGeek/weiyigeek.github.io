{"title":"Windows认证原理解析基础入门","slug":"基础知识/操作系统/Windows底层/Windows认证原理解析基础入门","date":"2020-03-06T05:35:30.000Z","updated":"2023-01-31T02:29:10.676Z","url":"2020/3-6-20.html","path":"api/articles/2020/3-6-20.html.json","covers":["https://img.weiyigeek.top/2020/1/20200310145405.png","https://img.weiyigeek.top/2020/1/20200310162024.png","https://img.weiyigeek.top/2020/1/20200310162206.png","https://img.weiyigeek.top/2020/1/20200309021744.png","https://img.weiyigeek.top/2020/1/20200309021919.png","https://img.weiyigeek.top/2020/1/20200311135919.png","https://img.weiyigeek.top/2020/1/20200308004330.png","https://img.weiyigeek.top/2020/1/20200311230352.png","https://img.weiyigeek.top/2020/1/20200312004126.png","https://img.weiyigeek.top/2020/1/20200312010335.png","https://img.weiyigeek.top/2020/1/20200312010553.png","https://img.weiyigeek.top/2020/1/20200312013207.png","https://img.weiyigeek.top/2020/1/20200312013350.png","https://img.weiyigeek.top/2020/1/20200312014202.png","https://img.weiyigeek.top/2020/1/20200311210304.png","https://img.weiyigeek.top/2020/1/20200311205317.png","https://img.weiyigeek.top/2020/1/20200311211324.png","https://img.weiyigeek.top/2020/1/20200311213826.png","https://img.weiyigeek.top/2020/1/20200311213357.png","https://img.weiyigeek.top/2020/1/20200311222125.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x01-前言简介\"><a href=\"#0x01-前言简介\" class=\"headerlink\" title=\"0x01 前言简介\"></a>0x01 前言简介</h4><p>本文借鉴安全界各位大佬所写的Windows认证入门科普（它们的站点我附在来源）对其中的知识点做了一个整理总结，同时复现里面的算法方便以后自己理解以及在其他域渗透/内网渗透方式中提供基础知识，这篇文章很适合小白入门Windows认证协议简单明了;</p>\n<p>本文实验模拟在<code>Windows 7 、Windows 10</code> 下进行验证主要内容:</p>\n<ul>\n<li>Windows用户认证基础介绍</li>\n<li>LM/NTLM Hashes 版本优缺</li>\n<li>LM/NTLM Hashes 生成原理</li>\n<li>LM/NTLM Hashes 加密流程实践</li>\n<li>LM/NTLM 挑战和响应(C/R)机制原理</li>\n<li>LM/NTLM C/R 协议分析</li>\n<li>学习总结</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x02-基本介绍\"><a href=\"#0x02-基本介绍\" class=\"headerlink\" title=\"0x02 基本介绍\"></a>0x02 基本介绍</h4><p>描述:Hashes(散列)直接音译为“哈希-Hash”,是把任意长度的输入（又叫做预映射，pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。<br>简单的说就是一种<code>将任意长度的消息压缩到某一固定长度的消息摘要的函数</code>。</p>\n<p>回归到正题之中，有这样一个场景在您忘记您电脑密码的时候，我们常用的就是两种方式；</p>\n<ul>\n<li>1.采用PE系统进行跳过原始系统用户密码进行登录;</li>\n<li>2.进行PE系统中读取系统目录中SAM文件然后进行重新设置用户密码;</li>\n</ul>\n<p>那SAM是什么呢?</p>\n<blockquote>\n<p>SAM(Security Account Manage)是Windows系统中存放系统用户及密码的一种文件并采用Syskey（系统密钥）加密保护<br>而LM/NTLM 哈希存储在安全帐户管理器(SAM)数据库和域控制器的NTDS.dit数据库中<br>简单流程:用户登录的时候采用用户输入的密码进行NTLM Hashes加密然后与系统中SAM文件中存储的NTLM Hashes进行比对;</p>\n</blockquote>\n<p><br></p>\n<p>在这里不得不说一哈我们常用的NTLM Hashes的加密方式:<br>NTLM Hashes它采用的MD4加密方式，目前应用最广泛的Hashes算法 MD5 和 SHA1 它们也都是参考MD4加密原理为基础设计的，下面简单说一下：</p>\n<ul>\n<li><p>1）MD4: (RFC 1320)是 MIT (麻省理工学院)的 Ronald L. Rivest 在 1990 年设计的，它是一种用来测试信息完整性的密码散列函数的实行。其MD(Message Digest)摘要长度为128位，一般128位长的MD4散列被表示为32位的十六进制数字。它适用在32位字长的处理器上用高速软件实现，它是基于 32 位操作数的位操作来实现的。</p>\n</li>\n<li><p>2）MD5: (RFC 1321)是 Rivest于1991年对MD4的改进版本。它仍以512位分组来输入，其输出是4个32位字的级联，与 MD4 相同。MD5比MD4来得复杂，并且速度较之要慢一点，但更安全，在抗分析和抗差分方面表现更好</p>\n</li>\n<li><p>3）SHA1: 由NIST NSA设计为同DSA一起使用的，它对长度小于264的输入，产生长度为160bit的散列值，因此抗穷举(brute-force)性更好。SHA-1 设计时基于和MD4相同原理，并且模仿了该算法。</p>\n</li>\n</ul>\n<p><br></p>\n<p>回到正题由于当前PC常使用的系统版本基本都是<code>Windows 7 / Windows 10</code>,所以下认证情况都是基于该系统版本来说明的(作一个简单的了解):</p>\n<h5 id=\"1-本地登录认证\"><a href=\"#1-本地登录认证\" class=\"headerlink\" title=\"1.本地登录认证\"></a>1.本地登录认证</h5><p>描述:当我们在本地登录认证时输入密码凭据登陆系统会首先将输入的凭据转换加密成NTLM Hashes(<code>NT LAN Manager</code>) 进行存储，这是由于Windows本身不存储用户的明文密码它将用户的明文密码经过加密算法后存储在SAM数据库(<code>%SystemRoot%\\System32\\config\\sam</code>)中，此时操作系统会自动地读取Windows系统中的SAM文件中的对应用户的NTLM hashes值进行与我们凭据生成的NTLM Hashes进行比对认证，认证完成则登录成功否则提示账号或者密码错误;</p>\n<p><br/></p>\n<p>Windows本地登录验证流程:</p>\n<ul>\n<li>1.在我们注销或开机后将会弹出输入账号密码的界面用于接受用户输入由本地winlogon.exe进程进行管理;<ul>\n<li>本地进程<code>winlogon.exe</code>将账号密码给lsass.exe进程进行处理并将密码缓存在进程中；</li>\n<li>本地进程<code>lsass.exe</code>将我们输入密码凭据转换为NTML Hashes读取SAM数据库与用户名进行比较；</li>\n</ul>\n</li>\n<li>2.若比较结果相同则将<code>User SID与Group SID</code>发给winlogon.exe，并准备登陆界面；若比较结果不同则登陆失败提示账号或者密码错误。</li>\n</ul>\n<p>简单流程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Windows Logon Process winlogon.exe是 Windows NT 用户登陆程序用于管理用户登录和退出。</span></span><br><span class=\"line\"><span class=\"comment\">#Lsass.exe 是 用于微软Windows系统的安全机制它用于本地/远程安全和登陆策略，它会与我们SAM进行相互作用将本地或者远程身份认证的用户信息都会保存在其内存地址中。</span></span><br><span class=\"line\">winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; <span class=\"keyword\">if</span> (认证) &#123; 登录成功 &#125;<span class=\"keyword\">else</span>&#123; 登录失败 &#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-网络登录认证\"><a href=\"#2-网络登录认证\" class=\"headerlink\" title=\"2.网络登录认证\"></a>2.网络登录认证</h5><p>局域网工作组：缺少信托机构(银行：两者之间进行交易所必须信任的中间人) </p>\n<ul>\n<li>工作组的环境是一个逻辑上的网络环境(工作区) ，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是较为落后的认证方式没有信托机构。</li>\n<li>假设A主机与B主机在一个工作主组环境，A想要访问B主机上的资源，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能访问B主机上的资源。传输数据由协议来规范数据如何传递，最常见的服务：SMB服务端口445 / RPC服务(Remote Procedure Call，远程过程调用) 135端口。</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x03-LM-NTLM-版本优缺\"><a href=\"#0x03-LM-NTLM-版本优缺\" class=\"headerlink\" title=\"0x03 LM/NTLM 版本优缺\"></a>0x03 LM/NTLM 版本优缺</h4><p>Windows用户认证LM/NTLM Hashes发展流程:<br><strong>1) LM Hashes</strong></p>\n<blockquote>\n<p>IBM设计的LM Hash算法在Windows XP 或 Windows Server 2003 等系统发行版本以及以下采用的加密方式(基本已经被淘汰了);</p>\n</blockquote>\n<p><em>LM Hashes版本系列说明:</em></p>\n<ul>\n<li>LM Hashes</li>\n<li>LM :完整名称(<code>LAN Manager Challenge/Response</code>) 挑战和验证机制主要用于网络身份认证;</li>\n</ul>\n<p><br></p>\n<p><strong>2) NTLM Hashes</strong></p>\n<blockquote>\n<p> NTLM简称<code>NT LAN Manager</code>，由于LM Hashes脆弱性和Windows认证需要协议来规范，以及微软在保持向后兼容性的同时提出了<code>WindowsNT挑战/响应验证机</code>此时NTLM Hash便应运而生。<br>在Windows Vista 与 Windows Server 2008 以上版本默认采用的加密方式, NTLM Hashes算法的前身是LM Hashes</p>\n</blockquote>\n<p><em>NTLM Hashes版本系列说明:</em></p>\n<ul>\n<li>NTLM Hashes (<code>也称为 NT Hashes</code>) 主要用于本地认证;</li>\n<li>NTLMv1 Hashes (<code>也称为Net-NTLMv1 Hashes</code>) 运用了WindowsNT挑战与响应验证机制结合，主要用于网络身份认证;</li>\n<li>NTLMv2 Hashes (<code>也称为Net-NTLMv2 Hashes</code>) 主要用于网络身份认证并且使用广泛;</li>\n<li>NTLM session 用于在没有NTLMv2身份验证的情况下协商NTLM2会话安全性时</li>\n</ul>\n<p>说明:为了后面方便引用C/R验证机制的时候统一采用NTLMv1 Hashes 、NTLMv2 Hashes 进行说明;</p>\n<p><br></p>\n<p>LM / NTLM Hashes 两者之间优缺点比较:</p>\n<ul>\n<li>1.LM-Hashes<ul>\n<li>缺点:安全问题密码不区分大小写(因为最开始会把密码统一转换为大写) 、密码最长为14位(2*7B==112bit)、可通过加密后的值反推加密前的密码位数、DES加密强度较弱等。</li>\n</ul>\n</li>\n<li>2.NTLM-Hashes / Net-NTLM<ul>\n<li>缺点:可以用来获取不区分大小写的密码，以及用于查找NTLM响应使用的区分大小写密码的试错法，特别是NTLMv1版本容易被彩虹表进行碰撞检测得出密码的NTLM Hashes。</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>LM / NTLM / Net-NTLM Hashes 格式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1) LM哈希（16B = 32字符 ） : NTLM哈希（16B = 32位）</span></span><br><span class=\"line\">aad3b435b51404eeaad3b435b51404ee : e19ccf75ee54e06b06a5907af13cef42</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2) LM Pesponse(24B = 48位)</span></span><br><span class=\"line\">ca1200723c41d577ab18c764c6def34fa61bfa0671ea5fc8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3) NetNTLMv1 / NetNTLMv1+ESS</span></span><br><span class=\"line\">NTLM Server Challenge: f9c7fc816b991824</span><br><span class=\"line\">Lan Manager Response: c67ee888f6b41a4400000000000000000000000000000000</span><br><span class=\"line\">NTLM Response: 293b99da834c86c6e37c37a20920b41581be32740a5e062e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(4) NET-NTLMv2（又名NTLMv2）哈希的示例</span></span><br><span class=\"line\">NTLM Server Challenge: f12d21c3e60843cc</span><br><span class=\"line\">Lan Manager Response: 000000000000000000000000000000000000000000000000</span><br><span class=\"line\">LMv2 Client Challenge: 0000000000000000</span><br><span class=\"line\">NTLMv2 Hashes: 6061d067efff612ae4f1c704f1a44f08 <span class=\"comment\">#(16 = 32位)</span></span><br><span class=\"line\">NTProofStr: 32a48adf53baf6ef888482d94e222001</span><br><span class=\"line\">NTLMv2 Response: 32a48adf53baf6ef888482d94e2220010101000000000000...<span class=\"comment\">#(128bit)</span></span><br></pre></td></tr></table></figure></p>\n<hr/>\n\n<h4 id=\"0x04-LM-NTLM-生成原理\"><a href=\"#0x04-LM-NTLM-生成原理\" class=\"headerlink\" title=\"0x04 LM/NTLM 生成原理\"></a>0x04 LM/NTLM 生成原理</h4><h5 id=\"1-LM-Hashes-生成实例\"><a href=\"#1-LM-Hashes-生成实例\" class=\"headerlink\" title=\"1.LM-Hashes 生成实例\"></a>1.LM-Hashes 生成实例</h5><p>注意:如果需要复现需要将系统策略进行更改支持LM存储:<code>控制面板&gt;所有控制面板项&gt;管理工具&gt;本地安全策略(gpedit.msc)&gt;本地策略&gt;安全选项&gt;网络安全:在下一次更改密码时不存储LAN管理器哈希值(LM) 设置禁用</code>;</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200310145405.png\" alt=\"WeiyiGeek.在下一次更改密码时不存储LAN管理器哈希值(LM)\" title=\"\" class=\"\">\n                <p>WeiyiGeek.在下一次更改密码时不存储LAN管理器哈希值(LM)</p>\n            </figure>\n<p><br></p>\n<p>LM-Hashes生成原理三步骤详解:</p>\n<ul>\n<li>Step0.由于这种密码生成规则要求用户的密码最多仅能为14个字符即<code>14*8B=11bit</code>长度</li>\n<li>Step1.明文口令转换为其大写形式(Upper case)在有字母的情况下进行否者直接进行第二步</li>\n<li>Step2.将转换后的口令进行转成Hex编码</li>\n<li>Step3.生存的Hex编码如果不足<code>112bit/8bit=14</code>个字符要求用0补全</li>\n<li>Step4.将补全后的14个字符112bit的数据<code>分成2组每组7字节/B(56 bit)</code></li>\n<li>Step5.将每组的十六进制转换成为二进制并且在转换后长度不足56bit使用0在左边补齐长度,再将二进制数据<code>分7bit为一组</code>末尾加0组成新的编码此时成为每组8B(64bit);</li>\n<li>Step6.将上步得到的两组8B字节编码分别作为单向DES加密Key魔术字符串<code>KGS!@#$%</code>转换成为Hex(<code>4B47532140232425</code>)数据然后得到两组密文;</li>\n<li>Step7.将两组DES加密后的数据进行拼接得到LM-Hash值;</li>\n</ul>\n<p><br></p>\n<p><strong>实例验证LM-Hashes生成:</strong><br>服务器密码:123456<br>LM-HASH值为:44EFCE164AB921CAAAD3B435B51404EE</p>\n<ul>\n<li>1.由于服务器密码是纯数字转换任然为本身进行步骤跳过;</li>\n<li>2.转换成为16进制的ASCII码不足14B采用0补齐并将补全结果分为两个7 Bytes部分即:<code>31323334353600 00000000000000</code>;</li>\n<li>3.分别将两组7Bytes数据转换成为二进制进行补0操作后再分7bit一组在末尾+0,形成每组8B长度再将其转换成为16进制:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#二进制</span></span><br><span class=\"line\">第一组:31323334353600 == 110001001100100011001100110100001101010011011000000000</span><br><span class=\"line\">第二组:00000000000000 == 54 x 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#左边补0(2bit)</span></span><br><span class=\"line\">第一组:00110001001100100011001100110100001101010011011000000000</span><br><span class=\"line\">第二组:56 x 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再分7bit为一组末尾加0 (形成每组8B)</span></span><br><span class=\"line\"><span class=\"comment\">#第一组 / #第二组(全为0) 0000000 0 x 7 </span></span><br><span class=\"line\">0011000 0</span><br><span class=\"line\">1001100 0</span><br><span class=\"line\">1000110 0</span><br><span class=\"line\">0110011 0</span><br><span class=\"line\">0100001 0</span><br><span class=\"line\">1010100 0</span><br><span class=\"line\">1101100 0</span><br><span class=\"line\">0000000 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对此时的密码字符串对应的8字节16进制编码（str_to_key()函数处理）</span></span><br><span class=\"line\">30988C6642A8D800</span><br><span class=\"line\">0000000000000000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>4.将以上步骤得到的两组16进制字符串，分别作为DES加密key为魔术字符串KGS!@#$%(Hex:<code>4b47532140232425</code>)进行加密</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">44EFCE164AB921CA</span><br><span class=\"line\">AAD3B435B51404EE</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200310162024.png\" alt=\"WeiyiGeek.DES加密\" title=\"\" class=\"\">\n                <p>WeiyiGeek.DES加密</p>\n            </figure>\n</li>\n<li><p>5.拼接得到的密码即形成LM-Hashes:<code>44EFCE164AB921CAAAD3B435B51404EE</code></p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200310162206.png\" alt=\"WeiyiGeek.LM-Hashes\" title=\"\" class=\"\">\n                <p>WeiyiGeek.LM-Hashes</p>\n            </figure>\n<p><br></p>\n<p>Python3实现LM-HASH脚本(需要安装pyDes模块):<br>运行:LM-Hashes.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># Build Version: Python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyDes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">DesEncrypt</span><span class=\"params\">(str, Des_Key)</span>:</span></span><br><span class=\"line\">    k = des(Des_Key, ECB, pad=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    EncryptStr = k.encrypt(str)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Zero_padding</span><span class=\"params\">(str)</span>:</span></span><br><span class=\"line\">    b = []</span><br><span class=\"line\">    l = len(str)</span><br><span class=\"line\">    num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(l):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">8</span>) <span class=\"keyword\">and</span> n % <span class=\"number\">7</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            b.append(str[n:n + <span class=\"number\">7</span>] + <span class=\"string\">'0'</span>)</span><br><span class=\"line\">            num = num + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      <span class=\"comment\">#将输入值进行Bytes转换</span></span><br><span class=\"line\">      print(<span class=\"string\">\"Password : \"</span>+sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\">      test_str = sys.argv[<span class=\"number\">1</span>].encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      print(<span class=\"string\">\"Usage:Python LM-Hashes.py Password\"</span>)</span><br><span class=\"line\">      print(<span class=\"string\">\"[*] Error:\"</span>+str(e))</span><br><span class=\"line\">      sys.exit()</span><br><span class=\"line\">    <span class=\"comment\"># 用户的密码转换为大写,并转换为16进制ASCCI;</span></span><br><span class=\"line\">    test_str = test_str.upper()</span><br><span class=\"line\">    test_str = binascii.b2a_hex(test_str).decode();</span><br><span class=\"line\">    print(<span class=\"string\">\"Hex: \"</span>+test_str)</span><br><span class=\"line\">    str_len = len(test_str)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 密码不足14字节将会用0来补全</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> str_len &lt; <span class=\"number\">28</span>:</span><br><span class=\"line\">        test_str = test_str.ljust(<span class=\"number\">28</span>, <span class=\"string\">'0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 固定长度的密码被分成两个7byte部分</span></span><br><span class=\"line\">    t_1 = test_str[<span class=\"number\">0</span>:<span class=\"number\">14</span>]</span><br><span class=\"line\">    t_2 = test_str[<span class=\"number\">14</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(t_1 + \" \" + t_2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</span></span><br><span class=\"line\">    t_1 = bin(int(t_1, <span class=\"number\">16</span>)).lstrip(<span class=\"string\">'0b'</span>).rjust(<span class=\"number\">56</span>, <span class=\"string\">'0'</span>)</span><br><span class=\"line\">    t_2 = bin(int(t_2, <span class=\"number\">16</span>)).lstrip(<span class=\"string\">'0b'</span>).rjust(<span class=\"number\">56</span>, <span class=\"string\">'0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 再分7bit为一组末尾加0，组成新的编码</span></span><br><span class=\"line\">    t_1 = Zero_padding(t_1)</span><br><span class=\"line\">    t_2 = Zero_padding(t_2)</span><br><span class=\"line\">    <span class=\"comment\">#print(t_1)</span></span><br><span class=\"line\">    t_1 = hex(int(t_1, <span class=\"number\">2</span>))</span><br><span class=\"line\">    t_2 = hex(int(t_2, <span class=\"number\">2</span>))</span><br><span class=\"line\">    t_1 = t_1[<span class=\"number\">2</span>:].rstrip(<span class=\"string\">'L'</span>)</span><br><span class=\"line\">    t_2 = t_2[<span class=\"number\">2</span>:].rstrip(<span class=\"string\">'L'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'0'</span> == t_2:</span><br><span class=\"line\">        t_2 = <span class=\"string\">\"0000000000000000\"</span></span><br><span class=\"line\">    t_1 = binascii.a2b_hex(t_1)</span><br><span class=\"line\">    t_2 = binascii.a2b_hex(t_2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 上步骤得到的8byte二组，分别作为DES key为\"KGS!@#$%\"进行加密。</span></span><br><span class=\"line\">    LM_1 = DesEncrypt(<span class=\"string\">\"KGS!@#$%\"</span>, t_1)</span><br><span class=\"line\">    LM_2 = DesEncrypt(<span class=\"string\">\"KGS!@#$%\"</span>, t_2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将二组DES加密后的编码拼接，得到最终LM HASH值。</span></span><br><span class=\"line\">    LM = LM_1 + LM_2</span><br><span class=\"line\">    print(<span class=\"string\">\"LM-Hashse Lower: \"</span>+LM.decode()+ <span class=\"string\">\"\\nLM-Hashes Upper: \"</span>+LM.decode().upper())</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@WeiyiGeek F:\\]$ Python LM-Hashes.py 123456</span><br><span class=\"line\">Password : 123456</span><br><span class=\"line\">Hex: 313233343536</span><br><span class=\"line\">31323334353600 00000000000000</span><br><span class=\"line\">0011000010011000100011000110011001000010101010001101100000000000</span><br><span class=\"line\">0x30988c6642a8d800 0x0</span><br><span class=\"line\">LM-Hashse Lower: 44efce164ab921caaad3b435b51404ee</span><br><span class=\"line\">LM-Hashes Upper: 44EFCE164AB921CAAAD3B435B51404EE</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"2-NTLM-Hashes-生成实例\"><a href=\"#2-NTLM-Hashes-生成实例\" class=\"headerlink\" title=\"2.NTLM-Hashes 生成实例\"></a>2.NTLM-Hashes 生成实例</h5><p>NTLM-Hashes 生成原理步骤详解:</p>\n<ul>\n<li>Step1：明文口令转换成16进制ASCII编码(Hex)                   </li>\n<li>Step2：Unicode编码(ASCII转Unicode) <code>原本是在每个Hex编码前加上0x00nn</code>,但是由于Window操作使用的是小端存储，所以得注意这里采用的是UTF-16小端序编码(LE,Little Endian|)即<code>在每个字节之后添加00</code>;</li>\n<li>Step3：对Unicode字符串使用MD4消息摘要算法得到16字节的值即NTML-Hash          <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NT_Hash(password) = MD4(UTF-16-LE(password))</span><br><span class=\"line\">NT_Hash(<span class=\"string\">\"pass1\"</span>) = <span class=\"string\">\"8D7A851DDE3E7BED903A41D686CD33BE\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>补充知识点:</em><br>大端序（Big-Endian，大尾序）：高位字节放在内存的低地址，低位字节放在内存的高地址, 低地址 <code>0x12 0x34 0x56 0x78</code> 高地址， 可以看见是符合人们常规得理解顺序。<br>小端序（Little-Endian，小尾序）：低位字节放在内存的低地址，高位字节放在内存的高地址<code>0x78 0x56 0x34 0x12</code>，笑话:计算机说我也要由自己得理解顺序。</p>\n<p><strong>实例验证NTLM-Hases生成:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.查看lsass.exe进程信息;</span></span><br><span class=\"line\"><span class=\"variable\">$tasklist</span> | findstr <span class=\"string\">\"lsass.exe\"</span></span><br><span class=\"line\">lsass.exe                      676 Services                   0     35,172 K</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.该程序在内存中的信息</span></span><br><span class=\"line\"><span class=\"variable\">$procdump64</span>.exe -ma -t 676</span><br><span class=\"line\">ProcDump v9.0 - Sysinternals process dump utility</span><br><span class=\"line\">Process:               lsass.exe (676)</span><br><span class=\"line\">Process image:         C:\\Windows\\system32\\lsass.exe</span><br><span class=\"line\">CPU threshold:         n/a</span><br><span class=\"line\">Performance counter:   n/a</span><br><span class=\"line\">Commit threshold:      n/a</span><br><span class=\"line\">Threshold seconds:     n/a</span><br><span class=\"line\">Hung window check:     Disabled</span><br><span class=\"line\">Log debug strings:     Disabled</span><br><span class=\"line\">Exception monitor:     Disabled</span><br><span class=\"line\">Exception filter:      [Includes]</span><br><span class=\"line\">                       *</span><br><span class=\"line\">                       [Excludes]</span><br><span class=\"line\">Terminate monitor:     Enabled</span><br><span class=\"line\">Cloning <span class=\"built_in\">type</span>:          Disabled</span><br><span class=\"line\">Concurrent <span class=\"built_in\">limit</span>:      n/a</span><br><span class=\"line\">Avoid outage:          n/a</span><br><span class=\"line\">Number of dumps:       1</span><br><span class=\"line\">Dump folder:           C:\\Users\\Administrator\\Downloads\\Procdump\\</span><br><span class=\"line\">Dump filename/mask:    PROCESSNAME_YYMMDD_HHMMSS</span><br><span class=\"line\">Queue to WER:          Disabled</span><br><span class=\"line\">Kill after dump:       Disabled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.下载该应用程序在内存之中数据导出到本地以供mimikatz使用</span></span><br><span class=\"line\"><span class=\"variable\">$procdump64</span>.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class=\"line\">[22:45:02] Dump 1 initiated: lsass.dmp</span><br><span class=\"line\">[22:45:05] Dump 1 writing: Estimated dump file size is 35 MB.</span><br><span class=\"line\">[22:45:05] Dump 1 complete: 36 MB written <span class=\"keyword\">in</span> 3.5 seconds</span><br><span class=\"line\">[22:45:06] Dump count reached.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.获取lsass.dmp文件内容并用mimikatz查看账户密码的NTML HASH值</span></span><br><span class=\"line\"><span class=\"variable\">$mimikatz</span>.exe <span class=\"string\">\"sekurlsa::minidump lsass.dmp\"</span> <span class=\"string\">\"sekurlsa::logonPasswords full\"</span> <span class=\"built_in\">exit</span> &gt;pass.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$type</span> pass.txt</span><br><span class=\"line\">mimikatz(commandline) <span class=\"comment\"># sekurlsa::minidump lsass.dmp</span></span><br><span class=\"line\">Switch to MINIDUMP : <span class=\"string\">'lsass.dmp'</span></span><br><span class=\"line\">mimikatz(commandline) <span class=\"comment\"># sekurlsa::logonPasswords full</span></span><br><span class=\"line\">Opening : <span class=\"string\">'lsass.dmp'</span> file <span class=\"keyword\">for</span> minidump...</span><br><span class=\"line\">Logon Time        : 2020/3/8 11:30:23</span><br><span class=\"line\">User Name         : Test</span><br><span class=\"line\">SID              :S-1-5-21-1802160877-2963370050-2309095339-500</span><br><span class=\"line\">msv :\t</span><br><span class=\"line\">[00010000] CredentialKeys</span><br><span class=\"line\">* NTLM     : 26b5936a9a6b7cd2d589abd4c6c126de</span><br><span class=\"line\">* SHA1     : fa6fe7fab3f9920f1e97ebd148767776e07e55b6</span><br></pre></td></tr></table></figure></p>\n<p><strong>手动实现密码加密:</strong><br>根据NTML HASH的生成原理推算也同样得到7b86d7692a8b1de47817434f08671229；<br>第一步：将WeiyiGeek进行十六进制的转换后输出结果如下；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeiyiGeek = 57 65 69 79 69 47 65 65 6b</span><br></pre></td></tr></table></figure></p>\n<p>第二步：将ASCII转码为Unicode（小端序）得到结果如下；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意:如果是使用UltraEdit进行转换成Unicode会带有FF FE，开头的FF FE用于标识此文本文件为Unicode编码</span></span><br><span class=\"line\">String to Hex Unicode :770065006900790069006700650065006b00</span><br></pre></td></tr></table></figure></p>\n<p>第三步：将570065006900790069004700650065006b00(注意需要进行设置为Hex String)进行MD4加密后得到结果如下；<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200309021744.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>第四步：与上面内存中的NTLM HASH进行比较验证完成,自己拿取了大佬们写的JS库写的一个小Demo演示(在线加密的有很多，自己只是学习了解其中的算法思路才写的):<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MD4 加密 <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://nf404.github.io/crypto-api/crypto-api.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./md4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>请输入需要加密成NTLM的明文密码:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"src\"</span>&gt;</span>明文密码:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"src\"</span>&gt;</span> &amp;nbsp; &amp;nbsp; </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"转换\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ntlm_encoder()\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>转换结果:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"result\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ntlm_encoder</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> str = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"src\"</span>).value;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> hex = <span class=\"string\">\"\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;str.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                hex += str.charCodeAt(i).toString(<span class=\"number\">16</span>)+<span class=\"string\">\"00\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            resultASCII=CryptoApi.hash(<span class=\"string\">'md4'</span>, hex)</span></span><br><span class=\"line\"><span class=\"actionscript\">            resultUnicode=hex_md4(str); <span class=\"comment\">//采用16位 bits per input character 编码</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>).innerHTML=<span class=\"string\">\"&lt;mark&gt; String to Hex Unicode :\"</span>+ hex + <span class=\"string\">\"&lt;br&gt; MD4 Text String : \"</span>+resultASCII+<span class=\"string\">\"&lt;br&gt; MD4 Hex String [NTLM]: \"</span>+resultUnicode+<span class=\"string\">\"&lt;/mark&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200309021919.png\" alt=\"WeiyiGeek.Demo演示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Demo演示</p>\n            </figure></p>\n<hr/>\n\n<h4 id=\"0x05-LM-NTLM-挑战和响应机制原理\"><a href=\"#0x05-LM-NTLM-挑战和响应机制原理\" class=\"headerlink\" title=\"0x05 LM/NTLM 挑战和响应机制原理\"></a>0x05 LM/NTLM 挑战和响应机制原理</h4><p>问什么是挑战/响应模式（鉴权协议）?</p>\n<blockquote>\n<p>答:鉴权协议如下的鉴权协议又被称作挑战(认证模式)，使用明文口令模式时，网络上传输的就是明文口令本身很容易被Sniffer捕获。而挑战/响应模式在传输信道也是是可被侦听Sniffer，但不可被篡改的情况下并且对密码进行分段加密，这是一种简单而安全的方法。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"1-LAN-Manager-Challenge-Response\"><a href=\"#1-LAN-Manager-Challenge-Response\" class=\"headerlink\" title=\"1.LAN Manager Challenge/Response\"></a>1.LAN Manager Challenge/Response</h5><p>描述:LM验证机制方案比NTLM响应时间更早，安全性更低。</p>\n<p><em>以SMB通讯A(Client)/B(Server)访问请求为例:</em><br>Step1.协商:通信连接请求TCP三次握手,采用SMB协议获取信息请求;<br>Step2.质询:质询的完整过程</p>\n<ul>\n<li>(1) A向B发送需要登录的用户验证是否存在,存在则继续否则失败</li>\n<li>(2) B找到该用户的缓存的LM-Hash密码并且随机生成8B(16位)的挑战数，随后发送给A;</li>\n<li>(3) A收到该16位挑战数(<code>LM Challenge</code>)并且将输入的密码转换成为LM-Hashes(Client A缓存输入密码的哈希值，原始密码会被丢弃，“原始密码在任何情况下都不能被缓存”，这是一条基本的安全准则)</li>\n<li>(4) A将LM-Hashes(16B = 32字符) 加上5B(0X00)凑成21B(42个字符)然后划分成三组每组7字节,之后再对每组7字节做为参数传递给str_to_key()函数，最终得到三组DESKEY得到每组8字节的<code>Hex数据</code>;</li>\n<li>(5) A分别采用上面所得24B数据(3组*8B)依次对Challenge(8B)进行标准DES加密并将其进行拼接最终得到一个24字节的响应数据(这就是我们所说的<code>LM Response</code>),随后发送给B;</li>\n<li>(6) B也是根据4-6步骤生成本地的<code>LM Pesponse</code><br>Step3.响应验证:</li>\n<li>(7) B收到A发送的Response后与本地生成的<code>本地 LM Response</code>进行比对,是则验证成功否则失败;</li>\n</ul>\n<p>LM Challenge / Response 身份验证过程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.假设我们登录的账户是admin密码是weiyigeek(此时B机器上存在admin账户正确密码的LM-Hashes值)</span></span><br><span class=\"line\">[root@WeiyiGeek F:\\]$ python LM-Hashes.py weiyigeek</span><br><span class=\"line\">Password : weiyigeek</span><br><span class=\"line\">LM-Hashse Lower: 623e80a2f48abcf1b3a121027af9fe24</span><br><span class=\"line\">LM-Hashes Upper: 623E80A2F48ABCF1B3A121027AF9FE24</span><br><span class=\"line\"></span><br><span class=\"line\">LM-Hashes(<span class=\"string\">\"weiyigeek\"</span>) = 623e80a2f48abcf1b3a121027af9fe24;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.B确认了Admin账户存在后之后生成8B的挑战并且向A进行发送;</span></span><br><span class=\"line\">LM Challenge = 0001020304050607</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.A收到B发送的Challenge开始进行一些列生成LM Response流程</span></span><br><span class=\"line\"><span class=\"comment\">## 3.1 A输入的密码生成的LM-Hashse(16)+5B(0x00) = 21B</span></span><br><span class=\"line\">623e80a2f48abcf1b3a121027af9fe24 0000000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 3.2 将上步生成的21B数据平均分成三组（7B）</span></span><br><span class=\"line\">623e80a2f48abc f1b3a121027af9 fe240000000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 3.3 每组7字节做为参数传递给str_to_key()函数[就是将前面三组分别转成二进制然后7bit一组在后+0,最终形成8B数据再转回16进制]最终得到三组DESKEY</span></span><br><span class=\"line\">DESKEY 1 : 621ea0142ea42a78</span><br><span class=\"line\">DESKEY 2 : f0d8e8241012eaf2</span><br><span class=\"line\">DESKEY 3 : fe12000000000000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 3.4 然后采用上面三组Key对进行Challenga加密后得到3组Hex字符拼接即可</span></span><br><span class=\"line\">DESKEY 1 : 621ea0142ea42a78 -&gt; 对Challenge 0001020304050607 进行标准DES加密 -&gt; 5df3066f953edbd7</span><br><span class=\"line\">DESKEY 2 : f0d8e8241012eaf2 -&gt; 对Challenge 0001020304050607 进行标准DES加密 -&gt; c1573fddf1430e6f</span><br><span class=\"line\">DESKEY 3 : fe12000000000000 -&gt; 对Challenge 0001020304050607 进行标准DES加密 -&gt; 2d124c5b2022bb6b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 3.5得到最终的Response同时发送给B，B服务端采用相同的方式生成的Local LM Response进行比对，如果匹配则身份验证通过否则失败</span></span><br><span class=\"line\">Response Result : 5df3066f953edbd7c1573fddf1430e6f2d124c5b2022bb6b</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311135919.png\" alt=\"WeiyiGeek.LM Response\" title=\"\" class=\"\">\n                <p>WeiyiGeek.LM Response</p>\n            </figure>\n<h5 id=\"2-NTLM-Challenge-Response\"><a href=\"#2-NTLM-Challenge-Response\" class=\"headerlink\" title=\"2.NTLM Challenge/Response\"></a>2.NTLM Challenge/Response</h5><p>描述:NTLMv1 / NTLMv2 Hashes 是一种Challenge/Response 验证机制，由三种消息组成：通常称为类型1（协商），类型2（质询）和类型3（身份验证）。</p>\n<ul>\n<li>NTLM版本1（“NTLMv1”）该方案解决了LM响应中的一些缺陷，但是同时自身由于NTLM响应几乎总是与LM响应一起发送所以比较薄弱(逆向推倒)，在控制Challenge后可以在短时间内通过彩虹表还原出用户的ntlm hash;</li>\n<li>NTLM版本2（“NTLMv2”）被用来解决NTLM中存在的安全问题。当启用NTLMv2时，NTLM响应被替换为NTLMv2响应，并且LM响应被替换为LMv2响应。</li>\n</ul>\n<p><br></p>\n<p><strong>它们基本工作流程</strong><br>Step1.协商:客户端向服务器发送类型1消息,确认协议版本是V1还是V2？<br>Step2.质询:质询的完整过程服务器进行响应(重点:进行响应)</p>\n<ul>\n<li>(1) 服务器判断用户是否存在：<ul>\n<li>客户端向服务器端发送用户主机信息(必须包含用户名)，服务器用客户端请求的用户名来判断服务器内是否有这个用户；</li>\n<li>若没有这个用户那么认证过程就是失败的；若有则继续：</li>\n</ul>\n</li>\n<li>(2) 服务器生成16位Challenge：<ul>\n<li>服务器接受到请求之后生成一个16位随机数Challenge，服务器使用登录用户名对应的NTLM HASH；</li>\n</ul>\n</li>\n<li>(3) 服务器生成Net NTLM HASH便于比对：<ul>\n<li>服务器用本机SAM文件数据库内NTLM HASH 加密 16位随机数 Challenge生成<code>本地Response 即“Net-NTML HASH”</code>；</li>\n</ul>\n</li>\n<li>(4) 服务器返回16位Challenge：<ul>\n<li>服务器将之前生成的16位随机数Challenge再发送给客户端；</li>\n</ul>\n</li>\n<li>(5) 客户端生成传送给服务端的Response：<ul>\n<li>客户端接受到Challenge之后，使用将要登陆到账户对应的NTLM HASH加密Challenge生成Response，然后将Response发送到服务端 ；</li>\n</ul>\n</li>\n</ul>\n<p>Step3.类型验证:(最关键的部分因为它们向服务器证明客户端用户知道帐户密码)</p>\n<ul>\n<li>(6) 服务端比对Response是否等于Net NTLM HASH：<br>比对服务器端收到客户端的Response后，比对NET NTLM HASH与Response是否相等，相等则通过。 </li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2020/1/20200308004330.png\" alt=\"WeiyiGeek.验证流程\"></p>\n<p><br></p>\n<p><strong>1）NTLMv1 响应计算</strong><br>Step1.首先本地生成输入密码的对应NTLM Hashes值;<br>Step2.其次与LM C/R响应的计算方式是相同的(<code>只是生产LM / NTLM Hashes不同而已</code>),也是将16字节(32个字符)的NTLM散列填充为21个字节，<br>Step3.分别将21Bytes分成3组7bit再将每组7字节做为参数传递给str_to_key()函数最终得到三组DESKEY(8bytes)<br>Step4.将从服务器端接收的Challenge(质询消息的挑战)分别采用上面三组DESKEY进行加密得到三组DES加密的结果;<br>Step5.将上面生成三组Des加密的结果进行拼接形成形成一个24字节的值这就是响应(<code>Response</code>)</p>\n<p>说明:由于生成Response与LM C/R 一致所以这里不演示了，具体参考LM Challenge / Response 身份验证过程;</p>\n<p><br></p>\n<p><strong>2）NTLMv2 响应计算</strong><br>Step1.计算获取NTLM密码的Hashes参考前面<code>实例验证NTLM-Hases生成</code>;<br>Step2.计算NTLMv2哈希值流程;</p>\n<ul>\n<li>1.先将用户名转换为大写然后和目标拼接在一起（<code>目标为 domain or server name 的值，且区分大小写</code>）组成字符串;</li>\n<li><p>2.然后计算这个字符串的Unicode十六进制字符串，使用Step1中的16字节NTLM散列作为密钥;</p>\n</li>\n<li><p>3.将HMAC-MD5消息认证码算法应用于Unicode十六进制字符串，得到16字节的值即为NTLMv2-HASH</p>\n</li>\n<li><p>4.使用16字节NTLMv2散列作为密钥，将HMAC-MD5消息认证码算法应用于质询消息的挑战(Challenge)与blob连接字符串，此时会产生一个16字节的HASH输出值，然后该值与blob连接以形成NTLMv2响应(Response)。</p>\n</li>\n</ul>\n<p>构建被称为“blob”的数据块其简述如下：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311230352.png\" alt=\"WeiyiGeek.blob\" title=\"\" class=\"\">\n                <p>WeiyiGeek.blob</p>\n            </figure>\n<p>在抓包中的关键字段是Blob目</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312004126.png\" alt=\"WeiyiGeek.Blob\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Blob</p>\n            </figure>\n<p><em>实际流程验证:</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目标DOMAIN:HACKONE</span><br><span class=\"line\">用户名称:WeiyiGeek</span><br><span class=\"line\">密码NTLM:fc348d696833ec7ea33e121e8c41b69c (我直接采用上面的NTLM工具生成Hashes)</span><br><span class=\"line\">Challenge:a47b80ee3b16910e</span><br><span class=\"line\">Blob:01010000000000009b09b1969ef7d50166ce6f7781f3d3670000000002001e004400450053004b0054004f0050002d004f004600510031004d0055004e0001001e004400450053004b0054004f0050002d004f004600510031004d0055004e0004001e004400450053004b0054004f0050002d004f004600510031004d0055004e0003001e004400450053004b0054004f0050002d004f004600510031004d0055004e00070008009b09b1969ef7d5010600040002000000080030003000000000000000000000000030000013b5d33a3c720a8cf7789ac2bfb7d9ef82d7d476d546a70be02087c0e11c979d0a001000000000000000000000000000000000000900200063006900660073002f003100390032002e003100360038002e0031002e003500000000000000000000000000</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>1.计算NTLMv2 Hashes值将用户名转换成为大写并且与domain(区分大小写)进行拼接,然后计算这个字符串的Unicode十六进制字符串(同样是小端序);</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEIYIGEEKHACKONE</span><br><span class=\"line\">570045004900590049004700450045004b004800410043004b004f004e004500</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.将密码NTLM Hashes作为密匙将HMAC-MD5消息认证码算法应用于Unicode十六进制字符串(运用于User+Domain)得到16字节的NTLMv2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意这里都必须将Unicode转换Hex String获取的值才可以否则这将是个坑(怎么都复现不了)</span></span><br><span class=\"line\">6061d067efff612ae4f1c704f1a44f08</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.连接质询消息的挑战Challenge与blob得到字符串</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a47b80ee3b16910e01010000000000009b09b1969ef7d50166ce6f7781f3d3670000000002001e004400450053004b0054004f0050002d004f004600510031004d0055004e0001001e004400450053004b0054004f0050002d004f004600510031004d0055004e0004001e004400450053004b0054004f0050002d004f004600510031004d0055004e0003001e004400450053004b0054004f0050002d004f004600510031004d0055004e00070008009b09b1969ef7d5010600040002000000080030003000000000000000000000000030000013b5d33a3c720a8cf7789ac2bfb7d9ef82d7d476d546a70be02087c0e11c979d0a001000000000000000000000000000000000000900200063006900660073002f003100390032002e003100360038002e0031002e003500000000000000000000000000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.将上面的NTLMv2散列作为密匙，将HMAC-MD5消息认证码算法应用于此字符串(Blob值与Challenge)消息产生一个16字节的HASH输出值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">379a24c5f7fb068a140397f6ca2fd3d5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312010335.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<ul>\n<li>4.将上步生成的Hash值与blob连接进行拼接形成NTLMv2响应:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">379a24c5f7fb068a140397f6ca2fd3d501010000000000009b09b1969ef7d50166ce6f7781f3d3670000000002001e004400450053004b0054004f0050002d004f004600510031004d0055004e0001001e004400450053004b0054004f0050002d004f004600510031004d0055004e0004001e004400450053004b0054004f0050002d004f004600510031004d0055004e0003001e004400450053004b0054004f0050002d004f004600510031004d0055004e00070008009b09b1969ef7d5010600040002000000080030003000000000000000000000000030000013b5d33a3c720a8cf7789ac2bfb7d9ef82d7d476d546a70be02087c0e11c979d0a001000000000000000000000000000000000000900200063006900660073002f003100390032002e003100360038002e0031002e003500000000000000000000000000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们可以与下面NTLMv2协议抓包的Response进行对比:</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312010553.png\" alt=\"WeiyiGeek.Responses\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Responses</p>\n            </figure>\n<p><br></p>\n<p>附录:小工具Console直接执行即可unicode转换:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.src = <span class=\"string\">\"https://nf404.github.io/crypto-api/crypto-api.js\"</span>; <span class=\"comment\">//支持HMAC-MD5但是仅仅传入的是字符串(而非Bytes);</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hostname=<span class=\"string\">\"HACKONE\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> username=<span class=\"string\">\"WeiyiGeek\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ntlmhashes=<span class=\"string\">\"fc348d696833ec7ea33e121e8c41b69c\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = username.toUpperCase()+hostname;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringtoHex</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> uhex=<span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;str.length;i++)&#123;</span><br><span class=\"line\">      uhex += str.charCodeAt(i).toString(<span class=\"number\">16</span>)+<span class=\"string\">\"00\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> uhex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stringtoHex(str));</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"0x06-LM-NTLM-C-R-协议分析\"><a href=\"#0x06-LM-NTLM-C-R-协议分析\" class=\"headerlink\" title=\"0x06 LM/NTLM C/R 协议分析\"></a>0x06 LM/NTLM C/R 协议分析</h4><h5 id=\"1-NTLMv1-C-R\"><a href=\"#1-NTLMv1-C-R\" class=\"headerlink\" title=\"1.NTLMv1 C/R\"></a>1.NTLMv1 C/R</h5><p>描述:自Windows Vista/Server2008开始，系统默认禁用Net-NTLMv1如果使用Net-NTLMv2仅修改客户端即可服务器不用修改;</p>\n<p>修改注册表开启Net-NTLMv1:<br><figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ /v lmcompatibilitylevel /t REG_DWORD /d <span class=\"number\">0</span> /f</span><br></pre></td></tr></table></figure></p>\n<p>以下采用协议抓的包进行简单的分析,同样采用smb关键字进行过滤<code>smb and ip.addr==192.168.199.210</code>,做个大概的说明其实与NTLMv2流程差别不大，仅仅是加密算法以及C/R位数不同（所以主要的还是看NTLMv2为主）;</p>\n<p><br></p>\n<p><strong>1) 协商消息示例</strong></p>\n<p>NTLM Message Type: NTLMSSP_NEGOTIATE (0x00000001)</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312013207.png\" alt=\"WeiyiGeek.NTLMv1\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NTLMv1</p>\n            </figure>\n<p><br></p>\n<p><strong>2) 质询消息示例</strong><br>NTLM Message Type: NTLMSSP_CHALLENGE (0x00000002)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NTLM Server Challenge: f9c7fc816b991824</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312013350.png\" alt=\"WeiyiGeek.NTLMv2\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NTLMv2</p>\n            </figure></p>\n<p>备注:在许多的文章中都会说到NTLMv1生成的是8位的Challenge而NTLMv2生成的是16位的Challenge但是根据实际抓包的情况来看都是8Bytes(16位)的挑战;</p>\n<p><br></p>\n<p><strong>3) 身份验证消息示例</strong><br>NTLM Message Type: NTLMSSP_AUTH (0x00000003)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lan Manager Response: c67ee888f6b41a4400000000000000000000000000000000  <span class=\"comment\">#如果采用了NTLMv2版本LM Response全为0</span></span><br><span class=\"line\">NTLM Response: 293b99da834c86c6e37c37a20920b41581be32740a5e062e</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200312014202.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>备注:这里是区别采用是NTLMv1与NTLMv2版本进行认证的，值得注意一下;</p>\n<p><br></p>\n<h5 id=\"2-NTLMv2-C-R\"><a href=\"#2-NTLMv2-C-R\" class=\"headerlink\" title=\"2.NTLMv2 C/R\"></a>2.NTLMv2 C/R</h5><p>描述:NTLM响应由较新的客户端发送且NTLMv2为当前使用最为广泛的协议版本;</p>\n<p>考虑到网络认证协议有多个版本以及现有的环境下面此处以NTLMv2为例进行实际分析<br>环境说明:<br>192.168.1.6 A客户端<br>192.168.1.5 B服务器</p>\n<p><br></p>\n<p><strong>1) 协商消息示例</strong><br>描述:协商消息从客户端发送到服务器以启动NTLM身份验证,其主要目的是通过FLAG指明支持的选项来建立认证的“基本规则”。(此处参考:来源3)</p>\n<p>名称解释:</p>\n<blockquote>\n<p>NTLMSSP: Microsoft NTLM Security Support Provider;</p>\n</blockquote>\n<p><br></p>\n<p>Wrieshark抓取协商消息数据包过滤条件(<code>smb2 and ip.addr==192.168.1.5</code>)，查找关键字段<code>NTLM Message Type: NTLMSSP_NEGOTIATE (0x00000001)</code></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311210304.png\" alt=\"WeiyiGeek.协商消息数据包\" title=\"\" class=\"\">\n                <p>WeiyiGeek.协商消息数据包</p>\n            </figure>\n<p><br></p>\n<p>协商消息示例(十六进制)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4e544c4d53535000 -- NTLMSSP签名(不会变化)</span><br><span class=\"line\">01000000 - NTLM消息类型1(谈判)</span><br><span class=\"line\"></span><br><span class=\"line\">mechToken: 4e544c4d5353500001000000978208e2000000000000000000000000000000000601b11d0000000f</span><br></pre></td></tr></table></figure></p>\n<p>示例说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#茜さす大佬的Hex我确实对应不上不知道是系统版本问题还是抓包工具不同的原因(求解-有知道的大佬可以在下面留个言)</span></span><br><span class=\"line\">4e544c4d53535000010000000732000006000600330000000b000b0028000000050093080000000f574f524b53544154494f4e444f4d41494e</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311205317.png\" alt=\"WeiyiGeek.分解\" title=\"\" class=\"\">\n                <p>WeiyiGeek.分解</p>\n            </figure></p>\n<p><br></p>\n<p><strong>2) 质询消息示例</strong><br>描述:质询消息由服务器发送到客户端以响应客户端的协商消息;它用于完成与客户的选择的谈判，并且向客户提供挑战,<code>它可以选择包含有关认证目标的信息</code>。</p>\n<p>关键字段:<code>NTLM Message Type: NTLMSSP_CHALLENGE (0x00000002)</code><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311211324.png\" alt=\"WeiyiGeek.质询消息数据库包\" title=\"\" class=\"\">\n                <p>WeiyiGeek.质询消息数据库包</p>\n            </figure></p>\n<p>质询消息示例(主要参数):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">responseToken:</span><br><span class=\"line\">0x4e544c4d535350000 -- NTLMSSP签名(不会变化)</span><br><span class=\"line\">0x02000000 -- NTLM消息类型2(挑战)</span><br><span class=\"line\">0x15828ae2 -- 谈判标志</span><br><span class=\"line\">0x0a47b80ee3b16910e -- 服务器发的挑战</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Security Blob</span></span><br><span class=\"line\">a182010b30820107a0030a0101a10c060a2b06010401823702020aa281f10481ee4e544c4d53535000020000001e001e003800000015828ae2a47b80ee3b16910e000000000000000098009800560000000a00ba470000000f4400450053004b0054004f0050002d004f004600510031004d0055004e0002001e004400450053004b0054004f0050002d004f004600510031004d0055004e0001001e004400450053004b0054004f0050002d004f004600510031004d0055004e0004001e004400450053004b0054004f0050002d004f004600510031004d0055004e0003001e004400450053004b0054004f0050002d004f004600510031004d0055004e00070008009b09b1969ef7d50100000000</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>3) 身份验证消息示例</strong><br>该消息包含客户端对上一步挑战的响应，这表明客户知道账户密码而不直接发送密码;并且还指示<code>身份验证目标（域或服务器名称）和身份验证帐户的用户名以及客户端工作站</code>名称。</p>\n<p>关键字段:<code>NTLM Message Type: NTLMSSP_AUTH (0x00000003)</code>,此处根据<code>NTLMv2 Response</code>字段能判断出采用v2协议:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311213826.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<p>身份验证消息结构示例(主要参数):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">responseToken:</span><br><span class=\"line\">4e544c4d53535000 -- NTLMSSP签名(不会变化)</span><br><span class=\"line\">03000000 -- NTLM消息类型3(认证)</span><br><span class=\"line\">000000000000000000000000000000000000000000000000 -- Lan Manager Response(对于老式系统认证使用)</span><br><span class=\"line\">0000000000000000 -- NTLMv2 Client Challenge:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#NTLM Response / NTLMv2 Response</span></span><br><span class=\"line\">379a24c5f7fb068a140397f6ca2fd3d501010000000000009b09b1969ef7d50166ce6f7781f3d3670000000002001e004400450053004b0054004f0050002d004f004600510031004d0055004e0001001e004400450053004b0054004f0050002d004f004600510031004d0055004e0004001e004400450053004b0054004f0050002d004f004600510031004d0055004e0003001e004400450053004b0054004f0050002d004f004600510031004d0055004e00070008009b09b1969ef7d5010600040002000000080030003000000000000000000000000030000013b5d33a3c720a8cf7789ac2bfb7d9ef82d7d476d546a70be02087c0e11c979d0a001000000000000000000000000000000000000900200063006900660073002f003100390032002e003100360038002e0031002e003500000000000000000000000000</span><br><span class=\"line\"></span><br><span class=\"line\">66ce6f7781f3d367 -- NTLMv2 Client Challenge</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311213357.png\" alt=\"WeiyiGeek.身份验证消息\" title=\"\" class=\"\">\n                <p>WeiyiGeek.身份验证消息</p>\n            </figure></p>\n<p>从上面身份验证消息结构示例可以看到A客户端创建一个或多个挑战的响应，大概有六种类型的回应:</p>\n<ul>\n<li>1.LM（LAN Manager）响应 - 由大多数较早的客户端发送，这是“原始”响应类型。</li>\n<li>2.NTLM 响应 - 这是由基于NT的客户端发送的，包括Windows 2000和XP。</li>\n<li>3.NTLMv2 响应 - 在Windows NT Service Pack 4中引入的一种较新的响应类型。它替换启用了NTLM版本2的系统上的NTLM响应。</li>\n<li>4.LMv2响应 - 替代NTLM版本2系统上的LM响应。</li>\n<li>5.NTLM2会话响应 - 用于在没有NTLMv2身份验证的情况下协商NTLM2会话安全性时，此方案会更改LM和NTLM响应的语义。</li>\n<li>5.匿名响应 - 当匿名上下文正在建立时使用; 没有提供实际的证书，也没有真正的身份验证。“存根”字段显示在类型3消息中。</li>\n</ul>\n<p><br></p>\n<p><strong>4) 认证成功与失败示例</strong></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200311222125.png\" alt=\"WeiyiGeek.Auth_Error\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Auth_Error</p>\n            </figure>\n<p><br></p>\n<h4 id=\"0x07-学习总结\"><a href=\"#0x07-学习总结\" class=\"headerlink\" title=\"0x07 学习总结\"></a>0x07 学习总结</h4><p>描述:通过上面的学习以及加密原理的了解，可以针对于LM/NTLM有一个简单的入门了解，当我们在进行PTH攻击以及理解的时候是非常有用，并且有助于我们了解其他的Windows认证协议;</p>\n<p><em>Net认证的Hash比较总结:</em></p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>LM-Hashes</th>\n<th>NTLMv1</th>\n<th>NTLMv2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>密码区分大小写</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>散列密钥长度</td>\n<td>56 bit + 56 bit(112)</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>密码散列算法</td>\n<td>DES(mode=ECB)</td>\n<td>MD4</td>\n<td>MD4</td>\n</tr>\n<tr>\n<td>散列值的长度</td>\n<td>64+64=128bit</td>\n<td>128 bit</td>\n<td>128 bit</td>\n</tr>\n<tr>\n<td>C/R 密钥长度</td>\n<td>56bit + 56bit + 18bit</td>\n<td>56bit + 56bit + 18bit</td>\n<td>128 bit</td>\n</tr>\n<tr>\n<td>C/R 算法</td>\n<td>DES(mode=ECB)</td>\n<td>DES(mode=ECB)</td>\n<td>HMAC_MD5</td>\n</tr>\n<tr>\n<td>C/R 长度</td>\n<td>64bit + 64bit + 64bit</td>\n<td>64bit + 64bit + 64bit</td>\n<td>128 bit</td>\n</tr>\n</tbody>\n</table>\n<hr/>\n\n<h4 id=\"0x08-参考来源\"><a href=\"#0x08-参考来源\" class=\"headerlink\" title=\"0x08 参考来源\"></a>0x08 参考来源</h4><p><strong>1) 参考资料</strong></p>\n<ul>\n<li>1.<a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/microsoft-ntlm\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/windows/win32/secauthn/microsoft-ntlm</a></li>\n<li>2.<a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/microsoft-kerberos\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/windows/win32/secauthn/microsoft-kerberos</a> </li>\n<li>3.<a href=\"https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html\" target=\"_blank\" rel=\"noopener\">https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html</a></li>\n<li>4.<a href=\"https://www.insecurity.be/blog/2018/01/21/retrieving-ntlm-hashes-and-what-changed-technical-writeup/\" target=\"_blank\" rel=\"noopener\">https://www.insecurity.be/blog/2018/01/21/retrieving-ntlm-hashes-and-what-changed-technical-writeup/</a></li>\n<li>5.<a href=\"https://xz.aliyun.com/t/2445\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/2445</a></li>\n<li>6.<a href=\"https://3gstudent.github.io/3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D/\" target=\"_blank\" rel=\"noopener\">https://3gstudent.github.io/3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D/</a></li>\n</ul>\n<p><br></p>\n<p><strong>2) 文中工具</strong></p>\n<ul>\n<li>1.进程内存数据提取:<a href=\"https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></li>\n<li>2.MD4加密:<a href=\"https://nf404.github.io/crypto-api/crypto-api.min.js\" target=\"_blank\" rel=\"noopener\">https://nf404.github.io/crypto-api/crypto-api.min.js</a></li>\n<li>3.DEC编码加密:<a href=\"http://www.slavasoft.com/hashcalc/\" target=\"_blank\" rel=\"noopener\">http://www.slavasoft.com/hashcalc/</a></li>\n<li>4.JS之MD4加密编码算法:<a href=\"https://www.iteye.com/blog/neil-yang-703462\" target=\"_blank\" rel=\"noopener\">https://www.iteye.com/blog/neil-yang-703462</a></li>\n<li>5.LM-NTLM脚本: <a href=\"https://xz.aliyun.com/t/2445\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/2445</a></li>\n<li>6.Hashcat-Hashes破解格式:<a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\" target=\"_blank\" rel=\"noopener\">https://hashcat.net/wiki/doku.php?id=example_hashes</a></li>\n<li>7.自己: <a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Cryption/DES/Python\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Cryption/DES/Python</a></li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Windows原理","path":"api/categories/Windows原理.json"}],"tags":[{"name":"协议","path":"api/tags/协议.json"}]}