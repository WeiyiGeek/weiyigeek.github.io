{"title":"使用WebP-Server-Go无缝转换图片为Google的webp格式让你网站访问加载速度飞起来","slug":"系统运维/Application/Convert/Images/使用WebP-Server-Go无缝转换图片为Google的webp格式让你网站访问加载速度飞起来","date":"2022-07-18T05:36:30.000Z","updated":"2023-01-31T02:29:10.470Z","url":"2022/7-18-674.html","path":"api/articles/2022/7-18-674.html.json","covers":["https://img.weiyigeek.top/2022/5/20220726201430.png","https://img.weiyigeek.top/2022/5/20220727111423.png","https://img.weiyigeek.top/2022/5/20220727142451.png","https://img.weiyigeek.top/2022/5/20220727143937.png","https://img.weiyigeek.top/2022/5/20220728130434.png","https://img.weiyigeek.top/2022/5/20220728131209.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h2><h3 id=\"WebP-介绍\"><a href=\"#WebP-介绍\" class=\"headerlink\" title=\"WebP 介绍\"></a>WebP 介绍</h3><p><strong>什么是 WebP?</strong><br>WebP是由Google推出的一种全新图片文件格式，也是Telegram Stickers 主力使用的文件格式，可为 Web 上的图像提供卓越的无损和有损压缩, 它是在保证原有的图像质量前提下尽可能减少图形体积的一种格式, 使用WebP网站管理员和 Web 开发人员可以创建更小、更丰富的图像，从而使 Web 加载性能的提升更快。</p>\n<ul>\n<li>WebP的有损压缩算法是基于VP8视频格式的帧内编码，并以RIFF作为容器格式。 因此，它是一个具有八位色彩深度和以1:2的比例进行色度子采样的亮度-色度模型（YCbCr 4:2:0）的基于块的转换方案。不含内容的情况下，RIFF容器要求只需20字节的开销，依然能保存额外的元数据(metadata)。</li>\n<li>WebP图像的边长限制为16383像素。</li>\n</ul>\n<p>在 WebP 的官网中，我们可以发现 Google 是这样宣传 WebP 的：<code>WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller than comparable JPEG images at equivalent SSIM quality index</code>.(与 PNG 相比，WebP 无损图像的大小要小 26%。在同等 SSIM 质量指数下，WebP 有损图像比可比较的 JPEG 图像小 25-34%)</p>\n<p>通过是否对图片进行压缩，我们可以分为：</p>\n<ul>\n<li>无压缩。不对图片数据进行压缩处理，能准确地呈现原图片。 BMP 格式就是其中之一。</li>\n<li>无损压缩。压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的尺寸。 png 是其中的代表。</li>\n<li>有损压缩。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的尺寸。 其中的代表是 jpg。</li>\n</ul>\n<p>简单来说，WebP 图片格式的存在，让我们在 WebP 上展示的图片体积可以有较大幅度的缩小，也就带来了加载性能的提升。</p>\n<p><br/></p>\n<p><strong>如何创建(转换)一个webp格式图片?</strong></p>\n<p>要生成一个 WebP 图片非常简单，只需要下载 Google 提供的 cwebp 工具，并且使用 <code>cwebp -q 70 picture_with_alpha.png -o picture_with_alpha.webp</code> 命令就可以转换了, 并且转换出来的 webp 图片比原图会小不少，但是这个是单张图片，我们的目的是让站点的图片可以无痛地以 WebP 格式输出，如果我们的博客上有 100+ 张图片转换该如何操作呢？如果是更多呢？</p>\n<p><br></p>\n<p><strong>需求背景</strong><br>那么开发人员如何优雅的在不替换图片地址的情况下，将图片转为 webp 格式然后输出呢？</p>\n<blockquote>\n<p>答: 此时可以使用 webp-sh 组织最新开源的 <a href=\"https://github.com/webp-sh/webp_server_go\" target=\"_blank\" rel=\"noopener\">webp_server_go</a> 项目，其原理是当我们请求一张图片的时候使用 web 代理工具转发到 webp_server_go 应用进行处理，处理完成之后返回 webp 格式的图片，并且会保留处理后的图片以供后面的 Nginx Web访问。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"Webp-Server-介绍\"><a href=\"#Webp-Server-介绍\" class=\"headerlink\" title=\"Webp-Server 介绍\"></a>Webp-Server 介绍</h3><p><strong>Webp-Server</strong><br>描述: WebP-Server工具，可将您的 JPG/PNG (有损压缩与无损压缩以及常用图片格式) 即时压缩为 WebP 格式，非常高效可以大幅度的减少图片体积，减少出口带宽，提高用户体验。目前支持的图片格式：JPEG、PNG、BMP、GIF（暂时为静态图片。</p>\n<p>例如，使用Webp-Server并争取配置号Nginx代理后，当你访问 <code>https://weiyigeek.top/1.jpg</code> 时，它将作为 image/webp ，而不会更改 URL, 但对于 Safari 用户，将使用原始图像。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220726201430.png\" alt=\"WeiyiGeek.VS WebP-Server\" title=\"\" class=\"\">\n                <p>WeiyiGeek.VS WebP-Server</p>\n            </figure>\n<p><br/></p>\n<p><strong>支持多开发语言</strong><br>描述: 其实 webp server 有多种语言都实现了，并且这些仓库还都放在了 webp-sh 该 Organizations 下, 但是对于当下Go语言在编程开发语言中流行程度，官方也非常建议使用go开发的webp-server版本，并且其支持多个webp-server Feature。</p>\n<p>Tips: WebP Server is under the GPLv3.</p>\n<p>webp_server_go - 主要更新仓库 当前版本 (WebP Server Go 0.4.5)<br>webp_server_node - 最后更新 2020 年 7 月 6 日<br>webp_server_java - 最后更新 2020 年 3 月 6 日<br>webp_server_python - 最后更新时间 2020 年 3 月 2 日</p>\n<p>温馨提示: 不同版本之间的比较参考地址<a href=\"https://docs.webp.sh/comparisons\" target=\"_blank\" rel=\"noopener\">https://docs.webp.sh/comparisons</a>.</p>\n<p><br/></p>\n<p><strong>Webp-server 的当前问题?</strong></p>\n<ul>\n<li>Safari doesn’t support it. 不支持 Safari。</li>\n<li>Tons of Nginx and JavaScript works. 工作需要依赖于Nginx与JavaScript。</li>\n<li>It need a tool to transfer. 它需要一个工具来传输。</li>\n<li>mod_pagespeed is not easy to use. mod_pagespeed 不好用。</li>\n</ul>\n<p><br/></p>\n<p><strong>学习参考</strong><br>官网地址: <a href=\"https://webp.sh\" target=\"_blank\" rel=\"noopener\">https://webp.sh</a><br>文档说明: <a href=\"https://docs.webp.sh/\" target=\"_blank\" rel=\"noopener\">https://docs.webp.sh/</a><br>项目地址: <a href=\"https://github.com/webp-sh/webp_server_go\" target=\"_blank\" rel=\"noopener\">https://github.com/webp-sh/webp_server_go</a><br>下载地址: <a href=\"https://github.com/webp-sh/webp_server_go/releases/\" target=\"_blank\" rel=\"noopener\">https://github.com/webp-sh/webp_server_go/releases/</a><br>WebP Cloud Services：<a href=\"https://webp.se/we\" target=\"_blank\" rel=\"noopener\">https://webp.se/we</a></p>\n<hr>\n<h2 id=\"0x01-安装实践\"><a href=\"#0x01-安装实践\" class=\"headerlink\" title=\"0x01 安装实践\"></a>0x01 安装实践</h2><h3 id=\"二进制安装部署\"><a href=\"#二进制安装部署\" class=\"headerlink\" title=\"二进制安装部署\"></a>二进制安装部署</h3><p>描述: 此处采用 WebP 服务器的 Go 版本进行实践，此时我已经进行了Nginx的安装配置, 如没有你还安装配置安全的Nginx的读者可以浏览此篇入门文章【<a href=\"https://blog.weiyigeek.top/2019/9-1-121.html\">1.Nginx基础介绍与安装配置实践指南 - https://blog.weiyigeek.top/2019/9-1-121.html</a>】进行学习。</p>\n<p><strong>快速部署</strong><br>Step 1.获取 WebP server-Go 版本的二进制方式进行安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前置环境，您需要安装一些依赖项（AVIF 编码器需要它）：</span></span><br><span class=\"line\">INSTALL_HOME=/opt/webps</span><br><span class=\"line\">WEBP_HOST=127.0.0.1</span><br><span class=\"line\">WEBP_PORT=3333</span><br><span class=\"line\">WEBP_QUALITY=80</span><br><span class=\"line\">IMG_PATH=/usr/share/nginx/html</span><br><span class=\"line\">EXHAUST_PATH=<span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Ubuntu</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /usr/bin/apt ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  apt install libaom-dev -y</span><br><span class=\"line\">  ln -s /usr/lib/x86_64-linux-gnu/libaom.so /usr/lib/x86_64-linux-gnu/libaom.so.3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f /usr/bin/yum ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  yum install libaom-devel -y</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载、可执行权限、软连接</span></span><br><span class=\"line\">mkdir -vp <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class=\"line\">wget --no-check-certificate https://github.com/webp-sh/webp_server_go/releases/download/0.4.5/webp-server-linux-amd64-80aa8cb63a85a986f83a88579e8d2b4b -O <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class=\"line\">chmod +x <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class=\"line\">ln -s <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/webp-server /usr/<span class=\"built_in\">local</span>/bin/webp-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/webp-server -dump-config &gt; <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class=\"line\">sed -i -e <span class=\"string\">\"s#127.0.0.1#<span class=\"variable\">$&#123;WEBP_HOST&#125;</span>#\"</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">\"s#3333#<span class=\"variable\">$&#123;WEBP_PORT&#125;</span>#\"</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">\"s#80#<span class=\"variable\">$&#123;WEBP_QUALITY&#125;</span>#\"</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">\"s#./pics#<span class=\"variable\">$&#123;IMG_PATH&#125;</span>#\"</span> \\</span><br><span class=\"line\">  -e <span class=\"string\">\"s#./exhaust#<span class=\"variable\">$&#123;EXHAUST_PATH&#125;</span>#\"</span> <span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手动运行 webp-server 服务 (前台运行)</span></span><br><span class=\"line\"><span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/webp-server --config=<span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>使用参数一览:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webp-server --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage of webp-server:</span><br><span class=\"line\">  -V    Show version information.</span><br><span class=\"line\">  -config string /path/to/config.json. (Default: ./config.json) (default <span class=\"string\">\"config.json\"</span>)</span><br><span class=\"line\">  -dump-config  Print sample config.json</span><br><span class=\"line\">  -dump-systemd Print sample systemd service file.</span><br><span class=\"line\">  -<span class=\"built_in\">jobs</span> int     Prefetch thread, default is all. (default 2)</span><br><span class=\"line\">  -prefetch     Prefetch and convert image to webp</span><br><span class=\"line\">  -v    Verbose, <span class=\"built_in\">print</span> out debug info.</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220727111423.png\" alt=\"WeiyiGeek.Start webp-server 服务\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Start webp-server 服务</p>\n            </figure>\n<p>温馨提示: webp-server 默认生成的<code>config.json</code>配置文件实例及其参数解释。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /opt/webps/config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"HOST\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"PORT\"</span>: <span class=\"string\">\"3333\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"QUALITY\"</span>: <span class=\"string\">\"80\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"IMG_PATH\"</span>: <span class=\"string\">\"/usr/share/nginx/html\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"EXHAUST_PATH\"</span>: <span class=\"string\">\"/opt/webps/cache\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ALLOWED_TYPES\"</span>: [<span class=\"string\">\"jpg\"</span>,<span class=\"string\">\"png\"</span>,<span class=\"string\">\"jpeg\"</span>,<span class=\"string\">\"bmp\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"ENABLE_AVIF\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>HOST：一般不修改。</li>\n<li>PORT：webp_server_go 的运行端口。</li>\n<li>QUALITY：转换质量，默认为 80%。</li>\n<li>IMG_PATH：固定格式，可以为 <code>/usr/share/nginx/html</code> 目录路径 或者 Remote Backend 站点 <code>&quot;IMG_PATH&quot;: &quot;https://test.webp.sh&quot;</code></li>\n<li>EXHAUST_PATH：固定格式，/运行 Halo 的用户名/.halo/cache</li>\n<li>ALLOWED_TYPES：需要转换的格式</li>\n</ul>\n<p>温馨提示: 默认情况下<code>&quot;ENABLE_AVIF&quot;: false</code>是禁用 AVIF 支持，因为将图像转换为 AVIF 会消耗 CPU。<br>温馨提示: 使用 <code>prefetch</code> 参数会将您的所有图像转换为 WebP, 如果要在预取时控制要使用的线程，请添加 -jobs=4, 默认情况下它将使用您所有的 CPU 内核。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地 CPU 内核数</span></span><br><span class=\"line\">$ lscpu  | grep <span class=\"string\">\"^CPU(s)\"</span></span><br><span class=\"line\">CPU(s):   2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定 webp 预取时使用的内核数</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/webp-server -prefetch -<span class=\"built_in\">jobs</span>=1 --config=<span class=\"variable\">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class=\"line\">  <span class=\"comment\"># INFO[2022-07-27 11:47:25][153:main.convertLog()] WebP@80.00%: /usr/local/app/weiyigeek/img/wechat-search.png-&gt;/opt/webps/cache/img/wechat-search.png.1647996506.webp 32641-&gt;12416 38.04% deflated</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>Step 2.当然也可使用systemd来管理webp服务，好在 webp 为我们提供标准的 systemd 服务文件, 可使用如下命令进行生成与配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/webp-server -dump-systemd &gt; /lib/systemd/system/webp-server.service</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> webp-server.service</span><br><span class=\"line\">systemctl start webp-server.service</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 使用 <code>-dump-systemd</code> 参数生成的配置文件，其中默认的 webp-server 路径为 <code>/opt/webps/webp-server</code>，并且配置文件路径为 <code>/opt/webps/config.json</code>，如果你的安装路径不是上述安装路径请更改<code>/lib/systemd/system/webp-server.service</code>中对应路径。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /lib/systemd/system/webp-server.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=WebP Server Go</span><br><span class=\"line\">Documentation=https://github.com/webp-sh/webp_server_go</span><br><span class=\"line\">After=nginx.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">StandardError=journal</span><br><span class=\"line\">WorkingDirectory=/opt/webps</span><br><span class=\"line\">ExecStart=/opt/webps/webp-server --config /opt/webps/config.json</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=3s</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>扩展补充: 使用Supervisor托管启动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:webpserver]</span><br><span class=\"line\"><span class=\"built_in\">command</span>=/your/webservergo/path/webp-server-linux-amd64 --config=/your/webservergo/path/config.json</span><br><span class=\"line\">directory=/your/webservergo/path</span><br><span class=\"line\">autorestart=<span class=\"literal\">true</span></span><br><span class=\"line\">startsecs=3</span><br><span class=\"line\">startretries=3</span><br><span class=\"line\">stdout_logfile=/your/<span class=\"built_in\">log</span>/path/webpserver.out.log</span><br><span class=\"line\">stderr_logfile=/your/<span class=\"built_in\">log</span>/path/webpserver.err.log</span><br><span class=\"line\">stdout_logfile_maxbytes=2MB</span><br><span class=\"line\">stderr_logfile_maxbytes=2MB</span><br><span class=\"line\">user=root</span><br><span class=\"line\">priority=999</span><br><span class=\"line\">numprocs=1</span><br><span class=\"line\">process_name=%(program_name)s_%(process_num)02d</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>Step 3.Nginx 配置示例只允许图像发送到 WebP Server Go，其他扩展应该只发送原始文件，让您的 Nginx 访问图片后端代理到 <code>proxy_pass http://localhost:3333/</code>，你的 webp-server 就可以运行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># static.conf</span></span><br><span class=\"line\"><span class=\"comment\"># https - static.weiyigeek.top</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen       80;</span><br><span class=\"line\">  listen       443 ssl http2;</span><br><span class=\"line\">  server_name  static.weiyigeek.top;</span><br><span class=\"line\"></span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\">  access_log /var/<span class=\"built_in\">log</span>/nginx/static/static.log custom buffer=128k flush=3m;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># CORS</span></span><br><span class=\"line\">  add_header Access-Control-Allow-Origin <span class=\"string\">'*.weiyigeek.top'</span>;</span><br><span class=\"line\">  add_header Access-Control-Allow-Methods <span class=\"string\">'GET,POST'</span>;</span><br><span class=\"line\">  add_header Access-Control-Allow-Headers <span class=\"string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># HSTS</span></span><br><span class=\"line\">  add_header Strict-Transport-Security <span class=\"string\">\"max-age=15768000;includeSubDomains;preload\"</span> always;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># XXS-Protection</span></span><br><span class=\"line\">  add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ssl 证书</span></span><br><span class=\"line\">  ssl_certificate      /root/.acme.sh/weiyigeek.top_ecc/fullchain.cer;</span><br><span class=\"line\">  ssl_certificate_key  /root/.acme.sh/weiyigeek.top_ecc/weiyigeek.top.key;</span><br><span class=\"line\">  ssl_session_cache    shared:MozSSL:10m;</span><br><span class=\"line\">  ssl_session_timeout  1d;</span><br><span class=\"line\">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;</span><br><span class=\"line\">  ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 访问规则</span></span><br><span class=\"line\">  location ~* \\.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3333;</span><br><span class=\"line\">    proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    proxy_hide_header X-Powered-By;</span><br><span class=\"line\">    proxy_set_header HOST <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    add_header Cache-Control <span class=\"string\">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 如果您的网站使用 CDN（如 Cloudflare），我们建议您添加一个私有标头以防止 Cloudflare 缓存这些图像，如下例所示</span></span><br><span class=\"line\">  location ^~ /wp-content/uploads/ &#123;</span><br><span class=\"line\">    add_header Cache-Control <span class=\"string\">'private'</span>;</span><br><span class=\"line\">    proxy_pass http://127.0.0.1:3333;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>检查并重载Nginx配置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查配置文件是否有问题</span></span><br><span class=\"line\">nginx -t </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载 Nginx 配置</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 上述配置中我添加了Nginx安全方面的配置，如果你只是测试验证则可以取消上述ssl等安全配置。</p>\n<p><br></p>\n<p>Step 4.重载 nginx 后查看源站图片相应头与通过webp-server图片响应头的区别。</p>\n<ul>\n<li>源站图片地址: <a href=\"https://www.weiyigeek.top/img/wechat-search.png\" target=\"_blank\" rel=\"noopener\">https://www.weiyigeek.top/img/wechat-search.png</a></li>\n<li>webp格式图片地址:  <a href=\"https://static.weiyigeek.top/img/wechat-search.png\" target=\"_blank\" rel=\"noopener\">https://static.weiyigeek.top/img/wechat-search.png</a></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220727142451.png\" alt=\"WeiyiGeek.webp-server images\" title=\"\" class=\"\">\n                <p>WeiyiGeek.webp-server images</p>\n            </figure>\n<p>温馨提示: WebP Server Go 将呈现以下标头<code>etag</code>和<code>x-compression-rate</code>作为响应, 前者格式为<code>W/&quot;&lt;content length&gt;-&lt;CRC Checksum of the file&gt;&quot;</code>,而后者格式为 <code>size(webp_image)/size(original_image)</code> 如果超过1则返回原图。</p>\n<p><br></p>\n<p>Step 5.我们还可以在webp服务器中支持多路径，仅仅只需要一个创建链接符号 ,例如：<code>ln -s  /app/weiyigeek.gitee.io/img/ /usr/share/nginx/html/blog/</code>，然后在分别访问如下验证区别。</p>\n<ul>\n<li>源站图片地址: <a href=\"https://blog.weiyigeek.top/img/banner.jpg\">https://blog.weiyigeek.top/img/banner.jpg</a></li>\n<li>webp格式图片地址: <a href=\"https://static.weiyigeek.top/blog/banner.jpg\" target=\"_blank\" rel=\"noopener\">https://static.weiyigeek.top/blog/banner.jpg</a></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220727143937.png\" alt=\"WeiyiGeek.webp-server banner\" title=\"\" class=\"\">\n                <p>WeiyiGeek.webp-server banner</p>\n            </figure>\n<p>从上述两个对比结果中可以看到使用webp-server转换后的图片体积直线下降, 此处以<code>banner.jpg</code>图片文件为例，可以看到从原图98K下降到了17.57K。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 原图大小 (98K)</span></span><br><span class=\"line\">$ ls -alh banner.jpg</span><br><span class=\"line\">-rw-r--r-- 1 ubuntu ubuntu 98K Apr 13 20:40 banner.jpg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Nginx Gzip 源站图片大小 80.57KB ~ (原图 98KB) 下载于：220 毫秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Webp 格式图片大小  17.57 KB ~ (18 kB) 下载于：187 毫秒</span></span><br><span class=\"line\">$ ls /opt/webps/cache/blog</span><br><span class=\"line\">-rw-r--r-- 1 root root  18K Jul 27 14:33 banner.jpg.1649853609.webp</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Docker安装部署\"><a href=\"#Docker安装部署\" class=\"headerlink\" title=\"Docker安装部署\"></a>Docker安装部署</h3><p>描述: 如果要运行 webp-server insider docker 容器，可以运行以下命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker command</span></span><br><span class=\"line\">docker run -d -p 3333:3333 -v /path/to/pics:/opt/pics --name webp-server webpsh/webp-server-go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker-compose.yml</span></span><br><span class=\"line\">tee docker-compose.yml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">version: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  webp:</span><br><span class=\"line\">    image: webpsh/webp-server-go</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./path/to/pics:/opt/pics</span><br><span class=\"line\">      - ./path/to/exhaust:/opt/exhaust</span><br><span class=\"line\">      - ./config.json:/etc/config.json</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      -  127.0.0.1:3333:3333</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      resources:</span><br><span class=\"line\">        limits:</span><br><span class=\"line\">          memory: 200M</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<hr>\n<h2 id=\"0x02-博客网站图片资源访问优化实践\"><a href=\"#0x02-博客网站图片资源访问优化实践\" class=\"headerlink\" title=\"0x02 博客网站图片资源访问优化实践\"></a>0x02 博客网站图片资源访问优化实践</h2><p>描述: 此处我利用自己的博客网站 (<a href=\"https://blog.weiyigeek.top\">https://blog.weiyigeek.top</a>) 进行将使用webp_server_go，将网站中的图片优化前后的访问情况进行对比。</p>\n<p>步骤 01.首先将webp_server的config.json文件中<code>IMG_PATH</code>指向我们的博客在Linux中的绝对地址目录，随后重启webp-server.service.</p>\n<p><br/></p>\n<p>步骤 02.然后修改Nginx中针对博客站点的配置(<code>/usr/local/nginx/conf.d/blog.conf</code>)，将图片访问全都代理到本地的3333端口(127.0.0.1:3333)，修改后重载nginx;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ more /usr/<span class=\"built_in\">local</span>/nginx/conf.d/blog.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问规则 (关键部分)</span></span><br><span class=\"line\">location ~* \\.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class=\"line\">  proxy_pass http://127.0.0.1:3333;</span><br><span class=\"line\">  proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">  proxy_hide_header X-Powered-By;</span><br><span class=\"line\">  proxy_set_header HOST <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">  add_header Cache-Control <span class=\"string\">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置核验 &amp; 重载Nginx</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>步骤 03.当Nginx重载后我们便可观察开启webp_server访问后端图片与直接访问后端图片网站访问速度的区别（在开启前我已经进行相应的测试截图）。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220728130434.png\" alt=\"WeiyiGeek.优化后访问速度VS\" title=\"\" class=\"\">\n                <p>WeiyiGeek.优化后访问速度VS</p>\n            </figure>\n<p>从图中我们可以得出在未使用<code>webp_server</code>进行图片转换时其传输的字节数以及完成耗时，都要大于开启<code>webp_server</code>图片转换的站点。</p>\n<p><br/></p>\n<p>步骤 04.为了更加直观的展示 Web 站点性能如何，我们可以使用 Google 的 <a href=\"https://developers.google.com/speed/pagespeed/insights/\" target=\"_blank\" rel=\"noopener\">PageSpeed Insights</a> 进行分析，并按照分析结果中的优化推荐进行操作。</p>\n<p>站点性能结果地址: <a href=\"https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top\" target=\"_blank\" rel=\"noopener\">https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top</a></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220728131209.png\" alt=\"WeiyiGeek.PageSpeed Insights result\" title=\"\" class=\"\">\n                <p>WeiyiGeek.PageSpeed Insights result</p>\n            </figure>\n<p>从上述图中可看到左边图为优化前、而右边图则优化后的结果，可知引入 WebP Server Go 可以无缝转换图片为 WebP，可以让站点图片加载速度更快，并且无需更改现有网站上图片资源路径，极大的方便各位博客以及网站站长。</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"网站优化","path":"api/categories/网站优化.json"}],"tags":[{"name":"webp_server_go","path":"api/tags/webp_server_go.json"}]}