{"title":"Python3内置模块使用","slug":"编程世界/Python/模块函数/Python3内置模块使用","date":"2019-03-20T12:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/3-20-342.html","path":"api/articles/2019/3-20-342.html.json","covers":["https://img.weiyigeek.top/2019/2019031823.png","https://img.weiyigeek.top/2019/2019031824.png","https://img.weiyigeek.top/2019/20190407164151.png","https://img.weiyigeek.top/2019/20190416081121.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><p><strong>(1)内置模块一览表</strong><br>描述：模块是一个包含所有您定义的函数和变量的文件其后缀名为.py，模块可以被失败引入的以使用该模块中的函数等功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#&gt;&gt;&gt;dir(random)  #查看与使用模块里的函数,前提必须引入模块,高阶用法 import 引入模块 as 模块别名;</span></span><br><span class=\"line\"><span class=\"comment\">#&gt;&gt;&gt;help(random) #模块帮助</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os        <span class=\"comment\">#操作系统模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys       <span class=\"comment\">#系统模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> math      <span class=\"comment\">#数学计算模块 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random    <span class=\"comment\">#随机数生成模块 </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle    <span class=\"comment\">#数据序列和反序列化模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time      <span class=\"comment\">#时间解析模块提供各种时间相关的功能 (time，datetime 以及 calendar)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> dlifflib  <span class=\"comment\">#文件对比模块 (Python自动化运维处详解)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> filecmp   <span class=\"comment\">#文件目录差异对比方法 (同时)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pprint    <span class=\"comment\">#格式化美观输出</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests   <span class=\"comment\">#Requests 发送网络请求非常简单</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib   <span class=\"comment\">#邮件发信模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> email     <span class=\"comment\">#邮件模板包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> uuid      <span class=\"comment\">#UUID模块</span></span><br></pre></td></tr></table></figure>\n<hr>\n\n<h4 id=\"0x01-模块详细\"><a href=\"#0x01-模块详细\" class=\"headerlink\" title=\"0x01 模块详细\"></a>0x01 模块详细</h4><h5 id=\"os模块\"><a href=\"#os模块\" class=\"headerlink\" title=\"os模块\"></a>os模块</h5><p>描述：os模块关于文件/目录常用的函数使用方法：<br>getcwd()      返回当前工作目录<br>chdir(path)   改变工作目录<br>listdir(path=’.’)  列举指定目录中的文件名（’.’表示当前目录，’..’表示上一级目录）<br>mkdir(path)      创建单层目录，如该目录已存在抛出异常<br>makedirs(path)  递归创建多层目录，如该目录已存在抛出异常，注意：’E:\\a\\b’和’E:\\a\\c’并不会冲突<br>remove(path)  删除文件<br>rmdir(path)    删除单层目录，如该目录非空则抛出异常<br>removedirs(path)   递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常<br>rename(old, new)   将文件old重命名为new<br>system(command)  运行系统的shell命令，显示执行命令后的返回，与返回执行是否成功0/1<br>walk(top)   遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])</p>\n<p>以下是支持路径操作中常用到的一些定义，支持所有平台（相当于常量）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">os.curdir  指代当前目录（&#39;.&#39;）</span><br><span class=\"line\">os.pardir  指代上一级目录（&#39;..&#39;）</span><br><span class=\"line\">os.sep  输出操作系统特定的路径分隔符（Win下为&#39;\\\\&#39;，Linux下为&#39;&#x2F;&#39;）</span><br><span class=\"line\">os.linesep  当前平台使用的行终止符（Win下为&#39;\\r\\n&#39;，Linux下为&#39;\\n&#39;）</span><br><span class=\"line\">os.name  指代当前使用的操作系统（包括：&#39;posix&#39;,  &#39;nt&#39;, &#39;mac&#39;, &#39;os2&#39;, &#39;ce&#39;, &#39;java&#39;）</span><br><span class=\"line\">os.popen(命令) 执行指定的系统可执行脚本的命令</span><br></pre></td></tr></table></figure></p>\n<p><strong>os 模块案例1：</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: OS 模块常规使用范例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">print(<span class=\"string\">\"当前路径(命令行与脚本都可)：\"</span>,os.getcwd())</span><br><span class=\"line\">print(<span class=\"string\">\"当前路径(命令行与脚本都可)：\"</span>,os.path.abspath(os.curdir))</span><br><span class=\"line\">print(<span class=\"string\">\"当前路径(脚本中使用)：\"</span>,os.path.dirname(os.path.realpath(__file__)))</span><br><span class=\"line\">print(<span class=\"string\">\"当前路径上级(父)目录(命令行与脚本都可)：\"</span>,os.path.abspath(os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\">os.chdir(<span class=\"string\">'C:\\\\Users\\\\Administrator\\\\Desktop\\\\Python'</span>)  <span class=\"comment\">#修改路径</span></span><br><span class=\"line\">print(<span class=\"string\">\"修改后的路径：\"</span>,os.getcwd())</span><br><span class=\"line\">os.mkdir(<span class=\"string\">'.\\\\test'</span>)         <span class=\"comment\">#创建目录</span></span><br><span class=\"line\">os.makedirs(<span class=\"string\">'.\\\\web\\\\a\\\\b'</span>)  <span class=\"comment\"># 目录已存在时，无法创建该目录以及多级目录</span></span><br><span class=\"line\"><span class=\"comment\">#os.remove('.\\\\demo2-10.txt')    #删除文件</span></span><br><span class=\"line\">os.rmdir(<span class=\"string\">'.\\\\test'</span>)              <span class=\"comment\">#移除单个目录</span></span><br><span class=\"line\">os.removedirs(<span class=\"string\">'.\\\\web\\\\a\\\\b'</span>)    <span class=\"comment\">#移除多个目录</span></span><br><span class=\"line\">print(os.system(<span class=\"string\">'DATE /T'</span>))      <span class=\"comment\">#执行成功返回0，否则为1</span></span><br><span class=\"line\">print(list(os.walk(os.curdir)))  <span class=\"comment\">#遍历当前目录  os.pardir()</span></span><br><span class=\"line\">print(<span class=\"string\">'指定分隔符：'</span>,os.sep)</span><br><span class=\"line\">print(<span class=\"string\">'当前平台的中止符号: %s'</span> %os.linesep)  <span class=\"comment\">#\\r\\n</span></span><br><span class=\"line\">print(<span class=\"string\">'当前使用的操作吸引:'</span>,os.name)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019031823.png\" alt=\"OS模块\" title=\"\" class=\"\">\n                <p>OS模块</p>\n            </figure></p>\n<p><br></p>\n<p><strong>os 模块案例2：</strong><br>描述：采用os.popen来替代os.system来执行系统命令;<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取本机的开放端口Linux/Windwos</span></span><br><span class=\"line\">command = <span class=\"string\">\"netstat -an|findstr TCP\"</span></span><br><span class=\"line\">command = <span class=\"string\">\"netstat -tnlp|egrep -i tcp|awk &#123;'print $4'&#125;|awk -F':' '&#123;print $NF&#125;'|sort\"</span></span><br><span class=\"line\">lines = os.popen(command).readlines()  <span class=\"comment\">#关键点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    port = line.split()</span><br><span class=\"line\">    port_list.append(port[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">command = <span class=\"string\">\"netstat -an|findstr TCP\"</span> </span><br><span class=\"line\">lines = os.popen(command).readlines()  <span class=\"comment\">#关键点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    port=line.split()</span><br><span class=\"line\">    port=port[<span class=\"number\">1</span>].split(<span class=\"string\">':'</span>)</span><br><span class=\"line\">    print(port[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># runfile('E:/githubProject/Study-Promgram/Python3/Day9/os.popen.py', wdir='E:/githubProject/Study-Promgram/Python3/Day9')</span></span><br><span class=\"line\"><span class=\"comment\"># 135</span></span><br><span class=\"line\"><span class=\"comment\"># 443</span></span><br><span class=\"line\"><span class=\"comment\"># 445</span></span><br><span class=\"line\"><span class=\"comment\"># 902</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.获取本机的ip地址信息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> os.popen(<span class=\"string\">\"ip addr\"</span>).readlines():</span><br><span class=\"line\">    print(k)</span><br><span class=\"line\"><span class=\"comment\"># 15: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 group default qlen 1</span></span><br><span class=\"line\"><span class=\"comment\">#     link/ether 98:90:96:e1:91:d6</span></span><br><span class=\"line\"><span class=\"comment\">#     inet 192.168.1.88/24 brd 10.20.172.255 scope global dynamic</span></span><br><span class=\"line\"><span class=\"comment\">#     valid_lft 691196sec preferred_lft 691196sec</span></span><br><span class=\"line\"><span class=\"comment\">#     inet6 fe80::d97d:fe6c:10bf:4244/64 scope link dynamic</span></span><br><span class=\"line\"><span class=\"comment\">#     valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h6 id=\"os-path-类模块\"><a href=\"#os-path-类模块\" class=\"headerlink\" title=\"os.path 类模块\"></a>os.path 类模块</h6><p>描述：os.path模块路径常用的函数使用方法<br>basename(path)    去掉目录路径，单独返回文件名<br>dirname(path)        去掉文件名，单独返回目录路径<br>join(path1[, path2[, …]])   将path1, path2各部分组合成一个路径名<br>split(path)<br>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在<br>splitext(path)     分离文件名与扩展名，返回(f_name, f_extension)元组<br>getsize(file)      返回指定文件的尺寸，单位是字节<br>getatime(file)<br>返回指定文件最近的访问时间（浮点型秒数，用time模块的gmtime()或localtime()函数换算）<br>getctime(file)     返回指定文件的创建时间（浮点型秒数，同上）<br>getmtime(file)    返回指定文件最新的修改时间（浮点型秒数，同上）</p>\n<p>以下为函数返回 True 或 False<br>exists(path)  判断指定路径（目录或文件）是否存在<br>isabs(path)  判断指定路径是否为绝对路径<br>isdir(path)  判断指定路径是否存在且是一个目录<br>isfile(path)  判断指定路径是否存在且是一个文件<br>islink(path)  判断指定路径是否存在且是一个符号链接<br>ismount(path)  判断指定路径是否存在且是一个挂载点<br>samefile(path1, paht2)   判断path1和path2两个路径是否指向同一个文件</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：OS模块使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">print(os.path.basename(<span class=\"string\">'E:\\\\web\\\\conf\\\\test.php'</span>))</span><br><span class=\"line\">print(os.path.dirname(<span class=\"string\">'E:\\\\web\\\\conf\\\\test.php'</span>))</span><br><span class=\"line\">print(os.path.join(<span class=\"string\">'E:\\\\'</span>,<span class=\"string\">'test\\\\demo.php'</span>))  <span class=\"comment\">#注意path1在绝对路径需要加入转义符号</span></span><br><span class=\"line\">print(os.path.split(<span class=\"string\">'E:\\\\web\\\\conf\\\\test.php'</span>))</span><br><span class=\"line\">print(os.path.splitext(<span class=\"string\">'E:\\\\web\\\\conf\\\\test.php'</span>))</span><br><span class=\"line\">print(os.path.getsize(os.curdir + <span class=\"string\">'\\\\python.txt'</span>),<span class=\"string\">'Bytes'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"建立时间：\"</span>,os.path.getctime(os.curdir + <span class=\"string\">'\\\\python.txt'</span>),<span class=\"string\">'ms'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"修改时间：\"</span>,os.path.getmtime(os.curdir + <span class=\"string\">'\\\\python.txt'</span>),<span class=\"string\">'ms'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"访问时间：\"</span>,os.path.getatime(os.curdir + <span class=\"string\">'\\\\python.txt'</span>),<span class=\"string\">'ms'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">'.\\\\python.txt'</span>):</span><br><span class=\"line\">  print(<span class=\"string\">\"目录或者文件存在\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'目录或者文件不存在'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"是否为绝对路径：\"</span>,os.path.isabs(<span class=\"string\">'.\\\\python.txt'</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"是否是文件:\"</span>,os.path.isfile(<span class=\"string\">'.\\\\python.txt'</span>),<span class=\"string\">\"是否是目录:\"</span>,os.path.isdir(os.pardir+<span class=\"string\">'\\\\python'</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"判断是否是挂载点：\"</span>,os.path.ismount(<span class=\"string\">'D:\\\\'</span>))</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019031824.png\" alt=\"os.path 模块\" title=\"\" class=\"\">\n                <p>os.path 模块</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"sys-模块\"><a href=\"#sys-模块\" class=\"headerlink\" title=\"sys 模块\"></a>sys 模块</h5><p>描述：属性与参数一览表<br>(1) sys.argv CMD列表参数的获取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys  <span class=\"comment\">#系统模块</span></span><br><span class=\"line\">sys.setdefaultenconding(<span class=\"string\">'utf-8|gb2312'</span>) <span class=\"comment\">#设置系统默认的编码格式</span></span><br><span class=\"line\">sys.version_info  <span class=\"comment\">#当前Python版本信息</span></span><br><span class=\"line\"><span class=\"comment\"># sys.version_info(major=3, minor=7, micro=3, releaselevel='final', serial=0)</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"math-模块\"><a href=\"#math-模块\" class=\"headerlink\" title=\"math 模块\"></a>math 模块</h5><p>import math  Python数学函数</p>\n<p>数学常量<br>pi    数学常量 pi（圆周率，一般以π来表示）<br>e    数学常量 e，e即自然常数（自然常数）</p>\n<p>(1)abs(x)    返回数字的绝对值，如abs(-10) 返回 10<br>(2)ceil(x)     返回数字的上入整数，如math.ceil(4.1) 返回 5<br>(3)exp(x)  返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045<br>(4)fabs(x)    返回数字的绝对值，如math.fabs(-10) 返回10.0<br>(5)floor(x) 返回数字的下舍整数，如math.floor(4.9)返回 4<br>(6)log(x)     如math.log(math.e)返回1.0,math.log(100,10)返回2.0<br>(6)log10(x)     返回以10为基数的x的对数，如math.log10(100)返回 2.0<br>(7)max(x1, x2,…)     返回给定参数的最大值，参数可以为序列。<br>(8)min(x1, x2,…)     返回给定参数的最小值，参数可以为序列。<br>(9)modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示（存储为元组）。<br>(10)pow(x, y)    x**y 运算后的值(即幂运算)。<br>(11)round(x [,n])    返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。<br>(12)sqrt(x)     返回数字x的平方根。<br>(13)sum(iterable[,start-0])   返回序列iterable和可选参数start的总和（要求数据类型一致）</p>\n<p>数学之三角函数:<br>(13)acos(x)    返回x的反余弦弧度值。<br>(14)asin(x)    返回x的反正弦弧度值。<br>(15)atan(x)    返回x的反正切弧度值。<br>(16)atan2(y, x)    返回给定的 X 及 Y 坐标值的反正切值。<br>(17)cos(x)    返回x的弧度的余弦值。<br>(18)hypot(x, y)    返回欧几里德范数 sqrt(x<em>x + y</em>y)。<br>(19)sin(x)    返回的x弧度的正弦值。<br>(20)tan(x)    返回x弧度的正切值。<br>(21)degrees(x)    将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0<br>(22)radians(x)    将角度转换为弧度</p>\n<p>Python数学函数模块案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：数学函数验证</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> math  <span class=\"comment\">#需要导入数学的包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常量</span></span><br><span class=\"line\">print(math.pi,math.e)  <span class=\"comment\">#3.141592653589793 2.718281828459045</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#max / min 判断最大值/最小值</span></span><br><span class=\"line\">print(max(<span class=\"number\">1</span>,<span class=\"number\">2</span>))  <span class=\"comment\">#2</span></span><br><span class=\"line\">print(min([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])) <span class=\"comment\">#[1,2,3]</span></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">1.2</span>))  <span class=\"comment\">#2</span></span><br><span class=\"line\">print(math.floor(<span class=\"number\">1.2</span>)) <span class=\"comment\">#1</span></span><br><span class=\"line\">tup = math.modf(<span class=\"number\">1.8</span>) </span><br><span class=\"line\">print(<span class=\"string\">\"math.modf(1.8)\"</span>,tup[<span class=\"number\">1</span>],tup[<span class=\"number\">0</span>])  <span class=\"comment\">#1.0 0.8</span></span><br><span class=\"line\">print(pow(<span class=\"number\">5</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># 25</span></span><br><span class=\"line\">print(round(<span class=\"number\">8.5</span>)) <span class=\"comment\">#四舍五入（注意当小数部分只有5时候还是舍弃，整数部分不进位）8</span></span><br><span class=\"line\">print(round(<span class=\"number\">8.51</span>))   <span class=\"comment\">#9</span></span><br><span class=\"line\">print(math.sqrt(<span class=\"number\">10</span>)) <span class=\"comment\">#3.1622776601683795</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#元组或者序列（list）纸盒</span></span><br><span class=\"line\">tuple1 = (<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>,<span class=\"number\">3.3</span>)</span><br><span class=\"line\">print(sum(tuple1)）       <span class=\"comment\"># 6.6</span></span><br><span class=\"line\">print(sum(tuple1,<span class=\"number\">4.4</span>) )   <span class=\"comment\">#6.6 + 4.4 = 11.0</span></span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"random-模块\"><a href=\"#random-模块\" class=\"headerlink\" title=\"random 模块\"></a>random 模块</h5><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。<br>import random</p>\n<p>(1)choice(seq)    从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。<br>(2)randrange ([start,] stop [,step])     从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1<br>(3)random()     随机生成下一个实数，它在[0,1)范围内。<br>(4)seed([x])     改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定(5)seed，Python会帮你选择seed。<br>(6)shuffle(lst)     将序列的所有元素随机排序<br>(7)uniform(x, y)    随机生成下一个实数，它在[x,y]范围内。</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：随机数函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random  <span class=\"comment\">#载入模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(random.choice(range(<span class=\"number\">0</span>,<span class=\"number\">10</span>)))  <span class=\"comment\">#0~10随机 int</span></span><br><span class=\"line\">print(random.randrange(<span class=\"number\">0</span>,<span class=\"number\">100</span>))     <span class=\"comment\">#0~100随机数 int </span></span><br><span class=\"line\">print(random.random())                 <span class=\"comment\">#0~1 随机生成 0.47044481738738064 float</span></span><br><span class=\"line\">print(random.uniform(<span class=\"number\">0</span>,<span class=\"number\">10</span>))          <span class=\"comment\">#0~1 随机生成 13.47044481738738064 float</span></span><br><span class=\"line\">random.seed()   <span class=\"comment\">#随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">print(list)  <span class=\"comment\">#[1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\">random.shuffle(list)  <span class=\"comment\">#将序列的所有元素随机排序</span></span><br><span class=\"line\">print(list) <span class=\"comment\">#[2, 4, 5, 1, 3, 6]</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"pickle-模块\"><a href=\"#pickle-模块\" class=\"headerlink\" title=\"pickle 模块\"></a>pickle 模块</h5><p>利用一些算法将你的数据对象“腌制”成二进制文件;注意都要先使用’wb’的模式open文件哦;<br>(1) pickle.dump(data, file) # 第一个参数是待存储的数据对象，第二个参数是目标存储的文件对象<br>(2) pickle.load(file) # 参数是目标存储的文件对象</p>\n<p><br></p>\n<h5 id=\"time-模块\"><a href=\"#time-模块\" class=\"headerlink\" title=\"time 模块\"></a>time 模块</h5><p>在 Python 中与时间处理有关的模块包括：time，datetime 以及 calendar</p>\n<p><em>术语和约定的解释：</em></p>\n<ul>\n<li>时间戳（timestamp）的方式：通常来说，时间戳表示的是从 1970 年 1 月 1 日 00:00:00 开始按秒计算的偏移量（time.gmtime(0)）</li>\n<li>UTC（Coordinated Universal Time，世界协调时）也叫格林威治天文时间，是世界标准时间。在中国为 UTC+8</li>\n<li>DST（Daylight Saving Time）即夏令时的意思</li>\n</ul>\n<p><em>注意事项：</em></p>\n<ul>\n<li>模块总是可用但的功能不一定适用于各个平台。</li>\n<li>模块中定义的大部分函数是调用 C 平台上的同名函数实现，所以各个平台上实现可能略有不同</li>\n<li>实时函数的计算精度有可能低于它们建议的值或参数，例如在大部分 Unix 系统，时钟一秒钟“滴答”50~100 次</li>\n</ul>\n<p>方法一览图：<br>gmtime()     转换显示格林治时间<br>localtime()  转换显示本地时间<br>strptime()   #以时间元祖（struct_time）的形式返回。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Index\tAttribute 值（Values）</span></span><br><span class=\"line\">0\t tm_year（年）\t（例如：2015）</span><br><span class=\"line\">1\t tm_mon（月）\t1 ~ 12</span><br><span class=\"line\">2\t tm_mday（日）\t1 ~ 31</span><br><span class=\"line\">3\t tm_hour（时）\t0 ~ 23</span><br><span class=\"line\">4\t tm_min（分） \t0 ~ 59</span><br><span class=\"line\">5\t tm_sec（秒）\t  0 ~ 61 <span class=\"comment\">#（见下方注1）</span></span><br><span class=\"line\">6\t tm_wday（星期几）\t0 ~ 6（0 表示星期一）</span><br><span class=\"line\">7\t tm_yday（一年中的第几天）\t1 ~ 366</span><br><span class=\"line\">8\t tm_isdst（是否为夏令时）\t0， 1， -1（-1 代表夏令时）</span><br><span class=\"line\"><span class=\"comment\">#注1：范围真的是 0 ~ 61（你没有看错哦^_^）；60 代表闰秒，61 是基于历史原因保留</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>time.altzone 返回格林威治西部的夏令时地区的偏移秒数；如果该地区在格林威治东部会返回负值（如西欧，包括英国）；对夏令时启用地区才能使用。</li>\n<li>time.asctime([t]) 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2015”（2015年12月11日 周二 18时07分14秒）的 24 个字符的字符串。</li>\n<li><p>time.clock() 用以浮点数计算的秒数返回当前的 CPU 时间。用来衡量不同程序的耗时，比 time.time() 更有用。<br>Python 3.3 以后不被推荐，由于该方法依赖操作系统，建议使用 perf_counter() 或 process_time() 代替（一个返回系统运行时间，一个返回进程运行时间，请按照实际需求选择）</p>\n</li>\n<li><p>time.ctime([secs])  作用相当于 asctime(localtime(secs))，未给参数相当于 asctime()</p>\n</li>\n<li>time.gmtime([secs]) 接收时间辍（1970 纪元年后经过的浮点秒数）并返回格林威治天文时间下的时间元组 t（注：t.tm_isdst 始终为 0）</li>\n<li>time.daylight 如果夏令时被定义，则该值为非零。</li>\n<li>time.localtime([secs])  接收时间辍（1970 纪元年后经过的浮点秒数）并返回当地时间下的时间元组 t（t.tm_isdst 可取 0 或 1，取决于当地当时是不是夏令时）</li>\n<li>time.mktime(t)  接受时间元组并返回时间辍（1970纪元后经过的浮点秒数）</li>\n</ol>\n<ol start=\"9\">\n<li>time.perf_counter() 返回计时器的精准时间（系统的运行时间），包含整个系统的睡眠时间。由于返回值的基准点是未定义的，所以只有连续调用的结果之间的差才是有效的。</li>\n<li>time.process_time()  返回当前进程执行 CPU 的时间总和，不包含睡眠时间。由于返回值的基准点是未定义的，所以只有连续调用的结果之间的差才是有效的。</li>\n<li><p>time.sleep(secs)  推迟调用线程的运行，secs 的单位是秒。</p>\n</li>\n<li><p>time.strftime(format[, t])  把一个代表时间的元组或者 struct_time（如由 time.localtime() 和 time.gmtime() 返回）转化为格式化的时间字符串。<br>如果 t 未指定，将传入 time.localtime(),如果元组中任何一个元素越界，将会抛出 ValueError 异常。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#date, datetime, 和 time 对象均支持使用 strftime(format) 方法，将指定的日期或时间转换为自定义的格式化字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dt = datetime.now()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'(%Y-%m-%d %H:%M:%S %f): '</span>, dt.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S %f'</span>))</span><br><span class=\"line\">(%Y-%m-%d %H:%M:%S %f):  <span class=\"number\">2014</span><span class=\"number\">-08</span><span class=\"number\">-31</span> <span class=\"number\">23</span>:<span class=\"number\">54</span>:<span class=\"number\">58</span> <span class=\"number\">379804</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'(%Y-%m-%d %H:%M:%S %p): '</span>, dt.strftime(<span class=\"string\">'%y-%m-%d %I:%M:%S %p'</span>))</span><br><span class=\"line\">(%Y-%m-%d %H:%M:%S %p):  <span class=\"number\">14</span><span class=\"number\">-08</span><span class=\"number\">-31</span> <span class=\"number\">11</span>:<span class=\"number\">54</span>:<span class=\"number\">58</span> PM</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'%%a: %s '</span> % dt.strftime(<span class=\"string\">'%a'</span>))</span><br><span class=\"line\">%a: Sun </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'%%A: %s '</span> % dt.strftime(<span class=\"string\">'%A'</span>))</span><br><span class=\"line\">%A: Sunday </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'%%b: %s '</span> % dt.strftime(<span class=\"string\">'%b'</span>))</span><br><span class=\"line\">%b: Aug </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'%%B: %s '</span> % dt.strftime(<span class=\"string\">'%B'</span>))</span><br><span class=\"line\">%B: August </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'日期时间%%c: %s '</span> % dt.strftime(<span class=\"string\">'%c'</span>))</span><br><span class=\"line\">日期时间%c: <span class=\"number\">08</span>/<span class=\"number\">31</span>/<span class=\"number\">14</span> <span class=\"number\">23</span>:<span class=\"number\">54</span>:<span class=\"number\">58</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'日期%%x：%s '</span> % dt.strftime(<span class=\"string\">'%x'</span>))</span><br><span class=\"line\">日期%x：<span class=\"number\">08</span>/<span class=\"number\">31</span>/<span class=\"number\">14</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'时间%%X：%s '</span> % dt.strftime(<span class=\"string\">'%X'</span>))</span><br><span class=\"line\">时间%X：<span class=\"number\">23</span>:<span class=\"number\">54</span>:<span class=\"number\">58</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'今天是这周的第%s天 '</span> % dt.strftime(<span class=\"string\">'%w'</span>))</span><br><span class=\"line\">今天是这周的第<span class=\"number\">0</span>天 </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'今天是今年的第%s天 '</span> % dt.strftime(<span class=\"string\">'%j'</span>))</span><br><span class=\"line\">今天是今年的第<span class=\"number\">243</span>天 </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">'今周是今年的第%s周 '</span> % dt.strftime(<span class=\"string\">'%U'</span>))</span><br><span class=\"line\">今周是今年的第<span class=\"number\">35</span>周</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190407164151.png\" alt=\"WeiyiGeek.format格式化参数表\" title=\"\" class=\"\">\n                <p>WeiyiGeek.format格式化参数表</p>\n            </figure>\n<p>时间模块案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 时区相差</span></span><br><span class=\"line\">print(<span class=\"string\">\"格林：\"</span>,time.gmtime(os.path.getctime(os.curdir + <span class=\"string\">'\\\\python.txt'</span>)))</span><br><span class=\"line\">print(<span class=\"string\">\"本地：\"</span>,time.localtime(os.path.getctime(os.curdir + <span class=\"string\">'\\\\python.txt'</span>)))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>time.localtime()</span><br><span class=\"line\"><span class=\"comment\">#本地： time.struct_time(tm_year=2019, tm_mon=4, tm_mday=7, tm_hour=17, tm_min=26, tm_sec=46, tm_wday=6, tm_yday=97, tm_isdst=0)</span></span><br><span class=\"line\"><span class=\"comment\">#格林： time.struct_time(tm_year=2019, tm_mon=3, tm_mday=2, tm_hour=6, tm_min=45, tm_sec=39, tm_wday=5, tm_yday=61, tm_isdst=0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：time模块的使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time <span class=\"keyword\">as</span> t  </span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"####sleep - 延迟3s执行！###\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#t.sleep(3)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#把一个格式化时间字符串转化为 struct_time </span></span><br><span class=\"line\">print(t.strftime(<span class=\"string\">\"%a %b %Y %H:%M:%S +0000\"</span>, t.localtime()))</span><br><span class=\"line\">print(t.strftime(<span class=\"string\">\"%A %B %Y %H:%M:%S +0000\"</span>, t.gmtime()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接受时间元组并返回一个可读的形式</span></span><br><span class=\"line\">print(<span class=\"string\">\"asctime() \"</span>,t.asctime(t.localtime()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 作用相当于 asctime(localtime(secs))，未给参数相当于 asctime()</span></span><br><span class=\"line\">print(<span class=\"string\">\"ctime() \"</span>,t.ctime())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接受时间元组并返回时间辍</span></span><br><span class=\"line\">print(<span class=\"string\">\"mktime() 指定时间的时间戳\"</span>,t.mktime(t.localtime()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回当前时间的时间戳（1970 纪元年后经过的浮点秒数）</span></span><br><span class=\"line\">print(<span class=\"string\">\"time() 当前时间戳 :\"</span>,t.time()) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当地时区（未启动夏令时）距离格林威治的偏移秒数（美洲 &gt;0；大部分欧洲，亚洲，非洲 &lt;= 0）</span></span><br><span class=\"line\">print(<span class=\"string\">\"timezone 距离格林威治的偏移秒数 :\"</span>,t.timezone)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回格林威治西部的夏令时地区的偏移秒数</span></span><br><span class=\"line\">print(<span class=\"string\">\"altzone 返回格林威治西部的夏令时地区的偏移秒数 :\"</span>,t.altzone)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回计时器的精准时间（系统的运行时间）</span></span><br><span class=\"line\">print(<span class=\"string\">\"perf_counter() 计时器的精准时间 \"</span>,t.perf_counter())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回当前进程执行 CPU 的时间总和，不包含睡眠时间</span></span><br><span class=\"line\">print(<span class=\"string\">\"process_time() 当前进程执行 CPU 的时间总和\"</span>,t.process_time())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#包含两个字符串的元组：第一是当地非夏令时区的名称，第二个是当地的 DST 时区的名称。</span></span><br><span class=\"line\">print(t.tzname)  <span class=\"comment\">#乱码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####### sleep - 延迟3s执行！######</span></span><br><span class=\"line\"><span class=\"comment\"># &gt; python demo3.14.py </span></span><br><span class=\"line\"><span class=\"comment\"># Sun Apr 2019 17:04:21 +0000</span></span><br><span class=\"line\"><span class=\"comment\"># Sunday April 2019 09:04:21 +0000</span></span><br><span class=\"line\"><span class=\"comment\"># asctime()  Sun Apr  7 17:04:21 2019</span></span><br><span class=\"line\"><span class=\"comment\"># ctime()  Sun Apr  7 17:04:21 2019</span></span><br><span class=\"line\"><span class=\"comment\"># mktime() 指定时间的时间戳 1554627861.0</span></span><br><span class=\"line\"><span class=\"comment\"># time() 当前时间戳 : 1554627861.0564845</span></span><br><span class=\"line\"><span class=\"comment\"># timezone 距离格林威治的偏移秒数 : -28800</span></span><br><span class=\"line\"><span class=\"comment\"># altzone 返回格林威治西部的夏令时地区的偏移秒数 : -32400</span></span><br><span class=\"line\"><span class=\"comment\"># perf_counter() 计时器的精准时间  0.612054762</span></span><br><span class=\"line\"><span class=\"comment\"># process_time() 当前进程执行 CPU 的时间总和 0.59375</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h6 id=\"1-datatime-详解\"><a href=\"#1-datatime-详解\" class=\"headerlink\" title=\"1 datatime 详解\"></a>1 datatime 详解</h6><p>描述：datetime 模块提供了各种类用于操作日期和时间，该模块侧重于高效率的格式化输出</p>\n<p><strong>datetime 模块定义了两个常量：</strong></p>\n<ul>\n<li>datetime.MINYEAR - date 和 datetime 对象所能支持的最小年份，object.MINYEAR 的值为 1</li>\n<li>datetime.MAXYEAR - date 和 datetime 对象所能支持的最大年份，object.MAXYEAR 的值为 9999</li>\n</ul>\n<p><strong>datetime 模块中定义的类（前四个下方有详解）：</strong></p>\n<ul>\n<li>datetime.date - 表示日期的类，常用属性：year, month, day</li>\n<li>datetime.time - 表示时间的类，常用属性：hour, minute, second, microsecond, tzinfo</li>\n<li>datetime.datetime - 表示日期和时间的类，常用属性： year, month, day, hour, minute, second, microsecond, tzinfo</li>\n<li>datetime.timedelta - 表示时间间隔，即两个时间点（date，time，datetime）之间的长度</li>\n<li>datetime.tzinfo - 表示时区的基类，为上方的 time 和 datetime 类提供调整的基准</li>\n<li>datetime.timezone - 表示 UTC 时区的固定偏移，是 tzinfo 基类的实现</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#上边这些类的从属关系：</span></span><br><span class=\"line\">object</span><br><span class=\"line\">    timedelta</span><br><span class=\"line\">    tzinfo</span><br><span class=\"line\">        timezone</span><br><span class=\"line\">    time</span><br><span class=\"line\">    date</span><br><span class=\"line\">        datetime</span><br></pre></td></tr></table></figure>\n<p><em>注：上边这些类的对象是不可变的</em></p>\n<p><br></p>\n<p><strong>(1) timedelta 对象</strong><br>timedelta 对象表示两个日期或时间之间的间隔<br><em>timedelta 类属性：</em></p>\n<ul>\n<li>timedelta.min - timedelta 对象负值的极限，timedelta(-999999999)</li>\n<li>timedelta.max - timedelta 对象正值的极限，timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)</li>\n<li>timedelta.resolution - 两个 timedelta 不相等的对象之间最小的差值，timedelta(microseconds=1)<br>请注意，在正常情况下，timedelta.max &gt; -timedelta.min，-timedelta.max 无意义。</li>\n</ul>\n<p>取值范围：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 所有的参数都是可选的（默认为 0 - 里面是属性），参数的可以是整数或浮点数，正数或负数。</span></span><br><span class=\"line\">datetime.timedelta(days=<span class=\"number\">0</span>, seconds=<span class=\"number\">0</span>, microseconds=<span class=\"number\">0</span>, milliseconds=<span class=\"number\">0</span>, minutes=<span class=\"number\">0</span>, hours=<span class=\"number\">0</span>, weeks=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">1 millisecond -&gt; 1000 microseconds</span><br><span class=\"line\">1 minutes -&gt; 60 seconds</span><br><span class=\"line\">1 hours -&gt; 3600 seconds</span><br><span class=\"line\">1 weeks -&gt; 7 days</span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= microseconds &lt; <span class=\"number\">1000000</span></span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= seconds &lt; <span class=\"number\">3600</span> * <span class=\"number\">24</span>（<span class=\"number\">1</span>小时的秒数 * <span class=\"number\">24</span>小时）</span><br><span class=\"line\"><span class=\"number\">-999999999</span> &lt;= days &lt;= <span class=\"number\">999999999</span></span><br></pre></td></tr></table></figure></p>\n<p><em>timedelta 实例方法：</em></p>\n<ul>\n<li>timedelta.total_seconds() - 返回 timedelta 对象所包含的总秒数，相当于 td / timedelta(seconds=1)<br>请注意，对于非常大的时间间隔（在大多数平台上是大于270年），这种方法将失去微秒（microsecond）精度</li>\n</ul>\n<p>timedelta 案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>year = timedelta(days=<span class=\"number\">365</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_year = timedelta(weeks=<span class=\"number\">40</span>, days=<span class=\"number\">84</span>, hours=<span class=\"number\">23</span>, minutes=<span class=\"number\">50</span>, seconds=<span class=\"number\">600</span>)  <span class=\"comment\"># adds up to 365 days</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>year.total_seconds()</span><br><span class=\"line\"><span class=\"number\">31536000.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>year == another_year</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ten_years = <span class=\"number\">10</span> * year</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ten_years, ten_years.days // <span class=\"number\">365</span></span><br><span class=\"line\">(datetime.timedelta(<span class=\"number\">3650</span>), <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nine_years = ten_years - year</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nine_years, nine_years.days // <span class=\"number\">365</span></span><br><span class=\"line\">(datetime.timedelta(<span class=\"number\">3285</span>), <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>three_years = nine_years // <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>three_years, three_years.days // <span class=\"number\">365</span></span><br><span class=\"line\">(datetime.timedelta(<span class=\"number\">1095</span>), <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(three_years - ten_years) == <span class=\"number\">2</span> * three_years + year</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(2)date 对象</strong><br>对象表示一个日期，在一个理想化的日历里，日期由 year（年）、month（月）、day（日）组成<br>取值范围：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datetime.date(year, month, day)</span><br><span class=\"line\"></span><br><span class=\"line\">MINYEAR &lt;= year &lt;= MAXYEAR（也就是 <span class=\"number\">1</span> ~ <span class=\"number\">9999</span>）</span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= month &lt;= <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt;= day &lt;= 根据 year 和 month 来决定（例如 <span class=\"number\">2015</span>年<span class=\"number\">2</span>月 只有 <span class=\"number\">28</span> 天）</span><br></pre></td></tr></table></figure></p>\n<p><em>类方法（classmethod）:</em><br>today()，fromtimestamp(timestamp)，fromordinal(ordinal) 】<br><em>date 类属性：</em> 与 datedelta 类属性一致</p>\n<p><em>date 实例方法：</em></p>\n<ul>\n<li><p>date.replace(year, month, day) - 生成一个新的日期对象，用参数指定的年、月、日代替原有对象中的属性</p>\n</li>\n<li><p>date.timetuple() - 返回日期对应的 time.struct_time 对象（类似于 time 模块的 time.localtime()）</p>\n</li>\n<li><p>date.toordinal() - 返回日期对应的 Gregorian Calendar 日期</p>\n</li>\n<li><p>date.weekday() - 返回 0 ~ 6 表示星期几（星期一是 0，依此类推）</p>\n</li>\n<li><p>date.isoweekday() - 返回 1 ~ 7 表示星期几（星期一是1， 依此类推）</p>\n</li>\n<li><p>date.isocalendar() - 返回一个三元组格式 (year, month, day)</p>\n</li>\n<li><p>date.isoformat() - 返回一个 ISO 8601 格式的日期字符串，如 “YYYY-MM-DD” 的字符串</p>\n</li>\n<li><p>date.<strong>str</strong>() - 对于 date 对象 d 来说，str(d) 相当于 d.isoformat()</p>\n</li>\n<li><p>date.ctime()  - 返回一个表示日期的字符串，相当于 time 模块的 time.ctime(time.mktime(d.timetuple()))</p>\n</li>\n<li><p>date.strftime(format) - 返回自定义格式化字符串表示日期，下面有详解</p>\n</li>\n<li><p>date.<strong>format</strong>(format) - 跟 date.strftime(format) 一样，这使得调用 str.format() 时可以指定 data 对象的字符串</p>\n</li>\n</ul>\n<p><em>date对象案例：</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下是计算天数的例子：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> date</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today = date.today()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today</span><br><span class=\"line\">datetime.date(<span class=\"number\">2014</span>, <span class=\"number\">8</span>, <span class=\"number\">31</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>today == date.fromtimestamp(time.time())  <span class=\"comment\">#True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_birthday = date(today.year, <span class=\"number\">6</span>, <span class=\"number\">24</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">if</span> my_birthday &lt; today:</span><br><span class=\"line\">        my_birthday = my_birthday.replace(year = today.year + <span class=\"number\">1</span>)   <span class=\"comment\">#datetime.date(2015, 6, 24)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>time_to_birthday = abs(my_birthday - today)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>time_to_birthday.days</span><br><span class=\"line\"><span class=\"number\">297</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = date.fromordinal(<span class=\"number\">735678</span>)  <span class=\"comment\"># 自日期 1.1.0001 之后的第 735678 天</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">datetime.date(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">21</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = d.timetuple()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">        print(i,end=<span class=\"string\">''</span>)</span><br><span class=\"line\"><span class=\"number\">2015</span> <span class=\"number\">3</span> <span class=\"number\">21</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span> <span class=\"number\">80</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ic = d.isocalendar()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ic:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\"><span class=\"number\">2015</span> <span class=\"number\">12</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.isoformat()</span><br><span class=\"line\"><span class=\"string\">'2015-03-21'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.strftime(<span class=\"string\">\"%d/%m/%y\"</span>)</span><br><span class=\"line\"><span class=\"string\">'21/03/15'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.strftime(<span class=\"string\">\"%A %d. %B %Y\"</span>)</span><br><span class=\"line\"><span class=\"string\">'Saturday 21. March 2015'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'The &#123;1&#125; is &#123;0:%d&#125;, the &#123;2&#125; is &#123;0:%B&#125;.'</span>.format(d, <span class=\"string\">\"day\"</span>, <span class=\"string\">\"month\"</span>)</span><br><span class=\"line\"><span class=\"string\">'The day is 21, the month is March.'</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br><strong>(3)time 对象</strong><br>time 对象表示一天中的一个时间，并且可以通过 tzinfo 对象进行调整;<br>取值范围：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#里面的参数就是实例的属性但是只读的 time.hour</span></span><br><span class=\"line\">datetime.time(hour=<span class=\"number\">0</span>, minute=<span class=\"number\">0</span>, second=<span class=\"number\">0</span>, microsecond=<span class=\"number\">0</span>, tzinfo=<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= hour &lt; <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= minute &lt; <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= second &lt; <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"number\">0</span> &lt;= microsecond &lt; <span class=\"number\">1000000</span></span><br><span class=\"line\">注：如果参数超出范围，将引发 ValueError 异常</span><br></pre></td></tr></table></figure></p>\n<p><em>time 实例方法：</em><br>time.replace([hour[, minute[, second[, microsecond[, tzinfo]]]]])- 生成一个新的时间对象，用参数指定时间代替原有对象中的属性</p>\n<p>time.isoformat()- 返回一个 ISO 8601 格式的日期字符串，如 “HH:MM:SS.mmmmmm” 的字符串</p>\n<p>time.<strong>str</strong>()- 对于 time 对象 t 来说，str(t) 相当于 t.isoformat()</p>\n<p>time.strftime(format)- 返回自定义格式化字符串表示时间，下面有详解</p>\n<p>time.<strong>format</strong>(format) - 跟 time.strftime(format) 一样，这使得调用 str.format() 时可以指定 time 对象的字符串</p>\n<p>time.utcoffset() - 如果 tzinfo 属性是 None，则返回 None；否则返回 self.tzinfo.utcoffset(self)</p>\n<p>time.dst() - 如果 tzinfo 属性是 None，则返回 None；否则返回 self.tzinfo.dst(self)</p>\n<p>time.tzname()- 如果 tzinfo 属性是 None，则返回 None；否则返回 self.tzinfo.tzname(self)</p>\n<p><em>time 案例：</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 学编程，到鱼C</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> time, timedelta, tzinfo</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GMT1</span><span class=\"params\">(tzinfo)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">utcoffset</span><span class=\"params\">(self, dt)</span>:</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> timedelta(hours=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dst</span><span class=\"params\">(self, dt)</span>:</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> timedelta(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tzname</span><span class=\"params\">(self, dt)</span>:</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"欧洲/布拉格\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = time(<span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, tzinfo=GMT1())</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t</span><br><span class=\"line\">datetime.time(<span class=\"number\">14</span>, <span class=\"number\">10</span>, <span class=\"number\">30</span>, tzinfo=&lt;__main__.GMT1 object at <span class=\"number\">0x02D7FE90</span>&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>gmt = GMT1()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.isoformat()</span><br><span class=\"line\"><span class=\"string\">'14:10:30+01:00'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.dst()</span><br><span class=\"line\">datetime.timedelta(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.tzname()</span><br><span class=\"line\"><span class=\"string\">'欧洲/布拉格'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.strftime(<span class=\"string\">\"%H:%M:%S %Z\"</span>)</span><br><span class=\"line\"><span class=\"string\">'14:10:30 欧洲/布拉格'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'The &#123;&#125; is &#123;:%H:%M&#125;.'</span>.format(<span class=\"string\">\"time\"</span>, t)</span><br><span class=\"line\"><span class=\"string\">'The time is 14:10.'</span></span><br></pre></td></tr></table></figure><br><br></p>\n<h6 id=\"2-timeit-详解\"><a href=\"#2-timeit-详解\" class=\"headerlink\" title=\"2 timeit 详解\"></a>2 timeit 详解</h6><p>timeit模块准确测量小段代码的执行时间,既可以在命令行界面直接使用，也可以通过导入模块进行调用，该模块灵活地避开了测量执行时间所容易出现的错误。</p>\n<p>该模块定义了三个实用函数和一个公共类。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令行界面 语法</span></span><br><span class=\"line\">python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement ...]</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span>)timeit.timeit(stmt=<span class=\"string\">'pass'</span>, setup=<span class=\"string\">'pass'</span>, timer=&lt;default timer&gt;, number=<span class=\"number\">1000000</span>)  <span class=\"comment\"># 创建一个 Timer 实例，参数分别是 stmt（需要测量的语句或函数），setup（初始化代码或构建环境的导入语句），timer（计时函数），number（每一次测量中语句被执行的次数）</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>) timeit.repeat(stmt=<span class=\"string\">'pass'</span>, setup=<span class=\"string\">'pass'</span>, timer=&lt;default timer&gt;, repeat=<span class=\"number\">3</span>, number=<span class=\"number\">1000000</span>)  <span class=\"comment\">#repeat（重复测量的次数）</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">3</span>)timeit.default_timer() <span class=\"comment\"># 默认计时器，一般是 time.perf_counter()方法能够在任一平台提供最高精度的计时器（它也只是记录了自然时间，记录自然时间会被很多其他因素影响，例如计算机的负载）。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(4)class timeit.Timer(stmt='pass', setup='pass', timer=&lt;timer function&gt;)  #计算小段代码执行速度的类，前两个参数都可以包含多个语句，多个语句间使用分号（;）或新行分隔开。</span><br><span class=\"line\"><span class=\"comment\"># stmt 和 setup 参数也可以是可供调用但没有参数的对象，这将会在一个计时函数中嵌套调用它们，然后被 timeit() 所执行。注意由于额外的调用，计时开销会相对略到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##timeit 属性</span></span><br><span class=\"line\">- timeit(number=<span class=\"number\">1000000</span>) <span class=\"comment\">#功能：计算语句执行 number 次的时间</span></span><br><span class=\"line\">- repeat(repeat=<span class=\"number\">3</span>, number=<span class=\"number\">1000000</span>)  <span class=\"comment\">#功能：重复调用 timeit()</span></span><br><span class=\"line\">- print_exc(file=<span class=\"literal\">None</span>)  <span class=\"comment\">#功能：输出计时代码的回溯（Traceback）</span></span><br><span class=\"line\"><span class=\"comment\">#标准回溯的优点是在编译模板中，源语句行会被显示出来。可选的 file 参数指定将回溯发送的位置，默认是发送到 sys.stderr。</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190416081121.png\" alt=\"WeiyiGeek.命令行参数\" title=\"\" class=\"\">\n                <p>WeiyiGeek.命令行参数</p>\n            </figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令行</span></span><br><span class=\"line\">&gt;python -m timeit -s <span class=\"string\">\"for i in range(10): oct(i)\"</span> -p</span><br><span class=\"line\"><span class=\"number\">50000000</span> loops, best of <span class=\"number\">5</span>: <span class=\"number\">6.25</span> nsec per loop</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;python -m timeit -s <span class=\"string\">\"for i in range(10): oct(i)\"</span> -r <span class=\"number\">1</span> -n <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> loop, best of <span class=\"number\">1</span>: <span class=\"number\">365</span> nsec per loop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#IDLE调用执行</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> timeit</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>timeit.timeit(<span class=\"string\">'\"-\".join(str(n) for n in range(100))'</span>, number=<span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"number\">0.8187260627746582</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>timeit.timeit(<span class=\"string\">'\"-\".join(map(str, range(100)))'</span>, number=<span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"number\">0.5858950614929199</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>timeit.Timer(<span class=\"string\">'for i in range(10): oct(i)'</span>, <span class=\"string\">'gc.enable()'</span>).timeit()</span><br><span class=\"line\"><span class=\"number\">0.9954580070000247</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>timeit.timeit(<span class=\"string\">'text.find(char)'</span>, setup=<span class=\"string\">'text = \"I love FishC.com!\"; char = \"o\"'</span>)</span><br><span class=\"line\"><span class=\"number\">1.7246671520006203</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实际案例</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Stupid test timeit module function\"\"\"</span></span><br><span class=\"line\">    L = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1000</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> timeit   <span class=\"comment\">#导入模块</span></span><br><span class=\"line\">    t = timeit.Timer()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"执行时间：\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">        print(timeit.timeit(stmt=<span class=\"string\">\"test()\"</span>, setup=<span class=\"string\">\"from __main__ import test\"</span>,number=<span class=\"number\">100</span>))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">'异常抛出：'</span>)</span><br><span class=\"line\">        t.print_exc()</span><br><span class=\"line\"><span class=\"comment\"># &gt;python demo6.2.py</span></span><br><span class=\"line\"><span class=\"comment\"># 执行时间： 0.0026121469999999952</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>只有当使用命令行界面时，timeit 才会自动确定重复的次数。</li>\n<li>由于 timeit() 正在执行语句，语句中如果存在返回值的话会阻止 timeit() 返回执行时间，并且timeit() 会取代原语句中的返回值。</li>\n<li>repeat() 方法相当于持续多次调用 timeit() 方法并将结果返回为一个列表。</li>\n</ul>\n<p><br></p>\n<h5 id=\"pprint-模块\"><a href=\"#pprint-模块\" class=\"headerlink\" title=\"pprint 模块\"></a>pprint 模块</h5><p>描述：用于美化打印输出数据，非常实用；</p>\n<p>使用案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.</span></span><br><span class=\"line\">sys.path</span><br><span class=\"line\">[<span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\pydev'</span>, <span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\pycharm_display'</span>, <span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\third_party\\\\thriftpy'</span>, <span class=\"string\">'E:\\\\githubProject\\\\Study-Promgram\\\\Python3'</span>, <span class=\"string\">'E:/githubProject/Study-Promgram/Python3'</span>]</span><br><span class=\"line\">pprint.pprint(sys.path) <span class=\"comment\">#美观输出</span></span><br><span class=\"line\">[<span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\pydev'</span>,</span><br><span class=\"line\"> <span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\pycharm_display'</span>,</span><br><span class=\"line\"> <span class=\"string\">'D:\\\\Program Files\\\\JetBrains\\\\PyCharm2019\\\\helpers\\\\third_party\\\\thriftpy'</span>,</span><br><span class=\"line\"> <span class=\"string\">'E:\\\\githubProject\\\\Study-Promgram\\\\Python3'</span>,</span><br><span class=\"line\"> <span class=\"string\">'E:/githubProject/Study-Promgram/Python3'</span>]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"requests-模块\"><a href=\"#requests-模块\" class=\"headerlink\" title=\"requests 模块\"></a>requests 模块</h5><p>描述：使用 Requests 发送网络请求非常简单，导入模块即可;<br>参考：<a href=\"https://2.python-requests.org//zh_CN/latest/user/advanced.html#advanced\" target=\"_blank\" rel=\"noopener\">https://2.python-requests.org//zh_CN/latest/user/advanced.html#advanced</a></p>\n<p>模块方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.get定制请求头/请求参数/设置cookies/禁用重定向</span></span><br><span class=\"line\"><span class=\"comment\">#SSL认证可以为 默认情况下 verify 是设置为 True 的。</span></span><br><span class=\"line\"><span class=\"comment\">#选项 verify 仅应用于主机证书。verify 传入 CA_BUNDLE 文件的路径，或者包含可信任 CA 证书文件的文件夹路径</span></span><br><span class=\"line\"><span class=\"comment\">#客户端证书 ：指定一个本地证书用作客户端证书，可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组</span></span><br><span class=\"line\"><span class=\"comment\">#进行网络请求后，响应体会立即被下载。可以通过 stream 参数覆盖这个行为，推迟下载响应体直到访问 Response.content 属性</span></span><br><span class=\"line\">r = requests.get(url, headers=&#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'my-app/0.0.1'</span>&#125;,param=&#123;<span class=\"string\">'key1'</span>:<span class=\"string\">\"value\"</span>&#125;, cookies=dict(cookies_are=<span class=\"string\">'working'</span>),allow_redirects=False,timeout=0.001,verify=True,verify=<span class=\"string\">'/path/to/certfile'</span>,cert=(<span class=\"string\">'/path/client.cert'</span>, <span class=\"string\">'/path/client.key'</span>),stream=Truem,proxies = &#123;<span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://10.10.1.10:3128\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"https\"</span>: <span class=\"string\">\"http://10.10.1.10:1080\"</span>,&#125;)</span><br><span class=\"line\"><span class=\"comment\">#注意：除了基本的 HTTP 代理，Request 还支持 SOCKS 协议的代理  pip install requests[socks] , 使用方法如下</span></span><br><span class=\"line\"><span class=\"comment\"># proxies = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     'http': 'socks5://user:pass@host:port',</span></span><br><span class=\"line\"><span class=\"comment\">#     'https': 'socks5://user:pass@host:port'</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.post请求</span></span><br><span class=\"line\">r = requests.post(<span class=\"string\">\"http://httpbin.org/post\"</span>, data= &#123;<span class=\"string\">'key1'</span>: <span class=\"string\">'value1'</span>, <span class=\"string\">'key2'</span>: <span class=\"string\">'value2'</span>&#125;)</span><br><span class=\"line\">r = requests.post(<span class=\"string\">\"https://api.github.com/some/endpoint\"</span>, data=json.dumps(payload)) <span class=\"comment\">#Github API v3 接受编码为 JSON 的 POST/PATCH 数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.会话对象</span></span><br><span class=\"line\">s = requests.Session()</span><br><span class=\"line\">r = s.get(<span class=\"string\">'http://httpbin.org/cookies'</span>, cookies=&#123;<span class=\"string\">'from-my'</span>: <span class=\"string\">'browser'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\">with requests.Session() as s:</span><br><span class=\"line\">    s.get(<span class=\"string\">'http://httpbin.org/cookies/set/sessioncookie/123456789'</span>) <span class=\"comment\">#确保 with 区块退出后会话能被关闭，即使发生了异常也一样。</span></span><br></pre></td></tr></table></figure></p>\n<p>模块属性：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestsOBJ.status_code : 响应状态码 requests.codes.ok  一个内置的状态码查询对象</span><br><span class=\"line\">requestsOBJ.headers : 服务器响应头</span><br><span class=\"line\">requestsOBJ.url : 对象请求的 URL 的查询字符串</span><br><span class=\"line\">requestsOBJ.text : 读取服务器响应的内容,自动解码来自服务器的内容，大多数 unicode 字符集都能被无缝地解码</span><br><span class=\"line\">requestsOBJ.content : 以字节的方式访问请求响应体对于非文本请求(2进制)，自动为你解码 gzip 和 deflate 传输编码的响应数据</span><br><span class=\"line\">requestsOBJ.encoding ： 查看Requests 使用了什么编码 设置解析编码r.encoding = <span class=\"string\">'ISO-8859-1'</span></span><br><span class=\"line\">r.history : 重定向与请求历史,默认情况下除了 HEAD, Requests 会自动处理所有重定向。</span><br><span class=\"line\">r.raw <span class=\"comment\">#取来自服务器的原始套接字响应，那么你可以访问 r.raw,前提是在初始请求中设置了 stream=True还能采用r.raw.read(10)</span></span><br><span class=\"line\">r.json() <span class=\"comment\">#Requests 中也有一个内置的 JSON 解码器，助你处理 JSON 数据</span></span><br><span class=\"line\">r.cookies[<span class=\"string\">'example_cookie_name'</span>]  <span class=\"comment\">#获取网站返回的Cookie</span></span><br></pre></td></tr></table></figure></p>\n<p><em>补充异常：</em> 所有Requests显式抛出的异常都继承自<code>requests.exceptions.RequestException</code></p>\n<ul>\n<li>ConnectionError ：遇到网络问题（如：DNS 查询失败、拒绝连接等）时</li>\n<li>HTTPError ：HTTP 请求返回了不成功的状态码</li>\n<li>Timeout : 请求超时</li>\n<li>TooManyRedirects : 请求超过了设定的最大重定向次数<br>可以通过 Response.raise_for_status() 来抛出异常，当发送了一个错误请求(一个 4XX 客户端错误，或者 5XX 服务器错误响应)<br>r.raise_for_status() # r 的 status_code 是 200 ，当我们调用 raise_for_status() 时，得到的是：None</li>\n</ul>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.各类请求 get/post/put/delete/head/options 等等;</span></span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(<span class=\"string\">'https://api.github.com/events'</span>,params = &#123;<span class=\"string\">'key1'</span>: <span class=\"string\">'value1'</span>, <span class=\"string\">'key2'</span>: <span class=\"string\">'value2'</span>&#125;) <span class=\"comment\">#传递 URL 参数</span></span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(<span class=\"string\">'http://httpbin.org/post'</span>, data = &#123;<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>&#125;)</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.put(<span class=\"string\">'http://httpbin.org/put'</span>, data = &#123;<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>&#125;)</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.delete(<span class=\"string\">'http://httpbin.org/delete'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.head(<span class=\"string\">'http://httpbin.org/get'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.options(<span class=\"string\">'http://httpbin.org/get'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.POST一个多部分编码(Multipart-Encoded)的文件</span></span><br><span class=\"line\">&gt;&gt;&gt; url = <span class=\"string\">'http://httpbin.org/post'</span></span><br><span class=\"line\">&gt;&gt;&gt; files = &#123;<span class=\"string\">'file'</span>: open(<span class=\"string\">'report.xls'</span>, <span class=\"string\">'rb'</span>), <span class=\"string\">'application/vnd.ms-excel'</span>, &#123;<span class=\"string\">'Expires'</span>: <span class=\"string\">'0'</span>&#125;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; files = &#123;<span class=\"string\">'file'</span>: (<span class=\"string\">'report.csv'</span>, <span class=\"string\">'some,data,to,send\\nanother,row,to,send\\n'</span>)&#125; <span class=\"comment\">#也可以发送作为文件来接收的字符串</span></span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(url, files=files)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.POST 多个分块编码的文件</span></span><br><span class=\"line\"><span class=\"comment\">#要实现只要把文件设到一个元组的列表中，其中元组结构为 (form_field_name, file_info):</span></span><br><span class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"images\"</span> multiple=<span class=\"string\">\"true\"</span> required=<span class=\"string\">\"true\"</span>/&gt;</span><br><span class=\"line\">&gt;&gt;&gt; url = <span class=\"string\">'http://httpbin.org/post'</span></span><br><span class=\"line\">&gt;&gt;&gt; multiple_files = [</span><br><span class=\"line\">        (<span class=\"string\">'images'</span>, (<span class=\"string\">'foo.png'</span>, open(<span class=\"string\">'foo.png'</span>, <span class=\"string\">'rb'</span>), <span class=\"string\">'image/png'</span>)),</span><br><span class=\"line\">        (<span class=\"string\">'images'</span>, (<span class=\"string\">'bar.png'</span>, open(<span class=\"string\">'bar.png'</span>, <span class=\"string\">'rb'</span>), <span class=\"string\">'image/png'</span>))]</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(url, files=multiple_files)</span><br><span class=\"line\">&gt;&gt;&gt; r.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.Cookie 的返回对象为 RequestsCookieJar，它的行为和字典类似，但接口更为完整，适合跨域名跨路径使用。</span></span><br><span class=\"line\">&gt;&gt;&gt; jar = requests.cookies.RequestsCookieJar()</span><br><span class=\"line\">&gt;&gt;&gt; jar.set(<span class=\"string\">'tasty_cookie'</span>, <span class=\"string\">'yum'</span>, domain=<span class=\"string\">'httpbin.org'</span>, path=<span class=\"string\">'/cookies'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; jar.set(<span class=\"string\">'gross_cookie'</span>, <span class=\"string\">'blech'</span>, domain=<span class=\"string\">'httpbin.org'</span>, path=<span class=\"string\">'/elsewhere'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; url = <span class=\"string\">'http://httpbin.org/cookies'</span></span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(url, cookies=jar)</span><br><span class=\"line\">&gt;&gt;&gt; r.text</span><br><span class=\"line\"><span class=\"string\">'&#123;\"cookies\": &#123;\"tasty_cookie\": \"yum\"&#125;&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例4.请求网站并返回信息</span></span><br><span class=\"line\">def get(url):</span><br><span class=\"line\">  try:</span><br><span class=\"line\">    r = requests.get(url)</span><br><span class=\"line\">  except ConnectionError as e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Error = \"</span>+str(e))</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(0)</span><br><span class=\"line\">  except TimeoutError as e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Time = \"</span>+str(e))</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(1)</span><br><span class=\"line\">  except Exception as e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Other Error = \"</span> + str(e))</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"URL:\"</span>,r.url,<span class=\"string\">\"\\nHeader:\"</span>,end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  pprint(r.headers)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"Status：\"</span>,r.status_code)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"Encoding:\"</span>,r.encoding)</span><br><span class=\"line\">  r.encoding = <span class=\"string\">\"utf-8\"</span>  <span class=\"comment\">#输出内容utf8编码，防止中午乱码</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r.history)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果信息 #</span></span><br><span class=\"line\"><span class=\"comment\"># Connected to pydev debugger (build 191.7479.30)</span></span><br><span class=\"line\"><span class=\"comment\"># URL: http://127.0.0.1:4000/archives/ </span></span><br><span class=\"line\"><span class=\"comment\"># Header:&#123;'X-Powered-By': 'Hexo', 'Content-Type': 'text/html', 'Date': 'Fri, 12 Jul 2019 07:21:36 GMT', 'Connection': 'keep-alive', 'Transfer-Encoding': 'chunked'&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Status： 200</span></span><br><span class=\"line\"><span class=\"comment\"># Encoding: ISO-8859-1</span></span><br><span class=\"line\"><span class=\"comment\"># []</span></span><br><span class=\"line\"><span class=\"comment\"># ('&lt;!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.0//EN\" '</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"}]}