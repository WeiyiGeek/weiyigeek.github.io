{"title":"4.计算机科学导论之数据运算学习笔记","slug":"书籍笔记/计算机科学导论/4.计算机科学导论之数据运算学习笔记-cost","date":"2022-06-02T08:35:30.000Z","updated":"2023-03-13T03:51:26.682Z","url":"2022/6-2-695.html","path":"api/articles/2022/6-2-695.html.json","covers":["https://img.weiyigeek.top/2022/8/image-20220907102008234.png","https://img.weiyigeek.top/2022/8/image-20220907105737357.png","https://img.weiyigeek.top/2022/8/image-20220907112323297.png","https://img.weiyigeek.top/2022/8/image-20220907144027319.png","https://img.weiyigeek.top/2022/8/image-20220907155928425.png","https://img.weiyigeek.top/2022/8/image-20220907211625374.png","https://img.weiyigeek.top/2022/8/image-20220907222135647.png","https://img.weiyigeek.top/2022/8/image-20220907222832215.png","https://img.weiyigeek.top/2022/8/image-20220907225531860.png","https://img.weiyigeek.top/2022/8/image-20220907231901325.png"],"content":"<p>[TOC]</p>\n<h1 id=\"计算机科学导论学习笔记\"><a href=\"#计算机科学导论学习笔记\" class=\"headerlink\" title=\"计算机科学导论学习笔记\"></a>计算机科学导论学习笔记</h1><p>前言：当前作为一名IT互联网从业者，计算机技术日新月异，每天都有新概念、新技术的出现，而像我这样的万金油来说，越学到后面就越吃力，遇到瓶颈问题也随之增多，因为本身非科班出身，加之半路出家，针对于计算机基础知识掌握不牢或者说是不完整，所以我痛定思痛，下定决心重新学习计算机相关基础知识，从计算机科学导论，到计算机组成原理，到计算机网络、到操作系统，到数据结构，到程序算法、到应用开发、到安全运维开发。</p>\n<p>今天 (2022年9月1日) 便从<code>大神之路-起始篇</code>,我们要站在巨人们的肩膀上，进行<code>计算机科学导论</code>的 学习，我将总结学习成果笔记，帮助后续入门学习的朋友。</p>\n<p>随着现代计算机的发明，带来了新的学科，即计算机科学（简称<code>计科</code>）一词上一个非常广泛的概念，在此处我没将其定义为<code>计算机相关的问题</code>，现在<code>计算机科学</code>被划分成几个领域，总结归纳为两大类<code>系统领域</code>和<code>应用领域</code>.</p>\n<ul>\n<li>系统领域：涵盖那些与硬件和软件构成直接有关的领域，例如计算机体系结构、计算机网络、安全问题、操作系统、算法、程序设计语言以及软件工程。</li>\n<li>应用领域：涵盖了与计算机使用有关的领域，例如数据库、云物联和人工智能。</li>\n</ul>\n<p>参考书籍:【计算机科学导论-第三版 （Foundations Of Computer Science - Third Edition) 】作者： [美] 贝赫鲁兹.佛罗赞 (Behrouz Forouzan) PS: 当下已经第四版了、</p>\n<p>参考视频：<a href=\"https://www.bilibili.com/video/BV13V41117xc\" target=\"_blank\" rel=\"noopener\">【计算机导论】计算机科学导论（大神之路-起始篇）</a></p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"第-2-部分-数据的表示和运算\"><a href=\"#第-2-部分-数据的表示和运算\" class=\"headerlink\" title=\"第 2 部分 数据的表示和运算\"></a>第 2 部分 数据的表示和运算</h2><p>描述：该部分包括第<strong>2</strong>、<strong>3</strong>和<strong>4</strong>章，我们分别进行如下学习。</p>\n<ul>\n<li><p>第<strong>2</strong>章讨论了数字系统，数量如何能使用符号来表示。</p>\n</li>\n<li><p>第<strong>3</strong>章讨论了不同的数据如何存储在计算机中。</p>\n</li>\n<li><p>第<strong>4</strong>章讨论了一些基本的算术运算与位(逻辑)运算。</p>\n</li>\n</ul>\n<p>原文地址: <a href=\"https://mp.weixin.qq.com/s/0LaYhi89ujYQPHuLfwnuiA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/0LaYhi89ujYQPHuLfwnuiA</a></p>\n<hr>\n<h3 id=\"4-数据运算\"><a href=\"#4-数据运算\" class=\"headerlink\" title=\"4.数据运算\"></a>4.数据运算</h3><p>主要讲解存储在计算机中的数据上是如何进行运算，数据的运算可以分为三大类：算术运算、移位运算和逻辑运算。</p>\n<h4 id=\"4-1-逻辑运算\"><a href=\"#4-1-逻辑运算\" class=\"headerlink\" title=\"4.1 逻辑运算\"></a>4.1 逻辑运算</h4><p>计算机中的数据是以位模式存储的，逻辑运算是指那些应用于模式中的一个二进制位，或在两个模式中相应的两个二进制位的相同基本运算，说人话就是分别针对二进制位进行<code>与、或、非、异或</code>等操作。</p>\n<p>意味着我们可以在位层次上和模式层次上定义逻辑运算，模式层次上的逻辑运算是具有相同类型的位层次上的n个逻辑运算，这里的n就是模式中的位的数目。</p>\n<h5 id=\"1-位层次上的逻辑运算\"><a href=\"#1-位层次上的逻辑运算\" class=\"headerlink\" title=\"(1) 位层次上的逻辑运算\"></a>(1) 位层次上的逻辑运算</h5><p>一个位可能是0或1,可以假设“0”代表逻辑“假”，而“1”代表逻辑“真”，我们可以应用<code>布尔代数</code>中定义的运算去操纵二进制位为纪念<code>乔治•布尔（George Boole）</code>而命名的布尔代数属于逻辑的特殊数学领域.</p>\n<p><strong>与、或、非、异或</strong></p>\n<ul>\n<li><p>逻辑 <code>与</code> (AND) 运算: 常用运算符<code>&amp;</code>表示, 只要一假都为假, 即<code>参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</code>。</p>\n</li>\n<li><p>逻辑 <code>或</code> (OR) 运算：常用运算符<code>|</code>表示, 只要一真都为真, 即<code>只要对应的二个二进位有一个为1时，结果位就为1</code>。    </p>\n</li>\n<li><p>逻辑 <code>非</code> (NOT) 运算：常用运算符<code>!</code>表示, 一假变一真，一真变一假, 即<code>一个二进制位为1在进行非运算后结果为0，反之为0时经过非运算后结果为1</code>。</p>\n</li>\n<li><p>逻辑 <code>异或</code> (XOR) 运算 (发音为“ exclusive-or”)：常用运算符<code>^</code>表示, 真假为真，真真为假，假假也为假, 即<code>当两对应的二进位相异(分别为0、1)时其结果为1</code>。</p>\n<blockquote>\n<p>XOR 运算符并不是一个新的运算符，其只是 AND 、OR 、NOT 运算符的组合。</p>\n<p>例如 x XOR y = [  x AND (NOT y)  ] OR [ (NOT x) AND y ]</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907102008234.png\" alt=\"WeiyiGeek.位运算真值表\"></p>\n<p>例如，与、或、非、异或位逻辑运算示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 逻辑 或 运算 (一真必真)</span></span><br><span class=\"line\">真：1 &amp; 1 = 1</span><br><span class=\"line\">假：0 &amp; 0 = 0, 0 &amp; 1 = 0, 1 &amp; 0 = 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑 与 运算 (一假必假)</span></span><br><span class=\"line\">真：1 | 1 = 1, 0 | 1 = 0, 1 | 0 = 0</span><br><span class=\"line\">假：0 | 0 = 0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑 非 运算 (一真一假)</span></span><br><span class=\"line\">真：!0 = 1 </span><br><span class=\"line\">假：!1 = 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑 异或 运算 （真假必真）</span></span><br><span class=\"line\">真：1 ^ 0 = 1, 0 ^ 1 = 1</span><br><span class=\"line\">假：0 ^ 0 = 0, 1 ^ 1 = 0</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h5 id=\"2-位模式层次上的逻辑运算\"><a href=\"#2-位模式层次上的逻辑运算\" class=\"headerlink\" title=\"(2) 位模式层次上的逻辑运算\"></a>(2) 位模式层次上的逻辑运算</h5><p>相同的4个运算符（NOT、AND、OR和XOR）可以被应用到n位模式，效果就是对NOT运算来说，把每个运算符应用于每个位，对于其他3个运算符就是把每个运算符应用于相应的位对，有点云里雾里，看了这个例子你就明白了，例如对 10011000 二进制进行 NOT 逻辑运算，将其每个二进制位进行取反则结果为 01100111 。</p>\n<p>例如，与、或、非、异或位模式逻辑运算示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.NOT(非运算符)来计算位模式 10011000</span></span><br><span class=\"line\">NOT 1 0 0 1 1 0 0 0  | 输入</span><br><span class=\"line\">    0 1 1 0 0 1 1 1  | 输出</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 2.AND(与运算符)来计算位模式 10011000 和 00101010</span></span><br><span class=\"line\">    1 0 0 1 1 1 0 0  | 输入1</span><br><span class=\"line\">AND 0 0 1 0 1 0 1 0  | 输入2</span><br><span class=\"line\">    0 0 0 0 1 0 0 0  | 输出</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 3.OR(或运算符)来计算位模式 10011000 和 00101010</span></span><br><span class=\"line\">    1 0 0 1 1 1 0 0  | 输入1</span><br><span class=\"line\">OR  0 0 1 0 1 0 1 0  | 输入2</span><br><span class=\"line\">    1 0 1 1 1 1 1 0  | 输出</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 4.XOR(异或运算符)来计算位模式 10011000 和 00101010    </span></span><br><span class=\"line\">    1 0 0 1 1 1 0 0  | 输入1</span><br><span class=\"line\">XOR 0 0 1 0 1 0 1 0  | 输入2</span><br><span class=\"line\">    1 0 1 1 0 1 1 0  | 输出</span><br></pre></td></tr></table></figure>\n<p><strong>四种逻辑运算的应用</strong></p>\n<ul>\n<li>求反：NOT运算符的唯一应用就是对整个模式求反。</li>\n<li>使指定的位复位：AND运算的一个应用就是把一个位模式的指定位进行复位（置0），通常叫做掩码复位模式.</li>\n<li>对指定的位置位：OR运算的一个应用是把一个位模式的指定位进行置位（置1）.</li>\n<li>使指定的位反转：XOR运算的针对位模式中指定的位进行反转（求反）。</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907105737357.png\" alt=\"WeiyiGeek.掩码位模式\"></p>\n<h4 id=\"4-2-移位运算\"><a href=\"#4-2-移位运算\" class=\"headerlink\" title=\"4.2 移位运算\"></a>4.2 移位运算</h4><p>移位运算移动模式中的位，我们可以向左或向右移动位从而改变位的位置，移位运算分成两大类<code>逻辑移位运算</code>和<code>算术移位运算</code>。</p>\n<h5 id=\"1-逻辑移位运算\"><a href=\"#1-逻辑移位运算\" class=\"headerlink\" title=\"(1) 逻辑移位运算\"></a>(1) 逻辑移位运算</h5><p>逻辑移位运算应用于不带符号位的数的模式，原因是这些移位运算可能会改变数的符号，其又分为<code>逻辑移位</code>与<code>循环移位</code>两种方式。</p>\n<p><strong>逻辑移位</strong></p>\n<ul>\n<li><p>逻辑右移：把每一位往右移动一个位置，每移动一次最右位丢失，最左位以0补充。</p>\n</li>\n<li><p>逻辑右移：把每一位往左移动一个位置，每移动一次最左位丢失，最右位以0补充。</p>\n</li>\n</ul>\n<p><strong>循环移位</strong>：也称为旋转运算，其对位进行移位但并没有位被丢球或增加。</p>\n<ul>\n<li>循环右移：把每一位向右移动一个位置，最右位被回环成为最左位。</li>\n<li>循环左移：把每一位向左移动一个位置，最左位被回环成为最右位。</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907112323297.png\" alt=\"WeiyiGeek.逻辑与循环移位\"></p>\n<h5 id=\"2-算术移位运算\"><a href=\"#2-算术移位运算\" class=\"headerlink\" title=\"(2) 算术移位运算\"></a>(2) 算术移位运算</h5><p>该模式是可以表达正整数，也可以使用二进制补码的格式表示带符号的负整数(即负数)，使用算术左移则将整数乘以2，使用算术右移动则将整数除以2。</p>\n<ul>\n<li>左移按位 <code>&lt;&lt;</code> 运算符：运算数的各二进位全部左移若干位，由 “&lt;&lt;” 右边的数指定移动的位数，高位丢弃低位补0。    </li>\n<li>右移按位 <code>&gt;&gt;</code> 运算符：把 “ &gt;&gt; “ 左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数 ，低位丢弃高位补0。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220907144027319.png\" alt=\"WeiyiGeek.算术左移与右移\" title=\"\" class=\"\">\n                <p>WeiyiGeek.算术左移与右移</p>\n            </figure>\n<p>温馨提示：算术运算是保留符号位的，算术右移时保留符号位，需要将其复制放入相邻的右边的位中。当算术左移丢弃符号位时，将移位后的最左位作为符号位，如果新符号位与旧符号位相同则运算成功，否则发生数据上溢或下溢出结果非法。</p>\n<hr>\n<h4 id=\"4-3-算术运算\"><a href=\"#4-3-算术运算\" class=\"headerlink\" title=\"4.3 算术运算\"></a>4.3 算术运算</h4><p>算术运算包括加、减、乘、除，适用于整数和浮点数。</p>\n<h5 id=\"1-整数算术运算\"><a href=\"#1-整数算术运算\" class=\"headerlink\" title=\"(1) 整数算术运算\"></a>(1) 整数算术运算</h5><p>所有算术运算（加、减、乘、除）均适用于整数，但是整数的乘法（除法）虽然能使用重复的加法（减法）来实现，但程序是低效的，对于乘法和除法有更高效的程序（如<code>Booth 程序</code>），但这些超过了本书的范围，基于这个原因，我们这里只讨论整数的加法和减法。</p>\n<p><strong>1.二进制补码中的加减法</strong></p>\n<p>整数以二进制补码形式存储的，使用二进制补码表示法的优点是加减法之间是没有区别的，当遇到减法时，计算机只是将其简单的转换为+(加法), 将减数变成二进制的补，例如 A - B = A + (B反码 + 1)</p>\n<p>二进制补码中的加法就像十进制中的加法一样，每一列对应相加，如果有进位则追加到下一列上。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220907155928425.png\" alt=\"WeiyiGeek.二进制补码中整数的加减法\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二进制补码中整数的加减法</p>\n            </figure>\n<p>大致过程，由上图可知如果运算是减法，我们可以取第二个整数的二进制补码，否则转入下一步，然后再将其相加。</p>\n<p>例如，下面的示例中都是以二进制补码格式存储两个整数 A 和 B ，将其分部进行 加法 与 减法操作，非常注意正整数的补码等于反码等于补码，而负整数补码的原码为<code>补码-1</code>，然后再求反。</p>\n<p>如果执行减法，则将减数B进行取反+1, 然后再相加，例如下图中的 4.17 与 4.18.</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220907211625374.png\" alt=\"WeiyiGeek.二进制补码中的加减法示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二进制补码中的加减法示例</p>\n            </figure>\n<p>温馨提示: 当在计算机中进行数字算术运算时，需要记得每个数字和结果应该分配的二进制位的定义范围之内.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 例如,以二进制补码格式存储两个整数 A 和 B , 显示 B 如何被加到 A 上。</span><br><span class=\"line\">A &#x3D; (0111 1111)2   &#x3D;&gt; 127</span><br><span class=\"line\">B &#x3D; (0000 0011)2   &#x3D;&gt; 3</span><br><span class=\"line\">R &#x3D; (1000 0010)2   &#x3D;&gt;  1000 0010 - 1 &#x3D; NOT [1000 0001] &#x3D; 0111 1110 &#x3D;&gt; - 126</span><br><span class=\"line\"></span><br><span class=\"line\"># 由上面流程结果可知，由于数据上溢导致结果错误，因为期望的答案 +130 不在范围（-128 ~ +127) 之间</span><br><span class=\"line\">-126 ≠ 127 + 3</span><br></pre></td></tr></table></figure>\n<p><strong>2.符号加绝对值整数的加减法</strong></p>\n<p>使用该表示整数的加减法看起来非常复杂，有四种不同的符号组合（两符两值），对于减数有四种不同条件，意味着我们要考虑八种不同的情况。</p>\n<p>如下流程图解释：</p>\n<ol>\n<li><p>检查运算，如果运算是减法则改变第二个整数（B）的符号。</p>\n</li>\n<li><p>对符号应用XOR运算，将符号位存放在临时单位S中，如果S=0则符号相同，否则两符号不相同。</p>\n</li>\n<li><p>如果 S = 0 ，R=± (Am + Bm) , 相加绝对值可以得到 <code>Rm = (Am) + (Bm)</code> 和 <code>Rs = As</code>,此处m意味着绝对值，下标S意味着符号，但是此种情况可能会发生上溢，在报告后停止。</p>\n</li>\n<li><p>如果 S = 1 , R=± (Am - Bm) , 取第二个绝对值(Bm)的二进制补码然后进行+1，即 <code>Rm = Am + ( Bm[反码] + 1)</code>，结果的符号是较大绝对值整数的符号。</p>\n<blockquote>\n<p>如果 Am ≥ Bm，出现上溢结果是一个正数，此时舍弃上溢，Rm即为最终值，使结果的符号取A的符号。</p>\n<p>如果 Am ＜ Bm，没有上溢结果是一个负数，取Rm二进制补码（反码+1），使结果的符号取B的符号。</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907222135647.png\" alt=\"WeiyiGeek.符号加绝对值整数的加减法\"></p>\n<p>符号加绝对值整数的加减法示例演示：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220907222832215.png\" alt=\"WeiyiGeek.符号加绝对值整数的加减法\" title=\"\" class=\"\">\n                <p>WeiyiGeek.符号加绝对值整数的加减法</p>\n            </figure>\n<h5 id=\"2-实数算术运算\"><a href=\"#2-实数算术运算\" class=\"headerlink\" title=\"(2) 实数算术运算\"></a>(2) 实数算术运算</h5><p>浮点数格式存储的实数可以进行上加、减、乘和除算术运算。</p>\n<p><strong>实数加减法</strong></p>\n<p>以浮点数存储的实数的加法和减法被简化为小数点对齐后，以符号加绝对值（<code>符号和尾数的组合</code>）存储的两整数的加法和减法。</p>\n<p>计算流程：</p>\n<ol>\n<li><p>如果两数A或B中任意一个为0，则结果则为不为0的数。</p>\n</li>\n<li><p>如果运算是减法，改变减数(B)的符号来模拟加法。</p>\n</li>\n<li><p>通过在尾数中包含隐含的1和增加指数，两数分别去规范化，此时尾部看做一个整数。</p>\n</li>\n<li><p>统一指数，我们需要增加较小的指数，移位相应的尾数，直到两个数具有相同的指数.</p>\n<blockquote>\n<p>例如，把两个指数变成4<br>1.11101 x 2^4 + 1.01 x 2^2  =&gt; 1.11101 x 2^4 + 0.0101 x 2^24</p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>把每个数的符号与尾数组合看做一个符号加绝对值格式的整数。</p>\n</li>\n<li><p>最后再次规范化数变成 1.000111 x 2^5</p>\n</li>\n</ol>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907225531860.png\" alt=\"WeiyiGeek.浮点数格式实数的加减法\"></p>\n<p>我们可以通过如下两个示例进行学习实践实数算术运算:</p>\n<blockquote>\n<p>例如 + 5.75 的 S 、E、M值计算过程</p>\n<p>由于是 + ，则 S = 0 </p>\n<p>二进制值为 101.11 =&gt; 1.0111 * 10 ^2 </p>\n<p>指数为 2 ：2 + 127 = 129 =&gt; 1000 0001 = E</p>\n<p>尾数：M = 0111 0000 …. 0000 (后补齐19个0)</p>\n</blockquote>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220907231901325.png\" alt=\"WeiyiGeek.实数加减法\"></p>\n","comments":true,"excerpt":"[TOC]计算机科学导论学习笔记前言：当前作为一名IT互联网从业者，计算机技术日新月异，每天都有新概念、新技术的出现，而像我这样的万金油来说，越学到后面就越吃力，遇到瓶颈问题也随之增多，因为本身非科班出身，加之半路出家，针对于计算机基础知识掌握不牢或者说是不完整，所以我痛定思痛，下定决心重新学习计算机相关基础知识，从计算机科学导论，到计算机组成原理，到计算机网络、到操作系统，到数据结构，到程序算法、到应用开发、到安全运维开发。今天 (2022年9月1日) 便从大神之路-起始篇,我们要站在巨人们的肩膀上，进行计算机科学导论的 学习，我将总结学习成果笔记，帮助后续入门学习的朋友。随着现代计算机的发明，带来了新的学科，即计算机科学（简称计科）一词上一个非常广泛的概念，在此处我没将其定义为计算机相关的问题，现在计算机科学被划分成几个领域，总结归纳为两大类系统领域和应用领域.系统领域：涵盖那些与硬件和软件构成直接有关的领域，例如计算机体系结构、计算机网络、安全问题、操作系统、算法、程序设计语言以及软件工程。应用领域：涵盖了与计算机使用有关的领域，例如数据库、云物联和人工智能。参考书籍:【计算机科学导论-第三版 （Foundations Of Computer Science - Third Edition) 】作者： [美] 贝赫鲁兹.佛罗赞 (Behrouz Forouzan) PS: 当下已经第四版了、参考视频：【计算机导论】计算机科学导论（大神之路-起始篇）","categories":[{"name":"计算机基础知识","path":"api/categories/计算机基础知识.json"}],"tags":[{"name":"计算机科学导论","path":"api/tags/计算机科学导论.json"}]}