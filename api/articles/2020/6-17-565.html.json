{"title":"Linux内核参数使用与优化介绍","slug":"基础知识/操作系统/Linux底层/Linux内核参数使用与优化介绍","date":"2020-06-17T02:36:30.000Z","updated":"2022-02-21T00:50:16.667Z","url":"2020/6-17-565.html","path":"api/articles/2020/6-17-565.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><hr>\n<h2 id=\"0x01-Linux系统参数\"><a href=\"#0x01-Linux系统参数\" class=\"headerlink\" title=\"0x01 Linux系统参数\"></a>0x01 Linux系统参数</h2><h3 id=\"1-内核参数\"><a href=\"#1-内核参数\" class=\"headerlink\" title=\"1.内核参数\"></a>1.内核参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -a | grep <span class=\"string\">\"sched_rt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CPU</span></span><br><span class=\"line\"><span class=\"comment\"># 内核进程CPU调度设置(RT实时、CFS完全公平调度)</span></span><br><span class=\"line\">kernel.sched_rt_period_us = 1000000</span><br><span class=\"line\">kernel.sched_rt_runtime_us = 950000</span><br><span class=\"line\">kernel.sched_cfs_bandwidth_slice_us = 5000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用用户名称空间</span></span><br><span class=\"line\">kernel.unprivileged_userns_clone = 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"vm-参数\"><a href=\"#vm-参数\" class=\"headerlink\" title=\"vm 参数\"></a>vm 参数</h4><ul>\n<li>vm.swappiness: 主要作用<code>在内存与交换分区之间</code>优化,该值的大小对如何使用swap分区是有着很大的联系的,并对系统使用效率有一定的影响，因为Swap分区数据存于磁盘性能会相对内存低，尤其是读写频繁的情绪IO消耗会更大 (注意具体环境具体分析);</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 参数值:</span></span><br><span class=\"line\">swapniess\t策略</span><br><span class=\"line\">* 0\tLinux3.5以及以上：宁愿OOM killer也不用swap,Linux3.4以及更早：宁愿swap也不要OOM killer</span><br><span class=\"line\">* 1\tLinux3.5以及以上：宁愿swap也不要OOM killer</span><br><span class=\"line\">* 60\t默认值</span><br><span class=\"line\">* 100\t操作系统会主动地使用swap</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时生效 (此参数值越低，就会让Linux系统尽量少用swap分区，多用内存；参数值越高就是反过来，使内核更多的去使用swap空间)</span></span><br><span class=\"line\">sysctl -w vm.swappiness=0  <span class=\"comment\"># 表示最大限度使用物理内存然后才再使用swap空间(优先使用物理内存-推荐值除非是VPS内存不够用的)</span></span><br><span class=\"line\">sysctl -w vm.swappiness=100  <span class=\"comment\"># 表示积极的使用swap分区并且把内存上的数据及时的搬运到swap空间里面；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数路径</span></span><br><span class=\"line\">cat /proc/sys/vm/swappiness</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认值: 60</span></span><br><span class=\"line\"><span class=\"comment\"># 推荐值:</span></span><br></pre></td></tr></table></figure>\n<p>Tips : <code>OOM(Out Of Memory)</code> killer机制是指Linux操作系统发现可用内存不足时，强制杀死一些用户进程（非内核进程），来保证系统有足够的可用内存进行分配。<br>Tips : swappiness参数在Linux 3.5版本前后的表现并不完全相同，Redis运维人员在设置这个值需要关注当前操作系统的内核版本。</p>\n<p><br></p>\n<ul>\n<li><code>vm.max_map_count</code>: 限制一个进程可以拥有的VMA(虚拟内存区域)的数量。<br>描述: 此文件包含进程可能拥有的<code>最大内存映射区数</code>。内存映射区被用作调用malloc的副作用直接由mmap和mprotect调用，也可以在加载共享库时使用。虽然大多数应用程序只需要不到1000个映射，但某些程序特别是malloc调试器可能会消耗大量映射，例如每次分配最多一到两个映射。</li>\n</ul>\n<p>默认值: 65536<br>推荐值: 调整为默认的4倍即为: <code>sysctl -w vm.max_map_count=262144</code></p>\n<ul>\n<li><code>vm.overcommit_memory</code> : 用来设置内存分配策略(Redis 推荐配置为1)<br>参数说明:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 0\t表示内核将检查是否有足够的可用内存。如果有足够的可用内存，内存申请通过，否则内存申请失败，并把错误返回给应用进程</span><br><span class=\"line\">* 1\t表示内核允许超量使用内存直到用完为止</span><br><span class=\"line\">* 2\t表示内核决不过量的(<span class=\"string\">\"never overcommit\"</span>)使用内存，即系统整个内存地址空间不能超过swap+50%的RAM值，50%是overcommit_ratio默认值，此参数同样支持修改</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n默认值: 0<br>推荐值: 1 (针对于作为Redis内存数据库服务的机器)</li>\n</ul>\n<p>Tips:注意：本文的可用内存代表物理内存与swap之和。</p>\n<p><br></p>\n<h4 id=\"net-参数\"><a href=\"#net-参数\" class=\"headerlink\" title=\"net 参数\"></a>net 参数</h4><p>描述: Linux系统下TCP连接断开后，会以TIME_WAIT状态保留一定的时间，然后才会释放端口。当并发请求过多的时候，就会产生大量的TIME_WAIT状态的连接，无法及时断开的话，会占用大量的端口资源和服务器资源。此时我们可以优化TCP的内核参数，来及时将TIME_WAIT状态的端口清理掉。</p>\n<p><strong>实用示例1.提升服务器负载能力</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 查看当前TCP连接的状态和对应的连接数量：</span></span><br><span class=\"line\">netstat -n | awk <span class=\"string\">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class=\"line\">ESTABLISHED 229</span><br><span class=\"line\">TIME_WAIT 18000  <span class=\"comment\"># 占用18000个端口此时由于端游占用一个少一个，会严重的影响到后继的新连接，所以我们需要让系统更快的释放TIME_WAIT连接。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如下调整提升服务器负载能力之外,还能够防御小流量的Dos、CC和SYN攻击</span></span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_syn_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_fastopen = 3</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li><p><code>net.ipv4.tcp_syncookies</code> : 表示开启SYNCookies 当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击<br>默认值: 0 (表示关闭)<br>推荐值: 1</p>\n</li>\n<li><p><code>net.ipv4.tcp_tw_reuse</code> : 表示开启重用允许将TIME-WAITsockets重新用于新的TCP连接<br>默认值: 0 (表示关闭)<br>推荐值: 1</p>\n</li>\n<li><p><code>net.ipv4.tcp_tw_recycle</code> : 表示开启TCP连接中TIME-WAITsockets的快速回收<br>默认值: 0 (表示关闭)<br>推荐值: 1</p>\n</li>\n<li><p><code>net.ipv4.tcp_fin_timeout</code> : 表示修改系統TCP默认的 TIMEOUT 时间。<br>默认值: 60<br>推荐值: 30</p>\n</li>\n<li><p><code>net.ipv4.tcp_synack_retries</code> : 为了打开对端的连接内核需要发送一个SYN并附带一个回应前面一个SYN的ACK(所谓三次握手中的第二次握手),该设置决定了内核放弃连接之前发送SYN+ACK包的数量。<br>默认值: 5<br>推荐值: 2|1</p>\n</li>\n<li><p><code>net.ipv4.tcp_syn_retries</code> : 在内核放弃建立连接之前发送SYN包的数量。<br>默认值: 6<br>推荐值: 2|1</p>\n</li>\n</ul>\n<ul>\n<li><p><code>net.ipv4.tcp_max_orphans</code> : 系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。<br>默认值: 65535 (缺省)<br>建议值: 一般缺省</p>\n</li>\n<li><p><code>net.ipv4.tcp_available_congestion_control</code> : TCP可用的拥塞算法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_available_congestion_control\"</span></span><br><span class=\"line\"><span class=\"comment\"># 可用算法 : net.ipv4.tcp_available_congestion_control = reno cubic</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>net.ipv4.tcp_congestion_control</code> : 设置TCP 拥塞算法为cubic</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_congestion_control\"</span></span><br><span class=\"line\"><span class=\"comment\"># 默认值: net.ipv4.tcp_congestion_control = cubic</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>net.ipv4.tcp_fastopen</code> : 在Linux支持TFO的内核版本下用来加速连续TCP连接的数据交互的TCP协议扩展（Client内核版本为3.6；Server内核版本为3.7中使用）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_fastopen\"</span></span><br><span class=\"line\">  <span class=\"comment\"># net.ipv4.tcp_fastopen = 1</span></span><br><span class=\"line\">  <span class=\"comment\"># net.ipv4.tcp_fastopen_blackhole_timeout_sec = 3600</span></span><br><span class=\"line\">  <span class=\"comment\"># net.ipv4.tcp_fastopen_key = 00000000-00000000-00000000-00000000</span></span><br><span class=\"line\"><span class=\"comment\"># 缺省值: 1</span></span><br><span class=\"line\"><span class=\"comment\">#   其中1表示客户端开启，2表示服务端开启，3表示客户端和服务器同时开启</span></span><br><span class=\"line\"><span class=\"comment\"># 推荐值: 3 (未验证效果)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>实用示例2.优化TCP的可使用端口范围及提升服务器并发能力(注意一般流量小的服务器上没必要设置如下参数)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_keepalive_time = 1200</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class=\"line\">net.ipv4.ip_local_port_range = 1024 65535</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>net.ipv4.tcp_keepalive_time</code> : 表示当keepalive启用的时候TCP发送keepalive消息的频度。<br>默认值: 7200 (2 Hour)<br>推荐值: 1200 (s)</p>\n</li>\n<li><p><code>net.ipv4.ip_local_port_range</code> : 表示用于向外连接的端口范围</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sudo sysctl -a | grep \"ip_local_port_range\"</span></span><br><span class=\"line\">默认值: net.ipv4.ip_local_port_range = 32768 60999</span><br><span class=\"line\">推荐值: 1024 65535</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>net.ipv4.tcp_max_syn_backlog</code> : 表示SYN队列的长度设置此参数可以容纳更多等待连接的网络连接数。<br>默认值: 1024<br>推荐值: 8192</p>\n</li>\n<li><p><code>net.ipv4.tcp_max_tw_buckets</code> : 表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。<br>默认值: 65536<br>推荐值: 5000</p>\n</li>\n</ul>\n<ul>\n<li><p><code>net.ipv4.tcp_mem</code> : TCP读写buffer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_mem\"</span></span><br><span class=\"line\"><span class=\"comment\">#默认值(16G): net.ipv4.tcp_mem = 189924  253234  379848</span></span><br><span class=\"line\"><span class=\"comment\">#默认值(512G): net.ipv4.tcp_mem = 6171576 8228769 12343152</span></span><br><span class=\"line\">net.ipv4.tcp_mem = 94500000 915000000 927000000   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#建议值: </span></span><br><span class=\"line\"><span class=\"comment\">#值含义: 上述内存单位是页，而不是字节</span></span><br><span class=\"line\">net.ipv4.tcp_mem[0]:低于此值，TCP没有内存压力。</span><br><span class=\"line\">net.ipv4.tcp_mem[1]:在此值下，进入内存压力阶段。</span><br><span class=\"line\">net.ipv4.tcp_mem[2]:高于此值，TCP拒绝分配socket。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>net.ipv4.tcp_wmem</code> : TCP写buffer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_wmem\"</span></span><br><span class=\"line\"><span class=\"comment\">#默认值: net.ipv4.tcp_wmem = 4096 16384  4194304</span></span><br><span class=\"line\"><span class=\"comment\">#建议值: net.ipv4.tcp_wmem = 8192 436600 873200</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>net.ipv4.tcp_rmem</code> : TCP读buffer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | grep <span class=\"string\">\"net.ipv4.tcp_rmem\"</span></span><br><span class=\"line\"><span class=\"comment\">#默认值: net.ipv4.tcp_rmem = 4096  131072  6291456</span></span><br><span class=\"line\"><span class=\"comment\">#建议值:32768 436600 873200</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>实用示例3.优化核套接字TCP的缓存区设置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.core.netdev_max_backlog = 8192</span><br><span class=\"line\">net.core.somaxconn = 32768</span><br><span class=\"line\">net.core.rmem_max = 12582912</span><br><span class=\"line\">net.core.rmem_default = 6291456</span><br><span class=\"line\">net.core.wmem_max = 12582912</span><br><span class=\"line\">net.core.wmem_default = 6291456</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>net.core.netdev_max_backlog</code> :  每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。<br>缺省值: 1000,对于512G的内存为262144（1G*512）<br>推荐值: 对于16G的内存设置为262114</p>\n</li>\n<li><p><code>net.core.somaxconn</code> : 记录的那些尚未收到客户端确认信息的连接请求的最大值(结合高并发请求数来调节此值;)。<br>默认值: 4096<br>推荐值: 16384</p>\n</li>\n<li><p><code>net.core.rmem_default</code> : 这个参数表示内核套接字<code>接收receive</code>缓存区默认的大小(通常小于等于rmem_max值);</p>\n</li>\n<li><code>net.core.rmem_max</code> : 这个参数表示内核套接字<code>接收receive</code>缓存区的最大大小;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | egrep <span class=\"string\">\"net.core.rmem_default|net.core.rmem_max\"</span></span><br><span class=\"line\">默认值:</span><br><span class=\"line\">  <span class=\"comment\"># net.core.rmem_default = 212992</span></span><br><span class=\"line\">  <span class=\"comment\"># net.core.rmem_max = 212992</span></span><br><span class=\"line\">推荐值: 6291456 12582912</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><code>net.core.wmem_default</code> : 这个参数表示内核套接字发送send缓存区默认的大小(通常小于等于wmem_max值);</li>\n<li><code>net.core.wmem_max</code> : 这个参数表示内核套接字发送send缓存区的最大大小;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sysctl -a | egrep <span class=\"string\">\"net.core.wmem_default|net.core.wmem_max\"</span> | head -n5</span><br><span class=\"line\">默认值:</span><br><span class=\"line\">  <span class=\"comment\"># net.core.wmem_default = 212992</span></span><br><span class=\"line\">  <span class=\"comment\"># net.core.wmem_max = 212992</span></span><br><span class=\"line\">推荐值:  </span><br><span class=\"line\">  <span class=\"comment\"># net.core.wmem_default = 6291456 </span></span><br><span class=\"line\">  <span class=\"comment\"># net.core.wmem_max = 12582912</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h4 id=\"fs-参数\"><a href=\"#fs-参数\" class=\"headerlink\" title=\"fs 参数\"></a>fs 参数</h4><p>描述: 该参数主要针对于文件描述符系统级别的资源进行限制。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.file-max = 1646839</span><br><span class=\"line\">fs.aio-max-nr = 1048576</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>fs.file-nr</code> : 表示进程当前打开的句柄数以及最大的句柄数;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /proc/sys/fs/file-nr</span><br><span class=\"line\">  <span class=\"comment\"># 16640   0       52698870</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo sysctl -a | egrep <span class=\"string\">\"fs.file-nr\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 16640   0       52698870</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>fs.file-max</code> : 表示进程<code>（比如一个worker进程）</code>可以同时打开的最大句柄数，这个参数直线限制最大并发连接数，需根据实际情况配置;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认值:</span><br><span class=\"line\">  <span class=\"comment\"># fs.file-max = 52698870 (512G)</span></span><br><span class=\"line\">推荐值:</span><br><span class=\"line\">  <span class=\"comment\"># fs.file-max = 1646839 (16G)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>fs.aio-max-nr</code> : 同时可以拥有的的异步IO请求数目。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认值</span></span><br><span class=\"line\">fs.aio-max-nr = 65536</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推荐值(1024*1024 = 1024K)</span></span><br><span class=\"line\">fs.aio-max-nr = 1048576</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-系统参数\"><a href=\"#2-系统参数\" class=\"headerlink\" title=\"2.系统参数\"></a>2.系统参数</h3><p>描述: 在对于Linux服务器系统参数调优时候往往需要修改以下相关参数;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ <span class=\"built_in\">ulimit</span> -a</span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 63708</span><br><span class=\"line\">max locked memory       (kbytes, -l) 65536</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 1024   <span class=\"comment\"># 最大文件打开句柄数</span></span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 8192</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) 63708</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指标解释 - &lt;item&gt; can be one of the following:</span></span><br><span class=\"line\"><span class=\"comment\">#        - core - limits the core file size (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - data - max data size (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - fsize - maximum filesize (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - memlock - max locked-in-memory address space (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - nofile - max number of open file descriptors</span></span><br><span class=\"line\"><span class=\"comment\">#        - rss - max resident set size (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - stack - max stack size (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - cpu - max CPU time (MIN)</span></span><br><span class=\"line\"><span class=\"comment\">#        - nproc - max number of processes</span></span><br><span class=\"line\"><span class=\"comment\">#        - as - address space limit (KB)</span></span><br><span class=\"line\"><span class=\"comment\">#        - maxlogins - max number of logins for this user</span></span><br><span class=\"line\"><span class=\"comment\">#        - maxsyslogins - max number of logins on the system</span></span><br><span class=\"line\"><span class=\"comment\">#        - priority - the priority to run user process with</span></span><br><span class=\"line\"><span class=\"comment\">#        - locks - max number of file locks the user can hold</span></span><br><span class=\"line\"><span class=\"comment\">#        - sigpending - max number of pending signals</span></span><br><span class=\"line\"><span class=\"comment\">#        - msgqueue - max memory used by POSIX message queues (bytes)</span></span><br><span class=\"line\"><span class=\"comment\">#        - nice - max nice priority allowed to raise to values: [-20, 19]</span></span><br><span class=\"line\"><span class=\"comment\">#        - rtprio - max realtime priority</span></span><br><span class=\"line\"><span class=\"comment\">#        - chroot - change root to directory (Debian-specific)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"open-files-参数\"><a href=\"#open-files-参数\" class=\"headerlink\" title=\"open files 参数\"></a>open files 参数</h4><p>描述: 该参数主要设置是单个进程能够设置Linux最大文件句柄数, 常常在调优时对其优化保证以后服务器在高并发下正常运行。否则在高并非的情况下很容报<code>Too many open files</code>错误。</p>\n<p>默认值: 1024<br>最大值: 65535 (不能超过2^16)</p>\n<p><strong>参数设置:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -HSn 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2./etc/security/limits.conf  | 此方法需要重启系统</span></span><br><span class=\"line\"><span class=\"comment\"># 软限制（soft limit）：内核实际执行的限制，任何进程都可以将软限制设置为小于或等于对进程限制的硬限制的值、最大线程数和文件数。</span></span><br><span class=\"line\"><span class=\"comment\"># 硬限制（hard limit）：可以在任何时候任何进程中设置，但硬限制需要由超级用户修改。</span></span><br><span class=\"line\"><span class=\"comment\"># soft nofile ：可打开的文件描述符的最大数(超过会警告);</span></span><br><span class=\"line\">*  soft    nofile          65535</span><br><span class=\"line\"><span class=\"comment\"># hard nofile ：可打开的文件描述符的最大数(超过会报错)</span></span><br><span class=\"line\">*  hard    nofile          65535</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"max-user-processes-参数\"><a href=\"#max-user-processes-参数\" class=\"headerlink\" title=\"max user processes 参数\"></a>max user processes 参数</h4><p>描述: 该参数主要设置是单个用户最大进程数。</p>\n<p>默认值: 63708<br>最大值: 65535 (不能超过2^16)</p>\n<p><strong>参数设置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -HSu 65535</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2./etc/security/limits.conf | 此方法需要同样也需要重启系统</span></span><br><span class=\"line\"><span class=\"comment\"># 单个用户可用的最大进程数量(超过会警告);</span></span><br><span class=\"line\">*  soft    nproc           65535</span><br><span class=\"line\"><span class=\"comment\"># 单个用户可用的最大进程数量(超过会报错);</span></span><br><span class=\"line\">*  hard    nproc           65535</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 用户可用的最大进程数量以及打开的文件描述符的最大数设置与下述两个内核参数有关。</p>\n<ul>\n<li>(1) 所有进程打开的文件描述符数不能超过它<code>/proc/sys/fs/file-max</code>内核可分配的所有进程最大文件数。</li>\n<li>(2) 单个进程打开的文件描述符数不能超过它<code>/proc/sys/fs/nr_open</code>内核可分配的单个进程最大文件数。</li>\n</ul>\n<p>/proc/sys/fs/file-handle</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux","path":"api/categories/Linux.json"}],"tags":[{"name":"kernel","path":"api/tags/kernel.json"}]}