{"title":"19-Kubernetes进阶之企业实践操作配置补充","slug":"虚拟云容/云容器/Kubernetes/19-Kubernetes进阶之企业实践操作配置补充","date":"2022-02-27T02:37:47.000Z","updated":"2023-01-31T08:55:41.580Z","url":"2022/2-27-620.html","path":"api/articles/2022/2-27-620.html.json","covers":["https://img.weiyigeek.top/2022/5/20220521095455.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-Kubernetes-中安装metrics-server以获取客户端资源监控指标\"><a href=\"#0x01-Kubernetes-中安装metrics-server以获取客户端资源监控指标\" class=\"headerlink\" title=\"0x01 Kubernetes 中安装metrics-server以获取客户端资源监控指标\"></a>0x01 Kubernetes 中安装metrics-server以获取客户端资源监控指标</h2><p>描述: 通常在集群安装完成后,我们需要对其设置持久卷、网络存储等插件, 除此之外我们还需安装metrics-server以便于获取Node与Pod相关资源消耗等信息，否则你在执行<code>kubectl top</code>命令时会提示<code>error: Metrics API not available</code>, 所以本小节将针对Metrics-server的安装进行讲解。</p>\n<p>项目地址: <a href=\"https://github.com/kubernetes-sigs/metrics-server\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes-sigs/metrics-server</a></p>\n<p><strong>Q: 什么是metrics-server?</strong></p>\n<blockquote>\n<p>Metrics Server 是 Kubernetes 内置自动缩放管道的可扩展、高效的容器资源指标来源。<br>Metrics Server 从 Kubelets 收集资源指标，并通过 Metrics API 在 Kubernetes apiserver 中公开它们，供 Horizo​​ntal Pod Autoscaler 和 Vertical Pod Autoscaler 使用。  </p>\n</blockquote>\n<blockquote>\n<p>简单的说: Metrics Server 是集群解析监控数据的聚合器,安装后用户可以通过标准的API（/apis/metrics.k8s.io）来访问监控数据，此处值得注意的是Metrics-Server并非kube-apiserver的一部分,而是通过Aggregator这种插件机制,在独立部署的情况下同kube-apiserver一起统一对外服务的，当进行api请求时kube-aggregator统一接口会分析访问api具体的类型，帮我们负载到具体的api上。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /apis/metrics.k8s.io/V1beta1</span><br><span class=\"line\">            |</span><br><span class=\"line\">      Kube-aggregator</span><br><span class=\"line\">      |              |                 |</span><br><span class=\"line\">Kube-apiserver  Metrics-server another-add-onapiserver</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>Metrics Server 特点：</strong></p>\n<ul>\n<li>适用于大多数集群的单一部署（请参阅要求）</li>\n<li>快速自动缩放，每 15 秒收集一次指标。</li>\n<li>资源效率，集群中每个节点使用 1 mili 的 CPU 核心和 2 MB 的内存。</li>\n<li>可扩展支持多达 5,000 个节点集群。</li>\n</ul>\n<p><br></p>\n<p><strong>Metrics Server 功能：(horizontalpodautoscalers.autoscaling 水平扩展必备)</strong></p>\n<ul>\n<li>基于CPU/内存的水平自动缩放</li>\n<li>自动调整/建议容器所需的资源</li>\n</ul>\n<p><br/></p>\n<p><strong>Metrics Server 访问流程图</strong></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220521095455.png\" alt=\"WeiyiGeek.访问流程图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.访问流程图</p>\n            </figure>\n<p>温馨提示: 我们可以通过 <code>kubectl top</code> 命令来访问 Metrics API 获取资源监控相关数据。<br>温馨提示: 注意 Metrics API 只可以查询当前度量数据,并不保存历史数据。</p>\n<p><br/></p>\n<p><strong>安装使用</strong><br>步骤 01.Metrics Server 可以直接从 YAML 清单安装，也可以通过官方 Helm 图表安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载 YAML 清单</span></span><br><span class=\"line\">wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提前下载相应的镜像加快部署</span></span><br><span class=\"line\">grep <span class=\"string\">\"image:\"</span> components.yaml</span><br><span class=\"line\"><span class=\"comment\"># image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由于其镜像国内无法访问此处我们采用阿里云k8s.gcr.io镜像源</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s#k8s.gcr.io/metrics-server#registry.cn-hangzhou.aliyuncs.com/google_containers#g'</span> components.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署资源清单</span></span><br><span class=\"line\">kubectl apply -f components.yaml</span><br><span class=\"line\">  <span class=\"comment\"># serviceaccount/metrics-server created</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  <span class=\"comment\"># apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 02.Metrics Server 默认是安装在kube-system名称空间下，我们可以查看其deployment、Pod运行以及SVC情况。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.部署清单状态查看</span></span><br><span class=\"line\">kubectl get deploy,pod,svc -n kube-system -l k8s-app=metrics-server</span><br><span class=\"line\"><span class=\"comment\"># NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/metrics-server   1/1     1            0           91s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NAME                                  READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># pod/metrics-server-6ffc8966f5-cf2qh   1/1     Running   0          91s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NAME                     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># service/metrics-server   ClusterIP   10.96.28.153   &lt;none&gt;        443/TCP   91s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.注册到K8S集群中的 metrics.k8s.io API 查看</span></span><br><span class=\"line\">kubectl get apiservices.apiregistration.k8s.io  | grep <span class=\"string\">\"metrics\"</span></span><br><span class=\"line\">  <span class=\"comment\"># v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        14h</span></span><br></pre></td></tr></table></figure>\n<p>步骤 03.查看各个节点以及Pod的资源指标（CPU/MEM）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl top node</span><br><span class=\"line\">  NAME         CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%</span><br><span class=\"line\">  master-223   102m         2%     1147Mi          61%</span><br><span class=\"line\">  master-224   119m         2%     2188Mi          57%</span><br><span class=\"line\">  master-225   139m         3%     3773Mi          48%</span><br><span class=\"line\">  node-1       54m          1%     921Mi           49%</span><br><span class=\"line\">  node-2       61m          1%     824Mi           44%</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认名称空间中Pod的资源信息</span></span><br><span class=\"line\">$  kubectl top pod</span><br><span class=\"line\">  NAME                          CPU(cores)   MEMORY(bytes)</span><br><span class=\"line\">  hello-nginx-7f4ff84cb-mjw79   0m           6Mi</span><br><span class=\"line\">  nginx-web-0                   0m           6Mi</span><br><span class=\"line\">  nginx-web-1                   0m           5Mi</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>问题解决:</strong></p>\n<p>问题1.部署 metrics-server 资源清单后 Pod 状态为 0/1 并报出<code>annot validate certificate for 10.10.107.223 because it doesn&#39;t contain any IP SANs&quot;</code>错误问题解决。</p>\n<ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe pod -n kube-system metrics-server-6ffc8966f5-cf2qh</span><br><span class=\"line\">  <span class=\"comment\"># Warning  Unhealthy  8s (x17 over 2m27s)  kubelet            Readiness probe failed: HTTP probe failed with statuscode: 500</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl logs -f --tail 50 -n kube-system metrics-server-6ffc8966f5-cf2qh</span><br><span class=\"line\">  <span class=\"comment\"># E0520 11:13:17.379944       1 scraper.go:140] \"Failed to scrape node\" err=\"Get \\\"https://10.10.107.226:10250/metrics/resource\\\": x509: cannot validate certificate for 10.10.107.226 because it doesn't contain any IP SANs\" node=\"node-1\"</span></span><br><span class=\"line\">  <span class=\"comment\"># E0520 11:13:17.382948       1 scraper.go:140] \"Failed to scrape node\" err=\"Get \\\"https://10.10.107.223:10250/metrics/resource\\\": x509: cannot validate certificate for 10.10.107.223 because it doesn't contain any IP SANs\" node=\"master-223\"</span></span><br></pre></td></tr></table></figure></li>\n<li>问题原因: 由于 metrics-server 未获得TLS Bootstrap 签发证书的导致访问各节点资源时报错。</li>\n<li>解决办法: 启用 TLS BootStrap 证书签发<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.分别在 Master 与 Node 节点中启用TLS BootStrap 证书签发，在 kubelet 的 yaml 配置中追加入如下K/V.</span></span><br><span class=\"line\"><span class=\"comment\"># 方式1.Kubeadm 搭建的集群</span></span><br><span class=\"line\">$ vim /var/lib/kubelet/config.yaml</span><br><span class=\"line\">...</span><br><span class=\"line\">serverTLSBootstrap: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.二进制搭建的集群(注意此路径根据你的kubelet.service进行配置), 此处我们定义的路径为 /etc/kubernetes/cfg/kubelet-config.yaml </span></span><br><span class=\"line\"><span class=\"comment\"># /var/lib/kubelet/config.yaml</span></span><br><span class=\"line\">$ tee -a /etc/kubernetes/cfg/kubelet-config.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">serverTLSBootstrap: <span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubeadm 安装方式可以使用如下</span></span><br><span class=\"line\">tee -a /var/lib/kubelet/config.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">serverTLSBootstrap: <span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.最后分别重启各个节点kubelet服务即可</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart kubelet.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.查看节点的证书签发请求</span></span><br><span class=\"line\">kubectl get csr</span><br><span class=\"line\">  <span class=\"comment\"># NAME        AGE     SIGNERNAME                      REQUESTOR                REQUESTEDDURATION   CONDITION</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-2m5d6   2m27s   kubernetes.io/kubelet-serving   system:node:master-223   &lt;none&gt;              Pending</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-ff7vb   19m     kubernetes.io/kubelet-serving   system:node:master-225   &lt;none&gt;              Pending</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-gg8gq   86s     kubernetes.io/kubelet-serving   system:node:master-224   &lt;none&gt;              Pending</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-56k9s   55s     kubernetes.io/kubelet-serving   system:node:node-1       &lt;none&gt;              Pending</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-dmghl   3s      kubernetes.io/kubelet-serving   system:node:node-2       &lt;none&gt;              Pending</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.手动允许节点证书签发请求</span></span><br><span class=\"line\">kubectl certificate approve $( kubectl get csr | grep -v NAME | grep <span class=\"string\">\"Pending\"</span>  | cut -d <span class=\"string\">\" \"</span> -f 1)</span><br><span class=\"line\">kubectl certificate approve csr-2m5d6</span><br><span class=\"line\">kubectl certificate approve csr-56k9s</span><br><span class=\"line\">kubectl certificate approve csr-ff7vb</span><br><span class=\"line\">kubectl certificate approve csr-gg8gq</span><br><span class=\"line\">  <span class=\"comment\"># certificatesigningrequest.certificates.k8s.io/csr-gg8gq approved</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.查看签发的 certificate 特征</span></span><br><span class=\"line\">kubectl get csr csr-dmghl</span><br><span class=\"line\">  <span class=\"comment\"># NAME        AGE     SIGNERNAME                      REQUESTOR           REQUESTEDDURATION   CONDITION</span></span><br><span class=\"line\">  <span class=\"comment\"># csr-dmghl   10m    kubernetes.io/kubelet-serving   system:node:node-2   &lt;none&gt;              Approved,Issued</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x02-Kubernetes-中Session的会话保持\"><a href=\"#0x02-Kubernetes-中Session的会话保持\" class=\"headerlink\" title=\"0x02 Kubernetes 中Session的会话保持\"></a>0x02 Kubernetes 中Session的会话保持</h2><p>背景说明: 基于kubernetes集群中部署Java项目,您发现在多pod模式下会出现登录成功但是页面无法跳转的问题，或验证明明输入正确却提示验证码错误无法登陆，而在单一pod时却可以成功登录并页面正常跳转，于是推测是cookie的问题。</p>\n<p>解决方式: 进行K8S会话粘粘与保持, 但是针对于不同的实践环境又有所不同，例如采用ClusterIP、NodePort方式或者Ingress访问来访问我们的应用。</p>\n<p><strong>Service</strong><br>描述: 网上的大部分文章提供的解决方案都是在service的配置文件中加入<code>sessionAffinity: ClientIP</code>，功能是选择与请求来源ip更接近的pod，这样就会固定同一个session但可能会出现流量负载不均衡的情况。</p>\n<p>演示案例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"attr\">    release:</span> <span class=\"string\">canary</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">8280</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">8280</span></span><br><span class=\"line\"><span class=\"attr\">  sessionAffinity:</span> <span class=\"string\">ClientIP</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>ingress-nginx</strong><br>在ingress-nginx配置中应做以下操作：</p>\n<ul>\n<li>设置 <code>nginx.ingress.kubernetes.io/affinity</code> 属性，启用会话保持, 其值仅仅支持Cookie。</li>\n<li>设置 <code>nginx.ingress.kubernetes.io/affinity-mode</code> 属性，设置为balanced在集群扩大pod时，会自动分配一些会话到新创建的pod上，用于平衡服务器的负载；设置为persistent则永远保证用户访问pod的一致性，不会访问到其他pod，其值支持<code>balanced (默认设置) or persistent</code>。</li>\n<li>设置 <code>nginx.ingress.kubernetes.io/session-cookie-name</code> 属性，自定义cookie名称, 其默认设置为 INGRESSCOOKIE，但我们可自定义。</li>\n</ul>\n<p>演示案例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/affinity:</span> <span class=\"string\">\"cookie\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/affinity-mode:</span> <span class=\"string\">\"persistent\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/session-cookie-name:</span> <span class=\"string\">\"route\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-allow-origin:</span> <span class=\"string\">'*'</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-max-age:</span> <span class=\"string\">\"64800\"</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">front-web</span></span><br><span class=\"line\"><span class=\"attr\">    ref:</span> <span class=\"string\">front</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">front-app</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  ingressClassName:</span> <span class=\"string\">ingress-nginx</span></span><br><span class=\"line\"><span class=\"attr\">  rules:</span></span><br><span class=\"line\"><span class=\"attr\">  - host:</span> <span class=\"string\">app.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">      paths:</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">        pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\"><span class=\"attr\">        backend:</span></span><br><span class=\"line\"><span class=\"attr\">          service:</span></span><br><span class=\"line\"><span class=\"attr\">            name:</span> <span class=\"string\">front-index</span></span><br><span class=\"line\"><span class=\"attr\">            port:</span></span><br><span class=\"line\"><span class=\"attr\">              number:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/sub/</span></span><br><span class=\"line\"><span class=\"attr\">        pathType:</span> <span class=\"string\">ImplementationSpecific</span></span><br><span class=\"line\"><span class=\"attr\">        backend:</span></span><br><span class=\"line\"><span class=\"attr\">        service:</span></span><br><span class=\"line\"><span class=\"attr\">          name:</span> <span class=\"string\">front-sub</span></span><br><span class=\"line\"><span class=\"attr\">          port:</span></span><br><span class=\"line\"><span class=\"attr\">            number:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">  tls:</span></span><br><span class=\"line\"><span class=\"attr\">  - hosts:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">app.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"attr\">    secretName:</span> <span class=\"string\">app-weiyigeek-top</span></span><br></pre></td></tr></table></figure></p>\n<p>官方参考: <a href=\"https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#session-affinity\" target=\"_blank\" rel=\"noopener\">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#session-affinity</a></p>\n<hr>\n<h2 id=\"0x03-Kubernetes-中多集群接入管理实践\"><a href=\"#0x03-Kubernetes-中多集群接入管理实践\" class=\"headerlink\" title=\"0x03 Kubernetes 中多集群接入管理实践\"></a>0x03 Kubernetes 中多集群接入管理实践</h2><p>描述: 在pipeline中的CD环节，常常需要将业务产品部署到不同的K8S集群，比如开发环境、测试环境、生产环境，此时可以使用 <code>kubectl config</code>相关命令来进行多个远程集群的配置并采用rbac授权机制来创建指定用户的权限 。</p>\n<p>下面我们从两个方面进行验证，一是在本地集群创建指定用户只能访问特定名称空间的资源，二是指定用户接入远程集群中并且只能访问特定名称空间的资源, 我们需要重点关注三大要素即 <code>集群（clusters）、上下文（contexts）、用户（user）</code></p>\n<p>config 命令下重要配置项说明:</p>\n<ul>\n<li>clusters ：配置要访问的kubernetes集群</li>\n<li>contexts ：配置访问kubernetes集群的具体上下文环境</li>\n<li>current-context : 配置当前使用的上下文环境</li>\n<li>users ： 配置访问的用户信息，用户名以及证书信息</li>\n</ul>\n<p><br/></p>\n<h3 id=\"1-本地集群创建指定用户管理集群\"><a href=\"#1-本地集群创建指定用户管理集群\" class=\"headerlink\" title=\"1.本地集群创建指定用户管理集群\"></a>1.本地集群创建指定用户管理集群</h3><p><strong>为当前集群创建一个只管理指定名称空间权限的devopsuser用户</strong><br>描述: kubernetes 中我们可将权限进行细化、使得使用者可以拥有最小的运行权限，保证集群的安全，特别是CI/CD环境中，下面将演示在kubernetes集群中创建一个只管理名称空间为devtest的devopsuser用户。</p>\n<p>步骤 01.创建一个devtest的名称空间, 执行如下命令<code>kubectl create namespace devtest</code>.</p>\n<p>步骤 02.执行<code>kubectl config get-clusters</code>命令查看当前集群名称，通常默认为<code>kubernetes</code>.</p>\n<p>步骤 03.准备<code>cfssl</code>工具以及生成用户证书的相关json文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tee ca-config.json &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"signing\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"default\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"profiles\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"usages\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ tee devopsuser-csr.json &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"devopsuser\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>步骤 04.执行如下命令为devopsuser用户生成相应的证书，并将证书复制到 <code>/etc/kubernetes/pki/user/</code>目录中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成用户证书</span></span><br><span class=\"line\">cfssl gencert -ca=/etc/kubernetes/pki/ca.crt -ca-key=/etc/kubernetes/pki/ca.key -config ./ca-config.json -profile=kubernetes ./devopsuser-csr.json | cfssljson -bare devopsuser</span><br><span class=\"line\">  <span class=\"comment\"># 2022/03/16 19:40:19 [INFO] generate received request</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/03/16 19:40:19 [INFO] received CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/03/16 19:40:19 [INFO] generating key: rsa-2048</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/03/16 19:40:19 [INFO] encoded CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/03/16 19:40:19 [INFO] signed certificate with serial number 648194491978037048405922455454162128168023396626</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看生成的证书以及申请文件 （后三个新生成）</span></span><br><span class=\"line\">ls</span><br><span class=\"line\">ca-config.json devopsuser-csr.json  devopsuser.csr   devopsuser-key.pem  devopsuser.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书到期时间</span></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> devopsuser.pem -noout -text  | grep -E <span class=\"string\">'Not'</span></span><br><span class=\"line\">  Not Before: Mar 16 11:35:00 2022 GMT</span><br><span class=\"line\">  Not After : Mar 13 11:35:00 2032 GMT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建用户证书存放目录创建并将生成的证书密钥与证书复制到该目录中。</span></span><br><span class=\"line\">mkdir -vp /etc/kubernetes/pki/user/</span><br><span class=\"line\">cp -a devopsuser*.pem /etc/kubernetes/pki/user/</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 05.查看本地或者远程集群的API_SERVER地址,并将其写入到devopsuser.kubeconfig文件之中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl cluster-info  | grep <span class=\"string\">\"control plan\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Kubernetes control plane is running at https://slb-vip.k8s:16443</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置集群参数写入到devopsuser.kubeconfig文件中</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">\"https://slb-vip.k8s:16443\"</span></span><br><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/etc/kubernetes/pki/ca.crt \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\"><span class=\"comment\"># Cluster \"kubernetes\" set.</span></span><br></pre></td></tr></table></figure><br><br/></p>\n<p>步骤 06.为devopsuser用户创建一个devops-ctx上下文，并指定名称空间为devtest（在此上下文中在有rbac权限的情况下，只能操作该空间下的资源）并将配置写入到devopsuser.kubeconfig中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-context devopsuser-ctx --cluster=kubernetes --user=devopsuser --namespace=devtest --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\">  <span class=\"comment\"># Context \"devopsuser-ctx\" created.</span></span><br></pre></td></tr></table></figure><br><br/></p>\n<p>步骤 07.在kubeconfig中设置devopsuser用户条目客户端参数,并将配置写入到devopsuser.kubeconfig中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-credentials devopsuser --cluster=kubernetes \\</span><br><span class=\"line\">  --client-certificate=/etc/kubernetes/pki/user/devopsuser.pem  \\</span><br><span class=\"line\">  --client-key=/etc/kubernetes/pki/user/devopsuser-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\">  <span class=\"comment\"># User \"devopsuser\" set.</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 08.查看生成的devopsuser.kubeconfig文件.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat devopsuser.kubeconfig</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">clusters:</span><br><span class=\"line\">- cluster:</span><br><span class=\"line\">    certificate-authority-data: [api-server CA证书-base64编码]</span><br><span class=\"line\">    server: https://slb-vip.k8s:16443  <span class=\"comment\"># API Server 地址</span></span><br><span class=\"line\">  name: kubernetes</span><br><span class=\"line\">contexts:</span><br><span class=\"line\">- context:               </span><br><span class=\"line\">    cluster: kubernetes  <span class=\"comment\"># 集群名称</span></span><br><span class=\"line\">    namespace: devtest   <span class=\"comment\"># 名称空间 </span></span><br><span class=\"line\">    user: devopsuser     <span class=\"comment\"># 此上下文中的用户</span></span><br><span class=\"line\">  name: devopsuser-ctx   <span class=\"comment\"># 上下文名称</span></span><br><span class=\"line\">current-context: <span class=\"string\">\"\"</span></span><br><span class=\"line\">kind: Config</span><br><span class=\"line\">preferences: &#123;&#125;</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: devopsuser       <span class=\"comment\"># 创建的用户，认证方式为CA签名的证书。</span></span><br><span class=\"line\">  user:</span><br><span class=\"line\">    client-certificate-data: [客户端证书-base64编码]</span><br><span class=\"line\">    client-key-data: [客户端密钥-base64编码]</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 09.RoleBinding 角色绑定,为<code>devopsuser</code>用户创建<code>role</code>和<code>rolebinding</code>,利用rbac进行资源访问操作权限的管控。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.命令行方式（一步到位）,生产环境中间建议为指定用户划分需要资源的权限。</span></span><br><span class=\"line\">kubectl create rolebinding devopsuser-admin --clusterrole=admin --user=devopsuser --namespace=devtest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.资源清单方式</span></span><br><span class=\"line\"><span class=\"comment\"># Role 名称：devtest-role</span></span><br><span class=\"line\"><span class=\"comment\"># RoleBinding 名称：devopsuser-admin</span></span><br><span class=\"line\">tee devopsuser-rolebinding.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: Role</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: devtest-role</span><br><span class=\"line\">  namespace: devtest</span><br><span class=\"line\">rules:</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - <span class=\"string\">\"\"</span></span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - pods</span><br><span class=\"line\">  - pods/attach</span><br><span class=\"line\">  - pods/<span class=\"built_in\">exec</span></span><br><span class=\"line\">  - pods/portforward</span><br><span class=\"line\">  - pods/proxy</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - <span class=\"string\">\"\"</span></span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - configmaps</span><br><span class=\"line\">  - endpoints</span><br><span class=\"line\">  - persistentvolumeclaims</span><br><span class=\"line\">  - replicationcontrollers</span><br><span class=\"line\">  - replicationcontrollers/scale</span><br><span class=\"line\">  - secrets</span><br><span class=\"line\">  - serviceaccounts</span><br><span class=\"line\">  - services</span><br><span class=\"line\">  - services/proxy</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - <span class=\"string\">\"\"</span></span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - bindings</span><br><span class=\"line\">  - events</span><br><span class=\"line\">  - limitranges</span><br><span class=\"line\">  - pods/<span class=\"built_in\">log</span></span><br><span class=\"line\">  - pods/status</span><br><span class=\"line\">  - replicationcontrollers/status</span><br><span class=\"line\">  - resourcequotas</span><br><span class=\"line\">  - resourcequotas/status</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - <span class=\"string\">\"\"</span></span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - serviceaccounts</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - impersonate</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - apps</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - deployments</span><br><span class=\"line\">  - deployments/rollback</span><br><span class=\"line\">  - deployments/scale</span><br><span class=\"line\">  - statefulsets</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - autoscaling</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - horizontalpodautoscalers</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - batch</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - cronjobs</span><br><span class=\"line\">  - <span class=\"built_in\">jobs</span></span><br><span class=\"line\">  - scheduledjobs</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - extensions</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - daemonsets</span><br><span class=\"line\">  - deployments</span><br><span class=\"line\">  - deployments/rollback</span><br><span class=\"line\">  - deployments/scale</span><br><span class=\"line\">  - ingresses</span><br><span class=\"line\">  - replicasets</span><br><span class=\"line\">  - replicasets/scale</span><br><span class=\"line\">  - replicationcontrollers/scale</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">  - delete</span><br><span class=\"line\">  - deletecollection</span><br><span class=\"line\">  - get</span><br><span class=\"line\">  - list</span><br><span class=\"line\">  - patch</span><br><span class=\"line\">  - update</span><br><span class=\"line\">  - watch</span><br><span class=\"line\">- apiGroups:</span><br><span class=\"line\">  - authorization.k8s.io</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">  - localsubjectaccessreviews</span><br><span class=\"line\">  verbs:</span><br><span class=\"line\">  - create</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># roleRef 角色来源为 devtest-role</span></span><br><span class=\"line\"><span class=\"comment\"># subjects 赋予角色给 devopsuser 用户</span></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: RoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: devopsuser-admin</span><br><span class=\"line\">  namespace: devtest</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: Role</span><br><span class=\"line\">  name: devtest-role</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: User</span><br><span class=\"line\">  name: devopsuser</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f devopsuser-rolebinding.yaml</span><br><span class=\"line\">  <span class=\"comment\"># role.rbac.authorization.k8s.io/devtest-role unchanged</span></span><br><span class=\"line\">  <span class=\"comment\"># rolebinding.rbac.authorization.k8s.io/devopsuser-admin created</span></span><br></pre></td></tr></table></figure><br><br/></p>\n<p>步骤 10.指定devopsuser用的kubeconfig并切换用户上下文。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换用户上下文</span></span><br><span class=\"line\">kubectl config use-context devopsuser-ctx --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\"><span class=\"comment\"># Switched to context \"devopsuser-ctx\".</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前上下文</span></span><br><span class=\"line\">kubectl config current-context --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\"><span class=\"comment\"># devopsuser-ctx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前上下文中的用户</span></span><br><span class=\"line\">kubectl config get-users --kubeconfig=/root/.kube/devopsuser.kubeconfig</span><br><span class=\"line\">  <span class=\"comment\"># NAME</span></span><br><span class=\"line\">  <span class=\"comment\"># devopsuser</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 11.验证创建devopsuser用户的权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 无权限查看节点以及操作其它名称空间的资源</span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devopsuser.kubeconfig get node</span><br><span class=\"line\">  <span class=\"comment\"># Error from server (Forbidden): nodes is forbidden: User \"devopsuser\" cannot list resource \"nodes\" in API group \"\" at the cluster scope</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个pod</span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devopsuser.kubeconfig run nginx --image=nginx:latest --namespace devtest --labels=<span class=\"string\">\"app=nginx\"</span> --port=8080</span><br><span class=\"line\"><span class=\"comment\"># pod/nginx created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看Pod运行状态</span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devopsuser.kubeconfig get pod -n devtest</span><br><span class=\"line\">  <span class=\"comment\"># NAME    READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx   1/1     Running   0          37s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保留Pod服务 </span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devopsuser.kubeconfig expose pod nginx -n devtest --port=8080 --name=nginx-frontend</span><br><span class=\"line\">  <span class=\"comment\"># service/nginx-frontend exposed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看服务</span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devopsuser.kubeconfig get pod -n devtest -l app=nginx -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME    READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx   1/1     Running   0          3h29m   10.66.182.255   weiyigeek-226   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>至此完毕!</p>\n<p><br/></p>\n<h3 id=\"2-外部集群创建指定用户管理集群\"><a href=\"#2-外部集群创建指定用户管理集群\" class=\"headerlink\" title=\"2.外部集群创建指定用户管理集群\"></a>2.外部集群创建指定用户管理集群</h3><p>描述: 在本地集群接入外部集群时我们需要获得其api-server地址(注意如果没有域名解析请做硬解析)，以及ca证书, 此处同样以访问devtes名称空间为例。</p>\n<p>步骤 01.外部集群信息及其CA证获取。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 远程集群中执行如下命令查看集群相关</span></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">  <span class=\"comment\"># Kubernetes control plane is running at https://apiserver.cluster.weiyigeek:6443</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ping apiserver.cluster.weiyigeek</span><br><span class=\"line\">  <span class=\"comment\"># PING apiserver.cluster.weiyigeek (192.168.12.102) 56(84) bytes of data.</span></span><br><span class=\"line\">  <span class=\"comment\"># 64 bytes from weiyigeek-102 (192.168.12.102): icmp_seq=1 ttl=64 time=0.134 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置硬解析</span></span><br><span class=\"line\">sudo tee -a /etc/hosts &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">192.168.12.102 apiserver.cluster.weiyigeek </span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将外部集群ca证书将其复制到现有机器上</span></span><br><span class=\"line\">ls /etc/kubernetes/pki/ca.crt &amp;&amp; cat /etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">cat &gt; cluster.prod.ca.crt &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">[上面显示的 base64 编码]</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤02.在本地集群中利用<code>kubectl config set-cluster</code>命令设置远程集群。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_APISERVER=<span class=\"string\">\"https://apiserver.cluster.weiyigeek:6443\"</span></span><br><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-cluster k8s-cluster \\</span><br><span class=\"line\">  --certificate-authority=./cluster.prod.ca.crt \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=/root/.kube/devops.kubeconfig</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤03.在本地集群中利用 kubectl confi set-context 命令设置上下文。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-context devops-ctx \\</span><br><span class=\"line\">  --cluster=k8s-cluster \\</span><br><span class=\"line\">  --user=devops \\</span><br><span class=\"line\">  --namespace=devtest \\</span><br><span class=\"line\">  --kubeconfig=/root/.kube/devops.kubeconfig</span><br><span class=\"line\"><span class=\"comment\"># Context \"devopsuser-ctx\" created.</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤04.在本地集群中,同样利用cfssl工具生成devops用户证书<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 证书相关配置文件</span></span><br><span class=\"line\">$ tee ca-config.json &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"signing\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"default\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"profiles\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"usages\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ tee devops-csr.json &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"devops\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书生成</span></span><br><span class=\"line\">tee cluster.prod.ca.key &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">-----BEGIN RSA PRIVATE KEY-----</span><br><span class=\"line\">[远程集群 ca 私钥 base64 编码 ]</span><br><span class=\"line\">-----END RSA PRIVATE KEY-----</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书生成</span></span><br><span class=\"line\">cfssl gencert -ca=./cluster.prod.ca.crt -ca-key=./cluster.prod.ca.key -config ./ca-config.json -profile=kubernetes ./devops-csr.json | cfssljson -bare devops</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将生成的证书以及密钥复制到/etc/kubernetes/pki/user目录中</span></span><br><span class=\"line\">sudo cp devops*.pem /etc/kubernetes/pki/user</span><br></pre></td></tr></table></figure></p>\n<p>步骤 05.在本地集群中利用 <code>kubectl confi set-credentials</code> 命令设置devops用户, 注意集群、上下文以及用户认证拼接都是写入到<code>/root/.kube/devops.kubeconfig</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config <span class=\"built_in\">set</span>-credentials devops \\</span><br><span class=\"line\">  --cluster=k8s-cluster \\</span><br><span class=\"line\">  --client-certificate=/etc/kubernetes/pki/user/devops.pem  \\</span><br><span class=\"line\">  --client-key=/etc/kubernetes/pki/user/devops-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=/root/.kube/devops.kubeconfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换上下文为devops-ctx</span></span><br><span class=\"line\">kubectl config use-context devops-ctx --kubeconfig=/root/.kube/devops.kubeconfig</span><br><span class=\"line\">  <span class=\"comment\"># Switched to context \"devops-ctx\".</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前上下文</span></span><br><span class=\"line\">kubectl config current-context --kubeconfig=/root/.kube/devops.kubeconfig</span><br><span class=\"line\">  <span class=\"comment\"># devops-ctx</span></span><br></pre></td></tr></table></figure></p>\n<p>步骤 06.在远端集群中执行如下命令给devops用户绑定指定名称空间中(devtest)拥有的角色及其赋予的权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create rolebinding devops --clusterrole=admin --user=devops --namespace=devtest </span><br><span class=\"line\">kubectl get rolebindings.rbac.authorization.k8s.io -n devtest                         </span><br><span class=\"line\">  <span class=\"comment\"># NAME     ROLE                AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># devops   ClusterRole/admin   2s</span></span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 上面为了演示采用了kubernetes默认的admin角色,在实践环境中建议自己按照所需权限创建role然后再绑定给指定用户。</p>\n<p>步骤 07.在本地集群中使用–kubeconfig指定前面生成集群连接配置，访问远端集群中devtest名称空间下的资源, 如果访问其它名称空间的资源是没有权限的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl --kubeconfig=/root/.kube/devops.kubeconfig get pod -n devtest</span><br><span class=\"line\">  <span class=\"comment\"># NAME             READY   STATUS    RESTARTS         AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># oa-dev-0         1/1     Running   24 (2d17h ago)   16d</span></span><br><span class=\"line\">  <span class=\"comment\"># redis-single-0   1/1     Running   0                47d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非 devtest 名称空间下的 资源是无权限的。</span></span><br><span class=\"line\">kubectl --kubeconfig=/root/.kube/devops.kubeconfig get pod -n devops</span><br><span class=\"line\"><span class=\"comment\"># Error from server (Forbidden): pods is forbidden: User \"devops\" cannot list resource \"pods\" in API group \"\" in the namespace \"devops\"</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x04-Kubernetes-中拉取内部私有仓库镜像的-ImagePullSecret-创建使用\"><a href=\"#0x04-Kubernetes-中拉取内部私有仓库镜像的-ImagePullSecret-创建使用\" class=\"headerlink\" title=\"0x04 Kubernetes 中拉取内部私有仓库镜像的 ImagePullSecret 创建使用\"></a>0x04 Kubernetes 中拉取内部私有仓库镜像的 ImagePullSecret 创建使用</h2><p>描述: 本小节记录了使用 Secret 从私有的镜像仓库或代码仓库拉取镜像来创建 Pod, 实际上是通过 imagePullSecret 资源将 Secret 提供的密码传递给 kubelet 从而在拉取镜像前完成必要的认证过程, 或者通过映射到ServiceAccount对象中然后在使用该SA对象创建出的Pod也同样拥有拉取镜像的权限。</p>\n<p><br/></p>\n<p><strong>方式1.docker-registry 方式来创建 secret</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用kubectl命令创建密钥</span></span><br><span class=\"line\">kubectl create secret docker-registry myregistrykey \\</span><br><span class=\"line\">  --docker-server=harbor.weiyigeek.top \\</span><br><span class=\"line\">  --docker-username=weiyigeek \\</span><br><span class=\"line\">  --docker-password=Harbor12345 \\</span><br><span class=\"line\">  --docker-email=master@weiyigeek.top \\</span><br><span class=\"line\">  --namespace app</span><br></pre></td></tr></table></figure>\n<p><strong>方式2.通过 docker 凭证文件来创建 secret</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过docker login登录，本地生成凭证配置文件 ~/.docker/config.json</span></span><br><span class=\"line\">docker login -uweiyigeek -pHarbor12345 harbor.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于该凭证文件创建secret</span></span><br><span class=\"line\">kubectl create secret generic myregistrykey \\</span><br><span class=\"line\">  --from-file=.dockerconfigjson=/root/.docker/config.json \\</span><br><span class=\"line\">  --<span class=\"built_in\">type</span>=kubernetes.io/dockerconfigjson \\</span><br><span class=\"line\">  --namespace app</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 此种方式的好处是如果有多个镜像仓库,都会先存在一个config.json文件中然后通过命令打入Secret, 如果有多个私有仓库都可以进行拉取。</p>\n<p><br/></p>\n<p><strong>扩展知识.将上述镜像拉取 Secret 添加到 ServicesAcount 利用 sa 进行私有镜像拉取</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此处修改default命名空间的服务帐户，以将该 Secret 用作 imagePullSecret。</span></span><br><span class=\"line\">kubectl patch serviceaccount default -p <span class=\"string\">'&#123;\"imagePullSecrets\": [&#123;\"name\": \"myregistrykey\"&#125;]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 你也可以使用 kubectl edit，或者如下所示手动编辑 YAML 清单，打开 sa.yaml 文件，删除带有键名 resourceVersion 的行，添加带有 imagePullSecrets: 的行，最后保存文件。</span></span><br><span class=\"line\">$ kubectl get serviceaccounts default -o yaml &gt; ./sa.yaml</span><br><span class=\"line\">$ vim sa.yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  creationTimestamp: 2015-08-07T22:02:39Z</span><br><span class=\"line\">  name: default</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">  uid: 052fb0f4-3d50-11e5-b066-42010af0d7b6</span><br><span class=\"line\">secrets:</span><br><span class=\"line\">- name: default-token-uudge</span><br><span class=\"line\">imagePullSecrets:</span><br><span class=\"line\">- name: myregistrykey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后，用新的更新的 sa.yaml 文件替换服务账号。</span></span><br><span class=\"line\">kubectl replace serviceaccount default -f ./sa.yaml</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>dockerconfigjson 示例:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 查看类型为 kubernetes.io/dockerconfigjson 的 myregistrykey secret</span></span><br><span class=\"line\">$ kubectl get secret myregistrykey -o yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: myregistrykey</span><br><span class=\"line\">  namespace: app</span><br><span class=\"line\">data:</span><br><span class=\"line\">  .dockerconfigjson: UmVhbGx5IHJlYWxseSByZWVlZWVlZWVlZWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx5eXl5eXl5eXl5eXl5eXl5eXl5eSBsbGxsbGxsbGxsbGxsbG9vb29vb29vb29vb29vb29vb29vb29vb29vb25ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubmdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2cgYXV0aCBrZXlzCg==</span><br><span class=\"line\"><span class=\"built_in\">type</span>: kubernetes.io/dockerconfigjson</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) .dockerconfigjson 字段的值是 Docker 凭证的 base64 表示, 我们可以将 Secret 数据转换为可读格式。</span></span><br><span class=\"line\">kubectl get secret myregistrykey --output=<span class=\"string\">\"jsonpath=&#123;.data.\\.dockerconfigjson&#125;\"</span> | base64 --decode</span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"auths\":&#123;\"yourprivateregistry.com\":&#123;\"username\":\"weiyigeek\",\"password\":\"xxxxxxxxxxx\",\"email\":\"master@weiyigeek.top\",\"auth\":\"c3R...zE2\"&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>温馨提示: 我们也可手动对秘钥文件进行 base64 加密 , 例如 <code>cat ~/.docker/config.json |base64 -w 0</code> 其值还是与<code>UmVhbG...ZXlzCg==</code>一致。</p>\n<p><br/></p>\n<p><strong>使用示例</strong></p>\n<p>描述: 使用 imagePullSecrets 字段指定名称空间下私有仓库凭据(<code>myregistrykey</code>)进行内部镜像(<code>harbor.weiyigeek.top/private/app:latest</code>)拉取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee private-reg.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: foo</span><br><span class=\"line\">  namespace: app</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">    - name: foo</span><br><span class=\"line\">      image: harbor.weiyigeek.top/private/app:latest</span><br><span class=\"line\">      <span class=\"built_in\">command</span>:</span><br><span class=\"line\">      - sh</span><br><span class=\"line\">      - -c</span><br><span class=\"line\">      - <span class=\"string\">\"sleep 160\"</span></span><br><span class=\"line\">  imagePullSecrets:</span><br><span class=\"line\">    - name: myregistrykey</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取部署私有镜像容器</span></span><br><span class=\"line\">kubectl apply -f private-reg.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -n app foo</span><br><span class=\"line\">  <span class=\"comment\"># NAME   READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># foo    1/1     Running   0          14s</span></span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"k8s","path":"api/tags/k8s.json"}]}