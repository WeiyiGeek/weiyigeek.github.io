{"title":"9.Jenkins实践之连接外部Docker部署的分布式Agent工作节点","slug":"系统运维/自动化运维/CI-CD/Jenkins/9.Jenkins实践之连接使用Docker部署的分布式Agent工作节点-cost","date":"2023-01-31T05:34:30.000Z","updated":"2023-03-13T01:57:03.014Z","url":"2023/1-31-710.html","path":"api/articles/2023/1-31-710.html.json","covers":["https://img.weiyigeek.top/2023/1/20230207170309.png","https://img.weiyigeek.top/2023/1/20230202172521.png","https://img.weiyigeek.top/2023/1/20230202154237.png","https://img.weiyigeek.top/2023/1/20230206171800.png","https://img.weiyigeek.top/2023/1/20230202145941.png","https://img.weiyigeek.top/2023/1/20230202150507.png","https://img.weiyigeek.top/2023/1/20230206171322.png","https://img.weiyigeek.top/2023/1/20230206171109.png","https://img.weiyigeek.top/2023/1/20230206173815.png","https://img.weiyigeek.top/2023/1/20230206174336.png","https://img.weiyigeek.top/2023/1/20230207093031.png","https://img.weiyigeek.top/2023/1/20230207170309.png","https://img.weiyigeek.top/2023/1/20230207093625.png","https://img.weiyigeek.top/2023/1/20230207094227.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>看过我前面Jenkins学习之路的朋友肯定知道，在Kubenetes中使用Jenkins可以进行动态生成分布式jnlp-slave的agent节点，相比于传统的agent节点来说极大的节约资源。</p>\n<p>但是某一天开发反馈某个项目CICD无法正常进行，作为运维人员（搬砖）立马进入K8S集群，排除安装在集群中的Jenkins的异常问题，排查可知由于K8S集群证书到期导致动态jenkins agent节点无法正常被创建，此时项目又比较紧急。</p>\n<p>遂利用装有Docker的机器，立即使用自行构建的jenkins-jnlp-agent镜像，并在 jenkins 中创建一个固定节点，通过docker运行该镜像并连接到Jenkins，在流水线项目绑定到该节点执行，通过几分钟的时间就快速解决了jenkins agent问题，在项目完成持续集成和交互后，趁着间隙更新Jenkins上配置连接kubernetes apiserver的证书，恢复了动态生成agent节点。</p>\n<p>所以，为了便于自己总结知识，以及有相同需求的看友，遂将jenkins外部agent节点接入以及自行构建jnlp-agent镜像流程进行实践，希望能帮助到大家。</p>\n<p>如果此篇文章对你有用，请您也转发、点赞、在看、给周边的朋友吧!</p>\n<p>温馨提示: 若需要企业 Jenkins Pipeline 流水线脚本的朋友，可以关注【WeiyiGeek】后回复【Jenkins流水线代码】即可下载 <code>Jenkins-Pipeline.groovy</code> 示例文件。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230207170309.png\" alt=\"WeiyiGeek.Jenkins流水线代码图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Jenkins流水线代码图</p>\n            </figure>\n<hr>\n<h2 id=\"0x01-基础环境准备\"><a href=\"#0x01-基础环境准备\" class=\"headerlink\" title=\"0x01 基础环境准备\"></a>0x01 基础环境准备</h2><h3 id=\"1-环境说明\"><a href=\"#1-环境说明\" class=\"headerlink\" title=\"1.环境说明\"></a>1.环境说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.K8s 集群中安装的 Jenkins </span></span><br><span class=\"line\">~$ kubectl get pod,svc -n devops -l app=jenkins</span><br><span class=\"line\">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/jenkins-7fc6f4fcf6-glqxj   1/1     Running   0          28h</span><br><span class=\"line\"></span><br><span class=\"line\">NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                          AGE</span><br><span class=\"line\">service/jenkins   NodePort   10.109.163.223   &lt;none&gt;        8080:30001/TCP,50000:30634/TCP   382d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.Jenkins 安装版本</span></span><br><span class=\"line\">Jenkins 2.330</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.地址说明</span></span><br><span class=\"line\">Jenkins 面板: http://192.168.12.107:30001/</span><br><span class=\"line\">TCP port <span class=\"keyword\">for</span> inbound agents(Agent 端口): http://192.168.12.107:30634/  ( 内部为 50000，若是在集群中使用则需要将nodePort端口改成，可通过转发的形式 因为K8S默认nodePort范围在 30000-32767 之中)</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 我们需要修改 Jenkins Agent 端口 可以访问 Dashboard 全局安全配置 -&gt; 代理 (TCP port for inbound agents) 指定端口设置为 30634，注意相对应Pod暴露的端口也要一同修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit deployments.apps -n devops jenkins</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - containerPort: 8080</span><br><span class=\"line\">    name: web</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">  - containerPort: 30634  <span class=\"comment\"># 修改点</span></span><br><span class=\"line\">    name: agent</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl edit svc -n devops jenkins</span><br><span class=\"line\">  - name: agent</span><br><span class=\"line\">    nodePort: 30634    </span><br><span class=\"line\">    port: 30634        <span class=\"comment\"># 修改点与 containerPort 要一致。</span></span><br><span class=\"line\">    protocol: TCP:q</span><br><span class=\"line\">    targetPort: agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证查看 Pod 与 服务是否正常</span></span><br><span class=\"line\">$ kubectl get svc,pod -n devops -l app=jenkins</span><br><span class=\"line\">  NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                          AGE</span><br><span class=\"line\">  service/jenkins   NodePort   10.109.163.223   &lt;none&gt;        8080:30001/TCP,30634:30634/TCP   382d</span><br><span class=\"line\">  </span><br><span class=\"line\">  NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">  pod/jenkins-856bc9b47f-4t7k5   1/1     Running   0          2m9s</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230202172521.png\" alt=\"WeiyiGeek.Jenkins-inbound agents端口修改图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Jenkins-inbound agents端口修改图</p>\n            </figure>\n<p>或者采用如下临时解决办法（下面实践1中采用的是此种方法，正式环境下还是建议使用上面的方法稳定，但是需要更改和注意的事项更多了）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n devops port-forward --address 127.0.0.1,192.168.12.107 jenkins-7fc6f4fcf6-glqxj 50000:50000</span><br><span class=\"line\">  <span class=\"comment\"># Forwarding from 127.0.0.1:50000 -&gt; 50000</span></span><br><span class=\"line\">  <span class=\"comment\"># Forwarding from 192.168.12.107:50000 -&gt; 50000</span></span><br><span class=\"line\">  <span class=\"comment\"># Handling connection for 50000</span></span><br><span class=\"line\">  <span class=\"comment\"># Handling connection for 50000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者在 jenkins 控制器资源清单中设置 hostNetwork: true</span></span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 若看友不了解Jenkins持续集成的，或者需要安装实践的，可以参考博主学习【Jenkins学习之路汇总】汇总，关注 <code>WeiyiGeek</code> 公众号回复【<code>jenkins学习之路</code>】即可获得学习资料：</p>\n<p><br/></p>\n<h3 id=\"2-添加新的Jenkins-agent节点\"><a href=\"#2-添加新的Jenkins-agent节点\" class=\"headerlink\" title=\"2.添加新的Jenkins agent节点\"></a>2.添加新的Jenkins agent节点</h3><p>操作步骤如下: Dashboard 系统管理 -&gt; 节点管理 -&gt; 新建节点 -&gt; 按照提示输入如下信息 -&gt; 最后点击保存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础配置</span></span><br><span class=\"line\">节点名字: docker-jenkins-jnlp</span><br><span class=\"line\">Number of executors (最大执行数): 1~5 </span><br><span class=\"line\">远程工作目录: /home/jenkins/agent</span><br><span class=\"line\">标签: docker-jnlp-1</span><br><span class=\"line\">启动方式: 通过 Java Web 启动代理</span><br><span class=\"line\">可用性: 尽量保持代理在线</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 节点属性</span></span><br><span class=\"line\">- 工具位置: 请按照实际情况填写。 </span><br><span class=\"line\">  <span class=\"comment\"># 例如, Docker 配置，名称 Docker ，目录 /var/run/docker.sock</span></span><br><span class=\"line\">- 环境变量:</span><br><span class=\"line\">  <span class=\"comment\"># 例如，键值对列表，键 name 值 weiyigeek</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230202154237.png\" alt=\"WeiyiGeek.新建Docker-agent节点图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.新建Docker-agent节点图</p>\n            </figure>\n<p>温馨提示: 在点击保存后，我们可以点击此节点，看到其提示节点连接Jenkins的方式如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\">java -jar agent.jar -jnlpUrl http://192.168.12.107:30001/computer/docker%2Djenkins%2Djnlp/jenkins-agent.jnlp -secret b97b9d1e0cf083f9da5721caa6ebc63f6fe648375bd90cb2c2f484681d887bb7 -workDir <span class=\"string\">\"/home/jenkins/agent\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">java -Xms512m -Xmx1g -Xss1m  -jar /usr/<span class=\"built_in\">local</span>/bin/agent.jar -jnlpUrl http://192.168.12.107:30001/computer/jenkinsAgentWork1/jenkins-agent.jnlp  -secret 2a789bbbd0193ef576e7b62eb2d205d1d024d0ea7b14f6f79f1cccdd6fb1ed20 -workDir <span class=\"string\">\"/home/jenkins/agent\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\"><span class=\"comment\"># Run from agent command line, with the secret stored in a file:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> b97b9d1e0cf083f9da5721caa6ebc63f6fe648375bd90cb2c2f484681d887bb7 &gt; secret-file</span><br><span class=\"line\">java -jar agent.jar -jnlpUrl http://192.168.12.107:30001/computer/docker%2Djenkins%2Djnlp/jenkins-agent.jnlp -secret @secret-file -workDir <span class=\"string\">\"/home/jenkins/agent\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230206171800.png\" alt=\"WeiyiGeek.节点连接Jenkins的方式图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.节点连接Jenkins的方式图</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"3-自行构建Jenkins-Agent镜像-干货\"><a href=\"#3-自行构建Jenkins-Agent镜像-干货\" class=\"headerlink\" title=\"3.自行构建Jenkins Agent镜像(干货)\"></a>3.自行构建Jenkins Agent镜像(干货)</h3><p>描述: 在<code>WeiyiGeek</code>微信公众号回复<code>20230206</code>关键字，即可获取最新Jenkins-jnlp镜像构建的Dockerfile及下述相关脚本文件，此处我们自定义的jnlp容器镜像主要实现功能如下: </p>\n<ul>\n<li>用户权限控制(sudo)</li>\n<li>ssh 远程连接</li>\n<li>git 代码版本控制</li>\n<li>docker 容器管理</li>\n<li>kubectl 集群管理</li>\n<li>Java 运行环境</li>\n<li>Maven 运行环境</li>\n<li>NodeJS 环境</li>\n<li>SonarQube 扫描环境</li>\n<li>Gitlab-Release 上传环境</li>\n<li>中文环境支持</li>\n<li>时区更改配置</li>\n<li>自定义工作目录（/home/jenkins/agent）</li>\n</ul>\n<p>温馨提示: 如下操作构建依赖于Docker环境,若你没有安装Docker环境或者不了解的Docker容器的朋友，可以参考博主学习【Docker的系列笔记】汇总，关注 <code>WeiyiGeek</code> 公众号回复【<code>Docker容器学习之路汇总</code>】即可获得学习资料：</p>\n<p><br/></p>\n<p><strong>构建目录</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/k8s/jenkins/jnlp-slave$ tree .</span><br><span class=\"line\">.</span><br><span class=\"line\">├── agent.jar  <span class=\"comment\"># Jenkins -&gt; 2.330</span></span><br><span class=\"line\">├── agent.jar.bak</span><br><span class=\"line\">├── apache-maven-3.8.4-bin.tar.gz</span><br><span class=\"line\">├── build</span><br><span class=\"line\">│   └── Dockerfile</span><br><span class=\"line\">├── docker</span><br><span class=\"line\">├── glibc-2.32-r0.apk</span><br><span class=\"line\">├── glibc-bin-2.32-r0.apk</span><br><span class=\"line\">├── glibc-i18n-2.32-r0.apk</span><br><span class=\"line\">├── jdk-8u281-linux-x64.tar.gz</span><br><span class=\"line\">├── jenkins-agent.sh</span><br><span class=\"line\">├── kubectl</span><br><span class=\"line\">├── locale.md</span><br><span class=\"line\">├── release-cli-0.10.0-linux-amd64</span><br><span class=\"line\">├── remoting-4.11.2.jar</span><br><span class=\"line\">├── sgerrand.rsa.pub</span><br><span class=\"line\">└── sonar-scanner-cli-4.5.0.2216-linux.zip</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 16 files</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示:  在Jenkins 2.330版本中添加一个新的节点, 即可获取匹配当前版本的 agent.jar (<a href=\"http://youjenkins-domainname-or-ip/jnlpJars/agent.jar)\" target=\"_blank\" rel=\"noopener\">http://youjenkins-domainname-or-ip/jnlpJars/agent.jar)</a>, 或者是在 jenkins 官网 <a href=\"https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting\" target=\"_blank\" rel=\"noopener\">https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting</a> 进行下载;</p>\n<p><br/></p>\n<p><strong>自定义jnlp镜像的 Dockerfile</strong><br>博主自定义jnlp镜像hub地址: <a href=\"https://hub.docker.com/r/weiyigeek/alpine-jenkins-jnlp\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/weiyigeek/alpine-jenkins-jnlp</a> 。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat build/Dockerfile</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------------------------------------------#</span></span><br><span class=\"line\"><span class=\"comment\"># Title: Base in Alpine Images Create Custom Jenkins Kubernetes jnlp Images</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># WebSite: https://weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># Email: mastr@weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># Version: v1.12</span></span><br><span class=\"line\"><span class=\"comment\"># Image Version: alpine-3.13.1</span></span><br><span class=\"line\"><span class=\"comment\"># MainFunction:</span></span><br><span class=\"line\"><span class=\"comment\">#   Install ssh-server docker git openssh tzdata curl tar sudo git ca-certificates wget unzip docker zlib nodejs npm jq</span></span><br><span class=\"line\"><span class=\"comment\">#   Install JDK8 Version: 1.8.0_281</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://github.com/sgerrand/alpine-pkg-glibc/releases/</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub</span></span><br><span class=\"line\"><span class=\"comment\">#   Install jnlp Version: 4.11.2 (两种方式都可以下载agent)</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/</span></span><br><span class=\"line\"><span class=\"comment\">#   - http://youjenkins-domainname/jnlpJars/agent.jar</span></span><br><span class=\"line\"><span class=\"comment\">#   Install Maven Version: 3.8.4</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://apache.osuosl.org/maven/maven-3/$&#123;MAVEN_VERSION&#125;/binaries</span></span><br><span class=\"line\"><span class=\"comment\">#   Install SonarqubeScan Version: 4.5.0</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216-linux.zip</span></span><br><span class=\"line\"><span class=\"comment\">#   Install Gitlab Release Version: 0.10.0</span></span><br><span class=\"line\"><span class=\"comment\">#   - https://gitlab.com/gitlab-org/release-cli/-/releases</span></span><br><span class=\"line\"><span class=\"comment\">#   Install kubernetes cli</span></span><br><span class=\"line\"><span class=\"comment\">#   - kubectl Version: 1.23.1</span></span><br><span class=\"line\"><span class=\"comment\">#   Install docker cli</span></span><br><span class=\"line\"><span class=\"comment\">#   - kubectl Version: 20.10.3</span></span><br><span class=\"line\"><span class=\"comment\"># ChangeLog:</span></span><br><span class=\"line\"><span class=\"comment\"># v1.8  - 增加 docker</span></span><br><span class=\"line\"><span class=\"comment\"># v1.9  - 增加 中文环境</span></span><br><span class=\"line\"><span class=\"comment\"># v1.10 - 增加 node.js 环境支持</span></span><br><span class=\"line\"><span class=\"comment\"># v1.11 - 更新依赖软件版本及其agent.jar版本</span></span><br><span class=\"line\"><span class=\"comment\">#-------------------------------------------------#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine:<span class=\"number\">3.13</span>.<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span>  Jenkins Custom Work Node Jnlp Container - &lt;master@weiyigeek.top&gt; - WeiyiGeek</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> USERNAME=jenkins \\</span><br><span class=\"line\">    AGENT_WORKDIR=/home/jenkins \\</span><br><span class=\"line\">    BASE_DIR=/usr/local  \\</span><br><span class=\"line\">    BASE_BIN=/usr/local/bin  \\</span><br><span class=\"line\">    BASE_URL=http://<span class=\"number\">192.168</span>.<span class=\"number\">12.107</span>:<span class=\"number\">8080</span>  \\</span><br><span class=\"line\">    LOCALE=locale.md \\</span><br><span class=\"line\">    JDK_NAME=jdk-<span class=\"number\">8</span>u281-linux-x64   \\</span><br><span class=\"line\">    JDK_DIR=/usr/local/jdk1.<span class=\"number\">8.0</span>_281  \\</span><br><span class=\"line\">    GLIBC_NAME=glibc-<span class=\"number\">2.32</span>-r0.apk \\</span><br><span class=\"line\">    GLIBC_BIN_NAME=glibc-bin-<span class=\"number\">2.32</span>-r0.apk \\</span><br><span class=\"line\">    GLIBC_I18N_NAME=glibc-i18n-<span class=\"number\">2.32</span>-r0.apk \\</span><br><span class=\"line\">    MAVEN_NAME=apache-maven-<span class=\"number\">3.8</span>.<span class=\"number\">4</span>-bin \\</span><br><span class=\"line\">    MAVEN_DIR=/usr/local/apache-maven-<span class=\"number\">3.8</span>.<span class=\"number\">4</span> \\</span><br><span class=\"line\">    SONAR_SCANNER_NAME=sonar-scanner-cli-<span class=\"number\">4.5</span>.<span class=\"number\">0.2216</span>-linux \\</span><br><span class=\"line\">    SONAR_SCANNER_DIR=/usr/local/sonar-scanner-<span class=\"number\">4.5</span>.<span class=\"number\">0.2216</span>-linux \\</span><br><span class=\"line\">    GITLAB_CLI=release-cli-<span class=\"number\">0.10</span>.<span class=\"number\">0</span>-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LANG=en_US.UTF-<span class=\"number\">8</span> \\</span><br><span class=\"line\">    LC_ALL=en_US.UTF-<span class=\"number\">8</span> \\</span><br><span class=\"line\">    JAVA_HOME=/usr/local/jdk8  \\</span><br><span class=\"line\">    JRE_HOME=/usr/local/jdk8/jre \\</span><br><span class=\"line\">    MAVEN_HOME=/usr/local/maven \\</span><br><span class=\"line\">    MAVEN_RPEO=/home/jenkins/.m2 \\</span><br><span class=\"line\">    SONAR_SCANNER_HOME=/usr/local/sonar-scanner \\</span><br><span class=\"line\">    NODEJS_MODULES=/usr/lib/node_modules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户ROOT切换</span></span><br><span class=\"line\"><span class=\"keyword\">USER</span> root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Shell 命令 - 此种方式极大减少了构建的镜像大小;</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> sed -i <span class=\"string\">'s/dl-cdn.alpinelinux.org/mirror.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositories \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apk update \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apk add --no-cache openssh tzdata curl tar sudo git ca-certificates wget unzip docker zlib nodejs npm jq \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; chmod 4755 /bin/busybox \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; addgroup -g 1000 -S <span class=\"variable\">$&#123;USERNAME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; adduser <span class=\"variable\">$&#123;USERNAME&#125;</span> -D -g <span class=\"variable\">$&#123;USERNAME&#125;</span> -G root -u 1000 -s /bin/sh \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"jenkins   ALL=(root) NOPASSWD:ALL\"</span> &gt;&gt; /etc/sudoers \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mkdir -p <span class=\"variable\">$&#123;AGENT_WORKDIR&#125;</span>/.ssh <span class=\"variable\">$&#123;AGENT_WORKDIR&#125;</span>/.m2 <span class=\"variable\">$&#123;AGENT_WORKDIR&#125;</span>/agent\\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /tmp/<span class=\"variable\">$&#123;GLIBC_NAME&#125;</span> <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;GLIBC_NAME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /tmp/<span class=\"variable\">$&#123;GLIBC_BIN_NAME&#125;</span> <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;GLIBC_BIN_NAME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /tmp/<span class=\"variable\">$&#123;GLIBC_I18N_NAME&#125;</span> <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;GLIBC_I18N_NAME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /etc/apk/keys/sgerrand.rsa.pub <span class=\"variable\">$&#123;BASE_URL&#125;</span>/sgerrand.rsa.pub \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /tmp/<span class=\"variable\">$&#123;LOCALE&#125;</span> <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;LOCALE&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O /tmp/<span class=\"variable\">$&#123;JDK_NAME&#125;</span>.tar.gz <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;JDK_NAME&#125;</span>.tar.gz \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; wget -q -O <span class=\"variable\">$&#123;BASE_BIN&#125;</span>/agent.jar <span class=\"variable\">$&#123;BASE_URL&#125;</span>/agent.jar \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o <span class=\"variable\">$&#123;BASE_BIN&#125;</span>/jenkins-agent.sh <span class=\"variable\">$&#123;BASE_URL&#125;</span>/jenkins-agent.sh \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o /tmp/<span class=\"variable\">$&#123;MAVEN_NAME&#125;</span>.tar.gz <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;MAVEN_NAME&#125;</span>.tar.gz \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o /tmp/<span class=\"variable\">$&#123;SONAR_SCANNER_NAME&#125;</span>.zip <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;SONAR_SCANNER_NAME&#125;</span>.zip \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o /usr/<span class=\"built_in\">local</span>/bin/release-cli <span class=\"variable\">$&#123;BASE_URL&#125;</span>/<span class=\"variable\">$&#123;GITLAB_CLI&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o /usr/<span class=\"built_in\">local</span>/bin/kubectl <span class=\"variable\">$&#123;BASE_URL&#125;</span>/kubectl \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; curl -fsSL -o /usr/<span class=\"built_in\">local</span>/bin/docker <span class=\"variable\">$&#123;BASE_URL&#125;</span>/docker \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; sed -i <span class=\"string\">\"s/#PermitRootLogin.*/PermitRootLogin yes/g\"</span> /etc/ssh/sshd_config \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; sed -i <span class=\"string\">\"s/^#\\s*StrictHostKeyChecking ask/StrictHostKeyChecking no/g\"</span> /etc/ssh/ssh_config \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; ssh-keygen -t dsa -P <span class=\"string\">\"\"</span> -f /etc/ssh/ssh_host_dsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; ssh-keygen -t rsa -P <span class=\"string\">\"\"</span> -f /etc/ssh/ssh_host_rsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; ssh-keygen -t ecdsa -P <span class=\"string\">\"\"</span> -f /etc/ssh/ssh_host_ecdsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; ssh-keygen -t ed25519 -P <span class=\"string\">\"\"</span> -f /etc/ssh/ssh_host_ed25519_key \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; ssh-keygen -t ed25519 -P <span class=\"string\">\"\"</span> -C <span class=\"string\">\"master@weiyigeek.top\"</span> -f /home/jenkins/.ssh/id_ed25519 \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; apk add /tmp/<span class=\"variable\">$&#123;GLIBC_NAME&#125;</span> /tmp/<span class=\"variable\">$&#123;GLIBC_BIN_NAME&#125;</span> /tmp/<span class=\"variable\">$&#123;GLIBC_I18N_NAME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; tar -zxf /tmp/<span class=\"variable\">$&#123;JDK_NAME&#125;</span>.tar.gz -C <span class=\"variable\">$&#123;BASE_DIR&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mv <span class=\"variable\">$&#123;JDK_DIR&#125;</span> <span class=\"variable\">$&#123;JAVA_HOME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; tar -zxf /tmp/<span class=\"variable\">$&#123;MAVEN_NAME&#125;</span>.tar.gz -C <span class=\"variable\">$&#123;BASE_DIR&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mv <span class=\"variable\">$&#123;MAVEN_DIR&#125;</span> <span class=\"variable\">$&#123;MAVEN_HOME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; unzip /tmp/<span class=\"variable\">$&#123;SONAR_SCANNER_NAME&#125;</span>.zip -d <span class=\"variable\">$&#123;BASE_DIR&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; mv <span class=\"variable\">$&#123;SONAR_SCANNER_DIR&#125;</span> <span class=\"variable\">$&#123;SONAR_SCANNER_HOME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; chmod a+x <span class=\"variable\">$&#123;BASE_BIN&#125;</span>/* \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; chown -R jenkins:jenkins <span class=\"variable\">$&#123;BASE_DIR&#125;</span>/ <span class=\"variable\">$&#123;AGENT_WORKDIR&#125;</span>/ <span class=\"variable\">$&#123;NODEJS_MODULES&#125;</span>/ \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"root:WeiyiGeek\"</span> | chpasswd \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"jenkins:WeiyiGeek\"</span> | chpasswd \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; cat /tmp/<span class=\"variable\">$&#123;LOCALE&#125;</span> | xargs -i /usr/glibc-compat/bin/localedef -i &#123;&#125; -f UTF-8 &#123;&#125;.UTF-8 \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; sed -i <span class=\"string\">\"s#use_embedded_jre=true#use_embedded_jre=false#g\"</span> <span class=\"variable\">$&#123;SONAR_SCANNER_HOME&#125;</span>/bin/sonar-scanner \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; rm -rf /var/cache/apk/* /tmp/* <span class=\"variable\">$&#123;SONAR_SCANNER_HOME&#125;</span>/jre/* \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;JAVA_HOME&#125;</span> \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; rm -rf COPYRIGHT LICENSE README release THIRDPARTYLICENSEREADME-JAVAFX.txt THIRDPARTYLICENSEREADME.txt Welcome.html  javafx-src.zip src.zip \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/plugin.jar \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/ext/jfxrt.jar \\</span></span><br><span class=\"line\"><span class=\"bash\">    bin/javaws \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/javaws.jar \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/desktop \\</span></span><br><span class=\"line\"><span class=\"bash\">    plugin \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/deploy* \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/*javafx* \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/*jfx* \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libdecora_sse.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libprism_*.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libfxplugins.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libglass.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libgstreamer-lite.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libjavafx*.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    lib/amd64/libjfx*.so \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"export LANG=zh_CN.UTF-8\"</span> &gt; /etc/profile.d/locale.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> <span class=\"variable\">$&#123;AGENT_WORKDIR&#125;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar \\</span><br><span class=\"line\">    PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;MAVEN_HOME&#125;/bin:$&#123;SONAR_SCANNER_HOME&#125;/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"/usr/local/bin/jenkins-agent.sh\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>镜像构建操作</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (0) 启动一个临时的web服务器（`存放上面的镜像构建所需软件`-非常重要-否则将会导致构建失败）</span></span><br><span class=\"line\">~/k8s/jenkins/jnlp-slave$ python3 -m http.server 8080</span><br><span class=\"line\">Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...</span><br><span class=\"line\"><span class=\"comment\"># 172.17.0.4 - - [30/Mar/2021 17:32:00] \"GET /glibc-2.32-r0.apk HTTP/1.1\" 200 -</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 172.17.0.4 - - [30/Mar/2021 17:32:00] \"GET /kubectl HTTP/1.1\" 200 -</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) 镜像构建 (建议一定要带上构建平台)</span></span><br><span class=\"line\">docker build -t weiyigeek/alpine-jenkins-jnlp --platform linux/amd64 .</span><br><span class=\"line\">  <span class=\"comment\"># Sending build context to Docker daemon  25.09kB</span></span><br><span class=\"line\">  <span class=\"comment\"># Step 1/10 : FROM alpine:3.13.1</span></span><br><span class=\"line\">  <span class=\"comment\">#   ---&gt; e50c909a8df2</span></span><br><span class=\"line\">  <span class=\"comment\"># Step 2/10 : MAINTAINER  Jenkins Custom Work Node Jnlp Container - &lt;master@weiyigeek.top&gt; - WeiyiGeek</span></span><br><span class=\"line\">  <span class=\"comment\"># ....................................................................................................</span></span><br><span class=\"line\">  <span class=\"comment\"># Step 10/10 : ENTRYPOINT [\"/usr/local/bin/jenkins-agent.sh\"]</span></span><br><span class=\"line\">  <span class=\"comment\">#   ---&gt; Running in 1869aaba6a4e</span></span><br><span class=\"line\">  <span class=\"comment\"># Removing intermediate container 1869aaba6a4e</span></span><br><span class=\"line\">  <span class=\"comment\">#   ---&gt; 0dfabb8ae0ee</span></span><br><span class=\"line\">  <span class=\"comment\"># Successfully built 0dfabb8ae0ee</span></span><br><span class=\"line\">  <span class=\"comment\"># Successfully tagged weiyigeek/alpine-jenkins-jnlp:latest</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看构建信息</span></span><br><span class=\"line\">docker images weiyigeek/alpine-jenkins-jnlp --all</span><br><span class=\"line\">  <span class=\"comment\"># REPOSITORY                                 TAG             IMAGE ID       CREATED             SIZE</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor.weiyigeek.top/devops/jenkins-jnlp   3.13.1-alpine   b47b6581b712   About an hour ago   715MB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 推送镜像到Docker HUB中</span></span><br><span class=\"line\">docker push weiyigeek/alpine-jenkins-jnlp</span><br><span class=\"line\">  <span class=\"comment\"># The push refers to repository [harbor.weiyigeek.top/devops/jenkins-jnlp]</span></span><br><span class=\"line\">  <span class=\"comment\"># 059ea3fbd3b3: Pushed</span></span><br><span class=\"line\">  <span class=\"comment\"># 1119ff37d4a9: Layer already exists</span></span><br><span class=\"line\">  <span class=\"comment\"># 3.13.1-alpine: digest: sha256:1f869c553340c9399c7db9072169600a17ddb0ec41d41d3a4365b8c1571fc201 size: 741</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 完毕后便可采用Ansible各节点拉取镜像（若没有安装ansible的朋友请自行ssh登录）</span></span><br><span class=\"line\">ansible node -m shell -a <span class=\"string\">\"docker pull weiyigeek/alpine-jenkins-jnlp\"</span></span><br></pre></td></tr></table></figure></p>\n<p>至此，Jenkins Agent 镜像构建完毕!</p>\n<hr>\n<h2 id=\"0x02-项目实践\"><a href=\"#0x02-项目实践\" class=\"headerlink\" title=\"0x02 项目实践\"></a>0x02 项目实践</h2><h3 id=\"1-使用在K8S部署的Jenkins连接Docker容器中运行的Agent分布式节点-缺省端口-50000\"><a href=\"#1-使用在K8S部署的Jenkins连接Docker容器中运行的Agent分布式节点-缺省端口-50000\" class=\"headerlink\" title=\"1.使用在K8S部署的Jenkins连接Docker容器中运行的Agent分布式节点 (缺省端口:50000)\"></a>1.使用在K8S部署的Jenkins连接Docker容器中运行的Agent分布式节点 (缺省端口:50000)</h3><p>描述: 从前面环境可知，我将Jenkins安装在Kubernetes集群之中了，并且将Pod中的8080端口映射到30001端口，而agent缺省端口为50000，在没有更改的SVC情况下，我们可以使用两种方式一种就是使用<code>kubectl port-forward</code>转发，另外一种是在Jenkins资源清单中配置 <code>hostNetwork: true</code>, 此时运行jenkins Pod的节点IP+50000端口便可直接访问。</p>\n<p>步骤 01.针对 Jenkins 进行 inbound agents pod 50000 端口转发到192.168.12.107节点的50000端口<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n devops port-forward --address 127.0.0.1,192.168.12.107 jenkins-7fc6f4fcf6-glqxj 50000:50000</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤 02.然后在其他有安装Docker的机器节点上运行如下命令进行jenkins jnlp容器的创建，注意此处为了多个agent构建时maven包的数据共享，使用nfs共享磁盘.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --user jenkins -d --name jnlp \\</span><br><span class=\"line\">-e <span class=\"string\">\"JAVA_OPTS=-Xms512m -Xmx1g -Xss1m\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_NAME=docker-jenkins-jnlp\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_AGENT_NAME=docker-jenkins-jnlp\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_SECRET=b97b9d1e0cf083f9da5721caa6ebc63f6fe648375bd90cb2c2f484681d887bb7\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_AGENT_WORKDIR=/home/jenkins\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_PURL=http://192.168.12.107:30001\"</span>  \\</span><br><span class=\"line\">-w /home/jenkins \\</span><br><span class=\"line\">-v /nfsdisk-31/appstorage/mavenRepo:/home/jenkins/.m2 \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock weiyigeek/alpine-jenkins-jnlp:latest</span><br></pre></td></tr></table></figure><br>命令执行若出现<code>INFO: Connected</code>结果，则表示连接成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java version: 1.8.0_281, vendor: Oracle Corporation, runtime: /usr/<span class=\"built_in\">local</span>/jdk8/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: <span class=\"string\">\"linux\"</span>, version: <span class=\"string\">\"5.4.0-137-generic\"</span>, arch: <span class=\"string\">\"amd64\"</span>, family: <span class=\"string\">\"unix\"</span></span><br><span class=\"line\">INFO: Scanner configuration file: /usr/<span class=\"built_in\">local</span>/sonar-scanner/conf/sonar-scanner.properties</span><br><span class=\"line\">INFO: Project root configuration file: NONE</span><br><span class=\"line\">INFO: SonarScanner 4.5.0.2216</span><br><span class=\"line\">INFO: Java 1.8.0_281 Oracle Corporation (64-bit)</span><br><span class=\"line\">INFO: Linux 5.4.0-137-generic amd64</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main createEngine</span><br><span class=\"line\">INFO: Setting up agent: docker-jenkins-jnlp</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main<span class=\"variable\">$CuiListener</span> &lt;init&gt;</span><br><span class=\"line\">INFO: Jenkins agent is running <span class=\"keyword\">in</span> headless mode.</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM hudson.remoting.Engine startEngine</span><br><span class=\"line\">INFO: Using Remoting version: 4.11.2</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir</span><br><span class=\"line\">INFO: Using /home/jenkins/remoting as a remoting work directory</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM org.jenkinsci.remoting.engine.WorkDirManager setupLogging</span><br><span class=\"line\">INFO: Both error and output logs will be printed to /home/jenkins/remoting</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main<span class=\"variable\">$CuiListener</span> status</span><br><span class=\"line\">INFO: Locating server among []</span><br><span class=\"line\">Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main<span class=\"variable\">$CuiListener</span> status</span><br><span class=\"line\">INFO: Agent discovery successful</span><br><span class=\"line\">  Agent address: 192.168.12.107</span><br><span class=\"line\">  Agent port:    50000</span><br><span class=\"line\">  Identity:      8e:c7:1e:e1:39:ee:f4:2a:43:f6:aa:d9:0e:b7:b6:62</span><br><span class=\"line\">.....</span><br><span class=\"line\">INFO: Connected</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230202145941.png\" alt=\"WeiyiGeek.在Docker中运行jenkins-jnlp结果图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.在Docker中运行jenkins-jnlp结果图</p>\n            </figure>\n<p><br/></p>\n<p>步骤 03.当然你也可以通过点击 Jenkins Dashboard -&gt; 节点列表 -&gt; docker-jenkins-jnlp 查看创建的节点已经是运行状态了。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230202150507.png\" alt=\"WeiyiGeek.jenkins中jnlp节点agent状态图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.jenkins中jnlp节点agent状态图</p>\n            </figure>\n<p>温馨提示：此处只是涉及jenkins agent节点的配置连接，若需要进行调用执行某一个项目的CICD，请继续往下看。</p>\n<p><br/></p>\n<h3 id=\"2-使用在K8S部署的Jenkins连接Docker容器中运行的自定义Agent端口节点-直连方式\"><a href=\"#2-使用在K8S部署的Jenkins连接Docker容器中运行的自定义Agent端口节点-直连方式\" class=\"headerlink\" title=\"2.使用在K8S部署的Jenkins连接Docker容器中运行的自定义Agent端口节点 (直连方式)\"></a>2.使用在K8S部署的Jenkins连接Docker容器中运行的自定义Agent端口节点 (直连方式)</h3><p>描述: 由于我们更改Jenkins中的agent TCP 端口以及在K8S集群中也作出了相应更改，但是连接时需要指定更多的参数，例如（JENKINS_DIRECT_CONNECTION与JENKINS_INSTANCE_IDENTITY），这里面的坑还是很大的，为啥说坑大请看友继续看。</p>\n<blockquote>\n<p>JENKINS_DIRECT_CONNECTION : Connect directly to this TCP agent port, skipping the HTTP(S) connection parameter download. Value: “<HOST>:<PORT>“<br>JENKINS_INSTANCE_IDENTITY : The base64 encoded InstanceIdentity byte array of the Jenkins master. When this is set,the agent skips connecting to an HTTP(S) port for connection info.</p>\n</blockquote>\n<p>步骤 00.前置准备，通过前面所需参数可知，我们需要指定要直连的jenkins agent服务的IP以及端口 （例如: 192.168.12.107:30634），和  jenkins Instance Identity值（此处值得注意）。</p>\n<p>最开始，JENKINS_INSTANCE_IDENTITY 其值我认为是 Jenkins 家目录中 secrets 下的 master.key 的 base64 编码，但是怎么连接都是不正确的，随后没得办法只能查询官方文档，功夫不负有心人，在 jenkinsci 的 remoting 项目下找到了一个issue，然后顺腾摸瓜找到了该值。</p>\n<blockquote>\n<p>Issue: <a href=\"https://github.com/jenkinsci/remoting/pull/338/files/07d7fd668b17123afd9ef7ac7a859bdda151f5cf#diff-8f973eec7a7bc04d532ba6b42015c903d7100b09f8ed655367d0fe893a9b6d0a\" target=\"_blank\" rel=\"noopener\">https://github.com/jenkinsci/remoting/pull/338/files/07d7fd668b17123afd9ef7ac7a859bdda151f5cf#diff-8f973eec7a7bc04d532ba6b42015c903d7100b09f8ed655367d0fe893a9b6d0a</a><br>Document: <a href=\"https://wiki.jenkins.io/display/JENKINS/Instance+Identity\" target=\"_blank\" rel=\"noopener\">https://wiki.jenkins.io/display/JENKINS/Instance+Identity</a></p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230206171322.png\" alt=\"WeiyiGeek.JENKINS-53461 Direct inbound TCP agent connection 图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.JENKINS-53461 Direct inbound TCP agent connection 图</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jenkins : Instance Identity</span><br><span class=\"line\">Created by Unknown User (kohsuke), last modified by Unknown User (songy) on Mar 26, 2015</span><br><span class=\"line\">Each Jenkins instance maintains an RSA private/public key pair that can be used to uniquely identify Jenkins. This information is called <span class=\"string\">\"instance identity\"</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">From outside, the public key can be obtained by sending the GET request to the top page of Jenkins, and look <span class=\"keyword\">for</span> the <span class=\"string\">\"X-Instance-Identity\"</span> header <span class=\"keyword\">in</span> the response. This header is always available, even <span class=\"keyword\">if</span> the response is 401 access denied (<span class=\"built_in\">which</span> can happen <span class=\"keyword\">if</span> Jenkins is protected via security.) The value represents a base64-encoded ASN.1 DER serialization of X.509 SubjectPublicKeyInfo record.</span><br><span class=\"line\"></span><br><span class=\"line\">Plugins that run inside Jenkins can access this key pair programmatically through the org.jenkinsci.main.modules.instance_identity.InstanceIdentity class (add a provided scope dependency to this module into your plugin)</span><br></pre></td></tr></table></figure>\n<p>上述大致意思是，每个Jenkins实例都维护一个RSA私钥/公钥对，可用于唯一标识Jenkins，这就是实例标识（instance identity），该值(公钥)可以通过将GET请求发送到Jenkins的首页来获得，并在响应中查找“X-Instance-Identity”标头。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Instance-Identity: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB******************1KQ5CLlISSjBaYrGqwsDThdDRbM6CjmP3UJ0NVhsMRJuQyAA2x4XktjEAYO3X0PWQIDAQAB</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230206171109.png\" alt=\"WeiyiGeek.获取X-Instance-Identity图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.获取X-Instance-Identity图</p>\n            </figure>\n<p><br/></p>\n<p>步骤 01.获取到了X-Instance-Identity值后，一条Docker命令创建运行 jenkins agent 容器连接到Jenkins之中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --user jenkins -d --name jnlp \\</span><br><span class=\"line\">-e <span class=\"string\">\"JAVA_OPTS=-Xms512m -Xmx1g -Xss1m\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_NAME=docker-jenkins-jnlp\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_AGENT_NAME=docker-jenkins-jnlp\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_SECRET=b97b9d1e0cf083f9da5721caa6ebc63f6fe648375bd90cb2c2f484681d887bb7\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_AGENT_WORKDIR=/home/jenkins\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_DIRECT_CONNECTION=192.168.12.107:30634\"</span> \\</span><br><span class=\"line\">-e <span class=\"string\">\"JENKINS_INSTANCE_IDENTITY=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsFqtbTp5/xRS85YdURKk6Zc+qfl+RxrtnJ0zUXXLqXIa8S0MVk5U+xhu0Xo6Kz9MN/i7znfKpljk4/6+GphGFJbgGVw/1M2xbZjg7XN8QiXU64rlHC1NaGbKsa6R0PbWZEjbExR+sgTreiKwh08FcQemEDEajN5WihvvC0LmopYoSfHXW0fYMYIvVPO0Kow80MKoXighfhpK9msLWV4ay4ttP9zjBWml2gEeCXNjPQAt+r1l/kDT3c7vaIybzrxgRg2K9IVYmao/wemwDdpEP1KQ5CLlISSjBaYrGqwsDThdDRbM6CjmP3UJ0NVhsMRJuQyAA2x4XktjEAYO3X0PWQIDAQAB\"</span> \\</span><br><span class=\"line\">-w /home/jenkins \\</span><br><span class=\"line\">-v /nfsdisk-31/appstorage/mavenRepo:/home/jenkins/.m2 \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock weiyigeek/alpine-jenkins-jnlp:latest</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 02.查看运行的容器及其结果，我们也可以在jenkins 面板上看到连接的节点，如需删除节点直接选择左边，菜单栏中删除节点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/k8s/jenkins/jnlp-slave$ docker ps</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER ID   IMAGE                                  COMMAND                  CREATED         STATUS        PORTS     NAMES</span></span><br><span class=\"line\">  <span class=\"comment\"># efb27bd9cb8e   weiyigeek/alpine-jenkins-jnlp:latest   \"/usr/local/bin/jenk…\"   3 seconds ago   Up 1 second             jnlp</span></span><br><span class=\"line\"></span><br><span class=\"line\">~/k8s/jenkins/jnlp-slave$ docker logs -f efb27bd9cb8e</span><br><span class=\"line\">  <span class=\"comment\"># INFO: Agent discovery successful</span></span><br><span class=\"line\">  <span class=\"comment\">#   Agent address: 192.168.12.107</span></span><br><span class=\"line\">  <span class=\"comment\">#   Agent port:    30634</span></span><br><span class=\"line\">  <span class=\"comment\">#   Identity:      8e:c7:1e:e1:39:ee:f4:2a:43:f6:aa:d9:0e:b7:b6:62</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main$CuiListener status</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Handshaking</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main$CuiListener status</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Connecting to 192.168.12.107:30634</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main$CuiListener status</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Trying protocol: JNLP4-connect</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:19 PM org.jenkinsci.remoting.protocol.impl.BIONetworkLayer$Reader run</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Waiting for ProtocolStack to start.</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:19 PM hudson.remoting.jnlp.Main$CuiListener status</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Remote identity confirmed: 8e:c7:1e:e1:39:ee:f4:2a:43:f6:aa:d9:0e:b7:b6:62</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 04, 2023 10:51:21 PM hudson.remoting.jnlp.Main$CuiListener status</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Connected</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>步骤 03.验证连接上Jenkins的agent节点，可以通过左侧的<code>脚本命令行</code>进行测, 你可以访问 http://你jenkinsIP地址/computer/agent节点名称/script 即可到 脚本命令行页面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Groovy script</span></span><br><span class=\"line\">println <span class=\"string\">\"uname -a\"</span>.execute().text</span><br><span class=\"line\">println System.getenv(<span class=\"string\">\"PATH\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果:</span></span><br><span class=\"line\">Linux 2736a6240d91 5.4.0-137-generic <span class=\"comment\">#154-Ubuntu SMP Thu Jan 5 17:03:22 UTC 2023 x86_64 Linux</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/jdk8/bin:/usr/<span class=\"built_in\">local</span>/maven/bin:/usr/<span class=\"built_in\">local</span>/sonar-scanner/bin:/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x03-实践调用Jenkins-agent节点\"><a href=\"#0x03-实践调用Jenkins-agent节点\" class=\"headerlink\" title=\"0x03 实践调用Jenkins agent节点\"></a>0x03 实践调用Jenkins agent节点</h2><h3 id=\"1-牛刀小试\"><a href=\"#1-牛刀小试\" class=\"headerlink\" title=\"1.牛刀小试\"></a>1.牛刀小试</h3><p>描述: 此处不再累述 Jenkins 项目的创建说明，不会的朋友请参照我的【Jenkins学习之路汇总】( <a href=\"https://blog.weiyigeek.top/2018/1-1-1.html#Jenkins学习之路汇总\">https://blog.weiyigeek.top/2018/1-1-1.html#Jenkins学习之路汇总</a> )，帮助大家快速入门。</p>\n<p><strong>agent 代理语法及使用介绍</strong><br>我们可以通过下面流水线中可知，其中最主要的就是 agent 代码块包含的，我们设定的 jenkins agent 标签值的机器。<br>描述: 指定整个Pipeline或特定阶段将在Jenkins环境中执行的位置，具体取决于该<code>agent</code> 部分的放置位置;</p>\n<p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">必须: YES</span><br><span class=\"line\">参数：any / none / label /　node / docker / dockerfile / kubernetes</span><br><span class=\"line\">  - 1.在任何可用的 agent 上执行Pipeline或stage</span><br><span class=\"line\">  - 2.在pipeline块的顶层应用时，不会为整个 Pipeline运行分配全局代理，并且每个stage部分都需要包含自己的agent部分。</span><br><span class=\"line\">  - 3.使用提供的标签在Jenkins环境中可用的代理上执行 Pipeline或阶段, 注意标签条件也可以使用。</span><br><span class=\"line\">  - 4.node使用与lable类似</span><br><span class=\"line\">  - 5.执行Pipeline或stage时会动态供应一个docker节点去接受Docker-based的Pipelines。</span><br><span class=\"line\">  - 6.使用从Dockerfile源存储库中包含的容器构建的容器执行 Pipeline或阶段，Jenkinsfile 必须从多分支 Pipeline或 SCM Pipeline加载。</span><br><span class=\"line\">  - 7.在Kubernetes集群上部署的Pod内执行 Pipeline或阶段，同样Jenkinsfile 必须从多分支 Pipeline或 SCM Pipeline加载，Pod模板在kubernetes &#123;&#125; 块内定义。</span><br><span class=\"line\">允许：在顶层pipeline块和每个stage块中。</span><br></pre></td></tr></table></figure></p>\n<p><strong>语法示例:</strong><br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent any</span><br><span class=\"line\"></span><br><span class=\"line\">  agent none</span><br><span class=\"line\"></span><br><span class=\"line\">  agent &#123; </span><br><span class=\"line\">    label <span class=\"string\">'my-label1 &amp;&amp; my-label2'</span> </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  agent &#123; node &#123; label <span class=\"string\">'labelName'</span> &#125; &#125;  <span class=\"comment\">// 等同于 agent &#123; label 'labelName' &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// docker 还可以接受一个args直接传递给`docker run`调用以及一个 alwaysPull 选项</span></span><br><span class=\"line\">  <span class=\"comment\">// registryUrl和registryCredentialsId参数 有助于指定要使用的Docker注册表及其凭据</span></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    docker &#123;</span><br><span class=\"line\">      image <span class=\"string\">'maven:3-alpine'</span></span><br><span class=\"line\">      label <span class=\"string\">'my-defined-label'</span></span><br><span class=\"line\">      args  <span class=\"string\">'-v /tmp:/tmp'</span></span><br><span class=\"line\">      registryUrl <span class=\"string\">'https://myregistry.com/'</span></span><br><span class=\"line\">      registryCredentialsId <span class=\"string\">'myPredefinedCredentialsInJenkins'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// dockerfile</span></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 等同于 to \"docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/</span></span><br><span class=\"line\">    dockerfile &#123;</span><br><span class=\"line\">        filename <span class=\"string\">'Dockerfile.build'</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果要Dockerfile在另一个目录中构建，请使用以下dir选项</span></span><br><span class=\"line\">        dir <span class=\"string\">'build'</span></span><br><span class=\"line\">        label <span class=\"string\">'my-defined-label'</span></span><br><span class=\"line\">        additionalBuildArgs  <span class=\"string\">'--build-arg version=1.0.2'</span></span><br><span class=\"line\">        args <span class=\"string\">'-v /tmp:/tmp'</span></span><br><span class=\"line\">        <span class=\"comment\">// 同样也接受registryUrl和registryCredentialsId参数</span></span><br><span class=\"line\">        registryUrl <span class=\"string\">'https://myregistry.com/'</span></span><br><span class=\"line\">        registryCredentialsId <span class=\"string\">'myPredefinedCredentialsInJenkins'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// kubernetes: 例如如果要在其中装有Kaniko容器的容器</span></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    kubernetes &#123;</span><br><span class=\"line\">      label podlabel</span><br><span class=\"line\">      yaml <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  kind: Pod</span></span><br><span class=\"line\"><span class=\"string\">  metadata:</span></span><br><span class=\"line\"><span class=\"string\">    name: jenkins-agent</span></span><br><span class=\"line\"><span class=\"string\">  spec:</span></span><br><span class=\"line\"><span class=\"string\">    containers:</span></span><br><span class=\"line\"><span class=\"string\">    - name: kaniko</span></span><br><span class=\"line\"><span class=\"string\">      image: gcr.io/kaniko-project/executor:debug</span></span><br><span class=\"line\"><span class=\"string\">      imagePullPolicy: Always</span></span><br><span class=\"line\"><span class=\"string\">      command:</span></span><br><span class=\"line\"><span class=\"string\">      - /busybox/cat</span></span><br><span class=\"line\"><span class=\"string\">      tty: true</span></span><br><span class=\"line\"><span class=\"string\">      volumeMounts:</span></span><br><span class=\"line\"><span class=\"string\">        - name: aws-secret</span></span><br><span class=\"line\"><span class=\"string\">          mountPath: /root/.aws/</span></span><br><span class=\"line\"><span class=\"string\">        - name: docker-registry-config</span></span><br><span class=\"line\"><span class=\"string\">          mountPath: /kaniko/.docker</span></span><br><span class=\"line\"><span class=\"string\">    restartPolicy: Never</span></span><br><span class=\"line\"><span class=\"string\">    volumes:</span></span><br><span class=\"line\"><span class=\"string\">      - name: aws-secret</span></span><br><span class=\"line\"><span class=\"string\">        secret:</span></span><br><span class=\"line\"><span class=\"string\">          secretName: aws-secret</span></span><br><span class=\"line\"><span class=\"string\">      - name: docker-registry-config</span></span><br><span class=\"line\"><span class=\"string\">        configMap:</span></span><br><span class=\"line\"><span class=\"string\">          name: docker-registry-config</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>常用选项:</strong><br>描述: 下面可以应用于两个或者多个agent实现的选项即label、customWorkspace、reuseNode;</p>\n<ul>\n<li>1.label (参数:字符串): 运行 Pipeline或单个 Pipeline的标签或标签条件stage。 【此选项对node，docker和有效对dockerfile必需 node。】</li>\n<li>2.customWorkspace (参数: 字符串) : 运行 Pipeline或个人 stage 这 agent 是这个自定义的工作空间内的应用，而不是默认的, 它可以是相对路径（<code>在这种情况下自定义工作空间将位于节点上的工作空间根目录下</code>），也可以是绝对路径。【此选项是有效的node，docker和dockerfile。】</li>\n<li>3.reuseNode（参数: 布尔值-false）: 如果为true在同一工作空间中在 Pipeline顶级指定的节点上运行容器，而不是在整个新节点上运行</li>\n<li>4.args (参数: 字符串): 要传递给的运行时参数docker run,此选项对docker和有效dockerfile。</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例1. Docker代理，声明性 Pipeline</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  <span class=\"comment\">// V.在具有给定名称和标签（maven:3-alpine）的新创建容器中执行此 Pipeline中定义的所有步骤。</span></span><br><span class=\"line\">  agent &#123; docker <span class=\"string\">'maven:3-alpine'</span> &#125; </span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">      stage(<span class=\"string\">'Example Build'</span>) &#123;</span><br><span class=\"line\">          steps &#123;</span><br><span class=\"line\">              sh <span class=\"string\">'mvn -B clean verify'</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例子2.阶段级代理部分</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* agent none在 Pipeline的顶层进行定义可确保 不会不必要地分配执行程序。使用agent none还会强制每个stage部分包含其自己的agent部分。 */</span></span><br><span class=\"line\">  agent none </span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">'Example Build'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用此映像在新创建的容器中执行此阶段中的步骤。*/</span></span><br><span class=\"line\">      agent &#123; docker <span class=\"string\">'maven:3-alpine'</span> &#125; </span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">          echo <span class=\"string\">'Hello, Maven'</span></span><br><span class=\"line\">          sh <span class=\"string\">'mvn --version'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Example Test'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用与上一阶段不同的图像在新创建的容器中执行此阶段中的步骤。 */</span></span><br><span class=\"line\">      agent &#123; docker <span class=\"string\">'openjdk:8-jre'</span> &#125; </span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">          echo <span class=\"string\">'Hello, JDK'</span></span><br><span class=\"line\">          sh <span class=\"string\">'java -version'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>好了，agent 介绍完毕，我们该回归正题了。</p>\n<p><br/></p>\n<p><strong>实践流程</strong></p>\n<p>步骤 01.此处我创建了一个 Test 项目用于测试调用我们在Docker中运行的jenkins Agent节点。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230206173815.png\" alt=\"WeiyiGeek.图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.图</p>\n            </figure>\n<p><br/></p>\n<p>步骤 02.此处是我准备的 jenkins 流水线代码, 在应用保存后即可。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> JOB_WORKSPACE = <span class=\"string\">\"$&#123;env.WORKSPACE&#125;\"</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> JOB_NAME = <span class=\"string\">\"$&#123;env.JOB_NAME&#125;-$&#123;env.BUILD_NUMBER&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    label <span class=\"string\">'docker-jnlp-1'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  environment &#123;</span><br><span class=\"line\">    SONARQUBE_TIMEOUT = <span class=\"string\">'10'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage (<span class=\"string\">'Start Test'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo <span class=\"string\">\"[Test Jenkins JNLP Agent with docker]!\"</span></span><br><span class=\"line\">        echo <span class=\"string\">\"流水线环境变量输出: $&#123;env.JOB_NAME&#125;-$&#123;env.JOB_WORKSPACE&#125;-$&#123;env.SONARQUBE_TIMEOUT&#125;\"</span></span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 命令执行</span></span><br><span class=\"line\">          sh <span class=\"string\">\" echo -e '&lt;name&gt;weiyigeek&lt;/name&gt;\\n&lt;addr&gt;https://weiyigeek.top&lt;/addr&gt;' &gt; demo.xml  &amp;&amp; cat demo.xml\"</span></span><br><span class=\"line\">          <span class=\"comment\">// 返回命令执行结果</span></span><br><span class=\"line\">          USERNAME=sh <span class=\"string\">label:</span> <span class=\"string\">'name'</span>,<span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"string\">script:</span> <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            awk '/&lt;\\\\/*name\\\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\\\/*name\\\\/*&gt;/,\"\");print \\$0&#125;' demo.xml | head -n 1</span></span><br><span class=\"line\"><span class=\"string\">          \"\"\"</span></span><br><span class=\"line\">          ADDRESS=sh <span class=\"string\">label:</span> <span class=\"string\">'name'</span>,<span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"string\">script:</span> <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">            awk '/&lt;\\\\/*addr\\\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\\\/*addr\\\\/*&gt;/,\"\");print \\$0&#125;' demo.xml | head -n 1</span></span><br><span class=\"line\"><span class=\"string\">          \"\"\"</span></span><br><span class=\"line\">          sh <span class=\"string\">\"mkdir -vp test/demo &amp;&amp; ls &amp;&amp; pwd\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       echo <span class=\"string\">\"脚本执行返回结果输出 =&gt; $&#123;USERNAME&#125; =&gt; $&#123;ADDRESS&#125;\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     stage (<span class=\"string\">'END Test'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo <span class=\"string\">\"跨阶段变量传递 =&gt; $&#123;USERNAME&#125;\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"ls &amp;&amp; pwd\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"java -version;mvn -version;release-cli -v;sonar-scanner --version\"</span> </span><br><span class=\"line\">        echo <span class=\"string\">\"[Test End Stage]!\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 03.返回到Test项目首页之中，点击立即构建，然后可以在阶段视图中查看到执行结果,我们可以通过Blue Ocean进行更加直观的展示。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230206174336.png\" alt=\"WeiyiGeek.Jenkins agent连接运行测试图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Jenkins agent连接运行测试图</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"2-完整的pipeline流水线企业项目\"><a href=\"#2-完整的pipeline流水线企业项目\" class=\"headerlink\" title=\"2.完整的pipeline流水线企业项目\"></a>2.完整的pipeline流水线企业项目</h3><p>描述: 上一章节只是简单使用该镜像创建的容器，是否能被Jenkins正常调度，此章节为作者内部实践项目抽取的pipeline流水线，实现了’代码拉取’, ‘代码检测’, ‘项目构建’,’镜像构建’,’部署测试’,’成品归档’等阶段，供大家参考使用。</p>\n<p>步骤 01.在登录Jenkins后，创建一个测试任务weiyigeek-oa，此处根据一个已经存在的任务内部OA系统进行复制创建，修改对应的流水线agent代码块为标签选择。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230207093031.png\" alt=\"WeiyiGeek.创建weiyigeek-oa任务流水线图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.创建weiyigeek-oa任务流水线图</p>\n            </figure>\n<p>温馨提示：由于 Jenkins Pipeline 流水线代码太长，需要的朋友可以关注【WeiyiGeek】公众号后回复【Jenkins流水线代码】即可下载 <code>Jenkins-Pipeline.groovy</code> 示例文件。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230207170309.png\" alt=\"WeiyiGeek.Jenkins流水线代码图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Jenkins流水线代码图</p>\n            </figure>\n<p><br/></p>\n<p>步骤 03.回到项目首页，点击 【build with Parameters】选择构建项目指定参数，点击【开始构建】便可进行构建任务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从控制台输出看到当前 weiyigeek-oa 运行在我们使用docker部署的agent节点之上(docker-jenkins-jnlp)</span></span><br><span class=\"line\">Started by user Jenkins 管理员</span><br><span class=\"line\">[Pipeline] Start of Pipeline</span><br><span class=\"line\">[Pipeline] node</span><br><span class=\"line\">Running on docker-jenkins-jnlp <span class=\"keyword\">in</span> /home/jenkins/agent/workspace/weiyigeek-oa</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230207093625.png\" alt=\"WeiyiGeek.流水线任务构建参数设定与运行图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.流水线任务构建参数设定与运行图</p>\n            </figure>\n<p><br/></p>\n<p>步骤 04.任务运行完毕后可以通过 Blue Ocean 进行查看各阶段的执行情况，以及查看Jenkins发送在企业微信中构建信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Jenkins-消息通知【weiyigeek-oa-1】任务开始 </span><br><span class=\"line\">项目信息: overtime-leave-1.5.5.jar</span><br><span class=\"line\">提交信息: 6f335ad 统计查询添加筛选条件</span><br><span class=\"line\">构建版本: master - origin/master</span><br><span class=\"line\">构建操作: None</span><br><span class=\"line\">镜像构建: True</span><br><span class=\"line\">部署环境: Prod</span><br><span class=\"line\">成品归档: False</span><br><span class=\"line\">质量测试: False</span><br><span class=\"line\">镜像仓库1: harbor.weiyigeek.top/weiyigeek/oa:master</span><br><span class=\"line\">镜像仓库2: harbor.weiyigeek.top/weiyigeek/oa:latest</span><br><span class=\"line\">查看当前任务流水线</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2023/1/20230207094227.png\" alt=\"WeiyiGeek.流水线任务阶段执行情况查看说明图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.流水线任务阶段执行情况查看说明图</p>\n            </figure>\n<p>至此，在 Docker 中运行 Jenkins Agent 实践完毕！</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"},{"name":"CICD","path":"api/categories/CICD.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}