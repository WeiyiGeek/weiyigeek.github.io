{"title":"Gitalk-基于Github项目issue的评论系统在博客系统中实践","slug":"编程世界/开发框架/Integrate/Gitalk-基于Github项目issue的评论系统实践","date":"2022-08-17T05:34:30.000Z","updated":"2023-01-31T02:29:10.670Z","url":"2022/8-17-682.html","path":"api/articles/2022/8-17-682.html.json","covers":["https://img.weiyigeek.top/2022/5/20220817100949.png","https://img.weiyigeek.top/2022/5/20220817101619.png","https://img.weiyigeek.top/2022/5/20220817102221.png","https://img.weiyigeek.top/2022/5/20220817113313.png","https://img.weiyigeek.top/2022/5/20220817113707.png","https://img.weiyigeek.top/2022/5/20220817123646.png","https://img.weiyigeek.top/2022/5/20220817125424.png","https://img.weiyigeek.top/2022/5/20220817124230.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Gitalk-基于Github的评论系统\"><a href=\"#0x00-Gitalk-基于Github的评论系统\" class=\"headerlink\" title=\"0x00 Gitalk - 基于Github的评论系统\"></a>0x00 Gitalk - 基于Github的评论系统</h2><p>描述: 我想对于所有使用hexo、Hugo或者WordPress自建博客的博主来说GitTalk应该不陌生，GitTalk通过Github的OpenAPI以及issues功能实现社区评论确实还是很方便的，除开对国内访问速度较慢就没啥毛病，但是考虑到新手朋友此处还是简单介绍一下。</p>\n<h3 id=\"1-快速介绍\"><a href=\"#1-快速介绍\" class=\"headerlink\" title=\"1.快速介绍\"></a>1.快速介绍</h3><p>描述: Gitalk 是一个基于 Github Issue 和 Preact 的现代评论组件。<br>功能： </p>\n<ul>\n<li>使用 github 帐号进行身份验证</li>\n<li>无服务器，所有评论将存储为 github 问题</li>\n<li>个人和组织的github项目都可以用来存储评论</li>\n<li>本地化，支持多国语言 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]</li>\n<li>类似 Facebook 的无干扰模式（可以通过 DistentionFreeMode 选项启用）</li>\n<li>热键提交评论（cmd|ctrl + enter）</li>\n</ul>\n<p>项目地址：<a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a><br>帮助文档：<a href=\"https://github.com/gitalk/gitalk/blob/master/readme-cn.md\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p>\n<p>温馨提示: 当前 Gitalk 最新版本为 1.7.2 (Mar 3, 2021), 如后续随着时间推移，可能会有些许变化，建议参考官网（<a href=\"https://github.com/gitalk/gitalk/tags）\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/tags）</a></p>\n<p><br/></p>\n<h3 id=\"2-安装部署\"><a href=\"#2-安装部署\" class=\"headerlink\" title=\"2.安装部署\"></a>2.安装部署</h3><p>描述：安装引用Gitalk评论系统的两种方式，</p>\n<p><strong>安装实践</strong></p>\n<ul>\n<li>方式1.在你的HTML页面中使用 link 与 script 标签引入。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- or --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/gitalk/dist/gitalk.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/gitalk/dist/gitalk.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2.使用 npm 安装 gital 模块。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块安装</span></span><br><span class=\"line\">npm i --save gitalk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目导入</span></span><br><span class=\"line\">import <span class=\"string\">'gitalk/dist/gitalk.css'</span></span><br><span class=\"line\">import Gitalk from <span class=\"string\">'gitalk'</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>配置实践</strong></p>\n<p>首先，您需要为商店评论选择一个公共 github 存储库（已存在或创建一个新存储库），然后创建一个 GitHub 应用程序，如果你没有，点击这里 (<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a>) 注册一个新的。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name : BlogTalk</span><br><span class=\"line\">Homepage URL : https://blog.weiyigeek.top</span><br><span class=\"line\">Application description : 欢迎访问 WeiyiGeek blog\\<span class=\"string\">'s [blog.weiyigeek.top] talk about , 欢迎留言骚扰哟，亲!</span></span><br><span class=\"line\"><span class=\"string\">Authorization callback URL : https://blog.weiyigeek.top</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817100949.png\" alt=\"WeiyiGeek.Register a new OAuth application\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Register a new OAuth application</p>\n            </figure>\n<p>注意：您必须在授权回调 URL 字段中指定网站域 url。</p>\n<p>然后，创建完成后你将获取Client ID 与 Client Secret，如下所示：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817101619.png\" alt=\"WeiyiGeek.application ID and Secret\" title=\"\" class=\"\">\n                <p>WeiyiGeek.application ID and Secret</p>\n            </figure>\n<p>注意：后续更新修改可以进行访问 <code>Settings/Developer settings</code> ( <a href=\"https://github.com/settings/developers\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/developers</a> )</p>\n<p>最后，创建一个公共仓库此处我创建的是<a href=\"https://github.com/WeiyiGeek/blogtalk\" target=\"_blank\" rel=\"noopener\">blogtalk</a>，创建完后在项目的(<a href=\"https://github.com/WeiyiGeek/blogtalk/settings)中启用\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/blogtalk/settings)中启用</a> issue 即可</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817102221.png\" alt=\"WeiyiGeek.blogtalk\" title=\"\" class=\"\">\n                <p>WeiyiGeek.blogtalk</p>\n            </figure>\n<p><br/></p>\n<p><strong>使用方式1.将如下代码添加到您的页面：</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gitalk-container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">const</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          clientID: <span class=\"string\">'GitHub Application Client ID'</span>,          <span class=\"comment\">// 8d8e96********797026d3</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          clientSecret: <span class=\"string\">'GitHub Application Client Secret'</span>,  <span class=\"comment\">// secrets**********secrets</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          repo: <span class=\"string\">'GitHub repo'</span>,          <span class=\"comment\">// blogtalk</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          owner: <span class=\"string\">'GitHub repo owner'</span>,   <span class=\"comment\">// WeiyiGeek</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          admin: [<span class=\"string\">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>], <span class=\"comment\">// ['WeiyiGeek']</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          id: location.pathname,      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span></span><br><span class=\"line\"><span class=\"actionscript\">          distractionFreeMode: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"actionscript\">        gitalk.render(<span class=\"string\">'gitalk-container'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>使用方式2.在React中使用</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> GitalkComponent <span class=\"keyword\">from</span> <span class=\"string\">\"gitalk/dist/gitalk-component\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 并使用类似的组件</span></span><br><span class=\"line\">&lt;GitalkComponent options=&#123;&#123;</span><br><span class=\"line\">  clientID: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// options below</span></span><br><span class=\"line\">&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: Gitalk 对象实例化参数参考 (<a href=\"https://github.com/gitalk/gitalk#options\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk#options</a>)</p>\n<p><br/></p>\n<h3 id=\"3-使用实践\"><a href=\"#3-使用实践\" class=\"headerlink\" title=\"3.使用实践\"></a>3.使用实践</h3><p><strong>在 Hexo 中使用</strong><br>描述: 此处以我的博客[<a href=\"https://blog.weiyigeek.top]\">https://blog.weiyigeek.top]</a> 为例进行演示配置，此处笔者使用的是 hexo + mellow 主题 , 已经经过二次魔改（有需要该博客主题请在公众号回复【mellow博客主题】或者访问 <a href=\"https://weiyigeek.top/wechat.html?key=mellow博客主题\" target=\"_blank\" rel=\"noopener\">https://weiyigeek.top/wechat.html?key=mellow博客主题</a> ）。</p>\n<ul>\n<li>Step 1.在 Hexo 主题中的 _config.yaml 配置加入如下配置片段。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gittalk 评论系统</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">WeiyiGeek</span>  <span class=\"comment\"># github账号</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">blogtalk</span>    <span class=\"comment\"># 留言仓库</span></span><br><span class=\"line\"><span class=\"attr\">  proxy:</span> <span class=\"string\">/github/login/oauth/access_token</span> <span class=\"comment\"># 反向代理解决跨域问题,后续将会主要讲解哦。</span></span><br><span class=\"line\"><span class=\"attr\">  oauth:</span></span><br><span class=\"line\"><span class=\"attr\">    client_id:</span> <span class=\"number\">8</span><span class=\"string\">d8e965c******97026d3</span>       <span class=\"comment\"># Github App Auth ID </span></span><br><span class=\"line\"><span class=\"attr\">    client_secret:</span> <span class=\"string\">e9c6141cb1f02f721********d01cb4d7a8f069</span> <span class=\"comment\">#  Github App Auth secret</span></span><br><span class=\"line\"><span class=\"attr\">  perPage:</span> <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2.在主题文档引擎中加入如下片段。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"gitalk-container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 实际上是将 &lt;script src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"&gt;&lt;/script&gt; js 下载到了本地 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;%- url_for(theme_js('/js/plugins/gitalk.min', cache)) %&gt;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;%- url_for(theme_js('/js/custom/gitalk.init', cache)) %&gt;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- themes\\mellow\\source\\js\\custom\\gitalk.init.js --&gt;</span></span><br><span class=\"line\">var gitalk = new Gitalk(&#123;</span><br><span class=\"line\">  clientID: '<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.oauth.client_id</span> %&gt;</span>',</span><br><span class=\"line\">  clientSecret: '<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.oauth.client_secret</span> %&gt;</span>',</span><br><span class=\"line\">  repo: '<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.repo</span> %&gt;</span>',</span><br><span class=\"line\">  owner: '<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.owner</span> %&gt;</span>',</span><br><span class=\"line\">  admin: ['<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.owner</span> %&gt;</span>'],</span><br><span class=\"line\">  id: location.pathname,</span><br><span class=\"line\">  proxy: '<span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">theme.gitalk.proxy</span> %&gt;</span>',</span><br><span class=\"line\">  distractionFreeMode: true</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">#  hexo g 生成静态文件后的样子</span><br><span class=\"line\"># var gitalk = new Gitalk(&#123;</span><br><span class=\"line\">#   clientID: '8d8e965c******97026d3',</span><br><span class=\"line\">#   clientSecret: 'e9c6141cb1f02f721********d01cb4d7a8f069',</span><br><span class=\"line\">#   repo: 'blogtalk',</span><br><span class=\"line\">#   owner: 'WeiyiGeek',</span><br><span class=\"line\">#   admin: ['WeiyiGeek'],</span><br><span class=\"line\">#   id: location.pathname,</span><br><span class=\"line\">#   proxy: '/github/login/oauth/access_token',</span><br><span class=\"line\">#   distractionFreeMode: false</span><br><span class=\"line\"># &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建 gitalk-container </span><br><span class=\"line\">gitalk.render('gitalk-container')</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 建议将<code>distractionFreeMode</code>设置为false,因为True真心难看。<br>温馨提示: 为了 Github Apps ID 与 Secrets 的安全，我们需要针对上面 <code>new Gitalk</code> 实例化参数进行js加密混淆 (<a href=\"http://www.esjson.com/jsEncrypt.html\" target=\"_blank\" rel=\"noopener\">http://www.esjson.com/jsEncrypt.html</a>)</p>\n<p><br/></p>\n<h3 id=\"n-入坑出坑\"><a href=\"#n-入坑出坑\" class=\"headerlink\" title=\"n.入坑出坑\"></a>n.入坑出坑</h3><h4 id=\"1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法\"><a href=\"#1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法\" class=\"headerlink\" title=\"1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法\"></a>1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法</h4><p>描述: 在最开始之初我们也是使用官方演示代码中，使用的第三方提供的CORS代理服务，他会默认放行所有CORS请求，但是随着而来的问题是登陆会出现网络错误 Error: Network Error 或者在使用时出现 Forbidden 错误 (<a href=\"https://github.com/gitalk/gitalk/issues/514\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/issues/514</a>) 。</p>\n<p>目前由于该CORS代理服务遭到滥用，因此做了限制，导致GitTalk失效，在实践中发现如下CORS代理服务其要么有限制要么根本不能使用，所以实践的朋友们就不要像使用如下CORS代理服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 限流</span></span><br><span class=\"line\">https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</span><br><span class=\"line\"><span class=\"comment\"># 被墙</span></span><br><span class=\"line\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>\n<p>温馨提示: CORS Anywhere 是一个 NodeJS 代理，它将 CORS 标头添加到代理请求中。 项目地址 (<a href=\"https://github.com/Rob--W/cors-anywhere\" target=\"_blank\" rel=\"noopener\">https://github.com/Rob--W/cors-anywhere</a>)</p>\n<p><br/></p>\n<p>在 百度 CSDN 中捡了一圈垃圾之后，还是没有最好的解决方案，然后通过某种方式Google了一下，找到两种替代的方式<code>利用cloudflare worker (不幸得是默认的cf worker的域名workers.dev被墙了)或者 Vercel 搭建在线代理（无vps推荐使用Vercel）</code> 或者 <code>使用VPS中的nginx服务器来反代 https://github.com (比较推荐-当前博主正在使用)</code>。</p>\n<p><strong>方式1.没有VPS或者自己的服务器（想白嫖的）</strong><br>描述: 在 cloudflare (<a href=\"https://dash.cloudflare.com/login/\" target=\"_blank\" rel=\"noopener\">https://dash.cloudflare.com/login/</a>) 上创建一个免费的在线代理来解决gitalk授权登录跨域问题，利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817113313.png\" alt=\"WeiyiGeek.cloudflare-cors-anywhere\" title=\"\" class=\"\">\n                <p>WeiyiGeek.cloudflare-cors-anywhere</p>\n            </figure>\n<p>创建好之后我们便可编辑其 Worker 服务代码，如下代码也可通过 <a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> 获得。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> exclude = [];     <span class=\"comment\">// Regexp for blacklisted urls</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> include = [<span class=\"regexp\">/^https?:\\/\\/.*weiyigeek\\.top$/</span>, /^https?:\\/\\/localhost/]; <span class=\"comment\">// Regexp for whitelisted origins e.g.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> apiKeys = &#123;</span><br><span class=\"line\">  EZWTLwVEqFnaycMzdhBz: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Test App'</span>,</span><br><span class=\"line\">    expired: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    expiresAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2023-01-01'</span>),</span><br><span class=\"line\">    exclude: [], <span class=\"comment\">// Regexp for blacklisted urls</span></span><br><span class=\"line\">    include: [<span class=\"string\">\"^http.?://www.weiyigeek.top$\"</span>, <span class=\"string\">\"weiyigeek.top$\"</span>, <span class=\"string\">\"^https?://localhost/\"</span>], <span class=\"comment\">// Regexp for whitelisted origins</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Config is all above this line.</span></span><br><span class=\"line\"><span class=\"comment\">// It should not be necessary to change anything below.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">verifyCredentials</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Throws exception on verification failure.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> requestApiKey = request.headers.get(<span class=\"string\">'x-cors-proxy-api-key'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.keys(apiKeys).includes(requestApiKey)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'Invalid authorization key.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apiKeys[requestApiKey].expired) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">'Expired authorization key.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (apiKeys[requestApiKey].expiresAt &amp;&amp; apiKeys[requestApiKey].expiresAt.getTime() &lt; <span class=\"built_in\">Date</span>.now()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnauthorizedException(<span class=\"string\">`Expired authorization key.\\nKey was valid until: <span class=\"subst\">$&#123;apiKeys[requestApiKey].expiresAt&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> apiKeys[requestApiKey];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkRequiredHeadersPresent</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Throws exception on verification failure.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!request.headers.get(<span class=\"string\">'Origin'</span>) &amp;&amp; !request.headers.get(<span class=\"string\">'x-requested-with'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Missing required request header. Must specify one of: origin,x-requested-with'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UnauthorizedException</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.status = <span class=\"number\">401</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.statusText = <span class=\"string\">'Unauthorized'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BadRequestException</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.status = <span class=\"number\">400</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.statusText = <span class=\"string\">'Bad Request'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isListed</span>(<span class=\"params\">uri, listing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(uri);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> uri === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> m <span class=\"keyword\">of</span> listing) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (uri.match(m) !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        returnValue = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//   Decide what to do when Origin is null</span></span><br><span class=\"line\">    returnValue = <span class=\"literal\">true</span>; <span class=\"comment\">// True accepts null origins false rejects them.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fix</span>(<span class=\"params\">myHeaders, request, isOPTIONS</span>) </span>&#123;</span><br><span class=\"line\">  myHeaders.set(<span class=\"string\">'Access-Control-Allow-Origin'</span>, request.headers.get(<span class=\"string\">'Origin'</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isOPTIONS) &#123;</span><br><span class=\"line\">    myHeaders.set(<span class=\"string\">'Access-Control-Allow-Methods'</span>, request.headers.get(<span class=\"string\">'access-control-request-method'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> acrh = request.headers.get(<span class=\"string\">'access-control-request-headers'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (acrh) &#123;</span><br><span class=\"line\">      myHeaders.set(<span class=\"string\">'Access-Control-Allow-Headers'</span>, acrh);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myHeaders.delete(<span class=\"string\">'X-Content-Type-Options'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> myHeaders;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseURL</span>(<span class=\"params\">requestUrl</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> match = requestUrl.match(<span class=\"regexp\">/^(?:(https?:)?\\/\\/)?(([^/?]+?)(?::(\\d&#123;0,5&#125;)(?=[/?]|$))?)([/?][\\S\\s]*|$)/i</span>);</span><br><span class=\"line\">  <span class=\"comment\">//                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^</span></span><br><span class=\"line\">  <span class=\"comment\">//                            1:protocol       3:hostname     4:port                 5:path + query string</span></span><br><span class=\"line\">  <span class=\"comment\">//                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class=\"line\">  <span class=\"comment\">//                                            2:host</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'no match'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Invalid URL for proxy request.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'parseURL:match:'</span>, match);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!match[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nothing in match group 1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/^https?:/i</span>.test(requestUrl)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'The pattern at top could mistakenly parse \"http:///\" as host=\"http:\" and path=///.'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Invalid URL for proxy request.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Scheme is omitted.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestUrl.lastIndexOf(<span class=\"string\">'//'</span>, <span class=\"number\">0</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'\"//\" is omitted'</span>);</span><br><span class=\"line\">      requestUrl = <span class=\"string\">'//'</span> + requestUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    requestUrl = (match[<span class=\"number\">4</span>] === <span class=\"string\">'443'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + requestUrl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parsed = <span class=\"keyword\">new</span> URL(requestUrl);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!parsed.hostname) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'\"http://:1/\" and \"http:/notenoughslashes\" could end up here.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Invalid URL for proxy request.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> parsed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxyRequest</span>(<span class=\"params\">request, activeApiKey</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOPTIONS = (request.method === <span class=\"string\">'OPTIONS'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originUrl = <span class=\"keyword\">new</span> URL(request.url);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> origin = request.headers.get(<span class=\"string\">'Origin'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// ParseURL throws when the url is invalid</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fetchUrl = parseURL(request.url.replace(originUrl.origin, <span class=\"string\">''</span>).slice(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Throws if it fails the check</span></span><br><span class=\"line\">  checkRequiredHeadersPresent(request);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Excluding urls which are not allowed as destination urls</span></span><br><span class=\"line\">  <span class=\"comment\">// Exclude origins which are not int he included ones</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isListed(fetchUrl.toString(), [...exclude, ...(activeApiKey?.exclude || [])]) || !isListed(origin, [...include, ...(activeApiKey?.include || [])])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Origin or Destination URL is not allowed.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> corsHeaders = request.headers.get(<span class=\"string\">'x-cors-headers'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (corsHeaders !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      corsHeaders = <span class=\"built_in\">JSON</span>.parse(corsHeaders);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!originUrl.pathname.startsWith(<span class=\"string\">'/'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Pathname does not start with \"/\"'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> recvHpaireaders = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> pair <span class=\"keyword\">of</span> request.headers.entries()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((pair[<span class=\"number\">0</span>].match(<span class=\"string\">'^origin'</span>) === <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &amp;&amp; (pair[<span class=\"number\">0</span>].match(<span class=\"string\">'eferer'</span>) === <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &amp;&amp; (pair[<span class=\"number\">0</span>].match(<span class=\"string\">'^cf-'</span>) === <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &amp;&amp; (pair[<span class=\"number\">0</span>].match(<span class=\"string\">'^x-forw'</span>) === <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &amp;&amp; (pair[<span class=\"number\">0</span>].match(<span class=\"string\">'^x-cors-headers'</span>) === <span class=\"literal\">null</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      recvHpaireaders[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (corsHeaders !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> c <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(corsHeaders)) &#123;</span><br><span class=\"line\">      recvHpaireaders[c[<span class=\"number\">0</span>]] = c[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newRequest = <span class=\"keyword\">new</span> Request(request, &#123;</span><br><span class=\"line\">    headers: recvHpaireaders,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(fetchUrl, newRequest);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myHeaders = <span class=\"keyword\">new</span> Headers(response.headers);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newCorsHeaders = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> allh = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> pair <span class=\"keyword\">of</span> response.headers.entries()) &#123;</span><br><span class=\"line\">    newCorsHeaders.push(pair[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    allh[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  newCorsHeaders.push(<span class=\"string\">'cors-received-headers'</span>);</span><br><span class=\"line\">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class=\"line\"></span><br><span class=\"line\">  myHeaders.set(<span class=\"string\">'Access-Control-Expose-Headers'</span>, newCorsHeaders.join(<span class=\"string\">','</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  myHeaders.set(<span class=\"string\">'cors-received-headers'</span>, <span class=\"built_in\">JSON</span>.stringify(allh));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> body = isOPTIONS ? <span class=\"literal\">null</span> : <span class=\"keyword\">await</span> response.arrayBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(body, &#123;</span><br><span class=\"line\">    headers: myHeaders,</span><br><span class=\"line\">    status: (isOPTIONS ? <span class=\"number\">200</span> : response.status),</span><br><span class=\"line\">    statusText: (isOPTIONS ? <span class=\"string\">'OK'</span> : response.statusText),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">homeRequest</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOPTIONS = (request.method === <span class=\"string\">'OPTIONS'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originUrl = <span class=\"keyword\">new</span> URL(request.url);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> origin = request.headers.get(<span class=\"string\">'Origin'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> remIp = request.headers.get(<span class=\"string\">'CF-Connecting-IP'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> corsHeaders = request.headers.get(<span class=\"string\">'x-cors-headers'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myHeaders = <span class=\"keyword\">new</span> Headers();</span><br><span class=\"line\">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> country = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> colo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> request.cf !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    country = <span class=\"keyword\">typeof</span> request.cf.country === <span class=\"string\">'undefined'</span> ? <span class=\"literal\">false</span> : request.cf.country;</span><br><span class=\"line\">    colo = <span class=\"keyword\">typeof</span> request.cf.colo === <span class=\"string\">'undefined'</span> ? <span class=\"literal\">false</span> : request.cf.colo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(</span><br><span class=\"line\">    <span class=\"string\">'CLOUDFLARE-CORS-ANYWHERE\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'Source:\\nhttps://github.com/chrisspiegl/cloudflare-cors-anywhere\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'Usage:\\n'</span></span><br><span class=\"line\">        + originUrl.origin + <span class=\"string\">'/&#123;uri&#125;\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'Header x-cors-proxy-api-key must be set with valid api key\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'Header origin or x-requested-with must be set\\n\\n'</span></span><br><span class=\"line\">        <span class=\"comment\">// + 'Limits: 100,000 requests/day\\n'</span></span><br><span class=\"line\">        <span class=\"comment\">// + '          1,000 requests/10 minutes\\n\\n'</span></span><br><span class=\"line\">        + (origin === <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : <span class=\"string\">'Origin: '</span> + origin + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">        + <span class=\"string\">'Ip: '</span> + remIp + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">        + (country ? <span class=\"string\">'Country: '</span> + country + <span class=\"string\">'\\n'</span> : <span class=\"string\">''</span>)</span><br><span class=\"line\">        + (colo ? <span class=\"string\">'Datacenter: '</span> + colo + <span class=\"string\">'\\n'</span> : <span class=\"string\">''</span>) + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">        + ((corsHeaders === <span class=\"literal\">null</span>) ? <span class=\"string\">''</span> : <span class=\"string\">'\\nx-cors-headers: '</span> + <span class=\"built_in\">JSON</span>.stringify(corsHeaders)),</span><br><span class=\"line\">    &#123;<span class=\"attr\">status</span>: <span class=\"number\">200</span>, <span class=\"attr\">headers</span>: myHeaders&#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;protocol, pathname&#125; = <span class=\"keyword\">new</span> URL(request.url);</span><br><span class=\"line\">  <span class=\"comment\">// In the case of a \"Basic\" authentication, the exchange MUST happen over an HTTPS (TLS) connection to be secure.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (protocol !== <span class=\"string\">'https:'</span> || request.headers.get(<span class=\"string\">'x-forwarded-proto'</span>) !== <span class=\"string\">'https'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BadRequestException(<span class=\"string\">'Must use a HTTPS connection.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (pathname) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/favicon.ico'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/robots.txt'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">status</span>: <span class=\"number\">204</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> homeRequest(request);</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Not 100% sure if this is a good idea…</span></span><br><span class=\"line\">      <span class=\"comment\">// Right now all OPTIONS requests are just simply replied to because otherwise they fail.</span></span><br><span class=\"line\">      <span class=\"comment\">// This is necessary because apparently, OPTIONS requests do not carry the `x-cors-proxy-api-key` header so this can not be authorized.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (request.method === <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">          headers: fix(<span class=\"keyword\">new</span> Headers(), request, <span class=\"literal\">true</span>),</span><br><span class=\"line\">          status: <span class=\"number\">200</span>,</span><br><span class=\"line\">          statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// The \"x-cors-proxy-api-key\" header is sent when authenticated.</span></span><br><span class=\"line\">      <span class=\"comment\">//if (request.headers.has('x-cors-proxy-api-key')) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// Throws exception when authorization fails.</span></span><br><span class=\"line\">        <span class=\"comment\">//const activeApiKey = verifyCredentials(request);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Only returns this response when no exception is thrown.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxyRequest(request);</span><br><span class=\"line\">      <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Not authenticated.</span></span><br><span class=\"line\">      <span class=\"comment\">//throw new UnauthorizedException('Valid x-cors-proxy-api-key header has to be provided.');</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"keyword\">async</span> event =&gt; &#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    handleRequest(event.request).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> message = error.reason || error.stack || <span class=\"string\">'Unknown Error'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(message, &#123;</span><br><span class=\"line\">        status: error.status || <span class=\"number\">500</span>,</span><br><span class=\"line\">        statusText: error.statusText || <span class=\"literal\">null</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain;charset=UTF-8'</span>,</span><br><span class=\"line\">          <span class=\"comment\">// Disables caching by default.</span></span><br><span class=\"line\">          <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'no-store'</span>,</span><br><span class=\"line\">          <span class=\"comment\">// Returns the \"Content-Length\" header for HTTP HEAD requests.</span></span><br><span class=\"line\">          <span class=\"string\">'Content-Length'</span>: message.length,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>部署结果: <a href=\"https://cors-anywhere.weiyigeek.workers.dev/\" target=\"_blank\" rel=\"noopener\">https://cors-anywhere.weiyigeek.workers.dev/</a></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817113707.png\" alt=\"WeiyiGeek.cloudflare-cors-anywhere-code\" title=\"\" class=\"\">\n                <p>WeiyiGeek.cloudflare-cors-anywhere-code</p>\n            </figure>\n<p>温馨提示: cloudflare 构建无服务器应用程序免费版本每天限额10万次请求，所有为了避免其它 people 恶意使用，请在使用时设置访问白名单, 上述源码来源于 (<a href=\"https://github.com/chrisspiegl/cloudflare-cors-anywhere)。\" target=\"_blank\" rel=\"noopener\">https://github.com/chrisspiegl/cloudflare-cors-anywhere)。</a></p>\n<p>温馨提示: 除了使用 cloudflare 还可以使用 Vercel 免费部署node.js项目解决跨域问题，你可参考该项目 (<a href=\"https://github.com/Dedicatus546/cors-server\" target=\"_blank\" rel=\"noopener\">https://github.com/Dedicatus546/cors-server</a>) ，此处就不在累述。</p>\n<p><br/> </p>\n<p><strong>方式2.有公网VPS、服务器</strong><br>描述: 由于我自己有VPS所以就不借用 cloudflare 与 Vercel，因为其国内网络原因，时而通畅时而有缓慢 , 此处我将使用Nginx服务在blog.conf配置Nginx文件中加入如下location指令片段</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https - www.weiyigeek.top</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen       80;</span><br><span class=\"line\">  listen       443 ssl http2;</span><br><span class=\"line\">  server_name  blog.weiyigeek.top;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\"># CORS</span></span><br><span class=\"line\">  add_header Access-Control-Allow-Origin <span class=\"string\">'*.weiyigeek.top'</span>;</span><br><span class=\"line\">  add_header Access-Control-Allow-Methods <span class=\"string\">'GET,POST,OPTIONS'</span>;</span><br><span class=\"line\">  add_header Access-Control-Allow-Headers <span class=\"string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk Auth Use</span></span><br><span class=\"line\">  location /github &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$request_method</span> = <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> 204;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    proxy_pass https://github.com/; <span class=\"comment\"># 注意尾部斜杠不能少</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">  error_page  403          /warn/403.html;</span><br><span class=\"line\">  error_page  404          /warn/404.html;</span><br><span class=\"line\">  error_page  500 502 503  /warn/500.html;</span><br><span class=\"line\">  error_page  504          /warn/504.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置完成后检测blog.conf配置以及重载nginx服务 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后修改Hexo 主题中的 _config.yaml 将 Gitalk 的 proxy 配置为 <code>proxy: /github/login/oauth/access_token</code> 即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gittalk 评论系统</span></span><br><span class=\"line\">gitalk:</span><br><span class=\"line\">  <span class=\"built_in\">enable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  owner: WeiyiGeek  <span class=\"comment\"># github账号</span></span><br><span class=\"line\">  repo: blogtalk    <span class=\"comment\"># 留言仓库</span></span><br><span class=\"line\">  proxy: /github/login/oauth/access_token <span class=\"comment\"># 关键点 （前台请求是https://blog.weiyigeek.top/github/login/oauth/access_token, 而实际请求是https://github.com/login/oauth/access_token，所以解决了跨域问题）</span></span><br><span class=\"line\">  oauth:</span><br><span class=\"line\">    client_id: 8d8e965c******97026d3       <span class=\"comment\"># Github App Auth ID </span></span><br><span class=\"line\">    client_secret: e9c6141cb1f02f721********d01cb4d7a8f069 <span class=\"comment\">#  Github App Auth secret</span></span><br><span class=\"line\">  perPage: 15</span><br></pre></td></tr></table></figure>\n<p>之后，我们需要批量初始每篇文章issue根据其路径<code>/2020/3-20-658.html</code>，此处采用了<code>gitalk-auto-init.js</code>脚本进行批量初始化文章issue。</p>\n<p>温馨提示: 下述 <code>gitalk-auto-init.js</code> 脚本可以通过如下连接( <a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> )进行获取</p>\n<p>脚本依赖:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -S hexo-generator-sitemap</span><br><span class=\"line\">$ npm i -D md5 moment request xml-parser</span><br><span class=\"line\">+ moment@2.29.2</span><br><span class=\"line\">+ request@2.88.2</span><br><span class=\"line\">+ md5@2.3.0</span><br><span class=\"line\">+ xml-parser@1.2.1</span><br><span class=\"line\">added 55 packages from 70 contributors in 8.467s</span><br></pre></td></tr></table></figure></p>\n<p>配置运行:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gitalk-auto-init.js 脚本部分片段</span></span><br><span class=\"line\"><span class=\"comment\">// 配置信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  username: <span class=\"string\">'weiyigeek'</span>,   <span class=\"comment\">// GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span></span><br><span class=\"line\">  repo: <span class=\"string\">\"blogtalk\"</span>,         <span class=\"comment\">// 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span></span><br><span class=\"line\">  token: <span class=\"string\">'ghp_wnpWqL********6RIf0NR5iD'</span>,   <span class=\"comment\">// 前面在Github中的 personal access token</span></span><br><span class=\"line\">  sitemap: path.join(__dirname, <span class=\"string\">'./public/sitemap.xml'</span>), <span class=\"comment\">// 自己站点的 sitemap 文件地址</span></span><br><span class=\"line\">  cache: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class=\"line\">  gitalkCacheFile: path.join(__dirname, <span class=\"string\">'./gitalk-init-cache.json'</span>), <span class=\"comment\">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class=\"line\">  gitalkErrorFile: path.join(__dirname, <span class=\"string\">'./gitalk-init-error.json'</span>), <span class=\"comment\">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sitemap.xml 示例</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;urlset xmlns=<span class=\"string\">\"http://www.sitemaps.org/schemas/sitemap/0.9\"</span>&gt;</span><br><span class=\"line\">    &lt;url&gt;</span><br><span class=\"line\">    &lt;loc&gt;https:<span class=\"comment\">//blog.weiyigeek.top/2020/5-28-588.html&lt;/loc&gt;</span></span><br><span class=\"line\">    &lt;lastmod&gt;<span class=\"number\">2022</span><span class=\"number\">-08</span><span class=\"number\">-15</span>T14:<span class=\"number\">39</span>:<span class=\"number\">08.638</span>Z&lt;<span class=\"regexp\">/lastmod&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;title&gt;Ingress-Nginx进阶学习实践扩充配置记录&lt;/</span>title&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/url&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ....</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/u</span>rlset&gt;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817123646.png\" alt=\"WeiyiGeek.批量初始化文章issue\" title=\"\" class=\"\">\n                <p>WeiyiGeek.批量初始化文章issue</p>\n            </figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------- 运行结果 ---------</span><br><span class=\"line\"></span><br><span class=\"line\">报错数据： 1 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-error.json。</span><br><span class=\"line\">本次成功： 27 条。</span><br><span class=\"line\">写入缓存： 90 条，已初始化 63 条，本次成功： 27 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-cache.json。</span><br></pre></td></tr></table></figure></p>\n<p>我们也可以通过 blogtalk 项目中 issue (<a href=\"https://github.com/WeiyiGeek/blogtalk/issues\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/blogtalk/issues</a>) 查看初始化结果以及最新评论。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817125424.png\" alt=\"WeiyiGeek.blogtalk-issue\" title=\"\" class=\"\">\n                <p>WeiyiGeek.blogtalk-issue</p>\n            </figure>\n<p>在初始化issue完成之后，我们可以找到一篇 <a href=\"https://blog.weiyigeek.top/about/\">https://blog.weiyigeek.top/about/</a> 文章进行留言验证。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220817124230.png\" alt=\"WeiyiGeek.Gitalk 留言验证\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Gitalk 留言验证</p>\n            </figure>\n<p><strong>首发地址</strong>: <a href=\"https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Blog","path":"api/categories/Blog.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"Gitalk","path":"api/tags/Gitalk.json"}]}