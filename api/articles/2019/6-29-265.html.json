{"title":"Ansible模块介绍","slug":"系统运维/自动化运维/Ansible/Ansible模块介绍","date":"2019-06-29T06:34:30.000Z","updated":"2023-01-31T02:29:10.467Z","url":"2019/6-29-265.html","path":"api/articles/2019/6-29-265.html.json","covers":["https://img.weiyigeek.top/2019/20190724161650.png","https://img.weiyigeek.top/2019/20190724164845.png","https://img.weiyigeek.top/2019/20190725094902.png","https://img.weiyigeek.top/2019/20190725104017.png","https://img.weiyigeek.top/2019/20190725111300.png","https://img.weiyigeek.top/2019/1/20190726120542.png","https://img.weiyigeek.top/2019/1/20190726141122.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><p>描述：ansible使用<code>ansible-doc --list</code>可以看见所有的模块,<code>ansble-doc -s</code>模块名称显示模块使用详情;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-doc --list</span><br><span class=\"line\">ansible-doc --list | grep <span class=\"string\">\"ping\"</span></span><br></pre></td></tr></table></figure></p>\n<p>模块名称及作用一览：</p>\n<ul>\n<li>fetch 模块：进行文件拉取</li>\n<li>copy 模块：进行文件/内容的拷贝</li>\n<li>file 模块：进行对文件/目录进行创建与操作</li>\n<li>blockinfile 模块：在指定的文件中插入”一段文本”</li>\n</ul>\n<h4 id=\"0x01-常使用模块介绍\"><a href=\"#0x01-常使用模块介绍\" class=\"headerlink\" title=\"0x01 常使用模块介绍\"></a>0x01 常使用模块介绍</h4><h4 id=\"文件操作类模块\"><a href=\"#文件操作类模块\" class=\"headerlink\" title=\"文件操作类模块\"></a>文件操作类模块</h4><h5 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h5><p>描述：copy模块的作用就是拷贝文件</p>\n<p>模块参数查看：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src参数    ：用于指定需要copy的文件或目录</span><br><span class=\"line\">dest参数  ：用于指定文件将被拷贝到远程主机的哪个目录中，dest为必须参数</span><br><span class=\"line\">content参数  ：当不使用src指定拷贝的文件时，可以使用content直接指定文件内容，src与content两个参数必有其一，否则会报错。</span><br><span class=\"line\"></span><br><span class=\"line\">force参数  :  当远程主机的目标路径中已经存在同名文件，并且与ansible主机中的文件内容不同时，是否强制覆盖，可选值有yes和no，默认值为yes，表示覆盖，如果设置为no，则不会执行覆盖拷贝操作，远程主机中的文件保持不变。</span><br><span class=\"line\"></span><br><span class=\"line\">backup参数 :  当远程主机的目标路径中已经存在同名文件，并且与ansible主机中的文件内容不同时，是否对远程主机的文件进行备份，可选值有yes和no，当设置为yes时，会先备份远程主机中的文件，然后再将ansible主机中的文件拷贝到远程主机。</span><br><span class=\"line\"></span><br><span class=\"line\">owner参数 : 指定文件拷贝到远程主机后的属主，但是远程主机上必须有对应的用户，否则会报错。</span><br><span class=\"line\">group参数 : 指定文件拷贝到远程主机后的属组，但是远程主机上必须有对应的组，否则会报错。</span><br><span class=\"line\">mode参数 : 指定文件拷贝到远程主机后的权限，如果你想将权限设置为<span class=\"string\">\"rw-r--r--\"</span>，则可以使用mode=0644表示，如果你想要在user对应的权限位上添加执行权限，则可以使用mode=u+x表示。</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)将ansible主机中/testdir/copytest文件复制到远程主机的/opt目录下</span></span><br><span class=\"line\"><span class=\"comment\">#注意如果copytest文件已经存在于远程主机的/opt目录中，并且远程主机中的copytest与ansible主机中copytest文件内容不同远程主机中的copytest文件将被覆盖。</span></span><br><span class=\"line\">ansible testA -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/\"</span>  <span class=\"comment\">#src代表的ansible主机 / dest 代表了受管控的主机</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2)在远程主机的/opt目录下生成文件test，test文件中有两行文本，第一行文本为aaa，第二行为bbb</span></span><br><span class=\"line\"><span class=\"comment\">#当使用content指定文件内容时，dest参数对应的值必须是一个文件，而不能是一个路径。</span></span><br><span class=\"line\">ansible testA -m copy -a <span class=\"string\">'content=\"aaa\\nbbb\\n\" dest=/opt/test.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3)将ansible主机中/testdir/copytest文件复制到远程主机的/opt目录中时</span></span><br><span class=\"line\"><span class=\"comment\">#远程主机中已经存在文件，并且文件内容与ansible主机中文件的内容不一致，则不执行拷贝操作远程主机中的/opt/copytest文件内容不会被改变。</span></span><br><span class=\"line\">ansible test70 -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/ force=no\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(4)执行拷贝操作之前，会将远程主机中的原文件重命名，以作备份，然后再进行拷贝操作</span></span><br><span class=\"line\">ansible test70 -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/ backup=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(5)拷贝文件设置对应用户和组以及权限</span></span><br><span class=\"line\">ansible test70 -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/ owner=zsy\"</span></span><br><span class=\"line\">ansible test70 -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/ group=zsy\"</span></span><br><span class=\"line\">ansible test70 -m copy -a <span class=\"string\">\"src=/testdir/copytest dest=/opt/ group=zsy\"</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190724161650.png\" alt=\"WeiyiGeek.示例2.文件内容\" title=\"\" class=\"\">\n                <p>WeiyiGeek.示例2.文件内容</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h5><p>描述: 将远程主机上的文件拉取到本地之中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible weiyigeek-226 -m fetch -a <span class=\"string\">\"src=/home/weiyigeek/prometheus/k8s_ca.crt dest=/tmp\"</span></span><br><span class=\"line\">ansible weiyigeek-226 -m fetch -a <span class=\"string\">\"src=/home/weiyigeek/prometheus/k8s_token dest=/tmp\"</span></span><br><span class=\"line\">weiyigeek-226 | CHANGED =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"checksum\"</span>: <span class=\"string\">\"22c40a4f83ad82343affbab3f8a732c14accbdcd\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dest\"</span>: <span class=\"string\">\"/tmp/k8s_token/weiyigeek-226/home/weiyigeek/prometheus/k8s_token\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"md5sum\"</span>: <span class=\"string\">\"c9d780a62db497bbfd995b548887e4ed\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remote_checksum\"</span>: <span class=\"string\">\"22c40a4f83ad82343affbab3f8a732c14accbdcd\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remote_md5sum\"</span>: null</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h5><p>描述：file模块的作用完成一些对文件的基本操作，比如创建文件或目录、删除文件或目录、修改文件权限等<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path参数 ：必须参数, 用于指定要操作的文件或目录</span><br><span class=\"line\">state参数 ：此参数非常灵活，当我们想要创建软链接文件时，需将state设置为link，想要创建硬链接文件时，需要将state设置为hard，当我们想要删除一个文件时（删除时不用区分目标是文件、目录、还是链接），则需要将state的值设置为absent，<span class=\"string\">\"absent\"</span>为缺席之意，当我们想让操作的目标<span class=\"string\">\"缺席\"</span>时，就表示我们想要删除目标。</span><br><span class=\"line\">src参数 ：当state设置为link或者hard时，表示我们想要创建一个软链或者硬链，所以，我们必须指明软链或硬链链接的哪个文件，通过src参数即可指定链接源。</span><br><span class=\"line\">force参数  :  当state=link的时候，可配合此参数强制创建链接文件，当force=yes时，表示强制创建链接文件，</span><br><span class=\"line\">owner参数 ：用于指定被操作文件的属主</span><br><span class=\"line\">group参数 ：用于指定被操作文件的属组</span><br><span class=\"line\">mode参数：用于指定被操作文件的权限</span><br><span class=\"line\">recurse参数：当要操作的文件为目录，将recurse设置为yes，可以递归的修改目录中文件的属性。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（1）在test70主机上创建一个名为testfile的文件，如果testfile文件已经存在，则会更新文件的时间戳，与touch命令的作用相同。\t</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/testfile state=touch\"</span></span><br><span class=\"line\"><span class=\"comment\">#（2）在test70主机上创建一个名为testdir的目录，如果testdir目录已经存在，则不进行任何操作。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/testdir state=directory\"</span></span><br><span class=\"line\"><span class=\"comment\"># (3) 在test70上为testfile文件创建软链接文件，软链接名为linkfile，执行下面命令的时候，testfile已经存在。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/linkfile src=/testdir/testfile state=link\"</span></span><br><span class=\"line\"><span class=\"comment\"># (4) 在test70上为testfile文件创建硬链接文件，硬链接名为hardfile，执行下面命令的时候，testfile已经存在。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/hardfile state=hard src=/testdir/testfile\"</span></span><br><span class=\"line\"><span class=\"comment\"># (5) 删除远程 机器上的指定文件或目录</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/testdir state=absent\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#（6）在创建链接文件时，如果源文件不存在，或者链接文件与其他文件同名时，强制覆盖同名文件或者创建链接文件，参考上述force参数的解释。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/linkfile state=link src=sourcefile force=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(7)在创建文件或目录的时候指定属主，或者修改远程主机上的文件或目录的属主。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abc state=touch owner=zsy\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abc owner=zsy\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abc state=directory owner=zsy\"</span></span><br><span class=\"line\"><span class=\"comment\">#(8)在创建文件或目录的时候指定属组，或者修改远程主机上的文件或目录的属组。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb state=touch group=zsy\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb group=zsy\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb state=directory group=zsy\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#(9)在创建文件或目录的时候指定权限，或者修改远程主机上的文件或目录的权限。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb state=touch mode=0644\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb mode=0644\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/binfile mode=4700\"</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abb state=directory mode=0644\"</span></span><br><span class=\"line\"><span class=\"comment\">#(10)当操作远程主机中的目录时，同时递归的将目录中的文件的属主属组都设置为zsy。</span></span><br><span class=\"line\">ansible test70 -m file -a <span class=\"string\">\"path=/testdir/abd state=directory owner=zsy group=zsy recurse=yes\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"blockinfile\"><a href=\"#blockinfile\" class=\"headerlink\" title=\"blockinfile\"></a>blockinfile</h5><p>描述：blockinfile模块可以帮助我们在指定的文件中插入”一段文本”，这段文本是被标记过的以便在以后的操作中可以通过”标记”找到这段文本，然后修改或者删除它<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path参数 ：必须参数，指定要操作的文件。</span><br><span class=\"line\">block参数 ：想要操作的那<span class=\"string\">\"一段文本\"</span>别名叫<span class=\"string\">\"content\"</span>使用content或block的作用是相同的。</span><br><span class=\"line\"></span><br><span class=\"line\">marker参数 ：假如我们想要在指定文件中插入一段文本，ansible会自动为这段文本添加两个标记，一个开始标记，一个结束标记</span><br><span class=\"line\"><span class=\"comment\">#默认情况下，开始标记为# BEGIN ANSIBLE MANAGED BLOCK，结束标记为# END ANSIBLE MANAGED BLOCK</span></span><br><span class=\"line\"></span><br><span class=\"line\">state参数 : 两个可选值present与absent,如果对应的文件中已经存在对应标记的文本并且将state的值设置为absent，则表示从文件中删除对应标记的段落。</span><br><span class=\"line\"></span><br><span class=\"line\">insertafter参数 ：在插入一段文本时，默认会在文件的末尾插入文本,将文本插入在某一行的后面，可以使用此参数指定对应的行</span><br><span class=\"line\">insertbefore参数 ：在插入一段文本时，默认会在文件的末尾插入文本,将文本插入在某一行的前面，可以使用此参数指定对应的行</span><br><span class=\"line\"></span><br><span class=\"line\">backup参数 ：是否在修改文件之前对文件进行备份。</span><br><span class=\"line\">create参数 ：当要操作的文件并不存在时，是否创建对应的文件。</span><br></pre></td></tr></table></figure><br>我们可以使用marker参数自定义”标记”，比如，marker=#{mark}test 这样设置以后，<code>开始标记变成了# BEGIN test，结束标记变成了# END test</code>，没错{mark}会自动被替换成开始标记和结束标记中的BEGIN和END，<code>我们也可以插入很多段文本为不同的段落添加不同的标记</code>，下次通过对应的标记即可找到对应的段落。</p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（1）将管理端的/etc/rc.d/rc.local文件复制到/tmp目录中，并且在testA受空主机中的/tmp/rc.local文件尾部插入自启脚本</span></span><br><span class=\"line\">ansible testA -m copy -a <span class=\"string\">\"src=/etc/rc.d/rc.local dest=/tmp/\"</span></span><br><span class=\"line\">ansible testA -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local block=\"systemctl start mariadb\\nsystemctl start httpd\" '</span> <span class=\"comment\">#使用path参数指定要操作的文件，使用block参数指定文本块内容，</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190724164845.png\" alt=\"WeiyiGeek.blockinfile\" title=\"\" class=\"\">\n                <p>WeiyiGeek.blockinfile</p>\n            </figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(2)自定义标记，但是自定义的标记仍然要\"成对出现\"，需要有开始标记和结束标记，示例如下</span></span><br><span class=\"line\">ansible testA  -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local block=\"systemctl start mariadb\\nsystemctl start httpd\" marker=\"#&#123;mark&#125; serivce to start\" '</span></span><br><span class=\"line\"><span class=\"comment\"># 10.10.107.221 | CHANGED =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#     \"ansible_facts\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#         \"discovered_interpreter_python\": \"/usr/bin/python\"</span></span><br><span class=\"line\"><span class=\"comment\">#     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">#     \"changed\": true,</span></span><br><span class=\"line\"><span class=\"comment\">#     \"msg\": \"Block inserted\"</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#上例中的\"&#123;mark&#125;\" 会自动被替换成开始标记中的\"BEGIN\" 和结束标记中的 \"END\"，如果文件中不存在同名标记的文本块，那么文件的末尾将会出现如下文本块。</span></span><br><span class=\"line\"><span class=\"comment\">#BEGIN serivce to start</span></span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\"><span class=\"comment\">#END serivce to start</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3) 执行同样的ansible命令,将block设置为空这时候blockinfile模块会删除对应标记的文本块</span></span><br><span class=\"line\">ansible testA -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local block=\" \" marker=\"#&#123;mark&#125; serivce to start\" '</span>  <span class=\"comment\">#或者采用下面语句</span></span><br><span class=\"line\">ansible testA -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local marker=\"#&#123;mark&#125; serivce to start\" t\" state=absent '</span> <span class=\"comment\">#state值设置为absent，表示删除对应标记的文本</span></span><br><span class=\"line\"><span class=\"comment\">#执行后效果</span></span><br><span class=\"line\"><span class=\"comment\"># BEGIN serivce to start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># END serivce to start</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(4)插入在文件开头，或者根据正则表达式去匹配对应的行，然后将文本块插入到匹配到的行的前头或者后头</span></span><br><span class=\"line\"><span class=\"comment\">#插入文档开头</span></span><br><span class=\"line\">ansible test70 -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local block=\"####blockinfile test####\"  marker=\"#&#123;mark&#125; test\" insertbefore=BOF'</span>  <span class=\"comment\">#BOF表示Begin Of File</span></span><br><span class=\"line\"><span class=\"comment\">#插入文档结尾</span></span><br><span class=\"line\">ansible test70 -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local block=\"####blockinfile test####\"  marker=\"#&#123;mark&#125; test\" insertafter=EOF'</span></span><br><span class=\"line\"><span class=\"comment\">#使用如下命令表示使用正则表达式匹配行，将文本块插入到 \"以#!/bin/bash开头的行\" 之后 (值得学习)</span></span><br><span class=\"line\">ansible test70 -m blockinfile -a <span class=\"string\">'path=/testdir/rc.local block=\"####blockinfile test####\"  marker=\"#&#123;mark&#125; test reg\" insertafter=\"^#!/bin/bash\" '</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(5)使用backup参数，可以在操作修改文件之前，对文件进行备份，备份的文件会在原文件名的基础上添加时间戳\t</span></span><br><span class=\"line\">ansible testA -m blockinfile -a <span class=\"string\">'path=/tmp/rc.local marker=\"#&#123;mark&#125; serivce to start\" state=absent backup=yes'</span></span><br><span class=\"line\"><span class=\"comment\">#执行后会删除示例3的备注</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(6)使用create参数，如果指定的文件不存在，则创建它</span></span><br><span class=\"line\">ansible testA -m blockinfile -a <span class=\"string\">'path=/testdir/test block=\"test\" marker=\"#&#123;mark&#125; test\" create=yes'</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"lineinfile\"><a href=\"#lineinfile\" class=\"headerlink\" title=\"lineinfile\"></a>lineinfile</h5><p>描述:lineinfile模块，确保”某一行文本”存在于指定的文件中，或者确保从文件中删除指定的”文本”（即确保指定的文本不存在于文件中），还可以根据正则表达式，替换”某一行文本”。</p>\n<p>参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">path参数 ：必须参数，指定要操作的文件。</span><br><span class=\"line\">line参数 :  使用此参数指定文本内容。</span><br><span class=\"line\"></span><br><span class=\"line\">regexp参数 ：使用正则表达式匹配对应的行，当替换文本时如果有多行文本都能被匹配，则只有最后面被匹配到的那行文本才会被替换，当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除。</span><br><span class=\"line\"></span><br><span class=\"line\">state参数：当想要删除对应的文本时将state参数的值设置为absent就可以删除，state的默认值为present;</span><br><span class=\"line\"></span><br><span class=\"line\">insertafter参数：EOF 表示插入到文档的末尾 或者 正则找寻</span><br><span class=\"line\">insertbefore参数：EOF 表示插入到文档的末尾 或者 正则找寻</span><br><span class=\"line\"></span><br><span class=\"line\">backrefs参数：默认情况下，当根据正则替换文本时，即使regexp参数中的正则存在分组，在line参数中也不能对正则中的分组进行引用，除非将backrefs参数的值设置为yes，backrefs=yes表示开启后向引用，这样，line参数中就能对regexp参数中的分组进行后向引用了，这样说不太容易明白，参考下面的示例命令比较直观一点，backrefs=yes除了能够开启后向引用功能，还有另一个作用，默认情况下，当使用正则表达式替换对应行时，如果正则没有匹配到任何的行，那么line对应的内容会被插入到文本的末尾，不过，如果使用了backrefs=yes，情况就不一样了，当使用正则表达式替换对应行时，同时设置了backrefs=yes，那么当正则没有匹配到任何的行时，则不会对文件进行任何操作，相当于保持原文件不变，</span><br><span class=\"line\"></span><br><span class=\"line\">backup参数：是否在修改文件之前对文件进行备份。</span><br><span class=\"line\">create参数：当要操作的文件并不存在时，是否创建对应的文件。</span><br></pre></td></tr></table></figure></p>\n<p>使用/testdir/test文件作为被操作的文件，test文件内容如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat /testdir/test</span></span><br><span class=\"line\">Hello ansible,Hiiii</span><br><span class=\"line\">lineinfile -</span><br><span class=\"line\">Ensure a particular line is <span class=\"keyword\">in</span> a file,</span><br><span class=\"line\">lineinfile -</span><br><span class=\"line\">or replace an existing line using a back-referenced regular expression.</span><br></pre></td></tr></table></figure></p>\n<p>基础案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.确保指定的\"一行文本\"存在于文件中，如果指定的文本本来就存在于文件中，则不做任何操作，如果不存在默认在文件的末尾插入这行文本，</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test line=\"test text\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#(2)根据正则表达式替换\"某一行\"，如果不止一行能够匹配正则，那么只有最后一个匹配正则的行才会被替换，被匹配行会被替换成line参数指定的内容，但是如果指定的表达式没有匹配到任何一行，那么line中的内容会被添加到文件的最后一行。</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test regexp=\"^line\" line=\"test text\" '</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3)如下命令表示根据正则表达式替换\"某一行\"，如果不止一行能够匹配正则，那么只有最后一个匹配正则的行才会被替换，被匹配行会被替换成line参数指定的内容，但是如果指定的表达式没有匹配到任何一行，那么则不对文件进行任何操作。</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test regexp=\"^line\" line=\"test text\" backrefs=yes '</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#(4)根据line参数的内容删除行，如果文件中有多行都与line参数的内容相同，那么这些相同的行都会被删除。</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test line=\"lineinfile -\" state=absent'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#(5)根据正则表达式删除对应行，如果有多行都满足正则表达式，那么所有匹配的行都会被删除</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test regexp=\"^lineinfile\" state=absent'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认情况下lineinfile模块不支持后向引用（如果对后向引用不是特别了解，可以参考本站中的另一片文章 Linux正则之分组与后向引用）</span></span><br><span class=\"line\"><span class=\"comment\">#如果将backrefs设置为yes，表示开启支持后向引用，使用如下命令，可以将test示例文件中的\"Hello ansible,Hiiii\"替换成\"Hiiii\"，如果不设置backrefs=yes，则不支持后向引用，那么\"Hello ansible,Hiiii\"将被替换成\"\\2\"</span></span><br><span class=\"line\">ansible test70 -m lineinfile -a <span class=\"string\">'path=/testdir/test regexp=\"(H.&#123;4&#125;).*(H.&#123;4&#125;)\" line=\"\\2\" backrefs=yes'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h5><p>描述：find模块可以帮助我们在远程主机中查找符合条件的文件，就像find命令一样。</p>\n<p>命令参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paths参数 ：必须参数，指定在哪个目录中查找文件，可以指定多个路径，路径间用逗号隔开，此参数别名path / name可以代替paths。</span><br><span class=\"line\">recurse参数 :设置为yes时(默认)，表示在指定目录中递归的查找文件</span><br><span class=\"line\">hidden参数 ：默认情况下，隐藏文件会被忽略，当hidden参数的值设置为yes时，才会查找隐藏文件。</span><br><span class=\"line\"></span><br><span class=\"line\">file_type参数 : 默认ansible只会根据条件查找<span class=\"string\">\"文件\"</span>，并不会查找<span class=\"string\">\"目录\"</span>或<span class=\"string\">\"软链接\"</span>等文件类型，指定查找的文件类型any、directory、file、link</span><br><span class=\"line\"></span><br><span class=\"line\">patterns参数 ： 使用此参数指定需要查找的文件名称，支持使用shell（比如通配符）或者正则表达式去匹配文件名称</span><br><span class=\"line\"></span><br><span class=\"line\">use_regex参数：默认情况下，find模块不会使用正则表达式去解析patterns参数中对应的内容，当use_regex设置为yes时，表示使用python正则解析patterns参数中的表达式，否则，使用glob通配符解析patterns参数中的表达式。</span><br><span class=\"line\"></span><br><span class=\"line\">contains参数：使用此参数可以根据文章内容查找文件，此参数的值为一个正则表达式，find模块会根据对应的正则表达式匹配文件内容。（重要）</span><br><span class=\"line\"></span><br><span class=\"line\">age参数 ：使用此参数可以根据时间范围查找文件，默认以文件的mtime为准与指定的时间进行对比，比如如果想要查找mtime在3天之前的文件，那么可以设置age=3d,如果想要查找mtime在3天以内的文件，可以设置age=-3d，这里所说的3天是按照当前时间往前推3天，可以使用的单位有秒(s)、分(m)、时(h)、天(d)、星期(w)。</span><br><span class=\"line\"></span><br><span class=\"line\">age_stamp参数 ：文件的时间属性中有三个时间种类，atime、ctime、mtime，当我们根据时间范围查找文件时，可以指定以哪个时间种类为准，当根据时间查找文件时，默认以mtime为准。</span><br><span class=\"line\"></span><br><span class=\"line\">size参数 ：使用此参数可以根据文件大小查找文件，比如，如果想要查找大于3M的文件，那么可以设置size=3m,如果想要查找小于50k的文件，可以设置size=-50k，可以使用的单位有t、g、m、k、b。</span><br><span class=\"line\"></span><br><span class=\"line\">get_checksum参数 ：当有符合查找条件的文件被找到时，会同时返回对应文件的sha1校验码，如果要查找的文件比较大，那么生成校验码的时间会比较长。</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中查找文件内容中包含abc字符串的文件，隐藏文件会被忽略，不会进行递归查找。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir contains=\".*abc.*\" '</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m find -a<span class=\"string\">'paths=/etc/ssh/ contains=\".*port\" get_checksum=yes'</span></span><br><span class=\"line\"><span class=\"comment\"># \"mode\": \"0600\",</span></span><br><span class=\"line\"><span class=\"comment\"># \"mtime\": 1559095047.9539292,</span></span><br><span class=\"line\"><span class=\"comment\"># \"nlink\": 1,</span></span><br><span class=\"line\"><span class=\"comment\"># \"path\": \"/etc/ssh/sshd_config\",</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#@在test70主机的/testdir目录以及其子目录中查找文件内容中包含abc字符串的文件，隐藏文件会被忽略。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir contains=\".*abc.*\" recurse=yes '</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中查找以.sh结尾的文件，包括隐藏文件，但是不包括目录或其他文件类型，不会进行递归查找。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir patterns=\"*.sh\" hidden=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中查找以.sh结尾的文件，包括隐藏文件，包括所有文件类型，比如文件、目录、或者软链接，但是不会进行递归查找。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir patterns=\"*.sh\" file_type=any hidden=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中查找以.sh结尾的文件，包括隐藏文件，包括所有文件类型，比如文件、目录、或者软链接，但是不会进行递归查找。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir patterns=\"*.sh\" file_type=any hidden=yes'</span></span><br><span class=\"line\"><span class=\"comment\"># mode\": \"0644\",</span></span><br><span class=\"line\"><span class=\"comment\"># \"mtime\": 1560235311.9034688,</span></span><br><span class=\"line\"><span class=\"comment\"># \"nlink\": 1,</span></span><br><span class=\"line\"><span class=\"comment\"># \"path\": \"/test.sh\",</span></span><br><span class=\"line\"><span class=\"comment\"># \"pw_name\": \"root\",</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中查找以.sh结尾的文件，只不过patterns对应的表达式为正则表达式，查找范围包括隐藏文件，包括所有文件类型，但是不会进行递归查找，不会对/testdir目录的子目录进行查找。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">'paths=/testdir patterns=\".*\\\\.sh\" use_regex=yes file_type=any hidden=yes'</span>  <span class=\"comment\">#重点</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中以及其子目录中查找mtime在4天以内的文件，不包含隐藏文件，不包含目录或软链接文件等文件类型。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">\"path=/testdir age=-4d recurse=yes\"</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m find -a <span class=\"string\">'paths=/root age=-4d recurse=yes'</span> | more</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中以及其子目录中查找atime在2星期以内的文件，不包含隐藏文件，不包含目录或软链接文件等文件类型。</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">\"path=/testdir age=-2w age_stamp=atime recurse=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中以及其子目录中查找大于2G的文件，不包含隐藏文件，不包含目录或软链接文件等文件类型。\t</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">\"paths=/testdir size=2g recurse=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机的/testdir目录中以及其子目录中查找以.sh结尾的文件，并且返回符合条件文件的sha1校验码，包括隐藏文件</span></span><br><span class=\"line\">ansible test70 -m find -a <span class=\"string\">\"paths=/testdir patterns=*.sh get_checksum=yes hidden=yes recurse=yes\"</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190725094902.png\" alt=\"WeiyiGeek.find-sum\" title=\"\" class=\"\">\n                <p>WeiyiGeek.find-sum</p>\n            </figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>patterns想要使用python的正则匹配，需要将use_regex参数的值设置为yes,否则采用通配符。</li>\n</ul>\n<p><br></p>\n<h5 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h5><p>描述：replace模块可以根据我们指定的正则表达式替换文件中的字符串，文件中所有被正则匹配到的字符串都会被替换。</p>\n<p>replace模块的常用参数</p>\n<ul>\n<li>path参数 ：必须参数，指定要操作的文件，2.3版本之前，只能使用dest, destfile, name指定要操作的文件，2.4版本中，仍然可以使用这些参数名，这些参数名作为path参数的别名使用。</li>\n<li>regexp参数 :  必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换。</li>\n<li>replace参数 ： 指定最终要替换成的字符串。</li>\n<li>backup参数 ：是否在修改文件之前对文件进行备份，最好设置为yes。</li>\n</ul>\n<p>实际案例操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#把test70主机中的/testdir/test文件中的所有ASM替换成asm</span></span><br><span class=\"line\">ansible test70 -m replace -a <span class=\"string\">'path=/testdir/test regexp=\"ASM\" replace=asm'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#把test70主机中的/testdir/test文件中的所有ASM替换成asm，但是在操作文件之前进行备份。</span></span><br><span class=\"line\">ansible test70 -m replace -a <span class=\"string\">'path=/testdir/test regexp=\"ASM\" replace=asm backup=yes'</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m replace -a <span class=\"string\">'path=/tmp/ip.txt regexp=\"10.10.10.2\" replace=\"192.168.1.1\" backup=yes'</span></span><br><span class=\"line\"><span class=\"built_in\">local</span> | CHANGED =&gt; &#123;  <span class=\"comment\">#执行成功</span></span><br><span class=\"line\">    <span class=\"string\">\"ansible_facts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"discovered_interpreter_python\"</span>: <span class=\"string\">\"/usr/bin/python\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"backup_file\"</span>: <span class=\"string\">\"/tmp/ip.txt.10069.2019-07-25@10:14:42~\"</span>,  <span class=\"comment\">#备份的文件</span></span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"1 replacements made\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"命令类模块\"><a href=\"#命令类模块\" class=\"headerlink\" title=\"命令类模块\"></a>命令类模块</h4><h5 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h5><p>描述：可以帮助我们在远程主机上执行命令,使用command模块在远程主机中执行命令时，不会经过远程主机的shell处理；</p>\n<p>注意事项：</p>\n<ul>\n<li>在使用command模块时，如果需要执行的命令中含有重定向、管道符等操作时，这些符号也会失效，比如<code>&quot;&lt;&quot;, \\&quot;&gt;\\&quot;, \\&quot;|\\&quot;, \\&quot;;\\&quot; 和 \\&quot;&amp;\\&quot;</code>这些符号，如果你需要这些功能，可以参考后面介绍的shell模块，</li>\n<li>如果远程节点是windows操作系统，则需要使用win_command模块。</li>\n</ul>\n<p>command模块的常用参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free_from : (Q)指定需要远程执行的命令,当我们想要在远程主机中执行ls命令时，直接写成ls即可</span><br><span class=\"line\"><span class=\"built_in\">chdir</span> :  指定一个目录在执行对应的命令之前，会先进入到<span class=\"built_in\">chdir</span>参数指定的目录中。</span><br><span class=\"line\">creates ：当指定的文件存在时，就不执行对应命令，比如如果/testdir/<span class=\"built_in\">test</span>文件存在，就不执行我们指定的命令。</span><br><span class=\"line\">removes ：与creates参数的作用正好相反，它的作用是当指定的文件不存在时，就不执行对应命令，</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)默认情况下ls出的结果是test70主机中root用户家目录中的文件列表</span></span><br><span class=\"line\">ansible test70 -m <span class=\"built_in\">command</span> -a \\<span class=\"string\">\"ls\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#(2)chdir参数表示执行命令之前，会先进入到指定的目录中，所以如下命令表示查看test70主机上/testdir目录中的文件列表</span></span><br><span class=\"line\"><span class=\"string\">ansible test70 -m command -a \\\"chdir=/testdir ls\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#(3)如下命令表示/testdir/test文件如果存在于远程主机中，则不执行对应命令，如果不存在才执行\\\"echo test\\\"命令</span></span><br><span class=\"line\"><span class=\"string\">ansible test70 -m command -a \\\"creates=/testdir/test echo test\\\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"variable\">$ansible</span> all -m command -a \"</span>ls  creates=/etc/hosts<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"># 10.10.107.221 | SUCCESS | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\"># skipped, since /etc/hosts exists</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># local | SUCCESS | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\"># skipped, since /etc/hosts exists</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 10.20.172.179 | SUCCESS | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\"># skipped, since /etc/hosts exists</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如下命令表示/testdir/test文件如果不存在于远程主机中，则不执行对应命令，如果存在，才执行\\\"echo test\\\"命令</span></span><br><span class=\"line\"><span class=\"string\">ansible test70 -m command -a \\\"removes=/testdir/test echo test\\\"</span></span><br><span class=\"line\"><span class=\"string\">ansible all -m command -a \"</span>ls  removes=/etc/hosts<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190725104017.png\" alt=\"WeiyiGeek.command存放则执行\" title=\"\" class=\"\">\n                <p>WeiyiGeek.command存放则执行</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h5><p>描述：帮助我们在远程主机上执行命令，与command模块不同的是，shell模块在远程主机中执行命令时会经过远程主机上的/bin/sh程序处理。</p>\n<p>与Command模块不同的是：它可以使用通配符以及管道符：比如\\”&lt;\\”, \\”&gt;\\”, \\”|\\”, \\”;\\” 和 \\”&amp;\\” 这些符号</p>\n<p>shell模块的常用参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free_form参数 ：必须参数，指定需要远程执行的命令，具体解释参考<span class=\"built_in\">command</span>模块。</span><br><span class=\"line\"><span class=\"built_in\">chdir</span> :  此参数的作用就是指定一个目录，在执行对应的命令之前，会先进入到<span class=\"built_in\">chdir</span>参数指定的目录中。</span><br><span class=\"line\">creates ：使用此参数指定一个文件，当指定的文件存在时，就不执行对应命令，(存在不执行/不存在则执行)</span><br><span class=\"line\">removes ：使用此参数指定一个文件，当指定的文件不存在时，就不执行对应命令，(存在执行/不存在不执行)</span><br><span class=\"line\">executable ：默认情况下，shell模块会调用远程主机中的/bin/sh去执行对应的命令，通常情况下，远程主机中的默认shell都是bash，使用其他类型的shell执行命令指定shell文件时，需要使用绝对路径。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用shell模块可以在远程服务器上执行命令，它支持管道与重定向等符号。</span></span><br><span class=\"line\">ansible test70 -m shell -a <span class=\"string\">\"chdir=/testdir echo test &gt; test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比如我们使用csh的语法定义了一个数字类型的变量TestNum，然后将TestNum变量的值重定向到了/testdir/TestNumFile</span></span><br><span class=\"line\"><span class=\"comment\"># 在bash中@符号不能用于定义变量，使用executable指定需要的shell类型。</span></span><br><span class=\"line\">ansible test70 -m shell -a <span class=\"string\">'executable=/bin/csh @ TestNum=666 ; echo $TestNum &gt; /testdir/TestNumFile'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定参数变量来进行echo输出</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -e <span class=\"string\">\"testvar=test\"</span> -m shell -a <span class=\"string\">\"echo &#123;&#123;testvar&#125;&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\"># local | CHANGED | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实际案例：</span></span><br><span class=\"line\"><span class=\"variable\">$ansible</span> all -m shell -a <span class=\"string\">\"ls -lh  removes=/etc/hosts\"</span></span><br><span class=\"line\"><span class=\"comment\"># 10.10.107.221 | CHANGED | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># total 4.0K</span></span><br><span class=\"line\"><span class=\"comment\"># -rw-r-----. 1 root root 1.8K May 13 14:15 profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10.20.172.179 | CHANGED | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># total 16K</span></span><br><span class=\"line\"><span class=\"comment\"># -rw-r--r--. 1 root root  431 Jul 11 15:45 fio.conf</span></span><br><span class=\"line\"><span class=\"comment\"># -rwxr-xr-x. 1 root root  603 Jul 12 15:51 install-docker.sh</span></span><br><span class=\"line\"><span class=\"comment\"># drwxr-xr-x. 3 root root 4.0K Jul 12 15:49 source</span></span><br><span class=\"line\"><span class=\"comment\"># -rwxr-xr-x. 1 root root  381 Jul 12 16:53 tar.sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># local | CHANGED | rc=0 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># total 4.0K</span></span><br><span class=\"line\"><span class=\"comment\"># -rw-r--r-- 1 root root 1.2K Jul 25 09:39 test.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 低权限用户利用 sudo 和 tee 命令追加内容到高用户的文件之中</span></span><br><span class=\"line\">ansible dtk8s -m shell -a <span class=\"string\">'echo \"192.168.1.31:/nask8sapp /nfsdisk-31 nfs defaults 0 0\"|sudo tee -a /etc/fstab'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h5><p>描述：帮助我们在远程主机上执行ansible主机上的脚本，也就是说脚本一直存在于ansible主机本地，不需要手动拷贝到远程主机后再执行。</p>\n<p>script模块的常用参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free_form参数 ：必须参数，指定需要执行的脚本，脚本位于ansible主机本地，并没有具体的一个参数名叫free_form，具体解释参考<span class=\"built_in\">command</span>模块。</span><br><span class=\"line\"><span class=\"built_in\">chdir</span>参数 :  此参数的作用就是指定一个远程主机中的目录，在执行对应的脚本之前，会先进入到<span class=\"built_in\">chdir</span>参数指定的目录中。</span><br><span class=\"line\">creates参数 ：使用此参数指定一个远程主机中的文件，当指定的文件存在时，就不执行对应脚本，可参考<span class=\"built_in\">command</span>模块中的解释。</span><br><span class=\"line\">removes参数 ：使用此参数指定一个远程主机中的文件，当指定的文件不存在时，就不执行对应脚本，可参考<span class=\"built_in\">command</span>模块中的解释。</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如下命令表示ansible主机中的/testdir/atest.sh脚本将在test70主机中执行，执行此脚本之前，会先进入到test70主机中的/opt目录</span></span><br><span class=\"line\">ansible test70 -m script -a \\<span class=\"string\">\"chdir=/opt /testdir/atest.sh\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如下命令表示，如果test70主机中的/opt/testfile文件已经存在，ansible主机中的/testdir/atest.sh脚本将不会在test70主机中执行，反之则执行。</span></span><br><span class=\"line\"><span class=\"string\">ansible test70 -m script -a \\\"creates=/opt/testfile /testdir/atest.sh\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如下命令表示，如果test70主机中的/opt/testfile文件不存在，ansible主机中的/testdir/atest.sh脚本将不会在test70主机中执行，反之则执行。</span></span><br><span class=\"line\"><span class=\"string\">ansible test70 -m script -a \\\"removes=/opt/testfile /testdir/atest.sh\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#基础示例</span></span><br><span class=\"line\"><span class=\"string\">ansible all -m script -a \"</span>removes=/etc/hostname /tmp/demo.sh<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"># cat 10.10.107.221.txt</span></span><br><span class=\"line\"><span class=\"string\"># root</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190725111300.png\" alt=\"WeiyiGeek.脚本执行\" title=\"\" class=\"\">\n                <p>WeiyiGeek.脚本执行</p>\n            </figure></p>\n<p><br></p>\n<h4 id=\"系统类操作模块\"><a href=\"#系统类操作模块\" class=\"headerlink\" title=\"系统类操作模块\"></a>系统类操作模块</h4><h5 id=\"cron\"><a href=\"#cron\" class=\"headerlink\" title=\"cron\"></a>cron</h5><p>描述：cron模块可以帮助我们管理远程主机中的计划任务，功能相当于crontab命令。</p>\n<p>在了解cron模块的参数之前，先写出一些计划任务的示例，示例如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1 表示每天的1点5分输出test字符</span></span><br><span class=\"line\">5 1 * * * <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>   分 / 时 / day / month / week</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2 表示每3天执行一次计划任务，于当天的1点1分执行，具体任务为输出test字符</span></span><br><span class=\"line\">1 1 */3 * * <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3 表示每次系统启动后需要执行一次计划任务，具体任务为输出test字符</span></span><br><span class=\"line\">@reboot <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4 表示每小时执行一次计划任务，具体任务 为输出test字符</span></span><br><span class=\"line\">@hourly <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<p>cron模块通常使用的参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minute参数：此计划任务中分钟设定位的值,默认为<span class=\"string\">\"*\"</span></span><br><span class=\"line\">hour参数：设置计划任务中小时设定位的值,值默认为<span class=\"string\">\"*\"</span></span><br><span class=\"line\">day参数：设置计划任务中日设定位的值，当不使用此参数时，日设定位的值默认为\\<span class=\"string\">\"*\\\"</span></span><br><span class=\"line\"><span class=\"string\">month参数：设置计划任务中月设定位的值，当不使用此参数时，月设定位的值默认为\\\"*\\\"</span></span><br><span class=\"line\"><span class=\"string\">weekday参数：设置计划任务中周几设定位的值，当不使用此参数时，周几设定位的值默认为\\\"*\\\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">user参数：设置当前计划任务属于哪个用户，当不使用此参数时，默认为管理员用户</span></span><br><span class=\"line\"><span class=\"string\">job参数：用于指定计划的任务中需要实际执行的命令或者脚本，比如上例中的\"</span><span class=\"built_in\">echo</span> <span class=\"built_in\">test</span><span class=\"string\">\"命令。</span></span><br><span class=\"line\"><span class=\"string\">name参数：用于设置计划任务的名称，计划任务的名称会在注释中显示，当不指定计划任务的名称时，ansible会默认为计划任务加入注释，注释的内容为#Ansible: None，假设指定计划任务的名称为test，那么注释的内容为#Ansible: test，在一台机器中，计划任务的名称应该具有唯一性，方便我们以后根据名称修改或删除计划任务。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">state参数：当计划任务有名称时根据名称修改或删除对应的任务，当删除计划任务时需要将state的值设置为absent</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">disabled参数：当计划任务有名称时根据名称使对应的任务\"</span>失效<span class=\"string\">\"（注释掉对应的任务），注意使用此参数时，除了需要指定任务的名称，还需要同时指定任务的job以及任务的时间设定，而且任务的时间设定必须和对应任务完全相同，否则在注释任务的同时，任务的时间设定会被修改，除非你确定这样做；</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">backup参数：如果此参数的值设置为yes，那么当修改或者删除对应的计划任务时，会先对计划任务进行备份，然后再对计划任务进行修改或者删除，cron模块会在远程主机的/tmp目录下创建备份文件，以crontab开头并且随机加入一些字符，具体的备份文件名称会在返回信息的backup_file字段中看到，推荐将此此参数设置为yes。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">special_time参数：比如计划任务的时间设定格式为@reboot或者@hourly，@reboot表示重启时执行，@hourly表示每小时执行一次，相当于设置成\\\"0 * * * *\\\" ，这种@开头的时间设定格式则需要使用special_time参数进行设置</span></span><br><span class=\"line\"><span class=\"string\">special_time参数的可用值有reboot(重启后)、yearly(每年)、annually(每年，与yearly相同)、monthly(每月)、weekly(每周)、daily(每天)、hourly(每时)。</span></span><br></pre></td></tr></table></figure><br>注意：当上述时间单位设定参数都未指定时，计划任务的时间设定默认会被设定为<code>&quot;* * * * *&quot;</code>，表示每分钟都会执行一次计划任务，所以在使用cron模块时，我们应该确定对应的时间参数设置正确。</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在test70主机上创建计划任务指定zsy用户，任务名称为\"test crontab\"，任务于每天1点5分执行，任务内容为输出test字符</span></span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\"user=zsy name='test crontab' minute=5 hour=1 job='echo test'\"</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m cron -a <span class=\"string\">\"name='Test' minute=1 job='echo \\`date +%H:%M:%S\\` &gt;&gt; /tmp/test.log'\"</span> <span class=\"comment\">#非常注意转义和参数后的空格</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行上述命令后，在test70主机中root用户下会有如下计划任务被创建</span></span><br><span class=\"line\"><span class=\"comment\">#Ansible: test crontab</span></span><br><span class=\"line\">5 1 * * * <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">1 * * * * <span class=\"built_in\">echo</span> `date +%H:%M:%S` &gt;&gt; /tmp/test.log</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机上创建计划任务，任务名称为\"crontab day test\"，任务每3天执行一次，于执行当天的1点1分开始执行，任务内容为输出test字符</span></span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\" name='crontab day test' minute=1 hour=1 day=*/3 job='echo test' \"</span></span><br><span class=\"line\"><span class=\"comment\">#Ansible: crontab day test</span></span><br><span class=\"line\">1 1 */3 * * <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机上创建计划任务，任务名称为\"test special time\"，任务将在重启时执行，任务内容为输出test字符</span></span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\" name='test special time' special_time=reboot job='echo test' \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行上述命令后，在test70主机中root用户下会有如下计划任务被创建</span></span><br><span class=\"line\"><span class=\"comment\">#Ansible: test special time</span></span><br><span class=\"line\">@reboot <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><br>由于”test special time”已经存在，所以当我们<code>再次操作同名的任务时</code>，ansible将会认为是修改原来的任务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在<span class=\"string\">\"test special time\"</span>已经存在的情况下，执行如下命令，原计划任务会被修改，因为启用了backup，所以任务在修改前会被备份。</span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\" name='test special time' special_time=hourly job='echo test' backup=yes \"</span></span><br><span class=\"line\"><span class=\"comment\">#执行上述命令后，从返回信息的backup_file字段中可以看到备份文件的远程主机中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#任务\"test special time\"已经存在于test70主机中,如果我们想要删除这个计划任务，可以执行如下命令，删除任务的同时可以进行备份。</span></span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\" name='test special time' state=absent backup=yes \"</span></span><br><span class=\"line\"><span class=\"comment\">#命令执行后，从返回信息的backup_file字段中可以看到备份文件的远程主机中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#我们想要将crontab day test这个任务注释掉，则需要使用如下命令，注意最好与backup参数同时使用</span></span><br><span class=\"line\">ansible test70 -m cron -a <span class=\"string\">\"name='crontab day test' minute=1 hour=1 day=*/3 job='echo test' disabled=yes backup=yes\"</span></span><br><span class=\"line\"><span class=\"comment\"># 执行上述命令后，对应的计划任务将会被注释</span></span><br><span class=\"line\"><span class=\"comment\">#Ansible: crontab day test</span></span><br><span class=\"line\"><span class=\"comment\">#1 1 */3 * * echo test</span></span><br></pre></td></tr></table></figure>\n<p><em>补充:</em></p>\n<ul>\n<li>如果你忘记了任何时间设定，那么在任务被注释时，还会被设置为默认的时间设定，也就是 “<em> </em> <em> </em> *”</li>\n<li>所以在使用disabled参数时最后结合backup参数一起使用，万一一时大意，还有回旋的余地。</li>\n</ul>\n<p><br> </p>\n<h5 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h5><p>描述：service模块可以帮助我们管理远程主机上的服务，比如启动或停止远程主机中的nginx服务。</p>\n<p>注意：假如你想要管理远程主机中的某个服务，那么这个服务必须能被 <code>BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart</code>中的任意一种所管理，否则service模块也无法管理远程主机的对应服务，这样说可能不容易理解，那么我们换个方式来解释，假设你在使用centos6，那么你的centos6中的nginx则必须能够通过”service nginx start”启动，如果你的nginx无法通过”service nginx start”进行启动，那么它将同样无法通过ansible的service模块启动，假设你在使用centos7，那么你的centos7中的nginx则必须能够通过”systemctl start nginx”启动，如果它无法通过”systemctl start nginx”进行启动，那么它将同样无法通过ansible的service模块进行启动;</p>\n<ul>\n<li>centos6中默认通过sysv管理服务</li>\n<li>centos7中默认通过systemd管理服务</li>\n</ul>\n<p>service模块通常使用的参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name参数：此参数用于指定需要操作的服务名称，比如nginx</span><br><span class=\"line\">state参数：此参数用于指定服务的状态 : started、stopped、restarted、reloaded。</span><br><span class=\"line\">enabled参数：此参数用于指定是否将服务设置为开机 yes / no</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将test70中的nginx服务处于启动状态</span></span><br><span class=\"line\">ansible test70 -m service -a <span class=\"string\">\"name=nginx state=started\"</span></span><br><span class=\"line\">ansible test70 -m service -a <span class=\"string\">\"name=nginx state=stopped\"</span>  <span class=\"comment\">#nginx服务处于停止状态</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将test70中的nginx服务被设置为开机自动启动项</span></span><br><span class=\"line\">ansible test70 -m service -a <span class=\"string\">\" name='nginx' enabled=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启用或者关闭的同时禁止自启</span></span><br><span class=\"line\">ansible all -m service -a <span class=\"string\">\"name='crond' state=stopped enabled=no\"</span> </span><br><span class=\"line\">ansible all -m service -a <span class=\"string\">\"name='crond' state=started enabled=yes\"</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190726120542.png\" alt=\"WeiyiGeek.示例2\" title=\"\" class=\"\">\n                <p>WeiyiGeek.示例2</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h5><p>描述：可以帮助我们管理远程主机上的用户，比如创建用户、修改用户、删除用户、为用户创建密钥对等操作。</p>\n<p>user模块的常用参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name参数：必须参数，用于指定要操作的用户名称，可以使用别名user。</span><br><span class=\"line\">group参数：此参数用于指定用户所在的基本组</span><br><span class=\"line\">gourps参数：此参数用于指定用户所在的附加组，注意，如果说用户已经存在并且已经拥有多个附加组，那么如果想要继续添加新的附加组，需要结合append参数使用，否则在默认情况下，当再次使用groups参数设置附加组时，用户原来的附加组会被覆盖。</span><br><span class=\"line\">append参数：如果用户原本就存在多个附加组，那么当使用groups参数设置附加组时，当前设置会覆盖原来的附加组设置，如果不想覆盖原来的附加组设置，需要结合append参数，将append设置为yes，表示追加附加组到现有的附加组设置，append默认值为no。</span><br><span class=\"line\">shell参数：此参数用于指定用户的默认shell</span><br><span class=\"line\">uid参数：此参数用于指定用户的uid号</span><br><span class=\"line\">expires参数：此参数用于指定用户的过期时间，相当于设置&#x2F;etc&#x2F;shadow文件中的的第8列，比如，你想要设置用户的过期日期为2018年12月31日，那么你首先要获取到2018年12月31日的unix时间戳，使用命令\\&quot;date -d 2018-12-31 +%s\\&quot;获取到的时间戳为1546185600，所以，当设置expires&#x3D;1546185600时，表示用户的过期时间为2018年12月31日0点0分，设置成功后，查看远程主机的&#x2F;etc&#x2F;shadow文件，对应用户的第八列的值将变成17895（表示1970年1月1日到2018年12月31日的天数，unix时间戳的值会自动转换为天数，我们不用手动的进行换算），目前此参数只支持在Linux和FreeBSD系统中使用。</span><br><span class=\"line\"></span><br><span class=\"line\">comment参数：此参数用于指定用户的注释信息</span><br><span class=\"line\">state参数：此参数用于指定用户是否存在于远程主机中可选值有present、absent，默认值为present，表示用户需要存在，当设置为absent时表示删除用户。</span><br><span class=\"line\">当state的值设置为absent时，表示要删除远程主机中的用户，但是在删除用户时，不会删除用户的家目录等信息，这是因为remoove参数的默认值为no</span><br><span class=\"line\"></span><br><span class=\"line\">remove参数：如果设置为yes，在删除用户的同时，会删除用户的家目录，当state&#x3D;absent并且remove&#x3D;yes时，相当于执行\\&quot;userdel --remove\\&quot;命令</span><br><span class=\"line\"></span><br><span class=\"line\">password参数：此参数用于指定用户的密码，但是这个密码不能是明文的密码，而是一个对明文密码\\&quot;加密后\\&quot;的字符串，相当于&#x2F;etc&#x2F;shadow文件中的密码字段，是一个对明文密码进行哈希后的字符串，你可以在python的命令提示符下输入如下命令，生成明文密码对应的加密字符串。</span><br><span class=\"line\"></span><br><span class=\"line\">import crypt; crypt.crypt(&#39;666666&#39;)</span><br><span class=\"line\">输入上述命令后，即可得到明文密码666666对应的加密字符串。</span><br><span class=\"line\"></span><br><span class=\"line\">update_password参数：此参数有两个值可选，always和on_create，当此参数的值设置为always时表示，如果password参数设置的值与用户当前的加密过的密码字符串不一致，则直接更新用户的密码，默认值即为always，但是当此参数设置为on_create时，如果password参数设置的值与用户当前的加密过的密码字符串不一致，则不会更新用户的密码字符串，保持之前的密码设定，如果是新创建的用户，即使此参数设置为on_create，也会将用户的密码设置为password参数对应的值。</span><br><span class=\"line\"></span><br><span class=\"line\">generate_ssh_key参数：此参数默认值为no，如果设置为yes，表示为对应的用户生成ssh密钥对，默认在用户家目录的.&#x2F;ssh目录中生成名为id_rsa的私钥和名为id_rsa.pub的公钥，如果同名的密钥已经存在与对应的目录中，原同名密钥并不会被覆盖(不做任何操作)，如果你对ssh密钥还不是特别了解，可以参考如下文章</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_key_file参数：当generate_ssh_key参数的值为yes时，使用此参数自定义生成ssh私钥的路径和名称，对应公钥会在同路径下生成，公钥名以私钥名开头，以\\&quot;.pub\\&quot;结尾。</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_key_comment参数：当generate_ssh_key参数的值为yes时，在创建证书时，使用此参数设置公钥中的注释信息，但是如果同名的密钥对已经存在，则并不会修改原来的注释信息，即不做任何操作，当不指定此参数时，默认的注释信息为\\&quot;ansible-generated on 远程主机的主机名\\&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_key_passphrase参数：当generate_ssh_key参数的值为yes时，在创建证书时，使用此参数设置私钥的密码，但是如果同名的密钥对已经存在，则并不会修改原来的密码，即不做任何操作</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_key_type参数：当generate_ssh_key参数的值为yes时，在创建证书时，使用此参数设置密钥对的类型，默认密钥类型为rsa，但是如果同名的密钥对已经存在，并不会对同名密钥做任何操作</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在test70主机上创建名为zsy的用户，如果用户已经存在，则不进行任何操作。</span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=zsy shell=/bin/csh uid=2002 comment=\"注释'</span>  <span class=\"comment\">#zsy用户使用/bin/csh作为默认shell</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=zsy state=absent'</span>  <span class=\"comment\">#删除名为zsy的用户，但是不会删除zsy用户的家目录</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=abc state=absent remove=yes'</span> <span class=\"comment\">#同上,也会删除zsy用户的家目录</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">\"name=zsy group=zsythink\"</span> <span class=\"comment\">#zsy用户的主组为zsythink，zsythink组需要提前存在，当不使用group设置主组时，默认主组与用户名相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定test70主机上的zsy用户的附加组为zsythink组需要提前存在，当不使用groups设置附属组时，默认附加组与用户名相同</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">\"name=zsy groups=zsy,zsythink append=yes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定test70主机上的zsy用户的过期时间为2018年12月31日，使用\\\"date -d 2018-12-31 +%s\\\"命令可以获取到对应日期的unix时间戳</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=zsy expires=1546185600'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将test70主机上的zsy用户的密码设置为666666，首先生成666666的加密字符串</span></span><br><span class=\"line\">&gt;&gt;&gt; import crypt; crypt.crypt(<span class=\"string\">'666666'</span>)</span><br><span class=\"line\"><span class=\"string\">'$6$ygRbo7Fj.mMU2KY0$OEqihCCn5UfOsvMyzPNPBgx3bzAtwrOFyFvacgUmA374XOAEtUCrdjbW5Ip.Zqo491o3kD5I.HaC9nLhh6x741'</span></span><br><span class=\"line\"><span class=\"comment\">#使用生成的密码字符串设置用户密码</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">' name=zsy password=\"$6$ygRbo7Fj.mMU2KY0$OEqihCCn5UfOsvMyzPNPBgx3bzAtwrOFyFvacgUmA374XOAEtUCrdjbW5Ip.Zqo491o3kD5I.HaC9nLhh6x741\" '</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置test70主机上的zsy用户的密码，但是如果用户当前的加密字符串与命令中设置的加密字符串不一致，则不进行密码更新的操作。 (以创建的为主)</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=zsy password=\\\"$6$a.ofrhIWn4gJGbi0$i6Xhr.F/YyhMe2UCodydwyF952bP4DOf0qYcGE8aK.EsgOR/GKU0Oy9Ov6oIH3RIJ9BnhvoVR9ozflmUJgxhL0\\\" update_password=on_create'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#为test70上的zsy用户生成ssh密钥对，</span></span><br><span class=\"line\"><span class=\"comment\"># 默认在用户家目录的./ssh目录中生成名为id_rsa的私钥和名为id_rsa.pub的公钥,</span></span><br><span class=\"line\"><span class=\"comment\"># 密钥对生成在/opt目录下私钥名为id_rsa_zsy，公钥名为id_rsa_zsy.pub,指定公钥中的注释信息为\\\"net\\\",</span></span><br><span class=\"line\"><span class=\"comment\"># 同时指定私钥的密码为123456，指定密钥对的类型为dsa,</span></span><br><span class=\"line\"><span class=\"comment\"># 此参数只能在创建密钥时使用才会生效，并不能操作同名的老密钥,</span></span><br><span class=\"line\"><span class=\"comment\"># 如果已经存在同名密钥，并不会覆盖原来的密钥，即不做任何操作。</span></span><br><span class=\"line\">ansible test70 -m user -a <span class=\"string\">'name=zsy generate_ssh_key=yes ssh_key_file=/opt/id_rsa_zsy ssh_key_comment=\"www.zsythink.net\" ssh_key_passphrase=\"123456\" ssh_key_type=dsa'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h5><p>描述:模块可以帮助我们管理远程主机上的组。</p>\n<p>group模块的常用参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name参数：必须参数，用于指定要操作的组名称。</span><br><span class=\"line\"></span><br><span class=\"line\">state参数：用于指定组的状态两个值可选，present/absent，默认为present设置为absent表示删除组。</span><br><span class=\"line\"></span><br><span class=\"line\">gid参数：用于指定组的gid</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#确保test70主机中存在名为zsythink的组</span></span><br><span class=\"line\">ansible test70 -m group -a <span class=\"string\">' name=zsythink'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除test70主机中存在名为zsythink的组，删除成功的前提是不能有用户把被删除的组当成主组。</span></span><br><span class=\"line\">ansible test70 -m group -a <span class=\"string\">' name=zsythink state=absent'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保test70主机中存在名为zsythink的组，并且确定zsythink组的组id为1008</span></span><br><span class=\"line\">ansible test70 -m group -a <span class=\"string\">'name=zsythink gid=1008'</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"软件包管理\"><a href=\"#软件包管理\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h4><h5 id=\"yum-repository\"><a href=\"#yum-repository\" class=\"headerlink\" title=\"yum_repository\"></a>yum_repository</h5><p>描述：模块可以帮助我们管理远程主机上的yum仓库。</p>\n<p>yum_repository模块的常用参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name参数：必须参数，用于指定要操作的唯一的仓库ID，也就是\\<span class=\"string\">\".repo\\\"配置文件中每个仓库对应的\\\"中括号\\\"内的仓库ID</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">baseurl参数：此参数用于设置yum仓库的baseurl</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">description参数：此参数用于设置仓库的注释信息，也就是\\\".repo\\\"配置文件中每个仓库对应的\\\"name字段\\\"对应的内容。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">file参数：此参数用于设置仓库的配置文件名称，即设置\\\".repo\\\"配置文件的文件名前缀，在不使用此参数的情况下，默认以name参数的仓库ID作为\\\".repo\\\"配置文件的文件名前缀，同一个'.repo'配置文件中可以存在多个yum源</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">enabled参数：此参数用于设置是否激活对应的yum源，此参数默认值为yes，表示启用对应的yum源，设置为no表示不启用对应的yum源。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gpgcheck参数：此参数用于设置是否开启rpm包验证功能，默认值为no，表示不启用包验证，设置为yes表示开启包验证功能。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">gpgcakey参数：当gpgcheck参数设置为yes时，需要使用此参数指定验证包所需的公钥</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">state参数：默认值为present，当值设置为absent时，表示删除对应的yum源</span></span><br></pre></td></tr></table></figure></p>\n<p>示例命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用如下命令在test70主机上设置ID为aliEpel 的yum源，仓库配置文件路径为/etc/yum.repos.d/aliEpel.repo</span></span><br><span class=\"line\">ansible test70 -m yum_repository -a <span class=\"string\">'name=aliEpel description=\"alibaba EPEL\" baseurl=https://mirrors.aliyun.com/epel/$releasever\\\\Server/$basearch/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#使用如下命令在test70主机上设置ID为aliEpel 的yum源，仓库配置文件路径为/etc/yum.repos.d/alibaba.repo</span></span><br><span class=\"line\">ansible test70 -m yum_repository -a <span class=\"string\">'name=aliEpel description=\"alibaba EPEL\" baseurl=https://mirrors.aliyun.com/epel/$releasever\\\\Server/$basearch/ file=alibaba'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用如下命令在test70主机上设置ID为local 的yum源，但是不启用它（local源使用系统光盘镜像作为本地yum源，以便测试举例，所以baseurl中的值以file:///开头）</span></span><br><span class=\"line\">ansible test70 -m yum_repository -a <span class=\"string\">'name=local baseurl=file:///media description=\"local cd yum\" enabled=no'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用如下命令在test70主机上设置ID为local的yum源，开启包验证功能，并指定验证包所需的公钥位置为/media/RPM-GPG-KEY-CentOS-7</span></span><br><span class=\"line\">ansible test70 -m yum_repository -a <span class=\"string\">'name=local baseurl=file:///media description=\"local cd yum\" gpgcheck=yes gpgcakey=file:///media/RPM-GPG-KEY-CentOS-7'</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#删除/etc/yum.repos.d/alibaba.repo配置文件中的aliEpel源</span></span><br><span class=\"line\">ansible test70 -m yum_repository -a <span class=\"string\">'file=alibaba name=aliEpel state=absent'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h5><p>描述： 可以帮助我们在远程主机上通过yum源管理软件包。</p>\n<p>yum模块的常用参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name参数：必须参数，用于指定需要管理的软件包，比如nginx</span><br><span class=\"line\"></span><br><span class=\"line\">state参数：用于指定软件包的状态 ，默认值为present，表示确保软件包已经安装，除了present，其他可用值有installed、latest、absent、removed，其中installed与present等效，latest表示安装yum中最新的版本，absent和removed等效，表示删除对应的软件包。</span><br><span class=\"line\"></span><br><span class=\"line\">disable_gpg_check参数：用于禁用对rpm包的公钥gpg验证，默认值为no，表示不禁用验证，设置为yes表示禁用验证，即不验证包，直接安装，在对应的yum源没有开启gpg验证的情况下，需要将此参数的值设置为yes，否则会报错而无法进行安装。</span><br><span class=\"line\"></span><br><span class=\"line\">enablerepo参数：用于指定安装软件包时临时启用的yum源，假如你想要从A源中安装软件，但是你不确定A源是否启用了，你可以在安装软件包时将此参数的值设置为yes，即使A源的设置是未启用，也可以在安装软件包时临时启用A源。</span><br><span class=\"line\"></span><br><span class=\"line\">disablerepo参数：用于指定安装软件包时临时禁用的yum源，某些场景下需要此参数，比如，当多个yum源中同时存在要安装的软件包时，你可以使用此参数临时禁用某个源，这样设置后，在安装软件包时则不会从对应的源中选择安装包。</span><br></pre></td></tr></table></figure></p>\n<p>注意事项：enablerepo参数和disablerepo参数可以同时使用</p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#确保test70主机上通过yum源安装了nginx(对应yum源未开启gpg验证，所以需要设置disable_gpg_check=yes)，如下三条命令的效果相同</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx disable_gpg_check=yes'</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx state=present disable_gpg_check=yes'</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx state=installed disable_gpg_check=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保test70主机上安装了yum源中最新版本的nginx</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx state=latest disable_gpg_check=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#确保test70主机上通过yum源安装的nginx被卸载了</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx state=absent'</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=nginx state=removed'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机上安装telnet时不确定local源是否启用，使用enablerepo=local确保临时启用local源</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=telnet disable_gpg_check=yes enablerepo=local'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在test70主机上安装telnet时，确定多个源中都有telnet，但是不想从local源中安装，所以在安装时临时禁用local源</span></span><br><span class=\"line\">ansible test70 -m yum -a <span class=\"string\">'name=telnet disable_gpg_check=yes disablerepo=local'</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190726141122.png\" alt=\"WeiyiGeek.yum模块安装示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.yum模块安装示例</p>\n            </figure></p>\n<hr>\n\n<h4 id=\"软件包管理-1\"><a href=\"#软件包管理-1\" class=\"headerlink\" title=\"软件包管理\"></a>软件包管理</h4><h5 id=\"meta-模块\"><a href=\"#meta-模块\" class=\"headerlink\" title=\"meta 模块\"></a>meta 模块</h5><p>描述：使用meta模块来设置改变tasks任务中notify调用handlers的顺序,默认是先执行完Tasks才执行handlers;</p>\n<p>meta模块使用参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush_handlers  <span class=\"comment\">#设置在执行完前面某些task以后立即执行调用对应的handler</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"系统信息管理\"><a href=\"#系统信息管理\" class=\"headerlink\" title=\"系统信息管理\"></a>系统信息管理</h4><h5 id=\"setup-模块\"><a href=\"#setup-模块\" class=\"headerlink\" title=\"setup 模块\"></a>setup 模块</h5><p>描述：用来进行被受管主机的信息收集以及过滤显示,返回json字符串格式：</p>\n<p>常用参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filter    <span class=\"comment\">#过滤显示的项目(全名匹配/通配符匹配) xxx / x*x</span></span><br><span class=\"line\">fact_path <span class=\"comment\">#远程主机的\"local facts\"信息存放路径设置比如/tmp/info.fact</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1).获取主机的IP地址信息以及网卡信息;</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m setup -a <span class=\"string\">\"filter=ansible_default_ipv4\"</span> | more  <span class=\"comment\">#参数项完全匹配</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m setup -a <span class=\"string\">\"filter=*ipv4*\"</span> | more                <span class=\"comment\">#通配符匹配</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m setup -a <span class=\"string\">\"filter=ansible_local fact_path=/tmp\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果：</span></span><br><span class=\"line\"><span class=\"built_in\">local</span> | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ansible_facts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"ansible_default_ipv4\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"address\"</span>: <span class=\"string\">\"10.10.107.222\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"alias\"</span>: <span class=\"string\">\"ens192\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"broadcast\"</span>: <span class=\"string\">\"10.10.107.255\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"gateway\"</span>: <span class=\"string\">\"10.10.107.1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"interface\"</span>: <span class=\"string\">\"ens192\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"macaddress\"</span>: <span class=\"string\">\"00:50:56:b3:dc:b4\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"mtu\"</span>: 1500,</span><br><span class=\"line\">            <span class=\"string\">\"netmask\"</span>: <span class=\"string\">\"255.255.255.0\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"network\"</span>: <span class=\"string\">\"10.10.107.0\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"ether\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"discovered_interpreter_python\"</span>: <span class=\"string\">\"/usr/bin/python\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"debug-模块\"><a href=\"#debug-模块\" class=\"headerlink\" title=\"debug 模块\"></a>debug 模块</h5><p>描述：debug模块的作用就是帮助我们进行调试的，debug模块可以帮助我们把信息输出到ansible控制台上，以便我们能够定位问题</p>\n<p>debug参数一览表：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg: [debug信息]   <span class=\"comment\">#设置debug显示信息即输出自定义的信息</span></span><br><span class=\"line\">var: [变量名称]    <span class=\"comment\">#利用debug显示变量名称</span></span><br></pre></td></tr></table></figure></p>\n<p>注意事项:</p>\n<ul>\n<li>msg 与 var 参数是不兼容的自能使用一个</li>\n</ul>\n<hr>\n\n<h4 id=\"变量管理\"><a href=\"#变量管理\" class=\"headerlink\" title=\"变量管理\"></a>变量管理</h4><h5 id=\"set-fact-模块\"><a href=\"#set-fact-模块\" class=\"headerlink\" title=\"set_fact 模块\"></a>set_fact 模块</h5><p>描述：通过set_fact模块就能够在tasks中定义变量了，我们也可以通过set_fact将一个变量的值赋予另一个变量;</p>\n<p>模块参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">variable=value <span class=\"comment\">#设置变量名称与变量中也可以variable: &#123;&#123;cmd.stdout&#125;&#125; 调用其他变量 </span></span><br><span class=\"line\">cacheable=yes  <span class=\"comment\">#以便使用事实缓存在不同执行中保存变量。使用set_事实具有不同的优先级,具体取决于它们是缓存还是未缓存。</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.采用ansible直接命令行执行(也能写入playbook之中)</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m set_fact,shell -a <span class=\"string\">\"demo='this is a demo' cacheable=yes echo &#123;&#123;demo&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"include-var模块\"><a href=\"#include-var模块\" class=\"headerlink\" title=\"include_var模块\"></a>include_var模块</h5><p>描述：可以在playbook运行中动态的加载被修改了的ansible变量参数文件;</p>\n<p>模块参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file : 指定ansbile变量文件路径(参数可以指定要包含的变量文件)</span><br><span class=\"line\">name : 把变量文件中的变量全部赋值给另外一个变量;</span><br><span class=\"line\">dir : 指定变量文件存放的目录，将里面的变量全部加载;</span><br><span class=\"line\">extensions: 指定配置文件合法后缀常常与dir联用;</span><br><span class=\"line\">depth: 控制递归的深度默认值为0表示递归到最底层的子目录，depth:1表示递归深度为1</span><br><span class=\"line\">files_matching : 借助正则表达式，匹配那些我们想要加载的变量文件</span><br><span class=\"line\">ignore_files : 明确指定需要忽略的变量文件名称(是一个列表)</span><br><span class=\"line\">register : 将载入的变量文件列表写入到自己的返回值中，这个返回值的关键字为<span class=\"string\">'ansible_included_var_files'</span></span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">实际案例：</span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\">#变量配置文件1：cat &gt;/tmp/ansible/demo1/var.yml&lt;&lt;END</span></span><br><span class=\"line\">test1: qixi</span><br><span class=\"line\">test2: happy</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#变量配置文件1：cat &gt;/tmp/ansible/demo2/var.yml&lt;&lt;END</span></span><br><span class=\"line\">test3: include_varDemo</span><br><span class=\"line\">test4: WeiyiGeek</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#playbook 脚本：</span></span><br><span class=\"line\"><span class=\"comment\"># cat &gt;include_var.yml&lt;&lt;END</span></span><br><span class=\"line\">---</span><br><span class=\"line\">- hosts: <span class=\"built_in\">local</span></span><br><span class=\"line\">  remote_user: root</span><br><span class=\"line\">  gather_facts: no</span><br><span class=\"line\">  vars_files:  <span class=\"comment\">#关键点</span></span><br><span class=\"line\">    - /tmp/ansible/demo1/var.yml</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: <span class=\"string\">\"Demo1 var_files\"</span></span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      msg: <span class=\"string\">\"&#123;&#123;test1&#125;&#125; &#123;&#123;test2&#125;&#125;\"</span></span><br><span class=\"line\">  - name: <span class=\"string\">\"Demo2 edit var_files\"</span></span><br><span class=\"line\">    lineinfile:</span><br><span class=\"line\">      path: /tmp/ansible/demo1/var.yml</span><br><span class=\"line\">      line: <span class=\"string\">\"testvar3: Ansible Study\"</span></span><br><span class=\"line\">  - include_vars: </span><br><span class=\"line\">      file: /tmp/ansible/demo1/var.yml  <span class=\"comment\">#关键点</span></span><br><span class=\"line\">      name: trans_var   <span class=\"comment\">#关键点</span></span><br><span class=\"line\">  - name: <span class=\"string\">\"Demo3 show dynmaic add\"</span></span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      msg: <span class=\"string\">\"&#123;&#123; trans_var &#125;&#125; &#123;&#123;trans_var.testvar3&#125;&#125;\"</span></span><br><span class=\"line\">  - name: <span class=\"string\">\"Demo4 include_vars directory\"</span></span><br><span class=\"line\">    include_vars:</span><br><span class=\"line\">      dir: /tmp/ansible/demo2/</span><br><span class=\"line\">      depth: 1</span><br><span class=\"line\">      extensions: [yaml,yml,json,varfile]</span><br><span class=\"line\">      files_matching: <span class=\"string\">\"^var.*\"</span></span><br><span class=\"line\">      name: includeval</span><br><span class=\"line\">    register: return_val  <span class=\"comment\">#坑呀,与include平级</span></span><br><span class=\"line\">  - name: <span class=\"string\">\"Demo4 show includevars dir\"</span></span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      msg: <span class=\"string\">\"&#123;&#123;return_val.ansible_included_var_files&#125;&#125; include -&gt; &#123;&#123;includeval.test3&#125;&#125;  -&gt; &#123;&#123;includeval.test4&#125;&#125;\"</span></span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#TASK [Demo1 var_files] </span></span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"qixi happy\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TASK [Demo2 edit var_files] </span></span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>]</span><br><span class=\"line\"><span class=\"comment\">#TASK [include_vars] </span></span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [Demo3 show dynmaic add] </span><br><span class=\"line\"><span class=\"string\">\"msg\"</span>: <span class=\"string\">\"&#123;u'test1': u'qixi', u'test2': u'happy', u'testvar3': u'Ansible Study'&#125; Ansible Study\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TASK [Demo4 include_vars directory]</span></span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#TASK [Demo4 show includevars dir]</span></span><br><span class=\"line\"><span class=\"string\">\"msg\"</span>: <span class=\"string\">\"[u'/tmp/ansible/demo2/var.yml'] include -&gt; include_varDemo  -&gt; WeiyiGeek\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>第一：指定目录中的所有文件的文件后缀必须是 ‘.yaml’ 、’.yml’ 、’.json’中的一种，默认只有这三种后缀是合法后缀，如果目录中存在非合法后缀的文件，执行playbook时则会报错。</li>\n<li>第二：如果此目录中的子目录中包含变量文件，子目录中的变量文件也会被递归的加载，而且子目录中的文件也必须遵守上述第一条规则。</li>\n<li>第三：dir参数与file参数不能同时使用。</li>\n</ul>\n<hr>\n\n<h4 id=\"条件判断异常处理\"><a href=\"#条件判断异常处理\" class=\"headerlink\" title=\"条件判断异常处理\"></a>条件判断异常处理</h4><h5 id=\"fail模块\"><a href=\"#fail模块\" class=\"headerlink\" title=\"fail模块\"></a>fail模块</h5><p>描述：而fail模块天生就是一个用来”执行失败”的模块，当fail模块执行后playbook就会认为有任务失败了，从而终止运行实现我们想要的中断效果</p>\n<p>模块参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 其他模块 <span class=\"comment\">#调用其他模块</span></span><br><span class=\"line\">msg <span class=\"comment\">#小写fail模块信息</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"自动化运维","path":"api/categories/自动化运维.json"},{"name":"运维基础","path":"api/categories/运维基础.json"}],"tags":[{"name":"Ansible","path":"api/tags/Ansible.json"}]}