{"title":"JAVA入门学习三","slug":"编程世界/Java/JAVA入门学习三","date":"2019-04-24T03:34:30.000Z","updated":"2023-01-31T02:29:10.672Z","url":"2019/4-24-287.html","path":"api/articles/2019/4-24-287.html.json","covers":["https://img.weiyigeek.top/2019/20190425110219.png","https://img.weiyigeek.top/2019/20190424234224.png","https://img.weiyigeek.top/2019/20190425103358.png","https://img.weiyigeek.top/2019/20190426210531.png","https://img.weiyigeek.top/2019/20190427001304.png","https://img.weiyigeek.top/2019/20190619221529.png","https://img.weiyigeek.top/2019/20190626225725.png"],"content":"<p>[TOC]<br><a id=\"more\"></a></p>\n<h4 id=\"0x08-JAVA面向对象\"><a href=\"#0x08-JAVA面向对象\" class=\"headerlink\" title=\"0x08 JAVA面向对象\"></a>0x08 JAVA面向对象</h4><h5 id=\"1-面向对象思想概述\"><a href=\"#1-面向对象思想概述\" class=\"headerlink\" title=\"1.面向对象思想概述\"></a>1.面向对象思想概述</h5><p><em>Q：我们学习编程是为了什么？</em></p>\n<ul>\n<li>为了把我们日常生活中实物用学习语言描述出来</li>\n</ul>\n<p>一个Java程序可以认为是一系列对象的集合,而这些对象通过调用彼此的方法来协同工作。</p>\n<p>简要介绍下类、对象、方法和实例变量的概念：</p>\n<ul>\n<li>类：是一组相关的属性和行为的集合</li>\n<li>对象：对象是类的一个实例,有状态和行为即该类事物的具体体现。</li>\n<li>方法：方法就是行为,一个类可以有很多方法,逻辑运算、数据修改以及所有动作都是在方法中完成的（函数）</li>\n<li>属性：属性就是状态,及变量如String Color=”red”；</li>\n<li>实例变量：每个对象都有独特的实例变量,对象的状态由这些实例变量的值决定。</li>\n</ul>\n<p><em>Q:面向对象开放与设计概念：</em></p>\n<ul>\n<li>面向对象开发就是不断的创建对象使用对象,指挥对象做事情。</li>\n<li>面向对象设计,其实就是在管理和维护对象之间的关系。</li>\n</ul>\n<p><em>Q:面向对象思想特点?</em></p>\n<ul>\n<li>a:是一种更符合我们思想习惯的思想</li>\n<li>b:可以将复杂的事情简单化</li>\n<li>c:将我们从执行者变成了指挥者,角色发生了转换</li>\n</ul>\n<p>Java中最基本的单位是类,Java中用class描述事物也是如此</p>\n<ul>\n<li>成员变量==事物的属性,    就是该事物的描述信息(事物身上的名词)</li>\n<li>成员方法==事物的行为, 就是该事物能够做什么(事物身上的动词)</li>\n</ul>\n<p><em>面向对象特征：</em></p>\n<ul>\n<li>封装(encapsulation)</li>\n<li>继承(inheritance)</li>\n<li>多态(polymorphism)</li>\n</ul>\n<p><br></p>\n<h5 id=\"2-面向对象使用\"><a href=\"#2-面向对象使用\" class=\"headerlink\" title=\"2.面向对象使用\"></a>2.面向对象使用</h5><p>面向对象的使用在一个java文件中写两个类：一个基本的类,一个测试类(包含主程序入口的类)<br>建议：文件名称和测试类名称一致。</p>\n<p><em>Q：定义类其实就是定义类的成员(成员变量和成员方法)</em></p>\n<ul>\n<li>a:成员变量(属性)和以前定义变量是一样的,只不过位置发生了改变。在类中方法外。</li>\n<li>b:成员方法(行为)和以前定义方法是一样的,只不过把static去掉,后面在详细讲解static的作用。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 创建对象并使用格式：</span><br><span class=\"line\">* 类名 对象名 = <span class=\"keyword\">new</span> 类名();</span><br><span class=\"line\">  </span><br><span class=\"line\">* 对象名.变量名       <span class=\"comment\">//使用成员变量</span></span><br><span class=\"line\">* 对象名.方法名()     <span class=\"comment\">//使用成员方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>关键字特点：</span><br><span class=\"line\">* 代表当前对象的引用 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>的应用场景:</span><br><span class=\"line\">- 用来区分成员变量和局部变量重名问题</span><br><span class=\"line\">- 可以区分多个对象</span><br></pre></td></tr></table></figure>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类声明实例化调用案例</span></span><br><span class=\"line\"><span class=\"comment\">//测试类：Demo_Class</span></span><br><span class=\"line\"><span class=\"comment\">//基本类：Students</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Class</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//类的实例化=&gt;对象</span></span><br><span class=\"line\">        Students stu = <span class=\"keyword\">new</span> Students();</span><br><span class=\"line\">        stu.age = <span class=\"number\">13</span>;         <span class=\"comment\">//调用属性并且赋值</span></span><br><span class=\"line\">        stu.name = <span class=\"string\">\"Weiyigeek\"</span>;</span><br><span class=\"line\">        stu.sex = <span class=\"string\">'女'</span>;</span><br><span class=\"line\">        stu.study();         <span class=\"comment\">//调用方法</span></span><br><span class=\"line\">        stu.sleep(<span class=\"string\">\"Weiyi\"</span>,<span class=\"number\">1024</span>);         <span class=\"comment\">//调用方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//########## 执行结果 #############</span></span><br><span class=\"line\">        <span class=\"comment\">// 姓名：Weiyigeek ,年龄：13 ,性别：女 动作：正在学习</span></span><br><span class=\"line\">        <span class=\"comment\">// 姓名：Weiyi ,年龄：1024 ,性别：女 动作：正在睡觉</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 学生类：Students</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Students</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    String name;  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> sex;  <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;  <span class=\"comment\">//年龄</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"姓名：\"</span>+name+<span class=\"string\">\" ,年龄：\"</span>+age+<span class=\"string\">\" ,性别：\"</span>+sex+<span class=\"string\">\"动作：正在学习\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  <span class=\"comment\">//局部于成员变量重名,所以前面使用 this.name 代表类中的name成员变量</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"姓名：\"</span>+name+<span class=\"string\">\" ,年龄：\"</span>+age+<span class=\"string\">\" ,性别：\"</span>+<span class=\"keyword\">this</span>.sex+<span class=\"string\">\"动作：正在睡觉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190425110219.png\" alt=\"WeiyiGeek.this关键字\" title=\"\" class=\"\">\n                <p>WeiyiGeek.this关键字</p>\n            </figure></p>\n<p><br></p>\n<p><strong>(1) 对象内存分析</strong><br>三个引用有两个对象的引用指向同一个地址,对象的内存案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象内存分析案例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Classmemory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//3个引用两个内存图</span></span><br><span class=\"line\">        Car c1 = <span class=\"keyword\">new</span> Car();  <span class=\"comment\">//实例化对象c1</span></span><br><span class=\"line\">        c1.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">        c1.run();  <span class=\"comment\">//red</span></span><br><span class=\"line\">        c1 = <span class=\"keyword\">null</span>; <span class=\"comment\">//将c1对象设置为空指针(使之不指向原来的地址)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Car c2 = <span class=\"keyword\">new</span> Car(); <span class=\"comment\">//实例化对象c1</span></span><br><span class=\"line\">        c2.color = <span class=\"string\">\"Black\"</span>;</span><br><span class=\"line\">        c2.run(); <span class=\"comment\">//Black</span></span><br><span class=\"line\">      </span><br><span class=\"line\">        Car c3 = c2; <span class=\"comment\">//将c3对象指向c2的地址指针，如果c2 = null; c3.run()将会出空指针异常</span></span><br><span class=\"line\">        c3.run(); <span class=\"comment\">//Black</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    String color;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(color);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190424234224.png\" alt=\"WeiyiGeek.对象内存分析\" title=\"\" class=\"\">\n                <p>WeiyiGeek.对象内存分析</p>\n            </figure></p>\n<p><em>补充：</em><br>如果没有任何引用指向该对象,那么该对象就会变成垃圾,JAVA中又完善的垃圾回收机制,会对其进行回收;</p>\n<p><br></p>\n<p><strong>(2)成员变量和局部变量的区别</strong><br>A:在类中的位置不同</p>\n<ul>\n<li>成员变量：在类中方法外</li>\n<li>局部变量：在方法定义中或者方法声明上</li>\n</ul>\n<p>B:在内存中的位置不同</p>\n<ul>\n<li>成员变量：在堆内存(成员变量属于对象,对象进堆内存)</li>\n<li>局部变量：在栈内存(局部变量属于方法,方法进栈内存)</li>\n</ul>\n<p>C:生命周期不同</p>\n<ul>\n<li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li>\n<li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li>\n</ul>\n<p>D:初始化值不同</p>\n<ul>\n<li>成员变量：有默认初始化值</li>\n<li>局部变量：没有默认初始化值，必须定义/赋值，然后才能使用。</li>\n</ul>\n<p><em>注意事项</em></p>\n<ul>\n<li>局部变量名称可以和成员变量名称一样，在方法中使用的时候采用的是就近原则。</li>\n<li>当局部内部类访问局部变量的时候,局部变量必须用finall修饰;</li>\n<li>基本数据类型变量包括:byte,short,int,long,float,double,boolean,char,且初始化值与数值初始化值一致;</li>\n<li>引用数据类型变量包括:数组,类,接口,枚举</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    String name; <span class=\"comment\">//成员变量在堆内存中，默认是null</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;    <span class=\"comment\">//同上,默认是0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//value 与 num 都是局部变量,在栈得上面;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;   <span class=\"comment\">// 堆里的num 与 栈里面的num 是互不影响的</span></span><br><span class=\"line\">        System.out.println(name);  <span class=\"comment\">//输出的是null</span></span><br><span class=\"line\">        System.out.println(num);  <span class=\"comment\">//在方法使用中采用的是就近原则(所以输出 10)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2引用数据类型和基本数据类型调用的区别</strong><br>在Java中，引用类型的变量非常类似于C/C++的指针，引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型比如 Employee、Puppy 等。</p>\n<ul>\n<li>变量一旦声明后，类型就不能被改变了</li>\n<li>对象、数组都是引用数据类型，所有引用类型的默认值都是null,一个引用变量可以用来引用任何与之兼容的类型。</li>\n<li>例子：Site site = new Site(“Runoob”)  #这里的Site</li>\n</ul>\n<p>A:方法的参数是类名public void print(Student s){} //print(new Student());</p>\n<ul>\n<li>如果你看到了一个方法的形式参数是一个类类型(引用类型)，这里其实需要的是该类的对象。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用数据类型与基本数据类型调用的区别</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_ClassQuote</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        print(<span class=\"number\">10</span>); <span class=\"comment\">//调用局部方法（即基本数据类型当作形式参数）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Student s = <span class=\"keyword\">new</span> Student(); <span class=\"comment\">//创建对象并将对象地址赋值给s</span></span><br><span class=\"line\">        print(s); <span class=\"comment\">//这里使用了方法的重载</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.传入基本数据类型作为形式参数(传入的是值)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.传入引用数据类型作为形式参数 （给的是地址值）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Student stu)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        stu.name = <span class=\"string\">\"WeiyiGeek\"</span>;</span><br><span class=\"line\">        stu.speak();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个学生类</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">speak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">\"正在台上讲话!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"comment\">// WeiyiGeek正在台上讲话!</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"3-匿名对象概述与应用\"><a href=\"#3-匿名对象概述与应用\" class=\"headerlink\" title=\"3.匿名对象概述与应用\"></a>3.匿名对象概述与应用</h5><p><em>Q：什么是匿名对象？</em><br>答：没有名字的对象 </p>\n<p>匿名对象应用场景：</p>\n<ul>\n<li>a:调用方法，仅仅只调用一次的时候。</li>\n<li>b:匿名对象可以作为实际参数传递</li>\n</ul>\n<p><em>Q:匿名对象是否可以调用属性并赋值?有什么意义?</em></p>\n<ul>\n<li>匿名对象可以调用属性,但是没有意义,因为调用后就变成垃圾</li>\n<li>如果需要赋值还是用有名字对象</li>\n</ul>\n<p><em>Q:匿名调用有什么好处吗?</em><br>答：节省代码,使代码更加简介; </p>\n<ul>\n<li>注意：调用多次的时候不适合。匿名对象调用完毕就是垃圾,可以被垃圾回收器回收。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名对象案例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.对比有名字对象与匿名对象的区别</span></span><br><span class=\"line\">        <span class=\"comment\">/*Car c1 = new Car();\t\t\t//创建有名字的对象</span></span><br><span class=\"line\"><span class=\"comment\">        c1.run();</span></span><br><span class=\"line\"><span class=\"comment\">        c1.run();</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        new Car().run();\t\t\t//匿名对象调用方法</span></span><br><span class=\"line\"><span class=\"comment\">        new Car().run();\t*/</span>\t\t<span class=\"comment\">//匿名对象只适合对方法的一次调用,因为调用多次就会产生多个对象,不如用有名字的对象\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.查看下面匿名对象的内存图</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Car().color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Car().num = <span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Car().run();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.匿名对象可以作为参数传递</span></span><br><span class=\"line\">        method(<span class=\"keyword\">new</span> Car());  <span class=\"comment\">//创建匿名对象，并将该对象的地址传递个method中Car c对象</span></span><br><span class=\"line\">        method(<span class=\"keyword\">new</span> Car());</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 抽取方法提高代码的复用性 */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Car c)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        c.color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">        c.num = <span class=\"number\">1024</span>;</span><br><span class=\"line\">        c.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    String color;\t\t\t<span class=\"comment\">//颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;\t\t\t\t<span class=\"comment\">//轮胎数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(color + <span class=\"string\">\".|.\"</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//############# 执行结果 ##########</span></span><br><span class=\"line\"><span class=\"comment\">// null.|.0</span></span><br><span class=\"line\"><span class=\"comment\">// red.|.1024</span></span><br><span class=\"line\"><span class=\"comment\">// red.|.1024</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190425103358.png\" alt=\"WeiyiGeek.匿名对象内存图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.匿名对象内存图</p>\n            </figure>\n<p><br></p>\n<h5 id=\"4-封装\"><a href=\"#4-封装\" class=\"headerlink\" title=\"4.封装\"></a>4.封装</h5><p>封装概述：是指隐藏对象的属性和实现细节，仅对外提供公共访问方式,使用private关键字。<br>封装好处：</p>\n<ul>\n<li>隐藏实现细节，提供公共的访问方式</li>\n<li>提高了代码的复用性</li>\n<li>提高安全性。</li>\n</ul>\n<p>封装原则：</p>\n<ul>\n<li>将不需要对外提供的内容都隐藏起来。</li>\n<li>把属性隐藏，提供公共方法对其访问。</li>\n</ul>\n<p>private关键字的概述和特点</p>\n<ul>\n<li>a:是一个权限修饰符</li>\n<li>b:可以修饰成员变量和成员方法</li>\n<li>c:被其修饰的成员只能在本类中被访问</li>\n<li>d:private仅仅是封装的一种体现形式,不能说封装就是私有(在学习包的时候具体实现，不同包中的类想调用其他包中私有成员变量,需要在该包下建立一个公共的方法来调用返回自身的成员变量  )</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象封装与private关键字</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Encapsulation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例化</span></span><br><span class=\"line\">        Encaps en = <span class=\"keyword\">new</span> Encaps();</span><br><span class=\"line\">        en.name = <span class=\"string\">\"WeiyiGEEK\"</span>;</span><br><span class=\"line\">        en.setID(<span class=\"number\">500102123</span>);  <span class=\"comment\">//设置私有属性</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"用户ID值：\"</span>+en.getID()); <span class=\"comment\">//获取私有属性</span></span><br><span class=\"line\">        en.getInfo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Encaps</span> </span>&#123;</span><br><span class=\"line\">    String name;   <span class=\"comment\">//公共成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> ID;  <span class=\"comment\">//私有成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取私有的成员变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置私有的成员变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setID</span><span class=\"params\">(<span class=\"keyword\">long</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ID = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//公共方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getInfo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(name + <span class=\"string\">\" ： \"</span> + ID);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户ID值：500102123</span></span><br><span class=\"line\"><span class=\"comment\">// WeiyiGEEK ： 500102123</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"5-构造对象\"><a href=\"#5-构造对象\" class=\"headerlink\" title=\"5.构造对象\"></a>5.构造对象</h5><p>构造方法Constructor概述和格式:</p>\n<ul>\n<li>A:构造方法概述和作用:给对象的数据(属性)进行初始化</li>\n<li>B:构造方法格式特点<ul>\n<li>a:方法名与类名相同(大小也要与类名一致)</li>\n<li>b:没有返回值类型<code>连void都没有</code>,如果加上void及其他返回的数据类型，它便不是一个普通方法;</li>\n<li>c:没有具体的返回值return;</li>\n</ul>\n</li>\n</ul>\n<p>构造方法的重载及注意事项:<br>重载:方法名相同,与返回值类型无关(构造方法没有返回值),只看参数列表</p>\n<ul>\n<li>C:构造方法注意事项<ul>\n<li>a:如果我们没有给出构造方法，系统将自动提供一个无参构造方法。</li>\n<li>b:如果我们给出了构造方法，系统将不再提供默认的无参构造方法。</li>\n<li>注意这个时候如果我们还想使用无参构造方法，就必须自己给出;建议永远自己给出无参构造方法(重载)</li>\n</ul>\n</li>\n</ul>\n<p>案例1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java对象构造方法 案例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Contructor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//案例1.构造方法的调用与使用 （有参构造）</span></span><br><span class=\"line\">        Base b = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"Weiyigeek\"</span>); <span class=\"comment\">//再创建对象时候系统自动帮我调用了Base类的构造方法Base()</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Name:\"</span>+b.getName()+<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例2. 构造方法的重载 (无参构造)</span></span><br><span class=\"line\">        Base b1 = <span class=\"keyword\">new</span> Base();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Name:\"</span>+b1.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例3.</span></span><br><span class=\"line\">        Base b2 = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"Hacker\"</span>);  <span class=\"comment\">//该对象将会变成垃圾被回收</span></span><br><span class=\"line\">        b2 = <span class=\"keyword\">new</span> Base(<span class=\"string\">\"New Hacker\"</span>);   <span class=\"comment\">//这种方法看运行结果貌似是改名了,其实是将原对象变成垃圾</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Name:\"</span>+b2.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**基础类：base */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name = <span class=\"string\">\"Other\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法定义 （注意无返回值类型 |有参构造）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Base</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  <span class=\"comment\">//成员变量赋值 属性的进行初始化值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"b对象 - 这是Base类的构造方法：name = \"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法重载 （空参构造 | 常规建议放在有参构造前面）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Base</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"空参构造\"</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"b1对象 - 这是Base类的重载构造方法：\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//################## 执行结果 ##################</span></span><br><span class=\"line\"><span class=\"comment\">// b对象 - 这是Base类的构造方法：name = Weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\">// Name:Weiyigeek</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b1对象 - 这是Base类的重载构造方法：空参构造</span></span><br><span class=\"line\"><span class=\"comment\">// Name:空参构造</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b对象 - 这是Base类的构造方法：name = Hacker</span></span><br><span class=\"line\"><span class=\"comment\">// b对象 - 这是Base类的构造方法：name = New Hacker</span></span><br><span class=\"line\"><span class=\"comment\">// Name:New Hacker</span></span><br></pre></td></tr></table></figure></p>\n<p><em>Q：画图说明一个对象的创建过程做了哪些事情?</em></p>\n<ul>\n<li>Base s = new Base();</li>\n<li>1,Base.class加载进内存</li>\n<li>2,声明一个Base类型引用 s</li>\n<li>3,在堆内存创建对象,</li>\n<li>4,给对象中属性默认初始化值 null</li>\n<li>5,属性进行显示初始化 Other</li>\n<li>6,构造方法进栈,对对象中的属性赋值 weiyigeek,构造方法弹栈 </li>\n<li>7,将对象的地址值赋值给 s</li>\n<li>8.对象调用getName方法进行输出属性值</li>\n</ul>\n<p><br/></p>\n<p><strong>(1) static关键字</strong><br>关键字的特点:</p>\n<ul>\n<li>a:随着类的加载而加载</li>\n<li>b:优先于对象存在(随着字节码加载而加载,那时还没创建对象)</li>\n<li>c:被类的所有对象共享,节约了内存</li>\n</ul>\n<p>可以通过类名调用</p>\n<ul>\n<li>其实它本身也可以通过对象名调用。</li>\n<li>推荐使用类名调用。</li>\n<li>静态修饰的内容一般我们称其为：与类相关的，类成员</li>\n</ul>\n<p><em>Q:其实这个特点也是在告诉我们什么时候使用静态?</em><br>答：如果某个成员变量是被所有对象共享的,那么它就应该定义为静态的。</p>\n<p>比如：饮水机可以设置为静态(共享),而纸杯不可设置为静态修饰;共性用静态,特性用非进静态;</p>\n<p>static关键字对象成员方法内存图案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//static关键字对象内存图</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_StaticMemory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//案例0：类名可以直接调用静态属性或者静态方法</span></span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"Person.country = \"</span>+ Person.country);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例1.</span></span><br><span class=\"line\">        Person p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"001\"</span>);</span><br><span class=\"line\">        p1.country = <span class=\"string\">\"重庆\"</span>;</span><br><span class=\"line\">        p1.Info();</span><br><span class=\"line\"></span><br><span class=\"line\">        Person p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"唯一\"</span>, <span class=\"string\">\"002\"</span>);</span><br><span class=\"line\">        p2.Info();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例2：类名可以直接调用静态属性或者静态方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Person.country = \"</span>+ Person.country);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** Person 类 */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    String name;  <span class=\"comment\">//公共成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;  <span class=\"comment\">//私有成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> String country = <span class=\"string\">\"未知城镇\"</span>;  <span class=\"comment\">//静态成员变量 (公共对象共享)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法（有参）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name,String id)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"######进入构造方法！##########\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Info</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"个人信息:\\n姓名:\"</span>+<span class=\"keyword\">this</span>.name+<span class=\"string\">\"\\tid:\"</span>+<span class=\"keyword\">this</span>.id+<span class=\"string\">\"\\t城市:\"</span>+country);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Person.country = 未知城镇</span></span><br><span class=\"line\"><span class=\"comment\">// ######进入构造方法！##########</span></span><br><span class=\"line\"><span class=\"comment\">// 个人信息:</span></span><br><span class=\"line\"><span class=\"comment\">// 姓名:WeiyiGeek\tid:001\t城市:重庆</span></span><br><span class=\"line\"><span class=\"comment\">// ######进入构造方法！##########</span></span><br><span class=\"line\"><span class=\"comment\">// 个人信息:</span></span><br><span class=\"line\"><span class=\"comment\">// 姓名:唯一\tid:002\t城市:重庆</span></span><br><span class=\"line\"><span class=\"comment\">// Person.country = 重庆</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190426210531.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<p><strong>(2)静态/非静态方法</strong></p>\n<p>静态方法只能访问静态的成员变量和静态的成员方法(静态只能访问静态)</p>\n<ul>\n<li>静态方法：<ul>\n<li>成员变量：只能访问静态变量</li>\n<li>成员方法：只能访问静态成员方法</li>\n</ul>\n</li>\n<li>非静态方法：<ul>\n<li>成员变量：可以是静态的，也可以是非静态的</li>\n<li>成员方法：可是是静态的成员方法，也可以是非静态的成员方法</li>\n</ul>\n</li>\n<li>注意事项：<ul>\n<li>在静态方法中是没有this关键字的, 由于静态比对象先存在;静态是随着类的加载而加载，this是随着对象的创建而存在。</li>\n</ul>\n</li>\n</ul>\n<p>静态变量和成员变量的区别:静态变量也叫类变量,成员变量也叫对象变量</p>\n<ul>\n<li>A:所属不同<ul>\n<li>静态变量属于类，所以也称为为类变量</li>\n<li>成员变量属于对象，所以也称为实例变量(对象变量)</li>\n</ul>\n</li>\n<li>B:内存中位置不同<ul>\n<li>静态变量存储于方法区的静态区(节约空间)</li>\n<li>成员变量存储于堆内存</li>\n</ul>\n</li>\n<li>C:内存出现时间不同<ul>\n<li>静态变量随着类的加载而加载，随着类的消失而消失</li>\n<li>成员变量随着对象的创建而存在，随着对象的消失而消失</li>\n</ul>\n</li>\n<li>D:调用不同<ul>\n<li>静态变量可以通过类名调用，也可以通过对象调用</li>\n<li>成员变量只能通过对象名调用</li>\n</ul>\n</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 静态变量/方法 非静态变量/方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_StaticVariable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//案例1.非静态成员方法</span></span><br><span class=\"line\">        Base1 b1 = <span class=\"keyword\">new</span> Base1();</span><br><span class=\"line\">        b1.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例2.静态成员方法</span></span><br><span class=\"line\">        Base1.print2();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = <span class=\"number\">1024</span>;  <span class=\"comment\">//非静态</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> score = <span class=\"number\">78</span>; <span class=\"comment\">//静态</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//非静态成员方法,即可以访问静态的成员也可以访问非静态的成员</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"非静态方法：\"</span>+id);</span><br><span class=\"line\">        System.out.println(score);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态成员方法不能访问非静态的,错误：无法从静态上下文中引用非静态</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(\"非静态方法：\"+this.id); //会执行错误,由于静态方法/变量 再创建对象前都已经被创建静态区所以这里无法使用this</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态方法：\"</span>+score); <span class=\"comment\">//静态变量/方法 同时创建所以可以利用score进行调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 非静态方法：1024</span></span><br><span class=\"line\"><span class=\"comment\">// 78</span></span><br><span class=\"line\"><span class=\"comment\">// 静态方法：78</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(3)工具类建立帮助使用</strong><br>Java Development Kit (JDK) 中有一个名为   javadoc 的程序，用来为  Java 程序产生HTML 文件形式的外部注释文档。Javadoc 支持一定数目的标记，标识注释文档中各段起始位置<br>的保留字。详情请参考  JDK javadoc 文档。</p>\n<p>如果一个类中所有的方法都是静态的,此时需要再多做一步私有构造方法,目的是不让其他类创建本类对象;直接使用类型.静态方法/变量调用即可;</p>\n<p>我们可以对工具类加入文档注释,通过javadoc命令生成说明书:</p>\n<ul>\n<li>@author(提取作者内容)</li>\n<li>@version(提取版本内容)</li>\n<li>@param 参数名称//形式参数的变量名称</li>\n<li>@return 函数运行完返回的数据</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ArrayTools.class</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组工具类验证(注意生成doc文档的java类需要设置public关键字)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> v1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayTools</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ArrayTools</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * getArrMax获取数组中最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr 接收一个int类型的数据在</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回数据在中的最大值</span></span><br><span class=\"line\"><span class=\"comment\">     ***/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getArrMax</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           max = max &gt; arr[i] ? max:arr[i];</span><br><span class=\"line\">       &#125; </span><br><span class=\"line\">       <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Main1.class</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">10</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        ArrayTools at = ArrayTools()&#123;&#125;;</span><br><span class=\"line\">        ArrayTools.getArrmax(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c:\\Users\\Administrator\\Desktop\\Study-Promgram\\JAVA\\Day2&gt;javadoc -d API -author -version ArrayTools.java</span></span><br><span class=\"line\"><span class=\"comment\">// 正在加载源文件ArrayTools.java...</span></span><br><span class=\"line\"><span class=\"comment\">// 正在构造 Javadoc 信息...</span></span><br><span class=\"line\"><span class=\"comment\">// 正在创建目标目录: \"API\\\"</span></span><br><span class=\"line\"><span class=\"comment\">// 标准 Doclet 版本 1.8.0_211</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190427001304.png\" alt=\"WeiyiGeek.生成帮助\" title=\"\" class=\"\">\n                <p>WeiyiGeek.生成帮助</p>\n            </figure></p>\n<p><br></p>\n<p><strong>(4)代码块分类和描述</strong></p>\n<p>代码块概述：在Java中，使用{}括起来的代码被称为代码块。<br>代码块分类：</p>\n<ul>\n<li>根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程讲解)。</li>\n</ul>\n<p>常见代码块的应用：</p>\n<ul>\n<li>a:局部代码块 <ul>\n<li>在方法中出现；限定变量生命周期，及早释放，提高内存利用率</li>\n</ul>\n</li>\n<li>b:构造代码块 (初始化块)<ul>\n<li>在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li>\n</ul>\n</li>\n<li>c:静态代码块 <ul>\n<li>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，并且只执行一次。</li>\n<li>一般用于加载驱动</li>\n</ul>\n</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块案例演示</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Blockcode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态代码块会随着Demo_Blockcode.class一起加载；</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"1.主方法中的静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"2.主方法main\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//局部代码块</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> x = <span class=\"number\">1024</span>;   <span class=\"comment\">//限定变量的声明周期</span></span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"3.主方法main中代码块\"</span>+x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Baser b = <span class=\"keyword\">new</span> Baser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**基础类 */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 静态代码块：随着类加载而加载,且只执行一次</span></span><br><span class=\"line\">    <span class=\"comment\">// 作用:用来给类进行初始化,一般用来加载驱动 ，静态代码块是优先于主方法执行</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"4.Base类的静态代码块\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Baser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"7.Base类构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造代码块:每创建一次对象就会执行一次,优先于构造函数执行</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"5.Base类构造代码块\"</span>);</span><br><span class=\"line\">        test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"6.Base类构造代码块调用的test()函数\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.主方法中的静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 2.主方法main</span></span><br><span class=\"line\"><span class=\"comment\">// 3.主方法main中代码块1024</span></span><br><span class=\"line\"><span class=\"comment\">// 4.Base类的静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 5.Base类构造代码块</span></span><br><span class=\"line\"><span class=\"comment\">// 6.Base类构造代码块调用的test()函数</span></span><br><span class=\"line\"><span class=\"comment\">// 7.Base类构造方法</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"6-继承\"><a href=\"#6-继承\" class=\"headerlink\" title=\"6.继承\"></a>6.继承</h5><p>继承(extends):让类与类之间产生关系,子父类关系;<br><em>继承的好处:</em></p>\n<ul>\n<li>a:提高了代码的复用性</li>\n<li>b:提高了代码的维护性</li>\n<li>c:让类与类之间产生了关系，是多态的前提 (没有继承就没有多态)</li>\n</ul>\n<p><em>继承的弊端</em></p>\n<ul>\n<li>类的耦合性增强了;开发的原则：高内聚，低耦合。</li>\n<li>耦合：类与类的关系</li>\n<li>内聚：就是自己完成某件事情的能力</li>\n</ul>\n<p><em>Java中类的继承特点:</em></p>\n<ul>\n<li>a:Java只支持单继承,不支持多继承(存在安全隐患,一个儿子只能有一个爹),有些语言是支持多继承，格式：extends 类1,类2,…</li>\n<li>b:Java支持多层继承(继承体系)</li>\n<li>如果想用这个体系的所有功能用最底层的类创建对象;如果想看这个体系的共性功能,看最顶层的类;</li>\n</ul>\n<p><em>继承的注意事项:</em></p>\n<ul>\n<li>a:子类只能继承父类所有非私有的成员(成员方法和成员变量)</li>\n<li>b:子类不能继承父类的构造方法，但是可以通过super(马上讲)关键字去访问父类构造方法。</li>\n<li>c:不要为了部分功能而去继承</li>\n</ul>\n<p><em>Q:什么时候使用继承</em><br>答：继承其实体现的是一种关系：”is a”。</p>\n<p>继承中成员变量/方法的关系：</p>\n<ul>\n<li>a:不同名的变量; 同名的变量,会受到就近原则的影响;</li>\n<li>b:不同名的方法; 同名的方法,子类父类有重名的方法时候子类将会重写父类方法;</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承讲解 extends</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_ClassExtends</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.多层继承，使用最底层进行实例化对象</span></span><br><span class=\"line\">        grandChild child = <span class=\"keyword\">new</span> grandChild();</span><br><span class=\"line\">        child.grandChildFun();</span><br><span class=\"line\">        child.childFun();</span><br><span class=\"line\">        child.parentFun();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"comment\">//子类默认是不能继承父类的构造方法,需要借助后面讲解的super进行访问</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类里面的构造方法！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//父类公共方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">parentFun</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是父类里面得方法-parentFun()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//父类私有成员此时子类是无法访问得（除非后面讲解得映射）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类里的私有方法-继承的子类是无法访问的\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">//子类公共方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">childFun</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是子类里面得方法-childFun()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多层继承子类 - &gt; 孙子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">grandChild</span> <span class=\"keyword\">extends</span> <span class=\"title\">Child</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//由于就进原则，子类又就不用父类的了</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">30</span>; <span class=\"comment\">//字父类出现同名的变量是再讲课中，实际上可以直接继承父类的num1；</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//孙子类公共方法</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">grandChildFun</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是孙子类里面得方法-grandChildFun(); num1 = \"</span> + num1); <span class=\"comment\">//num1 = 30</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类里面的构造方法！</span></span><br><span class=\"line\"><span class=\"comment\">// 我是孙子类里面得方法-grandChildFun(); num1 = 30</span></span><br><span class=\"line\"><span class=\"comment\">// 我是子类里面得方法-childFun()</span></span><br><span class=\"line\"><span class=\"comment\">// 我是父类里面得方法-parentFun()</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(1) super关键字</strong><br><em>Q：this和super都代表什么</em></p>\n<ul>\n<li>this:代表当前对象的引用,谁来调用我,我就代表谁</li>\n<li>super:代表当前对象父类的引用</li>\n</ul>\n<p><em>Q:this和super的使用区别</em></p>\n<ul>\n<li>a:调用成员变量<ul>\n<li>this.成员变量 调用本类的成员变量,也可以调用父类的成员变量(关键点：父子类有重名的成员变量将显示本类的成员变量)</li>\n<li>super.成员变量 调用父类的成员变量</li>\n</ul>\n</li>\n<li>b:调用构造方法<ul>\n<li>this(…)    调用本类的构造方法</li>\n<li>super(…)    调用父类的构造方法</li>\n</ul>\n</li>\n<li>c:调用成员方法<ul>\n<li>this.成员方法 调用本类的成员方法,也可以调用父类的方法</li>\n<li>super.成员方法 调用父类的成员方法</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p><strong>(2)继承中构造方法的关系</strong><br><em>Q:为什么子类中所有的构造方法默认都会访问父类中空参数的构造方法呢?</em></p>\n<ul>\n<li>因为子类会继承父类中的数据，可能还会使用父类的数据。</li>\n<li>所以子类初始化之前，一定要先完成父类数据的初始化。</li>\n<li>其实：每一个构造方法的第一条语句默认都是 super() 而Object类最顶层的父类</li>\n</ul>\n<p><em>Q:父类没有无参构造方法,子类怎么办?</em><br>答：this与super进行解决;</p>\n<p>注意事项:</p>\n<ul>\n<li>super(…) 或者 this(….) 必须出现在构造方法的第一条语句上;</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承中的构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_ClassSuper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//继承构造</span></span><br><span class=\"line\">        Son son = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">        son.print();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-------------------------\"</span>);</span><br><span class=\"line\">        son = <span class=\"keyword\">new</span> Son(<span class=\"number\">65536</span>);</span><br><span class=\"line\">        son.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果取消类构造方法，系统会自动添加空参构造方法</span></span><br><span class=\"line\"><span class=\"comment\">//父类 Father ，Object是最顶层的父类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> father = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Father</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  <span class=\"comment\">//当然这里也可加入父类有参 super(32768)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类 空参 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Father</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.father = value;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类 有参 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> father = <span class=\"number\">2048</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//子类空参</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//super();    //缺省该super()是系统自动添加的 ， 必须放在构造器的第一条语句,在构造中与super()不能同时存在</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">10000</span>);   <span class=\"comment\">//本类中的构造方法 ， 必须放在构造器的第一条语句,在构造中与super()不能同时存在</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类 空参 构造方法\"</span>); <span class=\"comment\">//再父子类执行后执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//子类有参</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Son</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(value);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类 有参 构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类：\"</span>+<span class=\"keyword\">super</span>.father);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类：\"</span>+<span class=\"keyword\">this</span>.father);  <span class=\"comment\">//this既可以输出本类变量也可以输出父类的变量(前提是本类没有父类的重名变量)</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类：\"</span>+father);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类 有参 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 子类 有参 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 子类 空参 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 父类：10000</span></span><br><span class=\"line\"><span class=\"comment\">// 子类：2048</span></span><br><span class=\"line\"><span class=\"comment\">// 子类：2048</span></span><br><span class=\"line\"><span class=\"comment\">// -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 父类 有参 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 子类 有参 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 父类：65536</span></span><br><span class=\"line\"><span class=\"comment\">// 子类：2048</span></span><br><span class=\"line\"><span class=\"comment\">// 子类：2048</span></span><br></pre></td></tr></table></figure></p>\n<p>补充执行流程：</p>\n<ul>\n<li>1,JVM调用main方法,main近栈;</li>\n<li>2,遇到 Son son = new Son() 实例化,将父类/子类Father.class-Son.class分别加载进内存再创建对象</li>\n<li>3,由于Java是分层继承初始化的,所有先初始化父类,再初始化子类;</li>\n<li>4,进入子类空参构造,然后调用子类有参构造,调用父类的有参构造,然后依次进行输出;</li>\n<li>5,父类中father成员变量值被改成10000,子类中father成员变量值没改变;</li>\n</ul>\n<p><br></p>\n<p><strong>(3)继承中方法的重写</strong></p>\n<p><em>Q:什么是方法重写?</em><br>答:重写子父类出现了一模一样的方法(注意:返回值类型可以是子父类,这个我们学完面向对象讲) </p>\n<p>方法重写的应用：<br>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法。这样即沿袭了父类的功能，又定义了子类特有的内容。</p>\n<p><em>方法重写注意事项:</em></p>\n<ul>\n<li>a:父类中私有方法不能被重写：因为父类私有方法子类根本就无法继承</li>\n<li>b:子类重写父类方法时访问权限不能更低：最好就一致(关键字public 权限为最低)</li>\n<li>c:父类静态方法/子类也必须通过静态方法进行重写<ul>\n<li>其实这个算不上方法重写，但是现象确实如此，至于为什么算不上方法重写，多态中我会讲解(静态只能覆盖静态)</li>\n<li>子类重写父类方法的时候，最好声明一模一样。</li>\n</ul>\n</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承中方法的重写</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_ClassOverwrite</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意：子类重写父类方法的时候最好声明一模一样</span></span><br><span class=\"line\">        IOS8 ios = <span class=\"keyword\">new</span> IOS8();</span><br><span class=\"line\">        ios.call();</span><br><span class=\"line\">        ios.siriSpeak();</span><br><span class=\"line\">        IOS7.print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父类IOS7</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOS7</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//公共方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用 Phone 打电话!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//私有方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用 Phone 打玩游戏! - 私有方法不能被重写!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//需要重写的父类方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">siriSpeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Speak English!\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.play();  <span class=\"comment\">//调用私有方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//静态方法只能覆盖静态其实不算重写,多态的时候详细讲解</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"使用 Phone 打印文章! -静态方法只能覆盖静态其实不算重写,多态的时候详细讲解\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类IOS8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOS8</span> <span class=\"keyword\">extends</span> <span class=\"title\">IOS7</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//子类方法与父类方法定义一致（或注意定义关键字一般是一致的）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">siriSpeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Speak Chinese!中文\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.siriSpeak();  <span class=\"comment\">//除了构造方法有规则父类需要写入到第一句，其他方法没有这个讲究；</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Phone 打电话!</span></span><br><span class=\"line\"><span class=\"comment\">// Speak Chinese!中文</span></span><br><span class=\"line\"><span class=\"comment\">// Speak English!</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Phone 打玩游戏! - 私有方法不能被重写!</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 Phone 打印文章! -静态方法只能覆盖静态其实不算重写,多态的时候详细讲解</span></span><br></pre></td></tr></table></figure></p>\n<p><em>方法重写的面试题：</em><br>Override和Overload的区别?<br>答：前者是重写,后者是重载；</p>\n<ul>\n<li>方法重写：子类中出现了和父类中方法声明一模一样的方法，与返回值类型有关,返回值是一致(或者是子父类)的;</li>\n<li>方法重载：本类中出现的方法名一样，参数列表个数类型不同的方法，与返回值类型无关。</li>\n<li>子类对象调用方法的时候：先找子类本身再找父类。</li>\n</ul>\n<p>案例2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用继承学生与老师案例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Demo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.实例</span></span><br><span class=\"line\">        Teacher tea = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">\"Weiyi\"</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">        tea.eat();</span><br><span class=\"line\">        tea.action();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"------------------------\"</span>);</span><br><span class=\"line\">        Studentss stu = <span class=\"keyword\">new</span> Studentss(<span class=\"string\">\"Geek\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        stu.eat();</span><br><span class=\"line\">        stu.action();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学生与老师共有类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pub</span> </span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//父类构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pub</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Pub 类得有参构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//公共方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"共有类吃饭方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//override 重写方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"将要被子类重写方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//老师继承Pub</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Teacher</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Teacher 类得有参构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写父类中行为方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name+<span class=\"string\">\" 【正在讲课！】\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学生继承Pub</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Studentss</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pub</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Studentss</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Student 类得有参构造方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//override 行为方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name+<span class=\"string\">\"【正在学习！】\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########### 执行结果 ###############</span></span><br><span class=\"line\"><span class=\"comment\">// Pub 类得有参构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// Teacher 类得有参构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 共有类吃饭方法</span></span><br><span class=\"line\"><span class=\"comment\">// Weiyi 【正在讲课！】</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Pub 类得有参构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// Student 类得有参构造方法</span></span><br><span class=\"line\"><span class=\"comment\">// 共有类吃饭方法</span></span><br><span class=\"line\"><span class=\"comment\">// Geek【正在学习！】</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(4) final关键字</strong><br>final(最终)关键字修饰类,方法以及变量的特点;<br>final修饰特点：</p>\n<ul>\n<li>修饰类，类不能被继承</li>\n<li>修饰变量，变量就变成了常量，只能被赋值一次</li>\n<li>修饰方法，方法不能被重写</li>\n</ul>\n<p>final关键字修饰局部变量:</p>\n<ul>\n<li>基本类型:是值不能被改变</li>\n<li>引用类型:是地址值不能被改变,对象中的属性可以改变</li>\n</ul>\n<p><em>Q:final修饰变量的初始化时机?</em></p>\n<ul>\n<li>方法1：显示初始化必须设置final成员变量得值;</li>\n<li>方法2：在对象构造完毕前即可,设置其final成员得变量值;</li>\n</ul>\n<p>案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//final 关键字讲解</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Final</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//案例1.final 定义过得基本类型是不能被改变得</span></span><br><span class=\"line\">        DemoFinal fi = <span class=\"keyword\">new</span> DemoFinal();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//案例2：地址值不能被改变,对象中得属性可以改变</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Dm1 o = <span class=\"keyword\">new</span> Dm1(<span class=\"string\">\"Whoami\"</span>); </span><br><span class=\"line\">        o.getName();</span><br><span class=\"line\">        o.setName(<span class=\"string\">\"Weiyigeek\"</span>);</span><br><span class=\"line\">        o.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ########### 执行结果 ##########</span></span><br><span class=\"line\"><span class=\"comment\">// 1024 , 1</span></span><br><span class=\"line\"><span class=\"comment\">// Whoami</span></span><br><span class=\"line\"><span class=\"comment\">// Weiyigeek</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类1：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoFinal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//final 常常 public static 与连用</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NUM = <span class=\"number\">1024</span>; <span class=\"comment\">//方法1：被final修饰得成员变量只能初始化一次 (且值不能被改变值 就是常量)</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COUNT;      <span class=\"comment\">//方法2：注意成员变量得默认初始化值是无效得</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoFinal</span><span class=\"params\">()</span> </span>&#123;  <span class=\"comment\">//再对象构造方法中进行设置</span></span><br><span class=\"line\">       COUNT = <span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.NUM + <span class=\"string\">\" , \"</span> + <span class=\"keyword\">this</span>.COUNT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类2:类不能被继承</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dm1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dm1</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//被final修饰得方法不能被重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">notOverride</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"这是不能被重写得类方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"7-多态\"><a href=\"#7-多态\" class=\"headerlink\" title=\"7.多态\"></a>7.多态</h5><p>描述：多态（polmorphic）是指事物存在的多种形态;</p>\n<p><em>多态特征：</em></p>\n<ul>\n<li>要有继承关系</li>\n<li>要有方法重用</li>\n<li>要有父类引用指向子类对象</li>\n</ul>\n<p><em>多态的好处与弊端？</em></p>\n<ul>\n<li>好处：提高了代码的维护性(继承保证)/提高了代码的扩展性(由多态保证)，可以当作形参也可以接收任意子类对象;</li>\n<li>弊端：不能使用子类特有属性和行为;</li>\n</ul>\n<p>代码体现多态：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态体现案例：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Polymorphic</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//示例1.Cat类实例化</span></span><br><span class=\"line\">        Cat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//示例2.父类引用指向子类对象</span></span><br><span class=\"line\">        Animal a = <span class=\"keyword\">new</span> Cat(); <span class=\"comment\">//代表了是动物里面的猫</span></span><br><span class=\"line\">        a.eat();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//示例3.多态的伪装</span></span><br><span class=\"line\">        Animal wz = <span class=\"keyword\">new</span> Cat(); <span class=\"comment\">//它是动物但它实际是猫 使用动物类结构来声明 new cat 类</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\"</span> + wz.name); <span class=\"comment\">//这里显示它的大类，实际名称是猫</span></span><br><span class=\"line\">        wz.action(); <span class=\"comment\">//实际是猫在做的事情</span></span><br><span class=\"line\">        <span class=\"comment\">//如果下面调用wz.play就会报错由于父类中没有定义该play的成员方法</span></span><br><span class=\"line\">        <span class=\"comment\">//wz.play();  //如果要正确执行就需要后面遇到的 [ 向上转型和向下转型 方法]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    String  name = <span class=\"string\">\"大类-猫科\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动物正在吃饭!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动物正在做自己该做的事情!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    String name = <span class=\"string\">\"小类-猫儿\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫儿吃鱼!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫儿正在勤劳的抓老鼠！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"猫儿玩耍中.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//###输出结果####//</span></span><br><span class=\"line\">猫儿吃鱼!</span><br><span class=\"line\">猫儿吃鱼!</span><br><span class=\"line\">大类-猫科</span><br><span class=\"line\">猫儿正在勤劳的抓老鼠！</span><br></pre></td></tr></table></figure></p>\n<p><em>多态中的成员访问特点:</em></p>\n<ul>\n<li>成员变量: 编译看左边(父类变量),运行看左边(父类变量) , 声明对象看类型</li>\n<li>成员方法: 编译看左边(父类方法),运行看右边(子类方法) , 注意在编译前是看的父类方法但是在实际运行中就看子类(动态绑定);</li>\n<li>静态方法(不存在动态绑定)：编译看左边(父类变量),运行看左边(父类变量) , 静态和类是非常的相似算不上重写所有还是左边的,<code>只有非静态的成员方法编译看左边运行看右边</code>;</li>\n</ul>\n<p>代码实例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态Polymorphic中的特点</span></span><br><span class=\"line\"><span class=\"comment\"> * 成员变量 与 成员方法 与 静态方法</span></span><br><span class=\"line\"><span class=\"comment\"> ***/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_polymorphic1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//示例1.特点之成员变量</span></span><br><span class=\"line\">        Father f = <span class=\"keyword\">new</span> Son();      <span class=\"comment\">//注意看左边父类</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"father 类定义\"</span> + f.num);</span><br><span class=\"line\"></span><br><span class=\"line\">        Son s = <span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"son 类定义：\"</span> + s.num);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//示例2.特点之成员方法</span></span><br><span class=\"line\">        f.print();  <span class=\"comment\">//实际还是指向子类的方法</span></span><br><span class=\"line\">        s.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//示例3.特点之静态方法</span></span><br><span class=\"line\">        f.printf();  <span class=\"comment\">//相当于是Father.printf() 即类名直接调用</span></span><br><span class=\"line\">        s.printf();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是一个父类\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printf</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是一个Father父类的静态方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是一个子类\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printf</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是一个Son子类的静态方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//###输出结果####//</span></span><br><span class=\"line\">father 类定义<span class=\"number\">10</span></span><br><span class=\"line\">son 类定义：<span class=\"number\">20</span></span><br><span class=\"line\">我是一个子类</span><br><span class=\"line\">我是一个子类</span><br><span class=\"line\">我是一个Father父类的静态方法</span><br><span class=\"line\">我是一个Son子类的静态方法</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190619221529.png\" alt=\"WeiyiGeek.注意成员方法\" title=\"\" class=\"\">\n                <p>WeiyiGeek.注意成员方法</p>\n            </figure></p>\n<p><br></p>\n<p><strong>(1)多态中的向上与向下转型</strong><br>在开发中很少判断您是哪一个类型的然后来强转,就是直接采用父类类型参数接收对应的子类类型;<br>在开发中经常是您父类中具备的方法,然后子类来重写方法，然后把父类方法当作参数然后传入子类类型即可;<br>补充关键字: instanceof (判断前边的引用是否是后边的数据类型)</p>\n<p><em>实际案例：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示：多态中向上转型和向下转型</span></span><br><span class=\"line\"><span class=\"comment\"> *  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_polymorphicSuperman</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//##示例1.##</span></span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Superman();   <span class=\"comment\">//这是向上转型 （重点）</span></span><br><span class=\"line\">        System.out.println(p.name);</span><br><span class=\"line\">        p.测试(); <span class=\"comment\">//编译看左边(父类方法),运行看右边(子类方法)</span></span><br><span class=\"line\">        Superman su = (Superman)p;  <span class=\"comment\">//这是向下转型 （就可以使用子类的静态方法和成员变量）</span></span><br><span class=\"line\">        System.out.println(su.name);</span><br><span class=\"line\">        su.测试(); <span class=\"comment\">//执行子类方法</span></span><br><span class=\"line\">        su.fly();  <span class=\"comment\">//执行子类方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//##示例2.###</span></span><br><span class=\"line\">        <span class=\"comment\">//Animal a = new Cat(); //开发的是很少在创建对象的时候用父类引用指向子类对象,直接创建子类对象更方便,可以使用子类中的特有属性和行为</span></span><br><span class=\"line\">        method(<span class=\"keyword\">new</span> Cat());</span><br><span class=\"line\">        method(<span class=\"keyword\">new</span> Dog());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果把狗强转成猫就会出现类型转换异常,ClassCastException</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">(Animal a)</span> </span>&#123;\t<span class=\"comment\">//采用父类当作当作参数的时候用多态最好,因为扩展性强</span></span><br><span class=\"line\">    <span class=\"comment\">//上下都是关键点（重点值得学习）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> Cat) &#123;</span><br><span class=\"line\">      Cat c = (Cat)a;  <span class=\"comment\">//强制转换（多态的向下转换）</span></span><br><span class=\"line\">      c.eat();</span><br><span class=\"line\">      c.catchMouse();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a <span class=\"keyword\">instanceof</span> Dog) &#123;</span><br><span class=\"line\">      Dog d = (Dog)a;</span><br><span class=\"line\">      d.eat();</span><br><span class=\"line\">      d.lookHome();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     a.eat();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    String name = <span class=\"string\">\"Person\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 测试() &#123; System.out.println(<span class=\"string\">\"person人类测试！\"</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Superman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    String name = <span class=\"string\">\"Superman\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 测试() &#123; System.out.println(<span class=\"string\">\"Superman超人测试！\"</span>);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">\"去救人！\"</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;System.out.println(<span class=\"string\">\"动物吃饭\"</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;System.out.println(<span class=\"string\">\"猫吃鱼\"</span>);&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">catchMouse</span><span class=\"params\">()</span> </span>&#123;System.out.println(<span class=\"string\">\"抓老鼠\"</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;System.out.println(<span class=\"string\">\"狗吃肉\"</span>);&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lookHome</span><span class=\"params\">()</span> </span>&#123;System.out.println(<span class=\"string\">\"看家\"</span>);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#########执行结果###############//</span></span><br><span class=\"line\"><span class=\"comment\">// Person</span></span><br><span class=\"line\"><span class=\"comment\">// Superman超人测试！</span></span><br><span class=\"line\"><span class=\"comment\">// Superman</span></span><br><span class=\"line\"><span class=\"comment\">// Superman超人测试！</span></span><br><span class=\"line\"><span class=\"comment\">// 去救人！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 猫吃鱼</span></span><br><span class=\"line\"><span class=\"comment\">// 抓老鼠</span></span><br><span class=\"line\"><span class=\"comment\">// 狗吃肉</span></span><br><span class=\"line\"><span class=\"comment\">// 看家</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190626225725.png\" alt=\"WeiyiGeek.转型示例内存图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.转型示例内存图</p>\n            </figure>\n<p><br></p>\n<h5 id=\"8-抽象\"><a href=\"#8-抽象\" class=\"headerlink\" title=\"8.抽象\"></a>8.抽象</h5><p>描述：抽象就是看不懂的不好理解的;</p>\n<p>抽象类/方法的特点：</p>\n<ul>\n<li>抽象类和抽象方法必须用abstract关键字修饰</li>\n<li>抽象类：abstract class 类名 {} , 抽象方法：public abstract void eat() - 是没有方法体的;</li>\n<li>抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者是接口;</li>\n<li>抽象类不能实例化</li>\n<li>抽象类的子类：<code>要么是抽象类，要么重写抽象类中的所有抽象方法</code></li>\n</ul>\n<p><em>那么抽象类如何实例化呢?</em><br>答：按照多态的方式(多态的一种，抽象类多态)，由具体的子类实例化。</p>\n<p><em>抽象类的成员特点</em></p>\n<ul>\n<li>a:成员变量：既可以是变量，也可以是常量。</li>\n<li>abstract是否可以修饰成员变量? 不能修饰成员变量</li>\n<li>b:有构造方法,用于子类访问父类数据的初始化。</li>\n<li>c:成员方法：既可以是抽象的，也可以是非抽象的。</li>\n</ul>\n<p><em>抽象类的成员方法特性：</em></p>\n<ul>\n<li>a:抽象方法 强制要求子类做的事情。</li>\n<li>b:非抽象方法 子类继承的事情，提高代码复用性。</li>\n</ul>\n<p>abstract 不能和那些关键字共存：</p>\n<ul>\n<li>static 静态方法, 使用类名.方法来调用静态方法是没有意义的，被修饰的方法无方法体：</li>\n<li>final 定义常量/方法, 与abstract产生冲突一个是让子类重写一个是不让子类重写;</li>\n<li>private 私有变量/方法，与abstract冲突一个是让子类看到并且强制重写，另外一个是被private修饰不让子类访问;</li>\n</ul>\n<p>实际案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">abstractDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.Animal是抽象的不能进行实例化,所有会报错;</span></span><br><span class=\"line\">       <span class=\"comment\">//Animal a = new Animal(); //Exception in thread \"main\" java.lang.Error: Unresolved compilation problem: </span></span><br><span class=\"line\">    <span class=\"comment\">//2.但是可以通过多态来,将 父类引用指向子类对象 </span></span><br><span class=\"line\">        Animal c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">    <span class=\"comment\">//3.抽象类的特点</span></span><br><span class=\"line\">        c.print();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 【多态重写】Cat eat Fishc!</span></span><br><span class=\"line\"><span class=\"comment\">// 【抽象类中可以有 非抽象成员方法 】</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;    <span class=\"comment\">//抽象类</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">10</span>;         <span class=\"comment\">//抽象类中成员变量可以是变量也可以是常量</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num2 = <span class=\"number\">20</span>;    <span class=\"comment\">//为了给子类初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"【抽象类中可以有 非抽象成员方法 】\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;  <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//多态重写抽象类里的抽象方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"【多态重写】Cat eat Fishc!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CCat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat1</span> <span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"【抽象类子类】 mutil Cat eat Fishc!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>示例练习：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">abstractDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象类进行练习</span></span><br><span class=\"line\"><span class=\"comment\">// * 具体事物：猫，狗</span></span><br><span class=\"line\"><span class=\"comment\">// * 共性：姓名，年龄，吃饭</span></span><br><span class=\"line\"><span class=\"comment\">// * 猫的特性:抓老鼠</span></span><br><span class=\"line\"><span class=\"comment\">// * 狗的特性:看家</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cat c = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"1\"</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        Dog d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">\"1\"</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cat 姓名：\"</span>+ c.getName() +<span class=\"string\">\" 年龄：\"</span>+c.getAge());</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">        c.ability();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Dog 姓名：\"</span>+ d.getName() +<span class=\"string\">\" 年龄：\"</span>+d.getAge());</span><br><span class=\"line\">        d.eat();</span><br><span class=\"line\">        d.ability();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">()</span></span>&#123;&#125;;      <span class=\"comment\">//空参构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;      <span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置姓名</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取姓名</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置年龄</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取年龄</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">()</span> </span>&#123;&#125;; <span class=\"comment\">//空参</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age); <span class=\"comment\">//由于是私有成员变量,需要将更改传入super父类那里;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cat eat Fishc!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ability</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Catch MOUSE!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">()</span></span>&#123;&#125;; <span class=\"comment\">//空参</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123; <span class=\"comment\">//有参</span></span><br><span class=\"line\">        <span class=\"comment\">//由于是私有成员变量,需要将更改传入super父类那里;</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name,age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cat eat Bone!!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ability</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Catch House!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat 姓名：1 年龄：8</span><br><span class=\"line\">Cat eat Fishc!!</span><br><span class=\"line\">Catch MOUSE!</span><br><span class=\"line\">Dog 姓名：1 年龄：12</span><br><span class=\"line\">Cat eat Bone!!</span><br><span class=\"line\">Catch House!</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with <span class=\"built_in\">exit</span> code 0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"9-接口\"><a href=\"#9-接口\" class=\"headerlink\" title=\"9.接口\"></a>9.接口</h5><p><strong>接口的概述及其特点</strong><br>接口概述:</p>\n<ul>\n<li>从狭义的角度讲就是指java中的<code>interface</code></li>\n<li>从广义的角度讲对外<code>提供规则</code>的都是接口 </li>\n</ul>\n<p>接口特点:</p>\n<ul>\n<li>接口用关键字interface表示    : interface 接口名 {}</li>\n<li>类实现接口用implements表示: <code>* class 类名 implements 接口名 {}</code></li>\n</ul>\n<p>接口的子类：</p>\n<ul>\n<li>a:可以是抽象类,但是意义不大。</li>\n<li>b:可以是具体类（普通类）,要重写接口中的所有抽象方法。(推荐方案)</li>\n</ul>\n<p>接口成员特点：</p>\n<ul>\n<li>成员变量；只能是常量，并且是静态的并公共的。<ul>\n<li>默认修饰符：public static final; 建议自己手动给出。</li>\n</ul>\n</li>\n<li>构造方法：接口没有构造方法。</li>\n<li>成员方法：只能是抽象方法,不能是非抽象方法;<ul>\n<li>默认修饰符：public abstract; 建议自己手动给出。</li>\n</ul>\n</li>\n</ul>\n<p><em>接口是不能实例化的，那么接口如何实例化呢</em>?<br>答:按照多态的方式来实例化。</p>\n<p>案例：演示接口以及接口成员特点<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@File</span> : InterfaceDemo1.java</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@CreateTime</span> : 2019/7/26 9:58</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@Author</span> : WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@Function</span> :实现Interface接口学习与利用</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterfaceDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.接口不能被实例化,与调用抽象方法是一致的没有任何意义</span></span><br><span class=\"line\">        <span class=\"comment\">// Inter i = new Inter()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.接口采用多态的方式进行调用</span></span><br><span class=\"line\">        <span class=\"comment\">//(1) 普通类</span></span><br><span class=\"line\">        Inter i = <span class=\"keyword\">new</span> Demo();  <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">        i.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//(2) 接口子类抽象类-&gt;多态调用</span></span><br><span class=\"line\">        Inter j = <span class=\"keyword\">new</span> sub();</span><br><span class=\"line\">        j.print();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.接口中的成员变量</span></span><br><span class=\"line\">        String num1 = String.valueOf(i.num1);</span><br><span class=\"line\">        String num2 = String.valueOf(Inter.num2);</span><br><span class=\"line\">        System.out.println(num1 + num2); <span class=\"comment\">//静态成员方法可以直接采用 类名.属性 进行调用</span></span><br><span class=\"line\">        System.out.print(i.num1+<span class=\"string\">\" VS \"</span>+Inter.num2); <span class=\"comment\">//静态成员方法可以直接采用 类名.属性 进行调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接口中成员变量(是常量并且是静态的并公共的)，默认修饰符：public static final</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"number\">1024</span>;   <span class=\"comment\">//效果同下</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> num2 = <span class=\"number\">1024</span>;  <span class=\"comment\">//推荐方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//接口中方法都是抽象的,不能定义非抽象方法，以及没有构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口实现 - 具体类(普通类)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  <span class=\"comment\">//默认是继承Object类即：Class Demo extends Object implements Inter</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[1].接口子类-普通类-抽象方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口实现 - 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;  <span class=\"comment\">//无任何意义</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sub</span> <span class=\"keyword\">extends</span> <span class=\"title\">Demo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[2.]接口子类-抽象类-多态方式-抽象方法被调用\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1].接口子类-普通类-抽象方法被调用</span><br><span class=\"line\">[2.]接口子类-抽象类-多态方式-抽象方法被调用</span><br><span class=\"line\">10241024</span><br><span class=\"line\">1024 VS 1024</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>抽象类和接口区别总结</em>，<br>成员区别:</p>\n<ul>\n<li>抽象类：<ul>\n<li>成员变量：变量或常量</li>\n<li>成员方法：可以是抽象,也可以是非抽象</li>\n<li>构造方法: 有</li>\n</ul>\n</li>\n<li>接口：<ul>\n<li>成员变量：只可以是常量</li>\n<li>成员方法：只可以是抽象</li>\n<li>构造方法: 无</li>\n</ul>\n</li>\n</ul>\n<p>类与类,类与接口,接口与接口的关系：</p>\n<ul>\n<li>a:类与类：<ul>\n<li>继承关系,只能单继承,可以多层继承。</li>\n</ul>\n</li>\n<li>b:类与接口：<ul>\n<li>实现关系,可以单实现,也可以多实现。</li>\n<li>并且还可以在继承一个类的同时实现多个接口。</li>\n</ul>\n</li>\n<li>c:接口与接口：<ul>\n<li>继承关系,可以单继承,也可以多继承。</li>\n</ul>\n</li>\n</ul>\n<p>设计理念区别：</p>\n<ul>\n<li>抽象类 被继承体现的是：”is a”的关系。抽象类中定义的是该继承体系的共性功能。</li>\n<li>接口 被实现体现的是：”like a”的关系。接口中定义的是该继承体系的扩展功能。</li>\n</ul>\n<p>抽象类与接口区别案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@File</span> : InterfaceDemo2.java</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@CreateTime</span> : 2019/7/26 10:45</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@Author</span> : WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"> * # <span class=\"doctag\">@Function</span> :抽象类与接口区别案例</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterfaceDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//继承类</span></span><br><span class=\"line\">        Cat1 c = <span class=\"keyword\">new</span> Cat1(<span class=\"string\">\"Love\"</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">        c.eat();</span><br><span class=\"line\">        c.play();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//普通类-继承类与接口</span></span><br><span class=\"line\">        JumpCat d = <span class=\"keyword\">new</span> JumpCat(<span class=\"string\">\"baby\"</span>, <span class=\"number\">13</span>);</span><br><span class=\"line\">        d.eat();</span><br><span class=\"line\">        d.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFather</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AnimalFather</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//建立方法方便返回私有成员变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Jumping</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承类 - 实现重写</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimalFather</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat1</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">super</span>.getName() + <span class=\"string\">\"Cat eat Fishc！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">super</span>.getName() + <span class=\"string\">\"Cat play 毛线\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类继承Cat1又继承接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JumpCat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cat1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Jumping</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要一个有参构造 （注意不要忘记，虽然Cat1类类存在，但是任然需要）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JumpCat</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重写接口中抽象方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jump</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Cat Jumping！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoveCat eat Fishc！</span><br><span class=\"line\">LoveCat play 毛线</span><br><span class=\"line\">babyCat eat Fishc！</span><br><span class=\"line\">babyCat play 毛线</span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"10-装饰设计模式\"><a href=\"#10-装饰设计模式\" class=\"headerlink\" title=\"10.装饰设计模式\"></a>10.装饰设计模式</h5><p>描述:装饰设计模式优点:耦合性没有这么强,便于功能的扩展;（值得学习借鉴）</p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Classdesign</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 装饰设计模式</span></span><br><span class=\"line\">    <span class=\"comment\">// 优点:耦合性没有这么强,便于功能的扩展;（值得学习借鉴）</span></span><br><span class=\"line\">    Tea t = <span class=\"keyword\">new</span> Tea(<span class=\"keyword\">new</span> Stu());</span><br><span class=\"line\">    t.able();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">code</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">able</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//扩展接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stu</span> <span class=\"keyword\">implements</span> <span class=\"title\">code</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">able</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"C++\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"VF\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//装饰设计(精华之处)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tea</span> <span class=\"keyword\">implements</span> <span class=\"title\">code</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Stu demo;  <span class=\"comment\">//获取到被包装的类的引用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tea</span><span class=\"params\">(Stu demo)</span> </span>&#123; <span class=\"comment\">//通过构造函数创建对象的时候,传入被包装的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.demo = demo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">able</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    demo.able();  <span class=\"comment\">//扩展技能</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"### 扩展的技能 ###\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Python\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Perl\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"php\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Javascript\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Node.js\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"HTML/XML\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//###### 执行结果 #######</span></span><br><span class=\"line\"><span class=\"comment\">// C</span></span><br><span class=\"line\"><span class=\"comment\">// C++</span></span><br><span class=\"line\"><span class=\"comment\">// VF</span></span><br><span class=\"line\"><span class=\"comment\">// ### 扩展的技能 ###</span></span><br><span class=\"line\"><span class=\"comment\">// Python</span></span><br><span class=\"line\"><span class=\"comment\">// Perl</span></span><br><span class=\"line\"><span class=\"comment\">// php</span></span><br><span class=\"line\"><span class=\"comment\">// Javascript</span></span><br><span class=\"line\"><span class=\"comment\">// Java</span></span><br><span class=\"line\"><span class=\"comment\">// Node.js</span></span><br><span class=\"line\"><span class=\"comment\">// HTML/XML</span></span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"11-工厂设计模式\"><a href=\"#11-工厂设计模式\" class=\"headerlink\" title=\"11.工厂设计模式\"></a>11.工厂设计模式</h5><p><strong>1) 简单工厂模式</strong><br>描述:简单工厂模式又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例；</p>\n<ul>\n<li>优点:客户端不需要在负责对象的创建，从而明确了各个类的职责</li>\n<li>缺点:这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些对象的创建方式不同，就需要不断的修改工厂类，不利于后期的维护</li>\n</ul>\n<p>基础示例1：简单工厂模式使用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开始在测试类中每个具体的内容自己创建对象，但是创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。</span></span><br><span class=\"line\"><span class=\"comment\">// * 动物抽象类：public abstract Animal &#123; public abstract void eat(); &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// * 具体狗类：public class Dog extends Animal &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// * 具体猫类：public class Cat extends Animal &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Animal.java 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//狗类/狗类继承方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//狗类 Dog.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"狗啃骨头!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//猫类 Cat.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"猫吃鱼儿!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-------------------</span></span><br><span class=\"line\"><span class=\"comment\">//简单工厂设计模式Factory.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//方式1:</span></span><br><span class=\"line\">  <span class=\"comment\">//public static Dog createDog() &#123;return new Dog();&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//public static Cat createCat() &#123;return new Cat();&#125;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方法2:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Animal <span class=\"title\">createanimal</span><span class=\"params\">(String animalname)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"string\">\"Dog\"</span>.equals(animalname))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"Cat\"</span>.equals(animalname))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//---------</span></span><br><span class=\"line\"><span class=\"comment\">//注意：同一路径下的包不用导入，工厂模式测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_SimpleFactory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//（1）实例1.测试简单工厂方法模式</span></span><br><span class=\"line\">  <span class=\"comment\">//public static Dog createDog() &#123;return new Dog();&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//public static Cat createCat() &#123;return new Cat();&#125;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Factory f1 = <span class=\"keyword\">new</span> Factory();  <span class=\"comment\">//创建工厂方法模式对象</span></span><br><span class=\"line\">    Dog d = (Dog)f1.createanimal(<span class=\"string\">\"Dog\"</span>); <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">    d.eat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Cat c = (Cat)f1.createanimal(<span class=\"string\">\"Cat\"</span>); <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">    c.eat();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行接口:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">狗啃骨头!</span><br><span class=\"line\">猫吃鱼儿!</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2) 工厂方法模式（推荐）</strong><br>概述:工厂方法模式中<code>抽象工厂类负责定义创建对象的接口</code>，具体对象的创建工作由继承抽象工厂的具体类实现。</p>\n<p><em>优点:</em> 客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可，不影响已有的代码，后期维护容易，增强了系统的扩展性;<br><em>缺点:</em> 需要额外的编写代码，增加了工作量;</p>\n<p>基础示例: 值得学习<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开始，在测试类中每个具体的内容自己创建对象，但是创建对象的工作如果比较麻烦，就需要有人专门做这个事情，所以就知道了一个专门的类来创建对象。发现每次修改代码太麻烦，用工厂方法改进，针对每一个具体的实现提供一个具体工厂。</span></span><br><span class=\"line\">动物抽象类：<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Animal &#123; <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>; &#125;</span><br><span class=\"line\">具体狗类：<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\">具体猫类：<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码都不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//工厂接口：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Factory</span> </span>&#123;<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Animal <span class=\"title\">createAnimal</span><span class=\"params\">()</span></span>;&#125; <span class=\"comment\">//接口中的抽象方法是猫、狗的父类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//狗工厂/猫工厂（测试的时候同时写入到了一个class文件）</span></span><br><span class=\"line\"><span class=\"comment\">// public class DogFactory implements Factory &#123;public Animal createAnimal() &#123;&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// public class CatFactory implements Factory &#123;public Animal createAnimal() &#123;&#125;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">//狗类 DogFactor.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DogFactory</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Factory1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">createAnimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//猫类 CatFactor.java</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory1</span>  </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">createAnimal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----工厂方法设计模式-----</span></span><br><span class=\"line\"><span class=\"comment\">//注意：同一路径下的包不用导入</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_Factory</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//实例1.测试工厂方法模式</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实现狗/猫工厂设计模式（非常值得学习）</span></span><br><span class=\"line\">    DogFactory df = <span class=\"keyword\">new</span> DogFactory();</span><br><span class=\"line\">    Dog d = (Dog)df.createAnimal();</span><br><span class=\"line\">    d.eat();</span><br><span class=\"line\">    </span><br><span class=\"line\">    CatFactory cf = <span class=\"keyword\">new</span> CatFactory();</span><br><span class=\"line\">    Cat c = (Cat)cf.createAnimal();</span><br><span class=\"line\">    c.eat();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果同上(比较推荐此方式)</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]<br>","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}