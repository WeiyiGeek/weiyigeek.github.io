{"title":"Go编程之相关命令工具记录","slug":"编程世界/Go/Go编程之相关命令工具记录","date":"2020-04-25T03:16:58.000Z","updated":"2022-03-11T03:29:44.356Z","url":"2020/4-25-600.html","path":"api/articles/2020/4-25-600.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Go工具命令\"><a href=\"#0x00-Go工具命令\" class=\"headerlink\" title=\"0x00 Go工具命令\"></a>0x00 Go工具命令</h2><h3 id=\"get-命令\"><a href=\"#get-命令\" class=\"headerlink\" title=\"get 命令\"></a>get 命令</h3><p>该命令可以借助<code>代码管理工具</code>通过远程拉取或更新代码包及其依赖包，并自动<code>完成编译和安装</code>,整个过程类似安装App一样;</p>\n<p>目前支持的动态获取远程代码包的有<code>BitBucket、GitHub、Google Code 和 Launchpad</code>,所以为了 go get 命令能正常工作您需要安装与远程包仓库匹配的代码管理工具，如 <code>Git、SVN、HG</code> 等，由于它自动根据不同的域名调用不同的源码工具，对应关系如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitBucket (Mercurial Git)</span><br><span class=\"line\">GitHub (Git)</span><br><span class=\"line\">Google Code Project Hosting (Git, Mercurial, Subversion)</span><br><span class=\"line\">Launchpad (Bazaar)</span><br></pre></td></tr></table></figure></p>\n<p>该命令内部实际上分成了两步操作:</p>\n<ul>\n<li>第一步是下载源码包假设远程包的路径格式<code>github.com/golang/go</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#比如github网站的项目包路径都有一个共同的标准</span></span><br><span class=\"line\">github.com - 网站域名：表示代码托管的网站，类似于电子邮件 @ 后面的服务器地址。</span><br><span class=\"line\">golang - 作者或机构: 表明这个项目的归属，一般为网站的用户名，如果需要找到这个作者下的所有项目，可以直接在网站上通过搜索“域名/作者”进行查看。( 似于电子邮件 @ 前面的部分。)</span><br><span class=\"line\">go - 项目名称 :每个网站下的作者或机构可能会同时拥有很多的项目，图中标示的部分表示项目名称。</span><br></pre></td></tr></table></figure></li>\n<li>第二步是执行 go instal</li>\n</ul>\n<p>参数介绍：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> get [options]</span><br><span class=\"line\">* -d 只下载不安装</span><br><span class=\"line\">* -f 只有在你包含了 -u 参数的时候才有效，不让 -u 去验证 import 中已经获取了的包(`对于本地 fork 的包特别有用`)</span><br><span class=\"line\">* -fix 在获取源码之后先运行 fix，然后再去做其他的事情</span><br><span class=\"line\">* -t 同时也下载需要为运行测试所需要的包</span><br><span class=\"line\">* -u 下载丢失的包，但不会更新已经存在的包</span><br><span class=\"line\">* -v 显示操作流程的日志及信息，方便检查错误</span><br><span class=\"line\">* -insecure\t允许使用不安全的 HTTP 方式进行下载操作</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"test-命令\"><a href=\"#test-命令\" class=\"headerlink\" title=\"test 命令\"></a>test 命令</h3><p><br/></p>\n<h3 id=\"doc-命令\"><a href=\"#doc-命令\" class=\"headerlink\" title=\"doc 命令\"></a>doc 命令</h3><p><br/></p>\n<h3 id=\"mod-命令-包依赖管理\"><a href=\"#mod-命令-包依赖管理\" class=\"headerlink\" title=\"mod 命令 - 包依赖管理\"></a>mod 命令 - 包依赖管理</h3><p>描述: 为什么需要依赖管理?</p>\n<blockquote>\n<p>答: 最早的时候Go所依赖的所有的第三方库都放在<code>$GOPATH</code>环境变量的这个目录下面, 导致了同一个库只能保存一个版本的代码，如果不同的项目依赖同一个第三方的库的不同版本，应该怎么解决？<br>起初是采用vendor模式，而现在是采用module模式。</p>\n</blockquote>\n<h4 id=\"1-Vendor-模式\"><a href=\"#1-Vendor-模式\" class=\"headerlink\" title=\"(1) Vendor 模式\"></a>(1) Vendor 模式</h4><p>从v1.5开始开始引入vendor模式，如果项目目录下有vendor目录，那么go工具链会优先使用vendor内的包进行编译、测试等。</p>\n<p>其中godep是<code>由vendor模式</code>实现的Go语言的第三方依赖管理工具，它是在<code>go module</code>出现前广泛使用的方式，其类似的还有由社区维护准官方包管理工具dep。</p>\n<p>Tips：vender 的机制能够控制Go语言程序编译时依赖包搜索路径的优先级, 例如: 查找项目的某个依赖包, 首先会在项目根目录下的vender文件夹中查找, 如果没有找到就会去<code>$GOAPTH/src</code>目录下查找。</p>\n<p>简单安装使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装godep工具</span></span><br><span class=\"line\">$ go get github.com/tools/godep</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 了解godep命令</span></span><br><span class=\"line\">&gt; 在终端输入 `godep <span class=\"built_in\">help</span>` 查看支持的所有命令</span><br><span class=\"line\">godep save     将依赖项输出并复制到Godeps.json文件中</span><br><span class=\"line\">godep go       使用保存的依赖项运行go工具</span><br><span class=\"line\">godep get      下载并安装具有指定依赖项的包</span><br><span class=\"line\">godep path     打印依赖的GOPATH路径</span><br><span class=\"line\">godep restore  在GOPATH中拉取依赖的版本</span><br><span class=\"line\">godep update   更新选定的包或go版本</span><br><span class=\"line\">godep diff     显示当前和以前保存的依赖项集之间的差异</span><br><span class=\"line\">godep version  查看版本信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用godep操作</span></span><br><span class=\"line\">在项目目录下执行`godep save`命令，会在当前项目中创建`Godeps`和`vender`两个文件夹,</span><br><span class=\"line\">* Godeps文件夹: 下有一个Godeps.json的文件，里面记录了项目所依赖的包信息。</span><br><span class=\"line\">* vender文件夹: 下是项目依赖的包的源代码文件。</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>godep</code>后的开发流程:</p>\n<ol>\n<li>保证程序能够正常编译</li>\n<li>执行godep save保存当前项目的所有第三方依赖的版本信息和代码</li>\n<li>提交Godeps目录和vender目录到代码库。</li>\n<li>如果要更新依赖的版本，可以直接修改Godeps.json文件中的对应项</li>\n</ol>\n<p><br></p>\n<h4 id=\"2-Module-模式\"><a href=\"#2-Module-模式\" class=\"headerlink\" title=\"(2) Module 模式\"></a>(2) Module 模式</h4><p>在Go1.11版本之后官方推出版本管理工具<code>(go module)</code>，并从Go1.13版本开始它是Go语言默认的依赖管理工具。</p>\n<p>首先要启用go module支持就需要设置<code>GO111MODULE</code>环境变量,通过它可以开启或关闭模块支持，它有三个可选值：off、on、auto(默认值)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.禁用模块支持，编译时会从GOPATH和vendor文件夹中查找包。</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.启用模块支持，编译时会忽略GOPATH和vendor文件夹，只根据go.mod下载依赖。</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.当项目在`$GOPATH/src`外且项目根目录有go.mod文件时，开启模块支持。</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=auto</span><br></pre></td></tr></table></figure></p>\n<p>简单来说,设置<code>GO111MODULE=on</code>之后就可以使用<code>go module</code>了,以后就没有必要在GOPATH中创建项目了，并且还能够很好的管理项目依赖的第三方包信息。</p>\n<p><strong>在 go.mod 文件记录了项目所有的依赖信息，其结构大致如下：</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module github.com/Q1mi/studygo/blogger  <span class=\"comment\">// # 定义包名</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.12</span>  <span class=\"comment\">// # 定义依赖包及版本</span></span><br><span class=\"line\">require (</span><br><span class=\"line\">  github.com/DeanThompson/ginpprof v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20190408063150</span><span class=\"number\">-3</span>be636683586</span><br><span class=\"line\">  github.com/gin-gonic/gin v1<span class=\"number\">.4</span><span class=\"number\">.0</span></span><br><span class=\"line\">  github.com/<span class=\"keyword\">go</span>-sql-driver/mysql v1<span class=\"number\">.4</span><span class=\"number\">.1</span></span><br><span class=\"line\">  github.com/jmoiron/sqlx v1<span class=\"number\">.2</span><span class=\"number\">.0</span></span><br><span class=\"line\">  github.com/satori/<span class=\"keyword\">go</span>.uuid v1<span class=\"number\">.2</span><span class=\"number\">.0</span></span><br><span class=\"line\">  google.golang.org/appengine v1<span class=\"number\">.6</span><span class=\"number\">.1</span> <span class=\"comment\">// indirect # 表示间接引用</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>命令介绍:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用 go module支持</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> GO111MODULE=auto </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 了解 go mod 命令</span></span><br><span class=\"line\">go mod download    <span class=\"comment\"># 下载依赖的module到本地cache（默认为$GOPATH/pkg/mod目录）</span></span><br><span class=\"line\">go mod edit        <span class=\"comment\"># 编辑go.mod文件</span></span><br><span class=\"line\">go mod graph       <span class=\"comment\"># 打印模块依赖图</span></span><br><span class=\"line\">go mod init        <span class=\"comment\"># 初始化当前文件夹, 创建go.mod文件</span></span><br><span class=\"line\">go mod tidy        <span class=\"comment\"># 增加缺少的module，删除无用的module</span></span><br><span class=\"line\">go mod vendor      <span class=\"comment\"># 将依赖复制到vendor下</span></span><br><span class=\"line\">go mod verify      <span class=\"comment\"># 校验依赖</span></span><br><span class=\"line\">go mod why         <span class=\"comment\"># 解释为什么需要依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 go module 管理依赖后会在项目根目录下生成两个文件go.mod和go.sum。</span></span><br><span class=\"line\">$ go mod init</span><br></pre></td></tr></table></figure></p>\n<p>依赖的版本<code>go mod</code>支持语义化版本号比如<code>go get foo@v1.2.3</code>，也可以跟git的分支或tag比如<code>go get foo@master</code>，当然也可以跟git提交哈希比如<code>go get foo@e3702bed2</code>，依赖的版本支持以下几种格式：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopkg.in/tomb.v1 v1<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20141024135613</span>-dd632973f1e7</span><br><span class=\"line\">gopkg.in/vmihailenco/msgpack.v2 v2<span class=\"number\">.9</span><span class=\"number\">.1</span></span><br><span class=\"line\">gopkg.in/yaml.v2 &lt;=v2<span class=\"number\">.2</span><span class=\"number\">.1</span></span><br><span class=\"line\">github.com/tatsushid/<span class=\"keyword\">go</span>-fastping v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20160109021039</span>-d7bb493dee3e</span><br><span class=\"line\">latest</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>我们可以在go.mod 文件中替换(replace)指定包的镜像源:</strong><br>在国内访问<code>golang.org/x</code>的各个包都需要FQ, 此时你可以在<code>go.mod</code>中使用replace替换成github上对应的库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace (</span><br><span class=\"line\">  golang.org/x/crypto v0.0.0-20180820150726-614d502a4dac =&gt; github.com/golang/crypto v0.0.0-20180820150726-614d502a4dac</span><br><span class=\"line\">  golang.org/x/net v0.0.0-20180821023952-922f4815f713 =&gt; github.com/golang/net v0.0.0-20180826012351-8a410e7b638d</span><br><span class=\"line\">  golang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>依赖下载</strong><br>描述: 如果下载所有依赖可以使用<code>go mod download</code>命令, 当然如果是单个依赖下载便可采用<code>go get</code>命令。</p>\n<p>例如: 在项目中执行<code>go get</code>命令可以下载依赖包，并且还可以指定下载的版本。</p>\n<ul>\n<li>运行 <code>go get -u</code> 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li>\n<li>运行 <code>go get -u=patch</code> 将会升级到最新的修订版本</li>\n<li>运行 <code>go get package@version</code> 将会升级到指定的版本号version</li>\n</ul>\n<p><strong>依赖整理</strong><br>描述: 在代码中删除不使用的依赖代码后，相关的依赖库并不会在<code>go.mod</code>文件中自动移除,此种情况下我们可以使用<code>go mod tidy</code>命令更新<code>go.mod</code>中的依赖关系。</p>\n<p><strong>依赖编辑</strong><br>描述: 在实际开发中我们可以使用下面两种方式进行依赖包的添加和删除。</p>\n<ul>\n<li>手动修改 go.mod 文件后有些时候需要格式化该文件，此时使用<code>go mod edit -fmt</code>命令进行格式化<code>go.mod</code>文件</li>\n<li>手动添加依赖项: 例如 <code>go mod edit -require=golang.org/x/text</code></li>\n<li>手动移除依赖项: 例如 <code>go mod edit -droprequire=golang.org/x/text</code></li>\n</ul>\n<p><br></p>\n<p><strong>Q: 如何在项目中使用go module?</strong></p>\n<blockquote>\n<p>答: 一般来说有两种情况第一种是<code>既有项目</code>,第二种是<code>新项目</code>。</p>\n</blockquote>\n<p>如果需要对一个已经存在的项目启用<code>go module</code>可以按照以下步骤操作：</p>\n<ol>\n<li>在项目目录下执行<code>go mod init</code>便会生成一个go.mod文件。</li>\n<li>执行<code>go get</code>命令查找并记录当前项目的依赖，同时生成一个go.sum记录每个依赖库的版本和哈希值。</li>\n</ol>\n<p>如果对一个新创建的项目，我们可以在项目文件夹下按照以下步骤操作：</p>\n<ol>\n<li>执行<code>go mod init 项目名</code>命令，在当前项目文件夹下创建一个go.mod文件。</li>\n<li>手动编辑go.mod文件中的require依赖项或执行<code>go tidy</code>自动发现、维护依赖。</li>\n</ol>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}