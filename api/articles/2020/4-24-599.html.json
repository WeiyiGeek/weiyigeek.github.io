{"title":"Go编程之入坑出坑记录","slug":"编程世界/Go/Go编程之入坑出坑记录","date":"2020-04-24T03:16:58.000Z","updated":"2022-03-11T03:22:50.803Z","url":"2020/4-24-599.html","path":"api/articles/2020/4-24-599.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-Package-包相关问题\"><a href=\"#0x01-Package-包相关问题\" class=\"headerlink\" title=\"0x01 Package|包相关问题\"></a>0x01 Package|包相关问题</h2><h3 id=\"1-解决go-get下载包失败问题\"><a href=\"#1-解决go-get下载包失败问题\" class=\"headerlink\" title=\"1.解决go get下载包失败问题\"></a>1.解决<code>go get</code>下载包失败问题</h3><p>描述: 由于某些不可抗力的原因，国内使用<code>go get</code>命令安装包时会经常会出现timeout的问题。</p>\n<p>本文介绍几个常用的解决办法。</p>\n<p>Tips : 注意这是一篇针对go 1.11之前版本国内go get命令安装包不成功的解决办法，现在的你极有可能只需要配置下<code>GOPROXY</code>即可解决相应包下载失败的问题。</p>\n<p><strong>1.1 从github克隆</strong><br>描述: golang在github上建立了一个镜像库，如 <code>https://github.com/golang/net</code> 就对应是 <code>https://golang.org/x/net</code> 的镜像库。 要下载 <code>golang.org/x/net</code>包，可以在本地创建包的目录后使用git clone来拉取相应包的源代码文件，具体操作如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src/golang.org/x</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/golang.org/x</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/golang/net.git</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>1.2 使用gopm</strong><br>描述: 使用gopm可以从golang.org的一些镜像网站上下载。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.安装 gopm</span></span><br><span class=\"line\">go get -u github.com/gpmgo/gopm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.使用gopm安装第三方包</span></span><br><span class=\"line\">gopm get -g golang.org/x/net</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 不加-g参数,会把依赖包下载<code>.vendor</code>目录下面; 加上-g参数,可以把依赖包下载到GOPATH目录中。</p>\n<p><br></p>\n<p><strong>1.3 使用goproxy</strong><br>描述: Go的1.11版本以后可以设置GOPROXY这个变量，来设置代理。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在Mac/linux下执行：</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=https://goproxy.cn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows平台执行：</span></span><br><span class=\"line\">SET GO111MODULE=on</span><br><span class=\"line\">SET GOPROXY=<span class=\"string\">\"https://goproxy.cn\"</span> <span class=\"comment\"># $env:GOPROXY = \"https://goproxy.cn\"</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}