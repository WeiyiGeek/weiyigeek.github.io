{"title":"7.Docker使用辅助工具汇总","slug":"虚拟云容/云容器/Docker/7.Docker使用辅助工具汇总","date":"2019-06-04T10:36:30.000Z","updated":"2023-01-31T02:29:10.643Z","url":"2019/6-4-437.html","path":"api/articles/2019/6-4-437.html.json","covers":["https://img.weiyigeek.top/2020/1/20200728114250.png","https://img.weiyigeek.top/2019/20190606153617.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x01-镜像相关工具\"><a href=\"#0x01-镜像相关工具\" class=\"headerlink\" title=\"0x01 镜像相关工具\"></a>0x01 镜像相关工具</h4><p>描述:本文是笔者在学习或者应用Docker时候，对Docker第三方的工具使用的一个简单总结, 使其为了更好的使用docker应用以及优化和异常的快速定位;</p>\n<h5 id=\"1-Dive-Docker-镜像分析工具\"><a href=\"#1-Dive-Docker-镜像分析工具\" class=\"headerlink\" title=\"1.Dive - Docker 镜像分析工具\"></a>1.Dive - Docker 镜像分析工具</h5><p>描述:Dive用来分析 docker 镜像层信息的一个工具，该工具主要用于探索 docker 镜像层内容以及发现减小 docker 镜像大小的方法。<br>官方地址:<a href=\"https://github.com/wagoodman/dive\" target=\"_blank\" rel=\"noopener\">https://github.com/wagoodman/dive</a><br>基本功能:</p>\n<ul>\n<li>1.显示Docker图像内容按层分解: 当您在左侧选择一个层时，将在右侧线上显示该层的所有内容，此外，您可以使用箭头按键来浏览整个文件树内容。</li>\n</ul>\n<ul>\n<li>2.指出每层中发生了哪些变化：在文件树中标明已修改、添加或删除的文件，可以调整此值以显示特定层的更改。</li>\n<li>3.估计”镜像效率”:左下方窗格显示基本层信息和一个实验指标，用于猜测图像所包含的空间浪费。这可能是跨层的一些重复文件，跨层移动文件或不完全删除的文件。提供了一个百分比的“得分”和总浪费的文件空间。</li>\n<li>4.快速构建/分析周期:您可以构建 docker 镜像并使用一个命令立即进行分析<code>dive build -t some-tag .</code>您只需要将docker build命令用相同的dive build命令替换即可。</li>\n<li>5.CI集成: 根据图像的效率和浪费的空间，分析图像并得到通过/失败的结果。在调用任何有效的dive命令时，只需在环境中设置CI=true</li>\n<li>6.支持多个图像源和容器引擎使用—source选项，您可以选择从哪里获取容器图像:<code>dive &lt;your-image&gt; --source &lt;source&gt;</code></li>\n</ul>\n<p>我们常常使用inspect与history来查看镜像的相关信息,但是确实不是很直观遍历,我们需要的是一个简单直白的展示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inspect 方式看见镜像各层ID</span></span><br><span class=\"line\">docker inspect gcc -f <span class=\"string\">\"&#123;&#123;.RootFS&#125;&#125;&#123;&#123;println&#125;&#125;&#123;&#123;.Metadata&#125;&#125;\"</span></span><br><span class=\"line\">&#123;layers [sha256:6086e1b289d997dfd19df1ec9366541c49f5545520f9dc65ebd4cd64071497b4 sha256:c53d956ebfec691504fc18c964352728214665e7090e4161ed791979cf200ccf sha256:cf47dfabe08113e9ff7d61d096752678caa00a0b861f673c2577ca2fdf55cfe9 sha256:46a297e68c473255e515971ffcb2dc78f724e60214df479a66bb9b04892afc1b sha256:cfb4ccdac2588557024f7741ba447707fc26304e7d84cf53d481671cb4a23f1c sha256:1be02b7a0bbbc4ff6353fe53cf22cefb4a0849a070d032b900dcbf8700a89b9a sha256:8262cc809f2b0add9b633ab30664f95dbb7761fc857ecfaddfa5654ef602fb9a sha256:00e5a2edc2d269fc9e1465be8a3b572d5d0a62cea4510fa5e941f42653287198 sha256:4d619c17b6de41f14d6742dcb6c3ba679ed53bff4ca43e22686a81b4aa8236bd] &#125;</span><br><span class=\"line\">&#123;0001-01-01 00:00:00 +0000 UTC&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># history 镜像各层构建时候执行命令查看</span></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> gcc</span><br><span class=\"line\"><span class=\"comment\"># IMAGE               CREATED             CREATED BY                                      SIZE    </span></span><br><span class=\"line\"><span class=\"comment\"># 21f378ba43ec        4 days ago          /bin/sh -c set -ex;  dpkg-divert --divert /u…   12.7kB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           4 days ago          /bin/sh -c set -ex;  echo '/usr/local/lib64'…   53.8kB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           4 days ago          /bin/sh -c set -ex;   savedAptMark=\"$(apt-ma…   382MB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           4 days ago          /bin/sh -c #(nop)  ENV GCC_VERSION=10.2.0       0B</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c #(nop)  ENV GCC_MIRRORS=https://f…   0B</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c set -ex;  for key in $GPG_KEYS; d…   29.5kB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c #(nop)  ENV GPG_KEYS=B215C1633BCA…   0B</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c set -ex;  if ! command -v gpg &gt; /…   0B</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c set -ex;  apt-get update;  DEBIAN…   510MB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c apt-get update &amp;&amp; apt-get install…   146MB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c set -ex;  if ! command -v gpg &gt; /…   17.5MB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           5 days ago          /bin/sh -c apt-get update &amp;&amp; apt-get install…   16.5MB</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           6 days ago          /bin/sh -c #(nop)  CMD [\"bash\"]                 0B</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;missing&gt;           6 days ago          /bin/sh -c #(nop) ADD file:89dfd7d3ed77fd5e0…   114MB</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Install &amp; Syntax</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rpm安装方式</span></span><br><span class=\"line\"><span class=\"comment\">#Ubuntu/Debian</span></span><br><span class=\"line\">wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb</span><br><span class=\"line\">sudo apt install ./dive_0.9.2_linux_amd64.deb</span><br><span class=\"line\"><span class=\"comment\">#RHEL/Centos</span></span><br><span class=\"line\">curl -OL https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.rpm</span><br><span class=\"line\">rpm -i dive_0.9.2_linux_amd64.rpm</span><br><span class=\"line\"><span class=\"comment\">#Arch Linux</span></span><br><span class=\"line\"><span class=\"comment\">#Available as dive in the Arch User Repository (AUR).</span></span><br><span class=\"line\">yay -S dive</span><br><span class=\"line\"><span class=\"comment\"># mac</span></span><br><span class=\"line\">brew install dive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#镜像安装方式</span></span><br><span class=\"line\">$ docker pull wagoodman/dive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础用法</span></span><br><span class=\"line\"><span class=\"comment\"># 分析一个 docker 镜像，只需要在 dive 工具后面添加上镜像的 tag 即可：</span></span><br><span class=\"line\">$ dive &lt;镜像TAG&gt;</span><br><span class=\"line\"><span class=\"comment\"># 除此之外还可以通过 build 命令去构建 docker 镜像后，直接进入分析结果：</span></span><br><span class=\"line\">$ dive build -t &lt;镜像TAG&gt; .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按键绑定</span></span><br><span class=\"line\">Ctrl + C \tExit</span><br><span class=\"line\">Tab \t    Switch between the layer and filetree views</span><br><span class=\"line\">Ctrl + F \tFilter files</span><br><span class=\"line\">PageUp \t  Scroll up a page</span><br><span class=\"line\">PageDown \tScroll down a page</span><br><span class=\"line\">Ctrl + A \tLayer view: see aggregated image modifications</span><br><span class=\"line\">Ctrl + L \tLayer view: see current layer modifications</span><br><span class=\"line\">Space    \tFiletree view: collapse/uncollapse a directory</span><br><span class=\"line\">Ctrl + Space \tFiletree view: collapse/uncollapse all directories</span><br><span class=\"line\">Ctrl + A \tFiletree view: show/hide added files</span><br><span class=\"line\">Ctrl + R \tFiletree view: show/hide removed files</span><br><span class=\"line\">Ctrl + M \tFiletree view: show/hide modified files</span><br><span class=\"line\">Ctrl + U \tFiletree view: show/hide unmodified files</span><br><span class=\"line\">Ctrl + B \tFiletree view: show/hide file attributes</span><br><span class=\"line\">PageUp \t  Filetree view: scroll up a page</span><br><span class=\"line\">PageDown \tFiletree view: scroll down a page</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意事项:</strong></p>\n<ul>\n<li>注意:根据您在本地运行的docker版本，您可能需要指定docker API版本作为环境变量:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -it \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    -e DOCKER_API_VERSION=1.37 \\</span><br><span class=\"line\">    wagoodman/dive:latest &lt;dive arguments...&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>实际案例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.简单分析实例</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images</span><br><span class=\"line\"><span class=\"comment\"># REPOSITORY                           TAG                        IMAGE ID            CREATED             SIZE</span></span><br><span class=\"line\"><span class=\"comment\"># go-hello                             latest                     d1bb1eb974f4        19 hours ago        812MB</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> run --rm -it \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    wagoodman/dive:latest go-hello:latest</span><br><span class=\"line\"><span class=\"comment\"># Image Source: docker://go-hello:latest</span></span><br><span class=\"line\"><span class=\"comment\"># Fetching image... (this can take a while for large images)</span></span><br><span class=\"line\"><span class=\"comment\"># Analyzing image...</span></span><br><span class=\"line\"><span class=\"comment\"># Building cache...</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200728114250.png\" alt=\"WeiyiGeek.dive\" title=\"\" class=\"\">\n                <p>WeiyiGeek.dive</p>\n            </figure></p>\n<p>2.CI集成<br>描述:当运行环境变量CI=true的dive时dive UI将被绕过，取而代之的是分析你的docker图像，通过返回代码给它一个通过/失败的指示。目前有三个指标支持通过。<br>下面是dive-ci文件，可以采用<code>--ci-config option</code>指定配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules:</span><br><span class=\"line\">  <span class=\"comment\"># If the efficiency is measured below X%, mark as failed.</span></span><br><span class=\"line\">  <span class=\"comment\"># Expressed as a ratio between 0-1.</span></span><br><span class=\"line\">  lowestEfficiency: 0.95</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If the amount of wasted space is at least X or larger than X, mark as failed.</span></span><br><span class=\"line\">  <span class=\"comment\"># Expressed in B, KB, MB, and GB.</span></span><br><span class=\"line\">  highestWastedBytes: 20MB</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># If the amount of wasted space makes up for X% or more of the image, mark as failed.</span></span><br><span class=\"line\">  <span class=\"comment\"># Note: the base image layer is NOT included in the total image size.</span></span><br><span class=\"line\">  <span class=\"comment\"># Expressed as a ratio between 0-1; fails if the threshold is met or crossed.</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"2-Skopeo-镜像同步工具\"><a href=\"#2-Skopeo-镜像同步工具\" class=\"headerlink\" title=\"2.Skopeo - 镜像同步工具\"></a>2.Skopeo - 镜像同步工具</h5><p>描述: 我们从以下的两个利用场景中可以看见看见此工具妙用;</p>\n<p>应用场景1.如何在机器上pull拉取Registry A Harbor中的镜像，然后构造完成后重新打上Tag然后再Push到另外一个 registry B Harbor 上去,相当于一个同步镜像操作，但和 harbor 里在带的那个镜像同步还有很大的不同，我们仅仅需要同步特定 tag 的镜像，而不是整个 harbor 或者 project 里的全部镜像;目前我们的做法还是最简单的方式，使用 docker 命令行的方式来 pull 镜像，然后打 tag 接着 push 到 B harbor。但是啊，当同步二三百个的镜像，或者镜像的总大小几十 GB 的时候这种原始的方法速度还是太慢了，于是就思考有没有另一个工具可以直接将 registry A 中的某个镜像同步到 registry B 中去。简单的说使用 <code>skopeo copy</code> 两个 registry 中的镜像时，skopeo 请求两个 registry API 直接 copy original blob 到另一个 registry ，这样免去了像<code>docker pull –&gt; docker tag –&gt; docker push 那样 pull 镜像对镜像进行解压缩，push 镜像进行压缩</code>。尤其是在搬运一些较大的镜像（几GB 或者几十 GB的镜像，比如 nvidia/cuda ），使用 skopeo copy 的加速效果十分明显。</p>\n<p>应用场景2.由于国内拉取某些镜像太不友好，则此时采用外网的VPS先进行下载然后再从我们VPS上拉取下载镜像,但是由于VPS本地存储太小而默认docker pull在下载镜像时候利用docker-untar将下载的镜像进行解压并保存在本地docker家目录之中会导致存储不够，想象一哈只下载而不解压即减小了包的大小又解压下载传输速度何乐而不为呢？所以得请出本章节的主人公Skopeo镜像工具;</p>\n<p>学习了前面的<code>Docker容器镜像仓库存储原理(前世今身)与搬运技巧</code>,我们知道registry 中存储的镜像 layer 压缩包格式是 <code>vnd.docker.image.rootfs.diff.tar.gzip</code>它是一个 tar.gz 类型的文件;</p>\n<p>下面是镜像在Harbor中的存储路径我们可以利用其开探究镜像在Registry中存储的;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) harbor 的存储目录</span></span><br><span class=\"line\">tree</span><br><span class=\"line\">`-- registry</span><br><span class=\"line\">    `-- v2      <span class=\"comment\"># registry V2 版本</span></span><br><span class=\"line\">        |-- blobs <span class=\"comment\"># blobs 目录下存储镜像的 raw 数据，存储的最小单元为 layer</span></span><br><span class=\"line\">        |   `-- sha256</span><br><span class=\"line\">        |       |-- 39</span><br><span class=\"line\">        |       |-- cb</span><br><span class=\"line\">        |       `-- f7</span><br><span class=\"line\">        `-- repositories <span class=\"comment\"># 镜像的元数据信息</span></span><br><span class=\"line\">            `-- library</span><br><span class=\"line\">                `-- alpine</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 镜像的 manifest 是针对registry服务端的配置信息</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">\"schemaVersion\"</span>: 2,</span><br><span class=\"line\">   <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.container.image.v1+json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 1507,</span><br><span class=\"line\">      <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a\"</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">\"layers\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"size\"</span>: 2813316,</span><br><span class=\"line\">         <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 仔细看一下 digest 和下面文件夹的名称，他们是一一对应的，因为 manifest 信息就是镜像在 registry 中存储的信息。</span></span><br><span class=\"line\">tree</span><br><span class=\"line\">|-- [  20]  blobs</span><br><span class=\"line\">|   `-- [  36]  sha256</span><br><span class=\"line\">|       |-- [  78]  39</span><br><span class=\"line\">|       |   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class=\"line\">|       |       `-- [ 528]  data</span><br><span class=\"line\">|       |-- [  78]  cb</span><br><span class=\"line\">|       |   `-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class=\"line\">|       |       `-- [2.7M]  data </span><br><span class=\"line\">|       `-- [  78]  f7</span><br><span class=\"line\">|           `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class=\"line\">|               `-- [1.5K]  data</span><br><span class=\"line\">`-- [  21]  repositories</span><br><span class=\"line\">    `-- [  20]  library</span><br><span class=\"line\">        `-- [  55]  alpine</span><br><span class=\"line\">            |-- [  20]  _layers</span><br><span class=\"line\">            |   `-- [ 150]  sha256</span><br><span class=\"line\">            |       |-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class=\"line\">            |       |   `-- [  71]  link</span><br><span class=\"line\">            |       `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class=\"line\">            |           `-- [  71]  link</span><br><span class=\"line\">            |-- [  35]  _manifests</span><br><span class=\"line\">            |   |-- [  20]  revisions</span><br><span class=\"line\">            |   |   `-- [  78]  sha256</span><br><span class=\"line\">            |   |       `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class=\"line\">            |   |           `-- [  71]  link</span><br><span class=\"line\">            |   `-- [  20]  tags</span><br><span class=\"line\">            |       `-- [  34]  latest</span><br><span class=\"line\">            |           |-- [  18]  current</span><br><span class=\"line\">            |           |   `-- [  71]  link</span><br><span class=\"line\">            |           `-- [  20]  index</span><br><span class=\"line\">            |               `-- [  78]  sha256</span><br><span class=\"line\">            |                   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class=\"line\">            |                       `-- [  71]  link</span><br><span class=\"line\">            `-- [   6]  _uploads</span><br><span class=\"line\">26 directories, 8 files</span><br></pre></td></tr></table></figure></p>\n<p>上述中的 2.7 MB data 文件是一个 gzip 压缩格式文件，我们可以使用 tar 命令将其解压开来;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> registry/v2/blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class=\"line\">sh-4.2<span class=\"comment\"># file data</span></span><br><span class=\"line\">data: gzip compressed data</span><br><span class=\"line\">sh-4.2<span class=\"comment\"># mkdir layer</span></span><br><span class=\"line\">sh-4.2<span class=\"comment\"># tar -xvf data -C layer/  #解压到 layer 目录下</span></span><br><span class=\"line\">sh-4.2<span class=\"comment\"># tree -L 1 -d layer #  alpine 镜像查看其解压目录您会发现他是一个文件系统</span></span><br><span class=\"line\">layer</span><br><span class=\"line\">|-- bin</span><br><span class=\"line\">|-- dev</span><br><span class=\"line\">|-- etc</span><br><span class=\"line\">|-- home</span><br><span class=\"line\">|-- lib</span><br><span class=\"line\">|-- media</span><br><span class=\"line\">|-- mnt</span><br><span class=\"line\">|-- opt</span><br><span class=\"line\">|-- proc</span><br><span class=\"line\">|-- root</span><br><span class=\"line\">|-- run</span><br><span class=\"line\">|-- sbin</span><br><span class=\"line\">|-- srv</span><br><span class=\"line\">|-- sys</span><br><span class=\"line\">|-- tmp</span><br><span class=\"line\">|-- usr</span><br><span class=\"line\">`-- var</span><br></pre></td></tr></table></figure></p>\n<p>看了上面的流程此时您或许能够明白在当前仅仅为了同步两个 registry 上的镜像使用 <code>docker pull –&gt; docker tag –&gt; docker push</code> 操作的弊端; 在Docker pull 时镜像会对Registry上的 Layer进行下载到本地然后解压,在使用 docker pull 拉取镜像的时候使用 ps 查看一下进程就会找到 docker-untar 这个进程，它的目的是为了减少网络传输的流量以及节约时间;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于一些较大的镜像比如2G以上，有时候镜像 layer 已经 download 完了，但是还在进行镜像的解压缩，性能的瓶颈也就在了解压镜像这一块。</span></span><br><span class=\"line\">docker-untar /var/lib/docker/overlay2/a076db6567c7306f3cdab6040cd7d083ef6a39d125171353eedbb8bde7f203b4/diff</span><br></pre></td></tr></table></figure></p>\n<p>而 Skopeo 就是一个可以直接将Registry上的Blob复制到另外一个Registry 仓库里，中间不涉及对镜像的Layer的解压缩;<br>Skopeo 官网地址: <a href=\"https://github.com/containers/skopeo\" target=\"_blank\" rel=\"noopener\">https://github.com/containers/skopeo</a></p>\n<p><br></p>\n<p>特点:</p>\n<ul>\n<li>skopeo是一个命令行实用程序，执行对容器的图像和图像库的各种操作。</li>\n<li>skopeo不要求用户运行，作为根用户做它的大部分操作。</li>\n<li>skopeo不需要守护进程来运行，以执行其操作。</li>\n<li>skopeo可以用OCI图像以及原来的码头工人V2图像工作，如docker.io和quay.io登记，私人注册，本地目录和本地OCI布局目录。</li>\n</ul>\n<p>Skopeo可以执行如下的操作:</p>\n<ul>\n<li>从和到各种存储机制复制的图像。例如，你可以从一个注册表复制到另一个图像，而不需要特权。</li>\n<li>检查显示出其特性，包括其的层的远程图像，而无需将Images拉到主机。</li>\n<li>从图像库中删除图像。</li>\n<li>当需要存放库，skopeo可以通过身份验证适当凭据和证书。</li>\n</ul>\n<p><br/></p>\n<p><strong>Install &amp;&amp; Syntax</strong><br>多操作系统安装方式:</p>\n<ul>\n<li><p>(1) 仓库软件安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum/dnf/zypper/brew</span></span><br><span class=\"line\">sudo dnf install skopeo || sudo yum install skopeo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openSUSE</span></span><br><span class=\"line\">sudo zypper install skopeo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># alpine</span></span><br><span class=\"line\">sudo apk add skopeo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># macOS</span></span><br><span class=\"line\">brew install skopeo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(2) 源码build安装但是需要注意要构建skopeo二进制文件，您至少需要Go 1.12。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/containers/skopeo skopeo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> !$ &amp;&amp; git checkout v1.0.0</span><br><span class=\"line\">make binary </span><br><span class=\"line\"><span class=\"comment\"># Ubuntu上构建:参数使其构建的二进制可执行文件可以在各Linux发行版正常运行 </span></span><br><span class=\"line\"><span class=\"comment\"># make binary-static DISABLE_CGO=1  </span></span><br><span class=\"line\">cp skopeo /usr/bin/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips:如果在Ubuntu构建时候没有为make加上指定参数时候然后将生成的二进制文件发送都centOS机器下进行运行时候会产生动态链接库异常;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 问题描述:</span></span><br><span class=\"line\">skopeo: error <span class=\"keyword\">while</span> loading shared libraries: libdevmapper.so.1.02.1: cannot open shared object file: No such file or directory</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决办法在编译的时候加上 DISABLE_CGO=1 参数为程序s静态链接库:</span></span><br><span class=\"line\">ldd skopeo_d <span class=\"comment\">#</span></span><br><span class=\"line\">        linux-vdso.so.1 (0x00007ffed9e66000)</span><br><span class=\"line\">        libgpgme.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libgpgme.so.11 (0x00007f94aed2e000)</span><br><span class=\"line\">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f94aeb0f000)</span><br><span class=\"line\">        libdevmapper.so.1.02.1 =&gt; /lib/x86_64-linux-gnu/libdevmapper.so.1.02.1 (0x00007f94ae8a4000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f94ae4b3000)</span><br><span class=\"line\">        libassuan.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libassuan.so.0 (0x00007f94ae2a0000)</span><br><span class=\"line\">        libgpg-error.so.0 =&gt; /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f94ae08b000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007f94b0ac4000)</span><br><span class=\"line\">        libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f94ade63000)</span><br><span class=\"line\">        libudev.so.1 =&gt; /lib/x86_64-linux-gnu/libudev.so.1 (0x00007f94adc45000)</span><br><span class=\"line\">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f94ad8a7000)</span><br><span class=\"line\">        libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f94ad635000)</span><br><span class=\"line\">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f94ad431000)</span><br><span class=\"line\">        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f94ad229000)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加上 DISABLE_CGO=1 编译后的二进制可执行文件</span></span><br><span class=\"line\">ldd skopeo_s <span class=\"comment\">#</span></span><br><span class=\"line\">        not a dynamic executable</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>(3) 语法参数<br>描述:对容器映像和容器映像注册表的各种操作;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\">  skopeo [<span class=\"built_in\">command</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Available Commands:</span><br><span class=\"line\"><span class=\"comment\"># 复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像。</span></span><br><span class=\"line\">  copy                      Copy an IMAGE-NAME from one location to another</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个镜像，可以是本地 docker 镜像或者 registry 上的镜像</span></span><br><span class=\"line\">  delete                    Delete image IMAGE-NAME</span><br><span class=\"line\">  <span class=\"built_in\">help</span>                      Help about any <span class=\"built_in\">command</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看一个镜像的 manifest 火车 image config 详细信息 </span></span><br><span class=\"line\">  inspect                   Inspect image </span><br><span class=\"line\">  </span><br><span class=\"line\">  IMAGE-NAME</span><br><span class=\"line\"><span class=\"comment\"># 列出一个 registry 上某个镜像的所有 tag,在某些脚本中可以进行使用;</span></span><br><span class=\"line\">  list-tags                 List tags <span class=\"keyword\">in</span> the transport/repository specified by the</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录到某个 registry，和 docker login 类似</span></span><br><span class=\"line\">  login                     Login to a container registry</span><br><span class=\"line\"><span class=\"comment\"># 退出已经登录到某个 registry 的 auth 信息，和 docker logout 类似</span></span><br><span class=\"line\">  <span class=\"built_in\">logout</span>                    Logout of a container registry</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同步一个镜像从 A 到 B，感觉和 copy 一样，但 sync 支持的参数更多，功能更强大。在 0.14.0 版本的时候是没有 sync 选项的，到了 0.14.2 才有，现在是 1.0.0</span></span><br><span class=\"line\">  sync                      Synchronize one or more images from one location to another</span><br><span class=\"line\">  manifest-digest           Compute a manifest digest of a file <span class=\"comment\"># 计算文件的清单摘要</span></span><br><span class=\"line\">  standalone-sign           Create a signature using <span class=\"built_in\">local</span> files <span class=\"comment\"># 使用本地文件创建签名      </span></span><br><span class=\"line\">  standalone-verify         Verify a signature using <span class=\"built_in\">local</span> files  <span class=\"comment\"># 验证本地文件的签名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选项</span></span><br><span class=\"line\">--insecure-policy 选项用于忽略安全策略配置文件</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<p><strong>skopeo支持的镜像格式</strong><br>描述: 无论我们的 src 镜像还是 desc 镜像都要满足以下格式才可以。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">containers-storage: <span class=\"comment\">#docker引用位于本地容器/存储映像存储中的映像。位置和映像存储都在/etc/containers/storage.conf中指定;</span></span><br><span class=\"line\"></span><br><span class=\"line\">dir: <span class=\"comment\">#一个现有的本地目录路径，将清单、层tarballs和签名存储为单独的文件。这是一种非标准化格式，主要用于调试或非侵入式容器检查。</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker://docker-reference  <span class=\"comment\">#注册表中的图像实现了“Docker注册HTTP API V2”。默认情况下，使用$XDG_RUNTIME_DIR/containers/auth中的授权状态。json，使用skopeo登录设置。</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-archive:path[:docker-reference] <span class=\"comment\">#图像存储在docker保存格式的文件中。docker-reference只在创建这样的文件时使用，并且不能包含摘要。</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker-daemon:docker-reference  <span class=\"comment\">#docker引用必须包含标签或摘要。另外，在读取图像时，格式也可以docker-daemon:algo:digest(一个映像ID)。</span></span><br><span class=\"line\"></span><br><span class=\"line\">oci:path:tag  <span class=\"comment\">#目录中的图像标签符合“开放容器图像布局规范”的路径。</span></span><br></pre></td></tr></table></figure><br>值得注意的事上面这几种镜像名称对应着镜像存在的方式，并且不同存在的方式对镜像的 layer 处理的方式也不一样，</p>\n<ul>\n<li>比如 <code>docker://</code> 这种方式是存在 registry 上的。</li>\n<li>比如 <code>docker-daemon</code> 是存在本地 docker pull 下来的。</li>\n<li>比如 <code>docker-archive</code> 是通过 docker save 出来的镜像。</li>\n</ul>\n<p>上述表达的是同一个镜像，只不过是存在的方式不一样而已，即同一个镜像有这几种存在的方式就像水有气体、液体、固体一样。</p>\n<table>\n<thead>\n<tr>\n<th>IMAGE NAMES</th>\n<th>example</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>containers-storage:</td>\n<td>containers-storage:</td>\n<td></td>\n</tr>\n<tr>\n<td>dir:</td>\n<td>dir:/PATH</td>\n<td></td>\n</tr>\n<tr>\n<td>docker://</td>\n<td>docker://k8s.gcr.io/kube-apiserver:v1.17.5</td>\n<td>其名称即为 src 或 dest 镜像名称的前缀</td>\n</tr>\n<tr>\n<td>docker-daemon:</td>\n<td>docker-daemon:alpine:latest</td>\n<td></td>\n</tr>\n<tr>\n<td>docker-archive:</td>\n<td>docker-archive:alpine.tar (docker save)</td>\n<td></td>\n</tr>\n<tr>\n<td>oci:</td>\n<td>oci:alpine:latest</td>\n</tr>\n</tbody>\n</table>\n<p><br/></p>\n<p><strong>基础实例</strong><br>login &amp;&amp; logout 命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## (1) 配置文件认证</span></span><br><span class=\"line\"><span class=\"comment\"># 与 配置 Docker registry 一样需要在</span></span><br><span class=\"line\">/etc/docker/deamon.json </span><br><span class=\"line\"><span class=\"comment\"># 或者~/.docker/config.json中配置</span></span><br><span class=\"line\">jq <span class=\"string\">\".\"</span> ~/.docker/config.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"auths\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"https://index.docker.io/v1/\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"d2sddaqWM7bSVlJFpmQE43Sw==\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"HttpHeaders\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"Docker-Client/19.03.5 (linux)\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"experimental\"</span>: <span class=\"string\">\"enabled\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## (2) 对注册表进行身份验证</span></span><br><span class=\"line\">$ skopeo login --user USER docker://myregistrydomain.com:5000</span><br><span class=\"line\"><span class=\"comment\"># Password:</span></span><br><span class=\"line\">$ skopeo inspect --creds=testuser:testpassword docker://myregistrydomain.com:5000/busybox</span><br><span class=\"line\">$ skopeo copy --src-creds=testuser:testpassword docker://myregistrydomain.com:5000/private oci:local_oci_image</span><br><span class=\"line\"><span class=\"comment\"># $ skopeo inspect docker://myregistrydomain.com:5000/busybox</span></span><br><span class=\"line\">$ skopeo <span class=\"built_in\">logout</span> docker://myregistrydomain.com:5000</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>inspect 命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.skopeo能够检查容器注册表上的存储库并获取图像层(检查存储库)</span></span><br><span class=\"line\">$ skopeo inspect docker://registry.fedoraproject.org/fedora:latest</span><br><span class=\"line\">$ skopeo inspect docker-daemon:alpine:latest --raw | jq <span class=\"string\">\".\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"registry.fedoraproject.org/fedora\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Digest\"</span>: <span class=\"string\">\"sha256:58de585a231aca14a511347bc85b912a6f000159b49bc2b0582032911e5d3a6c\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"RepoTags\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"30-aarch64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"30-ppc64le\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"30-s390x\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"30-x86_64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"30\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"rawhide\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"30-armhfp\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31-aarch64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31-x86_64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31-armhfp\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31-s390x\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"31-ppc64le\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"32-aarch64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"32-ppc64le\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"32-s390x\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"32-x86_64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"32\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"33-aarch64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"33-ppc64le\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"33-s390x\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"33-x86_64\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"33\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Created\"</span>: <span class=\"string\">\"2020-07-09T06:49:06Z\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"DockerVersion\"</span>: <span class=\"string\">\"1.10.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Labels\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"fedora\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"vendor\"</span>: <span class=\"string\">\"Fedora Project\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"version\"</span>: <span class=\"string\">\"32\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Architecture\"</span>: <span class=\"string\">\"amd64\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Os\"</span>: <span class=\"string\">\"linux\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Layers\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"sha256:dd9f43919ba05f05d4f783c31e83e5e776c4f5d29dd72b9ec5056b9576c10053\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Env\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"DISTTAG=f32container\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"FGC=f32\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"container=oci\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 显示来自fedora的容器配置:latest</span></span><br><span class=\"line\">$ skopeo inspect --config docker://registry.fedoraproject.org/fedora:latest  | jq</span><br><span class=\"line\">$ skopeo inspect --config docker-daemon:alpine:latest | jq <span class=\"string\">\".\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2020-05-29T21:19:46.363518345Z\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"architecture\"</span>: <span class=\"string\">\"amd64\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"os\"</span>: <span class=\"string\">\"linux\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Env\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Cmd\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"/bin/sh\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"rootfs\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"layers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"diff_ids\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sha256:50644c29ef5a27c9a40c393a73ece2479de78325cae7d762ef3cdc19bf42dd0a\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"history\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2020-05-29T21:19:46.192045972Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop) ADD file:c92c248239f8c7b9b3c067650954815f391b7bcb09023f984972c082ace2a8d0 in / \"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2020-05-29T21:19:46.363518345Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\"]\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"empty_layer\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 显示未验证的图像摘要</span></span><br><span class=\"line\">$ skopeo inspect docker://registry.fedoraproject.org/fedora:latest | jq <span class=\"string\">'.Digest'</span></span><br><span class=\"line\"><span class=\"string\">\"sha256:655721ff613ee766a4126cb5e0d5ae81598e1b0c3bcf7017c36c4d72cb092fe9\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># copy-命令可以在各种存储机制之间复制容器图像，包括:</span></span><br><span class=\"line\">* Container registries: The Quay, Docker Hub, OpenShift, GCR, Artifactory ...</span><br><span class=\"line\">* Container Storage backends:  github.com/containers/storage (Backend <span class=\"keyword\">for</span> Podman, CRI-O, Buildah and friends)</span><br><span class=\"line\">* Docker daemon storage</span><br><span class=\"line\">* Local directories</span><br><span class=\"line\">* Local OCI-layout directories</span><br><span class=\"line\"><span class=\"comment\"># 实际上 skopeo 可以导出为其他格式比如 oci、oci-archive、ostree 等</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ skopeo copy docker-daemon:alpine:latest oci:alpine </span><br><span class=\"line\">$ skopeo copy oci:busybox_ocilayout:latest dir:existingemptydirectory</span><br><span class=\"line\">$ tree -h alpine</span><br><span class=\"line\"><span class=\"comment\"># alpine</span></span><br><span class=\"line\"><span class=\"comment\"># ├── [4.0K]  blobs</span></span><br><span class=\"line\"><span class=\"comment\"># │   └── [4.0K]  sha256</span></span><br><span class=\"line\">          <span class=\"comment\"># 是否感觉很相似实际上对应着Overlay2中digest中data文件</span></span><br><span class=\"line\">          <span class=\"comment\"># 镜像的 mainfaet 文件</span></span><br><span class=\"line\"><span class=\"comment\"># │       ├── [ 348]  1c6f747c933450c5169f349f2a57b9d31e833c0452e1ec712b8aab0cbfea4d2c</span></span><br><span class=\"line\"><span class=\"comment\"># │       # 镜像文件系统gzip压缩文件</span></span><br><span class=\"line\"><span class=\"comment\">#         ├── [2.8M]  3eee30c545e47333e6fe551863f6f29c3dcd850187ae3f37c606adb991444886</span></span><br><span class=\"line\">          <span class=\"comment\"># 镜像的 image config 文件</span></span><br><span class=\"line\"><span class=\"comment\"># │       └── [ 583]  af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b</span></span><br><span class=\"line\"><span class=\"comment\"># ├── [ 186]  index.json</span></span><br><span class=\"line\"><span class=\"comment\"># └── [  31]  oci-layout</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (0) 从 docker daemon 复制导出镜像到本地</span></span><br><span class=\"line\"><span class=\"comment\"># 直接通过 http 下载目标镜像并存储为 /tmp/nginx.tar，此文件可以直接通过 docker load 命令导入</span></span><br><span class=\"line\">$ skopeo --insecure-policy copy docker-daemon:nginx:1.17.6 docker-archive:/tmp/nginx.tar <span class=\"comment\"># 将会从 docker daemon 导出镜像到 /tmp/nginx.tar</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) 从一个Registry A 复制 Registry B 之中;</span></span><br><span class=\"line\">$ skopeo copy docker://quay.io/buildah/stable docker://registry.internal.company.com/buildah</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 该命令将会直接通过 http 下载目标镜像并存储为 /tmp/nginx.tar，此文件可以直接通过 docker load 命令导</span></span><br><span class=\"line\">skopeo --insecure-policy copy docker://nginx:1.17.9 docker-archive:/tmp/nginx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 从 k8s.gcr.io/kube-apiserver:v1.17.5 复制镜像到 index.docker.io/webpsh/kube-apiserver:v1.17.5</span></span><br><span class=\"line\">$ skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.17.5 docker://index.docker.io/webpsh/kube-apiserver:v1.17.5 --dest-authfile /root/.docker/config.json</span><br><span class=\"line\"><span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\"><span class=\"comment\"># Copying blob 597de8ba0c30 done # 直接 copy 镜像 layer 的 blob 它是在 registry 进行压缩存储的格式</span></span><br><span class=\"line\"><span class=\"comment\"># Copying blob e13a88fa950c done </span></span><br><span class=\"line\"><span class=\"comment\"># Copying config f640481f6d done</span></span><br><span class=\"line\"><span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\"><span class=\"comment\"># Storing signatures</span></span><br><span class=\"line\"><span class=\"comment\"># pull 下载利用skopeo同步上传的镜像验证是否正确</span></span><br><span class=\"line\">$ docker pull webpsh/kube-apiserver:v1.17.5</span><br><span class=\"line\"><span class=\"comment\"># v1.17.5: Pulling from webpsh/kube-apiserver</span></span><br><span class=\"line\"><span class=\"comment\"># Digest: sha256:5ddc5c77f52767f2f225a531a257259228d74b32d8aac9cfe087251f998c42f3</span></span><br><span class=\"line\"><span class=\"comment\"># Status: Downloaded newer image for webpsh/kube-apiserver:v1.17.5</span></span><br><span class=\"line\"><span class=\"comment\"># docker.io/webpsh/kube-apiserver:v1.17.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># delete - 删除镜像命令</span></span><br><span class=\"line\"><span class=\"comment\"># 该命令非常有帮助可以直接调用Registry的API来进行删除镜像;</span></span><br><span class=\"line\">$ skopeo delete docker://localhost:5000/imagename:latest</span><br></pre></td></tr></table></figure>\n<p><strong>补充说明:</strong></p>\n<ul>\n<li>(1) 此处为了方便在使用 skopeo 的时候不用加一堆额外的参数,以OpenSSL生成客户端证书(客户端认证的证书、私钥)为例: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"built_in\">set</span> -o nounset</span><br><span class=\"line\">cat &gt;ca.conf &lt;&lt;EOF</span><br><span class=\"line\">[ req ]</span><br><span class=\"line\">default_bits  = 2048</span><br><span class=\"line\">distinguished_name = req_distinguished_name</span><br><span class=\"line\">prompt   = no</span><br><span class=\"line\">encrypt_key  = no</span><br><span class=\"line\">x509_extensions  = v3_ca</span><br><span class=\"line\">[ req_distinguished_name ]</span><br><span class=\"line\">CN         = localhost</span><br><span class=\"line\">[ CA_default ]</span><br><span class=\"line\">copy_extensions = copy</span><br><span class=\"line\">[ alternate_names ]</span><br><span class=\"line\">DNS.2=localhost</span><br><span class=\"line\">[ v3_ca ]</span><br><span class=\"line\">subjectAltName=@alternate_names</span><br><span class=\"line\">subjectKeyIdentifier=<span class=\"built_in\">hash</span></span><br><span class=\"line\">authorityKeyIdentifier=keyid:always,issuer:always</span><br><span class=\"line\">basicConstraints = critical,CA:<span class=\"literal\">true</span></span><br><span class=\"line\">keyUsage=keyCertSign,cRLSign,digitalSignature,keyEncipherment,nonRepudiation</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书签名申请</span></span><br><span class=\"line\">mkdir -p certs</span><br><span class=\"line\">openssl req -days 365 -x509 -config ca.conf \\</span><br><span class=\"line\">    -new -keyout certs/domain.key -out certs/domain.crt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加信任证书到系统中，根据不同的发行版选择相应的路径和命令行即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\">update-ca-trust force-enable</span><br><span class=\"line\">cp certs/domain.crt /etc/pki/ca-trust/<span class=\"built_in\">source</span>/anchors/localhost.crt</span><br><span class=\"line\">update-ca-trust</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">cp certs/domain.crt /usr/<span class=\"built_in\">local</span>/share/ca-certificates/localhost.crt</span><br><span class=\"line\">$ update-ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Debian</span></span><br><span class=\"line\">cp certs/domain.crt /usr/share/ca-certificates/localhost.crt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> localhost.crt &gt;&gt; /etc/ca-certificates.conf</span><br><span class=\"line\">update-ca-certificates</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x02-容器相关工具\"><a href=\"#0x02-容器相关工具\" class=\"headerlink\" title=\"0x02 容器相关工具\"></a>0x02 容器相关工具</h4><h5 id=\"1-容器启动参数查看\"><a href=\"#1-容器启动参数查看\" class=\"headerlink\" title=\"1.容器启动参数查看\"></a>1.容器启动参数查看</h5><p>假如我使用<a href=\"https://docs.docker.com/engine/reference/commandline/run/\" target=\"_blank\" rel=\"noopener\">docker run</a>启动了了一个<a href=\"https://github.com/marksugar/dockerMops/tree/master/docker-alpine-Redis/5.0\" target=\"_blank\" rel=\"noopener\">redis容器</a>，而<a href=\"https://www.linuxea.com/2254.html\" target=\"_blank\" rel=\"noopener\">docker run的参数</a>有很多，由于时间太久，我已经忘记了当初的启动参数，也并没有使用<a href=\"https://www.linuxea.com/2262.html\" target=\"_blank\" rel=\"noopener\">docker-compose</a>这样的编排工具。</p>\n<p>现在我如何进行重启，如何找回此前的启动命令，有没有解决办法?<br>答案: 当然是有的如下几种方式:</p>\n<ul>\n<li>docker inpsect</li>\n<li>reckecod</li>\n<li>runlike</li>\n</ul>\n<p><strong>方式1:docker inpsect</strong><br>描述:此种方式只是大概知道有哪些参数并不是完整的,而且需要使用者自己生成启动docker容器参数;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect -f <span class=\"string\">\"&#123;&#123;.Name&#125;&#125;&#123;&#123;println&#125;&#125;&#123;&#123;.Path&#125;&#125; &#123;&#123;.Args&#125;&#125; &#123;&#123;.Config.Cmd&#125;&#125; &#123;&#123;.Config.Env&#125;&#125; &#123;&#123;.Config.Volumes&#125;&#125; &#123;&#123;.Config.Entrypoint&#125;&#125; &#123;&#123;.NetworkSettings.Networks&#125;&#125;\"</span> $(docker ps -aq)</span><br><span class=\"line\">/linuxea_redis </span><br><span class=\"line\">/Initialization.sh [] [] </span><br><span class=\"line\">[REDIS_CONF=on </span><br><span class=\"line\">REQUIRE_PASS=OTdmOWI4ZTM4NTY1M2M4OTZh </span><br><span class=\"line\">MASTER_AUTH=OTdmOWI4ZTM4NTY1M2M4OTZh </span><br><span class=\"line\">MAXCLIENTS_NUM=30 </span><br><span class=\"line\">MAXMEMORY_SIZE=1024M </span><br><span class=\"line\">PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin </span><br><span class=\"line\">RS_VSON=5.0.0 </span><br><span class=\"line\">RS_USER=redis </span><br><span class=\"line\">RS_VSON_URL=http://download.redis.io/releases/redis-5.0.0.tar.gz </span><br><span class=\"line\">BATADIR=/usr/<span class=\"built_in\">local</span>/redis </span><br><span class=\"line\">DATADIR=/data/redis </span><br><span class=\"line\">DATALOG=/data/logs </span><br><span class=\"line\">DATACIG=/etc/redis]</span><br><span class=\"line\">map[linuxea_volume:&#123;&#125;] </span><br><span class=\"line\">[/Initialization.sh] </span><br><span class=\"line\">map[host:0xc420182000]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>方式2：rekcod</strong><br>描述:借助rekcod打印出更易读的格式<code>docker inspect →  docker run</code> ,<code>docker run</code>从现有容器（via <code>docker inspect</code>）反向设计命令。<br><code>rekcod</code>可以将以下任何内容转换为<code>docker run</code>命令：</p>\n<ol>\n<li>容器ID /名称（<code>rekcod</code>将调用<code>docker inspect</code>）</li>\n<li>包含<code>docker inspect</code>输出的文件的路径</li>\n<li>原始JSON（<code>docker inspect</code>直接传递输出）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1) 系统安装 rekcod</span></span><br><span class=\"line\">$ yum install npm -y &amp;&amp; npm i -g rekcod\t</span><br><span class=\"line\">$ docker ps -qa|rekcod</span><br><span class=\"line\">$ rekcod linuxea_redis</span><br><span class=\"line\">docker run --name linuxea_redis --runtime runc -p 6379:6379/tcp --net host --restart no -h LinuxEA-Node172_25_50_250.cluster.com --expose 26379/tcp --expose 6379/tcp -e <span class=\"string\">'REDIS_CONF=on'</span> -e <span class=\"string\">'REQUIRE_PASS=OTdmOWI4ZTM4NTY1M2M4OTZh'</span> -e <span class=\"string\">'MASTER_AUTH=OTdmOWI4ZTM4NTY1M2M4OTZh'</span> -e <span class=\"string\">'MAXCLIENTS_NUM=30'</span> -e <span class=\"string\">'MAXMEMORY_SIZE=1024M'</span> -e <span class=\"string\">'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'</span> -e <span class=\"string\">'RS_VSON=5.0.0'</span> -e <span class=\"string\">'RS_USER=redis'</span> -e <span class=\"string\">'RS_VSON_URL=http://download.redis.io/releases/redis-5.0.0.tar.gz'</span> -e <span class=\"string\">'BATADIR=/usr/local/redis'</span> -e <span class=\"string\">'DATADIR=/data/redis'</span> -e <span class=\"string\">'DATALOG=/data/logs'</span> -e <span class=\"string\">'DATACIG=/etc/redis'</span> -d -t -i --entrypoint <span class=\"string\">\"/Initialization.sh\"</span> marksugar/redis:5.0.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2) Docker 安装 rekcod</span></span><br><span class=\"line\">$ docker pull nexdrew/rekcod</span><br><span class=\"line\">$ <span class=\"built_in\">alias</span> rekcod=<span class=\"string\">\"docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nexdrew/rekcod\"</span></span><br><span class=\"line\">$ docker run --rm -v /var/run/docker.sock:/var/run/docker.sock nexdrew/rekcod &lt;container&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>方式3：runlike</strong><br>描述:实际<code>runlike</code>被封装为一个名为<a href=\"https://hub.docker.com/r/assaflavie/runlike/\" target=\"_blank\" rel=\"noopener\">assaflavie / runlike </a>的Docker镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 常规语法</span></span><br><span class=\"line\">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike YOUR-CONTAINER</span><br><span class=\"line\"><span class=\"comment\"># 使用别名运行它，例如，将其保存在~/.profile或中~/.bashrc</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> runlike=<span class=\"string\">\"docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike\"</span></span><br><span class=\"line\">runlike YOUR-CONTAINER <span class=\"comment\">#以本地命令运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际案例</span></span><br><span class=\"line\">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike eager_saha</span><br><span class=\"line\"><span class=\"comment\"># docker run --name=eager_saha --hostname=e35b0d451122 --env=PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin --env=GOLANG_VERSION=1.14.6 --env=GOPATH=/go --log-driver=none --detach=true sha256:7da3d4d2918fc630aca3c4c011df3c9b30d7b79cd7be691718807cfb62bce554 /bin/sh -c 'go build hello.go'</span></span><br></pre></td></tr></table></figure>\n<p>安装使用流程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\">yum install -y python-pip &amp;&amp; pip install runlike  <span class=\"comment\">#Python2</span></span><br><span class=\"line\">yum install -y python3 &amp;&amp; pip3 install runlike</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用法:</span></span><br><span class=\"line\">runlike -q &lt;container-name&gt;  <span class=\"comment\">#使用-q自动换行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例</span></span><br><span class=\"line\">runlike -p linuxea_redis</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name=linuxea_redis \\</span><br><span class=\"line\">    --hostname=LinuxEA-Node172_25_50_250.cluster.com \\</span><br><span class=\"line\">    --env=REDIS_CONF=on \\</span><br><span class=\"line\">    --env=REQUIRE_PASS=OTdmOWI4ZTM4NTY1M2M4OTZh \\</span><br><span class=\"line\">    --env=MASTER_AUTH=OTdmOWI4ZTM4NTY1M2M4OTZh \\</span><br><span class=\"line\">    --env=MAXCLIENTS_NUM=30 \\</span><br><span class=\"line\">    --env=MAXMEMORY_SIZE=1024M \\</span><br><span class=\"line\">    --env=PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin \\</span><br><span class=\"line\">    --env=RS_VSON=5.0.0 \\</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"2-容器通过WEB-UI管理工具\"><a href=\"#2-容器通过WEB-UI管理工具\" class=\"headerlink\" title=\"2.容器通过WEB UI管理工具\"></a>2.容器通过WEB UI管理工具</h5><p>描述：Dockerui是基于docker API提供图形化页面简单的容器管理系统,支持容器管理和镜像管理;容器信息查看只是画面比较酷,不怎么实用用来看看为以后造轮子也是极好;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> pull abh1nav/dockerui</span><br><span class=\"line\"><span class=\"comment\">#两种启动方法一种是sock,另外一种是是rest API</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> run -d -p 9000:9000 -v /var/run/docker.sock:/docker.sock \\</span><br><span class=\"line\">--name dockerui abh1nav/dockerui:latest -e=<span class=\"string\">\"/docker.sock\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190606153617.png\" alt=\"WeiyiGeek.dockerui\" title=\"\" class=\"\">\n                <p>WeiyiGeek.dockerui</p>\n            </figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}