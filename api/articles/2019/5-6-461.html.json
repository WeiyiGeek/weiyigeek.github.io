{"title":"n1.Docker命令参数一览表","slug":"虚拟云容/云容器/Docker/n1.Docker常用命令参数一览表","date":"2019-05-06T06:36:30.000Z","updated":"2023-01-31T02:29:10.642Z","url":"2019/5-6-461.html","path":"api/articles/2019/5-6-461.html.json","covers":["https://img.weiyigeek.top/2019/20190605144528.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"0x01-Docker-命令结构图示\"><a href=\"#0x01-Docker-命令结构图示\" class=\"headerlink\" title=\"0x01 Docker 命令结构图示\"></a>0x01 Docker 命令结构图示</h4><p>Docker 官方命令学习文档: <a href=\"https://docs.docker.com/engine/reference/commandline/cli/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/commandline/cli/</a></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190605144528.png\" alt=\"WeiyiGeek.命令一张图表示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.命令一张图表示</p>\n            </figure>\n<p><br/></p>\n<h4 id=\"0x02-Docker-常用命令一览\"><a href=\"#0x02-Docker-常用命令一览\" class=\"headerlink\" title=\"0x02 Docker 常用命令一览\"></a>0x02 Docker 常用命令一览</h4><p>Docker 命令有两大类，客户端命令和服务端命令。</p>\n<ul>\n<li>前者是主要的操作接口 ：docker</li>\n<li>后者用来启动 Docker Daemon(守护进程): dockerd</li>\n</ul>\n<p><strong>客户端命令:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Usage:</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> [OPTIONS] COMMAND [arg...]</span><br><span class=\"line\"><span class=\"variable\">$docker</span> daemon [ --<span class=\"built_in\">help</span> | ... ]  <span class=\"comment\">#二级命令的帮助</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> [ --<span class=\"built_in\">help</span> | -v | --version ]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"–help-Docker命令参数的帮助文档\"><a href=\"#–help-Docker命令参数的帮助文档\" class=\"headerlink\" title=\"–help - Docker命令参数的帮助文档\"></a>–help - Docker命令参数的帮助文档</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#选项</span></span><br><span class=\"line\">Options:</span><br><span class=\"line\">--config=~/.<span class=\"variable\">$docker</span>              Location of client config files  <span class=\"comment\">#客户端配置文件的位置</span></span><br><span class=\"line\">-D, --debug=<span class=\"literal\">false</span>               Enable debug mode  <span class=\"comment\">#启用Debug调试模式</span></span><br><span class=\"line\">-H, --host=[]                   Daemon socket(s) to connect to  <span class=\"comment\">#守护进程的套接字（Socket）连接</span></span><br><span class=\"line\">-h, --<span class=\"built_in\">help</span>=<span class=\"literal\">false</span>                Print usage  <span class=\"comment\">#打印使用帮助</span></span><br><span class=\"line\">-l, --<span class=\"built_in\">log</span>-level=info            Set the logging level  <span class=\"comment\">#设置日志级别</span></span><br><span class=\"line\">--tls=<span class=\"literal\">false</span>                     Use TLS; implied by--tlsverify  <span class=\"comment\">#</span></span><br><span class=\"line\">--tlscacert=~/.<span class=\"variable\">$docker</span>/ca.pem    Trust certs signed only by this CA  <span class=\"comment\">#信任证书签名CA</span></span><br><span class=\"line\">--tlscert=~/.<span class=\"variable\">$docker</span>/cert.pem    Path to TLS certificate file  <span class=\"comment\">#TLS证书文件路径</span></span><br><span class=\"line\">--tlskey=~/.<span class=\"variable\">$docker</span>/key.pem      Path to TLS key file  <span class=\"comment\">#TLS密钥文件路径</span></span><br><span class=\"line\">--tlsverify=<span class=\"literal\">false</span>               Use TLS and verify the remote  <span class=\"comment\">#使用TLS验证远程</span></span><br><span class=\"line\">-v, --version=<span class=\"literal\">false</span>             Print version information and quit  <span class=\"comment\">#打印版本信息并退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#命令</span></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">attach    Attach to a running container  <span class=\"comment\">#当前shell下attach连接指定运行镜像</span></span><br><span class=\"line\">build     Build an image from a <span class=\"variable\">$dockerfile</span>  <span class=\"comment\">#通过$dockerfile定制镜像</span></span><br><span class=\"line\">commit    Create a new image from a container<span class=\"string\">'s changes  #提交当前容器为新的镜像</span></span><br><span class=\"line\"><span class=\"string\">cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class=\"line\"><span class=\"string\">create    Create a new container  #创建一个新的容器，同run 但不启动容器</span></span><br><span class=\"line\"><span class=\"string\">diff    Inspect changes on a container'</span>s filesystem  <span class=\"comment\">#查看$docker容器变化</span></span><br><span class=\"line\">events    Get real time events from the server<span class=\"comment\">#从$docker服务获取容器实时事件</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span>    Run a <span class=\"built_in\">command</span> <span class=\"keyword\">in</span> a running container<span class=\"comment\">#在已存在的容器上运行命令</span></span><br><span class=\"line\"><span class=\"built_in\">export</span>    Export a containers filesystem as a tar archive  <span class=\"comment\">#导出容器的内容流作为一个tar归档文件(对应import)</span></span><br><span class=\"line\"><span class=\"built_in\">history</span>    Show the <span class=\"built_in\">history</span> of an image  <span class=\"comment\">#展示一个镜像形成历史</span></span><br><span class=\"line\">images    List images  <span class=\"comment\">#列出系统当前镜像</span></span><br><span class=\"line\">import    Import the contents from a tarball to create a filesystem image  <span class=\"comment\">#从tar包中的内容创建一个新的文件系统映像(对应export)</span></span><br><span class=\"line\">info    Display system-wide information  <span class=\"comment\">#显示系统相关信息</span></span><br><span class=\"line\">inspect    Return low-level information on a container or image  <span class=\"comment\">#提取出容器或者镜像最顶层的元数据</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span>    Kill a running container  <span class=\"comment\">#kill指定$docker容器</span></span><br><span class=\"line\">load    Load an image from a tar archive or STDIN  <span class=\"comment\">#从一个tar包中加载一个镜像(对应save)</span></span><br><span class=\"line\">login    Register or <span class=\"built_in\">log</span> <span class=\"keyword\">in</span> to a <span class=\"variable\">$docker</span> registry<span class=\"comment\">#注册或者登陆一个$docker源服务器</span></span><br><span class=\"line\"><span class=\"built_in\">logout</span>    Log out from a <span class=\"variable\">$docker</span> registry  <span class=\"comment\">#从当前$docker registry退出</span></span><br><span class=\"line\">logs    Fetch the logs of a container  <span class=\"comment\">#输出当前容器日志信息</span></span><br><span class=\"line\">pause    Pause all processes within a container<span class=\"comment\">#暂停容器</span></span><br><span class=\"line\">port    List port mappings or a specific mapping <span class=\"keyword\">for</span> the CONTAINER  <span class=\"comment\">#查看映射端口对应的容器内部源端口</span></span><br><span class=\"line\">ps    List containers  <span class=\"comment\">#列出容器列表</span></span><br><span class=\"line\">pull    Pull an image or a repository from a registry  <span class=\"comment\">#从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class=\"line\">push    Push an image or a repository to a registry  <span class=\"comment\">#推送指定镜像或者库镜像至$docker源服务器</span></span><br><span class=\"line\">rename    Rename a container  <span class=\"comment\"># rename 重命名一个容器</span></span><br><span class=\"line\">restart    Restart a running container  <span class=\"comment\">#重启运行的容器</span></span><br><span class=\"line\">rm    Remove one or more containers  <span class=\"comment\">#移除一个或者多个容器</span></span><br><span class=\"line\">rmi    Remove one or more images  <span class=\"comment\">#移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</span></span><br><span class=\"line\">run    Run a <span class=\"built_in\">command</span> <span class=\"keyword\">in</span> a new container  <span class=\"comment\">#创建一个新的容器并运行一个命令</span></span><br><span class=\"line\">save    Save an image(s) to a tar archive<span class=\"comment\">#保存一个镜像为一个tar包(对应load)</span></span><br><span class=\"line\">search    Search the <span class=\"variable\">$docker</span> Hub <span class=\"keyword\">for</span> images  <span class=\"comment\">#在$docker</span></span><br><span class=\"line\">hub中搜索镜像</span><br><span class=\"line\">start    Start one or more stopped containers<span class=\"comment\">#启动容器</span></span><br><span class=\"line\">stats    Display a live stream of container(s) resource usage statistics  <span class=\"comment\">#统计容器使用资源</span></span><br><span class=\"line\">stop    Stop a running container  <span class=\"comment\">#停止容器</span></span><br><span class=\"line\">tag         Tag an image into a repository  <span class=\"comment\">#给源中镜像打标签</span></span><br><span class=\"line\">top       Display the running processes of a container <span class=\"comment\">#查看容器中运行的进程信息</span></span><br><span class=\"line\">unpause    Unpause all processes within a container  <span class=\"comment\">#取消暂停容器</span></span><br><span class=\"line\">version    Show the <span class=\"variable\">$docker</span> version information<span class=\"comment\">#查看容器版本号</span></span><br><span class=\"line\"><span class=\"built_in\">wait</span>         Block until a container stops, <span class=\"keyword\">then</span> <span class=\"built_in\">print</span> its <span class=\"built_in\">exit</span> code  <span class=\"comment\">#截取容器停止时的退出状态值</span></span><br><span class=\"line\">Run <span class=\"string\">'$docker COMMAND --help'</span> <span class=\"keyword\">for</span> more information on a <span class=\"built_in\">command</span>.  <span class=\"comment\">#运行$docker命令在帮助可以获取更多信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台运行</span></span><br><span class=\"line\">ctrl + p + ctrl + q</span><br></pre></td></tr></table></figure>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.客户端指定Docker deamon守护进程</span></span><br><span class=\"line\">docker -H docker.weiyigeek.top:2375</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"info-docker守护进程全局参数信息\"><a href=\"#info-docker守护进程全局参数信息\" class=\"headerlink\" title=\"info - docker守护进程全局参数信息\"></a>info - docker守护进程全局参数信息</h5><p>描述：利用 docker info 命令 <code>Docker Client &amp;&amp; Docker Server</code> 信息一览:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> info</span><br><span class=\"line\">Client:</span><br><span class=\"line\"> <span class=\"comment\"># DEBUG模式未启动</span></span><br><span class=\"line\"> Debug Mode: <span class=\"literal\">false</span> </span><br><span class=\"line\"></span><br><span class=\"line\">Server:</span><br><span class=\"line\"><span class=\"comment\"># 容器数量与不同状态的数量</span></span><br><span class=\"line\"> Containers: 1 </span><br><span class=\"line\">  Running: 0</span><br><span class=\"line\">  Paused: 0</span><br><span class=\"line\">  Stopped: 1</span><br><span class=\"line\"><span class=\"comment\"># 镜像数量</span></span><br><span class=\"line\"> Images: 29</span><br><span class=\"line\"><span class=\"comment\"># 当前Docker版本</span></span><br><span class=\"line\"> Server Version: 19.03.9</span><br><span class=\"line\"><span class=\"comment\"># 存储引擎</span></span><br><span class=\"line\"> Storage Driver: overlay2</span><br><span class=\"line\"><span class=\"comment\"># 支持的文件系统建议使用xfs而非ext4</span></span><br><span class=\"line\">  Backing Filesystem: xfs</span><br><span class=\"line\">  Supports d_type: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 是否支持原生叠加Diff</span></span><br><span class=\"line\">  Native Overlay Diff: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 日志引擎</span></span><br><span class=\"line\"> Logging Driver: json-file</span><br><span class=\"line\"><span class=\"comment\"># Linux Control Groups 引擎:主要作用是限制、记录和隔离进程组（process groups）使用的物理资源（cpu、memory、IO 等）</span></span><br><span class=\"line\"> Cgroup Driver: cgroupfs</span><br><span class=\"line\"><span class=\"comment\"># 插件</span></span><br><span class=\"line\"> Plugins:</span><br><span class=\"line\"><span class=\"comment\"># 数据卷: local / nfs </span></span><br><span class=\"line\">  Volume: <span class=\"built_in\">local</span></span><br><span class=\"line\"><span class=\"comment\"># 网络选择:</span></span><br><span class=\"line\">  Network: bridge host ipvlan macvlan null overlay</span><br><span class=\"line\"><span class=\"comment\"># 支持的日志引擎</span></span><br><span class=\"line\">  Log: awslogs fluentd gcplogs gelf journald json-file <span class=\"built_in\">local</span> logentries splunk syslog</span><br><span class=\"line\"><span class=\"comment\"># Swarm 集群状态</span></span><br><span class=\"line\"> Swarm: inactive</span><br><span class=\"line\"><span class=\"comment\"># 容器运行时分类：目前使用最广泛的容器运行时。</span></span><br><span class=\"line\"> Runtimes: runc</span><br><span class=\"line\"> Default Runtime: runc</span><br><span class=\"line\"><span class=\"comment\"># 初始二进制文件</span></span><br><span class=\"line\"> Init Binary: docker-init</span><br><span class=\"line\"><span class=\"comment\"># 容器版本：Containerd向docker提供运行容器的API，二者通过grpc进行交互</span></span><br><span class=\"line\"> containerd version: 7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class=\"line\"><span class=\"comment\"># containerd最后会通过runc来实际运行容器。</span></span><br><span class=\"line\"> runc version: dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class=\"line\"><span class=\"comment\"># 初始化版本</span></span><br><span class=\"line\"> init version: fec3683</span><br><span class=\"line\"><span class=\"comment\"># 安全选项</span></span><br><span class=\"line\"> Security Options:</span><br><span class=\"line\"><span class=\"comment\"># seccomp(安全计算模式的缩写)是Linux内核的一种简单的沙箱机制。它是在Linux内核2中添加的。</span></span><br><span class=\"line\">  seccomp</span><br><span class=\"line\">   Profile: default</span><br><span class=\"line\"><span class=\"comment\"># 操作系统相关信息(系统版本、内核、架构、CPU、内存)、主机名称</span></span><br><span class=\"line\"> Kernel Version: 5.7.0-1.el7.elrepo.x86_64</span><br><span class=\"line\"> Operating System: CentOS Linux 7 (Core)</span><br><span class=\"line\"> OSType: linux</span><br><span class=\"line\"> Architecture: x86_64</span><br><span class=\"line\"> CPUs: 2</span><br><span class=\"line\"> Total Memory: 1.943GiB</span><br><span class=\"line\"> Name: k8s-yum-server</span><br><span class=\"line\"> ID: XVC7:JFVY:NQO4:FH7N:KIWO:Q7XI:23GJ:6SZI:QLR5:5YLI:5HII:6LQT</span><br><span class=\"line\"><span class=\"comment\"># Docker 根目录</span></span><br><span class=\"line\"> Docker Root Dir: /var/lib/docker</span><br><span class=\"line\"><span class=\"comment\"># 服务Debug选项</span></span><br><span class=\"line\"> Debug Mode: <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 默认images仓库</span></span><br><span class=\"line\"> Registry: https://index.docker.io/v1/</span><br><span class=\"line\"> Labels:</span><br><span class=\"line\"><span class=\"comment\"># 实验性</span></span><br><span class=\"line\"> Experimental: <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 私有仓库</span></span><br><span class=\"line\"> Insecure Registries:</span><br><span class=\"line\">  127.0.0.0/8</span><br><span class=\"line\"><span class=\"comment\"># 镜像Images仓库(优先级高)</span></span><br><span class=\"line\"> Registry Mirrors:</span><br><span class=\"line\">  https://xlx9erfu.mirror.aliyuncs.com/</span><br><span class=\"line\"><span class=\"comment\"># 启用在线恢复</span></span><br><span class=\"line\"> Live Restore Enabled: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>获取指定信息:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker info --format '&#123;&#123;json .&#125;&#125;'</span><br><span class=\"line\">$ docker info -f \"&#123;&#123;.Plugins|json&#125;&#125;\" | jq .</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Volume\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"local\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"Network\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"bridge\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"host\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ipvlan\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"macvlan\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"null\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"overlay\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"Authorization\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Log\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"awslogs\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"fluentd\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gcplogs\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"gelf\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"journald\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"json-file\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"logentries\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"splunk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"syslog\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由上反馈信息可以看出：</p>\n<ul>\n<li>使用的是overlay2存储驱动</li>\n<li>docker的根目录是/var/lib/docker</li>\n<li>后端的文件系统是xfs</li>\n</ul>\n<p><br/></p>\n<h5 id=\"login-连接并初始化hub仓库\"><a href=\"#login-连接并初始化hub仓库\" class=\"headerlink\" title=\"login - 连接并初始化hub仓库\"></a>login - 连接并初始化hub仓库</h5><h5 id=\"lgout-退出仓库连接\"><a href=\"#lgout-退出仓库连接\" class=\"headerlink\" title=\"lgout - 退出仓库连接\"></a>lgout - 退出仓库连接</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> login http://localhost:5000 <span class=\"comment\">#连接并初始化hub.docker.com仓库需要输入用户名和密码认证,然后存放于/root/.docker/config.json 文件中直接更改也行</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> login -u 用户名 -p 密码 https://index.docker.io/</span><br><span class=\"line\"><span class=\"comment\"># 密码标准输入</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> ~/my_password.txt | docker login --username foo --password-stdin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">logout</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h5 id=\"search-公共镜像搜索\"><a href=\"#search-公共镜像搜索\" class=\"headerlink\" title=\"search - 公共镜像搜索\"></a>search - 公共镜像搜索</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> search [镜像名称] <span class=\"comment\">#搜索关于Archlinux镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 支持的参数:</span></span><br><span class=\"line\"><span class=\"comment\"># --automated=false #仅仅显示自动创建的镜像(官方)</span></span><br><span class=\"line\"><span class=\"comment\"># --no-trunc=false  #输出信息不截断显示</span></span><br><span class=\"line\"><span class=\"comment\"># -s,--stars=0    #指定仅显示评价为指定星级以上的镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础实例</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> search -s 10 ubuntu  <span class=\"comment\">#搜索那些被收藏10次以上的ubuntu镜像</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"images-本机镜像信息\"><a href=\"#images-本机镜像信息\" class=\"headerlink\" title=\"images - 本机镜像信息\"></a>images - 本机镜像信息</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> image ls   <span class=\"comment\">#列出本机已有镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images -f [过滤]   <span class=\"comment\">#列出本机已有镜像</span></span><br><span class=\"line\"><span class=\"comment\"># -q, --quiet Only show numeric IDs</span></span><br><span class=\"line\"><span class=\"comment\"># -f,--filter 过滤器参数</span></span><br><span class=\"line\"><span class=\"comment\"># --digests 镜像寻址识别符</span></span><br><span class=\"line\"><span class=\"comment\"># --format 以特定的格式显示 \"table &#123;&#123;.ID&#125;&#125;&#125; &#123;&#123;.Repository&#125;&#125;&#123;&#123;.Tag&#125;&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础实例</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> image ls  <span class=\"comment\"># 查看本地所有镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images    <span class=\"comment\"># 查看docker镜像效果同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images -f since=mongo:3.2  <span class=\"comment\">#看到在mongo:3.2 之后建立的镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images -f before=mongo:3.2  <span class=\"comment\">#看到在mongo:3.2 之前建立的镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images -f label=com.example.version=0.1 <span class=\"comment\">#如果镜像构建时，定义了 LABEL ，还可以通过 LABEL 来过滤。</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> images --format <span class=\"string\">\"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;\"</span> <span class=\"comment\">#直接列出镜像结果，并且只包含镜像ID和仓库名</span></span><br><span class=\"line\"><span class=\"comment\"># d06214a03e27: onlyoffice/documentserver</span></span><br><span class=\"line\"><span class=\"comment\"># 0301fb9a773e: ldapaccountmanager/lam</span></span><br><span class=\"line\"><span class=\"comment\"># e340e61b03c4: osixia/phpldapadmin</span></span><br><span class=\"line\"><span class=\"comment\"># 4c780dfa5f5e: osixia/openldap</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker images -q -f <span class=\"string\">\"dangling=true\"</span>   <span class=\"comment\">#只显示悬空镜像数字id</span></span><br><span class=\"line\">docker image ls -q -f <span class=\"string\">\"dangling=true\"</span> <span class=\"comment\">#效果同上</span></span><br><span class=\"line\"><span class=\"comment\"># 30a048249000</span></span><br><span class=\"line\"><span class=\"comment\"># b38cf44fda73</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker images --digests alpine <span class=\"comment\">#显示镜像内容寻址识别符</span></span><br><span class=\"line\"><span class=\"comment\"># REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span></span><br><span class=\"line\"><span class=\"comment\"># osixia/openldap             latest              sha256:9cf1631238e606cf8b58e4654b26e6eba7182eadafefffa662cd9784ea811eda   4c780dfa5f5e        9 months ago        275MB</span></span><br><span class=\"line\"><span class=\"comment\"># $docker inspect 4c7 | grep -a5 \"9cf1631238e6\" # 对应着内容识别符</span></span><br><span class=\"line\"><span class=\"comment\"># \"RepoDigests\": [</span></span><br><span class=\"line\"><span class=\"comment\">#             \"osixia/openldap@sha256:9cf1631238e606cf8b58e4654b26e6eba7182eadafefffa662cd9784ea811eda\"</span></span><br><span class=\"line\"><span class=\"comment\">#         ],</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker image rmi hello-docker <span class=\"comment\">#删除指定的hello-docker镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker image prune <span class=\"comment\">#虚悬镜像清理</span></span><br><span class=\"line\"><span class=\"comment\"># WARNING! This will remove all dangling images.</span></span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue? [y/N] y</span></span><br><span class=\"line\"><span class=\"comment\"># Deleted Images:</span></span><br><span class=\"line\"><span class=\"comment\"># deleted: sha256:30a048249000dd36561bffaa9fecc7690a45ef12096849c77afd4543b0d2d9b0</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"pull-镜像拉取\"><a href=\"#pull-镜像拉取\" class=\"headerlink\" title=\"pull - 镜像拉取\"></a>pull - 镜像拉取</h5><h5 id=\"push-镜像上传\"><a href=\"#push-镜像上传\" class=\"headerlink\" title=\"push - 镜像上传\"></a>push - 镜像上传</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> pull username/[repository[:tag]] <span class=\"comment\">#获取Hub镜像如果不指定TAG将默认选择仓库中最新颁布的镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> push dockerHub用户/[images[:tag]]  <span class=\"comment\">#上传镜像到docker hub仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础示例</span></span><br><span class=\"line\">docker push WeiyiGeek/alpine-app:v1.0</span><br><span class=\"line\">docker push hub.WeiyiGeek.cn:5000/alpine-app:v1.0</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"history-镜像修改信息查看\"><a href=\"#history-镜像修改信息查看\" class=\"headerlink\" title=\"history - 镜像修改信息查看\"></a>history - 镜像修改信息查看</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">history</span> docker.io/mysql:5.7            <span class=\"comment\">#查看镜像修改记录</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">history</span> --no-trunc docker.io/mysql:5.7 <span class=\"comment\">#查看镜像修改记录具体信息(不截断显示)</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">history</span> --format &#123;&#123;.CreatedBy&#125;&#125; --no-trunc=<span class=\"literal\">true</span> jenkins-jnlp:3.13.6-alpine |sed <span class=\"string\">\"s?/bin/sh\\ -c\\ \\#(nop)\\ ??g\"</span>|sed <span class=\"string\">\"s?/bin/sh\\ -c?RUN?g\"</span> | tac  <span class=\"comment\"># 通过查看镜像查看Dockerfile</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"commit-容器修改提交\"><a href=\"#commit-容器修改提交\" class=\"headerlink\" title=\"commit - 容器修改提交\"></a>commit - 容器修改提交</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\">$ docker commit [option-选项] ContainerId [Repository[:Tag]]</span><br><span class=\"line\">$ docker commit -m <span class=\"string\">\"xx\"</span> -a <span class=\"string\">\"oo\"</span> ContainerID(被修改过的ID) [Repository[:Tag]] </span><br><span class=\"line\"><span class=\"comment\"># -a,--author=\"作者\"</span></span><br><span class=\"line\"><span class=\"comment\"># -m,--message=\"更改信息\"</span></span><br><span class=\"line\"><span class=\"comment\"># -p,--pause=ture 提交时暂停容器Container运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础示例</span></span><br><span class=\"line\">$ docker commit -a <span class=\"string\">\"WeiyiGeek\"</span> -m <span class=\"string\">\"create /tmp/demo directory\"</span> alpine <span class=\"built_in\">test</span>:1.2 <span class=\"comment\">#防止悬空镜像加上镜像名称</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"tag-镜像标签修改\"><a href=\"#tag-镜像标签修改\" class=\"headerlink\" title=\"tag - 镜像标签修改\"></a>tag - 镜像标签修改</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> tag 原仓库[:标签] 新仓库名[:标签]  <span class=\"comment\">#为本地镜像添加一个新标签 [注意仓库名称必须小写]</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> tag &lt;image id&gt; username/name:devel <span class=\"comment\">#修改镜像的标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际案例</span></span><br><span class=\"line\">docker tag alpine:latest hub.weiyigeek.top:5000/alpine-app:v8.5</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"container-容器查看与管理\"><a href=\"#container-容器查看与管理\" class=\"headerlink\" title=\"container - 容器查看与管理\"></a>container - 容器查看与管理</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> container ls -a  <span class=\"comment\">#查看列出运行的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> container stop onlyoffice  <span class=\"comment\">#停止正在运行的容器 docker stop 容器名称 效果相同</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> container rm -v onlyoffice <span class=\"comment\">#删除已停止的容器机器和删除与容器关联的匿名卷 docker rm -v 容器名称 效果相同</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"ps-容器相关信息进行查看\"><a href=\"#ps-容器相关信息进行查看\" class=\"headerlink\" title=\"ps - 容器相关信息进行查看\"></a>ps - 容器相关信息进行查看</h5><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--format 为格式化输出。格式化选项(-format) 使用go模板来美化打印容器输出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 补充说明:</span></span><br><span class=\"line\"><span class=\"comment\"># 过滤器：过滤标志（-f或-filter）格式为key=value，如果超过一个过滤，就传递多个标志（如-filter \"foo=bar\" -filter \"bif=baz\"）</span></span><br><span class=\"line\">id (容器的id）</span><br><span class=\"line\">label</span><br><span class=\"line\">name（容器名称）</span><br><span class=\"line\">exited （整数-容器退出状态码，只有在使用-all才有用）</span><br><span class=\"line\">status 容器状态（created,restarting,running,paused,exited,dead）</span><br><span class=\"line\">ancestor ([:],or) 过滤从指定镜像创建的容器</span><br><span class=\"line\">before （容器的名称或id）,过滤在给定id或名称之后创建的容器</span><br><span class=\"line\">isolation (default process hyperv) (windows daemon only)</span><br><span class=\"line\">volume (数据卷名称或挂载点)，--过滤挂载有指定数据卷的容器</span><br><span class=\"line\">network192.（网络id或名称），过滤连接到指定网络的容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># go模板</span></span><br><span class=\"line\">.ID 容器的ID</span><br><span class=\"line\">.Image 镜像的ID</span><br><span class=\"line\">.Command  容器启动的命令</span><br><span class=\"line\">.CreatedAt 创建容器的时间点</span><br><span class=\"line\">.RunngingFor 从容器创建到现在过去的时间</span><br><span class=\"line\">.Ports 暴露的端口</span><br><span class=\"line\">.Status 容器的状态</span><br><span class=\"line\">.Size 容器硬盘的大小</span><br><span class=\"line\">.Names 容器的名称</span><br><span class=\"line\">.Label 指定label的值</span><br><span class=\"line\">.Mounts 挂载到这个容器的数据卷名称</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.显示本机上的所有容器ID运行的容器ID信息</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps -aq --no-trunc  </span><br><span class=\"line\"><span class=\"comment\"># -a 可以列出所有容器</span></span><br><span class=\"line\"><span class=\"comment\"># -l 可以列出最后一次运行的容器-历史运行</span></span><br><span class=\"line\"><span class=\"comment\"># -q 可以列出容器ID</span></span><br><span class=\"line\"><span class=\"comment\">#--no-trunc  #显示完整的容器ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例2.基础用法</span></span><br><span class=\"line\">docker ps -aq    <span class=\"comment\">#显示所有容器的ID</span></span><br><span class=\"line\"><span class=\"comment\"># 25d2d645bfc9</span></span><br><span class=\"line\"><span class=\"comment\"># dc1cc7e934aa</span></span><br><span class=\"line\"><span class=\"comment\"># f07e2b606e62</span></span><br><span class=\"line\"><span class=\"comment\"># 4a1a157c5e70</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.过滤输出</span></span><br><span class=\"line\">docker ps -q -f status=exited       <span class=\"comment\"># 显示状态为已退出的容器</span></span><br><span class=\"line\">docker container ps -f <span class=\"string\">\"name=myimg\"</span> <span class=\"comment\"># 过滤容器名字为myimg的容器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.配合用法匹配并重启容器</span></span><br><span class=\"line\">docker ps | grep -v pause | grep -E <span class=\"string\">\"etcd|scheduler|controller|apiserver\"</span> | awk <span class=\"string\">'&#123;print $1&#125;'</span> | awk <span class=\"string\">'&#123;print \"docker\",\"restart\",$1&#125;'</span> | bash</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"attach-容器附加top信息查看\"><a href=\"#attach-容器附加top信息查看\" class=\"headerlink\" title=\"attach - 容器附加top信息查看\"></a>attach - 容器附加top信息查看</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> attach [names]  <span class=\"comment\">#采用 ps -a NAMES 进入容器</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"stats-容器监控资源信息查看\"><a href=\"#stats-容器监控资源信息查看\" class=\"headerlink\" title=\"stats - 容器监控资源信息查看\"></a>stats - 容器监控资源信息查看</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> stats  <span class=\"comment\">#查看容器监控资源信息（cpu 内存 网络流量等）</span></span><br><span class=\"line\"><span class=\"comment\"># CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O  PIDS</span></span><br><span class=\"line\"><span class=\"comment\"># 89bc1cc2018b        nostalgic_easley    0.02%               64KiB / 1.795GiB    0.00%               1.31kB / 0B         0B / 0B     1</span></span><br></pre></td></tr></table></figure>\n<p><br> </p>\n<h5 id=\"top-查看容器进程信息\"><a href=\"#top-查看容器进程信息\" class=\"headerlink\" title=\"top - 查看容器进程信息\"></a>top - 查看容器进程信息</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> top &lt;container id|name&gt;  </span><br><span class=\"line\"><span class=\"comment\"># UID                 PID                 PPID                C                   STIME               TTY                 TIME         CMD</span></span><br><span class=\"line\"><span class=\"comment\"># root                15890               15873               0                   09:36               pts/0               00:00:00     top</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"port-容器端口查看\"><a href=\"#port-容器端口查看\" class=\"headerlink\" title=\"port - 容器端口查看\"></a>port - 容器端口查看</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> port [容器名称] [内部端口]  <span class=\"comment\">#查看映射端口</span></span><br></pre></td></tr></table></figure>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1</span></span><br><span class=\"line\">docker port ldap-account-manager</span><br><span class=\"line\"><span class=\"comment\"># 80/tcp -&gt; 0.0.0.0:8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\">docker port ldap-account-manager 80</span><br><span class=\"line\"><span class=\"comment\"># 0.0.0.0:8081</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"inspect-镜像与容器相关信息查看\"><a href=\"#inspect-镜像与容器相关信息查看\" class=\"headerlink\" title=\"inspect - 镜像与容器相关信息查看\"></a>inspect - 镜像与容器相关信息查看</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect [image id|image name|CONTAINER ID | CONTAINER NAME]   <span class=\"comment\">#获取镜像或者容器的详细信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) 参数`-f`获取单个属性返回JSON采用go模板语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect -f &#123;&#123;<span class=\"string\">\".Architecture\"</span>&#125;&#125; 550 <span class=\"comment\">#(images Id 前面3位)        </span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect --format <span class=\"string\">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> &lt;CONTAINER ID or NAME&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 获取一个实例的MAC地址</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect --format=<span class=\"string\">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.MacAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 获取绑定的映射的宿主机与虚拟机目录</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect data-volume -f <span class=\"string\">'Source:&#123;&#123;(index .Mounts 0).Source&#125;&#125;&#123;&#123;println&#125;&#125;Destination:&#123;&#123;(index .Mounts 0).Destination&#125;&#125;'</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect data-volume-1 -f <span class=\"string\">'&#123;&#123;printf \"Source:%s ----  Destination:%s\" (index .Mounts 0).Source (index .Mounts 0).Destination&#125;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># Source:/tmp/mnt_isolation ----  Destination:/tmp/tar/tmp/container/folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 列出所有端口绑定</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect --format=<span class=\"string\">'&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125; &#123;&#123;$p&#125;&#125; -&gt; &#123;&#123;(index $conf 0).HostPort&#125;&#125; &#123;&#123;end&#125;&#125;'</span> dc1</span><br><span class=\"line\"><span class=\"comment\"># 80/tcp -&gt; 8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (5)主机信息</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'Hostname:&#123;&#123; .Config.Hostname &#125;&#125;  Name:&#123;&#123;.Name&#125;&#125; IP:&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> dc1</span><br><span class=\"line\"><span class=\"comment\"># Hostname:dc1cc7e934aa  Name:/ldap-account-manager IP:172.18.0.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (6) 获取JSON格式的分段</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;json .HostConfig&#125;&#125;'</span> 5d8e59754906 | jq .</span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect --format=<span class=\"string\">'&#123;&#123;json .Config.Env&#125;&#125;'</span> dc1 | jq .</span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">\"PHPLDAPADMIN_HTTPS=false\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"PHPLDAPADMIN_LDAP_HOSTS=ldap-host\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DEBIAN_FRONTEND=noninteractive\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DEBUG=\"</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (7) swarm中获取获取service实例的Ip </span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect ` docker service ps my-test -q` --format <span class=\"string\">'&#123;&#123;range .NetworksAttachments&#125;&#125;&#123;&#123;.Addresses&#125;&#125;&#123;&#123;end&#125;&#125;'</span> | cut -d <span class=\"string\">'['</span> -f2|cut -d <span class=\"string\">']'</span> -f1</span><br><span class=\"line\"><span class=\"comment\"># 10.255.0.7/16</span></span><br><span class=\"line\"><span class=\"comment\"># 10.255.0.8/16</span></span><br><span class=\"line\"><span class=\"comment\"># 10.255.0.9/16</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># (8) 获取service示例的container ID  (获取的是ID的全称,一般只要取ID前面12个字符就可以了)</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> inspect ` docker service ps my-test -q` --format <span class=\"string\">'&#123;&#123; .Status.ContainerStatus.ContainerID &#125;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># c6c18a74a465163757fe928fec9e633223200f92d1c59e5d2d77eabfaa5ae93a</span></span><br><span class=\"line\"><span class=\"comment\"># 5f558bb014ea3d3eef5c8d4bd70e2e3048d7fc6725538303be960ac658d93b32</span></span><br><span class=\"line\"><span class=\"comment\"># dde578bf60190a63ed5c8c</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"create-创建容器\"><a href=\"#create-创建容器\" class=\"headerlink\" title=\"create - 创建容器\"></a>create - 创建容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> create -it repository[:tag] <span class=\"comment\">#创建容器但处于停止状态</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"start-启动容器\"><a href=\"#start-启动容器\" class=\"headerlink\" title=\"start - 启动容器\"></a>start - 启动容器</h5><h5 id=\"stop-停止容器\"><a href=\"#stop-停止容器\" class=\"headerlink\" title=\"stop - 停止容器\"></a>stop - 停止容器</h5><h5 id=\"pause-暂停容器\"><a href=\"#pause-暂停容器\" class=\"headerlink\" title=\"pause - 暂停容器\"></a>pause - 暂停容器</h5><h5 id=\"unpause-恢复容器\"><a href=\"#unpause-恢复容器\" class=\"headerlink\" title=\"unpause - 恢复容器\"></a>unpause - 恢复容器</h5><h5 id=\"restart-停止容器\"><a href=\"#restart-停止容器\" class=\"headerlink\" title=\"restart - 停止容器\"></a>restart - 停止容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> start -a -i &lt;container id|name&gt;   <span class=\"comment\"># 启动指定容器</span></span><br><span class=\"line\"><span class=\"comment\"># -a 参数   连接容器并打印输出或错误 -</span></span><br><span class=\"line\"><span class=\"comment\"># -i 参数   启动容器并进入交互模式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$docker</span> stop    &lt;container id|name&gt;  <span class=\"comment\">#停止容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> restart &lt;container id|name&gt;  <span class=\"comment\">#重启容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> pause   &lt;container id|name&gt; <span class=\"comment\">#暂停容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> unpause &lt;container id|name&gt; <span class=\"comment\">#恢复容器</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"kill-强行终止容器\"><a href=\"#kill-强行终止容器\" class=\"headerlink\" title=\"kill - 强行终止容器\"></a>kill - 强行终止容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">kill</span> &lt;cantainer id&gt;  <span class=\"comment\">#强行终止容器可以直接发送SIGKILL信号来终止容器</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"save-镜像导出-带有原始layer信息\"><a href=\"#save-镜像导出-带有原始layer信息\" class=\"headerlink\" title=\"save - 镜像导出  (带有原始layer信息)\"></a>save - 镜像导出  (带有原始layer信息)</h5><h5 id=\"load-镜像导入\"><a href=\"#load-镜像导入\" class=\"headerlink\" title=\"load - 镜像导入\"></a>load - 镜像导入</h5><h5 id=\"export-容器导出-不带原始layer信息且只有一层\"><a href=\"#export-容器导出-不带原始layer信息且只有一层\" class=\"headerlink\" title=\"export - 容器导出 (不带原始layer信息且只有一层)\"></a>export - 容器导出 (不带原始layer信息且只有一层)</h5><h5 id=\"import-容器导入\"><a href=\"#import-容器导入\" class=\"headerlink\" title=\"import - 容器导入\"></a>import - 容器导入</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> save -o 保存文件名.tar  [repository[:tag]]  <span class=\"comment\">#将镜像文件打包存出到磁盘</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> save [repository[:tag]] &gt; 保存文件名 <span class=\"comment\">#将镜像文件打包存出到磁盘</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> load -i 保存文件名.tar   <span class=\"comment\"># --input 将打包的镜像文件进行载人</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> load &lt; 保存文件名.tar</span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">export</span> &lt;container id|name&gt; &gt;导出文件.tar  <span class=\"comment\">#导出容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> import - repository[:tag] <span class=\"comment\">#导入容器</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"rename-容器名称重命名\"><a href=\"#rename-容器名称重命名\" class=\"headerlink\" title=\"rename - 容器名称重命名\"></a>rename - 容器名称重命名</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> rename my-nginx new-nginx</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"run-运行容器\"><a href=\"#run-运行容器\" class=\"headerlink\" title=\"run - 运行容器\"></a>run - 运行容器</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> run [组织名称]/&lt;镜像名称&gt;:[镜像标签]</span><br><span class=\"line\"><span class=\"comment\"># run参数使用解析如下：#</span></span><br><span class=\"line\"><span class=\"comment\"># -e 参数指定环境变量 VARIABLE=VALUE 也可采用 -env-file=FILE 设置文件</span></span><br><span class=\"line\"><span class=\"comment\"># -i 让容器的标准输入保持打开</span></span><br><span class=\"line\"><span class=\"comment\"># -t 让$docker分配一个伪终端ptty,并绑定到容器的标准输入上</span></span><br><span class=\"line\"><span class=\"comment\"># -d 即--detach参数即可后台运行,用户无法看到容器中的信息</span></span><br><span class=\"line\"><span class=\"comment\"># -c 运行一段shell命令  \"while true;do echo 正在运行; sleep 1;done\"  </span></span><br><span class=\"line\"><span class=\"comment\"># -h HOSTNAME 或者 --hostname=HOSTNAME 设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts。</span></span><br><span class=\"line\"><span class=\"comment\"># -v 设置宿主机映射到容器中的目录</span></span><br><span class=\"line\"><span class=\"comment\"># --rm 添加这个标记,容器会在停止后立即删除自身  (注意：与-d不能同时使用)</span></span><br><span class=\"line\"><span class=\"comment\"># --name 使用--name web 标记可以为容器重新命名</span></span><br><span class=\"line\"><span class=\"comment\"># --restart always|no|on-failure  容器出错自动重启（Docker 自启时候也启动）</span></span><br><span class=\"line\"><span class=\"comment\"># --network | --net=bridge|none|container:NAME_or_ID|host 配置容器的桥接模式</span></span><br><span class=\"line\"><span class=\"comment\"># --volumes-from [数据卷名称]  #挂载的已存在的数据卷</span></span><br><span class=\"line\"><span class=\"comment\"># --mount #挂载数据卷到容器之中 type=bind,source=/src/webapp,target=/opt/webapp,readonly</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -c|--cpu-shares[=0]   #调整容器使用 CPU 的权重</span></span><br><span class=\"line\"><span class=\"comment\"># --cpus decimal        #cpu的数量</span></span><br><span class=\"line\"><span class=\"comment\"># --cpuset-cpus=\"0\"     #允许执行的cpu (0-3,0,1)</span></span><br><span class=\"line\"><span class=\"comment\"># --cpuset-mems=\"0\"     #允许执行的MEMs (0-3,0,1)</span></span><br><span class=\"line\"><span class=\"comment\"># --cpu-period=1000000    #限制CPU CFS(完全公平调度程序)周期</span></span><br><span class=\"line\"><span class=\"comment\"># --cpu-quota=950000      #限制CPU CFS(完全公平调度程序)配额</span></span><br><span class=\"line\"><span class=\"comment\"># --cpu-rt-period 1000000 #以微秒为单位限制CPU实时周期</span></span><br><span class=\"line\"><span class=\"comment\"># --cpu-rt-runtime 950000 #以微秒为单位限制CPU实时运行时</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -m|--memory[=MEMORY]  #调整容器使用内存的大小 # -m 128m 指定容器运行内存为128m</span></span><br><span class=\"line\"><span class=\"comment\"># --memory-swap=125M    #交换内存的限制 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --entrypoint 在容器中执行指定的应用</span></span><br><span class=\"line\"><span class=\"comment\"># --dns=IP_ADDRESS 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。</span></span><br><span class=\"line\"><span class=\"comment\"># --dns-search=DOMAIN 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。</span></span><br><span class=\"line\"><span class=\"comment\"># --link=CONTAINER_NAME:ALIAS 添加到另一个容器的连接</span></span><br></pre></td></tr></table></figure>\n<p>基础实例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -H docker.weiyigeek.top:2375 run -itd alpine sh    <span class=\"comment\">#指定守护进程运行alpine容器进行交互式界面</span></span><br><span class=\"line\">docker run --name hello hello-world  <span class=\"string\">\"while true;do echo 正在运行; sleep 1;done\"</span>  <span class=\"comment\">#运行hello-world镜像，产生一个容器名称hello实例（也可以通过镜像id前三位运行）</span></span><br><span class=\"line\">docker run -d -p 5000:5000 -restart always --name docker-repository registry /bin/sh -C <span class=\"string\">\"echo hello word\"</span>  <span class=\"comment\">#守护态运行容器，当重启docker守护进程时容器将自动启动</span></span><br><span class=\"line\">docker run --entrypoint htpasswd registry -Bbn testuser testpassword  <span class=\"comment\">#在registry中执行htpasswd且-Bbn为参数;</span></span><br><span class=\"line\">docker run -it --rm host_ubuntu --dns=114.114.114.114 --dns-search=test.com ubuntu <span class=\"comment\">#为运行的容器指定dns服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --name <span class=\"built_in\">test</span> --<span class=\"built_in\">ulimit</span> nproc=65535 centos:7   <span class=\"comment\">#在启动前来指定容器中ulimit nproc大小(ulimt -u进行查看)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"exec-在已运行的容器中执行命令\"><a href=\"#exec-在已运行的容器中执行命令\" class=\"headerlink\" title=\"exec - 在已运行的容器中执行命令\"></a>exec - 在已运行的容器中执行命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> <span class=\"built_in\">exec</span> -it &lt;Container-id&gt;  /bin/bash  <span class=\"comment\">#$docker exec 至1.3版本起可以在容器中运行命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础实例</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it openldap bash</span><br><span class=\"line\"><span class=\"comment\"># root@4a1a157c5e70:/# whoami</span></span><br><span class=\"line\"><span class=\"comment\"># root</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"update-更新一个或多个容器的配置\"><a href=\"#update-更新一个或多个容器的配置\" class=\"headerlink\" title=\"update - 更新一个或多个容器的配置\"></a>update - 更新一个或多个容器的配置</h5><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:  docker update [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --blkio-weight uint16        Block IO (relative weight), between 10 and 1000, or 0 to <span class=\"built_in\">disable</span> (default 0)</span><br><span class=\"line\">      --cpu-period int             Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class=\"line\">      --cpu-quota int              Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class=\"line\">      --cpu-rt-period int          Limit the CPU real-time period <span class=\"keyword\">in</span> microseconds</span><br><span class=\"line\">      --cpu-rt-runtime int         Limit the CPU real-time runtime <span class=\"keyword\">in</span> microseconds</span><br><span class=\"line\">  -c, --cpu-shares int             CPU shares (relative weight)</span><br><span class=\"line\">      --cpus decimal               Number of CPUs</span><br><span class=\"line\">      --cpuset-cpus string         CPUs <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --cpuset-mems string         MEMs <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to allow execution (0-3, 0,1)</span><br><span class=\"line\">      --kernel-memory bytes        Kernel memory <span class=\"built_in\">limit</span></span><br><span class=\"line\">  -m, --memory bytes               Memory <span class=\"built_in\">limit</span></span><br><span class=\"line\">      --memory-reservation bytes   Memory soft <span class=\"built_in\">limit</span></span><br><span class=\"line\">      --memory-swap bytes          Swap <span class=\"built_in\">limit</span> equal to memory plus swap: <span class=\"string\">'-1'</span> to <span class=\"built_in\">enable</span> unlimited swap</span><br><span class=\"line\">      --pids-limit int             Tune container pids <span class=\"built_in\">limit</span> (<span class=\"built_in\">set</span> -1 <span class=\"keyword\">for</span> unlimited)</span><br><span class=\"line\">      --restart string             Restart policy to apply when a container exits</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新故障重启策略</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> update --restart=[always|no|on-failure|unless-stopped] 容器ID|容器名称 <span class=\"comment\">#推荐方式</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> update --restart=[always|no|on-failure] 容器ID|容器名称 <span class=\"comment\">#更改容器启动模式</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"cp-容器与宿主机文件复制\"><a href=\"#cp-容器与宿主机文件复制\" class=\"headerlink\" title=\"cp - 容器与宿主机文件复制\"></a>cp - 容器与宿主机文件复制</h5><p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> cp containerID[names]:/home/1.php /opt/php/   <span class=\"comment\">#把容器的1.php拷贝到宿主机opt目录</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> cp opt/php/config.php container[ID|names]:/home/  <span class=\"comment\">#把宿主机的config.php拷贝到容器</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"logs-容器日志持续查看\"><a href=\"#logs-容器日志持续查看\" class=\"headerlink\" title=\"logs - 容器日志持续查看\"></a>logs - 容器日志持续查看</h5><p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -f, --follow     跟踪实时日志</span></span><br><span class=\"line\"><span class=\"comment\"># -t, --timestamps 显示时间戳</span></span><br><span class=\"line\"><span class=\"comment\"># --details        显示更多的信息</span></span><br><span class=\"line\"><span class=\"comment\"># --tail string    从日志末尾显示多少行日志， 默认是all</span></span><br><span class=\"line\"><span class=\"comment\"># --since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）</span></span><br><span class=\"line\"><span class=\"comment\"># --until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> logs -f &lt;Container-id&gt;      <span class=\"comment\">#获取容器的输出信息 -f 不间断的显示容器日志</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> logs -f -t --since=<span class=\"string\">\"2018-02-08\"</span> --tail=100 CONTAINER_ID <span class=\"comment\">#查看指定时间后的日志，只显示最后100行</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> logs --since 30m CONTAINER_ID <span class=\"comment\">#查看最近30分钟的日志</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> logs -t --since=<span class=\"string\">\"2018-02-08T13:23:37\"</span> --until <span class=\"string\">\"2018-02-09T12:23:37\"</span> CONTAINER_ID <span class=\"comment\">#查看某时间段日志</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"rmi-本地镜像删除\"><a href=\"#rmi-本地镜像删除\" class=\"headerlink\" title=\"rmi - 本地镜像删除\"></a>rmi - 本地镜像删除</h5><h5 id=\"rm-删除本地已已停止的容器\"><a href=\"#rm-删除本地已已停止的容器\" class=\"headerlink\" title=\"rm  - 删除本地已已停止的容器\"></a>rm  - 删除本地已已停止的容器</h5><p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:  docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class=\"line\">Usage:  docker rmi [OPTIONS] IMAGE [IMAGE...] <span class=\"comment\"># 只有 -f | --no-prune 两个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数:</span></span><br><span class=\"line\"><span class=\"comment\"># -f,--force=false 强制终止并删除一个运行中的容器[默认会发生SIGKILL信号]</span></span><br><span class=\"line\"><span class=\"comment\"># -l,--link=false  删除容器连接但保留容器</span></span><br><span class=\"line\"><span class=\"comment\"># -v,--volumes=false  同时删除容器挂载的数据卷</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm &lt;container id|name&gt;           <span class=\"comment\">#删除容器删除依赖该镜像的容器ID,前3位即可</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm -vf [&lt;image id&gt;|&lt;repository&gt;  <span class=\"comment\">#删除容器以及数据卷</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi [&lt;image id&gt;|&lt;repository&gt; ]   <span class=\"comment\">#删除镜像 镜像id|仓库名称</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi -f &lt;images id&gt;               <span class=\"comment\">#不建议强行删除正在容器中运行的镜像文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\">docker rmi -f test1:1.1</span><br><span class=\"line\">Untagged: <span class=\"built_in\">test</span>:1.1</span><br><span class=\"line\">Deleted: sha256:b38cf44fda73f18ffe7a32047d206d5bb974d10b2f64515c4de25cfa3dbe2b47</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3.删除全部已经停止的融容器</span></span><br><span class=\"line\">docker rm $(docker ps -f status=exited -q)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"volume-数据卷创建与管理\"><a href=\"#volume-数据卷创建与管理\" class=\"headerlink\" title=\"volume - 数据卷创建与管理\"></a>volume - 数据卷创建与管理</h5><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:  docker volume COMMAND</span><br><span class=\"line\"><span class=\"comment\">#COMMAND</span></span><br><span class=\"line\"><span class=\"comment\"># create      Create a volume</span></span><br><span class=\"line\"><span class=\"comment\"># inspect     Display detailed information on one or more volumes</span></span><br><span class=\"line\"><span class=\"comment\"># ls          List volumes</span></span><br><span class=\"line\"><span class=\"comment\"># prune       Remove all unused local volumes</span></span><br><span class=\"line\"><span class=\"comment\"># rm          Remove one or more volumes</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> volume create my-vol <span class=\"comment\">#创建一个数据卷</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume ls <span class=\"comment\">#查看数据线卷</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume inspect 5be64caf <span class=\"comment\">#数据卷信息</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"build-基于Dockerfile镜像构建\"><a href=\"#build-基于Dockerfile镜像构建\" class=\"headerlink\" title=\"build - 基于Dockerfile镜像构建\"></a>build - 基于Dockerfile镜像构建</h5><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-t 指定仓库名和版本号</span></span><br><span class=\"line\"><span class=\"comment\">#-f 指定docker文件</span></span><br><span class=\"line\"><span class=\"comment\">#--target 指定构建xxx阶段</span></span><br><span class=\"line\"><span class=\"comment\">#--no-cache=true  构建阶段不使用缓存，即映像层不复用</span></span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> build --target=builder -t weiyigeek/repo:version -f DockerFile .  <span class=\"comment\">#dockerfile编译，非常注意上下文</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"network-容器网络设置\"><a href=\"#network-容器网络设置\" class=\"headerlink\" title=\"network - 容器网络设置\"></a>network - 容器网络设置</h5><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-d 参数指定 Docker 网络类型，有 bridge 、 overlay(用于Swarm mode)</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例0.Docker网卡查看与网络类型详情</span></span><br><span class=\"line\">docker network </span><br><span class=\"line\">docker network inspect $(docker network ls -q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例1.创建指定类型的网络</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> network create -d bridge [网络名称]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.命令会在所连接的容器中创建新的网卡，以完成其与所指定网络的连接。</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> network connect  </span><br><span class=\"line\"><span class=\"variable\">$docker</span> network connect frontend c2</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"swarm-集群初始操作及其管理\"><a href=\"#swarm-集群初始操作及其管理\" class=\"headerlink\" title=\"swarm - 集群初始操作及其管理\"></a>swarm - 集群初始操作及其管理</h5><p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建立swarm集群管理端</span></span><br><span class=\"line\">docker swarm init --advertise-addr 10.20.172.122</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作端加入到swarm集群中</span></span><br><span class=\"line\">docker swarm join --token SWMTKN-1-0w8bvf8gzw5hct845izbv38qvl45385r19p4gwo0v8fuwie68g-603ibqyz4od3mmnw1gmbahd8v 10.10.107.245:2377</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"node-集群中机器节点查看\"><a href=\"#node-集群中机器节点查看\" class=\"headerlink\" title=\"node - 集群中机器节点查看\"></a>node - 集群中机器节点查看</h5><p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.节点信息一览以及swarm控制者查看</span></span><br><span class=\"line\">$ docker node ls</span><br><span class=\"line\"><span class=\"comment\"># ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span></span><br><span class=\"line\"><span class=\"comment\"># tqulwewuzrgayabjomy3xw55u *   node2               Ready               Active              Leader(领导者)      19.03.12</span></span><br><span class=\"line\"><span class=\"comment\"># 7vp6qrabwp7ee2dkq0d1bf11l     worker-01           Ready               Active                                  19.03.12</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.排空节点上的集群容器 </span></span><br><span class=\"line\">docker@master-01:~<span class=\"variable\">$docker</span> node update --availability drain j5auh1zg6qzvmzkf80wvpl9hr</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"stack-集群中应用构建管理以及查看\"><a href=\"#stack-集群中应用构建管理以及查看\" class=\"headerlink\" title=\"stack - 集群中应用构建管理以及查看\"></a>stack - 集群中应用构建管理以及查看</h5><p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在swarm集群中部署各个应用</span></span><br><span class=\"line\">docker stack deploy -c docker-compose.yml swarm-python-web</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.swarm 集群信息与swarm-python-web服务应用信息</span></span><br><span class=\"line\">docker stack ls</span><br><span class=\"line\"><span class=\"comment\"># NAME                SERVICES            ORCHESTRATOR</span></span><br><span class=\"line\"><span class=\"comment\"># swarm-python-web    1                   Swarm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.应用信息服务查看</span></span><br><span class=\"line\">docker stack services swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># ID                  NAME                   MODE                REPLICAS            IMAGE               PORTS</span></span><br><span class=\"line\"><span class=\"comment\"># bzeeucg6n6s1        swarm-python-web_web   replicated          5/5                 python-web:latest   *:80-&gt;8080/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.应用启动后的集群中各个节点里运行的容器状态</span></span><br><span class=\"line\">docker stack ps swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># ID                  NAME                     IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</span></span><br><span class=\"line\"><span class=\"comment\"># xv3doqj787ae        swarm-python-web_web.1   python-web:latest   worker-02           Running             Running 5 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># njkppsnrf4nc        swarm-python-web_web.2   python-web:latest   worker-01           Running             Running 5 minutes ago</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.删除在集群中部署的应用以及退出集群:</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> stack rm $(docker stack ls --format <span class=\"string\">\"&#123;&#123;.Name&#125;&#125;\"</span>)</span><br><span class=\"line\">Removing service swarm-python-web_web</span><br><span class=\"line\">Removing network swarm-python-web_webnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.控制节点或者工作节点退出swarm集群</span></span><br><span class=\"line\">docker swarm leave --force</span><br><span class=\"line\">Node left the swarm.</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"service-查看swarm集群中的相关信息\"><a href=\"#service-查看swarm集群中的相关信息\" class=\"headerlink\" title=\"service - 查看swarm集群中的相关信息\"></a>service - 查看swarm集群中的相关信息</h5><p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.获取service实例的Ip</span></span><br><span class=\"line\">[root@swarm-manager-node ~]$ docker service ps my-test </span><br><span class=\"line\">ID                    NAME       IMAGE                                                   NODE                         DESIRED   STATE  CURRENT STATE    ERROR  PORTS</span><br><span class=\"line\">t71gqufekv2o  my-test.1  172.16.60.214:5000/kevin_nginx:latest  swarm-node2              Running    Running 16 seconds ago        </span><br><span class=\"line\">9cuq2yf10d60 my-test.2  172.16.60.214:5000/kevin_nginx:latest  swarm-manager-node  Running   Running 16 seconds ago        </span><br><span class=\"line\">srt2yo817kpv  my-test.3  172.16.60.214:5000/kevin_nginx:latest  swarm-node1               Running    Running 16 seconds ago</span><br></pre></td></tr></table></figure></p>\n<p><em>基础命令：</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#镜像容器查看#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数据卷资源共享#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#镜像仓库删除#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#镜像导入导出#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器自动更新设置(不自启)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器日志查看#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#网络建设#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#系统清理#</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> image prune <span class=\"comment\"># 删除 dangling 或所有未被使用的镜像 &lt;none&gt; 这样的镜像文件</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> container prune <span class=\"comment\"># 删除所有退出状态的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume prune <span class=\"comment\"># 删除未被使用的数据卷(#无主的数据卷可能会占据很多空间，要清理请使用以下命令)</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> system prune  <span class=\"comment\">#清除容器缓存（包括停止的容器）</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> container ls  当前正在运行的容器</span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps  <span class=\"comment\">#列出正在运行的容器（如果创建容器中没有进程正在运行，容器就会立即停止）</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> ps -a  <span class=\"comment\"># 列出所有运行过的容器记录</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> save centos &gt; /opt/centos.tar.gz  <span class=\"comment\"># 导出$docker镜像至本地</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> load &lt; /opt/centos.tar.gz   <span class=\"comment\">#导入本地镜像到$docker镜像库</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> stop  `<span class=\"variable\">$docker</span> ps -aq`  <span class=\"comment\"># 停止所有正在运行的容器</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm `<span class=\"variable\">$docker</span> ps -aq`    <span class=\"comment\"># 一次性删除所有容器记录</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rm $(docker ps -q -f status=exited)  <span class=\"comment\">#删除已退出的镜像</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi  `<span class=\"variable\">$docker</span> images -aq`   <span class=\"comment\"># 一次性删除所有本地的镜像记录</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi $(docker images --filter <span class=\"string\">\"dangling=true\"</span> -q  --no-trunc) <span class=\"comment\">#删除没有运行的虚悬镜像（&lt;none&gt;）</span></span><br><span class=\"line\"><span class=\"comment\"># sha256:42260aae5eec1968898dea3494787dc272bf1eb6124e167acd941ac39fa78000</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> rmi $(docker images -q -f <span class=\"string\">\"dangling=true\"</span>)  <span class=\"comment\">#删除没有运行的虚悬镜像（&lt;none&gt;）</span></span><br><span class=\"line\"><span class=\"comment\"># 42260aae5eec</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据卷</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume ls  <span class=\"comment\">#列出数据卷。</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume create --driver <span class=\"built_in\">local</span> --name esdata2  <span class=\"comment\"># 采用 docker volume ls 进行查看</span></span><br><span class=\"line\"><span class=\"variable\">$docker</span> volume rm $(docker volume ls -qf dangling=<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$docker</span> network ls  <span class=\"comment\">#网络连接类型以及ID</span></span><br><span class=\"line\"></span><br><span class=\"line\">删除容器：docker container rm $(docker container ls -a -q)</span><br><span class=\"line\">删除镜像：docker image rm $(docker image ls -a -q)</span><br><span class=\"line\">删除数据卷：docker volume rm $(docker volume ls -q)</span><br><span class=\"line\">删除网络：network rm $(docker network ls -q)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行这个命令前系统中所有的容器都已停止，那么这个命令就会移除所有的资源</span></span><br><span class=\"line\">$ docker system prune --all --force --volumns</span><br><span class=\"line\"><span class=\"comment\">#首先使用最简单的方法，清理当前未运行的所有$docker容器，写入到用户的 ~/.bashrc 文件中就可以了！</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> docker-clean-unused=<span class=\"string\">'docker system prune --all --force --volumes'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> docker-clean-all=<span class=\"string\">'docker stop $(docker container ls -a -q) &amp;&amp; docker system prune --all --force --volumes'</span></span><br><span class=\"line\">$ docker system df -v <span class=\"comment\">#列出每个镜像，容器，数据卷,缓存占用的磁盘空间;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Images space usage:</span><br><span class=\"line\">  <span class=\"comment\"># REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE                SHARED SIZE         UNIQUE SIZE         CONTAINERS</span></span><br><span class=\"line\">  <span class=\"comment\"># test                        1.2                 30a048249000        43 minutes ago      7.374MB             7.374MB   </span></span><br><span class=\"line\">Containers space usage:</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER ID        IMAGE                    COMMAND                  LOCAL VOLUMES       SIZE                CREATED             STATUS                      NAMES</span></span><br><span class=\"line\">  <span class=\"comment\"># 39e4f473e34f        test1                    \"top -b sh\"              0                   0B                  56 minutes ago      Exited (1) 56 minutes ago   unruffled_bhabha</span></span><br><span class=\"line\">Local Volumes space usage:</span><br><span class=\"line\">  <span class=\"comment\"># VOLUME NAME                                                        LINKS               SIZE</span></span><br><span class=\"line\">  <span class=\"comment\"># a4974599165f539b98fd57fc53ccc073a7e8cdf4cd36cbc5e349fb8d4f6a1325   0                   2.51MB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#docker 容器自启动设置</span></span><br><span class=\"line\">docker run -–restart=always</span><br><span class=\"line\"><span class=\"comment\">#假如此时你的容器已经启动可以通过update命令进行修改,两种方式都可以;</span></span><br><span class=\"line\">docker update -–restart=always redis</span><br><span class=\"line\">docker update -restart=no mysql8.x</span><br><span class=\"line\">docker container update --restart=always 容器名字</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"docker","path":"api/tags/docker.json"}]}