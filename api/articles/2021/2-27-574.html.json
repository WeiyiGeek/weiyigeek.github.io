{"title":"17-Kubernetes进阶学习之集群升级迁移和维护实践","slug":"虚拟云容/云容器/Kubernetes/17-Kubernetes进阶之集群升级迁移和维护实践","date":"2021-02-27T02:37:47.000Z","updated":"2023-01-31T02:29:10.471Z","url":"2021/2-27-574.html","path":"api/articles/2021/2-27-574.html.json","covers":["https://img.weiyigeek.top/2021/5/20210722174852.png","https://img.weiyigeek.top/2021/5/20210722171441.png","https://img.weiyigeek.top/2021/5/20210723231734.png","https://img.weiyigeek.top/2021/5/20210724111052.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Kubernetes-Etcd-数据备份与恢复\"><a href=\"#0x00-Kubernetes-Etcd-数据备份与恢复\" class=\"headerlink\" title=\"0x00 Kubernetes Etcd 数据备份与恢复\"></a>0x00 Kubernetes Etcd 数据备份与恢复</h2><p>描述:Kubernetes 使用 Etcd 数据库实时存储集群中的数据，可以说 Etcd 是 Kubernetes 的核心组件，犹如人类的大脑。如果 Etcd 数据损坏将导致 Kubernetes 不可用，在生产环境中 Etcd 数据是一定要做好高可用与数据备份，这里介绍下如何备份与恢复 Etcd 数据。</p>\n<p><strong>Etcd 版本说明:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ etcdctl version</span><br><span class=\"line\">etcdctl version: 3.4.13</span><br><span class=\"line\">API version: 3.4</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"1-备份-ETCD-数据实践\"><a href=\"#1-备份-ETCD-数据实践\" class=\"headerlink\" title=\"1) 备份 ETCD 数据实践\"></a>1) 备份 ETCD 数据实践</h3><ul>\n<li><strong>Step 1.查询当前 Kubernetes 使用的 Etcd 使用的镜像，并记住镜像名称与版本</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于 k8s.gcr.io 镜像仓库国内被墙，所以使用的是阿里云的 etcd 镜像</span></span><br><span class=\"line\">$ docker images | grep <span class=\"string\">\"etcd\"</span></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd   3.4.13-0   0369cf4303ff  10 months ago  253MB</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><strong>Step 2.Kubeadm 安装的 Kubernetes 集群，采用镜像方式部署的 Etcd，所以操作 Etcd 需要使用 Etcd 镜像提供的 Etcdctl 工具</strong><br>Tips : 如果你是非镜像方式部署 Etcd，可以直接使用 Etcdctl 命令备份数据。</li>\n</ul>\n<p><em>语法格式:</em> 运行 Etcd 镜像，并且使用镜像内部的 etcdctl 工具连接 etcd 集群，执行数据快照备份：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--rm : 运行结束后则删除</span><br><span class=\"line\">-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录</span><br><span class=\"line\">--env：设置环境变量，指定 etcdctl 工具使用的 API 版本</span><br><span class=\"line\">/bin/sh -c：执行 shell 命令</span><br><span class=\"line\">etcdctl  etcd客户端工具</span><br><span class=\"line\">--cacert：etcd CA 证书</span><br><span class=\"line\">--key：etcd 客户端证书 key</span><br><span class=\"line\">--cert：etcd 客户端证书 crt</span><br><span class=\"line\">--endpoints：指定 ETCD 连接地址</span><br><span class=\"line\">snapshot save etcd 数据备份</span><br><span class=\"line\">/backup/etcd-snapshot.db 数据备份名称</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>以 Docker 镜像 备份 Etcd 数据:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 验证开放端口</span></span><br><span class=\"line\">$ netstat -ano | grep -e <span class=\"string\">\"192.168.12.226:2379\"</span></span><br><span class=\"line\">  <span class=\"comment\"># tcp        0      0 192.168.12.226:2379     0.0.0.0:*               LISTEN      off (0.00/0/0)</span></span><br><span class=\"line\">  <span class=\"comment\"># tcp        0      0 192.168.12.226:34376    192.168.12.226:2379     ESTABLISHED keepalive (10.06/0/0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># etcd 证书一览</span></span><br><span class=\"line\">$ ls /etc/kubernetes/pki/etcd</span><br><span class=\"line\">  <span class=\"comment\"># ca.crt  ca.key  healthcheck-client.crt  healthcheck-client.key  peer.crt  peer.key  server.crt  server.key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># etcd备份文件存储的目录</span></span><br><span class=\"line\">$ mkdir -vp /data/backup</span><br><span class=\"line\">$ docker run --rm                                    \\</span><br><span class=\"line\">-v /data/backup:/backup                              \\</span><br><span class=\"line\">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \\</span><br><span class=\"line\">--env ETCDCTL_API=3                                  \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0 \\</span><br><span class=\"line\">/bin/sh -c <span class=\"string\">\"etcdctl --endpoints=https://192.168.12.226:2379 \\</span></span><br><span class=\"line\"><span class=\"string\">--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \\</span></span><br><span class=\"line\"><span class=\"string\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \\</span></span><br><span class=\"line\"><span class=\"string\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \\</span></span><br><span class=\"line\"><span class=\"string\">snapshot save /backup/etcd-snapshot.db\"</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":1626848337.5133626,\"caller\":\"snapshot/v3_snapshot.go:119\",\"msg\":\"created temporary db file\",\"path\":\"/backup/etcd-snapshot.db.part\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":\"2021-07-21T06:18:57.535Z\",\"caller\":\"clientv3/maintenance.go:200\",\"msg\":\"opened snapshot stream; downloading\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":1626848337.535256,\"caller\":\"snapshot/v3_snapshot.go:127\",\"msg\":\"fetching snapshot\",\"endpoint\":\"https://192.168.12.226:2379\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":\"2021-07-21T06:18:57.600Z\",\"caller\":\"clientv3/maintenance.go:208\",\"msg\":\"completed snapshot read; closing\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":1626848337.6088023,\"caller\":\"snapshot/v3_snapshot.go:142\",\"msg\":\"fetched snapshot\",\"endpoint\":\"https://192.168.12.226:2379\",\"size\":\"3.8 MB\",\"took\":0.095346714&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"level\":\"info\",\"ts\":1626848337.6089203,\"caller\":\"snapshot/v3_snapshot.go:152\",\"msg\":\"saved\",\"path\":\"/backup/etcd-snapshot.db\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># Snapshot saved at /backup/etcd-snapshot.db</span></span><br><span class=\"line\"></span><br><span class=\"line\">/data/backup$ ls -alh etcd-snapshot.db</span><br><span class=\"line\">-rw------- 1 root root 3.7M Jul 21 14:18 etcd-snapshot.db</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>二进制 etcdctl 的安装</strong><br>描述: etcdctl 二进制文件可以在 <code>github.com/coreos/etcd/releases</code> 选择对应的版本下载，例如可以执行以下 <code>install_etcdctl.sh</code>的脚本，修改其中的版本信息。</p>\n<ul>\n<li>install_etcdctl.sh<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: </span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ETCDCTL_API=3</span><br><span class=\"line\">ETCD_VER=v3.4.13</span><br><span class=\"line\">ETCD_DIR=etcd-download</span><br><span class=\"line\">DOWNLOAD_URL=https://github.com/coreos/etcd/releases/download</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Download</span></span><br><span class=\"line\">mkdir <span class=\"variable\">$&#123;ETCD_DIR&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;ETCD_DIR&#125;</span></span><br><span class=\"line\">wget <span class=\"variable\">$&#123;DOWNLOAD_URL&#125;</span>/<span class=\"variable\">$&#123;ETCD_VER&#125;</span>/etcd-<span class=\"variable\">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz </span><br><span class=\"line\">tar -xzvf etcd-<span class=\"variable\">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> etcd-<span class=\"variable\">$&#123;ETCD_VER&#125;</span>-linux-amd64</span><br><span class=\"line\">cp etcdctl /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure></li>\n<li>备份 master 主机节点的ETCD<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">mkdir -pv /backup </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份数据</span></span><br><span class=\"line\">etcdctl --endpoints=https://192.168.12.226:2379 \\</span><br><span class=\"line\">--cacert=/etc/kubernetes/pki/etcd/ca.crt \\</span><br><span class=\"line\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \\</span><br><span class=\"line\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \\</span><br><span class=\"line\">snapshot save /backup/etcd-snapshot.db</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"2-恢复-ETCD-数据实践\"><a href=\"#2-恢复-ETCD-数据实践\" class=\"headerlink\" title=\"2) 恢复 ETCD 数据实践\"></a>2) 恢复 ETCD 数据实践</h3><p>描述: 在 Etcd 数据损坏时，可以通过 Etcd 备份数据进行数据恢复，先暂停 Kubernetes 相关组件，然后进入 Etcd 镜像使用 etcdctl 工具执行恢复操作。</p>\n<ul>\n<li><strong>Step 1.暂停 Kube-Apiserver 与 Etcd 镜像</strong><br>在恢复 Etcd 数据前，需要停止 kube-apiserver 与 etcd 镜像，因为当这俩镜像停止后 Kubernetes 会自动重启这俩镜像，所以我们可以先暂时移除 /etc/kubernetes/manifests 目录，Kubernetes 检测这个目录文件不存在时会停止 Kubernetes 系统相关镜像，使其不能重启，方便我们进行后续的操作。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 移除且备份 /etc/kubernetes/manifests 目录</span></span><br><span class=\"line\">$ mv /etc/kubernetes/manifests /etc/kubernetes/manifests.bak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 kube-apiserver、etcd 镜像是否停止</span></span><br><span class=\"line\">$ docker ps|grep etcd &amp;&amp; docker ps|grep kube-apiserver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份现有 Etcd 数据</span></span><br><span class=\"line\">$ mv /var/lib/etcd /var/lib/etcd.bak</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><strong>Step 2.恢复 Etcd 数据</strong><br>描述: 运行 Etcd 镜像然后执行数据恢复，默认会恢复到 <code>/default.etcd/member/</code> 目录下，这里使用 mv 命令在移动到挂载目录 <code>/var/lib/etcd/</code> 下。</li>\n</ul>\n<p>语法格式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh -c：执行 shell 命令</span><br><span class=\"line\">--env：设置环境变量，指定 etcdctl 工具使用的 API 版本</span><br><span class=\"line\">-v：docker 挂载选项，用于挂载 Etcd 证书相关目录以及备份数据存放的目录</span><br><span class=\"line\">etcdctl snapshot restore：etcd 数据恢复。</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>单节点恢复数据:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将db导入到 etcd 之中并将生成文件复制到 /var/lib/etcd/</span></span><br><span class=\"line\">$ docker run --rm              \\</span><br><span class=\"line\">-v /data/backup:/backup        \\</span><br><span class=\"line\">-v /var/lib/etcd:/var/lib/etcd \\</span><br><span class=\"line\">--env ETCDCTL_API=3            \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0  \\</span><br><span class=\"line\">/bin/sh -c <span class=\"string\">\"etcdctl snapshot restore /backup/etcd-snapshot.db; mv /default.etcd/member/ /var/lib/etcd/\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<ul>\n<li><strong>Step 3.恢复 Kube-Apiserver 与 Etcd 镜像</strong><br>描述: 将 /etc/kubernetes/manifests 目录恢复，使 Kubernetes 重启 Kube-Apiserver 与 Etcd 镜像：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv /etc/kubernetes/manifests.bak /etc/kubernetes/manifests</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><strong>Step 4.执行如下方式进行检测ETCD恢复后的状态</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.执行 etcdctl 命令进行检测</span></span><br><span class=\"line\">etcdctl --endpoints=https://192.168.12.226:2379 \\</span><br><span class=\"line\">--cacert=/etc/kubernetes/pki/etcd/ca.crt \\</span><br><span class=\"line\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \\</span><br><span class=\"line\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \\</span><br><span class=\"line\">endpoint health</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.执行 Kubectl 命令进行检测，查看命令是否能够正常执行：</span></span><br><span class=\"line\">$ kubectl get nodes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<p>Tips : 补充说明kubernetes之etcd集群备份恢复, 将 <code>Master-01</code> 生成etcd备份分别复制到 <code>Master-02</code> 和 <code>Master-03</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Master-01</span></span><br><span class=\"line\">etcdctl snapshot restore /backup/etcd-snapshot.db \\</span><br><span class=\"line\">--name etcd-0 \\</span><br><span class=\"line\">--initial-cluster <span class=\"string\">\"etcd-0=https://192.168.1.101:2380,etcd-1=https://192.168.1.102:2380,etcd-2=https://192.168.1.103:2380\"</span> \\</span><br><span class=\"line\">--initial-cluster-token etcd-cluster \\</span><br><span class=\"line\">--initial-advertise-peer-urls https://192.168.1.101:2380 \\</span><br><span class=\"line\">--data-dir=/var/lib/etcd/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Master-02</span></span><br><span class=\"line\">etcdctl snapshot restore /backup/etcd-snapshot.db \\</span><br><span class=\"line\">--name etcd-1 \\</span><br><span class=\"line\">--initial-cluster <span class=\"string\">\"etcd-0=https://192.168.1.101:2380,etcd-1=https://192.168.1.102:2380,etcd-2=https://192.168.1.103:2380\"</span> \\</span><br><span class=\"line\">--initial-cluster-token etcd-cluster \\</span><br><span class=\"line\">--initial-advertise-peer-urls https://192.168.1.102:2380 \\</span><br><span class=\"line\">--data-dir=/var/lib/etcd/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Master-03</span></span><br><span class=\"line\">etcdctl snapshot restore /backup/etcd-snapshot.db \\</span><br><span class=\"line\">--name etcd-2 \\</span><br><span class=\"line\">--initial-cluster <span class=\"string\">\"etcd-0=https://192.168.1.101:2380,etcd-1=https://192.168.1.102:2380,etcd-2=https://192.168.1.103:2380\"</span> \\</span><br><span class=\"line\">--initial-cluster-token etcd-cluster \\</span><br><span class=\"line\">--initial-advertise-peer-urls https://192.168.1.103:2380 \\</span><br><span class=\"line\">--data-dir=/var/lib/etcd/</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x01-Kubernetes-单-Master-节点-次版本-升级实践\"><a href=\"#0x01-Kubernetes-单-Master-节点-次版本-升级实践\" class=\"headerlink\" title=\"0x01 Kubernetes 单 Master 节点(次版本)升级实践\"></a>0x01 Kubernetes 单 Master 节点(次版本)升级实践</h2><p>描述: 本章节主要实践次版本的升级，实践<code>从v1.19.10集群版本升级至1.19主版本中最新的v1.19.13集群版本</code>，还是基于并采用的dockershim运行时。</p>\n<p><strong>环境说明：</strong><br>升级前系统容器及其kubernetes集群相关版本:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Container</span></span><br><span class=\"line\">操作系统 : linux</span><br><span class=\"line\">体系架构 : amd64</span><br><span class=\"line\">操作系统镜像 : Ubuntu 20.04.2 LTS</span><br><span class=\"line\">操作系统内核 : 5.4.0-73-generic</span><br><span class=\"line\">容器引擎 : docker://19.3.14</span><br><span class=\"line\">容器运行时 : containerd.io 1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kubernetes</span></span><br><span class=\"line\">cri-socket : /var/run/dockershim.sock</span><br><span class=\"line\">kubelet : v1.19.10</span><br><span class=\"line\">kubeadm : v1.19.10</span><br><span class=\"line\">kubectl : v1.19.10</span><br><span class=\"line\">kube proxy : v1.19.10</span><br><span class=\"line\">etcdctl version: 3.4.13</span><br><span class=\"line\">API version: 3.4</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>Step 1.备份 kubernetes 的 etcd 数据以及备份当前Kubernetes集群创建配置以及相关文件(集群信息、etcd配置、证书文件等)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -vp /data/backup</span><br><span class=\"line\">$ docker run --rm                                    \\</span><br><span class=\"line\">-v /data/backup:/backup                              \\</span><br><span class=\"line\">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \\</span><br><span class=\"line\">--env ETCDCTL_API=3                                  \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0 \\</span><br><span class=\"line\">/bin/sh -c <span class=\"string\">\"etcdctl --endpoints=https://192.168.12.226:2379 \\</span></span><br><span class=\"line\"><span class=\"string\">--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \\</span></span><br><span class=\"line\"><span class=\"string\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \\</span></span><br><span class=\"line\"><span class=\"string\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \\</span></span><br><span class=\"line\"><span class=\"string\">snapshot save /backup/etcd-snapshot.db\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ tar -zcf kubernetes-cluster.tar.gz /etc/kubernetes/*</span><br></pre></td></tr></table></figure></p>\n<p><br/> </p>\n<p><strong>Step 2.下载指定版本的kubernetes集群相关工具</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级 1.19.10 ~ 1.19.13</span></span><br><span class=\"line\">apt update &amp;&amp; apt-cache madison kubeadm | head -n 15</span><br><span class=\"line\">...</span><br><span class=\"line\">kubeadm | 1.19.13-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载指定版本的 kubeadm kubectl</span></span><br><span class=\"line\">apt-get install -y kubelet=1.19.13-00 kubeadm=1.19.13-00 kubectl=1.19.13-00</span><br><span class=\"line\">apt-mark hold kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁用节点调度</span></span><br><span class=\"line\">kubectl cordon master-01</span><br></pre></td></tr></table></figure></p>\n<p><br/> </p>\n<p><strong>Step 3.检测当前节点是否能升级</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm upgrade plan</span><br><span class=\"line\">[upgrade/versions] Latest version <span class=\"keyword\">in</span> the v1.19 series: v1.19.13</span><br><span class=\"line\"><span class=\"comment\"># Upgrade to the latest version in the v1.19 series:</span></span><br><span class=\"line\">  <span class=\"comment\"># COMPONENT                 CURRENT    AVAILABLE</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver            v1.19.10   v1.19.13</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager   v1.19.10   v1.19.13</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler            v1.19.10   v1.19.13</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy                v1.19.10   v1.19.13</span></span><br><span class=\"line\">  <span class=\"comment\"># CoreDNS                   1.7.0      1.7.0</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd                      3.4.13-0   3.4.13-0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要手动升级到的版本在“首选版本”列中表示。</span></span><br><span class=\"line\">  <span class=\"comment\"># API GROUP                 CURRENT VERSION   PREFERRED VERSION   MANUAL UPGRADE REQUIRED</span></span><br><span class=\"line\">  <span class=\"comment\"># kubeproxy.config.k8s.io   v1alpha1          v1alpha1            no</span></span><br><span class=\"line\">  <span class=\"comment\"># kubelet.config.k8s.io     v1beta1           v1beta1             no</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Step 4.下载所有的 v1.19.13 版本的组件镜像(此次CoreDNS和etcd其版本不用进行更新)</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubernetes 重要组件镜像</span></span><br><span class=\"line\">$ docker images -a | cut -d <span class=\"string\">' '</span> -f 1 | grep <span class=\"string\">\"google_containers/kube-\"</span></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载指定版本的 kubernetes 重要组件镜像</span></span><br><span class=\"line\">version=v1.19.13</span><br><span class=\"line\">$ <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(docker images -a | cut -d <span class=\"string\">' '</span> -f 1 | grep <span class=\"string\">\"google_containers/kube-\"</span>);<span class=\"keyword\">do</span></span><br><span class=\"line\">  docker pull <span class=\"variable\">$&#123;i&#125;</span>:<span class=\"variable\">$&#123;version&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 </span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0</span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Step 5.升级当前k8s集群版本到v1.19.3版本</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将原集群创建配置文件导出。</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl -n kube-system get cm kubeadm-config -oyaml &gt; kubeadm-config.yaml</span></span><br><span class=\"line\">kubeadm config view &gt; kubeadm-config.yaml</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 192.168.12.111</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    authorization-mode: Node,RBAC</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controlPlaneEndpoint: k8s-dev.weiyigeek:6443</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  <span class=\"built_in\">local</span>:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.21.3</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  podSubnet: 172.16.0.0/16</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将集群创建配置文件中 kubernetesVersion 对象 v1.19.10 改变为 v1.19.13。</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s#1.19.10#1.19.13#g'</span> kubeadm-config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将Kubernetes集群升级到指定版本。</span></span><br><span class=\"line\">kubeadm upgrade apply v1.19.3 --config kubeadm-config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 阻塞日志一览:</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade] Running cluster health checks</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/version] You have chosen to change the cluster version to \"v1.19.13\"  </span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/confirm] Are you sure you want to proceed with the upgrade? [y/N]: y</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/prepull] Pulling images required for setting up a Kubernetes cluster</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 更新相关组件的Pod</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/apply] Upgrading your Static Pod-hosted control plane to version \"v1.19.13\"...</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-apiserver-master-k8s hash: a0d32a30af20b818a19ceda6f3c8e810</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-controller-manager-master-k8s hash: 3746ba71bc8ae5f787c4d7954828e6bb</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-scheduler-master-k8s hash: b5d76b6f8724c79709b04e03bfb169f7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 对etcd 和各k8s组件证书续期</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/etcd] Upgrading to TLS for etcd</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Writing new Static Pod manifests to \"/etc/kubernetes/tmp/kubeadm-upgraded-manifests410267198\"</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Preparing for \"kube-apiserver\" upgrade</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Renewing apiserver certificate、 apiserver-kubelet-client certificate 、front-proxy-client certificate 、apiserver-etcd-client certificate</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver 组件</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-apiserver-master-k8s hash: a0d32a30af20b818a19ceda6f3c8e810</span></span><br><span class=\"line\">  <span class=\"comment\"># [apiclient] Found 1 Pods for label selector component=kube-apiserver</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Component \"kube-apiserver\" upgraded successfully!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manage 组件</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-controller-manager-master-k8s hash: 3746ba71bc8ae5f787c4d7954828e6bb</span></span><br><span class=\"line\">  <span class=\"comment\"># [apiclient] Found 1 Pods for label selector component=kube-controller-manager</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Component \"kube-controller-manager\" upgraded successfully!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler 组件</span></span><br><span class=\"line\">  <span class=\"comment\"># Static pod: kube-scheduler-master-k8s hash: b5d76b6f8724c79709b04e03bfb169f7</span></span><br><span class=\"line\">  <span class=\"comment\"># [apiclient] Found 1 Pods for label selector component=kube-scheduler</span></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/staticpods] Component \"kube-scheduler\" upgraded successfully!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 设置主要组件相关配置文件</span></span><br><span class=\"line\">  <span class=\"comment\"># [upload-config] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace</span></span><br><span class=\"line\">  <span class=\"comment\"># [kubelet] Creating a ConfigMap \"kubelet-config-1.19\" in namespace kube-system with the configuration for the kubelets in the cluster</span></span><br><span class=\"line\">  <span class=\"comment\"># [kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"</span></span><br><span class=\"line\">  <span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span></span><br><span class=\"line\">  <span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span></span><br><span class=\"line\">  <span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span></span><br><span class=\"line\">  <span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span></span><br><span class=\"line\">  <span class=\"comment\"># [addons] Applied essential addon: CoreDNS</span></span><br><span class=\"line\">  <span class=\"comment\"># [addons] Applied essential addon: kube-proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># [upgrade/successful] SUCCESS! Your cluster was upgraded to \"v1.19.13\". Enjoy!  # 出现该句则表示升级成功。</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>Step 6.查看升级后kubernetes集群相关信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取消禁用节点调度</span></span><br><span class=\"line\">kubectl uncordon master-01</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl cluster-info</span><br><span class=\"line\">  <span class=\"comment\"># Kubernetes master is running at https://k8s-dev.weiyigeek:6443</span></span><br><span class=\"line\">  <span class=\"comment\"># KubeDNS is running at https://k8s-dev.weiyigeek:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get nodes -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME         STATUS   ROLES    AGE   VERSION    INTERNAL-IP     OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span></span><br><span class=\"line\">  <span class=\"comment\"># master-k8s   Ready    master   91d   v1.19.13   192.168.12.226  Ubuntu 20.04.2 LTS   5.4.0-73-generic   docker://19.3.15</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -n kube-system -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                       READY   STATUS  </span></span><br><span class=\"line\">  <span class=\"comment\"># calico-kube-controllers-69496d8b75-2fr5p   1/1     Running  </span></span><br><span class=\"line\">  <span class=\"comment\"># calico-node-mmthr                          1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6c76c8bb89-mhrnq                   1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6c76c8bb89-zbxhh                   1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd-master-k8s                            1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver-master-k8s                  1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager-master-k8s         1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy-m69p8                           1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler-master-k8s                  1/1     Running</span></span><br><span class=\"line\">  <span class=\"comment\"># metrics-server-77b878fdb-rlqdx             1/1     Running</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Tips : 在升级Kubernetes集群后证书相关的到期时间也会延长一年。<br>Tips : kubeadm upgrade 也会自动对 kubeadm 在节点上所管理的证书执行续约操作。 如果需要略过证书续约操作，可以使用标志 <code>--certificate-renewal=false</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级后查看证书到期时间</span></span><br><span class=\"line\">$ openssl x509 -<span class=\"keyword\">in</span> /etc/kubernetes/pki/apiserver.crt -noout -text | grep <span class=\"string\">' Not '</span></span><br><span class=\"line\">  <span class=\"comment\"># Not Before: Apr 21 06:20:12 2021 GMT</span></span><br><span class=\"line\">  <span class=\"comment\"># Not After : Jul 21 08:32:57 2022 GMT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书信息批量查询</span></span><br><span class=\"line\">$ <span class=\"keyword\">for</span> crt <span class=\"keyword\">in</span> $(find /etc/kubernetes/pki/ -name <span class=\"string\">\"*.crt\"</span>); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;crt&#125;</span>;openssl x509 -<span class=\"keyword\">in</span> <span class=\"variable\">$crt</span> -noout -dates;<span class=\"built_in\">echo</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br><br/></p>\n<p><strong>Step 7.Kuboard 来管理我们升级后的k8s集群</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除老旧版本</span></span><br><span class=\"line\">$ curl -k <span class=\"string\">'http://192.168.12.108:30567/kuboard-api/cluster/k8s-dev.weiyigeek/kind/KubernetesCluster/k8s-dev.weiyigeek/resource/installAgentToKubernetes?token=AflKbsicsKegFpNruDsxWspvTHHh2HnX'</span> &gt; kuboard-agent.yaml &amp;&amp; kubectl delete -f ./kuboard-agent.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署新版本</span></span><br><span class=\"line\">$ curl -k <span class=\"string\">'http://192.168.12.108:30567/kuboard-api/cluster/k8s-dev.weiyigeek/kind/KubernetesCluster/k8s-dev.weiyigeek/resource/installAgentToKubernetes?token=K2vCJXf9ANrFjnrFbduNBxXusK3DhvIH'</span> &gt; kuboard-agent.yaml &amp;&amp; kubectl apply -f ./kuboard-agent.yaml</span><br><span class=\"line\">$ kubectl get pods -n kuboard -l <span class=\"string\">\"k8s.kuboard.cn/name in (kuboard-agent, kuboard-agent-2)\"</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                               READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># kuboard-agent-2-5597754bdf-phks5   1/1     Running   0          3m59s</span></span><br><span class=\"line\">  <span class=\"comment\"># kuboard-agent-769876b499-cr7f7     1/1     Running   0          3m59s</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210722174852.png\" alt=\"WeiyiGeek.Kuboard加入管理升级后k8s集群\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Kuboard加入管理升级后k8s集群</p>\n            </figure>\n<hr>\n<h2 id=\"0x02-Kubernetes-单-Master-节点-跨版本-升级实践\"><a href=\"#0x02-Kubernetes-单-Master-节点-跨版本-升级实践\" class=\"headerlink\" title=\"0x02 Kubernetes 单 Master 节点(跨版本)升级实践\"></a>0x02 Kubernetes 单 Master 节点(跨版本)升级实践</h2><p>描述: 本章节主要实践跨版本的升级，实践从v1.19.13集群版本升级至1.20主版本中可用的v1.20.9集群版本（与子版本升级差异不大），此处还是基于并采用的dockershim运行时，在下一章中我们将会把Kubernetes 集群从 dockershim 迁移到 Containerd.io 运行时。</p>\n<p><strong>环境说明:</strong><br>升级前系统容器及其kubernetes集群相关版本:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Container</span></span><br><span class=\"line\">操作系统 : linux</span><br><span class=\"line\">体系架构 : amd64</span><br><span class=\"line\">操作系统镜像 : Ubuntu 20.04.2 LTS</span><br><span class=\"line\">操作系统内核 : 5.4.0-73-generic</span><br><span class=\"line\">容器引擎 : docker://19.3.15</span><br><span class=\"line\">容器运行时 : containerd.io 1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kubernetes</span></span><br><span class=\"line\">cri-socket : /var/run/dockershim.sock</span><br><span class=\"line\">kubelet : v1.19.13</span><br><span class=\"line\">kubeadm : v1.19.13</span><br><span class=\"line\">kubectl : v1.19.13</span><br><span class=\"line\">kube proxy : v1.19.13</span><br><span class=\"line\">etcdctl version: 3.4.13</span><br><span class=\"line\">etcdctl API version: 3.4</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/coredns : 1.7.0</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/pause : 3.2</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>2.1 第一步，同样是备份相关配置文件 (务必备份所有重要组件)。</strong></p>\n<ul>\n<li><p>备份kubernetes的etcd数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -vp /data/backup</span><br><span class=\"line\">$ docker run --rm                                    \\</span><br><span class=\"line\">-v /data/backup:/backup                              \\</span><br><span class=\"line\">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \\</span><br><span class=\"line\">--env ETCDCTL_API=3                                  \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0 \\</span><br><span class=\"line\">/bin/sh -c <span class=\"string\">\"etcdctl --endpoints=https://192.168.12.226:2379 \\</span></span><br><span class=\"line\"><span class=\"string\">--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \\</span></span><br><span class=\"line\"><span class=\"string\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \\</span></span><br><span class=\"line\"><span class=\"string\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \\</span></span><br><span class=\"line\"><span class=\"string\">snapshot save /backup/etcd-snapshot-1.19.13.db\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>备份当前Kubernetes集群创建配置以及相关文件(集群信息、etcd配置、证书文件等)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zcf kubernetes-cluster-1.19.13.tar.gz /etc/kubernetes/*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : 务必备份所有重要组件，例如存储在数据库中应用层面的状态。</p>\n<p><br></p>\n<p><strong>2.2 第二步，取消kubernetes相关软件包 held （使其可以升级）并升级到指定集群版本</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apt-mark showhold</span><br><span class=\"line\">  <span class=\"comment\"># kubeadm  kubectl kubelet</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apt-mark unhold kubeadm kubectl kubelet</span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubeadm.</span></span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubectl.</span></span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubelet.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新软件包索引以及锁定不进行更新，从 apt-get 1.1 版本起，你也可以使用下面的方法</span></span><br><span class=\"line\">$ apt update &amp;&amp; \\</span><br><span class=\"line\">apt-get install -y --allow-change-held-packages kubeadm=1.20.0-00 kubelet=1.20.0-00 kubectl=1.20.0-00  <span class=\"comment\"># 此处先下载1.20.x 第一个版本</span></span><br><span class=\"line\">$ apt-mark hold kubeadm kubectl kubelet</span><br><span class=\"line\"><span class=\"comment\"># 降级</span></span><br><span class=\"line\"><span class=\"comment\"># aptitude install kubeadm=1.20.0-00 kubelet=1.20.0-00 kubectl=1.20.0-00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证下载操作的版本是否正常</span></span><br><span class=\"line\">$ kubeadm version  <span class=\"comment\"># GitVersion:\"v1.20.0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 封锁并释放节点以便重新调度工作负载(如果是负载节点还需设置drain污点)</span></span><br><span class=\"line\">$ kubectl cordon master-01</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 注意此处为了成功迁移的兼容(可用性)我们先只下载<code>v1.20.x</code> 最初始 kubernetes 版本的各个组件版本(v1.20.x)</p>\n<p><br></p>\n<p><strong>2.3 第三步, 验证升级计划（跨版本升级）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此处跨版本升级的可用k8s集群是v1.20.9版本</span></span><br><span class=\"line\">$ kubeadm upgrade plan</span><br><span class=\"line\">  <span class=\"comment\"># Components that must be upgraded manually after you have upgraded the control plane with 'kubeadm upgrade apply':</span></span><br><span class=\"line\">  <span class=\"comment\"># COMPONENT   CURRENT       AVAILABLE   </span></span><br><span class=\"line\">  <span class=\"comment\"># kubelet     1 x v1.20.0   v1.20.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Upgrade to the latest stable version:</span></span><br><span class=\"line\">  <span class=\"comment\"># COMPONENT                 CURRENT    AVAILABLE</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver            v1.19.3    v1.20.9</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager   v1.19.3    v1.20.9</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler            v1.19.3    v1.20.9</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy                v1.19.3    v1.20.9</span></span><br><span class=\"line\">  <span class=\"comment\"># CoreDNS                   1.7.0      1.7.0</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd                      3.4.13-0   3.4.13-0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 由上可以看出可用的版本为 v1.20.9 我们进行下载安装该版本的k8s相关组件</span></span><br><span class=\"line\">$ apt-get install -y --allow-change-held-packages kubeadm=1.20.9-00 kubelet=1.20.9-00 kubectl=1.20.9-00</span><br><span class=\"line\">$ kubelet --version</span><br><span class=\"line\">  <span class=\"comment\"># Kubernetes v1.20.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取 v1.20.9 版本的各个k8s组件</span></span><br><span class=\"line\">version=v1.20.9</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(docker images -a | cut -d <span class=\"string\">' '</span> -f 1 | grep <span class=\"string\">\"google_containers/kube-\"</span>);<span class=\"keyword\">do</span></span><br><span class=\"line\">  docker pull <span class=\"variable\">$&#123;i&#125;</span>:<span class=\"variable\">$&#123;version&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.4 第四步，同样我们需要准备集群创建配置文件，并升级到v1.20.9版本</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导出旧集群配置文件</span></span><br><span class=\"line\">kubeadm config view &gt; kubeadm-config-v1.20.9.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将集群创建配置文件中 kubernetesVersion 对象 v1.19.13 改变为 v1.20.9</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s#1.19.13#1.20.9#g'</span> kubeadm-config-v1.20.9.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级到v1.20.9版本 (v1.19.3 ==&gt;&gt;&gt; v1.20.9)</span></span><br><span class=\"line\">kubeadm upgrade apply v1.20.9 --config kubeadm-config-v1.20.9.yaml</span><br><span class=\"line\">  <span class=\"comment\"># upgrade/successful] SUCCESS! Your cluster was upgraded to \"v1.20.9\". Enjoy!</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.5 第五步, 验证升级后的集群版本以及版本</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取消静止调度恢复集群正常状态</span></span><br><span class=\"line\">$ kubectl uncordon master-01</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">  <span class=\"comment\"># Kubernetes control plane is running at https://k8s-test.weiyigeek:6443</span></span><br><span class=\"line\">  <span class=\"comment\"># KubeDNS is running at https://k8s-test.weiyigeek:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get nodes -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME         STATUS   ROLES                  AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span></span><br><span class=\"line\">  <span class=\"comment\"># master-k8s   Ready    control-plane,master   93d   v1.20.9   192.168.12.111   &lt;none&gt;        Ubuntu 20.04.2 LTS   5.4.0-73-generic   docker://19.3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods -n kube-system</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                       READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-kube-controllers-69496d8b75-pgrfj   1/1     Running   0          93d</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-node-fn4lf                          1/1     Running   0          93d</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-54d67798b7-7gc7x                   1/1     Running   0          19m</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-54d67798b7-nbf7b                   1/1     Running   0          19m</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd-master-k8s                            1/1     Running   0          21m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver-master-k8s                  1/1     Running   0          20m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager-master-k8s         1/1     Running   0          20m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy-ssdw5                           1/1     Running   0          19m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler-master-k8s                  1/1     Running   0          20m</span></span><br><span class=\"line\">  <span class=\"comment\"># metrics-server-77b878fdb-scdzx             1/1     Running   0          93d</span></span><br></pre></td></tr></table></figure></p>\n<p>至此集群版本升级成功。</p>\n<hr>\n<h2 id=\"0x03-Kubernetes-集群从-Dockershim-迁移到-Containerd-io-运行时\"><a href=\"#0x03-Kubernetes-集群从-Dockershim-迁移到-Containerd-io-运行时\" class=\"headerlink\" title=\"0x03 Kubernetes 集群从 Dockershim 迁移到 Containerd.io 运行时\"></a>0x03 Kubernetes 集群从 Dockershim 迁移到 Containerd.io 运行时</h2><p>描述: 自从 Kubernetes 1.20 宣布 弃用 <code>dockershim</code>, 不推荐使用对 Docker 的支持，并将在未来版本中删除。建议从 dockershim 迁移到其他替代的 <code>Containerd.io</code> 容器运行时, 但是各种问题可能也随之而来，比如<code>对各类工作负载</code>和 Kubernetes 在生产环境部署会产生什么影响。</p>\n<p><code>Dockershim</code> : Docker 的容器运行时接口 (CRI) shim 已被弃用。</p>\n<p><strong>Q: 为什么弃用 dockershim?</strong><br>答: 维护 dockershim 已经成为 Kubernetes 维护者肩头一个沉重的负担, 创建 CRI 标准就是为了减轻这个负担，同时也可以增加不同容器运行时之间平滑的互操作性。此外与 dockershim 不兼容的一些特性，例如：控制组（cgoups）v2 和用户名字空间<code>（user namespace）</code>，已经在新的 CRI 运行时中被实现。</p>\n<p><br/></p>\n<p><strong>Q: 人们总在谈论 OCI，那是什么?</strong><br>答: OCI 代表开放容器标准， 它标准化了容器工具和底层实现（technologies）之间的大量接口。 他们维护了打包容器镜像（OCI image-spec）和运行容器（OCI runtime-spec）的标准规范。 他们还以 runc 的形式维护了一个 runtime-spec 的真实实现， 这也是 containerd 和 CRI-O 依赖的默认运行时。 CRI 建立在这些底层规范之上，为管理容器提供端到端的标准。</p>\n<p><br/></p>\n<h3 id=\"1-检查弃用-Dockershim-对当前环境的影响\"><a href=\"#1-检查弃用-Dockershim-对当前环境的影响\" class=\"headerlink\" title=\"(1) 检查弃用 Dockershim 对当前环境的影响\"></a>(1) 检查弃用 Dockershim 对当前环境的影响</h3><p>描述: 讲解你的集群把 Docker 用作容器运行时的运作机制，并提供使用 dockershim 时，它所扮演角色的详细信息， 继而展示了一组验证步骤，可用来检查弃用 dockershim 对你的工作负载的影响。</p>\n<p><strong>1.1 检查你的应用是否依赖于 Docker</strong><br>判定你是否依赖于 Docker 的方法:</p>\n<ul>\n<li>1.确认没有特权 Pod 执行 docker 命令。</li>\n<li>2.检查 Kubernetes 基础架构外部节点上的脚本和应用，确认它们没有执行 Docker 命令。</li>\n<li>3.检查执行了上述特权操作的第三方工具。</li>\n<li>4.确认没有对 dockershim 行为的间接依赖。比如基于特定指标发警报，或者在故障排查指令的一个环节中搜索特定的日志信息。</li>\n</ul>\n<p><br/></p>\n<p><strong>1.2 检查对比Docker依赖详解</strong><br>容器运行时是一个软件，用来运行组成 Kubernetes Pod 的容器, 在每一个节点上 kubelet 使用抽象的容器运行时接口，所以你可以任意选用兼容的容器运行时。</p>\n<ul>\n<li><p>在早期版本中 Kubernetes 提供的兼容性只支持一个容器运行时（Docker）, 后续为了兼容更多的容器运行时设计出了CRI， 而 kubelet 亦开始支持 CRI。因为 Docker 在 CRI 规范创建之前就已经存在，此时k8s创建一个适配器组件dockershim (允许 kubelet 与 Docker交互) 就好像 Docker 是一个 CRI 兼容的运行时一样。</p>\n</li>\n<li><p>在1.20版本及其之后建议采用containerd运行时,此时我们将可以省去<code>dockershim 和 docker</code>这个中间商,并且遗留的容器可由 Containerd 这类容器运行时来运行和管理，操作体验也和以前一样。但是你不能再使用 <code>docker ps</code> 或 <code>docker inspect</code> 命令来获取容器信息。由于你不能列出容器，因此你不能获取日志、停止容器，甚至不能通过<code>docker exec</code>在容器中执行命令。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210722171441.png\" alt=\"WeiyiGeek.DockerVSContainerd\" title=\"\" class=\"\">\n                <p>WeiyiGeek.DockerVSContainerd</p>\n            </figure>\n<p><br></p>\n<p><strong>1.3 识别依赖于 Docker 的 DaemonSet</strong><br>描述: 如果某 Pod 想调用运行在节点上的 dockerd，该 Pod 必须满足以下两个条件之一：</p>\n<ul>\n<li>将包含 Docker 守护进程特权套接字的文件系统挂载为一个卷</li>\n<li>直接以卷的形式挂载 Docker 守护进程特权套接字的特定路径。</li>\n</ul>\n<p>举例来说：在 COS 镜像中，Docker 通过 <code>/var/run/docker.sock</code> 开放其 Unix 域套接字。 这意味着 Pod 的规约中需要包含 hostPath 卷以挂载 /var/run/docker.sock。</p>\n<p>示例脚本: 用于查找包含直接映射 Docker 套接字的挂载点的 Pod。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pods --all-namespaces \\</span><br><span class=\"line\">-o=jsonpath=<span class=\"string\">'&#123;range .items[*]&#125;&#123;\"\\n\"&#125;&#123;.metadata.namespace&#125;&#123;\":\\t\"&#125;&#123;.metadata.name&#125;&#123;\":\\t\"&#125;&#123;range .spec.volumes[*]&#125;&#123;.hostPath.path&#125;&#123;\", \"&#125;&#123;end&#125;&#123;end&#125;'</span> \\</span><br><span class=\"line\">| sort</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 对于 Pod 来说，访问宿主机上的 Docker 还有其他方式。 例如可以挂载 <code>/var/run</code> 的父目录而非其完整路径 （就像这个例子）, 上述脚本只检测最常见的使用方式。</p>\n<p><br></p>\n<p><strong>1.4 弃用 Dockershim 的常见问题</strong></p>\n<p>Q: 在 Kubernetes 1.20 版本中，我还可以用 Docker 吗？ </p>\n<blockquote>\n<p>答: 当然可以, 在 1.20 版本中仅有的改变就是, 如果使用 Docker 运行时，启动 kubelet 的过程中将打印一条警告日志。</p>\n</blockquote>\n<p>Q: 我现有的 Docker 镜像还能正常工作吗?</p>\n<blockquote>\n<p>答: 当然可以, docker build 创建的镜像适用于任何 CRI 实现。所有你的现有镜像将和往常一样工作。</p>\n</blockquote>\n<p>Q: 如何拉取私有镜像呢?</p>\n<blockquote>\n<p>答: 当然可以, 所有 CRI 运行时均支持 Kubernetes 中相同的拉取 (pull) Secret 配置，不管是通过 PodSpec 还是通过 ServiceAccount 均可。</p>\n</blockquote>\n<p>Q: 在生产系统中使用其他运行时的例子?</p>\n<blockquote>\n<p>答: <code>containerd,CRI-O</code>两个容器运行时是云原生基金会<code>（[CNCF]）</code>下的项目。例如：OpenShift 4.x 从 2019 年 6 月以来，就一直在生产环境中使用 CRI-O 运行时。</p>\n</blockquote>\n<p>Q: 当切换 CRI 底层实现时，我应该注意什么?</p>\n<blockquote>\n<p>答: Docker 和大多数 CRI（包括 containerd）的底层容器化代码是相同的，但其周边部分却存在一些不同。</p>\n<ul>\n<li>日志配置</li>\n<li>运行时的资源限制</li>\n<li>直接访问 docker 命令或通过控制套接字调用 Docker 的节点供应脚本</li>\n<li>需要访问 docker 命令或控制套接字的 kubectl 插件</li>\n<li>需要直接访问 Docker 的 Kubernetes 工具, 例如：kube-imagepuller。</li>\n<li>像 registry-mirrors 和不安全的注册表这类功能的配置</li>\n<li>需要 Docker 保持可用、且运行在 Kubernetes 之外的，其他支持脚本或守护进程（例如：监视或安全代理）</li>\n<li>GPU 或特殊硬件，以及它们如何与你的运行时和 Kubernetes 集成</li>\n</ul>\n</blockquote>\n<p><br></p>\n<h3 id=\"2-迁移到-containerd-运行时并升级-kubernetes-集群\"><a href=\"#2-迁移到-containerd-运行时并升级-kubernetes-集群\" class=\"headerlink\" title=\"(2) 迁移到 containerd 运行时并升级 kubernetes 集群\"></a>(2) 迁移到 containerd 运行时并升级 kubernetes 集群</h3><p>描述: 本章实践从dokcershim容器时(<code>/var/run/dockershim.sock</code>)迁移到containerd运行时(<code></code>)，并<code>升级k8s集群v1.20.9到v1.21.3</code>版本。</p>\n<ul>\n<li>升级前系统容器及其kubernetes集群相关版本:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Container</span></span><br><span class=\"line\">操作系统 : linux</span><br><span class=\"line\">体系架构 : amd64</span><br><span class=\"line\">操作系统镜像 : Ubuntu 20.04.2 LTS</span><br><span class=\"line\">操作系统内核 : 5.4.0-73-generic</span><br><span class=\"line\">容器引擎 : docker://19.3.15</span><br><span class=\"line\">容器运行时 : containerd.io 1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Kubernetes</span></span><br><span class=\"line\">cri-socket : </span><br><span class=\"line\">kubelet : v1.20.9</span><br><span class=\"line\">kubeadm : v1.20.9</span><br><span class=\"line\">kubectl : v1.20.9</span><br><span class=\"line\">kube proxy : v1.20.9</span><br><span class=\"line\">etcdctl version: 3.4.13</span><br><span class=\"line\">etcdctl API version: 3.4</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/coredns : 1.7.0</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/pause : 3.2</span><br><span class=\"line\"><span class=\"comment\"># NAME        STATUS   ROLES                  AGE   VERSION   INTERNAL-IP      OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span></span><br><span class=\"line\"><span class=\"comment\"># master-k8s  Ready    control-plane,master   93d   v1.20.9   192.168.12.226   Ubuntu 20.04.2 LTS   5.4.0-73-generic   docker://19.3.15</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<p><strong>2.1 第一步，同样是备份相关配置文件 (务必备份所有重要组件)。</strong></p>\n<ul>\n<li><p>备份kubernetes的etcd数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -vp /data/backup</span><br><span class=\"line\">$ docker run --rm                                    \\</span><br><span class=\"line\">-v /data/backup:/backup                              \\</span><br><span class=\"line\">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \\</span><br><span class=\"line\">--env ETCDCTL_API=3                                  \\</span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0 \\</span><br><span class=\"line\">/bin/sh -c <span class=\"string\">\"etcdctl --endpoints=https://192.168.12.226:2379 \\</span></span><br><span class=\"line\"><span class=\"string\">--cacert=/etc/kubernetes/pki/etcd/ca.crt                  \\</span></span><br><span class=\"line\"><span class=\"string\">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key     \\</span></span><br><span class=\"line\"><span class=\"string\">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt    \\</span></span><br><span class=\"line\"><span class=\"string\">snapshot save /backup/etcd-snapshot-1.19.13.db\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>备份当前Kubernetes集群创建配置以及相关文件(集群信息、etcd配置、证书文件等)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zcf kubernetes-cluster-1.19.13.tar.gz /etc/kubernetes/*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : 务必备份所有重要组件，例如存储在数据库中应用层面的状态</p>\n<p><br></p>\n<p><strong>2.2 第二步，取消kubernetes相关软件包 held （使其可以升级）并升级到指定集群版本</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新软件包索引以及安装依赖的软件包</span></span><br><span class=\"line\">apt update &amp;&amp; \\</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">  apt-transport-https \\</span><br><span class=\"line\">  ca-certificates \\</span><br><span class=\"line\">  curl \\</span><br><span class=\"line\">  gnupg \\</span><br><span class=\"line\">  lsb-release</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 添加Docker的官方GPG密钥为后续containerd.io 更新做准备</span></span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 使用以下命令设置稳定存储库。要添加nightly或test存储库，请在下面的命令中的单词stable后面添加单词nightly或test（或两者）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> \\</span><br><span class=\"line\">  <span class=\"string\">\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"variable\">$(lsb_release -cs)</span> stable\"</span> | sudo tee /etc/apt/sources.list.d/container.list &gt; /dev/null</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看是否有禁止软件自动更新安装的设置。</span></span><br><span class=\"line\">$ apt-mark showhold</span><br><span class=\"line\">  <span class=\"comment\"># kubeadm  kubectl kubelet</span></span><br><span class=\"line\">$ apt-mark unhold kubeadm kubectl kubelet</span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubeadm.</span></span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubectl.</span></span><br><span class=\"line\">  <span class=\"comment\"># Canceled hold on kubelet.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 锁定不进行更新，从 apt-get 1.1 版本起，你也可以使用下面的方法</span></span><br><span class=\"line\"><span class=\"comment\"># Tips : 注意此处为了成功迁移的兼容(可用性验证)我们先只下载`v1.21.x` 最初始 kubernetes 版本的各个组件版本(v1.21.x)</span></span><br><span class=\"line\">$ apt clean all &amp;&amp; \\</span><br><span class=\"line\">apt update &amp;&amp; apt-get install -y --allow-change-held-packages kubeadm=1.21.0-00 kubelet=1.21.0-00 kubectl=1.21.0-00  <span class=\"comment\"># 此处先下载1.20.x 第一个版本</span></span><br><span class=\"line\">$ apt-mark hold kubeadm kubectl kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证可用的kubernetes版本以及组件的版本</span></span><br><span class=\"line\">kubeadm upgrade plan</span><br><span class=\"line\">  <span class=\"comment\">#   Components that must be upgraded manually after you have upgraded the control plane with 'kubeadm upgrade apply':</span></span><br><span class=\"line\">  <span class=\"comment\">#   COMPONENT   CURRENT       TARGET</span></span><br><span class=\"line\">  <span class=\"comment\">#   kubelet     1 x v1.21.0   v1.21.3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#   Upgrade to the latest stable version:</span></span><br><span class=\"line\">  <span class=\"comment\">#   COMPONENT                 CURRENT    TARGET</span></span><br><span class=\"line\">  <span class=\"comment\">#   kube-apiserver            v1.20.9    v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\">#   kube-controller-manager   v1.20.9    v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\">#   kube-scheduler            v1.20.9    v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\">#   kube-proxy                v1.20.9    v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\">#   CoreDNS                   1.7.0      v1.8.0     # 版本有变化需要重新拉取</span></span><br><span class=\"line\">  <span class=\"comment\">#   etcd                      3.4.13-0   3.4.13-0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载当前最新的版本组件(2021年7月23日 17:18:21)</span></span><br><span class=\"line\">apt update &amp;&amp; apt-get install -y --allow-change-held-packages kubeadm=1.21.3-00 kubelet=1.21.3-00 kubectl=1.21.3-00 </span><br><span class=\"line\"><span class=\"comment\"># 验证下载操作的版本是否正常</span></span><br><span class=\"line\">$ kubeadm version  <span class=\"comment\"># GitVersion:\"v1.21.3\"</span></span><br><span class=\"line\">$ kubelet --version  <span class=\"comment\"># Kubernetes v1.21.3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用 docker 拉取 CoreDNS:v1.8.0 镜像</span></span><br><span class=\"line\">docker pull coredns/coredns:1.8.0</span><br><span class=\"line\">docker tag coredns/coredns:1.8.0 registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tips : 使用cordon命令将标记 Master 节点主机为不可调度，等待迁移后再进行恢复；</span></span><br><span class=\"line\">kubectl cordon master-k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tips : 先采用dockershim更新到指定的 kubernetes 版本</span></span><br><span class=\"line\">kubeadm config view &gt; kubeadm-config-v1.21.3.yaml &amp;&amp; sed -i <span class=\"string\">\"s#v1.20.9#v1.21.3#g\"</span> kubeadm-config-v1.21.3.yaml</span><br><span class=\"line\">kubeadm upgrade apply v1.21.3 --config kubeadm-config-v1.21.3.yaml</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 当集群升级成功后我们进行验证集群状态，待当<code>kube-system</code>名称空间中各组件都正常后(<code>状态为Running</code>)，执行第三步。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME         STATUS   ROLES                  AGE   VERSION   INTERNAL-IP    OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span></span><br><span class=\"line\">  <span class=\"comment\"># master-k8s   Ready    control-plane,master   94d   v1.21.3   192.168.12.111 Ubuntu 20.04.2 LTS   5.4.0-73-generic   docker://19.3.15</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -n kube-system</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                       READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-kube-controllers-69496d8b75-pgrfj   1/1     Running   0          94d</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-node-fn4lf                          1/1     Running   0          94d</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6f6b8cc4f6-gmpx8                   1/1     Running   0          6m49s</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6f6b8cc4f6-j6lb4                   1/1     Running   0          6m49s</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd-master-k8s                            1/1     Running   0          133m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver-master-k8s                  1/1     Running   0          7m39s</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager-master-k8s         1/1     Running   0          7m19s</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy-6wrvs                           1/1     Running   0          6m44s</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler-master-k8s                  1/1     Running   0          7m4s</span></span><br><span class=\"line\">  <span class=\"comment\"># metrics-server-77b878fdb-scdzx             1/1     Running   0          93d</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.3 第三步, 更新安装containerd.io及其配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份 containerd 的 config.toml 配置文件</span></span><br><span class=\"line\">cp /etc/containerd/config.toml&#123;,.bak&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前版本以及可用的containerd版本</span></span><br><span class=\"line\">$ apt-cache madison containerd.io  <span class=\"comment\"># 或者采用 apt-cache policy containerd.io</span></span><br><span class=\"line\">  <span class=\"comment\"># containerd.io |    1.4.8-1 | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span></span><br><span class=\"line\">  <span class=\"comment\"># containerd.io |    1.4.6-1 | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span></span><br><span class=\"line\">  <span class=\"comment\"># containerd.io |    1.4.4-1 | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此处可以按照kubernetes与containerd.io对应兼容版本进行选择，下面我指定了1.4.8-1版本的 containerd.io。</span></span><br><span class=\"line\">$ apt install -y containerd.io=1.4.8-1  <span class=\"comment\"># 升级containerd为指定版本 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成与修改 containerd 配置</span></span><br><span class=\"line\">containerd config default &gt; /etc/containerd/config.toml</span><br><span class=\"line\">sed -i <span class=\"string\">\"s#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g\"</span>  /etc/containerd/config.toml</span><br><span class=\"line\">sed -i <span class=\"string\">'/containerd.runtimes.runc.options/a\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ SystemdCgroup = true'</span> /etc/containerd/config.toml</span><br><span class=\"line\">sed -i <span class=\"string\">\"s#https://registry-1.docker.io#https://xlx9erfu.mirror.aliyuncs.com#g\"</span>  /etc/containerd/config.toml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自动启动或启动 Containerd </span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> containerd &amp;&amp; systemctl restart containerd</span><br><span class=\"line\">systemctl status containerd</span><br><span class=\"line\">  <span class=\"comment\"># Jul 23 15:16:33 master-k8s systemd[1]: Started containerd container runtime.</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 23 15:16:33 master-k8s containerd[1099972]: time=\"2021-07-23T15:16:33.539416544+08:00\" level=info msg=\"Start event monitor\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 23 15:16:33 master-k8s containerd[1099972]: time=\"2021-07-23T15:16:33.539467558+08:00\" level=info msg=\"Start snapshots syncer\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 23 15:16:33 master-k8s containerd[1099972]: time=\"2021-07-23T15:16:33.539482024+08:00\" level=info msg=\"Start cni network conf syncer\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 23 15:16:33 master-k8s containerd[1099972]: time=\"2021-07-23T15:16:33.539490348+08:00\" level=info msg=\"Start streaming server\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成与修改 containerd 配置 crictl.yaml , 配置 crictl 工具</span></span><br><span class=\"line\">$ tee /etc/crictl.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">runtime-endpoint: <span class=\"string\">\"unix:///run/containerd/containerd.sock\"</span></span><br><span class=\"line\">image-endpoint: <span class=\"string\">\"unix:///run/containerd/containerd.sock\"</span></span><br><span class=\"line\">timeout: 0</span><br><span class=\"line\">debug: <span class=\"literal\">false</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用 crictl 验证 cri 插件是否可用：</span></span><br><span class=\"line\">crictl pull docker.io/library/nginx:alpine</span><br><span class=\"line\">ctr -n k8s.io images ls | grep <span class=\"string\">\"nginx\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.4 第四步, 验证v1.21.3集群所依赖的组件版本并利用containerd.io的ctr客户端命令行工具拉取新版本所需的镜像文件</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清空 ctr 中的所有镜像</span></span><br><span class=\"line\"><span class=\"comment\"># ctr -n k8s.io images remove $(ctr -n k8s.io images list -q)</span></span><br><span class=\"line\">$ kubeadm config images list --kubernetes-version=1.21.3 --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers -v 5</span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.21.3</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.4.1</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 手动需要单独下载的镜像</span></span><br><span class=\"line\">$ ctr -n k8s.io images pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class=\"line\">$ ctr -n k8s.io images pull docker.io/coredns/coredns:1.8.0</span><br><span class=\"line\">$ ctr -n k8s.io images tag docker.io/coredns/coredns:1.8.0 registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0   <span class=\"comment\"># 更改镜像TAG名称</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(kubeadm config images list --kubernetes-version=1.21.3 --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers -v 5);<span class=\"keyword\">do</span></span><br><span class=\"line\">  ctr -n k8s.io images pull <span class=\"variable\">$&#123;i&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看下载的镜像</span></span><br><span class=\"line\">$ ctr -n k8s.io images ls | grep <span class=\"string\">\"google_containers\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.5 第五步,更改当前kubernetes集群的运行时</strong><br>描述：编辑 <code>/var/lib/kubelet/kubeadm-flags.env</code>文件, 并将containerd运行时添加如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubeadm 集群启动参数配置</span></span><br><span class=\"line\">$ vim /var/lib/kubelet/kubeadm-flags.env</span><br><span class=\"line\">KUBELET_KUBEADM_ARGS=<span class=\"string\">\"--network-plugin=cni --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 --container-runtime=remote --container-runtime-endpoint=/run/containerd/containerd.sock\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载 systemd 并重启 kubelet 服务</span></span><br><span class=\"line\">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.6 第六步, 查看containerd与kubelet服务，并查看迁移为containerd后的集群状态</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 containerd.service kubelet.service 服务状态</span></span><br><span class=\"line\">$ systemctl status containerd.service kubelet.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 运行的容器在moby名称空间之中</span></span><br><span class=\"line\">ctr -n moby c ls</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER                                                           IMAGE    RUNTIME</span></span><br><span class=\"line\">  <span class=\"comment\"># 1cd434f886a25798f41fbb5986a64a33e98d70d51c08f5e1e368603dad6b6c35    -        io.containerd.runtime.v1.linux</span></span><br><span class=\"line\">  <span class=\"comment\"># 262633d2cabd7e53190d0bc57f03823d12798c84e5e76a934e42cbcaa6ea12d3    -        io.containerd.runtime.v1.linux</span></span><br><span class=\"line\">  <span class=\"comment\"># 3be8bd11443ffa7f2b4f76e50495b451179cdd637786a9c7623167906e086d7b    -        io.containerd.runtime.v1.linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启机器</span></span><br><span class=\"line\">$ reboot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 节点维护完后取消禁止调度，集群此时应该恢复为正常</span></span><br><span class=\"line\">$ kubectl uncordon master-k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 kubernetes 集群状态</span></span><br><span class=\"line\">$ kubectl get node -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME         STATUS   ROLES                  AGE   VERSION   INTERNAL-IP      OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span></span><br><span class=\"line\">  <span class=\"comment\"># master-k8s   Ready    control-plane,master   94d   v1.21.3   192.168.12.111   Ubuntu 20.04.2 LTS   5.4.0-80-generic   containerd://1.4.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 kube-system 名称空间中各个 Pods 状态</span></span><br><span class=\"line\">$ kubectl -n kube-system get pods</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                       READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-kube-controllers-69496d8b75-pgrfj   1/1     Running   1          94d</span></span><br><span class=\"line\">  <span class=\"comment\"># calico-node-fn4lf                          1/1     Running   24         94d</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6f6b8cc4f6-2l86r                   1/1     Running   1          50m</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6f6b8cc4f6-l6k4s                   1/1     Running   1          50m</span></span><br><span class=\"line\">  <span class=\"comment\"># etcd-master-k8s                            1/1     Running   22         47m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-apiserver-master-k8s                  1/1     Running   26         5h48m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-controller-manager-master-k8s         1/1     Running   26         5h48m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-proxy-6wrvs                           1/1     Running   1          5h47m</span></span><br><span class=\"line\">  <span class=\"comment\"># kube-scheduler-master-k8s                  1/1     Running   26         4h44m</span></span><br><span class=\"line\">  <span class=\"comment\"># metrics-server-77b878fdb-scdzx             1/1     Running   2          93d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时再观察moby名称空间的容器已发现没有任何运行的容器</span></span><br><span class=\"line\">ctr -n moby c ls</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER    IMAGE    RUNTIME</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以在k8s.io名称空间中查看运行的容器。</span></span><br><span class=\"line\">ctr -n k8s.io c ls</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER                                                           IMAGE                                                            RUNTIME                 </span></span><br><span class=\"line\">  <span class=\"comment\"># 05f0436d528550d46227da26a5ae7539439c4dea44d3840ef5ddfdba0f718d07    registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2    io.containerd.runc.v2 </span></span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.7 第七步，在kuboard将该kubernetes单节点加入到其中进行管理，并查看相应的信息</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kuboard k8s集群管理管理运行 agent 的 Pod 状态</span></span><br><span class=\"line\">kubectl -n kuboard get pods</span><br><span class=\"line\">  <span class=\"comment\"># NAME                               READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># kuboard-agent-2-576457f758-m2mts   1/1     Running   0          46s</span></span><br><span class=\"line\">  <span class=\"comment\"># kuboard-agent-dbd689678-dgn7q      1/1     Running   0          46s</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210723231734.png\" alt=\"WeiyiGeek.kuboard管理k8s集群\" title=\"\" class=\"\">\n                <p>WeiyiGeek.kuboard管理k8s集群</p>\n            </figure>\n<p>Tips : kubernetes 集群升级其实流程大致相同，不同点在于先升级一部分工作节点，然后在升级一台Master节点，等待正常后，再升级后续节点。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 将节点为可调度状态和非可调度状态</span></span><br><span class=\"line\">kubectl cordon master-01</span><br><span class=\"line\">kubectl uncordon master-01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 驱逐节点与恢复节点</span></span><br><span class=\"line\">kubectl drain master-01 --ignore-daemonsets --delete-local-data --force</span><br><span class=\"line\">kubectl undrain master-01</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-在迁移后创建并运行应用进一步验证集群是否正常\"><a href=\"#3-在迁移后创建并运行应用进一步验证集群是否正常\" class=\"headerlink\" title=\"(3) 在迁移后创建并运行应用进一步验证集群是否正常\"></a>(3) 在迁移后创建并运行应用进一步验证集群是否正常</h3><p><strong>3.1 第一步, 准备资源清单部署指定应用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee nginx-deployment.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: web-deploy</span><br><span class=\"line\">  namespace: weiyigeek</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 2</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: nginx-test</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: nginx-test</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: init-html</span><br><span class=\"line\">        image: busybox:latest</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        <span class=\"built_in\">command</span>: [<span class=\"string\">'sh'</span>, <span class=\"string\">'-c'</span>, <span class=\"string\">\"echo environment;env;echo NginxWeb-v<span class=\"variable\">$&#123;VERSION&#125;</span>-<span class=\"variable\">$&#123;HOSTNAME&#125;</span> &gt; /usr/share/nginx/html/index.html\"</span>]</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: <span class=\"string\">\"VERSION\"</span></span><br><span class=\"line\">          value: <span class=\"string\">\"1.23.1\"</span></span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: web</span><br><span class=\"line\">          mountPath: <span class=\"string\">\"/usr/share/nginx/html\"</span></span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: <span class=\"literal\">true</span></span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: nginx</span><br><span class=\"line\">        image: nginx:alpine</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - name: web</span><br><span class=\"line\">          mountPath: <span class=\"string\">\"/usr/share/nginx/html\"</span></span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: web</span><br><span class=\"line\">        emptyDir: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx-service</span><br><span class=\"line\">  namespace: weiyigeek</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: nginx-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: nginx</span><br><span class=\"line\">      port: 80</span><br><span class=\"line\">      targetPort: 80</span><br><span class=\"line\">      nodePort: 30000</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: nginx-test</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>3.2 第二步, 利用资源清单进行部署并查看验证</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 利用 kubectl apply 部署 deployment 控制器</span></span><br><span class=\"line\">kubectl create ns weiyigeek</span><br><span class=\"line\">kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/web-deploy created</span></span><br><span class=\"line\">  <span class=\"comment\"># service/nginx-service created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看状态的nginx的pod与svc</span></span><br><span class=\"line\">kubectl -n weiyigeek get pod,svc -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                          READY   STATUS    RESTARTS   AGE   IP             NODE      </span></span><br><span class=\"line\">  <span class=\"comment\"># web-deploy-5865b8d579-8l2r5   1/1     Running   0          20s   10.99.199.52   master-k8s</span></span><br><span class=\"line\">  <span class=\"comment\"># web-deploy-5865b8d579-hbvfm   1/1     Running   0          23s   10.99.199.51   master-k8s</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n weiyigeek get -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME            TYPE       CLUSTER-IP    PORT(S)        AGE     SELECTOR</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-service   NodePort   10.103.63.67  80:30000/TCP   3m27s   app=nginx-test</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210724111052.png\" alt=\"WeiyiGeek.nginx-deployment\" title=\"\" class=\"\">\n                <p>WeiyiGeek.nginx-deployment</p>\n            </figure>\n<p><br/></p>\n<p>至此 kubernetes 从 dockershim 运行时，迁移到 <code>containerd.io</code> 完毕。</p>\n<hr>\n<h2 id=\"0x04-入坑出坑\"><a href=\"#0x04-入坑出坑\" class=\"headerlink\" title=\"0x04 入坑出坑\"></a>0x04 入坑出坑</h2><h3 id=\"问题1-在迁移后发现CoreDNS-镜像下载失败\"><a href=\"#问题1-在迁移后发现CoreDNS-镜像下载失败\" class=\"headerlink\" title=\"问题1.在迁移后发现CoreDNS 镜像下载失败\"></a>问题1.在迁移后发现CoreDNS 镜像下载失败</h3><ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 镜像拉取时</span></span><br><span class=\"line\">ctr: failed to resolve reference <span class=\"string\">\"registry.cn-hangzhou.aliyuncs.com/google_containers/coredns/coredns:v1.8.0\"</span>: pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群升级时</span></span><br><span class=\"line\">.....</span><br><span class=\"line\">[preflight] Some fatal errors occurred:</span><br><span class=\"line\">        [ERROR ImagePull]: failed to pull image registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0: output: Error response from daemon: manifest <span class=\"keyword\">for</span> registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.0 not found: manifest unknown: manifest unknown</span><br><span class=\"line\">, error: <span class=\"built_in\">exit</span> status 1</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure></li>\n<li>解决办法:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 排除网络情况后执行如下命令拉取镜像并更改名称</span></span><br><span class=\"line\">$ ctr -n k8s.io images pull docker.io/coredns/coredns:1.8.0</span><br><span class=\"line\">$ ctr -n k8s.io images tag docker.io/coredns/coredns:1.8.0 registry.cn-hangzhou.aliyuncs.com/google_containers/coredns/coredns:v1.8.0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"问题2-迁移后集群中etcd-pod-报kubelet-Back-off-restarting-failed-container错误\"><a href=\"#问题2-迁移后集群中etcd-pod-报kubelet-Back-off-restarting-failed-container错误\" class=\"headerlink\" title=\"问题2.迁移后集群中etcd pod 报kubelet Back-off restarting failed container错误\"></a>问题2.迁移后集群中etcd pod 报<code>kubelet Back-off restarting failed container</code>错误</h3><ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kube-system describe pods etcd-master-k8s</span><br><span class=\"line\">  <span class=\"comment\"># Node-Selectors:    &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Tolerations:       :NoExecute op=Exists</span></span><br><span class=\"line\">  <span class=\"comment\"># Events:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Type     Reason   Age                     From     Message</span></span><br><span class=\"line\">  <span class=\"comment\">#   ----     ------   ----                    ----     -------</span></span><br><span class=\"line\">  <span class=\"comment\">#   Normal   Pulled   6m49s (x3 over 7m40s)   kubelet  Container image \"registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0\" already present on machine</span></span><br><span class=\"line\">  <span class=\"comment\">#   ......</span></span><br><span class=\"line\">  <span class=\"comment\">#   Warning  BackOff  2m32s (x39 over 7m40s)  kubelet  Back-off restarting failed container</span></span><br></pre></td></tr></table></figure></li>\n<li>问题原因: 由于 etcd 的 2380 端口被其它应用绑定占用。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kube-system logs etcd-master-k8s</span><br><span class=\"line\">  <span class=\"comment\"># 2021-07-23 14:16:06.715553 I | embed: peerTLS: cert = /etc/kubernetes/pki/etcd/peer.crt, key = /etc/kubernetes/pki/etcd/peer.key, trusted-ca = /etc/kubernetes/pki/etcd/ca.crt, client-cert-auth = true, crl-file =</span></span><br><span class=\"line\">  <span class=\"comment\"># 2021-07-23 14:16:06.715713 C | etcdmain: listen tcp 192.168.12.111:2380: bind: address already in use</span></span><br></pre></td></tr></table></figure></li>\n<li>问题解决:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ctr -n k8s.io i ls -q | grep <span class=\"string\">\"google_containers/etcd:3.4.13-0\"</span></span><br><span class=\"line\">  <span class=\"comment\"># registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ netstat -anpo | grep <span class=\"string\">\"2380\"</span></span><br><span class=\"line\">  <span class=\"comment\"># tcp        0      0 192.168.12.111:2380     0.0.0.0:*               LISTEN      1092928/etcd         off (0.00/0/0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> 1092928</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"问题3-查看-kubelet-service-服务中报Error-syncing-pod-skipping-quot-err-quot-failed-to-quot-StartContainer-quot-for-quot-kuboard-agent-quot-with-CrashLoopBackOff-quot-back-off-10s-restarting-failed错误。\"><a href=\"#问题3-查看-kubelet-service-服务中报Error-syncing-pod-skipping-quot-err-quot-failed-to-quot-StartContainer-quot-for-quot-kuboard-agent-quot-with-CrashLoopBackOff-quot-back-off-10s-restarting-failed错误。\" class=\"headerlink\" title=\"问题3.查看 kubelet.service 服务中报Error syncing pod, skipping&quot; err=&quot;failed to \\&quot;StartContainer\\&quot; for \\&quot;kuboard-agent\\&quot; with CrashLoopBackOff: \\&quot;back-off 10s restarting failed错误。\"></a>问题3.查看 kubelet.service 服务中报<code>Error syncing pod, skipping&quot; err=&quot;failed to \\&quot;StartContainer\\&quot; for \\&quot;kuboard-agent\\&quot; with CrashLoopBackOff: \\&quot;back-off 10s restarting failed</code>错误。</h3><ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status kubelet</span><br><span class=\"line\">  <span class=\"comment\"># ● kubelet.service - kubelet: The Kubernetes Node Agent</span></span><br><span class=\"line\">    <span class=\"comment\"># Loaded: loaded (/lib/systemd/system/kubelet.service; enabled; </span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Jul 24 11:57:16 weiyigeek-226 kubelet[941]: I0724 11:57:16.031316     941 scope.go:111] \"RemoveContainer\" containerID=\"a27e7e92baa85f9028f411b5cee0f8b479b3a1fa09ef672a3f15868bc18ef004\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 24 11:57:16 weiyigeek-226 kubelet[941]: E0724 11:57:16.031885     941 pod_workers.go:190] \"Error syncing pod, skipping\" err=\"failed to \\\"StartContainer\\\" for \\\"kuboard-agent\\\" with CrashLoopBackOff: \\\"back-off 10s restarting failed c&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Jul 24 11:57:19 weiyigeek-226 kubelet[941]: I0724 11:57:19.342054     941 scope.go:111] \"RemoveContainer\" containerID=\"a27e7e92baa85f9028f411b5cee0f8b479b3a1fa09ef672a3f15868bc18ef004\"</span></span><br></pre></td></tr></table></figure></li>\n<li>解决办法: kubernetes v1.21.3 版本针对于 <code>KUBELET_POD_INFRA_CONTAINER</code> 配置项配置如下<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 kubeadm-flags.env 文件进行修改</span></span><br><span class=\"line\">$ vim /var/lib/kubelet/kubeadm-flags.env</span><br><span class=\"line\">--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.4.1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"问题4-在安装有Podman的机器上升级kubernetes到1-20-9时出现containernetworking-plugins-conflicts-with-kubernetes-cni-错误\"><a href=\"#问题4-在安装有Podman的机器上升级kubernetes到1-20-9时出现containernetworking-plugins-conflicts-with-kubernetes-cni-错误\" class=\"headerlink\" title=\"问题4.在安装有Podman的机器上升级kubernetes到1.20.9时出现containernetworking-plugins conflicts with kubernetes-cni 错误\"></a>问题4.在安装有Podman的机器上升级kubernetes到1.20.9时出现<code>containernetworking-plugins conflicts with kubernetes-cni</code> 错误</h3><ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Selecting previously unselected package kubernetes-cni.</span><br><span class=\"line\">dpkg: regarding .../kubernetes-cni_0.8.7-00_amd64.deb containing kubernetes-cni:</span><br><span class=\"line\"> containernetworking-plugins conflicts with kubernetes-cni <span class=\"comment\"># 关键点</span></span><br><span class=\"line\">  kubernetes-cni (version 0.8.7-00~conflictfree) is to be installed.</span><br><span class=\"line\"></span><br><span class=\"line\">dpkg: error processing archive ./kubernetes-cni_0.8.7-00_amd64.deb (--install):</span><br><span class=\"line\"> conflicting packages - not installing kubernetes-cni</span><br><span class=\"line\">Errors were encountered <span class=\"keyword\">while</span> processing:</span><br><span class=\"line\"> ./kubernetes-cni_0.8.7-00_amd64.deb</span><br></pre></td></tr></table></figure></li>\n<li>问题原因：由于Podman的 containernetworking-plugins 与 kubernetes-cni 冲突导致，参考地址: <code>https://github.com/containers/podman/issues/5296</code></li>\n<li>解决版本:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># podman 服务停止</span></span><br><span class=\"line\">systemctl stop podman.socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dpkg 查找与删除</span></span><br><span class=\"line\">dpkg -l | grep <span class=\"string\">\"containernetworking-plugins\"</span></span><br><span class=\"line\">dpkg -r </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 依赖安装</span></span><br><span class=\"line\">apt -f install --fix-broken</span><br><span class=\"line\">apt autoremove</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"k8s","path":"api/tags/k8s.json"}]}