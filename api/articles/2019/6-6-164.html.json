{"title":"程序计划任务管理","slug":"系统运维/Linux/常用命令/系统管理类命令/程序计划任务管理","date":"2019-06-06T11:35:30.000Z","updated":"2023-01-31T02:29:09.176Z","url":"2019/6-6-164.html","path":"api/articles/2019/6-6-164.html.json","covers":["https://img.weiyigeek.top/2019/20190614091539.png","https://img.weiyigeek.top/2019/20190614113048.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h2><p>描述：Linux工作管理指的是在单个登录终端中（shell界面）同时管理多个工作行为；<br>在Linux系统中执行某些操作时候，有时需要将当前任务暂停调至后台，或有时须将后台暂停的任务重启开启并调至前台，这一序列的操作将会使用到 jobs、bg、和 fg 三个命令以及两个快捷键来完成。</p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>1.当前的登录终端，只能管理当前终端的工作，而不能管理其他登录终端的工作</li>\n<li>2.放入后台的命令必须可以持续运行一段时间，这样我们才能捕捉和操作这个工作</li>\n<li>3.放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行</li>\n<li>4.后台进程是终端绑定的，也就是说如果退出终端，这个进程就会消失.</li>\n</ul>\n<p>Linux后台运行：命令后面加上“ &amp;”（注意事项如下图）,在windows最小化就是放入后台执行<br>如：vi,top一般把运行持续时间长的命令放入后台执行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.</span></span><br><span class=\"line\">命令 &amp;   <span class=\"comment\">#把进程放入后台</span></span><br><span class=\"line\">tar -zcf etc.tar.gz /etc &amp;    <span class=\"comment\">#把命令放入后台，并在后台执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.任何需要与前端交互的进程/命令 放入后台执行都会自动被暂停（没有意义）:</span></span><br><span class=\"line\">top    <span class=\"comment\"># 按下crtl+z快捷键后，放在后台暂停</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>描述：程序计划任务是非常重要的不论是在Linux上还是在Windows上都是不可或缺的，它帮助了我们运维人员减少手动操作的工作量;计划任务:scheduled task<br>Linux下的任务调度分为两类：系统任务调度和用户任务调度。</p>\n<ul>\n<li>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。</li>\n<li>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。</li>\n</ul>\n<h2 id=\"0x01-后台执行\"><a href=\"#0x01-后台执行\" class=\"headerlink\" title=\"0x01 后台执行\"></a>0x01 后台执行</h2><h3 id=\"bg-命令\"><a href=\"#bg-命令\" class=\"headerlink\" title=\"bg 命令\"></a>bg 命令</h3><p>描述：用于将作业放到后台执行(backgroud)使前台可以执行其他任务,该命令的运行效果与在指令后面添加&amp;符号;的效果是相同的，都是将其放到系统后台执行.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bg</span> (参数) <span class=\"comment\">#作业标识：指定需要放到后台的作业标识号。</span></span><br><span class=\"line\"><span class=\"built_in\">bg</span> %工作号</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.使用bg命令将任务号为1的任务放到后台继续执行，输入如下命令：</span></span><br><span class=\"line\"><span class=\"comment\">#注意：实际上，使用bg命令与在指令后面添加符号\"&amp;\"的效果是一样的。例如，使用&amp;将find / -name password放到后台执行，输入如下命令：</span></span><br><span class=\"line\">find / -name password &amp;     <span class=\"comment\">#后台执行任务</span></span><br><span class=\"line\"><span class=\"variable\">$bg</span> 1  <span class=\"comment\">#后台执行任务号为1的任务如果系统中只有一个挂起的任务时，即使不为该命令设置参数\"1\"，也可以实现这个功能。</span></span><br><span class=\"line\">-bash: <span class=\"built_in\">bg</span>: 任务已经终止</span><br><span class=\"line\">[1]+  完成                  find / -name password</span><br></pre></td></tr></table></figure><br>注意：后台恢复执行的命令，是不能和前台有交互的，否则不能恢复到后台执行.</p>\n<p><br/></p>\n<h3 id=\"jobs-命令\"><a href=\"#jobs-命令\" class=\"headerlink\" title=\"jobs 命令\"></a>jobs 命令</h3><p>描述：用于显示Linux中的当前任务列表及任务状态包括后台运行的脚本或任务，可以显示任务号及其对应的进程号;<br>其中任务号是以普通用户的角度进行的，而进程号则是从系统管理员的角度来看的，一个任务可以对应于一个或者多个进程号；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基础参数和语法</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> [选项] [参数]   <span class=\"comment\"># 查看在后台运行的程序</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> [-l]    <span class=\"comment\"># 查看进程PID号</span></span><br><span class=\"line\"></span><br><span class=\"line\">-l：显示进程号；</span><br><span class=\"line\">-p：仅任务对应的显示进程号；</span><br><span class=\"line\">-n：显示任务状态的变化；</span><br><span class=\"line\">-r：仅输出运行状态（running）的任务；</span><br><span class=\"line\">-s：仅输出停止状态（stoped）的任务。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#jobs的状态有:</span></span><br><span class=\"line\">Stopped/Running/Done</span><br><span class=\"line\"></span><br><span class=\"line\">_注：_</span><br><span class=\"line\">“＋”号代表最近一个放入后台的工作，也是工作恢复时，默认恢复的工作；</span><br><span class=\"line\">“－”号代表倒数第二个放入后台的工作；</span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1. 使用jobs命令显示当前系统的任务列表，输入如下命令：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意：要得到以上输出信息，必须在执行jobs命令之前执行命令find / -name password &amp;。否则，执行jobs命令不会显示任何信息。</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span> -l               <span class=\"comment\">#显示当前系统的任务列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#上面的命令执行后，将显示出当前系统下的任务列表信息，具体如下所示：</span></span><br><span class=\"line\">[1] + 1903 运行中          find / -name password &amp;</span><br><span class=\"line\"><span class=\"comment\">#其中，输出信息的第一列表示任务编号，第二列表示任务所对应的进程号，第三列表示任务的运行状态，第四列表示启动任务的命令。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"fg-命令\"><a href=\"#fg-命令\" class=\"headerlink\" title=\"fg 命令\"></a>fg 命令</h3><p>描述：用于将后台作业（在后台运行的或者在后台挂起的作业）放到前台终端运行,与bg命令一样若后台任务中只有一个，则使用该命令时可以省略任务号;如果有多个任务可以fg加任务编号调用<code>fg 1 frontground</code>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fg</span> %工作号   <span class=\"comment\">#%工作号的%号可以省略，是工作号不是PID号 ( 作业标识：指定要放到前台的作业标识号 )</span></span><br></pre></td></tr></table></figure>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.使用fg命令将任务号为1的任务从后台执行转换到前台执行，输入如下命令</span></span><br><span class=\"line\"><span class=\"built_in\">fg</span> 1          <span class=\"comment\">#将任务转换到前台执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行上面的命令后，命令行窗口将显示如下信息</span></span><br><span class=\"line\">find / -name password       <span class=\"comment\">#前台执行命令</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"nohop-命令\"><a href=\"#nohop-命令\" class=\"headerlink\" title=\"nohop 命令\"></a>nohop 命令</h3><p>描述：把命令传入后台，后台进程是终端绑定的，<code>也就是说如果退出终端这个进程就会消失</code>，当logout时在kill -l将发送SIGHUP信号<br>并且可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端：</p>\n<ul>\n<li>无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件中。</li>\n<li>如果当前目录的 nohup.out 文件不可写，输出重定向到$HOME/nohup.out文件中。</li>\n<li>如果没有文件能创建或打开以用于追加，那么 command 参数指定的命令不可调用。</li>\n<li>如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</li>\n</ul>\n<p>脱离终端的三种办法：</p>\n<ul>\n<li>1.把需要后台执行的命令加入/etc/rc.local</li>\n<li>2.使用定时任务，让系统在指定时间执行</li>\n<li>3.使用nohup命令</li>\n</ul>\n<p>而对于mysqld进程，因为是守护进程所以不受terminal关闭而关闭,例如：deamon守护进程<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/usr/<span class=\"built_in\">local</span>/mysql/bin/mysqld --user=mysql &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#基础语法和参数</span></span><br><span class=\"line\">nohup (选项) (参数)</span><br><span class=\"line\">nonup [命令] &amp;</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.使用nohup命令提交作业，如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：</span></span><br><span class=\"line\">nohup <span class=\"built_in\">command</span> &gt; myout.file 2&gt;&amp;1 &amp;  <span class=\"comment\">#输出被重定向到myout.file文件中。</span></span><br><span class=\"line\">nohup /root/for.sh &amp;</span><br></pre></td></tr></table></figure></p>\n<hr/>\n\n<h2 id=\"0x02-计划任务\"><a href=\"#0x02-计划任务\" class=\"headerlink\" title=\"0x02 计划任务\"></a>0x02 计划任务</h2><h3 id=\"at-命令\"><a href=\"#at-命令\" class=\"headerlink\" title=\"at 命令\"></a>at 命令</h3><p>描述：用于在指定时间执行命令,允许使用一套相当复杂的指定时间的方法，它主要是在centos6以下才预装;(建议采用crontab方便可重复执行)</p>\n<ul>\n<li>在当天的hh:mm（小时:分钟）式的时间指定，假如该时间已过去，那么就放在第二天执行。</li>\n<li>使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的 词语来指定时间。</li>\n<li>采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。 </li>\n<li>指定命令执行的具体日期，指定格式为month day（月、日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。</li>\n</ul>\n<p><em>总结时间格式：</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HH:MM</span><br><span class=\"line\">HH:MM YYYY-MM-DD</span><br><span class=\"line\">HH:MM[am|pm][month][date]</span><br><span class=\"line\">HH:MM[am|pm]+[minutes|hours|days|weeks]   <span class=\"comment\"># + 什么时间之后</span></span><br></pre></td></tr></table></figure></p>\n<p><em>at的访问控制:</em></p>\n<ul>\n<li>有/etc/at.allow文件，那么只有写入/etc/at.allow（白名单）中的用户可以使用at命令（/etc/at.deny文件会被忽略）.</li>\n<li>没有/etc/at.allow文件，只有/etc/at.deny文件，那么写入/etc/at.deny文件（黑名单）中的用户不能使用它命令，</li>\n<li>不管有木有对root不起作用,如果系统中这两个文件都不存在，那么只有root用户可以使用at命令.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at [选项] 指定任务执行的日期时间</span><br><span class=\"line\">atq             <span class=\"comment\">#查询当前服务器上的at工作好</span></span><br><span class=\"line\">atrm［工作号］<span class=\"comment\">#删除指定的at任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数</span></span><br><span class=\"line\">-c 工作号：显示该at工作的实际内容</span><br><span class=\"line\">-f：指定包含具体指令的任务文件；</span><br><span class=\"line\">-q：指定新任务的队列名称；</span><br><span class=\"line\">-l：显示待执行任务的列表；</span><br><span class=\"line\">-d：删除指定的待执行任务；</span><br><span class=\"line\">-m：任务执行完成后向用户发送E-mail。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断安装与否</span></span><br><span class=\"line\">chkconfig --list | grep atd   <span class=\"comment\"># at服务是否安装</span></span><br><span class=\"line\">service atd restart   <span class=\"comment\"># at服务的启动</span></span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示工作实际内容</span></span><br><span class=\"line\">atq  <span class=\"comment\">#查询工作号 (计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务)</span></span><br><span class=\"line\">5       2013-01-06 17:20 a root</span><br><span class=\"line\">at -c 5 <span class=\"comment\">#显示工作内容（即脚本内容）</span></span><br><span class=\"line\">atrm 5 <span class=\"comment\">#删除at任务</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190614091539.png\" alt=\"WeiyiGeek.at-c示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.at-c示例</p>\n            </figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例2.添加计划任务（三天后的下午执行/bin/ls）</span></span><br><span class=\"line\"><span class=\"variable\">$at</span> 5pm+3 days</span><br><span class=\"line\">at&gt; /bin/ls</span><br><span class=\"line\">at&gt; &lt;EOT&gt;</span><br><span class=\"line\">job 7 at 2013-01-08 17:00</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.明天17点钟，输出时间到指定文件内：</span></span><br><span class=\"line\"><span class=\"variable\">$at</span> 17:20 tomorrow</span><br><span class=\"line\">at&gt; date &gt;/root/2013.log</span><br><span class=\"line\">at&gt; &lt;EOT&gt;</span><br><span class=\"line\">job 8 at 2013-01-06 17:20</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.两分钟后执行helo.sh脚本, 写完回车 出现下面的at提示符</span></span><br><span class=\"line\"><span class=\"variable\">$at</span> now + 2 minutes </span><br><span class=\"line\">at&gt; /root/helo.sh &gt;&gt; /root/helo.log</span><br><span class=\"line\"><span class=\"comment\">#ctrl+D 保存或&lt;EOT&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"crontab-命令\"><a href=\"#crontab-命令\" class=\"headerlink\" title=\"crontab 命令\"></a>crontab 命令</h3><p>描述:crontab是Linux中非常强大并且常用的<code>定时周期性任务执行</code>，它与windows下的计划任务类似，系统默认会安装此服务工具，并且会自动启动<code>crond进程</code>，该进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务则自动执行该任务。</p>\n<p>crond服务启动与停止:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start crond</span><br><span class=\"line\">systemctl stop crond</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看是否安装和启动</span></span><br><span class=\"line\">systemctl list-unit-files | grep <span class=\"string\">\"crond\"</span></span><br><span class=\"line\">crond.service     enabled</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重新载入配置</span></span><br><span class=\"line\">/sbin/service crond reload</span><br></pre></td></tr></table></figure></p>\n<p><em>与at命令使用限制一样：</em></p>\n<ul>\n<li>/etc/cron.deny 该文件中所列用户不允许使用crontab命令</li>\n<li>/etc/cron.allow 该文件中所列用户允许使用crontab命令</li>\n</ul>\n<p>基础语法和参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab [选项] [crontab文件]</span><br><span class=\"line\">-e：编辑该用户的计时器设置；</span><br><span class=\"line\">-l：列出该用户的计时器设置；</span><br><span class=\"line\">-r：删除该用户的计时器设置；</span><br><span class=\"line\">-u&lt;用户名称&gt;：指定要设定计时器的用户名称。</span><br></pre></td></tr></table></figure></p>\n<p>格式说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1) 注意版本不同:需要首先查看系统任务调度的配置文件 /etc/crontab</span></span><br><span class=\"line\">cat /etc/crontab</span><br><span class=\"line\"><span class=\"comment\">#前四行是用来配置crond任务运行的环境变量()</span></span><br><span class=\"line\">SHELL=/bin/bash</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=<span class=\"string\">\"root\"</span></span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed  #代表每1分执行</span></span><br><span class=\"line\">minute   hour   day   month   week  executeuser <span class=\"built_in\">command</span>     <span class=\"comment\">#顺序：分 时 日 月 周</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2)用户任务调度定义的crontab文件都被保存在/var/spool/cron目录中</span></span><br><span class=\"line\">/var/spool/cron/   <span class=\"comment\">#所有用户crontab文件存放的目录,以用户名命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#比如:</span></span><br><span class=\"line\">f1 f2 f3 f4 f5 program    <span class=\"comment\">#其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。</span></span><br><span class=\"line\"><span class=\"comment\">#在以上各个字段中，还可以使用以下特殊字符：</span></span><br><span class=\"line\">* 星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class=\"line\">* 逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</span><br><span class=\"line\">* 中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</span><br><span class=\"line\">* 正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用例如*/10，如果用在minute字段，表示每十分钟执行一次。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文字说明</span></span><br><span class=\"line\">当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</span><br><span class=\"line\">当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</span><br><span class=\"line\">当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</span><br><span class=\"line\">当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推</span><br></pre></td></tr></table></figure></p>\n<p>表达式示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.系统任务配置文件案例</span></span><br><span class=\"line\">*/1 * * * * <span class=\"built_in\">command</span>   <span class=\"comment\"># 每1分钟执行一次command</span></span><br><span class=\"line\">*/1 * * * * date +%H:%M:%S &gt; /tmp/test.log</span><br><span class=\"line\">* */1 * * * /etc/init.d/smb restart  <span class=\"comment\">#每一小时执行一次 </span></span><br><span class=\"line\">0 0 */10 * * ls   <span class=\"comment\">#每隔10天执行一次 ls  </span></span><br><span class=\"line\"></span><br><span class=\"line\">30 21 * * * /etc/init.d/smb restart  <span class=\"comment\"># 每晚的21:30重启smb </span></span><br><span class=\"line\">6 14 * * fri /disk/monitor.sh  <span class=\"comment\">#星期五的14点6分执行该脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.特殊字符使用</span></span><br><span class=\"line\">3,15 * * * * <span class=\"built_in\">command</span>      <span class=\"comment\">#每小时的第3和第15分钟执行</span></span><br><span class=\"line\">3,15 8-11 */2 * * <span class=\"built_in\">command</span>   <span class=\"comment\">#每隔两天的上午8点到11点的第3和第15分钟执行</span></span><br><span class=\"line\">3,15 8-11 * * 1 <span class=\"built_in\">command</span>     <span class=\"comment\">#每个星期一的上午8点到11点的第3和第15分钟执行</span></span><br><span class=\"line\">45 4 1,10,22 * * /etc/init.d/smb restart    <span class=\"comment\"># 每月1、10、22日的4 : 45重启smb </span></span><br><span class=\"line\">0 11 4 * mon-wed /etc/init.d/smb restart   <span class=\"comment\"># 每月的4号与每周一到周三的11点重启smb </span></span><br><span class=\"line\">0 4 1 jan * /etc/init.d/smb restart  <span class=\"comment\"># 一月一号的4点重启smb</span></span><br><span class=\"line\">31 10 */2 * * /usr/bin/backup <span class=\"comment\"># 每隔两天 1 、3、5、7....2n-1 的 10点31分进行执行backup备份</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.进阶的使用</span></span><br><span class=\"line\"><span class=\"comment\"># 在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</span></span><br><span class=\"line\">0 6-12/3 * 12 * /usr/bin/backup</span><br><span class=\"line\"><span class=\"comment\"># 周一到周五每天下午 5:00 寄一封信给 alex@domain.name</span></span><br><span class=\"line\">0 17 * * 1-5 mail -s <span class=\"string\">\"hi\"</span> alex@domain.name &lt; /tmp/maildata</span><br><span class=\"line\"><span class=\"comment\"># 每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分,相当于每隔两个小时执行 echo \"haha\"</span></span><br><span class=\"line\">20 0-23/2 * * * <span class=\"built_in\">echo</span> <span class=\"string\">\"haha\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>实际案例：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1) 下面命令是捆绑用户身份的是谁执行的命令就谁来管，如果忽略用户的任务则需要编辑/etc/crontab文件.</span></span><br><span class=\"line\">crontab -e   <span class=\"comment\">#进入crontab编辑界面会打开vim编辑你的工作.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.指定用户任务调度并查看(每分钟、每两秒进行执行)</span></span><br><span class=\"line\">crontab -u apache -e  </span><br><span class=\"line\">crontab -l</span><br><span class=\"line\">* * * * * /tmp/test.sh    <span class=\"comment\">#一定要采用脚本的方式，且不要忘记可执行权限;</span></span><br><span class=\"line\"><span class=\"comment\">### test.sh ##</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(date <span class=\"string\">\"+%y:%M:%S\"</span>) &gt;&gt;/tmp/test.log</span><br><span class=\"line\">sleep 2</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">## end ###</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.特殊文件夹</span></span><br><span class=\"line\">01 * * * * root run-parts /etc/cron.hourly  <span class=\"comment\"># 每小时执行/etc/cron.hourly目录内的脚本</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.注意：如果60不能整除间隔的秒数，则需要调整执行的时间。</span></span><br><span class=\"line\"><span class=\"comment\">#例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。</span></span><br><span class=\"line\"><span class=\"comment\">#则 crontab.sh step的值为7，循环结束条件i&lt;420</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\">step=7 <span class=\"comment\">#间隔的秒数，不能大于60 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (( i = 0; i &lt; 60; i=(i+step) )); <span class=\"keyword\">do</span></span><br><span class=\"line\">  $(php <span class=\"string\">'/home/fdipzone/php/crontab/tolog.php'</span>) </span><br><span class=\"line\">  sleep <span class=\"variable\">$step</span> </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"comment\">#crontab -e 可以输入以下语句来实现</span></span><br><span class=\"line\">*/7 * * * * /home/fdipzone/php/crontab/crontab.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.还能采用@+时间进行表示执行的时间</span></span><br><span class=\"line\">@daily/hourly/monthly/weekly/reboot/yearly</span><br><span class=\"line\"><span class=\"comment\">#表示每次系统启动后需要执行一次计划任务，具体任务为输出test字符</span></span><br><span class=\"line\">@reboot <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#表示每小时执行一次计划任务，具体任务 为输出test字符</span></span><br><span class=\"line\">@hourly <span class=\"built_in\">echo</span> <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190614113048.png\" alt=\"WeiyiGeek.示例2\" title=\"\" class=\"\">\n                <p>WeiyiGeek.示例2</p>\n            </figure>\n<p><strong>补充入坑</strong><br><em>问题1:crontab报错：errors in crontab file, can’t install</em><br>问题原因:采用Quartz生成或输入的crond表达式是错误的<br>问题解决:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据网站上的Cron表达式生成器生成的(巨坑)</span></span><br><span class=\"line\">0/0 0/4 * * * ? 脚本</span><br><span class=\"line\"><span class=\"comment\">#修改后的Cron表达式即可完美解决问题</span></span><br><span class=\"line\">* */4 * * * ? 脚本</span><br></pre></td></tr></table></figure></p>\n<p><em>问题2:crontab未按照定时任务报错 (mailed 58 bytes of output but got status 0x007f#012) 新手常遇到</em><br>问题描述:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#crond 日志查看</span></span><br><span class=\"line\">cat /var/<span class=\"built_in\">log</span>/cron</span><br><span class=\"line\">Jun  8 16:25:01 node2 CROND[67651]: (root) CMD (sh /tmp/WebMonitor.sh)</span><br><span class=\"line\">Jun  8 16:25:01 node2 CROND[67649]: (root) MAIL (mailed 58 bytes of output but got status 0x007f<span class=\"comment\">#012)  #错误信息</span></span><br></pre></td></tr></table></figure><br>问题原因:脚本中的由于环境变量的原因未执行phantomjs脚本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#排错0.服务信息查看</span></span><br><span class=\"line\"><span class=\"variable\">$systemctl</span> status crond</span><br><span class=\"line\">● crond.service - Command Scheduler</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since 一 2020-06-08 15:48:58 CST; 53min ago</span><br><span class=\"line\"> Main PID: 65217 (crond)</span><br><span class=\"line\">    Tasks: 1</span><br><span class=\"line\">   Memory: 672.0K</span><br><span class=\"line\">   CGroup: /system.slice/crond.service</span><br><span class=\"line\">           └─65217 /usr/sbin/crond -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#排查1.查询sendmail发信的错误信息</span></span><br><span class=\"line\">$ systemctl restart postfix</span><br><span class=\"line\">$ cat /var/spool/mail/root</span><br><span class=\"line\">From root@node2.localdomain  Mon Jun  8 16:37:18 2020</span><br><span class=\"line\">Return-Path: &lt;root@node2.localdomain&gt;</span><br><span class=\"line\">X-Original-To: root</span><br><span class=\"line\">Delivered-To: root@node2.localdomain</span><br><span class=\"line\">Received: by node2.localdomain (Postfix, from userid 0)</span><br><span class=\"line\">        id 3D29166DC22A; Mon,  8 Jun 2020 16:30:02 +0800 (CST)</span><br><span class=\"line\">[Error] Phantomjs NotFound,Please Install this!</span><br><span class=\"line\">您在 /var/spool/mail/root 中有邮件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#排查2.利用脚本重定向错误输出</span></span><br><span class=\"line\">$ crontab -e</span><br><span class=\"line\">*/1 * * * * sh /tmp/WebMonitor.sh &gt;xxx.log 2&gt;&amp;1 <span class=\"comment\">#默认路径是用户家/xxx.log</span></span><br></pre></td></tr></table></figure><br>问题解决:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 脚本中加上绝对路径</span></span><br><span class=\"line\"><span class=\"comment\"># phantomjs缩略图生成</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/src/phantomjs/bin/phantomjs -v &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"string\">\"$?\"</span> != <span class=\"string\">\"0\"</span> ]];<span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[31m[Error] Phantomjs NotFound,Please Install this! \\e[0m\"</span>;<span class=\"built_in\">exit</span> 0;<span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<p><em>问题3. crontab 异常不运行、不报错、无日志？</em><br>描述: debug 终极大法还是得看日志, 通过以下方式进行开启日志记录;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误信息排查</span></span><br><span class=\"line\">systemctl status cron.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Ubuntu 开启crontab 日志记录</span></span><br><span class=\"line\">$ vim /etc/rsyslog.d/50-default.conf</span><br><span class=\"line\">cron.*   /var/<span class=\"built_in\">log</span>/cron.log  <span class=\"comment\"># 取消注释即可</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>问题4.在 auth.log出现<code>Cron: pam_unix (cron:session): session opened/closed for user root by (uid=0)</code> 或者 <code>journalctl -u cron -f</code> 出现 <code>pam_unix(cron:session): session closed for user</code><br>问题原因: 当cron这样运行时它通常作为根用户运行，这样做会为该用户创建一个会话。由于大多数linice的默认设置被记录在auth.log中(<code>如果不是那么烦人的话这看起来是谨慎的</code>)。没有保持用户会话持久服务导致无法执行crontab任务<br>解决方案:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 在Debian/Ubuntu上</span></span><br><span class=\"line\">vim /etc/pam.d/common-session-noninteractive</span><br><span class=\"line\">session [success=1 default=ignore] pam_succeed_if.so service <span class=\"keyword\">in</span> cron quiet use_uid</span><br><span class=\"line\">session required pam_unix.so  <span class=\"comment\"># Above this line, add the upper 在此行之上添加上面的这一行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) Save the file and exit.Restart crond using something like service cron restart.</span></span><br><span class=\"line\">systemctl restart cron.service</span><br><span class=\"line\">  <span class=\"comment\"># ● cron.service - Regular background program processing daemon</span></span><br><span class=\"line\">  <span class=\"comment\">#     Loaded: loaded (/lib/systemd/system/cron.service; enabled; vendor preset: enabled)</span></span><br><span class=\"line\">  <span class=\"comment\">#     Active: active (running) since Fri 2021-02-26 15:23:25 CST; 6s ago</span></span><br><span class=\"line\">  <span class=\"comment\">#       Docs: man:cron(8)</span></span><br><span class=\"line\">  <span class=\"comment\">#   Main PID: 1266507 (cron)</span></span><br><span class=\"line\">  <span class=\"comment\">#     Tasks: 1 (limit: 19114)</span></span><br><span class=\"line\">  <span class=\"comment\">#     Memory: 428.0K</span></span><br><span class=\"line\">  <span class=\"comment\">#     CGroup: /system.slice/cron.service</span></span><br><span class=\"line\">  <span class=\"comment\">#             └─1266507 /usr/sbin/cron -f</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Feb 26 15:23:25 gitlab-weiyigeek systemd[1]: Started Regular background program processing daemon.</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 26 15:23:25 gitlab-weiyigeek cron[1266507]: (CRON) INFO (pidfile fd = 3)</span></span><br><span class=\"line\">  <span class=\"comment\"># Feb 26 15:23:25 gitlab-weiyigeek cron[1266507]: (CRON) INFO (Skipping @reboot jobs -- not system startup)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>问题5.cron服务日志报<code>No MTA installed, discarding output</code>错误。</em><br>描述: 老版的cron计划任务，日志输出到解决办法<code>/var/log/syslog</code><br>解决办法: 定时任务尾部增加重定向输出到log的参数，例：<code>&gt;/var/log/cron.log 2&gt;&amp;1</code></p>\n<p><br></p>\n<p><em>问题6.docker容中成功执行crontab任务。</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在宿主机里面以及容器里面安装crontab执行都不成功</span></span><br><span class=\"line\">1 3  * * * root  <span class=\"built_in\">cd</span> /data/wwwroot/xxx &amp;&amp; docker-compose <span class=\"built_in\">exec</span> app php think xxx &gt;&gt; /var/<span class=\"built_in\">log</span>/crontab_xxx.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.我们可以装上rsyslog 或者采用journalctl进行日志查看</span></span><br><span class=\"line\">tail -f /var/<span class=\"built_in\">log</span>/syslog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.修改 /etc/pam.d/cron 并重启cron，运行成功</span></span><br><span class=\"line\">注释掉 session required pam_loginuid.so</span><br><span class=\"line\"><span class=\"comment\"># dockerfile 构建时: </span></span><br><span class=\"line\">RUN sed -i <span class=\"string\">'/session    required   pam_loginuid.so/c\\#session    required   pam_loginuid.so'</span> /etc/pam.d/crond</span><br></pre></td></tr></table></figure></p>\n<p><strong>附录:在线Cron表达式生成器</strong></p>\n<ul>\n<li><a href=\"http://www.toolzl.com/tools/croncreate.html\" target=\"_blank\" rel=\"noopener\">http://www.toolzl.com/tools/croncreate.html</a></li>\n</ul>\n<p><br></p>\n<h3 id=\"anacron-命令\"><a href=\"#anacron-命令\" class=\"headerlink\" title=\"anacron 命令\"></a>anacron 命令</h3><p>描述：它只是cron的补充而非是完全替代cron,cron 是作为守护进程运行的，而anacron则作为普通进程运行并终止的。<br>anacron 维护了一组应当运行的任务，每个任务都一个相关的运行间隔，anacron 并不能指定何时运行某项任务，而是以天为单位或者是在启动后立刻进行 anacron 的动作，当系统启动之后anacrod将会去侦测停机期间应该进行但是并没有进行的 crontab 任务，并将该任务运行一遍后，然后 anacron 就会自动停止了</p>\n<p>因此 anacron 运行的时间通常有两个：</p>\n<ul>\n<li>一个是系统启动期间运行</li>\n<li>一个是写入 crontab 中的任务</li>\n</ul>\n<p>anacron配置（系统错峰运行定时任务），防止机器被意外关机，一旦开机恢复正常会检查关机期间有没有遗漏定时任务，如果遗漏就会重新再次执行遗漏部分</p>\n<ul>\n<li>执行cron的时间 系统把上次执行期间和当前时间比较，如两个差值超过anacron规定的时间差值</li>\n<li>证明有cron任务被漏执行 anacron自动执行漏执行任务     #保证系统关机期间错过的定时任务，在系统开机后再自动执行</li>\n</ul>\n<p><em>anacron检查周期</em>:</p>\n<ul>\n<li>anacron使用一天/一周/一月作为检测周期</li>\n<li>/var/spool/anacron/cron{hourly,daily,weekly,monthly}  该目录中文件用于记录上次</li>\n</ul>\n<p><em>以cron.daily工作来说明执行过程？</em><br>答：首先读取/var/spool/anacron/cron.daily中的上一次anacron执行的时间;</p>\n<ul>\n<li>和当前时间比较,如果两个时间的差值超过1天,就执行cron.daily工作</li>\n<li>执行工作的自能在3~22点,当然您可以进行更改;</li>\n<li>默认执行工作使强制延迟时间为5分钟,再随机延迟0-45分钟时间</li>\n<li>使用nice命令指定默认的优先级,再使用run-parts脚本执行cron.daily目录中所有的可执行文件</li>\n</ul>\n<p>配置文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法</span></span><br><span class=\"line\">run-parts [--list | --<span class=\"built_in\">test</span>] &lt;dir&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/cron.d/  <span class=\"comment\">#存放配置的文件</span></span><br><span class=\"line\">/etc/cron.daily</span><br><span class=\"line\">/etc/cron.hourly</span><br><span class=\"line\">/etc/cron.monthly</span><br><span class=\"line\">/etc/cron.weekly</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$vi</span> /etc/anacrontab   <span class=\"comment\"># 配置文件 Centos 7.0</span></span><br><span class=\"line\"><span class=\"comment\">#环境变量</span></span><br><span class=\"line\">SHELL=/bin/sh</span><br><span class=\"line\">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class=\"line\">MAILTO=root</span><br><span class=\"line\"><span class=\"comment\"># the maximal random delay added to the base delay of the jobs</span></span><br><span class=\"line\">RANDOM_DELAY=45  <span class=\"comment\">#最大时间延迟</span></span><br><span class=\"line\"><span class=\"comment\"># the jobs will be started during the following hours only</span></span><br><span class=\"line\">START_HOURS_RANGE=3-22  <span class=\"comment\">#anacron 的执行时间范围是3:00-2:00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#period in days   delay in minutes   job-identifier   command</span></span><br><span class=\"line\">1       5       cron.daily              nice run-parts /etc/cron.daily</span><br><span class=\"line\">7       25      cron.weekly             nice run-parts /etc/cron.weekly</span><br><span class=\"line\">@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly</span><br><span class=\"line\">1(天数)   5(Delay延迟 Minutes)  cron.daily(Jobs Name)  nice run-parts /etc/cron.daily(Command)</span><br></pre></td></tr></table></figure></p>\n<p>anacron和cron服务有什么区别 : </p>\n<ul>\n<li>系统差异: 在Centos6.x中会anacron调用，避免了重复执行,在Centos7.x中anacron不再是服务,而是命令.、</li>\n<li>cron 是用来控制循环执行的例行性工作的，可循环的时间为分钟、小时、每周、每月或每年等.</li>\n<li>anacron 是用于处理非 24 小时一直启动的 Linux 系统的 cron 服务的执行。（及特殊情况使计划任务中断或者未被执行的）<ul>\n<li>所以 anacron 并不能指定何时执行某项任务， 而是以天为单位或者是在开机后立刻进行 anacron 的动作，他会去侦测停机期间应该进行但是并没有进行的 cron服务，如果有就将该任务执行一遍，然后就自动停止。</li>\n</ul>\n</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>建议执行脚本放在目录中</li>\n</ul>\n<p><br></p>\n<h2 id=\"0x03-程序执行\"><a href=\"#0x03-程序执行\" class=\"headerlink\" title=\"0x03 程序执行\"></a>0x03 程序执行</h2><h3 id=\"setsid-命令-在新会话中运行程序。\"><a href=\"#setsid-命令-在新会话中运行程序。\" class=\"headerlink\" title=\"setsid 命令 - 在新会话中运行程序。\"></a>setsid 命令 - 在新会话中运行程序。</h3><p>描述: 默认我们从父进程继承了SessionID、进程组ID和打开的终端,如果我们新创建得子进程要脱离继承得终端则可以通过setsid命令来实现。</p>\n<p>Tips: 即setsid是帮助一个进程脱离从父进程继承而来的已打开的终端、隶属进程组和隶属的会话。</p>\n<p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\"> setsid [options] &lt;program&gt; [arguments ...]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"> -c, --ctty     将控制终端设置为当前控制终端</span><br><span class=\"line\"> -f, --fork     always fork</span><br><span class=\"line\"> -w, --<span class=\"built_in\">wait</span>     等待程序退出，并使用相同的返回</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在新的会话中运行程序及命令</span></span><br><span class=\"line\">~\\<span class=\"comment\"># setsid ping www.weiyigeek.top -c 32</span></span><br><span class=\"line\">~$ ps -ef | grep <span class=\"string\">\"www.weiyigeek.top\"</span></span><br><span class=\"line\">  root      168665       1  0 16:21 ? (关键点)   00:00:00 ping www.weiyigeek.top -c 32</span><br><span class=\"line\">  weiyi      168669  168584  0 16:21 pts/1       00:00:00 grep --color=auto www.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.在新的会话中指定运行用户程序及命令</span></span><br><span class=\"line\">~$ setsid sudo -u elk ping www.weiyigeek.top -c 32</span><br><span class=\"line\">~$ ps -ef | grep <span class=\"string\">\"www.weiyigeek.top\"</span></span><br><span class=\"line\">  <span class=\"comment\"># root      168748       1  0 16:24 ?        00:00:00 sudo -u elk ping www.weiyigeek.top -c 32</span></span><br><span class=\"line\">  <span class=\"comment\"># elk       168749  168748  0 16:24 ?        00:00:00 ping www.weiyigeek.top -c 32</span></span><br><span class=\"line\">  <span class=\"comment\"># weiyi      168755  168584  0 16:25 pts/1    00:00:00 grep --color=auto www.weiyigeek.top</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"计划任务命令","path":"api/tags/计划任务命令.json"}]}