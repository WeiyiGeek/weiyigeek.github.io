{"title":"JAVA入门学习十三","slug":"编程世界/Java/JAVA入门学习十三","date":"2019-11-02T02:34:30.000Z","updated":"2023-01-31T02:29:10.672Z","url":"2019/11-2-295.html","path":"api/articles/2019/11-2-295.html.json","covers":["https://img.weiyigeek.top/2019/1/20191103214812.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h4><h5 id=\"1-类加载概述\"><a href=\"#1-类加载概述\" class=\"headerlink\" title=\"1.类加载概述\"></a>1.类加载概述</h5><p>类加载概述:当程序要使用某个类时候,如果该类还未被加载到内存之中,则系统会通过<code>加载、连接、初始化</code>来实现对这个类进行初始化</p>\n<ul>\n<li>(1)加载:是指将class文件读入到内存，并为之创建一个Class对象,任何类被使用的时候系统都会创建一个Class对象</li>\n<li>(2)连接:<ul>\n<li>验证:是否有正确的内部结构并和其他类协调一致;</li>\n<li>准备:负责为类的静态成员分配内存，并设置默认初始值;</li>\n<li>解析:将类的二进制数据中的符号引用替换成为直接引用</li>\n</ul>\n</li>\n<li>(3)初始化:就是我们以前讲过的初始化步骤</li>\n</ul>\n<p>类加载时机流程:</p>\n<ol>\n<li>创建类的实例;</li>\n<li>访问类的静态变量或者为静态变量赋值;</li>\n<li>使用类的静态方法</li>\n<li>使用反射方式来强制创建某个类或者接口对应的java.lang.class对象;</li>\n<li>初始化某个类的子类</li>\n<li>直接使用java.exe命令来运行某个主类</li>\n</ol>\n<p><br></p>\n<h5 id=\"2-类加载器概述\"><a href=\"#2-类加载器概述\" class=\"headerlink\" title=\"2.类加载器概述\"></a>2.类加载器概述</h5><p>类加载器概述:负责将.class文件加载到内存中,并为之生成对应的class文件,虽然我们不需要关心类的加载机制,但是了解这个机制我们就能更好的理解程序的运行;<br>类加载器的分类:</p>\n<ul>\n<li>BootStrp ClassLoader 根类加载器</li>\n<li>Extension ClassLoader 扩展类加载器</li>\n<li>System Classloader 系统类加载器</li>\n</ul>\n<p>类的加载器的作用:</p>\n<ol>\n<li>Bootstrap ClassLoader 根类加载器: 也被称为引导类加载器，负责Java核心类的加载;比如System/String类等在JDK的JRE里lib目录下rt.jar文件中;</li>\n<li>Extension ClassLoader 扩展类加载器: 负责JRE的扩展目录中的jar包的加载，在JDK中JRE的lib目录下的ext目录;</li>\n<li>System ClassLoader 系统类加载器: 负责在JVM启动时候加载来自Java命令的class文件，以及classpath环境变量所指定的jar包和类路径;</li>\n</ol>\n<p><br></p>\n<h5 id=\"3-类的反射\"><a href=\"#3-类的反射\" class=\"headerlink\" title=\"3.类的反射\"></a>3.类的反射</h5><p>描述:Java反射机制是运行状态中对任意一个类，都能知道这个类的所有属性和方法;对于任意一个对象都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为JAVA语言的反射机制,要想剖析一个类就必须先要获取到该类的字节码文件对象,而解剖使用的就是Class类中的方法，所以要先获取每个字节码文件对应的class类型的对象;</p>\n<p>总结:反射Reflect一切都是赤裸裸的,包括<code>私有的成员变量</code>;</p>\n<p>Class类方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类的实例代表一个运行 类 java应用程序的类和接口。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">GenericDeclaration</span>, <span class=\"title\">Type</span>, <span class=\"title\">AnnotatedElement</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">//常见方法:</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">newInstance</span><span class=\"params\">()</span> <span class=\"comment\">//创建这个 类对象表示的类的一个新实例。  注意这是增对于构造无参参数；</span></span></span><br><span class=\"line\"><span class=\"function\">Constructor&lt;T&gt; <span class=\"title\">getConstructor</span><span class=\"params\">(类&lt;?&gt;... parameterTypes)</span>  <span class=\"comment\">//返回一个 Constructor对象反映指定的公共构造函数的 类对象表示的类。 构造有参函数 </span></span></span><br><span class=\"line\"><span class=\"function\">Constructor&lt;?&gt;[] <span class=\"title\">getConstructors</span><span class=\"params\">()</span>  <span class=\"comment\">//返回一个数组包含 Constructor物体反射所有的 类对象表示的类的公共构造函数。 </span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Field <span class=\"title\">getField</span><span class=\"params\">(String name)</span>  <span class=\"comment\">//返回一个 Field对象反映的类或接口的 类对象表示的指定公共成员。  </span></span></span><br><span class=\"line\"><span class=\"function\">Field[] <span class=\"title\">getFields</span><span class=\"params\">()</span>  <span class=\"comment\">//返回一个数组包含 Field物体反射的类或接口的 类对象代表所有可访问的公共领域。  </span></span></span><br><span class=\"line\"><span class=\"function\">Field[] <span class=\"title\">getDeclaredFields</span><span class=\"params\">()</span>  <span class=\"comment\">//返回 Field物体反射所有字段的类或接口的 类对象表示声明数组。 包括私有的成员变量 </span></span></span><br><span class=\"line\"><span class=\"function\">Method <span class=\"title\">getMethod</span><span class=\"params\">(String name, 类&lt;?&gt;... parameterTypes)</span>  <span class=\"comment\">//返回一个 方法对象反映的类或接口的 类对象表示的指定公共成员方法。  </span></span></span><br><span class=\"line\"><span class=\"function\">Method[] <span class=\"title\">getMethods</span><span class=\"params\">()</span> <span class=\"comment\">//返回一个数组包含 方法物体反射所有的类或接口的 类对象表示的公共方法，包括那些由类或接口的超类和超接口继承的声明。</span></span></span><br></pre></td></tr></table></figure><br><br></p>\n<p>补充类说明:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Constructor提供有关信息和访问，一类一个构造函数。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Constructor</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Executable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//常用方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">T</span> <span class=\"title\">newInstance</span>(<span class=\"title\">Object</span>... <span class=\"title\">initargs</span>)  //利用这 <span class=\"title\">Constructor</span>对象创建和初始化的构造函数的声明类的一个新实例构造函数，用指定的初始化参数。</span></span><br></pre></td></tr></table></figure><br><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个 Field提供有关信息和动态访问，一个类或接口的一个单一的领域。反射场可以是一个类（静态）字段或一个实例字段。 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Field</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">AccessibleObject</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Member</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">set</span>(<span class=\"title\">Object</span> <span class=\"title\">obj</span>, <span class=\"title\">Object</span> <span class=\"title\">value</span>) //设置域为代表的这 <span class=\"title\">Field</span>对象指定对象上的参数指定的新价值。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">void</span> <span class=\"title\">setAccessible</span>(<span class=\"title\">boolean</span> <span class=\"title\">flag</span>) <span class=\"title\">throws</span> <span class=\"title\">SecurityException</span> //该对象到指定的布尔值设置 <span class=\"title\">accessible</span>旗。一个价值 <span class=\"title\">true</span>表明反射的对象应当压制<span class=\"title\">java</span>语言访问检查时可以将私有成员变量变成共有；</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个方法提供有关信息和访问，在类或接口的一个方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Method</span> <span class=\"keyword\">extends</span> <span class=\"title\">Executable</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">String</span> <span class=\"title\">getName</span>() //返回的方法对象表示的方法的名称，作为一个 <span class=\"title\">String</span>。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Object</span> <span class=\"title\">invoke</span>(<span class=\"title\">Object</span> <span class=\"title\">obj</span>, <span class=\"title\">Object</span>... <span class=\"title\">args</span>)  //调用底层的方法，这 方法对象表示，对指定对象的指定参数。 执行指定字节码中的方法</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>三种方式:</p>\n<ul>\n<li>(1)Class类中静态方法forName读取配置文件</li>\n<li>(2)静态属性class中锁对象</li>\n<li>(3)Object 类的getClass()发布方法判断两个对象是否是同一个字解码文件</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20191103214812.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 榨汁机Juicer示例：采用反射Class.forName()配置文件读取</span></span><br><span class=\"line\"><span class=\"comment\"> * Fruit 水果接口</span></span><br><span class=\"line\"><span class=\"comment\"> * Apple 、 Orange 、 Banana</span></span><br><span class=\"line\"><span class=\"comment\"> * squeeze 榨汁</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_ReflectForName</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Juicer j = <span class=\"keyword\">new</span> Juicer(); <span class=\"comment\">//相当于购买榨汁机</span></span><br><span class=\"line\">    <span class=\"comment\">//采用反射进行配置文件读取config.properties</span></span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"config.properties\"</span>)); <span class=\"comment\">//配置文件中读取class对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//苹果 /橘子 (非常值得学习)</span></span><br><span class=\"line\">    String line;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      Class clazz2 = Class.forName(line);   <span class=\"comment\">//读取一行 =&gt; 包.类名 要使用其他的时候直接更改名称即可</span></span><br><span class=\"line\">      Fruit o= (Fruit) clazz2.newInstance(); <span class=\"comment\">//向上转型 父类引用指向子类对象(创建一个新的对象)，水果的引用指向评估 j.run(f);</span></span><br><span class=\"line\">      j.run(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//水果接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squeeze</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//苹果汁</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squeeze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"这是一杯 苹果 汁\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//橘子汁</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Orange</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squeeze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"这是一杯 橘子 汁\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//香蕉汁</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">squeeze</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"这是一杯 香蕉 汁\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//榨汁机类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Juicer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(Fruit a)</span></span>&#123;</span><br><span class=\"line\">    a.squeeze();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>config.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.weiyigeek.reflect.Orange</span><br><span class=\"line\">com.weiyigeek.reflect.Apple</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>基础示例:</em></p>\n<ul>\n<li>1.创建对象的三种方式</li>\n<li>2.利用字节码中无参构造和有参构造创建对象<ul>\n<li>2.1 class 类的newInstance()方法是使用该类无参的构造函数创建对象</li>\n<li>2.2 调用Class类中的getConstructor(String.class,int.class)方法获取一个指定的构造函数然后再调用Constructor类的newInstance先有参函数创建对象</li>\n</ul>\n</li>\n<li>3.通过反射获取成员变量并使用分为<code>共有public和私有private</code></li>\n<li>4.通过反射获取成员方法并使用分为 <code>无参方法 和 有参方法</code></li>\n<li>5.通过反射越过泛型的监测,泛型特性:<code>只在编译期间有效，在运行期会被擦除掉;</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Reflect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.获取Class文件对象的三种红方式</span></span><br><span class=\"line\">    Class clazz1 = Class.forName(<span class=\"string\">\"com.weiyi.Collection.Students\"</span>); <span class=\"comment\">//方式1 获取一个类的字节码文件</span></span><br><span class=\"line\">    Class clazz2 = Students.class; <span class=\"comment\">//方式2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Students clazz = <span class=\"keyword\">new</span> Students();</span><br><span class=\"line\">    Class clazz3 = clazz.getClass(); <span class=\"comment\">//方式3</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//判断获取的三种方式的class对象是否相同(都是想相同的只不过处于三种不同的阶段)</span></span><br><span class=\"line\">    System.out.println(clazz1 == clazz2);  <span class=\"comment\">//true</span></span><br><span class=\"line\">    System.out.println(clazz3 == clazz2);  <span class=\"comment\">//true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.反射获取带参数的构造方法并使用</span></span><br><span class=\"line\">    <span class=\"comment\">//Class clazz4 = Class.forName(\"com.weiyigeek.Collection.Students\"); //[Error]重复加载反射类会报错</span></span><br><span class=\"line\">    Constructor&lt;Students&gt; cs = clazz1.getConstructor(String.class,<span class=\"keyword\">int</span>.class); <span class=\"comment\">//获取有参构造</span></span><br><span class=\"line\">    Students s = (Students) cs.newInstance(<span class=\"string\">\"有参构造\"</span>,<span class=\"number\">1024</span>);  <span class=\"comment\">//重点。利用有参构造创建对象</span></span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//3.通过反射获取成员变量并使用</span></span><br><span class=\"line\">    <span class=\"comment\">//公共成员变量的时候</span></span><br><span class=\"line\">    <span class=\"comment\">//Field demo = clazz1.getField(\"name\");</span></span><br><span class=\"line\">    <span class=\"comment\">//demo.set(s, \"王三\");</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//私有成员变量的时候</span></span><br><span class=\"line\">    Field f = clazz1.getDeclaredField(<span class=\"string\">\"name\"</span>); <span class=\"comment\">//暴力获取字段name</span></span><br><span class=\"line\">    f.setAccessible(<span class=\"keyword\">true</span>); <span class=\"comment\">//去除私有属性</span></span><br><span class=\"line\">    f.set(s, <span class=\"string\">\"Field\"</span>);</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//4.通过反射获取方法</span></span><br><span class=\"line\">    Method m = clazz1.getMethod(<span class=\"string\">\"reflectDemo\"</span>); <span class=\"comment\">//获取类中的方法</span></span><br><span class=\"line\">    m.invoke(s); <span class=\"comment\">//执行无参方法reflectDemo</span></span><br><span class=\"line\">    Method m1 = clazz1.getMethod(<span class=\"string\">\"reflectDemo\"</span>, <span class=\"keyword\">int</span>.class); <span class=\"comment\">//获取有参数方式</span></span><br><span class=\"line\">    m1.invoke(s, <span class=\"number\">1024</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//5.通过反射越过泛型检测</span></span><br><span class=\"line\">    <span class=\"comment\">//ArrayList &lt;Integer&gt;的一个对象，在这个集合中添加一个字符串数据如何实现的呢?</span></span><br><span class=\"line\">    ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    list.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//注意这里由于泛型的特性不能加入字符串 \"abc\"</span></span><br><span class=\"line\">    <span class=\"comment\">//list.add(\"abc\")</span></span><br><span class=\"line\">    <span class=\"comment\">//但是我们可以通过反射Reflect特性来添加</span></span><br><span class=\"line\">    Class clazz6 = Class.forName(<span class=\"string\">\"java.util.ArrayList\"</span>); <span class=\"comment\">//获取ArrayList字节码对象</span></span><br><span class=\"line\">    Method m2 = clazz6.getMethod(<span class=\"string\">\"add\"</span>,Object.class); <span class=\"comment\">//获取add方法</span></span><br><span class=\"line\">    m2.invoke(list, <span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"反射绕过泛型: \"</span> + list);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">Students [name=有参构造, age=<span class=\"number\">1024</span>]</span><br><span class=\"line\">Students [name=Field, age=<span class=\"number\">1024</span>]</span><br><span class=\"line\">反射获取的无参方法!</span><br><span class=\"line\">反射获取的有参方法，a = <span class=\"number\">1024</span></span><br><span class=\"line\">反射绕过泛型: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, abc]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>综合实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试反射类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_ReflectTool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//1.通过反射写一个通用类来进行修改某个属性值(实际把前面所学做一个总结)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo3_ReflectTool</span><span class=\"params\">()</span> </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperty</span><span class=\"params\">(Object obj, String propertyName, Object value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Class clazz = obj.getClass(); <span class=\"comment\">//获取字节码对象</span></span><br><span class=\"line\">    Field f = clazz.getDeclaredField(propertyName); <span class=\"comment\">//或者对象中私有成员变量</span></span><br><span class=\"line\">    f.setAccessible(<span class=\"keyword\">true</span>);   <span class=\"comment\">//去除私有成员变量权限</span></span><br><span class=\"line\">    f.set(obj, value); <span class=\"comment\">//设置改成员变量得值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Welcome to China\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_UseReflect</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.实例1Reflect通用属性</span></span><br><span class=\"line\">    Students stu = <span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>,<span class=\"number\">1024</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"修改前:\"</span> + stu);</span><br><span class=\"line\"></span><br><span class=\"line\">    Demo3_ReflectTool tool = <span class=\"keyword\">new</span> Demo3_ReflectTool();</span><br><span class=\"line\">    tool.setProperty(stu,<span class=\"string\">\"name\"</span>,<span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"修改后:\"</span> + stu);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2.反射练习</span></span><br><span class=\"line\">    <span class=\"comment\">//写一个Properties格式得配置文件，配置类得完整名称;</span></span><br><span class=\"line\">    <span class=\"comment\">//写一个程序读该配置文件获得类得完整名称并几种这个类，用反射得方法运行run</span></span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"config.properties\"</span>));  <span class=\"comment\">//创建输入流</span></span><br><span class=\"line\">    Class clazz = Class.forName(br.readLine()); <span class=\"comment\">//读取配置文件中类名获取字节码对象</span></span><br><span class=\"line\">    Demo3_ReflectTool dr = (Demo3_ReflectTool) clazz.newInstance(); <span class=\"comment\">//通过字节码创建该对象 (需要强转)</span></span><br><span class=\"line\">    dr.run(); <span class=\"comment\">//即可调用Demo3_UseReflect类中得方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改前:Students [name=张三, age=<span class=\"number\">1024</span>]</span><br><span class=\"line\">修改后:Students [name=王五, age=<span class=\"number\">1024</span>]</span><br><span class=\"line\">Welcome to China</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>补充知识:</strong></p>\n<ul>\n<li>框架相当是一个房子，反射就相当于对房子不断的修改装修;</li>\n</ul>\n<p><br></p>\n<h5 id=\"4-动态代理\"><a href=\"#4-动态代理\" class=\"headerlink\" title=\"4.动态代理\"></a>4.动态代理</h5><p><em>动态代理概述:</em></p>\n<ul>\n<li>代理:<code>本类应该自己做得事情,请了别人来做，被请的人就是代理对象</code>;</li>\n<li>举例:春节回家买票让人代买，强最新版本的Iphone手机</li>\n<li>动态代理:在程序运行过程中产生的这个对象，而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以<code>动态代理其实就是通过反射来生成的一个代理</code>;</li>\n</ul>\n<p>在Java中<code>java.lang.reflect</code>包下提供了一个Proxy类和一个InvocationHandler接口,通过实用这个类和接口就可以生成的动态代理对象.<br>JDK提供的代理只能针对于接口做代理,我们有更强大的代理cglib，Proxy类中的方法创建动态代理类对象;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意：反射的包</span></span><br><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.lang.reflect.Proxy </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类申明</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//类方法</span></span><br><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h); //InvocationHandler 接口 返回指定的接口，将方法调用指定的调用处理程序的代理类的一个实例。 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最终会调用InvocationHandker的方法 重写该方法即可;</span></span><br><span class=\"line\"><span class=\"comment\">//进行代理，执行某方法</span></span><br><span class=\"line\"><span class=\"function\">InvocationHandler Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span></span><br></pre></td></tr></table></figure>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  Demo5_User 接口类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Demo5_User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Demo5_UserImp 实现接口</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_UserImp</span> <span class=\"keyword\">implements</span> <span class=\"title\">Demo5_User</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"- 1.登录操作\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"- 2.运行操作\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Demo5_MyInvocationHandler 动态调度处理器</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//动态代理类</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo5_MyInvocationHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"权限校验\"</span>); <span class=\"comment\">//关键点:</span></span><br><span class=\"line\">    method.invoke(target, args); <span class=\"comment\">//执行被代理的target的对象方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"日志记录\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Demo5_Test.java #动态代理的测试</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo5_UserImp ui = <span class=\"keyword\">new</span> Demo5_UserImp();</span><br><span class=\"line\">    <span class=\"comment\">//我创建的动态代理类</span></span><br><span class=\"line\">    Demo5_MyInvocationHandler dm = <span class=\"keyword\">new</span> Demo5_MyInvocationHandler(ui); <span class=\"comment\">//传入对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//首先拿到字节码文件 -&gt; 类加载器 ，再拿到该对象的接口</span></span><br><span class=\"line\">    Demo5_User du = (Demo5_User)Proxy.newProxyInstance(ui.getClass().getClassLoader(), ui.getClass().getInterfaces(), dm);</span><br><span class=\"line\">    du.login(); <span class=\"comment\">//运行类中方法，并加入了动态代理中添加的方法;</span></span><br><span class=\"line\">    du.run();  <span class=\"comment\">//运行字节码对象中得方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#就可以对任意得类中方法进行动态代理，添加功能等等</span></span><br><span class=\"line\">权限校验</span><br><span class=\"line\">- 1.登录操作</span><br><span class=\"line\">日志记录</span><br><span class=\"line\">权限校验</span><br><span class=\"line\">- 2.运行操作</span><br><span class=\"line\">日志记录</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"模板设计模式\"><a href=\"#模板设计模式\" class=\"headerlink\" title=\"模板设计模式\"></a>模板设计模式</h4><p>模板template设计模式概述:模板方法模式就是一个定义一个算法得骨架,将具体得算法延迟到子类中来实现;</p>\n<ul>\n<li>优点：使用模板方式模式，再定义算法骨架得同时，可以很灵活得实现具体得算法,满足用户灵活多变得需求：</li>\n<li>缺点: 如果算法骨架有修改得画，则需要修改抽象类;</li>\n</ul>\n<p>类设计模式总结：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.装饰设计:装饰接口实现的类再次进行封装;</span><br><span class=\"line\">2.单例:单例类是一个类只有一个实例;</span><br><span class=\"line\">3.简单工厂模式:</span><br><span class=\"line\">4.工厂方法</span><br><span class=\"line\">5.适配器</span><br><span class=\"line\">6.模板</span><br></pre></td></tr></table></figure></p>\n<p>模板设计案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//模板方法设计模式:</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6_Template</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Temp tmp = <span class=\"keyword\">new</span> Temp();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"花费时间为: \"</span> + tmp.getRunTime());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立一个抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetRunTime</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//拥有抽象方法(abstract)本身必须是抽象类,为了防止类方法被重新加上一个final进行修饰,子类可以直接调用父类方法;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> <span class=\"title\">getRunTime</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    code();</span><br><span class=\"line\">    <span class=\"keyword\">long</span> end = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> end - start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个类并继承该抽象类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Temp</span> <span class=\"keyword\">extends</span> <span class=\"title\">GetRunTime</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)</span><br><span class=\"line\">      System.out.println(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9999</span><br><span class=\"line\">花费时间为: 102</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h4><p>描述：枚举是指将变量得值一一列举出来，变量得值只限于列举处理得值得范围内；<br>例如: 与C语言中枚举是一样，一个变量只能是再枚举范围内得值，比如一周只有7天，一年只有12个月等等;</p>\n<p>与单例设计模式，那么多例类就是一个类有多个实例，但是部署无限个数得实例。而是有限个数得实例，这才能是枚举类。</p>\n<p>关键技术:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.自动拆装箱</span><br><span class=\"line\">2.泛型</span><br><span class=\"line\">3.可变参数</span><br><span class=\"line\">4.静态导入</span><br><span class=\"line\">5.增强<span class=\"keyword\">for</span>循环</span><br><span class=\"line\">6.互斥锁</span><br><span class=\"line\">7.枚举</span><br></pre></td></tr></table></figure></p>\n<p>枚举类常见方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包:</span></span><br><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.lang.Enum&lt;E&gt; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类:</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">E</span>&gt;&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//常规方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">ordinal</span>() //返回此枚举常量的顺序（位置在枚举声明，在初始常数是零分序号）。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">compareTo</span>(<span class=\"title\">E</span> <span class=\"title\">o</span>) //这个枚举与指定对象按顺序比较。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">int</span> <span class=\"title\">hashCode</span>() //返回此枚举常量的哈希代码。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">String</span> <span class=\"title\">name</span>()    //返回此枚举常量的名称，如宣布在其枚举声明。枚举项</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">String</span> <span class=\"title\">toString</span>() //返回此枚举常量的名称，包含在声明。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> &lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enum</span>&lt;<span class=\"title\">T</span>&gt;&gt;<span class=\"title\">T</span> <span class=\"title\">valueOf</span>(<span class=\"title\">class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">enumType</span>, <span class=\"title\">String</span> <span class=\"title\">name</span>)  //通过字节码码对象获取枚举项</span>;</span><br><span class=\"line\">Values() <span class=\"comment\">//在JDK文档中查询不到,但是每个枚举类都具有该方法,它遍历枚举类的所有枚举值非常方便，一般是重写tostring；</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项:</em></p>\n<ul>\n<li>定义枚举类要用关键字enum</li>\n<li>所有的枚举类都是Enum的子类</li>\n<li>枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他东西就不能省略 “;”</li>\n<li>枚举类有构造器但必须是private其实默认修饰符也是它</li>\n<li>枚举类也可以有抽象的方法(默认都是抽象类)，但是枚举项必须重写该方法</li>\n<li>枚举在Switch语句中的使用</li>\n</ul>\n<p><br></p>\n<p><strong>实例1:自己实现枚举</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//（1）自定义枚举Enumerate 类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_Week</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//方法1：无参</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Mon = <span class=\"keyword\">new</span> Demo7_Week();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Tue = <span class=\"keyword\">new</span> Demo7_Week();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Wen = <span class=\"keyword\">new</span> Demo7_Week();</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Demo7_Week</span><span class=\"params\">()</span> </span>&#123;&#125;;  <span class=\"comment\">//私有构造不让其他类创建本类对象</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方法2：有参</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Thu = <span class=\"keyword\">new</span> Demo7_Week(<span class=\"string\">\"星期四\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Fri= <span class=\"keyword\">new</span> Demo7_Week(<span class=\"string\">\"星期五\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week Sat= <span class=\"keyword\">new</span> Demo7_Week(<span class=\"string\">\"星期六\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String week;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Demo7_Week</span><span class=\"params\">(String w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.week = w;  <span class=\"comment\">//私有构造不让其他类创建本类对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWeek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> week;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//（2）自定义枚举Enumerate类</span></span><br><span class=\"line\"><span class=\"comment\">//方法3: 枚举得第三种形式比较难</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"comment\">//由于是抽象类所以采用内部匿名类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_Week1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//父类引用指向子类对象 （创建该类得子类对象）</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Demo7_Week1 Sun = <span class=\"keyword\">new</span> Demo7_Week1(<span class=\"string\">\"星期天\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"星期天\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;\t</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String week;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo7_Week1</span><span class=\"params\">(String w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.week = w;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//我们说过抽象方法必须在抽象类中</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Demo7_Enumerate.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_Enumerate</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.枚举得使用</span></span><br><span class=\"line\">    Demo7_Week mon = Demo7_Week.Mon;</span><br><span class=\"line\">    Demo7_Week tue = Demo7_Week.Tue;</span><br><span class=\"line\">    Demo7_Week wed = Demo7_Week.Wen;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1:\"</span>);</span><br><span class=\"line\">    System.out.println(mon);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2.枚举有参</span></span><br><span class=\"line\">    Demo7_Week Thu = Demo7_Week.Thu;</span><br><span class=\"line\">    Demo7_Week Fri = Demo7_Week.Fri;</span><br><span class=\"line\">    Demo7_Week Sat = Demo7_Week.Sat;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2：\"</span>);</span><br><span class=\"line\">    System.out.println(Thu.getWeek());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.枚举得内部匿名类</span></span><br><span class=\"line\">    Demo7_Week1 sun = Demo7_Week1.Sun; <span class=\"comment\">//编译看左边，运行看右边</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式3:\"</span>);</span><br><span class=\"line\">    sun.show();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式<span class=\"number\">1</span>:</span><br><span class=\"line\">com.weiyigeek.reflect.Demo7_Week@<span class=\"number\">15</span>db9742</span><br><span class=\"line\"></span><br><span class=\"line\">方式<span class=\"number\">2</span>：</span><br><span class=\"line\">星期四</span><br><span class=\"line\"></span><br><span class=\"line\">方式<span class=\"number\">3</span>:</span><br><span class=\"line\">星期天</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>实例2:利用enum实现枚举类</strong></p>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Week1.java</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个枚举类</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"comment\">//枚举类本身就有私有构造得方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Week1 &#123;</span><br><span class=\"line\">  Mon,Tue,Wed(<span class=\"string\">\"星期三\"</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//方式1</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week1</span><span class=\"params\">()</span> </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">//方式2</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String w;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week1</span><span class=\"params\">(String w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getWeek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Week2.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Week2 &#123;</span><br><span class=\"line\">  MON(<span class=\"string\">\"星期一\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"星期一\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,TUE(<span class=\"string\">\"星期二\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"星期二\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String w;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Week2</span><span class=\"params\">(String w)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getWeek</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//EnumDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.常规枚举</span></span><br><span class=\"line\">    Week1 w = Week1.Mon;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法1:\"</span>);</span><br><span class=\"line\">    System.out.println(w);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2.有参数枚举</span></span><br><span class=\"line\">    Week1 w1 = Week1.Wed;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法2:\"</span>);</span><br><span class=\"line\">    System.out.println(w1.getWeek());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3：抽象的枚举类</span></span><br><span class=\"line\">    Week2 w2 = Week2.MON;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法3:\"</span>);</span><br><span class=\"line\">    w2.show();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例4.与switch进行联用</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法4:\"</span>);</span><br><span class=\"line\">    Week2 w3 = Week2.MON;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (w3) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MON:</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"星期 1 \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> TUE:</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"星期 2 \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>运行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法1:</span><br><span class=\"line\">Mon</span><br><span class=\"line\">方法2:</span><br><span class=\"line\">星期三</span><br><span class=\"line\">方法3:</span><br><span class=\"line\">星期一</span><br><span class=\"line\">方法4:</span><br><span class=\"line\">星期 1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>实例3:enum常见方法</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnumWeek</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Enum 常用方法演示</span></span><br><span class=\"line\">    Week2 mon = Week2.MON;</span><br><span class=\"line\">    Week2 tue = Week2.TUE;</span><br><span class=\"line\">    Week2 wed = Week2.WED;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"枚举项都是有编号的：\"</span> + mon.ordinal() + <span class=\"string\">\", \"</span> + tue.ordinal());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"比较枚举项的序号顺序：\"</span> + mon.compareTo(tue));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"枚举项HasCode：\"</span> + wed.hashCode());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"枚举项名称:  \"</span> + wed.name());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"枚举项内容: \"</span> + wed.toString());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"通过字节码码对象获取枚举项 : \"</span>);</span><br><span class=\"line\">    Week2 mon1 = Week2.valueOf(Week2.class, <span class=\"string\">\"MON\"</span>);</span><br><span class=\"line\">    System.out.println(mon1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//补充说明:Value() JDK文档中没有但是非常好用</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Value() JDK文档中没有但是非常好用：\"</span>);</span><br><span class=\"line\">    Week2[] w2 = Week2.values();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Week2 wk : w2) &#123;</span><br><span class=\"line\">      System.out.println(wk); <span class=\"comment\">//这是toString的功劳</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">枚举项都是有编号的：<span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">比较枚举项的序号顺序：-<span class=\"number\">1</span></span><br><span class=\"line\">枚举项HasCode：<span class=\"number\">366712642</span></span><br><span class=\"line\">枚举项名称:  WED</span><br><span class=\"line\">枚举项内容: 星期三</span><br><span class=\"line\">通过字节码码对象获取枚举项 : 星期一</span><br><span class=\"line\">星期一</span><br><span class=\"line\">星期二</span><br><span class=\"line\">星期三</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"JDK1-7新特性\"><a href=\"#JDK1-7新特性\" class=\"headerlink\" title=\"JDK1.7新特性\"></a>JDK1.7新特性</h4><ol>\n<li>二进制字面量 (0b110) = 6</li>\n<li>数字字面量可以出现下划线</li>\n<li>Switch 语句可以用字符串</li>\n<li>泛型简化菱型泛型</li>\n<li>异常多个catch合并每个异常用 或(|) 拼接</li>\n<li>try-witch-resource 语句该版本标准的异常处理代码;</li>\n</ol>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo8_JDK7Speciality</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"二进制字面量:\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"number\">0b1111</span> + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"number\">0b11_11</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"数值字面量:\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"number\">1000_1111</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\">二进制字面量:<span class=\"number\">15</span>  <span class=\"number\">15</span></span><br><span class=\"line\">数值字面量:<span class=\"number\">10001111</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"JDK1-8新特性\"><a href=\"#JDK1-8新特性\" class=\"headerlink\" title=\"JDK1.8新特性\"></a>JDK1.8新特性</h4><ol>\n<li>接口中可以定义有方法体的方法，如果是非静态必须采用default修饰，如果是静态的就可不用了;</li>\n<li>局部内部类方他所在的方法中的局部变量必须用final修饰为什么?<ul>\n<li>因为当调用这个方法时候局部变量如果没有final修饰，他的生命周期和方法的生命周期是一致的，当方法弹栈这个局部变量也会消失，那么如果局部内部类对象还没马上消失想用这个局部变量就没有了。</li>\n<li>如果采用final修饰会在类加载的时候进行常量池，即使方法弹栈常量池还是存在也可以继续使用;</li>\n</ul>\n</li>\n</ol>\n<p><br></p>\n<p><strong>基础实例:</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.reflect;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo9_JDK8Speciality</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//JDK 8 新特性</span></span><br><span class=\"line\">    Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">    d.print();</span><br><span class=\"line\"></span><br><span class=\"line\">    Inter.method();  <span class=\"comment\">//静态方法直接调用</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    d.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//非静态的一般方法必须采用Default方法进行修饰，否则报错;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//静态方法可以直接采用接口名称调用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Static Method\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//局部内部类，采用局部变量时在1.7以前必须添加上final修饰，但是在1.8以后就不用了;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1024</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">num</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"flag = \"</span> + flag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Inner i = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">    i.num();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">Static Method</span><br><span class=\"line\">flag = 1024</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}