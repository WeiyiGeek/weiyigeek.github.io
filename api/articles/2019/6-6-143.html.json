{"title":"编码加密核验类命令","slug":"系统运维/Linux/常用命令/二进制程序类命令/编码加密核验类命令","date":"2019-06-06T12:35:30.000Z","updated":"2023-01-31T02:29:09.175Z","url":"2019/6-6-143.html","path":"api/articles/2019/6-6-143.html.json","covers":["https://img.weiyigeek.top/2019/20190606091301.png","https://img.weiyigeek.top/2019/20190627224953.png","https://img.weiyigeek.top/2019/20190627225410.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><h4 id=\"0x01-加密编码\"><a href=\"#0x01-加密编码\" class=\"headerlink\" title=\"0x01 加密编码\"></a>0x01 加密编码</h4><h5 id=\"base64-命令\"><a href=\"#base64-命令\" class=\"headerlink\" title=\"base64 命令\"></a>base64 命令</h5><p>描述：使用 Base64 编码/解码文件或标准输入输出,数据以 RFC 3548 规定的 Base64 字母格式进行编码。 解码时输入数据(加密流)可能包含一些非有效 Base64 字符的新行字符。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用法：</span></span><br><span class=\"line\">base64 [选项]... [文件]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Options：</span></span><br><span class=\"line\">-d, --decode          <span class=\"comment\">#解码数据</span></span><br><span class=\"line\">-i, --ignore-garbag   <span class=\"comment\">#解码时忽略非字母字符</span></span><br><span class=\"line\">-w, --wrap=字符数     <span class=\"comment\">#在指定的字符数后自动换行, 0 为禁用自动换行(`默认为76字符`)</span></span><br><span class=\"line\">--ignore-garbage      <span class=\"comment\">#选项来恢复加密流中任何非 base64 字符。</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有指定文件，或者文件为\"-\"，则从标准输入读取。</span></span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.加密和解密</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>|base64    <span class=\"comment\">#加密</span></span><br><span class=\"line\">dGVzdAo=</span><br><span class=\"line\"><span class=\"built_in\">echo</span> dGVzdAo= |base64 -d    <span class=\"comment\">#解密 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.批量解密base64：加密也一样</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(cat 1.txt)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | base64 -d 1&gt;&gt;de.txt 2&gt;/dev/null</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\"</span> &gt;&gt;de.txt</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例3.不换行显示转换后的数据</span></span><br><span class=\"line\">cat 20200524113201-index.html.log|base64 -w 0</span><br><span class=\"line\"><span class=\"comment\"># MTJhMTMKPiB2YXIgbWcj0iY3F6ayI7DQo2MDVjNjA2CjwgPC9zY3JpcHQ+DQotLS0KPiA8L3NjcmlwdD4KXCBObyBuZXdsaW5lI0IGVuZCBvZiBmaWxlCg==</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190606091301.png\" alt=\"WeiyiGeek.批量解密base64\" title=\"\" class=\"\">\n                <p>WeiyiGeek.批量解密base64</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"md5sum-命令\"><a href=\"#md5sum-命令\" class=\"headerlink\" title=\"md5sum 命令\"></a>md5sum 命令</h5><p>描述：可以用于对文件进行校验和得到文件的MD5值;<br>参数语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5sum [选项] [文件]  <span class=\"comment\">#可以接受多个文件或通配符</span></span><br><span class=\"line\">-c <span class=\"comment\">#核验数据完整性</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.获取一个目录中的所有文件md5值</span></span><br><span class=\"line\"><span class=\"variable\">$md5sum</span> *</span><br><span class=\"line\">ee38a408f20702ccc05fb39a04ee251c  RPM-GPG-KEY-weiyigeek</span><br><span class=\"line\">1139929d8855ced585631c0e3fe8ad8d  aaa.jpg</span><br><span class=\"line\">1139929d8855ced585631c0e3fe8ad8d  compare_varnish.jpg</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.接受多个文件或通配符</span></span><br><span class=\"line\">md5sum file1 file2 file3</span><br><span class=\"line\">[checksum1]   file1</span><br><span class=\"line\">[checksum2]   file2</span><br><span class=\"line\">[checksum3]   file3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.-c选项可以用生成的md5文件核实数据的完整性，如：</span></span><br><span class=\"line\">$ md5sum a.txt &gt; a.md5</span><br><span class=\"line\">$ md5sum –c a.md5</span><br><span class=\"line\">a.txt: OK</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"uuidgen\"><a href=\"#uuidgen\" class=\"headerlink\" title=\"uuidgen\"></a>uuidgen</h5><p>描述：uuid码全称是通用唯一识别码(universally uniqie Identifier,UUID),而uuidgen命令则是linux中生成和获取uuid的工具，HP和RedHat上可以使用uuidgen来生成,solaris上命令makeuuid </p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.Linux生成uuid随机数(可以作为随机密码)</span></span><br><span class=\"line\"><span class=\"variable\">$uuidgen</span></span><br><span class=\"line\">07d07031-eb0f-4691-8606-befb46645433</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.获取网卡的uuid信息</span></span><br><span class=\"line\"><span class=\"variable\">$uuidgen</span> eth1</span><br><span class=\"line\">07d07031-eb0f-4691-8606-befb46645433</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"sha1sum-命令\"><a href=\"#sha1sum-命令\" class=\"headerlink\" title=\"sha1sum 命令\"></a>sha1sum 命令</h5><p>描述：进行文件的sha1值校验以及文件的完整性核验,除了这个sha1sum还有其他的核验方式只是校验长度不同sha256sum ,sha384sum, ha512sum;<br>SHA1与md5类似是另一种常用的校验和算法,它从给定的输入文件中生成一个长度为40个字符的十六进制</p>\n<p>语法案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sha1sum [选项|文件]</span><br><span class=\"line\">-c <span class=\"comment\">#校验完整性</span></span><br><span class=\"line\">-b <span class=\"comment\">#以二进制模式读取文件</span></span><br><span class=\"line\">--ignore-missing <span class=\"comment\">#don't fail or report status for missing files</span></span><br><span class=\"line\">--quiet <span class=\"comment\">#don't print OK for each successfully verified file</span></span><br><span class=\"line\">--status <span class=\"comment\">#don't output anything, status code shows success</span></span><br><span class=\"line\">--strict  <span class=\"comment\">#exit non-zero for improperly formatted checksum lines</span></span><br><span class=\"line\">-w, --warn <span class=\"comment\">#warn about improperly formatted checksum lines</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基础使用案例</span></span><br><span class=\"line\">sha1sum *</span><br><span class=\"line\">8d469ba5f661a779ed6d73537f3c2dfcaba46d8b  check.sh</span><br><span class=\"line\">cd3eccb06410c7b3d6cd01f7d1f0d0bbefe446d3  test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#首先将命令产生的消息摘要保存在.sha1文件中再将test.txt和test.sha1放在同一个目录中，使用-c命令行选项验证文件的完整性。</span></span><br><span class=\"line\">ha1sum test.txt &gt; test.sha1</span><br><span class=\"line\">cd3eccb06410c7b3d6cd01f7d1f0d0bbefe446d3  test.txt</span><br><span class=\"line\">sha1sum -c demo.sha1</span><br><span class=\"line\">demo.txt: OK</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#默认情况下，sha1sum命令以文本模式读取文件，也可以强制该工具以二进制模式读取</span></span><br><span class=\"line\">sha1sum -b [filename]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"进制转储\"><a href=\"#进制转储\" class=\"headerlink\" title=\"进制转储\"></a>进制转储</h4><h5 id=\"od-命令-非纯文本文件显示\"><a href=\"#od-命令-非纯文本文件显示\" class=\"headerlink\" title=\"od 命令 - 非纯文本文件显示\"></a>od 命令 - 非纯文本文件显示</h5><p>描述:在查阅非文本文件时候采用od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现输出文件内容,。</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">od [-abcdfhilovx][-A &lt;字码基数&gt;][-j &lt;字符数目&gt;][-N &lt;字符数目&gt;][-s &lt;字符串字符数&gt;][-t &lt;输出格式&gt;][-w &lt;每列字符数&gt;][--<span class=\"built_in\">help</span>][--version][文件...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数</span></span><br><span class=\"line\">-t [类型] : 后面接各种类型<span class=\"string\">\"类型(TYPE)\"</span>的输出例如：</span><br><span class=\"line\">  a : 利用默认的字符来输出</span><br><span class=\"line\">  c ：利用ASCII字符来输出</span><br><span class=\"line\">  d [size] : 利用十进制(decimal)来输出数据，每个整数占用size bytes;</span><br><span class=\"line\">  f [size] : 利用浮点数(<span class=\"built_in\">float</span>)来输出数据，每个数占用size bytes;</span><br><span class=\"line\">  o [size] : 利用八进制(octal)来输出数据，每个数占用size bytes;</span><br><span class=\"line\">  x [size] : 利用十六进制(Hexadecimal)来输出数据，每个数占用size bytes;</span><br><span class=\"line\">-a 　此参数的效果和同时指定<span class=\"string\">\"-ta\"</span>参数相同使用默认字符来输出。</span><br><span class=\"line\">-A   &lt;字码基数| [doxn]&gt; 　选择要以何种基数计算字码。</span><br><span class=\"line\">-b 　此参数的效果和同时指定<span class=\"string\">\"-toC\"</span>参数相同。</span><br><span class=\"line\">-c 　此参数的效果和同时指定<span class=\"string\">\"-tC\"</span>参数相同。</span><br><span class=\"line\">-d 　此参数的效果和同时指定<span class=\"string\">\"-tu2\"</span>参数相同。</span><br><span class=\"line\">-f 　此参数的效果和同时指定<span class=\"string\">\"-tfF\"</span>参数相同。</span><br><span class=\"line\">-o 　此参数的效果和同时指定<span class=\"string\">\"-to2\"</span>参数相同。</span><br><span class=\"line\">-x 　此参数的效果和同时指定<span class=\"string\">\"-h\"</span>参数相同。</span><br><span class=\"line\">-h 　此参数的效果和同时指定<span class=\"string\">\"-tx2\"</span>参数相同。</span><br><span class=\"line\">-i 　此参数的效果和同时指定<span class=\"string\">\"-td2\"</span>参数相同。</span><br><span class=\"line\">-j&lt;字符数目&gt;或--skip-bytes=&lt;字符数目&gt; 　略过设置的字符数目。</span><br><span class=\"line\">-l 　此参数的效果和同时指定<span class=\"string\">\"-td4\"</span>参数相同。</span><br><span class=\"line\">-N&lt;字符数目&gt;或--<span class=\"built_in\">read</span>-bytes=&lt;字符数目&gt; 　到设置的字符数目为止。</span><br><span class=\"line\">-s&lt;字符串字符数&gt;或--strings=&lt;字符串字符数&gt; 　只显示符合指定的字符数目的字符串。</span><br><span class=\"line\">-t&lt;输出格式&gt;或--format=&lt;输出格式&gt; 　设置输出格式。</span><br><span class=\"line\">-v或--output-duplicates 　输出时不省略重复的数据。</span><br><span class=\"line\">-w&lt;每列字符数&gt;或--width=&lt;每列字符数&gt; 　设置每列的最大字符数。</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.创建 tmp 文件简单演示使用将字符转换成八进制</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">echo</span> -e <span class=\"string\">\"abc d\\n12  3\"</span> &gt; tmp </span><br><span class=\"line\">&gt; cat <span class=\"variable\">$_</span></span><br><span class=\"line\"><span class=\"comment\"># abc d</span></span><br><span class=\"line\"><span class=\"comment\"># 12  3</span></span><br><span class=\"line\">&gt; od -b tmp</span><br><span class=\"line\">&gt; 0000000 141 142 143 040 144 012 061 062 040 040 063 012</span><br><span class=\"line\">&gt; 0000014</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2使用单字节八进制解释进行输出，注意左侧的默认地址格式为八字节:</span></span><br><span class=\"line\">&gt; od -c tmp</span><br><span class=\"line\"><span class=\"comment\">#  0000000   a   b   c       d  \\n   1   2           3  \\n</span></span><br><span class=\"line\"><span class=\"comment\">#  0000014</span></span><br><span class=\"line\">❯ od -t c /usr/bin/passwd | more</span><br><span class=\"line\"><span class=\"comment\"># 0000000 177   E   L   F 002 001 001  \\0  \\0  \\0  \\0  \\0  \\0  \\0  \\0  \\0</span></span><br><span class=\"line\"><span class=\"comment\"># 0000020 003  \\0   &gt;  \\0 001  \\0  \\0  \\0   @   O  \\0  \\0  \\0  \\0  \\0  \\0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3.使用ASCII码进行输出，注意其中包括转义字符</span></span><br><span class=\"line\">$ od -A d  -c tmp</span><br><span class=\"line\">0000000   a   b   c       d  \\n   1   2           3  \\n</span><br><span class=\"line\">0000012</span><br><span class=\"line\">$ od -A x  -c tmp</span><br><span class=\"line\">000000   a   b   c       d  \\n   1   2           3  \\n</span><br><span class=\"line\">00000c</span><br><span class=\"line\">$ od -A n  -c tmp</span><br><span class=\"line\">  a   b   c       d  \\n   1   2           3  \\n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例4.例如$IFS系统分隔符变量，直接输出无任何效果，我们可以通过od -b 以8进制形式转储</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$IFS</span>\"</span> | od -b</span><br><span class=\"line\"><span class=\"comment\"># Octal:\"040\"是空格(32)，\"011\"是Tab(9)，\"012\"是换行符\"\\n\"(10) </span></span><br><span class=\"line\">0000000 040 011 012 012</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例5.使用进制与ascii进行对比</span></span><br><span class=\"line\"><span class=\"comment\"># Octal VS Ascii</span></span><br><span class=\"line\">&gt; od  -t oCc /etc/issue  <span class=\"comment\"># 以八进制的列出值与ASCII对应表</span></span><br><span class=\"line\">0000000 125 142 165 156 164 165 040 062 060 056 060 064 040 114 124 123</span><br><span class=\"line\">          U   b   u   n   t   u       2   0   .   0   4       L   T   S</span><br><span class=\"line\">0000020 040 134 156 040 134 154 012 127 151 156 144 157 167 163 040 127</span><br><span class=\"line\">              \\   n       \\   l  \\n   W   i   n   d   o   w   s       W</span><br><span class=\"line\">0000040 123 114 012 012</span><br><span class=\"line\">          S   L  \\n  \\n</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; od  -t dCc /etc/issue  <span class=\"comment\"># 以十进制的列出值与ASCII对应表</span></span><br><span class=\"line\">0000000   85   98  117  110  116  117   32   50   48   46   48   52   32   76   84   83</span><br><span class=\"line\">           U    b    u    n    t    u         2    0    .    0    4         L    T    S</span><br><span class=\"line\">0000020   32   92  110   32   92  108   10   87  105  110  100  111  119  115   32   87</span><br><span class=\"line\">                \\    n         \\    l   \\n    W    i    n    d    o    w    s         W</span><br><span class=\"line\">0000040   83   76   10   10</span><br><span class=\"line\">           S    L   \\n   \\n</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; od  -t xCc /etc/issue  <span class=\"comment\"># 以十六进制的列出值与ASCII对应表 </span></span><br><span class=\"line\">0000000  55  62  75  6e  74  75  20  32  30  2e  30  34  20  4c  54  53</span><br><span class=\"line\">          U   b   u   n   t   u       2   0   .   0   4       L   T   S</span><br><span class=\"line\">0000020  20  5c  6e  20  5c  6c  0a  57  69  6e  64  6f  77  73  20  57</span><br><span class=\"line\">              \\   n       \\   l  \\n   W   i   n   d   o   w   s       W</span><br><span class=\"line\">0000040  53  4c  0a  0a</span><br><span class=\"line\">          S   L  \\n  \\n</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"xxd-命令\"><a href=\"#xxd-命令\" class=\"headerlink\" title=\"xxd 命令\"></a>xxd 命令</h5><p>描述：用于使用二进制或十六进制格式显示文件内容，可以将指定文件或标准输入以十六进制转储,也可以把十六进制转储转换成原来的二进制形式，与winhex由很大的相似;</p>\n<p>命令格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果没有指定输入文件， 则采用标准输入</span></span><br><span class=\"line\">xxd -h[elp]</span><br><span class=\"line\">xxd [options] [infile | [outfile]]</span><br><span class=\"line\">xxd -r[evert] [options] [infile [outfile]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数</span></span><br><span class=\"line\">-b: 以2进制格式进行输出</span><br><span class=\"line\">-c: 每行输出多少个字节</span><br><span class=\"line\">-g: 几个字节组成一组</span><br><span class=\"line\">-i：将文件内容输出成 c的一个数组格式　</span><br><span class=\"line\">-l : 输出几个字节后结束,显示几个字节的数据　</span><br><span class=\"line\">-p：以一个整块输出所有的hex， 不使用空格进行分割</span><br><span class=\"line\">-s [+][-]seek ： 从第几个字符开始</span><br><span class=\"line\">-u : 输出采用大写</span><br><span class=\"line\">-r: 反转操作，将16进制专程2进制</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.简单案例与winhex相似显示偏移位置和Hex 与 字符文本</span></span><br><span class=\"line\">xxd src.c</span><br><span class=\"line\">xxd -g4 src.c  <span class=\"comment\">#每四个字节一组</span></span><br><span class=\"line\">xxd -p src.c    <span class=\"comment\">#输出所有的hex不使用空格进行分割，也不显示偏移</span></span><br><span class=\"line\">xxd -i src.c   <span class=\"comment\">#输入C语言数组格式每一个下标存放一个十六进制</span></span><br><span class=\"line\">xxd -l 18 src.c </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.以2进制格式显示每行输出8字节（8*8 = 64个二进制）</span></span><br><span class=\"line\">xxd -b -c8  src.c</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190627224953.png\" alt=\"WeiyiGeek.xxd命令示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.xxd命令示例</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例3.显示从倒数15字节到末尾的十六进制内容并采用大写显示</span></span><br><span class=\"line\">xxd -s -15 -u src.c</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.将十六进行转换成文本数据，将文本数据转换成十六进制</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'0000029: 3574 68'</span> | xxd -r</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello\"</span> |xxd -g1  <span class=\"comment\">#显示字符串 hello 的16进制数据:</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\x68\\x65\\x6c\\x6c\\x6f\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.在vim中也可以把文件转换为16进制来显示：</span></span><br><span class=\"line\">:%!xxd</span><br><span class=\"line\"><span class=\"comment\">#返回正常显示：</span></span><br><span class=\"line\">:%!xxd -r</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190627225410.png\" alt=\"WeiyiGeek.xdd示例2\" title=\"\" class=\"\">\n                <p>WeiyiGeek.xdd示例2</p>\n            </figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"二进制","path":"api/tags/二进制.json"}]}