{"title":"MySQL异常迁移恢复实践记录","slug":"数据存储/Database-运维/MySQL/n1.MySQL异常迁移恢复实践记录","date":"2022-01-02T22:34:30.000Z","updated":"2022-07-10T14:39:27.489Z","url":"2022/1-3-637.html","path":"api/articles/2022/1-3-637.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-记一次在K8s集群搭建的MySQL主从无法正常启动之数据迁移恢复实践\"><a href=\"#0x00-记一次在K8s集群搭建的MySQL主从无法正常启动之数据迁移恢复实践\" class=\"headerlink\" title=\"0x00 记一次在K8s集群搭建的MySQL主从无法正常启动之数据迁移恢复实践\"></a>0x00 记一次在K8s集群搭建的MySQL主从无法正常启动之数据迁移恢复实践</h2><p>描述: 在K8s集群中里利用<code>bitnami</code>提供的<code>mysql:5.7.32-debian-10-r61</code>镜像并利用helm进行MySQL集群的部署安装, 在进行网络调整后发现<code>mysql-master-0</code> pod无法正常启动,导致MySQL数据库无法访问,同时设定的root密码被更改导致无法提取持久化目录中相关数据信息，我们可以依据如下方式进行错误排查以及数据恢复。</p>\n<p><br/></p>\n<p><strong>前置知识</strong></p>\n<ul>\n<li>MYSQL介绍安装与运维配置 (<a href=\"https://blog.weiyigeek.top/2019/3/1/80.html\">https://blog.weiyigeek.top/2019/3/1/80.html</a>)</li>\n<li>MYSQL容备与入坑 (<a href=\"https://blog.weiyigeek.top/2019/3/26/84.html\">https://blog.weiyigeek.top/2019/3/26/84.html</a>)</li>\n</ul>\n<p><br/></p>\n<p><strong>环境说明:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kubernetes 集群版本: v1.22.2</span><br><span class=\"line\">mysql 镜像及其版本: docker.io/bitnami/mysql:5.7.32-debian-10-r61</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -n database -l app=mysql</span><br><span class=\"line\">  <span class=\"comment\"># NAME             READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># mysql-master-0   0/0     Error     0          11d</span></span><br><span class=\"line\">  <span class=\"comment\"># mysql-slave-0    1/1     Running   0          11d</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>操作流程:</strong></p>\n<ul>\n<li>Step 0.操作任何数据之前,第一要务就是必须要进行数据备份，防止在操作的过程中对数据造成破坏。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 mysql-master 持久化的 PVC 信息</span></span><br><span class=\"line\">$ kubectl get pvc -n database  | grep <span class=\"string\">\"mysql\"</span></span><br><span class=\"line\">data-mysql-master-0 Bound  pvc-4bef6f99-8a7a-47f4-8517-18721fa5d724  8Gi  RWO  nfs-devops  304d</span><br><span class=\"line\">data-mysql-slave-0  Bound  pvc-2e5de4c5-a1a4-4c79-8e5b-fc21b66d6221  8Gi  RWO  nfs-devops  304d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到持久化目录中</span></span><br><span class=\"line\">$ kubectl describe pv -n database pvc-4bef6f99-8a7a-47f4-8517-18721fa5d724  | grep <span class=\"string\">\"Path\"</span></span><br><span class=\"line\">Path:      /Kubernetes/pvc/devops/database-data-mysql-master-0-pvc-4bef6f99-8a7a-47f4-8517-18721fa5d724</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份持久化的数据</span></span><br><span class=\"line\">$ cp -a /Kubernetes/pvc/devops/database-data-mysql-master-0-pvc-4bef6f99-8a7a-47f4-8517-18721fa5d724 /tmp/mysql-backup</span><br><span class=\"line\">$ ls /tmp/mysql-backup/data | head -n 15</span><br><span class=\"line\">auto.cnf</span><br><span class=\"line\">ca-key.pem</span><br><span class=\"line\">ca.pem</span><br><span class=\"line\">client-cert.pem</span><br><span class=\"line\">client-key.pem</span><br><span class=\"line\">auth</span><br><span class=\"line\">ib_buffer_pool</span><br><span class=\"line\">ibdata1</span><br><span class=\"line\">ib_logfile0</span><br><span class=\"line\">ib_logfile1</span><br><span class=\"line\">ibtmp1</span><br><span class=\"line\">msg</span><br><span class=\"line\">my_database</span><br><span class=\"line\">mysql</span><br><span class=\"line\">mysql-bin.000001</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 1.K8s中资源服务清单部署的应用无法启动错误信息排查思路。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sts 资源查看</span></span><br><span class=\"line\">kubectl get sts -n database mysql-master </span><br><span class=\"line\"><span class=\"comment\"># 查看资源控制器创建的pod日志</span></span><br><span class=\"line\">kubectl logs -f --tail 50 -n database mysql-master-0 </span><br><span class=\"line\"><span class=\"comment\"># 查看 pod 详细信息以及事件</span></span><br><span class=\"line\">kubectl describe pod -n database mysql-master-0</span><br><span class=\"line\"><span class=\"comment\"># 查看 pod 启动状态</span></span><br><span class=\"line\">kubectl get pod -n database -l app=mysql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 2.通过前面错误信息我知道了,mysql-master-0 Pod无法启动的原因是，因为该资源清单了设置Pod健康检查即<code>Liveness</code>探针与<code>Readiness</code>探针，而正是因为root密码被修改导致Pod无法重新启动，从而导致无法正常提供服务。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># livenessProbe 探针 -- </span></span><br><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  <span class=\"built_in\">exec</span>:</span><br><span class=\"line\">    <span class=\"built_in\">command</span>:</span><br><span class=\"line\">    - sh</span><br><span class=\"line\">    - -c</span><br><span class=\"line\">    - |</span><br><span class=\"line\">      password_aux=<span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_ROOT_PASSWORD:-&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_ROOT_PASSWORD_FILE:-&#125;</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        password_aux=$(cat <span class=\"variable\">$MYSQL_ROOT_PASSWORD_FILE</span>)</span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\">      mysqladmin status -uroot -p<span class=\"variable\">$password_aux</span></span><br><span class=\"line\">    failureThreshold: 3       <span class=\"comment\"># 失效阈值为3次</span></span><br><span class=\"line\">    initialDelaySeconds: 120  <span class=\"comment\"># 初始化延迟时间120s</span></span><br><span class=\"line\">    periodSeconds: 10         <span class=\"comment\"># 探测周期,默认情况下是 10 秒。 </span></span><br><span class=\"line\">    successThreshold: 1       <span class=\"comment\"># 成功阈值为3次</span></span><br><span class=\"line\">    timeoutSeconds: 1         <span class=\"comment\"># 超时时间1s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># readinessProbe 探针 -- </span></span><br><span class=\"line\">readinessProbe:</span><br><span class=\"line\">  <span class=\"built_in\">exec</span>:</span><br><span class=\"line\">    <span class=\"built_in\">command</span>:</span><br><span class=\"line\">    - sh</span><br><span class=\"line\">    - -c</span><br><span class=\"line\">    - |</span><br><span class=\"line\">      password_aux=<span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_ROOT_PASSWORD:-&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$&#123;MYSQL_ROOT_PASSWORD_FILE:-&#125;</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        password_aux=$(cat <span class=\"variable\">$MYSQL_ROOT_PASSWORD_FILE</span>)</span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\">      mysqladmin status -uroot -p<span class=\"variable\">$password_aux</span></span><br><span class=\"line\">  failureThreshold: 3</span><br><span class=\"line\">  initialDelaySeconds: 30</span><br><span class=\"line\">  periodSeconds: 10</span><br><span class=\"line\">  successThreshold: 1</span><br><span class=\"line\">  timeoutSeconds: 1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 3.查看database名称空间下的secrets资源中设定的mysql相关凭据（默认以Base64编码）。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get secrets -n database mysql -o yaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  mysql-password: dXNlcnBhc3N3ZA==              <span class=\"comment\"># userpasswd</span></span><br><span class=\"line\">  mysql-replication-password: cmVwbGljYXRpb24=  <span class=\"comment\"># replication</span></span><br><span class=\"line\">  mysql-root-password: cm9vdHBhc3N3ZA==         <span class=\"comment\"># rootpasswd   由于root密码被其它开发人员进行更改而又忘记导致。</span></span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 4.分别查看database名称空间下的<code>mysql-master</code>和<code>mysql-slave</code>的configMap配置文件(实际上配置差不多)。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get cm -n database mysql-master -oyaml</span><br><span class=\"line\">$ kubectl get cm -n database mysql-slave -oyaml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  my.cnf: |-</span><br><span class=\"line\">    [mysqld]</span><br><span class=\"line\">    <span class=\"built_in\">bind</span>-address=0.0.0.0</span><br><span class=\"line\">    port=3306</span><br><span class=\"line\">    skip-name-resolve</span><br><span class=\"line\">    explicit_defaults_for_timestamp</span><br><span class=\"line\">    basedir=/opt/bitnami/mysql</span><br><span class=\"line\">    plugin_dir=/opt/bitnami/mysql/plugin</span><br><span class=\"line\">    socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">    datadir=/bitnami/mysql/data</span><br><span class=\"line\">    tmpdir=/opt/bitnami/mysql/tmp</span><br><span class=\"line\">    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid</span><br><span class=\"line\">    <span class=\"built_in\">log</span>-error=/opt/bitnami/mysql/logs/mysqld.log</span><br><span class=\"line\">    character-set-server=UTF8</span><br><span class=\"line\">    collation-server=utf8_general_ci</span><br><span class=\"line\">    max_allowed_packet=160M</span><br><span class=\"line\">    default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">    [client]</span><br><span class=\"line\">    port=3306</span><br><span class=\"line\">    socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">    default-character-set=UTF8</span><br><span class=\"line\">    plugin_dir=/opt/bitnami/mysql/plugin</span><br><span class=\"line\"></span><br><span class=\"line\">    [manager]</span><br><span class=\"line\">    port=3306</span><br><span class=\"line\">    socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><p>Step 5.前面说到由于mysql数据库的root密码被修改无法通过Pod容器探针检测所以无法启用, 所以我们可以先将资源清单中的livenessProbe与readinessProbe这两部分先停用，以恢复业务正常运行，等待晚上访问流量较小时，关闭应用进行停机维护重置root密码，此时我们可以进行如下操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 mysql-master 的 configMap 配置文件，在 [mysqld] 行之下加入 skip-grant-tables 字符串, 然后 使用vim 的 :wq 进行保存。</span></span><br><span class=\"line\">kubectl edit cm -n database mysql-master</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n</li>\n<li><p>Step 6.等待 <code>mysql-master-0</code> Pod运行成功正常后进入到容器内部shell之中，随之执行如下命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 mysql-master-0 Pod 容器内部</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it -n database mysql-master-0 bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此时我们可以利用root用户以及空密码登陆 MySQL 服务器中，执行如下SQL语句。</span></span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; status;</span><br><span class=\"line\">mysql&gt; update mysql.user <span class=\"built_in\">set</span> authentication_string = password(<span class=\"string\">\"rootpasswd\"</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">mysql&gt; update mysql.user <span class=\"built_in\">set</span> authentication_string = password(<span class=\"string\">\"userpasswd\"</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">\"user\"</span>;</span><br><span class=\"line\">mysql&gt; update mysql.user <span class=\"built_in\">set</span> authentication_string = password(<span class=\"string\">\"replication\"</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">\"replicator\"</span>;</span><br><span class=\"line\"><span class=\"comment\"># 刷新用户权限信息必须</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看用户信息</span></span><br><span class=\"line\">mysql&gt; select host,user,authentication_string from mysql.user;</span><br><span class=\"line\">+-----------+---------------+-------------------------------------------+</span><br><span class=\"line\">| host      | user          | authentication_string                     |</span><br><span class=\"line\">+-----------+---------------+-------------------------------------------+</span><br><span class=\"line\">| %         | user          | *FBBDC6FD2E******A97D36A86BEAC3          |</span><br><span class=\"line\">| %         | root          | *88CFEE431A******C570D24CEB3C7A167F      |</span><br><span class=\"line\">| localhost | mysql.sys     | *THISISNOTA******SSWORDTHATCANBEUSEDHERE |</span><br><span class=\"line\">| %         | replicator    | *32005F59F5******E5AA8898DE51D456CD90    |</span><br><span class=\"line\">| localhost | mysql.session | *THISISNOTA******ORDTHATCANBEUSEDHERE    |</span><br><span class=\"line\">+-----------+---------------+-------------------------------------------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 7.修改完成后将 mysql-master 的 configMap 设置的 my.cnf 配置文件中的 <code>skip-grant-tables</code> 字符串去掉，重启Pod即可。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n database -l app=mysql</span><br><span class=\"line\">  <span class=\"comment\"># NAME             READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># mysql-master-0   1/1     Running   0          3m12s</span></span><br><span class=\"line\">  <span class=\"comment\"># mysql-slave-0    1/1     Running   0          65s</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>至此, MySQL集群故障恢复完成! 除此之外我们还可以通过独立的Docker容器将其数据备份出来，例如<strong>下节的数据迁移恢复</strong>。</p>\n<hr>\n<p><strong>数据迁移恢复</strong></p>\n<ul>\n<li>Step 1. 准备一份配置文件给docker单独部署的容器进行数据恢复使用，我们需要在配置中加入 skip-grant-tables 参数, 忽略root密码进行登陆到mysql中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee /tmp/my.cnf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"built_in\">bind</span>-address=0.0.0.0</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">skip-name-resolve</span><br><span class=\"line\">explicit_defaults_for_timestamp</span><br><span class=\"line\">basedir=/opt/bitnami/mysql</span><br><span class=\"line\">socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">datadir=/bitnami/mysql/data</span><br><span class=\"line\">tmpdir=/opt/bitnami/mysql/tmp</span><br><span class=\"line\">pid-file=/opt/bitnami/mysql/tmp/mysqld.pid</span><br><span class=\"line\"><span class=\"built_in\">log</span>-error=/opt/bitnami/mysql/logs/mysqld.log</span><br><span class=\"line\">character-set-server=UTF8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br><span class=\"line\">max_allowed_packet=16M</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">default-character-set=UTF8</span><br><span class=\"line\"></span><br><span class=\"line\">[manager]</span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/opt/bitnami/mysql/tmp/mysql.sock</span><br><span class=\"line\">pid-file=/opt/bitnami/mysql/tmp/mysqld.pid</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 2.执行如下命令，并利用前面备份的持久化数据的文件创建一个新的MySQL数据库容器。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 MySQL 容器</span></span><br><span class=\"line\">docker run -d --name mysql \\</span><br><span class=\"line\">  -e BITNAMI_DEBUG=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  -e ALLOW_EMPTY_PASSWORD=yes \\</span><br><span class=\"line\">  -e MYSQL_AUTHENTICATION_PLUGIN=mysql_native_password \\</span><br><span class=\"line\">  -e MYSQL_USER=user -e MYSQL_PASSWORD=userpasswd \\</span><br><span class=\"line\">  -v /tmp/mysql-backup/data:/bitnami/mysql/data \\</span><br><span class=\"line\">  -v /tmp/my.cnf:/opt/bitnami/mysql/conf/my.cnf \\ </span><br><span class=\"line\">  -v /tmp/logs:/opt/bitnami/mysql/logs \\</span><br><span class=\"line\">  -p 32160:3306 \\</span><br><span class=\"line\">  bitnami/mysql:5.7.32-debian-10-r61</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 容器启动日志</span></span><br><span class=\"line\">docker logs -f --tail 50 mysql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 3.同样进入到mysql容器内部shell中执行如下命令, 查看并导出相应数据库的sql文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql bash</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">| auth               |</span><br><span class=\"line\">| msg                |</span><br><span class=\"line\">| my_database        |</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决：终端备份数据库乱码(指定编码以及导出的文件路径)</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/bitnami/mysql/logs</span><br><span class=\"line\">mysqldump -uroot -p --default-character-set=UTF8 --databases auth --hex-blob --result-file=auth.sql </span><br><span class=\"line\">mysqldump -uroot -p --default-character-set=UTF8 --databases msg --hex-blob --result-file=msg.sql</span><br><span class=\"line\">mysqldump -uroot -p --default-character-set=UTF8 --databases my_database --hex-blob --result-file=my_database.sql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 4.在本机的<code>/tmp/logs</code>目录中我们可以查看到mysqldump出的sql文件。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /tmp/logs</span><br><span class=\"line\">auth.sql  msg.sql  my_database.sql  mysqld.log</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 5.如果需要外部使用该Docker搭建的MySQL数据库,你需要更改用户对应的账号密码并刷新权限,在my.cnf配置文件中去除<code>skip-grant-tables</code>字段,并重启容器即可。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker restart mysql</span><br><span class=\"line\">$ docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE                                COMMAND                  CREATED      STATUS                   PORTS        NAMES</span><br><span class=\"line\">c72268dc95cf        bitnami/mysql:5.7.32-debian-10-r61   <span class=\"string\">\"/opt/bitnami/script…\"</span>   11 days ago  Start  (0) 29 hours ago  0.0.0.0:3306 mysql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>至此，K8s集群搭建的MySQL数据库迁移恢复实践完毕!</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Database","path":"api/categories/Database.json"}],"tags":[{"name":"MySQL","path":"api/tags/MySQL.json"},{"name":"容灾恢复","path":"api/tags/容灾恢复.json"}]}