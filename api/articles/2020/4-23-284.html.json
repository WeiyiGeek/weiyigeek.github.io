{"title":"2.Go编程快速入门学习","slug":"编程世界/Go/2.Go编程快速入门学习","date":"2020-04-23T03:16:58.000Z","updated":"2021-08-23T02:29:31.831Z","url":"2020/4-23-284.html","path":"api/articles/2020/4-23-284.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Go语言基础之变量和常量\"><a href=\"#0x00-Go语言基础之变量和常量\" class=\"headerlink\" title=\"0x00 Go语言基础之变量和常量\"></a>0x00 Go语言基础之变量和常量</h2><p>描述: 变量和常量是编程中必不可少的部分，也是很好理解的一部分。</p>\n<h3 id=\"1-标识符\"><a href=\"#1-标识符\" class=\"headerlink\" title=\"1.标识符\"></a>1.标识符</h3><p>描述: 在编程语言中标识符就是程序员定义的具有特殊意义的词，比如<code>变量名、常量名、函数名</code>等等。 Go语言中标识符由字母数字和<em>(下划线）组成，并且只能以字母和</em>开头。 举几个例子：<code>abc, _, _123, a123</code>。</p>\n<p>编程语言中常用的三种命名规则，而Go语言推荐使用驼峰法式命名。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下划线连接</span></span><br><span class=\"line\">student_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 小驼峰法式 (推荐方式)</span></span><br><span class=\"line\">studentName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 大驼峰法式</span></span><br><span class=\"line\">StudentName</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-关键字\"><a href=\"#2-关键字\" class=\"headerlink\" title=\"2.关键字\"></a>2.关键字</h3><p>描述: 关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。</p>\n<ul>\n<li><p>Go语言中有25个关键字:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* var const ：     变量和常量的声明</span><br><span class=\"line\">* var varName <span class=\"built_in\">type</span>  或者 varName : = value</span><br><span class=\"line\">* package and import: 导入</span><br><span class=\"line\">* func：   用于定义函数和方法</span><br><span class=\"line\">* <span class=\"built_in\">return</span> ：用于从函数返回</span><br><span class=\"line\">* defer someCode ：在函数退出之前执行</span><br><span class=\"line\">* go :      用于并行</span><br><span class=\"line\">* select    用于选择不同类型的通讯</span><br><span class=\"line\">* interface 用于定义接口</span><br><span class=\"line\">* struct    用于定义抽象数据类型</span><br><span class=\"line\">* <span class=\"built_in\">break</span>、<span class=\"keyword\">case</span>、<span class=\"built_in\">continue</span>、<span class=\"keyword\">for</span>、fallthrough、<span class=\"keyword\">else</span>、<span class=\"keyword\">if</span>、switch、goto、default 流程控制</span><br><span class=\"line\">* chan  用于channel通讯</span><br><span class=\"line\">* <span class=\"built_in\">type</span>  用于声明自定义类型</span><br><span class=\"line\">* map   用于声明map类型数据</span><br><span class=\"line\">* range 用于读取slice、map、channel数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此外 Go语言中还有37个保留字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Constants: </span></span><br><span class=\"line\"><span class=\"literal\">true</span>  <span class=\"literal\">false</span>  iota  nil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Types:    </span></span><br><span class=\"line\">int  int8  int16  int32  int64  </span><br><span class=\"line\">uint  uint8  uint16  uint32  uint64  uintptr</span><br><span class=\"line\">float32  float64  complex128  complex64</span><br><span class=\"line\">bool  byte  rune  string  error</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Functions:   </span></span><br><span class=\"line\">make  len  <span class=\"built_in\">cap</span>  new  append  copy  close  delete</span><br><span class=\"line\">complex  real  imag</span><br><span class=\"line\">panic  recover</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"3-变量-Var\"><a href=\"#3-变量-Var\" class=\"headerlink\" title=\"3.变量-Var\"></a>3.变量-Var</h3><p><strong>Q: 变量的来历?</strong></p>\n<blockquote>\n<p>答: 程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p>\n</blockquote>\n<p><strong>Q: 变量类型</strong></p>\n<blockquote>\n<p>答:变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p>\n</blockquote>\n<p>Tips : Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p>\n<h4 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h4><blockquote>\n<p>答: Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 </p>\n</blockquote>\n<p>Go语言的变量声明标准格式为：<code>var 变量名 变量类型</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单一声明: 变量声明以关键字var开头，变量类型放在变量的后面，行尾无需分号。</span></span><br><span class=\"line\">var name string</span><br><span class=\"line\">var age int</span><br><span class=\"line\">var isOk bool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量声明: 每声明一个变量就需要写var关键字会比较繁琐，go语言中还支持批量变量声明。</span></span><br><span class=\"line\">var (</span><br><span class=\"line\">  a string</span><br><span class=\"line\">  b int</span><br><span class=\"line\">  c bool</span><br><span class=\"line\">  d float32</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"变量初始化\"><a href=\"#变量初始化\" class=\"headerlink\" title=\"变量初始化\"></a>变量初始化</h4><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值,或者我们也可在声明变量的时候为其指定初始值。例如： </p>\n<ul>\n<li>1.整型和浮点型变量的默认值为0。 </li>\n<li>2.字符串变量的默认值为空字符串。 </li>\n<li>3.布尔型变量默认为false。 </li>\n<li>4.切片、函数、指针变量的默认为nil。</li>\n</ul>\n<p>变量初始化的标准格式如下：<code>var 变量名 类型 = 表达式</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//# 单一变量初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"keyword\">string</span> = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"keyword\">int</span> = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//# 批量变量初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name, age = <span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"number\">20</span></span><br></pre></td></tr></table></figure><br><br></p>\n<p><strong>类型推导</strong><br>描述: 有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>短变量声明</strong><br>描述: 在函数内部可以使用更简略的<code>:=</code>方式声明并初始化变量。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">  count := 10</span><br><span class=\"line\">  username := <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>实例总结:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 采用四种方式进行声明和初始化int32类型的变量</span></span><br><span class=\"line\"><span class=\"comment\">// 方法1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">int32</span></span><br><span class=\"line\">i = <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"comment\">// 方法2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> j <span class=\"keyword\">int32</span> = <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"comment\">// 方法3</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> k = <span class=\"keyword\">int32</span>(<span class=\"number\">1024</span>)</span><br><span class=\"line\"><span class=\"comment\">// 方法4</span></span><br><span class=\"line\">k := <span class=\"keyword\">int32</span>(<span class=\"number\">1024</span>)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"匿名变量\"><a href=\"#匿名变量\" class=\"headerlink\" title=\"匿名变量\"></a>匿名变量</h4><p>描述: 在使用多重赋值时，如果想要<code>忽略某个值</code>，可以使用<code>匿名变量（anonymous variable）- 特殊变量</code>。并且匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (<code>在Lua等编程语言里，匿名变量也被叫做哑元变量。</code>)</p>\n<p>匿名变量用一个<code>下划线(_)</code>表示，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func foo() (int, string) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 10, <span class=\"string\">\"Q1mi\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">  x, _ := foo()</span><br><span class=\"line\">  _, y := foo()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"x=\"</span>, x)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"y=\"</span>, y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量声明(单一-全局)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleName <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> notUseVar <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 变量声明(批量-全局)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  multiName <span class=\"keyword\">string</span></span><br><span class=\"line\">  multiAge  <span class=\"keyword\">int8</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对声明后的变量赋值</span></span><br><span class=\"line\">  singleName = <span class=\"string\">\"Weiyi_\"</span></span><br><span class=\"line\">  multiName = <span class=\"string\">\"Geek\"</span></span><br><span class=\"line\">  multiAge = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 变量初始化（局部）</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name <span class=\"keyword\">string</span> = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sex, addr = <span class=\"string\">\"boy\"</span>, <span class=\"string\">\"China\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类型推导变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 简短变量声明（此种类型只能在函数中使用）</span></span><br><span class=\"line\">  briefCount := <span class=\"number\">65535</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"My Name is %s, Sex is %s , Address: %s\\n\"</span>, name, sex, addr)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Alias Name :\"</span>, singleName, multiName, <span class=\"string\">\" Age is :\"</span>, multiAge)</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">\"类型推导 ：\"</span>, flag, count)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\", 简短变量 ：\"</span>, briefCount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">API server listening at: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">42954</span></span><br><span class=\"line\">My Name is WeiyiGeek, Sex is boy , Address: China</span><br><span class=\"line\">Alias Name : Weiyi_ Geek  Age is : <span class=\"number\">18</span></span><br><span class=\"line\">类型推导 ：<span class=\"literal\">true</span> <span class=\"number\">1024</span>, 简短变量 ： <span class=\"number\">65535</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : Go语言中变量必须先声明后使用，而且声明变量<code>(非全局变量)</code>后必须使用，如有不使用的变量编译时报错。</p>\n<p>Tips ：函数外的每个语句都必须以关键字开始 (<code>var、const、func</code>) 等</p>\n<p>Tips : <code>:=</code>不能使用在函数外。</p>\n<p>Tips : <code>匿名变量或者叫哑元变量(_)</code>多用于占位，表示忽略值，即当有些数据必须用变量接收但又不使用它时，可以采用_来接收改值。</p>\n<p>Tips : 变量在同一个作用域中<code>代码块({})</code>中不能重复声明同名的变量。</p>\n<p><br></p>\n<h3 id=\"4-常量-Const\"><a href=\"#4-常量-Const\" class=\"headerlink\" title=\"4.常量 - Const\"></a>4.常量 - Const</h3><p>描述:常量是在程序运行期间恒定不变的值，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是<code>把var换成了const</code>，常量在定义的时候必须赋值。</p>\n<p>常量声明初始化格式:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单一声明: 声明了pi和e这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> e = <span class=\"number\">2.7182</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 批量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  pi = <span class=\"number\">3.1415</span></span><br><span class=\"line\">  e = <span class=\"number\">2.7182</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 批量声明（如果省略了值则表示和上面一行的值相同）</span></span><br><span class=\"line\"><span class=\"comment\">// 常量n1、n2、n3的值都是100。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  n1 = <span class=\"number\">100</span></span><br><span class=\"line\">  n2</span><br><span class=\"line\">  n3</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"iota-常量计数器\"><a href=\"#iota-常量计数器\" class=\"headerlink\" title=\"iota - 常量计数器\"></a>iota - 常量计数器</h4><p>描述: iota是go语言的常量计数器，只能在常量的表达式中使用。</p>\n<p>Tips : iota在const关键字出现时将被重置为0, const中每新增一行常量声明将使iota计数一次 (<code>iota可理解为const语句块中的行索引</code>)。</p>\n<p>应用场景: 使用iota能简化定义，在定义枚举时很有用。</p>\n<p>下面示例中几个常见的iota示例:</p>\n<ul>\n<li><p>1.使用<code>_</code>跳过某些值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">  n2        <span class=\"comment\">//1</span></span><br><span class=\"line\">  _</span><br><span class=\"line\">  n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.iota声明中间插队</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  n1 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br><span class=\"line\">  n2 = <span class=\"number\">100</span>  <span class=\"comment\">//100</span></span><br><span class=\"line\">  n3 = <span class=\"literal\">iota</span> <span class=\"comment\">//2</span></span><br><span class=\"line\">  n4        <span class=\"comment\">//3</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> n5 = <span class=\"literal\">iota</span> <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.多个iota定义在一行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  a, b = <span class=\"literal\">iota</span> + <span class=\"number\">1</span>, <span class=\"literal\">iota</span> + <span class=\"number\">2</span> <span class=\"comment\">//1,2</span></span><br><span class=\"line\">  c, d                      <span class=\"comment\">//2,3</span></span><br><span class=\"line\">  e, f                      <span class=\"comment\">//3,4</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.定义数量级 （这里的&lt;&lt;表示左移操作，1&lt;&lt;10表示将1的二进制表示向左移10位，也就是由1变成了10000000000，也就是十进制的1024。同理2&lt;&lt;2表示将2的二进制表示向左移2位，也就是由10变成了1000，也就是十进制的8。）</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  _  = <span class=\"literal\">iota</span></span><br><span class=\"line\">  KB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  MB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  GB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  TB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  PB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单一常量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pi = <span class=\"number\">3.1415926535898</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 批量常量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  e    = <span class=\"number\">2.7182</span></span><br><span class=\"line\">  flag = <span class=\"literal\">false</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特殊批量常量声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  a = <span class=\"number\">1</span></span><br><span class=\"line\">  b</span><br><span class=\"line\">  _</span><br><span class=\"line\">  c</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// iota 常量计数器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  _     = <span class=\"literal\">iota</span>               <span class=\"comment\">// 0</span></span><br><span class=\"line\">  d, e1 = <span class=\"literal\">iota</span> + <span class=\"number\">1</span>, <span class=\"literal\">iota</span> + <span class=\"number\">2</span> <span class=\"comment\">// 2,3 常量名称不能重复</span></span><br><span class=\"line\">  f, g  = <span class=\"literal\">iota</span> + <span class=\"number\">1</span>, <span class=\"literal\">iota</span> + <span class=\"number\">2</span> <span class=\"comment\">// 3,4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  _  = <span class=\"literal\">iota</span>             <span class=\"comment\">// 0</span></span><br><span class=\"line\">  KB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>) <span class=\"comment\">// 1024</span></span><br><span class=\"line\">  MB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  GB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  TB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">  PB = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">10</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"pi :\"</span>, pi)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"e :\"</span>, e, <span class=\"string\">\" , flag:\"</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"特殊批量常量声明:\"</span>, a, b, c)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"iota 常量计数器 :\"</span>, d, e1, f, g)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"文件体积大小 :\"</span>, KB, MB, GB, TB, PB)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pi : <span class=\"number\">3.1415926535898</span></span><br><span class=\"line\">e : <span class=\"number\">2.7182</span>  , flag: <span class=\"literal\">false</span></span><br><span class=\"line\">特殊批量常量声明: <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"literal\">iota</span> 常量计数器 : <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\">文件体积大小 : <span class=\"number\">1024</span> <span class=\"number\">1048576</span> <span class=\"number\">1073741824</span> <span class=\"number\">1099511627776</span> <span class=\"number\">1125899906842624</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 常量声明后不能在程序中进行重新赋值更改。</p>\n<hr>\n<h2 id=\"0x01-Go语言基础之基本数据类型\"><a href=\"#0x01-Go语言基础之基本数据类型\" class=\"headerlink\" title=\"0x01 Go语言基础之基本数据类型\"></a>0x01 Go语言基础之基本数据类型</h2><p><strong>基本数据类型:</strong><br>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。</p>\n<p>Tips : Go 语言的基本类型和其他语言大同小异。</p>\n<h3 id=\"1-整型\"><a href=\"#1-整型\" class=\"headerlink\" title=\"1.整型\"></a>1.整型</h3><p>整型分为以下两个大类： 按长度分为：<code>int8、int16、int32、int64</code> 对应的无符号整型：<code>uint8、uint16、uint32、uint64</code></p>\n<p>其中，<code>uint8</code>就是我们熟知的<code>byte</code>型，<code>int16</code>对应C语言中的<code>short</code>型，<code>int64</code>对应C语言中的<code>long</code>型。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uint8</td>\n<td>无符号 8位整型 (0 到 255)</td>\n</tr>\n<tr>\n<td>uint16</td>\n<td>无符号 16位整型 (0 到 65535)</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>无符号 32位整型 (0 到 4294967295)</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>无符号 64位整型 (0 到 18446744073709551615)</td>\n</tr>\n<tr>\n<td>int8</td>\n<td>有符号 8位整型 (-128 到 127)</td>\n</tr>\n<tr>\n<td>int16</td>\n<td>有符号 16位整型 (-32768 到 32767)</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>有符号 32位整型 (-2147483648 到 2147483647)</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h4 id=\"特殊整型\"><a href=\"#特殊整型\" class=\"headerlink\" title=\"特殊整型\"></a>特殊整型</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uint</td>\n<td>32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td>\n</tr>\n<tr>\n<td>int</td>\n<td>32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td>\n</tr>\n<tr>\n<td>uintptr</td>\n<td>无符号整型，用于存放一个指针</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> 在使用<code>int</code>和 <code>uint</code>类型时，不能假定它是32位或64位的整型，而是考虑<code>int</code>和<code>uint</code>可能在不同平台上的差异。</p>\n<p><strong>注意事项：</strong> 获取对象的长度的内建<code>len()</code>函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用<code>int</code>来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code>int</code>和 <code>uint</code>。</p>\n<p><br/></p>\n<h4 id=\"数字字面量语法（Number-literals-syntax）\"><a href=\"#数字字面量语法（Number-literals-syntax）\" class=\"headerlink\" title=\"数字字面量语法（Number literals syntax）\"></a>数字字面量语法（Number literals syntax）</h4><p>Go1.13版本之后引入了数字字面量语法，这样便于开发者以<code>二进制、八进制或十六进制浮点数</code>的格式定义数字，例如：</p>\n<ul>\n<li><code>v := 0b00101101</code>， 代表二进制的 101101，相当于十进制的 45。</li>\n<li><code>v := 0o377</code>，代表八进制的 377，相当于十进制的 255。<br><code>- v := 0x1p-2</code>，代表十六进制的 1 除以 2²，也就是 0.25。</li>\n</ul>\n<p>而且还允许我们用 <code>_</code> 来分隔数字，比如说： <code>v := 123_456</code> 表示 v 的值等于 123456。</p>\n<p><br/></p>\n<p><strong>简单示例:</strong> 我们可以借助fmt函数来将一个整数以不同进制形式展示。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 十进制以不同的进制展示</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%b \\n\"</span>, a)   <span class=\"comment\">// 1010  占位符%b表示二进制</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%o \\n\"</span>, a)   <span class=\"comment\">// 12    占位符%o表示八进制</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%d \\n\"</span>, a)   <span class=\"comment\">// 10    占位符%d表示十进制</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"0x%x \\n\"</span>, a) <span class=\"comment\">// 0xa  占位符%x表示十六进制</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 八进制(以0开头)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b <span class=\"keyword\">int</span> = <span class=\"number\">077</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%b \\n\"</span>, b)   <span class=\"comment\">// 111111</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%o \\n\"</span>, b)   <span class=\"comment\">// 77</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%d \\n\"</span>, b)   <span class=\"comment\">// 63</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"0x%x \\n\"</span>, b) <span class=\"comment\">// 0x3f</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 十六进制(以0x开头)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c <span class=\"keyword\">int</span> = <span class=\"number\">0xff</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"0x%x \\n\"</span>, c) <span class=\"comment\">// 0xff</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"0X%X \\n\"</span>, c) <span class=\"comment\">// 0xFF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数字字面量语法（Number literals syntax）</span></span><br><span class=\"line\">  binary := <span class=\"number\">0</span>b1111</span><br><span class=\"line\">  octal := <span class=\"number\">0</span>o17</span><br><span class=\"line\">  digital := <span class=\"number\">15</span></span><br><span class=\"line\">  hexadecimal := <span class=\"number\">0xf</span></span><br><span class=\"line\">  specialhexa := <span class=\"number\">0x8</span>p<span class=\"number\">-2</span>    <span class=\"comment\">// 8 / 2^2 = 2</span></span><br><span class=\"line\">  underline := <span class=\"number\">10</span>_24</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"binary : %b , digital ： %d\\n\"</span>, binary, binary)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"octal : %o , digital ： %d\\n\"</span>, octal, octal)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"digital type (变量类型): %T,digital ： %d\\n\"</span>, digital, digital)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"hexadecimal : %x, digital ： %d, specialhexa : %f\\n\"</span>, hexadecimal, hexadecimal, specialhexa)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"underline : %d \\n\"</span>, underline)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Int 整型示例:</span></span><br><span class=\"line\">1010 </span><br><span class=\"line\">12 </span><br><span class=\"line\">10 </span><br><span class=\"line\">0xa </span><br><span class=\"line\">111111 </span><br><span class=\"line\">77 </span><br><span class=\"line\">63 </span><br><span class=\"line\">0x3f </span><br><span class=\"line\">0xff </span><br><span class=\"line\">0XFF </span><br><span class=\"line\">binary : 1111 , digital ： 15</span><br><span class=\"line\">octal : 17 , digital ： 15</span><br><span class=\"line\">digital <span class=\"built_in\">type</span> (变量类型): int,digital ： 15</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"2-浮点型\"><a href=\"#2-浮点型\" class=\"headerlink\" title=\"2.浮点型\"></a>2.浮点型</h3><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。<br>这两种浮点型数据格式遵循<code>IEEE 754</code>标准：</p>\n<ul>\n<li><code>float32</code> 的浮点数的最大范围约为 <code>3.4e38</code>，其常量定义：<code>math.MaxFloat32</code>。 </li>\n<li><code>float64</code> 的浮点数的最大范围约为 <code>1.8e308</code>，其常量定义：<code>math.MaxFloat64</code>。</li>\n</ul>\n<p><br/></p>\n<p>简单示例: 打印浮点数时，可以使用<code>fmt</code>包配合动词<code>%f</code>，代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    <span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> floatnumber <span class=\"keyword\">float64</span> = <span class=\"number\">1024.00</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"数据类型: %T , floatnumber: %.1f\\n\"</span>, floatnumber, floatnumber)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%f,%.2f\\n\"</span>, math.Pi, math.Pi) <span class=\"comment\">// 保留小数点后两位</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"float32的浮点数的最大范围 :%d ~ %f\\n\"</span>, <span class=\"number\">0</span>, math.MaxFloat32)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"float64的浮点数的最大范围 :%d ~ %f\\n\"</span>, <span class=\"number\">0</span>, math.MaxFloat64)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据类型: <span class=\"keyword\">float64</span> , floatnumber: <span class=\"number\">1024.0</span></span><br><span class=\"line\"><span class=\"number\">3.141593</span>,<span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"keyword\">float32</span>的浮点数的最大范围 :<span class=\"number\">0</span> ~ <span class=\"number\">340282346638528859811704183484516925440.000000</span></span><br><span class=\"line\"><span class=\"keyword\">float64</span>的浮点数的最大范围 :<span class=\"number\">0</span> ~ <span class=\"number\">179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-复数\"><a href=\"#3-复数\" class=\"headerlink\" title=\"3.复数\"></a>3.复数</h3><p>描述: 复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p>\n<p>例如: complex64和complex128类型变量输出示例<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c1 <span class=\"keyword\">complex64</span></span><br><span class=\"line\">c1 = <span class=\"number\">1</span> + <span class=\"number\">2i</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c2 <span class=\"keyword\">complex128</span></span><br><span class=\"line\">c2 = <span class=\"number\">2</span> + <span class=\"number\">3i</span></span><br><span class=\"line\">fmt.Println(c1) <span class=\"comment\">// (1+2i)</span></span><br><span class=\"line\">fmt.Println(c2) <span class=\"comment\">// (2+3i)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-布尔值\"><a href=\"#4-布尔值\" class=\"headerlink\" title=\"4.布尔值\"></a>4.布尔值</h3><p>Go语言中以<code>bool</code>类型进行声明布尔型数据，布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(<span class=\"string\">\"# 4.布尔型示例:\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag <span class=\"keyword\">bool</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"数据类型: %T ,任意类型输出: %v\"</span>, flag, flag)  <span class=\"comment\">// 数据类型: bool ,任意类型输出: true</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>布尔类型变量的默认值为<code>false</code>。</li>\n<li>Go 语言中不允许将整型强制转换为布尔型.</li>\n<li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li>\n</ol>\n<p><br></p>\n<h3 id=\"5-字符串\"><a href=\"#5-字符串\" class=\"headerlink\" title=\"5.字符串\"></a>5.字符串</h3><p>描述: Go语言中的字符串<code>以原生数据类型</code>出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。<br>Go 语言里的字符串的内部实现使用<code>UTF-8</code>编码。 字符串的值为<code>双引号(&quot;)</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">s2 := <span class=\"string\">\"你好\"</span></span><br><span class=\"line\">c1 := <span class=\"string\">'g'</span></span><br><span class=\"line\">c2 := <span class=\"string\">'o'</span></span><br></pre></td></tr></table></figure><br>Tips : Go 语言中用双引号包裹的是<code>字符串</code>，而单引号包裹的是<code>字符</code>。</p>\n<p><br></p>\n<h4 id=\"字符串转义符\"><a href=\"#字符串转义符\" class=\"headerlink\" title=\"字符串转义符\"></a>字符串转义符</h4><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\r</code></td>\n<td>回车符（返回行首）</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符（直接跳到下一行的同列位置）</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠</td>\n</tr>\n</tbody>\n</table>\n<p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s1 := <span class=\"string\">\"'c:\\\\weiyigeek\\\\go\\\\hello'\"</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"str :=\"</span>,s1)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"str := \\\"c:\\\\Code\\\\weiyigeek\\\\go.exe\\\"\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">第二行</span></span><br><span class=\"line\"><span class=\"string\">第三行</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">s2 := <span class=\"string\">`c:\\weiyigeek\\go\\hello`</span>  <span class=\"comment\">// 注意点此处没用转义符(\\) 也能输出路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(s1,s2)</span><br></pre></td></tr></table></figure>\n<p>Tips: 反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>\n<p><br></p>\n<h4 id=\"字符串的常用操作\"><a href=\"#字符串的常用操作\" class=\"headerlink\" title=\"字符串的常用操作\"></a>字符串的常用操作</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>len(str)</td>\n<td>求长度</td>\n</tr>\n<tr>\n<td>+或fmt.Sprintf</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>strings.Split</td>\n<td>分割</td>\n</tr>\n<tr>\n<td>strings.C””ontains</td>\n<td>判断是否包含</td>\n</tr>\n<tr>\n<td>strings.HasPrefix,strings.HasSuffix</td>\n<td>前缀/后缀判断</td>\n</tr>\n<tr>\n<td>strings.Index(),strings.LastIndex()</td>\n<td>子串出现的位置</td>\n</tr>\n<tr>\n<td>strings.Join(a[]string, sep string)</td>\n<td>join操作</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串型示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stringdemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 字符</span></span><br><span class=\"line\">  c1 := <span class=\"string\">'a'</span></span><br><span class=\"line\">  c2 := <span class=\"string\">'A'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 字符串 (单行与多行以及转义)</span></span><br><span class=\"line\">  s1 := <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">  s2 := <span class=\"string\">\"姓名\"</span></span><br><span class=\"line\">  s3 := <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  这是一个 </span></span><br><span class=\"line\"><span class=\"string\">        多行字符串案例！</span></span><br><span class=\"line\"><span class=\"string\">  This is mutlilineString Example！</span></span><br><span class=\"line\"><span class=\"string\">  Let's Go   // 特点：原样输出</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">  <span class=\"comment\">// 转义演示</span></span><br><span class=\"line\">  s4 := <span class=\"string\">\"'c:\\\\weiyigeek\\\\go\\\\hello'\"</span></span><br><span class=\"line\">  s5 := <span class=\"string\">`c:\\weiyigeek\\go\\hello`</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"c1 char : %c,\\t c2 char %c -&gt; digital : %d\\n\"</span>, c1, c2, c2)</span><br><span class=\"line\">  fmt.Println(s1, s2)</span><br><span class=\"line\">  fmt.Println(s3)</span><br><span class=\"line\">  fmt.Println(s4, s5)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 字符串常用函数</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"s1 String length:\"</span>, <span class=\"built_in\">len</span>(s1), <span class=\"string\">\"s2 string length:\"</span>, <span class=\"built_in\">len</span>(s2))</span><br><span class=\"line\"></span><br><span class=\"line\">  info := fmt.Sprintf(<span class=\"string\">\"%s (%s): %s\"</span>, s1, s2, <span class=\"string\">\"WeiyiGeek\"</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Infomation : \"</span>+<span class=\"string\">\"个人信息\"</span>, info)</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"字符串分割 :\"</span>, strings.Split(s5, <span class=\"string\">\"\\\\\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"判断字符串是否包含go\"</span>, strings.Contains(s3, <span class=\"string\">\"go\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(strings.HasPrefix(s1, <span class=\"string\">\"N\"</span>), strings.HasSuffix(s1, <span class=\"string\">\"e\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(strings.Index(s4, <span class=\"string\">\"weiyigeek\"</span>), strings.LastIndex(s4, <span class=\"string\">\"weiyigeek\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  s6 := strings.Split(s5, <span class=\"string\">\"\\\\\"</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"字符串间隔符 : \"</span>, strings.Join(s6, <span class=\"string\">\"-\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 5.字符串型示例:</span></span><br><span class=\"line\">c1 char : a,   c2 char A -&gt; digital : 65</span><br><span class=\"line\">Name 姓名</span><br><span class=\"line\"></span><br><span class=\"line\">  这是一个 </span><br><span class=\"line\">        多行字符串案例！</span><br><span class=\"line\">  This is mutlilineString Example！</span><br><span class=\"line\">  Let<span class=\"string\">'s Go   // 特点：原样输出</span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">'</span>c:\\weiyigeek\\go\\hello<span class=\"string\">' c:\\weiyigeek\\go\\hello</span></span><br><span class=\"line\"><span class=\"string\">s1 String length: 4 s2 string length: 6</span></span><br><span class=\"line\"><span class=\"string\">Infomation : 个人信息 Name (姓名): WeiyiGeek</span></span><br><span class=\"line\"><span class=\"string\">字符串分割 : [c: weiyigeek go hello]</span></span><br><span class=\"line\"><span class=\"string\">判断字符串是否包含go false</span></span><br><span class=\"line\"><span class=\"string\">true true</span></span><br><span class=\"line\"><span class=\"string\">4 4</span></span><br><span class=\"line\"><span class=\"string\">字符串间隔符 :  c:-weiyigeek-go-hello</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"6-byte和rune类型\"><a href=\"#6-byte和rune类型\" class=\"headerlink\" title=\"6.byte和rune类型\"></a>6.byte和rune类型</h3><p>描述: 组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'中'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'x'</span></span><br><span class=\"line\">c := <span class=\"string\">'a'</span></span><br></pre></td></tr></table></figure>\n<p>Go 语言的字符有以下两种：</p>\n<ul>\n<li><ol>\n<li><code>uint8</code>类型，或者叫 byte 型，代表了<code>ASCII码</code>的一个字符（1B）。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><code>rune</code>类型，代表一个 <code>UTF-8字符</code>, 并且一个rune字符由一个或多个byte组成（3B~4B）。</li>\n</ol>\n</li>\n</ul>\n<p>Tips : 当需要处理中文、日文或者其他复合字符时，则需要用到<code>rune</code>类型。<code>rune</code>类型实际是一个<code>int32</code>。</p>\n<p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p>\n<p>简单示例: </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">traversalString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s := <span class=\"string\">\"hello沙河\"</span></span><br><span class=\"line\">   <span class=\"comment\">// byte 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v(%c) \"</span>, s[i], s[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  <span class=\"comment\">// rune 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> s &#123; </span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v(%c) \"</span>, r, r)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// byte 类型 (中文乱码)</span><br><span class=\"line\">104(h) 101(e) 108(l) 108(l) 111(o) 230(æ) 178(²) 153() 230(æ) 178(²) 179(³) </span><br><span class=\"line\"></span><br><span class=\"line\">// rune 类型 (中文正常)</span><br><span class=\"line\">104(h) 101(e) 108(l) 108(l) 111(o) 27801(沙) 27827(河)</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q: 为什么出现上述情况?</strong></p>\n<p>答: 因为UTF8编码下<code>一个中文汉字由3~4个字节</code>（4*8bit）组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>\n<p>Tips : 字符串底层是一个byte数组，所以可以和<code>[]byte</code>类型相互转换。字符串是不能修改的字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 </p>\n<p><br/></p>\n<h3 id=\"7-类型转换\"><a href=\"#7-类型转换\" class=\"headerlink\" title=\"7.类型转换\"></a>7.类型转换</h3><p>描述：Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p>\n<p>强制类型转换的基本语法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(表达式)  <span class=\"comment\"># 其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</span></span><br></pre></td></tr></table></figure>\n<p>Tips : Boolen 类型不能强制转换为整型。</p>\n<p><br></p>\n<p><strong>整型转浮点型</strong></p>\n<p>比如：计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrtDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a, b = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c <span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"comment\">// math.Sqrt() 接收的参数是float64类型，需要强制转换</span></span><br><span class=\"line\">  c = <span class=\"keyword\">int</span>(math.Sqrt(<span class=\"keyword\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">  fmt.Println(c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Tips : 在Go语言中不同类型的值不能直接赋值，例如float32类型变量a的值不能直接赋值给floa64类型变量b的值。</p>\n<p><br></p>\n<p><strong>字符串类型转换</strong></p>\n<p>描述: 如果修改字符串，需要先将其转换成<code>[]rune</code>或<code>[]byte</code>，完成后再转换为<code>string</code>。无论哪种转换，<code>都会重新分配内存，并复制字节数组</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeString</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s1 := <span class=\"string\">\"big\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 强制类型转换</span></span><br><span class=\"line\">  byteS1 := []<span class=\"keyword\">byte</span>(s1)</span><br><span class=\"line\">  byteS1[<span class=\"number\">0</span>] = <span class=\"string\">'p'</span></span><br><span class=\"line\">  fmt.Println(<span class=\"keyword\">string</span>(byteS1))</span><br><span class=\"line\"></span><br><span class=\"line\">  s2 := <span class=\"string\">\"白萝卜\"</span></span><br><span class=\"line\">  runeS2 := []<span class=\"keyword\">rune</span>(s2)</span><br><span class=\"line\">  runeS2[<span class=\"number\">0</span>] = <span class=\"string\">'红'</span></span><br><span class=\"line\">  fmt.Println(<span class=\"keyword\">string</span>(runeS2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Tips : 在一个字符串中如果既有中文也存在英文，我们则可以使用<code>byte[]类型</code>(1B)来存放ASCII码表示的字符(0~255)，如果是中文则使用<code>rune[]</code>(4B)类型来存放或者周转。</p>\n<p><br></p>\n<p><strong>案例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Byte与Rune类型示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">brdemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = <span class=\"string\">'a'</span> <span class=\"comment\">// int32 类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = <span class=\"string\">'A'</span> <span class=\"comment\">// int32 类型</span></span><br><span class=\"line\">  z1 := <span class=\"string\">'中'</span>    <span class=\"comment\">// int32 类型</span></span><br><span class=\"line\">  z2 := <span class=\"string\">'文'</span>    <span class=\"comment\">// int32 类型</span></span><br><span class=\"line\">  z3 := <span class=\"string\">\"中\"</span>    <span class=\"comment\">// string 类型 (双引号)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 字符不同格式输出</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"字符 ：%d (%c) , %d (%c) \\n\"</span>, c1, c1, c2, c2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"中文字符 ：%d (%v) = %c , %d (%v) = %c \\n\"</span>, z1, z1, z1, z2, z2, z2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"单双引号不同类型 : c1 = %c (%T) , z2 = %c (%T) ,  z3 = %s (%T) \\n\"</span>, c1, c1, z2, z2, z3, z3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 中英文字符串修改</span></span><br><span class=\"line\">  s1 := <span class=\"string\">\"a和我都爱中国\"</span></span><br><span class=\"line\">  s2 := <span class=\"string\">\"为 Hello 中国 World,Go 语言 学习\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将字符类型转化为byte类型</span></span><br><span class=\"line\">  c3 := <span class=\"keyword\">byte</span>(c2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"强制转化类型 : c2 = %c (%T) , byte(c2) = %c (%T) \\n\"</span>, c2, c2, c3, c3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将字符串类型转化为string类型</span></span><br><span class=\"line\">  r1 := []<span class=\"keyword\">rune</span>(s1) <span class=\"comment\">// 强制转化字符串为一个rune切片</span></span><br><span class=\"line\">  r1[<span class=\"number\">0</span>] = <span class=\"string\">'您'</span>      <span class=\"comment\">// 注意此处需传入为字符</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"修改后中文字符串输出(未类型转换)：\"</span>, r1)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"修改后中文字符串输出(已类型转换)：\"</span>, s1, <span class=\"keyword\">string</span>(r1)) <span class=\"comment\">// 强制转化rune切片为字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将整型转化成为浮点数类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 计算直角三角形的斜边长</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a, b = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c <span class=\"keyword\">int</span> = <span class=\"keyword\">int</span>(math.Sqrt(<span class=\"keyword\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"计算直角三角形的斜边长 (a=3,b=4) c =\"</span>, c)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 统计字符串中中文个数</span></span><br><span class=\"line\">  res := []<span class=\"keyword\">rune</span>(s2)</span><br><span class=\"line\">  reslen := <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\">  count := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; reslen; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> res[i] &gt; <span class=\"number\">255</span> &#123;</span><br><span class=\"line\">      count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"字符串:%s (Length = %d),一共有 %d 个中文字符\"</span>, s2, reslen, count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 6.Byte与Rune型示例:</span></span><br><span class=\"line\">字符 ：97 (a) , 65 (A) </span><br><span class=\"line\">中文字符 ：20013 (20013) = 中 , 25991 (25991) = 文 </span><br><span class=\"line\">单双引号不同类型 : c1 = a (int32) , z2 = 文 (int32) ,  z3 = 中 (string) </span><br><span class=\"line\">强制转化类型 : c2 = A (int32) , byte(c2) = A (uint8) </span><br><span class=\"line\">修改后中文字符串输出(未类型转换)： [24744 21644 25105 37117 29233 20013 22269]</span><br><span class=\"line\">修改后中文字符串输出(已类型转换)： a和我都爱中国 您和我都爱中国</span><br><span class=\"line\">计算直角三角形的斜边长 (a=3,b=4) c = 5</span><br><span class=\"line\">字符串:为 Hello 中国 World,Go 语言 学习 (Length = 25),一共有 7 个中文字符</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-Go语言基础之运算符\"><a href=\"#0x02-Go语言基础之运算符\" class=\"headerlink\" title=\"0x02 Go语言基础之运算符\"></a>0x02 Go语言基础之运算符</h2><p><strong>什么是运算符?</strong></p>\n<blockquote>\n<p>答: 运算符用于在程序运行时执行数学或逻辑运算。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"1-分类说明\"><a href=\"#1-分类说明\" class=\"headerlink\" title=\"1.分类说明\"></a>1.分类说明</h3><p>描述: 与其他编程语言类似 Go 语言内置的运算符有如下几种</p>\n<ul>\n<li><ol>\n<li>算术运算符</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>关系运算符</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>逻辑运算符</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>位运算符</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>赋值运算符</li>\n</ol>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-算术运算符\"><a href=\"#2-算术运算符\" class=\"headerlink\" title=\"2.算术运算符\"></a>2.算术运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>相加</td>\n</tr>\n<tr>\n<td>-</td>\n<td>相减</td>\n</tr>\n<tr>\n<td>*</td>\n<td>相乘</td>\n</tr>\n<tr>\n<td>/</td>\n<td>相除</td>\n</tr>\n<tr>\n<td>%</td>\n<td>求余</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong> <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p>\n<p><br></p>\n<h3 id=\"3-关系运算符\"><a href=\"#3-关系运算符\" class=\"headerlink\" title=\"3.关系运算符\"></a>3.关系运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>检查两个值是否相等，如果相等返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<p>Tips : Go 语言是强类型的所以必须相同类型变量才能进行比较。</p>\n<p><br></p>\n<h3 id=\"4-逻辑运算符\"><a href=\"#4-逻辑运算符\" class=\"headerlink\" title=\"4.逻辑运算符\"></a>4.逻辑运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False。</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>\\</td>\n<td></td>\n<td>逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False。</td>\n</tr>\n<tr>\n<td>!</td>\n<td>逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True。</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"5-位运算符\"><a href=\"#5-位运算符\" class=\"headerlink\" title=\"5.位运算符\"></a>5.位运算符</h3><p>描述: 位运算符对整数在内存中的二进制位进行操作。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>参与运算的两数各对应的二进位相与。 （两位均为1才为1）</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>参与运算的两数各对应的二进位相或。 （两位有一个为1就为1）</td>\n</tr>\n<tr>\n<td>^</td>\n<td>参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。 （两位不一样则为1）</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移n位就是乘以2的n次方。  “a&lt;&lt;b”是把a的各二进位全部左移b位，高位丢弃，低位补0。</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移n位就是除以2的n次方。  “a&gt;&gt;b”是把a的各二进位全部右移b位。</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"6-赋值运算符\"><a href=\"#6-赋值运算符\" class=\"headerlink\" title=\"6.赋值运算符\"></a>6.赋值运算符</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>简单的赋值运算符，将一个表达式的值赋给一个左值</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>相加后再赋值</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>相减后再赋值</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>相乘后再赋值</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>相除后再赋值</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>求余后再赋值</td>\n</tr>\n<tr>\n<td>&lt;&lt;=</td>\n<td>左移后赋值</td>\n</tr>\n<tr>\n<td>&gt;&gt;=</td>\n<td>右移后赋值</td>\n</tr>\n<tr>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>=</td>\n<td>按位或后赋值</td>\n</tr>\n<tr>\n<td>^=</td>\n<td>按位异或后赋值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a += <span class=\"number\">1</span>  <span class=\"comment\">// a = a + 1</span></span><br><span class=\"line\">a %= <span class=\"number\">3</span>  <span class=\"comment\">// a = a % 3</span></span><br><span class=\"line\">a &lt;&lt;= <span class=\"number\">4</span> <span class=\"comment\">// a = a &lt;&lt; 4 </span></span><br><span class=\"line\">a ^= <span class=\"number\">5</span>  <span class=\"comment\">// a = a ^ 5</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x03-Go语言基础之流程控制\"><a href=\"#0x03-Go语言基础之流程控制\" class=\"headerlink\" title=\"0x03 Go语言基础之流程控制\"></a>0x03 Go语言基础之流程控制</h2><p><strong>Q: 什么是流程控制</strong></p>\n<blockquote>\n<p>流程控制是每种编程语言控制逻辑走向和执行次序的重要部分，流程控制可以说是一门语言的“经脉”。</p>\n</blockquote>\n<p>Tips : Go语言中最常用的流程控制有<code>if</code>和<code>for</code>，而<code>switch</code>和<code>goto</code>主要是为了简化代码、降低重复代码而生的结构，属于扩展类的流程控制。</p>\n<p><br/></p>\n<h3 id=\"1-if-else-分支结构\"><a href=\"#1-if-else-分支结构\" class=\"headerlink\" title=\"1.if else(分支结构)\"></a>1.if else(分支结构)</h3><h4 id=\"if条件判断基本写法\"><a href=\"#if条件判断基本写法\" class=\"headerlink\" title=\"if条件判断基本写法\"></a>if条件判断基本写法</h4><p>描述: Go语言中<code>if</code>条件判断的格式如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 表达式<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">  分支<span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> 表达式<span class=\"number\">2</span> &#123;</span><br><span class=\"line\">  分支<span class=\"number\">2</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  分支<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当表达式1的结果为<code>true</code>时，执行分支1，否则判断表达式2，如果满足则执行分支2，都不满足时，则执行分支3。 if判断中的<code>else if</code>和<code>else</code>都是可选的，可以根据实际需要进行选择。</p>\n<p>Go语言规定与<code>if</code>匹配的左括号<code>{</code>必须与<code>if和表达式</code>放在同一行，<code>{</code>放在其他位置会触发编译错误。 同理，与<code>else</code>匹配的<code>{</code>也必须与<code>else</code>写在同一行，<code>else</code>也必须与上一个<code>if</code>或<code>else if</code>右边的大括号在同一行。</p>\n<p>示例1:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ifDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  score := <span class=\"number\">65</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> score &gt;= <span class=\"number\">90</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt; <span class=\"number\">75</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"B\"</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"C\"</span>) <span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"if条件判断特殊写法\"><a href=\"#if条件判断特殊写法\" class=\"headerlink\" title=\"if条件判断特殊写法\"></a>if条件判断特殊写法</h4><p>描述: if条件判断还有一种特殊的写法，可以在 if 表达式之前添加一个执行语句，再根据变量值进行判断，举个例子：</p>\n<p>示例2：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ifDemo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  score := <span class=\"number\">88</span> <span class=\"comment\">// 注意变量作用域的影响</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> score := <span class=\"number\">65</span>; score &gt;= <span class=\"number\">90</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"A\"</span>, score)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> score &gt; <span class=\"number\">75</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"B\"</span>, score)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"C\"</span>, score) <span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"score : \"</span>, score)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C 65</span><br><span class=\"line\">score :  88</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>思考题：</strong> 上下两种写法的区别在哪里？</p>\n<blockquote>\n<p>答: 上述 示例1 与 示例2 区别在于定义 score 变量位置得不同, 示例1中的score变量在函数代码块中有效, 而示例2中的score变量作用域只在<code>if...else</code>代码块中有效。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"2-for-循环结构\"><a href=\"#2-for-循环结构\" class=\"headerlink\" title=\"2.for(循环结构)\"></a>2.for(循环结构)</h3><p>描述: Go 语言中的所有循环类型均可以使用<code>for</code>关键字来完成。</p>\n<p>for循环的基本格式如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 初始语句;条件表达式;结束语句&#123;</span><br><span class=\"line\">   循环体语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>条件表达式返回<code>true</code>时循环体不停地进行循环，直到条件表达式返回<code>false</code>时自动退出循环。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">forDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for循环的初始语句可以被忽略，但是初始语句后的分号必须要写，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">forDemo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for循环的初始语句和结束语句都可以省略，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">forDemo3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i &lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for无限循环，这种写法类似于其他编程语言中的<code>while</code>，在<code>while</code>后添加一个条件表达式，满足条件表达式时持续循环，否则结束循环。<br>例如: for循环可以通过<code>break</code>、<code>goto</code>、<code>return</code>、<code>panic</code>语句强制退出循环。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  循环体语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-for-range-键值循环\"><a href=\"#3-for-range-键值循环\" class=\"headerlink\" title=\"3.for range(键值循环)\"></a>3.for range(键值循环)</h3><p>描述: Go语言中可以使用<code>for range</code>遍历数组、切片、字符串、map 及通道（channel）。</p>\n<p>通过<code>for range</code>遍历的返回值有以下规律：</p>\n<ul>\n<li><ol>\n<li>数组、切片、字符串返回索引和值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>map返回键和值。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>通道（channel）只返回通道内的值。</li>\n</ol>\n</li>\n</ul>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := <span class=\"string\">\"Hello,Go 输出的是中文\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> s1 &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Index : %d ,Value : %s , Number : %v \\n\"</span>, i, <span class=\"keyword\">string</span>(v), v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>输出结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Index : 0 ,Value : H , Number : 72 </span><br><span class=\"line\">Index : 1 ,Value : e , Number : 101 </span><br><span class=\"line\">Index : 2 ,Value : l , Number : 108 </span><br><span class=\"line\">Index : 3 ,Value : l , Number : 108 </span><br><span class=\"line\">Index : 4 ,Value : o , Number : 111 </span><br><span class=\"line\">Index : 5 ,Value : , , Number : 44 </span><br><span class=\"line\">Index : 6 ,Value : G , Number : 71 </span><br><span class=\"line\">Index : 7 ,Value : o , Number : 111 </span><br><span class=\"line\">Index : 8 ,Value :   , Number : 32 </span><br><span class=\"line\">Index : 9 ,Value : 输 , Number : 36755 </span><br><span class=\"line\">Index : 12 ,Value : 出 , Number : 20986 </span><br><span class=\"line\">Index : 15 ,Value : 的 , Number : 30340 </span><br><span class=\"line\">Index : 18 ,Value : 是 , Number : 26159 </span><br><span class=\"line\">Index : 21 ,Value : 中 , Number : 20013 </span><br><span class=\"line\">Index : 24 ,Value : 文 , Number : 25991</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-switch-case-选择语句\"><a href=\"#4-switch-case-选择语句\" class=\"headerlink\" title=\"4.switch case(选择语句)\"></a>4.switch case(选择语句)</h3><p>描述: 使用<code>switch</code>语句可方便地对大量的值进行条件判断，即简化大量判断。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">switchDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  finger := <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> finger &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"大拇指\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"食指\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"中指\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"无名指\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"小拇指\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"无效的输入！\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>Go语言规定每个<code>switch</code>只能有一个<code>default</code>分支, 但一个分支可以有多个值，多个case值中间使用英文逗号分隔。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testSwitch3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> n := <span class=\"number\">7</span>; n &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"奇数\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"偶数\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>分支还可以使用表达式，这时候switch语句后面不需要再跟判断变量。例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">switchDemo4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  age := <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> age &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"好好学习吧\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> age &gt; <span class=\"number\">25</span> &amp;&amp; age &lt; <span class=\"number\">35</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"好好工作吧\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> age &gt; <span class=\"number\">60</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"好好享受吧\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"活着真好\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><code>fallthrough</code>语法: 可以执行满足条件的case的下一个case，是为了兼容C语言中的case设计的（值得学习）。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">switchDemo5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s := <span class=\"string\">\"a\"</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> s == <span class=\"string\">\"a\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">fallthrough</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> s == <span class=\"string\">\"b\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> s == <span class=\"string\">\"c\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>结果输出:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"5-goto-跳转到指定标签\"><a href=\"#5-goto-跳转到指定标签\" class=\"headerlink\" title=\"5.goto(跳转到指定标签)\"></a>5.goto(跳转到指定标签)</h3><p>描述: <code>goto</code>语句通过标签进行代码间的无条件跳转。<code>goto</code>语句可以在快速跳出循环、避免重复退出上有一定的帮助, Go语言中使用<code>goto</code>语句能简化一些代码的实现过程。</p>\n<p>例如:双层嵌套的for循环要退出时<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gotoDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> breakFlag <span class=\"keyword\">bool</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置退出标签</span></span><br><span class=\"line\">        breakFlag = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"%v-%v\\n\"</span>, i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 外层for循环判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> breakFlag &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>goto</code>语句能简化代码：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gotoDemo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置退出标签</span></span><br><span class=\"line\">        <span class=\"keyword\">goto</span> breakTag</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"%v-%v\\n\"</span>, i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"comment\">// 标签</span></span><br><span class=\"line\">  breakTag:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"正结束for循环\"</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"已结束for循环\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0-0</span><br><span class=\"line\">0-1</span><br><span class=\"line\">正结束<span class=\"keyword\">for</span>循环</span><br><span class=\"line\">已结束<span class=\"keyword\">for</span>循环</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"6-break-跳出循环\"><a href=\"#6-break-跳出循环\" class=\"headerlink\" title=\"6.break(跳出循环)\"></a>6.break(跳出循环)</h3><p>描述: <code>break</code>语句可以结束<code>for</code>、<code>switch</code>和<code>select</code>的代码块。</p>\n<p><code>break</code>语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的<code>for</code>、<code>switch</code>和 <code>select</code>的代码块上。 举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">breakDemo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">BREAKDEMO1:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span> BREAKDEMO1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"%v-%v\\n\"</span>, i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-continue-继续下次循环\"><a href=\"#7-continue-继续下次循环\" class=\"headerlink\" title=\"7.continue(继续下次循环)\"></a>7.continue(继续下次循环)</h3><p>描述: <code>continue</code>语句可以结束当前循环，开始下一次的循环迭代过程，仅限在<code>for</code>循环内使用。</p>\n<p>在 <code>continue</code>语句后添加标签时，表示开始标签对应的循环。例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">continueDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">forloop1:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"comment\">// forloop2:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i == <span class=\"number\">2</span> &amp;&amp; j == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span> forloop1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"%v-%v\\n\"</span>, i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}