{"title":"JAVA入门学习九","slug":"编程世界/Java/JAVA入门学习九","date":"2019-10-10T02:34:30.000Z","updated":"2020-10-10T02:37:47.639Z","url":"2019/10-10-288.html","path":"api/articles/2019/10-10-288.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"IO流程进阶学习\"><a href=\"#IO流程进阶学习\" class=\"headerlink\" title=\"IO流程进阶学习\"></a>IO流程进阶学习</h4><h5 id=\"1-序列流\"><a href=\"#1-序列流\" class=\"headerlink\" title=\"1.序列流\"></a>1.序列流</h5><p>描述:序列流可以<code>把多个字节输入流整合成一个</code>, 从序列流中读取数据时将从被整合的第一个流开始读, 读完一个之后继续读第二个以此类推。<br>原因:由于多个输入流写入到一个输出流,代码重复性高则采用序列流进行输出;<br>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#可以将两个输入流整合成一个输入流</span></span><br><span class=\"line\">SequenceInputStream(InputStream s1, InputStream s2) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#序列流整合多个输入流合成一个输入流</span></span><br><span class=\"line\">SequenceInputStream(Enumeration&lt;? extends InputStream&gt; e)</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.SequenceInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Vector;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_SequenceInputStream</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.将两个输入流整合成一个输入流并输出</span></span><br><span class=\"line\">    demo1();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.将多个输入流整合成为一个输入流并输出采用Vector进行实现</span></span><br><span class=\"line\">    FileInputStream fis1 = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);<span class=\"comment\">//创建输入流对象</span></span><br><span class=\"line\">    FileInputStream fis2 = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo.txt\"</span>); <span class=\"comment\">//创建输入流对象</span></span><br><span class=\"line\">    FileInputStream fis3 = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\times.txt\"</span>); <span class=\"comment\">//创建输入流对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Vector&lt;FileInputStream&gt; v = <span class=\"keyword\">new</span> Vector&lt;FileInputStream&gt;(); <span class=\"comment\">//创建集合对象（关键点）</span></span><br><span class=\"line\">    v.add(fis1);  <span class=\"comment\">//将流对象存储进来</span></span><br><span class=\"line\">    v.add(fis2);</span><br><span class=\"line\">    v.add(fis3);</span><br><span class=\"line\">    Enumeration&lt;FileInputStream&gt; en = v.elements(); <span class=\"comment\">//枚举存在流对象元素</span></span><br><span class=\"line\">    SequenceInputStream sis = <span class=\"keyword\">new</span> SequenceInputStream(en); <span class=\"comment\">//将枚举中输入流整合成一个</span></span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\Enumeration.txt\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((b = sis.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">      fos.write(b);</span><br><span class=\"line\">    sis.close();</span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    FileInputStream fis1 = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);<span class=\"comment\">//创建输入流对象</span></span><br><span class=\"line\">    FileInputStream fis2 = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo.txt\"</span>); <span class=\"comment\">//创建输入流对象</span></span><br><span class=\"line\">    SequenceInputStream sis = <span class=\"keyword\">new</span> SequenceInputStream(fis1,fis2); <span class=\"comment\">//整合fis1/fis2两个输入流整合成一个流</span></span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\times.txt\"</span>);  <span class=\"comment\">//创建输出流对象</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[sis.available()];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = sis.read(arr)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      fos.write(arr,<span class=\"number\">0</span>,ch);</span><br><span class=\"line\">      fos.write(<span class=\"string\">\"\\r\\n\"</span>.getBytes());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sis.close();</span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-内存输出流\"><a href=\"#2-内存输出流\" class=\"headerlink\" title=\"2.内存输出流\"></a>2.内存输出流</h5><p><em>什么是内存输出流？</em><br>答：该输出流可以向内存中写数据, 把内存当作一个缓冲区, 写出之后可以一次性获取出所有数据</p>\n<p>使用方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 创建对象: <span class=\"keyword\">new</span> ByteArrayOutputStream()  <span class=\"comment\">//可以防止中文乱码，还有一种方法就是采用字符流</span></span><br><span class=\"line\">* 写出数据: write(<span class=\"keyword\">int</span>), write(<span class=\"keyword\">byte</span>[])</span><br><span class=\"line\">* 获取数据: toByteArray() <span class=\"comment\">//数据可以用 toByteArray()和 toString()检索。</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_ByteArrayOutputStream</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例1.内存输出流案例ByteArrayOutputStream并采用字节数组来循环读取字节数组</span></span><br><span class=\"line\">    FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\times.txt\"</span>);</span><br><span class=\"line\">    ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream(); <span class=\"comment\">//在内存中创建了可以增长得内存数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>]; <span class=\"comment\">//创建字节数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = fis.read(arr)) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">      baos.write(arr,<span class=\"number\">0</span>,ch); <span class=\"comment\">//将读取到的数据写入到内存之中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方式1：将缓冲区数据全部获取除了并且赋值给arr数组</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr1 = baos.toByteArray();</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(arr1));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方式2：将缓存区的内容直接转换伟字符串进行输出(推荐)</span></span><br><span class=\"line\">    System.out.println(baos.toString());  <span class=\"comment\">//注意即使没有调用底层也会默认的帮我们调用toString方法</span></span><br><span class=\"line\">    fis.close();  <span class=\"comment\">//注意事项:内存输出流是不用关闭的当使用完毕后自动释放</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br><span class=\"line\"><span class=\"comment\">// 我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br><span class=\"line\"><span class=\"comment\">// 我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"3-随机访问流\"><a href=\"#3-随机访问流\" class=\"headerlink\" title=\"3.随机访问流\"></a>3.随机访问流</h5><p>描述:RandomAccessFile概述支持对随机访问文件的读取和写入还可以指定位置让文件指针执行，通过响应的方法从文件指针位置进行读写，输入操作读取字节开始在文件指针，并推进文件指针过去的字节读，并且采用随机访问流的好处<code>可以多线程下载</code>;</p>\n<p>RandomAccessFile类不属于流它是Object类的子类。但它融合了InputStream和OutputStream的功能.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.io.RandomAccessFile </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomAccessFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title\">DataOutput</span>, <span class=\"title\">DataInput</span>, <span class=\"title\">Closeable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">RandomAccessFile</span>(<span class=\"title\">File</span> <span class=\"title\">file</span>, <span class=\"title\">String</span> <span class=\"title\">mode</span>)  //#创建一个随机访问文件流读，随意写来，由 <span class=\"title\">File</span>参数指定的文件。  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">RandomAccessFile</span>(<span class=\"title\">String</span> <span class=\"title\">name</span>, <span class=\"title\">String</span> <span class=\"title\">mode</span>)  //#创建一个随机访问文件流，并可选择地写入到具有指定名称的文件中。  </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#常用方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">read</span>()   //从这个文件读取一个字节的数据。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">write</span>()  //将指定的字节写入该文件。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">seek</span>()   //设置文件指针偏移量，从这个文件的开始，在下一个读或写发生。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">length</span>() //返回此文件的长度。</span></span><br></pre></td></tr></table></figure></p>\n<p>补充说明:</p>\n<ul>\n<li>mode的四种模式:<ul>\n<li>“r”只供阅读。调用结果对象的任何写方法都会引发IOException。 </li>\n<li>“rw”开放阅读和写作。如果文件不存在那么将尝试创建它。 </li>\n<li>与”rw”一样，”rws”对读写也是开放的，并且要求对文件内容或元数据的每次更新都要同步写入底层存储设备。 </li>\n<li>与”rw”一样，”rwd”用于读写，并且要求对文件内容的每次更新都要同步写入底层存储设备。 </li>\n</ul>\n</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.RandomAccessFile;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_RandomAccessFile</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基础示例</span></span><br><span class=\"line\">    RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"d:\\\\times.txt\"</span>, <span class=\"string\">\"rw\"</span>); <span class=\"comment\">//注意模式</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件字节数: \"</span>+raf.length());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件描述符对象: \"</span>+raf.getFD());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"读取前offset量: \"</span>+raf.getFilePointer());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"#### 读取内容  #####\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[(<span class=\"keyword\">int</span>)raf.length()]; \t<span class=\"comment\">//防止中文不乱码字节数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = raf.read(arr)) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">      System.out.print(<span class=\"keyword\">new</span> String(arr,<span class=\"number\">0</span>,ch));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"读取后offset量: \"</span>+raf.getFilePointer());</span><br><span class=\"line\">    </span><br><span class=\"line\">    raf.seek(<span class=\"number\">0</span>);   <span class=\"comment\">//初始化读取从头读取</span></span><br><span class=\"line\">    raf.write(<span class=\"number\">97</span>); <span class=\"comment\">//从头写入 (替换了我)</span></span><br><span class=\"line\">    raf.write(<span class=\"string\">\"\\r\\n\"</span>.getBytes()); <span class=\"comment\">//从头写入</span></span><br><span class=\"line\">    raf.seek(<span class=\"number\">0</span>); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = raf.read();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"读取到的字符: \"</span> + (<span class=\"keyword\">char</span>)x); <span class=\"comment\">//从头读取我们输入97 = a</span></span><br><span class=\"line\">    raf.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 文件字节数: 106</span></span><br><span class=\"line\"><span class=\"comment\">// 文件描述符对象: java.io.FileDescriptor@15db9742</span></span><br><span class=\"line\"><span class=\"comment\">// 读取前offset量: 0</span></span><br><span class=\"line\"><span class=\"comment\">// #### 读取内容  #####</span></span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// 爱您,祖国!  //关键点</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br><span class=\"line\"><span class=\"comment\">// 我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">// I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">// I studying JAVA!</span></span><br><span class=\"line\"><span class=\"comment\">// 读取后offset量: 106</span></span><br><span class=\"line\"><span class=\"comment\">// 读取到的字符: a</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"4对象操作流\"><a href=\"#4对象操作流\" class=\"headerlink\" title=\"4对象操作流\"></a>4对象操作流</h5><p>描述：<em>什么是对象操作流?</em><br>答:该流可以将一个对象写出或者读取一个对象到程序中.,也就是执行了序列化和反序列化的操作</p>\n<p>基础语法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写出(序列化): <span class=\"keyword\">new</span> ObjecOutputStream(OutputStream), writeObject()</span><br><span class=\"line\">读取(反序列化): <span class=\"keyword\">new</span> ObjectInputStream(InputStream), readObject()</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_ObjectIO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span>  IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例1.实现对象的序列化和反序列化</span></span><br><span class=\"line\">    demo1();</span><br><span class=\"line\">    <span class=\"comment\">// 示例2:优化对象的序列化和反序列化</span></span><br><span class=\"line\">    demo2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, FileNotFoundException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"#示例1.实现对象的序列化和反序列化\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// (1)实例化对象</span></span><br><span class=\"line\">    Personer p1 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"Java\"</span>,<span class=\"number\">23</span>);</span><br><span class=\"line\">    Personer p2 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"C\"</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (2)创建对象输出流将对象序列化写出到对象</span></span><br><span class=\"line\">    ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\object.txt\"</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (3)将实例化对象经过序列化写入到object.txt中</span></span><br><span class=\"line\">    oos.writeObject(p1);</span><br><span class=\"line\">    oos.writeObject(p2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (4)关闭操作对象输出流</span></span><br><span class=\"line\">    oos.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (5)创建操作对象输入流</span></span><br><span class=\"line\">    ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\object.txt\"</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (6)饭序列号读取对象(注意这里没执行一次readObject便是读取一个对象,但是如果读到末尾还在读会出现EOFException异常);</span></span><br><span class=\"line\">    <span class=\"comment\">// 记住需要向下转型（需要添加类不存在的异常）</span></span><br><span class=\"line\">    Personer fp1 = (Personer) ois.readObject();</span><br><span class=\"line\">    Personer fp2 = (Personer) ois.readObject();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"fp1 = \"</span> + fp1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"fp2 = \"</span> + fp2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (7)关闭操作对象输入流</span></span><br><span class=\"line\">    ois.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, FileNotFoundException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例2:优化对象的序列化和反序列化\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 采用集合方式存储对象然后经过对象输出流的writeObject一次将对象写成</span></span><br><span class=\"line\">    Personer p1 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"张三\"</span>,<span class=\"number\">15</span>);</span><br><span class=\"line\">    Personer p2 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"李四\"</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">    Personer p3 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"王五\"</span>,<span class=\"number\">17</span>);</span><br><span class=\"line\">    Personer p4 = <span class=\"keyword\">new</span> Personer(<span class=\"string\">\"雅虎\"</span>,<span class=\"number\">65</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ArrayList&lt;Personer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Personer&gt;();</span><br><span class=\"line\">    list.add(p1);</span><br><span class=\"line\">    list.add(p2);</span><br><span class=\"line\">    list.add(p3);</span><br><span class=\"line\">    list.add(p4);</span><br><span class=\"line\">    <span class=\"comment\">//创建操作输出流并关联object.txt文件</span></span><br><span class=\"line\">    ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\object.txt\"</span>));</span><br><span class=\"line\">    oos.writeObject(list); <span class=\"comment\">//将集合对象一次性写入</span></span><br><span class=\"line\">    oos.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//反序列化读取</span></span><br><span class=\"line\">    ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\object.txt\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//建立一个arraylist集合接收存储的对象</span></span><br><span class=\"line\">    <span class=\"comment\">//泛型在运行期会被擦除,索引运行期相当于没有泛型</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    ArrayList&lt;Personer&gt; res = (ArrayList&lt;Personer&gt;) ois.readObject(); <span class=\"comment\">//将集合对象一次读取</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历输出反序列对象</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Personer person : res) &#123;</span><br><span class=\"line\">      System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ois.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//序列化对象声明定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Personer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Personer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Personer</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Personer [name=\"</span> + name + <span class=\"string\">\", age=\"</span> + age + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\">#示例1.实现对象的序列化和反序列化</span><br><span class=\"line\">fp1 = Personer [name=Java, age=<span class=\"number\">23</span>]</span><br><span class=\"line\">fp2 = Personer [name=C, age=<span class=\"number\">40</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">#示例2:优化对象的序列化和反序列化</span><br><span class=\"line\">Personer [name=张三, age=<span class=\"number\">15</span>]</span><br><span class=\"line\">Personer [name=李四, age=<span class=\"number\">16</span>]</span><br><span class=\"line\">Personer [name=王五, age=<span class=\"number\">17</span>]</span><br><span class=\"line\">Personer [name=雅虎, age=<span class=\"number\">65</span>]</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项:</em></p>\n<ul>\n<li>如果要实现序列化必须在对象上实现implements Serializeable 接口;</li>\n<li>在类实现过程中不用必须加id号 <code>private static final long serialVersionUID = 2L</code><br><br></li>\n</ul>\n<h5 id=\"5-数据输入输出流\"><a href=\"#5-数据输入输出流\" class=\"headerlink\" title=\"5.数据输入输出流\"></a>5.数据输入输出流</h5><p>描述:<em>什么是数据输入输出流?</em><br>答：DataInputStream和DataOutputStream可以按照基本数据类型大小读写数据，例如按Long大小写出一个数字, 写出时该数据占8字节.读取的时候也可以按照Long类型读取, 一次读取8个字节.</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># java.lang.Object </span></span><br><span class=\"line\"><span class=\"comment\"># java.io.InputStream </span></span><br><span class=\"line\"><span class=\"comment\"># java.io.FilterInputStream </span></span><br><span class=\"line\"><span class=\"comment\"># java.io.DataInputStream </span></span><br><span class=\"line\"><span class=\"comment\"># 输入流是不一定安全的多线程访问。线程安全是可选的是在这个类中的方法的用户的责任。</span></span><br><span class=\"line\">DataInputStream(OutIntStream), ReadInt(), ReadLong() <span class=\"comment\">#数据输输入流可以指定读取的类型</span></span><br><span class=\"line\">DataOutputStream(OutputStream), writeInt(), writeLong()  <span class=\"comment\">#数据输出流可以指定写入的类型</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.DataOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_DataIO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例1.数据输入输出流</span></span><br><span class=\"line\">    <span class=\"comment\">// (1)常规写入FileOutputStream写出流对比操作</span></span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\demo1.txt\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 00000000 00000000 00000011 11100101 #int类型997</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 11100101 =&gt; 229 //存入的时候截取一字节的数据(当然这是我们不想看到的)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * **/</span></span><br><span class=\"line\">    fos.write(<span class=\"number\">997</span>);</span><br><span class=\"line\">    fos.write(<span class=\"number\">998</span>);  <span class=\"comment\">//11100110 -&gt; 230</span></span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">    FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo1.txt\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = fis.read();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = fis.read();</span><br><span class=\"line\">    System.out.println(x + <span class=\"string\">\" - \"</span> + y);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// (2)采用数据输入输出流便不会存在这样的情况</span></span><br><span class=\"line\">    DataOutputStream dos = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\demo1.txt\"</span>));</span><br><span class=\"line\">    dos.writeInt(<span class=\"number\">997</span>); <span class=\"comment\">//存入一个int类型的数据</span></span><br><span class=\"line\">    dos.writeInt(<span class=\"number\">998</span>);</span><br><span class=\"line\">    dos.close();</span><br><span class=\"line\">  </span><br><span class=\"line\">    DataInputStream dis = <span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo1.txt\"</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"占用字节数: \"</span>+ dis.available()+<span class=\"string\">\"B\"</span>); <span class=\"comment\">// 2个Int类型 = 8B 内存空间</span></span><br><span class=\"line\">    x = dis.readInt();</span><br><span class=\"line\">    y = dis.readInt();</span><br><span class=\"line\">    System.out.println(x + <span class=\"string\">\" - \"</span> + y);</span><br><span class=\"line\">    dis.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">229 - 230</span><br><span class=\"line\">占用字节数: 8B</span><br><span class=\"line\">997 - 998</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"6-标准输入输出流\"><a href=\"#6-标准输入输出流\" class=\"headerlink\" title=\"6.标准输入输出流\"></a>6.标准输入输出流</h5><p><em>Q:什么是标准输入输出流?</em></p>\n<ul>\n<li>System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据(一次读取一个字节)</li>\n<li>System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改标准输入输出流(可以直接写入/读取指定的文件之中)</span></span><br><span class=\"line\">修改输入流: System.setIn(InputStream)</span><br><span class=\"line\">修改输出流: System.setOut(PrintStream) <span class=\"comment\">#!!!!注意参数是打印的是字符流!!!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从键盘接收输入的两种方式</span></span><br><span class=\"line\">A:BufferedReader的readLine方法。</span><br><span class=\"line\">B:Scanner</span><br></pre></td></tr></table></figure>\n<p>基础案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_StandardIO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.标准输入输出流基础使用</span></span><br><span class=\"line\">    System.setIn(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\PrintWrite.txt\"</span>)); <span class=\"comment\">//修改标准输入流</span></span><br><span class=\"line\">    System.setOut(<span class=\"keyword\">new</span> PrintStream(<span class=\"string\">\"b.txt\"</span>));\t\t\t\t<span class=\"comment\">//修改标准输出流（需要采用打印流）</span></span><br><span class=\"line\">    InputStream in = System.in;\t\t\t\t\t\t\t\t<span class=\"comment\">//获取标准输入流默认指向键盘输入改变之后指向a.txt</span></span><br><span class=\"line\">    PrintStream ps = System.out;\t\t\t\t\t\t\t<span class=\"comment\">//获取标准输出流默认指向的是控制台改变后指向a.txt</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((b = in.read()) != -<span class=\"number\">1</span>) &#123;\t\t<span class=\"comment\">//从a.txt上读取数据</span></span><br><span class=\"line\">      ps.write(b);\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//将数据写到b.txt上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println();\t//也是一个输出流,不用关因为没有和硬盘上的文件产生关联的管道</span></span><br><span class=\"line\">    in.close(); <span class=\"comment\">//恢复原始的标准输入输出流指向</span></span><br><span class=\"line\">    ps.close();</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例2.修改标准输入输出流拷贝图片</span></span><br><span class=\"line\">    System.setIn(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"IO图片.png\"</span>));\t\t<span class=\"comment\">//改变标准输入流</span></span><br><span class=\"line\">    System.setOut(<span class=\"keyword\">new</span> PrintStream(<span class=\"string\">\"copy.png\"</span>)); \t\t<span class=\"comment\">//改变标准输出流</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    InputStream is = System.in;\t\t\t\t\t\t\t<span class=\"comment\">//获取标准输入流</span></span><br><span class=\"line\">    PrintStream ps1 = System.out;\t\t\t\t\t\t<span class=\"comment\">//获取标准输出流</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">8</span>];  <span class=\"comment\">//字节数组(存储读取的字节流)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((len = is.read(arr)) != -<span class=\"number\">1</span>) </span><br><span class=\"line\">      ps1.write(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    </span><br><span class=\"line\">    is.close();</span><br><span class=\"line\">    ps1.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例3.两种方法实现键盘录入（与上面示例1/2冲突）</span></span><br><span class=\"line\">    System.setIn(System.in); <span class=\"comment\">//恢复原始的标准输入输出流指向</span></span><br><span class=\"line\">    System.setOut(System.out);</span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in)); <span class=\"comment\">//转换流字节流转成一个字符流然后通过BufferedReader进行进一步封装</span></span><br><span class=\"line\">    String line = br.readLine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1键盘录入结果: \"</span> + line);</span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    <span class=\"comment\">//方式2就是采用Scanner类来接收输入</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1024</span></span><br><span class=\"line\">方式<span class=\"number\">1</span>键盘录入结果: <span class=\"number\">1024</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"7-打印流\"><a href=\"#7-打印流\" class=\"headerlink\" title=\"7.打印流\"></a>7.打印流</h5><p>描述:什么是打印流？<br>答:该流可以很方便的将对象的toString()结果输出并且自动加上换行, 而且可以使用自动刷出的模式。</p>\n<p>使用方式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打印方法: <span class=\"built_in\">print</span>(), println()</span><br><span class=\"line\">PrintStream(OutputStream out, boolean autoFlush, String encoding) <span class=\"comment\">#创建一个新的打印流。 [打印字节流]</span></span><br><span class=\"line\">PrintWriter(OutputStream out, boolean autoFlush, String encoding)  <span class=\"comment\">#创建一个新的PrintWriter,第二个参数字符流自动刷出到文件方法(自对于println()方法有用) [打印字符流]</span></span><br></pre></td></tr></table></figure></p>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.ioadvance;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6_PrintIO</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例1：打印流只操作数据目的</span></span><br><span class=\"line\">    <span class=\"comment\">// (1)打印字节流数据</span></span><br><span class=\"line\">    PrintStream ps = System.out; <span class=\"comment\">//就是一个PrintStream 其默认向控制台输出信息;</span></span><br><span class=\"line\">    ps.write(<span class=\"number\">97</span>);   <span class=\"comment\">//输出的是字符a</span></span><br><span class=\"line\">    ps.println();</span><br><span class=\"line\">    ps.println(<span class=\"number\">97</span>);\t <span class=\"comment\">//其实底层用的是Integer.toString(x),将x转换为数字字符串打印</span></span><br><span class=\"line\">    ps.println(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">    ps.println(<span class=\"keyword\">new</span> Personer(<span class=\"string\">\"张三\"</span>, <span class=\"number\">23</span>));  <span class=\"comment\">//直接打印对象(实际调用了对象的toString方法)</span></span><br><span class=\"line\">    Personer p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ps.println(p);\t<span class=\"comment\">//如果是null就返回null,如果不是null就调用对象的toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// (2)打印字符流数据</span></span><br><span class=\"line\">    PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\PrintWrite.txt\"</span>), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    pw.write(<span class=\"number\">97</span>);</span><br><span class=\"line\">    pw.print(<span class=\"string\">\"大家好\"</span>);               </span><br><span class=\"line\">    pw.println(<span class=\"string\">\"你好\"</span>); <span class=\"comment\">//自动刷出,只针对的是println方法(但是缓冲区已经存在的数据会一起刷出)</span></span><br><span class=\"line\">    pw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"comment\">//97</span></span><br><span class=\"line\"><span class=\"comment\">//aaa</span></span><br><span class=\"line\"><span class=\"comment\">//Personer [name=张三, age=23]</span></span><br><span class=\"line\"><span class=\"comment\">//null</span></span><br><span class=\"line\"><span class=\"comment\">//d:\\\\PrintWrite.txt内容</span></span><br><span class=\"line\"><span class=\"comment\">//a大家好你好</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Properties集合\"><a href=\"#Properties集合\" class=\"headerlink\" title=\"Properties集合\"></a>Properties集合</h4><p>描述:Properties的概述和作为Map集合(双列集合))的使用概述:</p>\n<ul>\n<li>Properties 类是Hashtable的子类,表示了一个持久的属性集(他是双列集合),可保存在流中或从流中加载。</li>\n<li>属性列表中每个键及其对应值都是一个字符串。 </li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.util.Dictionary&lt;K,V&gt; </span><br><span class=\"line\">java.util.Hashtable&lt;Object,Object&gt; </span><br><span class=\"line\">java.util.Properties </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#Properties类代表一个持久的特性的 Properties可以保存到流或流中加载。属性列表中的每个键和它的相应值是一个字符串。 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Properties</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Hashtable</span>&lt;<span class=\"title\">Object</span>,<span class=\"title\">Object</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//<span class=\"title\">Properties</span>的特殊功能方法</span></span><br><span class=\"line\"><span class=\"class\">* <span class=\"title\">public</span> <span class=\"title\">Object</span> <span class=\"title\">setProperty</span>(<span class=\"title\">String</span> <span class=\"title\">key</span>,<span class=\"title\">String</span> <span class=\"title\">value</span>)  //#调用方法 <span class=\"title\">put</span> <span class=\"title\">Hashtable</span></span></span><br><span class=\"line\"><span class=\"class\">* <span class=\"title\">public</span> <span class=\"title\">String</span> <span class=\"title\">getProperty</span>(<span class=\"title\">String</span> <span class=\"title\">key</span>)  //#在这个属性列表中搜索指定的键的属性</span></span><br><span class=\"line\"><span class=\"class\">* <span class=\"title\">public</span> <span class=\"title\">Enumeration</span>&lt;<span class=\"title\">String</span>&gt; <span class=\"title\">stringPropertyNames</span>()  //存<span class=\"title\">Properties</span>元素</span></span><br><span class=\"line\"><span class=\"class\">//与<span class=\"title\">IO</span>流相关  </span></span><br><span class=\"line\"><span class=\"class\">* <span class=\"title\">void</span> <span class=\"title\">load</span>(<span class=\"title\">InputStream</span> <span class=\"title\">inStream</span>)  //从输入字节流中读取属性列表（键和元素对）。</span></span><br><span class=\"line\"><span class=\"class\">* <span class=\"title\">void</span> <span class=\"title\">store</span>(<span class=\"title\">OutputStream</span> <span class=\"title\">out</span>, <span class=\"title\">String</span> <span class=\"title\">comments</span>)  //写这个属性列表（关键元素对）在这 <span class=\"title\">Properties</span>表格式来合适的输出流加载到一个 <span class=\"title\">Properties</span>表使用 <span class=\"title\">load</span>(<span class=\"title\">InputStream</span>)方法</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//常用方式补充</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Properties</span> <span class=\"title\">prop</span> </span>= <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">InputStream ins = CurrentClassDemo.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"config.properties\"</span>);</span><br><span class=\"line\">prop.load(ins);</span><br><span class=\"line\">String RedisUrl = prop.getProperty(<span class=\"string\">\"URL\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo8_Properties</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 示例1.Properties集合使用虽然是双列集合但是没有泛型</span></span><br><span class=\"line\">    demo1();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 示例2.Properties的load()和store()功能</span></span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * config.properties</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * name=weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * age=23</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * qq=123456</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">    Properties prop = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n load方法读取文件 ; \"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"读取之前:\"</span> + prop);</span><br><span class=\"line\">    prop.load(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\config.properties\"</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"读取之后:\"</span> + prop);</span><br><span class=\"line\">    </span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">\"add\"</span>, <span class=\"string\">\"JavaPram\"</span>);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">\"qq\"</span>, <span class=\"string\">\"88888888\"</span>);  <span class=\"comment\">//修改文件中的qq键的值</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n store方法存储文件 ; \"</span>);</span><br><span class=\"line\">    prop.store(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\config.properties\"</span>), <span class=\"string\">\"[2019年10月11日 17点57分]  插入和修改值\"</span>);  <span class=\"comment\">//第二个参数是注释Unicode编码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"修改之后:\"</span> + prop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Properties pr = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">    pr.put(<span class=\"string\">\"Key\"</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">    pr.put(<span class=\"string\">\"Name\"</span>, <span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    pr.setProperty(<span class=\"string\">\"Age\"</span>, <span class=\"string\">\"13\"</span>); <span class=\"comment\">//设置属性值(两个值必须是String);</span></span><br><span class=\"line\">    System.out.println(pr);  <span class=\"comment\">//打印键和值</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 打印所有的键值(采用枚举)</span></span><br><span class=\"line\">    Enumeration&lt;String&gt; key = (Enumeration&lt;String&gt;) pr.propertyNames(); <span class=\"comment\">//获取所有键的名称</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(key.hasMoreElements())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      String name = key.nextElement();</span><br><span class=\"line\">      System.out.println(name + <span class=\"string\">\" = \"</span> + pr.getProperty(name));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;Name=WeiyiGeek, Key=1024, Age=13&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Key = null</span></span><br><span class=\"line\"><span class=\"comment\">//Name = WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\">//Age = 13</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// load方法读取文件 ; </span></span><br><span class=\"line\"><span class=\"comment\">//读取之前:&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//读取之后:&#123;age=23, qq=123456789, name=weiyigeek&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// store方法存储文件 ; </span></span><br><span class=\"line\"><span class=\"comment\">//修改之后:&#123;age=23, qq=88888888, name=weiyigeek, add=JavaPram&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"ResourceBundle类\"><a href=\"#ResourceBundle类\" class=\"headerlink\" title=\"ResourceBundle类\"></a>ResourceBundle类</h5><p>描述:ResourceBundle类是用来读取properties的资源文件的，很多国际化操作都使用该类。</p>\n<p><strong>静态读取与动态读取</strong></p>\n<ul>\n<li><p>1) 我们可以在每个对象中用ResourceBundle来读配置文件设置自己的值，也可以用一个固定的对象去读取然后保存下来以便以后使用。<br>在每个class中都去读配置文件会导致代码散乱，所以只用一个class来进行读取是比较合理的做法。</p>\n</li>\n<li><p>2) 另外由于I/O的速度比较慢，如果负责读取配置文件的class是在每次用到这些配置项的时候去读文件，就容易成为性能上的瓶颈。为避免这样的情况，可以在初始化的时候就把配置项一次全部读入，并保存在静态成员变量中。</p>\n</li>\n<li><p>3) 不排除会有对配置项进行动态读取的需求（因为某些应用是不能停掉的，比如应用服务器。在这些应用运行期间更新了配置文件，就需要在不不关闭应用的情况下重新读入配置项）。</p>\n</li>\n</ul>\n<p>以下的例子只考虑了静态读取的情况，如果是动态读取则可以把读取配置文件的代码放到某个方法中，通过对某个事件的响应来调用该方法更新配置项。</p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jun.it;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ResourceBundle;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceBundleDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试ResourceBundle.getBundle</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//基本的使用</span></span><br><span class=\"line\">        ResourceBundle resourceBundle=ResourceBundle.getBundle(<span class=\"string\">\"project_en\"</span>); <span class=\"comment\">//该工程下的project_en.properties</span></span><br><span class=\"line\">        System.out.println(resourceBundle.getString(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\">        <span class=\"comment\">//国际化的使用</span></span><br><span class=\"line\">        ResourceBundle resourceBundle2=ResourceBundle.getBundle(<span class=\"string\">\"project_cn\"</span>);</span><br><span class=\"line\">        System.out.println(resourceBundle2.getString(<span class=\"string\">\"hello\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello</span><br><span class=\"line\">你好</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}