{"title":"3.Go编程快速入门学习","slug":"编程世界/Go/3.Go编程快速入门学习","date":"2020-04-23T03:16:58.000Z","updated":"2022-03-11T03:29:55.784Z","url":"2020/4-23-592.html","path":"api/articles/2020/4-23-592.html.json","covers":["https://www.liwenzhou.com/images/Go/slice/slice_01.png","https://www.liwenzhou.com/images/Go/slice/slice_02.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0X00-Go语言基础之数组\"><a href=\"#0X00-Go语言基础之数组\" class=\"headerlink\" title=\"0X00 Go语言基础之数组\"></a>0X00 Go语言基础之数组</h2><p>描述: 本文主要介绍Go语言中数组（array）及它的基本使用。</p>\n<p><strong>Q: 什么是Array(数组)?</strong></p>\n<blockquote>\n<p>答: 学过C语言的同学都知道，数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。</p>\n</blockquote>\n<h3 id=\"1-数组定义\"><a href=\"#1-数组定义\" class=\"headerlink\" title=\"1.数组定义\"></a>1.数组定义</h3><p>基本语法：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 数组变量名 [元素数量]T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个长度为3元素类型为int的数组a</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure></p>\n<p>比如：<code>var a [5]int</code>， 数组的长度必须是常量，并且长度是数组类型的一部分。一旦定义，长度不能变。注意: <code>[5]int</code>和<code>[10]int</code>是不同的类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b [<span class=\"number\">4</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">a = b <span class=\"comment\">//不可以这样做，因为此时a和b是不同的类型</span></span><br></pre></td></tr></table></figure>\n<p>Tips ：数组可以通过下标进行访问，下标是从<code>0</code>开始，最后一个元素下标是：<code>len-1</code>，访问越界（下标在合法范围之外），则触发访问越界，会panic。</p>\n<h3 id=\"2-数组初始化\"><a href=\"#2-数组初始化\" class=\"headerlink\" title=\"2.数组初始化\"></a>2.数组初始化</h3><p>数组的初始化也有很多方式。</p>\n<p><strong>1.方法一</strong></p>\n<p>初始化数组时可以使用初始化列表来设置数组元素的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> testArray [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>                        <span class=\"comment\">//数组会初始化为int类型的零值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numArray = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;                 <span class=\"comment\">//使用指定的初始值完成初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cityArray = [<span class=\"number\">3</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>, <span class=\"string\">\"深圳\"</span>&#125; <span class=\"comment\">//使用指定的初始值完成初始化</span></span><br><span class=\"line\">  fmt.Println(testArray)                      <span class=\"comment\">//[0 0 0]</span></span><br><span class=\"line\">  fmt.Println(numArray)                       <span class=\"comment\">//[1 2 0]</span></span><br><span class=\"line\">  fmt.Println(cityArray)                      <span class=\"comment\">//[北京 上海 深圳]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.方法二</strong></p>\n<p>按照上面的方法每次都要确保提供的初始值和数组长度一致，一般情况下我们可以让编译器根据初始值的个数自行推断数组的长度，例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> testArray [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numArray = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cityArray = [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>, <span class=\"string\">\"深圳\"</span>&#125;</span><br><span class=\"line\">  fmt.Println(testArray)                          <span class=\"comment\">//[0 0 0]</span></span><br><span class=\"line\">  fmt.Println(numArray)                           <span class=\"comment\">//[1 2]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"type of numArray:%T\\n\"</span>, numArray)   <span class=\"comment\">//type of numArray:[2]int</span></span><br><span class=\"line\">  fmt.Println(cityArray)                          <span class=\"comment\">//[北京 上海 深圳]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"type of cityArray:%T\\n\"</span>, cityArray) <span class=\"comment\">//type of cityArray:[3]string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.方法三(非常值得学习)</strong></p>\n<p>我们还可以使用指定索引值的方式来初始化数组，例如:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>: <span class=\"number\">1</span>, <span class=\"number\">3</span>: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  b := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>:<span class=\"number\">100</span>,<span class=\"number\">9</span>:<span class=\"number\">200</span>&#125;      <span class=\"comment\">// [0 100 0 0 0 0 0 0 200 ]</span></span><br><span class=\"line\">  fmt.Println(a)                  <span class=\"comment\">// [0 1 0 5]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"type of a:%T\\n\"</span>, a) <span class=\"comment\">// type of a:[4]int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-数组的遍历\"><a href=\"#3-数组的遍历\" class=\"headerlink\" title=\"3.数组的遍历\"></a>3.数组的遍历</h3><p>遍历数组a有以下两种方法：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>, <span class=\"string\">\"深圳\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 方法1：for循环遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">    fmt.Println(a[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方法2：for range遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">    fmt.Println(index, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-多维数组\"><a href=\"#4-多维数组\" class=\"headerlink\" title=\"4.多维数组\"></a>4.多维数组</h3><p>Go语言是支持多维数组的，我们这里以二维数组为例（数组中又嵌套数组）。</p>\n<h4 id=\"二维数组的定义\"><a href=\"#二维数组的定义\" class=\"headerlink\" title=\"二维数组的定义\"></a>二维数组的定义</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[[北京 上海] [广州 深圳] [成都 重庆]]</span></span><br><span class=\"line\">  fmt.Println(a[<span class=\"number\">2</span>][<span class=\"number\">1</span>]) <span class=\"comment\">//支持索引取值:重庆</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 多维数组<strong>只有第一层</strong>可以使用<code>...</code>来让编译器推导数组长度。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//支持的写法</span></span><br><span class=\"line\">a := [...][<span class=\"number\">2</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不支持多维数组的内层使用...</span></span><br><span class=\"line\">b := [<span class=\"number\">3</span>][...]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">  &#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"二维数组的遍历\"><a href=\"#二维数组的遍历\" class=\"headerlink\" title=\"二维数组的遍历\"></a>二维数组的遍历</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 方式1. for range 方式</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v1 := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v2 := <span class=\"keyword\">range</span> v1 &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"%s\\t\"</span>, v2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京\t上海\t</span><br><span class=\"line\">广州\t深圳\t</span><br><span class=\"line\">成都\t重庆</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"5-数组是值类型\"><a href=\"#5-数组是值类型\" class=\"headerlink\" title=\"5.数组是值类型\"></a>5.数组是值类型</h3><p>描述: 数组是值类型，<code>赋值和传参会复制整个数组</code>。因此改变副本的值，不会改变本身的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go 语言中默认传参是值传递（拷贝原变量的值即 Ctrl+c 、Ctrl+v ）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modifyArray</span><span class=\"params\">(x [3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  x[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">modifyArray2</span><span class=\"params\">(x [3][2]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  x[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">  modifyArray(a) <span class=\"comment\">//在modify中修改的是a的副本x，不会更改数组a的元素</span></span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[10 20 30]</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  b := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  modifyArray2(b) <span class=\"comment\">//在modify中修改的是b的副本x，不会更改数组b的元素</span></span><br><span class=\"line\">  fmt.Println(b)  <span class=\"comment\">//[[1 1] [1 1] [1 1]]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。</li>\n<li><code>[n]*T</code>表示指针数组，<code>*[n]T</code>表示数组指针 。</li>\n</ol>\n<p>示例演示:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个长度为3元素类型为int的数组a</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a [<span class=\"number\">2</span>]<span class=\"keyword\">int</span>      <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a1 [<span class=\"number\">2</span>]<span class=\"keyword\">string</span>  <span class=\"comment\">// 默认为空</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a2 [<span class=\"number\">2</span>]<span class=\"keyword\">bool</span>    <span class=\"comment\">// 默认为false</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a3 [<span class=\"number\">2</span>]<span class=\"keyword\">float64</span> <span class=\"comment\">// 默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"a 数组类型 %T , 元素: %v\\n\"</span>, a, a)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"a1 数组类型 %T , 元素: %v\\n\"</span>, a1, a1)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"a2 数组类型 %T , 元素: %v\\n\"</span>, a2, a2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"a3 数组类型 %T , 元素: %v\\n\"</span>, a3, a3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组初始化</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式1.使用初始化列表来设置数组元素的值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125; <span class=\"comment\">// 三个元素，未指定下标元素的其值为 0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = [<span class=\"number\">3</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Let's\"</span>, <span class=\"string\">\"Go\"</span>, <span class=\"string\">\"语言\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 方式2.根据初始值的个数自行推断数组的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = [...]<span class=\"keyword\">float32</span>&#123;<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>&#125;</span><br><span class=\"line\">  e := [...]<span class=\"keyword\">bool</span>&#123;<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 方式3.使用指定索引值的方式来初始化数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>: <span class=\"number\">1</span>, <span class=\"number\">3</span>: <span class=\"number\">8</span>&#125; <span class=\"comment\">// 只有 下标为1的其值为1，下标为3的其值为8，初开之外都为0</span></span><br><span class=\"line\">  g := [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Weiyi\"</span>, <span class=\"string\">\"Geek\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"b 数组类型 %T , 元素: %v\\n\"</span>, b, b)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"c 数组类型 %T , 元素: %v\\n\"</span>, c, c)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"d 数组类型 %T , 元素: %v\\n\"</span>, d, d)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"e 数组类型 %T , 元素: %v\\n\"</span>, e, e)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"f 数组类型 %T , 元素: %v\\n\"</span>, f, f)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"f 数组类型 %T , 元素: %v\\n\"</span>, g, g)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 数组指定元素获取</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"c[1] 元素获取 : \"</span>, c[<span class=\"number\">1</span>])</span><br><span class=\"line\">  <span class=\"comment\">// 数组遍历</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式1</span></span><br><span class=\"line\">  alen := <span class=\"built_in\">len</span>(c)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; alen; i++ &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"c[%d]: %s \"</span>, i, c[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  <span class=\"comment\">// 方式2</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"c[%d]: %s \"</span>, i, v) <span class=\"comment\">// 注意如果是切片类型需要强转为string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多维数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式1</span></span><br><span class=\"line\">  s1 := [<span class=\"number\">3</span>][<span class=\"number\">2</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方式2</span></span><br><span class=\"line\">  s2 := [...][<span class=\"number\">2</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"Go\"</span>, <span class=\"string\">\"C\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"PHP\"</span>, <span class=\"string\">\"Python\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"Shell\"</span>, <span class=\"string\">\"Groovy\"</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(s1[<span class=\"number\">2</span>][<span class=\"number\">1</span>])    <span class=\"comment\">//支持索引取值:重庆</span></span><br><span class=\"line\">  fmt.Println(<span class=\"built_in\">len</span>(s1), s1) <span class=\"comment\">//[[北京 上海] [广州 深圳] [成都 重庆]]</span></span><br><span class=\"line\">  fmt.Println(<span class=\"built_in\">len</span>(s2), s2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多维数组遍历</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式1</span></span><br><span class=\"line\">  s1len := <span class=\"built_in\">len</span>(s1)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; s1len; i++ &#123;</span><br><span class=\"line\">    s1length := <span class=\"built_in\">len</span>(s1[i])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; s1length; j++ &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"s1[%d][%d] = %v \"</span>, i, j, s1[i][j])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方式2 （推荐方式）</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, v1 := <span class=\"keyword\">range</span> s2 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, v2 := <span class=\"keyword\">range</span> v1 &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"s2[%d][%d] = %v \"</span>, i, j, v2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多维数组元素更改</span></span><br><span class=\"line\">  s1[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">\"Test\"</span></span><br><span class=\"line\">  s1[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"string\">\"Change\"</span></span><br><span class=\"line\">  fmt.Println(s1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a 数组类型 [2]int , 元素: [0 0]</span><br><span class=\"line\">a1 数组类型 [2]string , 元素: [ ]</span><br><span class=\"line\">a2 数组类型 [2]bool , 元素: [<span class=\"literal\">false</span> <span class=\"literal\">false</span>]</span><br><span class=\"line\">a3 数组类型 [2]float64 , 元素: [0 0]</span><br><span class=\"line\">b 数组类型 [3]int , 元素: [1 2 0]</span><br><span class=\"line\">c 数组类型 [3]string , 元素: [Let<span class=\"string\">'s Go 语言]</span></span><br><span class=\"line\"><span class=\"string\">d 数组类型 [2]float32 , 元素: [1 2]</span></span><br><span class=\"line\"><span class=\"string\">e 数组类型 [3]bool , 元素: [true false false]</span></span><br><span class=\"line\"><span class=\"string\">f 数组类型 [4]int , 元素: [0 1 0 8]</span></span><br><span class=\"line\"><span class=\"string\">f 数组类型 [2]string , 元素: [Weiyi Geek]</span></span><br><span class=\"line\"><span class=\"string\">c[1] 元素获取 :  Go</span></span><br><span class=\"line\"><span class=\"string\">c[0]: Let'</span>s c[1]: Go c[2]: 语言 </span><br><span class=\"line\">c[0]: Let<span class=\"string\">'s c[1]: Go c[2]: 语言 </span></span><br><span class=\"line\"><span class=\"string\">s1[2][1] 元素获取 : 重庆</span></span><br><span class=\"line\"><span class=\"string\">3 [[北京 上海] [广州 深圳] [成都 重庆]]</span></span><br><span class=\"line\"><span class=\"string\">3 [[Go C] [PHP Python] [Shell Groovy]]</span></span><br><span class=\"line\"><span class=\"string\">s1[0][0] = 北京 s1[0][1] = 上海 s1[1][0] = 广州 s1[1][1] = 深圳 s1[2][0] = 成都 s1[2][1] = 重庆 </span></span><br><span class=\"line\"><span class=\"string\">s2[0][0] = Go s2[0][1] = C s2[1][0] = PHP s2[1][1] = Python s2[2][0] = Shell s2[2][1] = Groovy </span></span><br><span class=\"line\"><span class=\"string\">[[北京 上海] [Test Change] [成都 重庆]]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0X01-Go语言基础之切片\"><a href=\"#0X01-Go语言基础之切片\" class=\"headerlink\" title=\"0X01 Go语言基础之切片\"></a>0X01 Go语言基础之切片</h2><p>描述: 本文主要介绍Go语言中切片（slice）及它的基本使用。</p>\n<p><strong>Q: 为什么要引入切片这个特性?</strong><br>描述: 因为<code>数组的长度是固定的并且数组长度属于类型的</code>一部分，所以数组有很多的局限性。</p>\n<p>例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arraySum</span><span class=\"params\">(x [3]<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span>&#123;</span><br><span class=\"line\">    sum := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> x&#123;</span><br><span class=\"line\">        sum = sum + v</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个求和函数只能接受<code>[3]int</code>类型，其他的都不支持。 再比如，<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>数组a中已经有三个元素了，我们不能再继续往数组a中添加新元素了, 所以为了解决上述问题我们引入了Python一样切片的编程语言特性。</p>\n<p><br/></p>\n<h3 id=\"1-切片定义\"><a href=\"#1-切片定义\" class=\"headerlink\" title=\"1.切片定义\"></a>1.切片定义</h3><p>描述: <code>切片（Slice）</code>是一个拥有相同类型元素的可变长度的序列。它是<code>基于数组类型做的一层封装</code>。</p>\n<p>特点:</p>\n<ul>\n<li>切片它非常灵活，支持自动扩容。</li>\n<li>切片是一个引用类型，它的内部结构包含<code>地址</code>、<code>长度</code>和<code>容量</code>。切片一般用于快速地操作一块数据集合。</li>\n</ul>\n<p>声明切片类型的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name []T</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关键字解析</span></span><br><span class=\"line\">- name:表示变量名</span><br><span class=\"line\">- T:表示切片中的元素类型</span><br></pre></td></tr></table></figure>\n<p>Tips : 在定义时可看出与数组定义<code>var array [number]T</code>间的区别，其不需要设置元素个数。</p>\n<p>举个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 声明切片类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a []<span class=\"keyword\">string</span>              <span class=\"comment\">//声明一个字符串切片</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = []<span class=\"keyword\">int</span>&#123;&#125;             <span class=\"comment\">//声明一个整型切片并初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = []<span class=\"keyword\">bool</span>&#123;<span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125; <span class=\"comment\">//声明一个布尔切片并初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = []<span class=\"keyword\">bool</span>&#123;<span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125; <span class=\"comment\">//声明一个布尔切片并初始化</span></span><br><span class=\"line\">  fmt.Println(a)              <span class=\"comment\">//[]</span></span><br><span class=\"line\">  fmt.Println(b)              <span class=\"comment\">//[]</span></span><br><span class=\"line\">  fmt.Println(c)              <span class=\"comment\">//[false true]</span></span><br><span class=\"line\">  fmt.Println(a == <span class=\"literal\">nil</span>)       <span class=\"comment\">//true</span></span><br><span class=\"line\">  fmt.Println(b == <span class=\"literal\">nil</span>)       <span class=\"comment\">//false</span></span><br><span class=\"line\">  fmt.Println(c == <span class=\"literal\">nil</span>)       <span class=\"comment\">//false</span></span><br><span class=\"line\">  <span class=\"comment\">// fmt.Println(c == d)      //切片是引用类型，不支持直接比较，只能和nil比较</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"2-切片长度与容量\"><a href=\"#2-切片长度与容量\" class=\"headerlink\" title=\"2.切片长度与容量\"></a>2.切片长度与容量</h3><p>描述: 切片拥有自己的长度和容量，我们可以通过使用内置的<code>len()</code>函数求长度，使用内置的<code>cap()</code>函数求切片的容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切片长度与容量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lth = []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> lth64 = []<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"切片长度\"</span>, <span class=\"built_in\">len</span>(lth), <span class=\"string\">\",切片容量\"</span>, <span class=\"built_in\">cap</span>(lth))      <span class=\"comment\">// 切片长度 0 ,切片容量 0</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"切片长度\"</span>, <span class=\"built_in\">len</span>(lth64), <span class=\"string\">\",切片容量\"</span>, <span class=\"built_in\">cap</span>(lth64))  <span class=\"comment\">// 切片长度 3 ,切片容量 3</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"3-切片表达式\"><a href=\"#3-切片表达式\" class=\"headerlink\" title=\"3.切片表达式\"></a>3.切片表达式</h3><p>描述: 切片表达式从字符串、数组、指向数组或切片的指针构造子字符串或切片。</p>\n<p>它有两种变体：一种指定low和high两个索引界限值的简单的形式，另一种是除了low和high索引界限值外还指定容量的完整的形式。</p>\n<h4 id=\"简单切片表达式\"><a href=\"#简单切片表达式\" class=\"headerlink\" title=\"简单切片表达式\"></a>简单切片表达式</h4><p>描述: 切片的底层就是一个数组，所以我们可以基于数组通过切片表达式得到切片。 切片表达式中的<code>low</code>和<code>high</code>表示一个索引范围<code>（左包含，右不包含）</code>，也就是下面代码中从数组a中选出<code>1&lt;=索引值&lt;4</code>的元素组成切片s，得到的切片<code>长度=high-low</code>，容量等于得到的切片的底层数组的容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  s := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\">// s := a[low:high]  </span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s:%v len(s):%v cap(s):%v\\n\"</span>, s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s)) <span class=\"comment\">// 5 - 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s:[2 3] len(s):2 <span class=\"built_in\">cap</span>(s):4</span><br></pre></td></tr></table></figure></p>\n<p>为了方便起见，可以省略切片表达式中的任何索引。省略了<code>low</code>则默认为0；省略了<code>high</code>则默认为切片操作数的长度:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[<span class=\"number\">2</span>:]  <span class=\"comment\">// 等同于 a[2:len(a)]</span></span><br><span class=\"line\">a[:<span class=\"number\">3</span>]  <span class=\"comment\">// 等同于 a[0:3]</span></span><br><span class=\"line\">a[:]   <span class=\"comment\">// 等同于 a[0:len(a)]</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>对于数组或字符串，如果<code>0 &lt;= low &lt;= high &lt;= len(a)</code>，则索引合法，否则就会索引越界（out of range）。</p>\n<p>Tips : 对切片再执行切片表达式时（<code>切片再切片</code>），<code>high</code>的上限边界是切片的容量<code>cap(a)</code>，而不是长度。</p>\n<p><strong>常量索引</strong>必须是非负的，并且可以用int类型的值表示;对于数组或常量字符串，常量索引也必须在有效范围内。如果<code>low</code>和<code>high</code>两个指标都是常数，它们必须满足<code>low &lt;= high</code>。如果索引在运行时超出范围，就会发生运行时<code>panic</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  s1 := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]  <span class=\"comment\">// s1 := a[low:high]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s1:%v len(s1):%v cap(s1):%v\\n\"</span>, s1, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1))</span><br><span class=\"line\">  s2 := s[<span class=\"number\">3</span>:<span class=\"number\">4</span>]  <span class=\"comment\">// 索引的上限是cap(s)而不是len(s)</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s2:%v len(s2):%v cap(s2):%v\\n\"</span>, s2, <span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s:[2 3] len(s):2 <span class=\"built_in\">cap</span>(s):4</span><br><span class=\"line\">s2:[5]  len(s2):1 <span class=\"built_in\">cap</span>(s2):1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"完整切片表达式\"><a href=\"#完整切片表达式\" class=\"headerlink\" title=\"完整切片表达式\"></a>完整切片表达式</h4><p>描述: 对于数组，指向数组的指针，或切片a(<em>注意不能是字符串</em>)支持完整切片表达式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[low : high : max]</span><br></pre></td></tr></table></figure>\n<p>描述: 上面的代码会构造与简单切片表达式<code>a[low: high]</code>相同类型、相同长度和元素的切片。另外它会将得到的结果切片的容量设置为<code>max-low</code>。在完整切片表达式中只有第一个索引值（low）可以省，它默认为0。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  t := a[<span class=\"number\">1</span>:<span class=\"number\">3</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"t:%v len(t):%v cap(t):%v\\n\"</span>, t, <span class=\"built_in\">len</span>(t), <span class=\"built_in\">cap</span>(t))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t:[2 3] len(t):2 <span class=\"built_in\">cap</span>(t):4</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 完整切片表达式需要满足的条件是<code>0 &lt;= low &lt;= high &lt;= max &lt;= cap(a)</code>，其他条件和简单切片表达式相同。</p>\n<p><br/></p>\n<h3 id=\"4-切片遍历\"><a href=\"#4-切片遍历\" class=\"headerlink\" title=\"4.切片遍历\"></a>4.切片遍历</h3><p>描述: 切片的遍历方式和数组是一致的，支持索引遍历和<code>for range</code>遍历。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123;</span><br><span class=\"line\">    fmt.Println(i, s[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    fmt.Println(index, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"5-切片的本质\"><a href=\"#5-切片的本质\" class=\"headerlink\" title=\"5.切片的本质\"></a>5.切片的本质</h3><p>描述: 切片的本质就是对底层数组的封装，它包含了三个信息：<code>底层数组的指针、切片的长度（len）和切片的容量（cap）</code>。</p>\n<p>举个例子，现在有一个数组<code>a := [8]int{0, 1, 2, 3, 4, 5, 6, 7}</code>，切片<code>s1 := a[:5]</code>，相应示意图如下。</p>\n<figure class=\"image-box\">\n                <img src=\"https://www.liwenzhou.com/images/Go/slice/slice_01.png\" alt=\"WeiyiGeek.slice_01\" title=\"\" class=\"\">\n                <p>WeiyiGeek.slice_01</p>\n            </figure> \n<p>切片<code>s2 := a[3:6]</code>，相应示意图如下： </p>\n<p><img src=\"https://www.liwenzhou.com/images/Go/slice/slice_02.png\" alt=\"WeiyiGeek.slice_02\"></p>\n<p>Tips ： 由上面两图可知切片的容量是<code>数组长度 - 切片数组起始索引下标</code>，例如 a[1:] = 8 -  1 其容量为7</p>\n<p><br/></p>\n<h3 id=\"6-make-方法构造切片\"><a href=\"#6-make-方法构造切片\" class=\"headerlink\" title=\"6.make() 方法构造切片\"></a>6.make() 方法构造切片</h3><p>描述: 我们上面都是基于数组来创建的切片，如果需要动态的创建一个切片，我们就需要使用内置的<code>make()</code>函数，格式如下：</p>\n<p>格式说明:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make([]T, size, <span class=\"built_in\">cap</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">- T:切片的元素类型</span><br><span class=\"line\">- size:切片中元素的数量</span><br><span class=\"line\">- <span class=\"built_in\">cap</span>:切片的容量</span><br></pre></td></tr></table></figure>\n<p>举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  fmt.Println(a)      <span class=\"comment\">//[0 0]</span></span><br><span class=\"line\">  fmt.Println(<span class=\"built_in\">len</span>(a)) <span class=\"comment\">//2</span></span><br><span class=\"line\">  fmt.Println(<span class=\"built_in\">cap</span>(a)) <span class=\"comment\">//10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中<code>a</code>的内部存储空间已经分配了10个，但实际上只用了2个。 容量并不会影响当前元素的个数，所以<code>len(a)</code>返回2，<code>cap(a)</code>则返回该切片的容量。</p>\n<p><br></p>\n<h3 id=\"7-append-方法切片添加元素\"><a href=\"#7-append-方法切片添加元素\" class=\"headerlink\" title=\"7.append() 方法切片添加元素\"></a>7.append() 方法切片添加元素</h3><p>描述: Go语言的内建函数<code>append()</code>可以为切片动态添加元素。 可以一次添加一个元素，可以添加多个元素，也可以添加另一个切片中的元素（后面加…）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s []<span class=\"keyword\">int</span></span><br><span class=\"line\">  s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)        <span class=\"comment\">// [1]</span></span><br><span class=\"line\">  s = <span class=\"built_in\">append</span>(s, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)  <span class=\"comment\">// [1 2 3 4]</span></span><br><span class=\"line\">  s2 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;  </span><br><span class=\"line\">  s = <span class=\"built_in\">append</span>(s, s2...)    <span class=\"comment\">// [1 2 3 4 5 6 7]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 通过var声明的零值切片可以在<code>append()</code>函数直接使用，无需初始化。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s []<span class=\"keyword\">int</span></span><br><span class=\"line\">s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong> 没有必要像下面的代码一样初始化一个切片再传入<code>append()</code>函数使用，</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := []<span class=\"keyword\">int</span>&#123;&#125;  <span class=\"comment\">// 没有必要初始化</span></span><br><span class=\"line\">s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>)  <span class=\"comment\">// 没有必要初始化</span></span><br><span class=\"line\">s = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>描述: 每个切片会指向一个底层数组，这个数组的容量够用就添加新增元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”，此时该切片指向的底层数组就会更换。“扩容”操作往往发生在<code>append()</code>函数调用时，所以我们通常都需要用原变量接收append函数的返回值。</p>\n<p>举个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//append()添加元素和切片扩容</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> numSlice []<span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    numSlice = <span class=\"built_in\">append</span>(numSlice, i)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v  len:%d  cap:%d  ptr:%p\\n\"</span>, numSlice, <span class=\"built_in\">len</span>(numSlice), <span class=\"built_in\">cap</span>(numSlice), numSlice)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出情况:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0]  len:1  <span class=\"built_in\">cap</span>:1  ptr:0xc0000a8000</span><br><span class=\"line\">[0 1]  len:2  <span class=\"built_in\">cap</span>:2  ptr:0xc0000a8040</span><br><span class=\"line\">[0 1 2]  len:3  <span class=\"built_in\">cap</span>:4  ptr:0xc0000b2020</span><br><span class=\"line\">[0 1 2 3]  len:4  <span class=\"built_in\">cap</span>:4  ptr:0xc0000b2020</span><br><span class=\"line\">[0 1 2 3 4]  len:5  <span class=\"built_in\">cap</span>:8  ptr:0xc0000b6000</span><br><span class=\"line\">[0 1 2 3 4 5]  len:6  <span class=\"built_in\">cap</span>:8  ptr:0xc0000b6000</span><br><span class=\"line\">[0 1 2 3 4 5 6]  len:7  <span class=\"built_in\">cap</span>:8  ptr:0xc0000b6000</span><br><span class=\"line\">[0 1 2 3 4 5 6 7]  len:8  <span class=\"built_in\">cap</span>:8  ptr:0xc0000b6000</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8]  len:9  <span class=\"built_in\">cap</span>:16  ptr:0xc0000b8000</span><br><span class=\"line\">[0 1 2 3 4 5 6 7 8 9]  len:10  <span class=\"built_in\">cap</span>:16  ptr:0xc0000b8000</span><br></pre></td></tr></table></figure></p>\n<p>从上面的结果可以看出：</p>\n<ol>\n<li><code>append()</code>函数将元素追加到切片的最后并返回该切片。</li>\n<li>切片numSlice的容量按照<code>1，2，4，8，16</code>这样的规则自动进行扩容，每次扩容后都是扩容前的2倍。</li>\n</ol>\n<p><br></p>\n<p>append() 函数还支持一次性追加多个元素,例如:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> citySlice []<span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"comment\">// 追加一个元素</span></span><br><span class=\"line\">citySlice = <span class=\"built_in\">append</span>(citySlice, <span class=\"string\">\"北京\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 追加多个元素</span></span><br><span class=\"line\">citySlice = <span class=\"built_in\">append</span>(citySlice, <span class=\"string\">\"上海\"</span>, <span class=\"string\">\"广州\"</span>, <span class=\"string\">\"深圳\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 追加切片</span></span><br><span class=\"line\">a := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"成都\"</span>, <span class=\"string\">\"重庆\"</span>&#125;</span><br><span class=\"line\">citySlice = <span class=\"built_in\">append</span>(citySlice, a...)</span><br><span class=\"line\">fmt.Println(citySlice)       <span class=\"comment\">//  [北京 上海 广州 深圳 成都 重庆]</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"8-copy-方法复制切片\"><a href=\"#8-copy-方法复制切片\" class=\"headerlink\" title=\"8.copy()方法复制切片\"></a>8.copy()方法复制切片</h3><p>描述: 首先我们来看一个问题<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">  fmt.Println(b) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">  b[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">  fmt.Println(b) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 由于切片是引用类型，所以a和b其实都指向了同一块内存地址。修改b的同时a的值也会发生变化。</p>\n<p>Go语言内建的<code>copy()</code>函数可以迅速地将一个切片的数据复制到另外一个切片空间中，<code>copy()</code>函数的使用格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy(destSlice, srcSlice []T)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数:</span></span><br><span class=\"line\">- srcSlice: 数据来源切片</span><br><span class=\"line\">- destSlice: 目标切片</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>举个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// copy()复制切片</span></span><br><span class=\"line\">  a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  c := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">  <span class=\"built_in\">copy</span>(c, a)     <span class=\"comment\">//使用copy()函数将切片a中的元素复制到切片c</span></span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">  fmt.Println(c) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">  c[<span class=\"number\">0</span>] = <span class=\"number\">1000</span></span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">//[1 2 3 4 5]</span></span><br><span class=\"line\">  fmt.Println(c) <span class=\"comment\">//[1000 2 3 4 5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"9-从切片中删除元素\"><a href=\"#9-从切片中删除元素\" class=\"headerlink\" title=\"9.从切片中删除元素\"></a>9.从切片中删除元素</h3><p>描述: Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从切片中删除元素</span></span><br><span class=\"line\">  a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">32</span>, <span class=\"number\">33</span>, <span class=\"number\">34</span>, <span class=\"number\">35</span>, <span class=\"number\">36</span>, <span class=\"number\">37</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 要删除索引为2的元素</span></span><br><span class=\"line\">  a = <span class=\"built_in\">append</span>(a[:<span class=\"number\">2</span>], a[<span class=\"number\">3</span>:]...)</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">// [30 31 33 34 35 36 37]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结一下就是：要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p>\n<p><br/></p>\n<h3 id=\"10-切片相关操作\"><a href=\"#10-切片相关操作\" class=\"headerlink\" title=\"10.切片相关操作\"></a>10.切片相关操作</h3><h4 id=\"判断切片是否为空\"><a href=\"#判断切片是否为空\" class=\"headerlink\" title=\"判断切片是否为空\"></a>判断切片是否为空</h4><p>描述: 要检查切片是否为空，请始终使用<code>len(s) == 0</code>来判断，而不应该使用<code>s == nil</code>来判断。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断切片是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(d) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"变量 d 切片不为空: \"</span>, d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"切片不能直接比较\"><a href=\"#切片不能直接比较\" class=\"headerlink\" title=\"切片不能直接比较\"></a>切片不能直接比较</h4><p>描述: 切片之间是不能比较的，我们不能使用<code>==</code>操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和<code>nil</code>比较。 一个<code>nil</code>值的切片并没有底层数组，一个<code>nil</code>值的切片的长度和容量都是0。</p>\n<p>但是我们不能说一个长度和容量都是0的切片一定是<code>nil</code>，例如下面的示例：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 []<span class=\"keyword\">int</span>         <span class=\"comment\">//len(s1)=0;cap(s1)=0;s1==nil</span></span><br><span class=\"line\">s2 := []<span class=\"keyword\">int</span>&#123;&#125;        <span class=\"comment\">//len(s2)=0;cap(s2)=0;s2!=nil</span></span><br><span class=\"line\">s3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>) <span class=\"comment\">//len(s3)=0;cap(s3)=0;s3!=nil</span></span><br></pre></td></tr></table></figure><br>所以要判断一个切片是否是空的，要是用<code>len(s) == 0</code>来判断，不应该使用<code>s == nil</code>来判断。</p>\n<p><br/></p>\n<h4 id=\"切片的赋值拷贝\"><a href=\"#切片的赋值拷贝\" class=\"headerlink\" title=\"切片的赋值拷贝\"></a>切片的赋值拷贝</h4><p>描述: 下面的代码中演示了拷贝前后两个变量共享底层数组，对一个切片的修改会影响另一个切片的内容，这点需要特别注意。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  s1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>) <span class=\"comment\">//[0 0 0]</span></span><br><span class=\"line\">  s2 := s1             <span class=\"comment\">//将s1直接赋值给s2，s1和s2共用一个底层数组</span></span><br><span class=\"line\">  s2[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">  fmt.Println(s1) <span class=\"comment\">//[100 0 0]</span></span><br><span class=\"line\">  fmt.Println(s2) <span class=\"comment\">//[100 0 0]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"切片的扩容策略\"><a href=\"#切片的扩容策略\" class=\"headerlink\" title=\"切片的扩容策略\"></a>切片的扩容策略</h4><p>描述: 可以通过查看<code>$GOROOT/src/runtime/slice.go</code>源码，其中扩容相关代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newcap := old.<span class=\"built_in\">cap</span></span><br><span class=\"line\">doublecap := newcap + newcap</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">cap</span> &gt; doublecap &#123;</span><br><span class=\"line\">  newcap = <span class=\"built_in\">cap</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> old.<span class=\"built_in\">len</span> &lt; <span class=\"number\">1024</span> &#123;</span><br><span class=\"line\">    newcap = doublecap</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Check 0 &lt; newcap to detect overflow</span></span><br><span class=\"line\">    <span class=\"comment\">// and prevent an infinite loop.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class=\"built_in\">cap</span> &#123;</span><br><span class=\"line\">      newcap += newcap / <span class=\"number\">4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Set newcap to the requested cap when</span></span><br><span class=\"line\">    <span class=\"comment\">// the newcap calculation overflowed.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> newcap &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      newcap = <span class=\"built_in\">cap</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的代码可以看出以下内容：</p>\n<ul>\n<li>首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）。</li>\n<li>否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap），</li>\n<li>否则判断，如果旧切片的长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即<code>（newcap=old.cap,for {newcap += newcap/4}）</code>直到最终容量（newcap）大于等于新申请的容量(cap)，即<code>（newcap &gt;= cap）</code></li>\n<li>如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）。</li>\n</ul>\n<p>Tips : 需要注意的是，切片扩容还会根据切片中元素的类型不同而做不同的处理，比如<code>int</code>和<code>string</code>类型的处理方式就不一样。</p>\n<p>示例演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 切片声明与定义</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a []<span class=\"keyword\">string</span>              <span class=\"comment\">//声明一个字符串切片</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = []<span class=\"keyword\">int</span>&#123;&#125;             <span class=\"comment\">//声明一个整型切片并初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = []<span class=\"keyword\">bool</span>&#123;<span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125; <span class=\"comment\">//声明一个布尔切片并初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// - 切片 a 变量值为空/零值。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> a == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"a 切片元素:\"</span>, a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"b 切片元素:\"</span>, b)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"c 切片元素:\"</span>, c)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 切片长度与容量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> lth = []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lth64 = []<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"切片长度\"</span>, <span class=\"built_in\">len</span>(lth), <span class=\"string\">\",切片容量\"</span>, <span class=\"built_in\">cap</span>(lth))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"切片长度\"</span>, <span class=\"built_in\">len</span>(lth64), <span class=\"string\">\",切片容量\"</span>, <span class=\"built_in\">cap</span>(lth64))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 切片表达式</span></span><br><span class=\"line\">  d := [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  s := [<span class=\"number\">5</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Let\"</span>, <span class=\"string\">\"'s\"</span>, <span class=\"string\">\"Go\"</span>, <span class=\"string\">\"语言\"</span>, <span class=\"string\">\"学习\"</span>&#125;</span><br><span class=\"line\">  s1 := d[<span class=\"number\">1</span>:<span class=\"number\">3</span>]   <span class=\"comment\">// s := d[low(包含):high(不包含)] == d[1] d[2]</span></span><br><span class=\"line\">  s2 := d[<span class=\"number\">2</span>:]    <span class=\"comment\">// 等同于 a[2:5]  == d[2] d[3] d[4]</span></span><br><span class=\"line\">  s3 := d[:<span class=\"number\">3</span>]    <span class=\"comment\">// 等同于 a[0:3]  == d[0] d[1] d[2]</span></span><br><span class=\"line\">  s4 := d[:]     <span class=\"comment\">// 等同于 a[0:5]  == d[0] d[1] d[2] d[3] d[4]</span></span><br><span class=\"line\">  s5 := s[<span class=\"number\">1</span>:<span class=\"number\">4</span>:<span class=\"number\">5</span>] <span class=\"comment\">// 等同于 s[1:4] == s[1] s[2] s[3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s1:%v len(s1):%v cap(s1):%v\\n\"</span>, s1, <span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1)) <span class=\"comment\">// 注意此种情况 &#123; 2 .. 5 容量为 4 &#125;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s2:%v len(s2):%v cap(s2):%v\\n\"</span>, s2, <span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2)) <span class=\"comment\">// &#123; 3 .. 5 容量为 3 &#125;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s3:%v len(s3):%v cap(s3):%v\\n\"</span>, s3, <span class=\"built_in\">len</span>(s3), <span class=\"built_in\">cap</span>(s3)) <span class=\"comment\">// 注意此种情况 &#123; 1 .. 5 容量为 5 &#125;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s4:%v len(s4):%v cap(s4):%v\\n\"</span>, s4, <span class=\"built_in\">len</span>(s4), <span class=\"built_in\">cap</span>(s4)) <span class=\"comment\">// &#123; 1 .. 5 容量为 5&#125;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"s5:%v len(s5):%v cap(s5):%v\\n\"</span>, s5, <span class=\"built_in\">len</span>(s5), <span class=\"built_in\">cap</span>(s5)) <span class=\"comment\">// s5:['s Go 语言] len(s5):3 cap(s5):4</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断切片是否为空</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(d) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"变量 d 切片不为空: \"</span>, d)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 切片遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"i: %d, v: %v , 切片指针地址: %p \\n\"</span>, i, v, &amp;v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// make() 构造切片</span></span><br><span class=\"line\">  e := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"e:%v len(e):%d cap(e):%d \\n\"</span>, e, <span class=\"built_in\">len</span>(e), <span class=\"built_in\">cap</span>(e)) <span class=\"comment\">// 长度 2，容量为 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// append() 添加元素 &#123;7,8,9&#125;</span></span><br><span class=\"line\">  f := <span class=\"built_in\">append</span>(e, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>)                                      <span class=\"comment\">// f:[0 0 7 8 9] len(f):5 cap(f):10</span></span><br><span class=\"line\">  f = <span class=\"built_in\">append</span>(f, e...)                                          <span class=\"comment\">// 追加切片</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"f:%v len(f):%d cap(f):%d \\n\"</span>, f, <span class=\"built_in\">len</span>(f), <span class=\"built_in\">cap</span>(f)) <span class=\"comment\">// 长度 7，容量为 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// copy() 复制切片</span></span><br><span class=\"line\">  slice1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  slice2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">  <span class=\"built_in\">copy</span>(slice2, slice1)</span><br><span class=\"line\">  slice2[<span class=\"number\">6</span>] = <span class=\"number\">2048</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"slice1 : \"</span>, slice1, <span class=\"string\">\"\\t slice2 :\"</span>, slice2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 切片赋值拷贝</span></span><br><span class=\"line\">  slice3 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  slice4 := slice3</span><br><span class=\"line\">  slice4[<span class=\"number\">0</span>] = <span class=\"number\">1024</span></span><br><span class=\"line\">  slice4[<span class=\"number\">2</span>] = <span class=\"number\">4096</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"slice3 : %v, ptr : %p \\n\"</span>, slice3, slice3)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"slice4 : %v, ptr : %p \\n\"</span>, slice4, slice4)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a 切片元素: []</span><br><span class=\"line\">b 切片元素: []</span><br><span class=\"line\">c 切片元素: [<span class=\"literal\">false</span> <span class=\"literal\">true</span>]</span><br><span class=\"line\">切片长度 0 ,切片容量 0</span><br><span class=\"line\">切片长度 3 ,切片容量 3</span><br><span class=\"line\">s1:[2 3] len(s1):2 <span class=\"built_in\">cap</span>(s1):4</span><br><span class=\"line\">s2:[3 4 5] len(s2):3 <span class=\"built_in\">cap</span>(s2):3</span><br><span class=\"line\">s3:[1 2 3] len(s3):3 <span class=\"built_in\">cap</span>(s3):5</span><br><span class=\"line\">s4:[1 2 3 4 5] len(s4):5 <span class=\"built_in\">cap</span>(s4):5</span><br><span class=\"line\">s5:[<span class=\"string\">'s Go 语言] len(s5):3 cap(s5):4</span></span><br><span class=\"line\"><span class=\"string\">变量 d 切片不为空:  [1 2 3 4 5]</span></span><br><span class=\"line\"><span class=\"string\">i: 0, v: Let , 切片指针地址: 0xc000010270 </span></span><br><span class=\"line\"><span class=\"string\">i: 1, v: '</span>s , 切片指针地址: 0xc000010270 </span><br><span class=\"line\">i: 2, v: Go , 切片指针地址: 0xc000010270 </span><br><span class=\"line\">i: 3, v: 语言 , 切片指针地址: 0xc000010270 </span><br><span class=\"line\">i: 4, v: 学习 , 切片指针地址: 0xc000010270 </span><br><span class=\"line\"></span><br><span class=\"line\">e:[0 0] len(e):2 <span class=\"built_in\">cap</span>(e):10 </span><br><span class=\"line\">f:[0 0 7 8 9 0 0] len(f):7 <span class=\"built_in\">cap</span>(f):10 </span><br><span class=\"line\">slice1 :  [1 2 3 4 5] \t slice2 : [1 2 3 4 5 0 2048]</span><br><span class=\"line\">slice3 : [1024 0 4096], ptr : 0xc000018288 </span><br><span class=\"line\">slice4 : [1024 0 4096], ptr : 0xc000018288</span><br></pre></td></tr></table></figure></p>\n<p>Tips 总结: 数组是值类型，且包含元素的类型和元素个数，需注意元素的个数<code>(数组长度)</code>属于数组类型的一部分。</p>\n<hr>\n<h2 id=\"0x02-Go语言基础之Map映射\"><a href=\"#0x02-Go语言基础之Map映射\" class=\"headerlink\" title=\"0x02 Go语言基础之Map映射\"></a>0x02 Go语言基础之Map映射</h2><p>描述: Go语言中提供的映射关系容器为map, 其内部使用散列表(hash)实现。</p>\n<h3 id=\"1-Map-声明定义\"><a href=\"#1-Map-声明定义\" class=\"headerlink\" title=\"1.Map 声明定义\"></a>1.Map 声明定义</h3><p>描述: Map 是一种无序的基于<code>key-value</code>的数据结构, 并且它是引用类型，所以必须初始化值周才能进行使用。</p>\n<p><strong>语法定义:</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">map</span>[KeyType]ValueType</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 参数说明:</span></span><br><span class=\"line\">- KeyType:表示键的类型。</span><br><span class=\"line\">- ValueType:表示键对应的值的类型。</span><br></pre></td></tr></table></figure>\n<p>Tips : map类型的变量<code>默认初始值为nil</code>，需要使用<code>make()函数来分配内存</code>。语法为：<code>make(map[KeyType]ValueType, [cap])</code>, 其中cap表示map的容量，该参数虽然不是必须的，但是我们应该在初始化map的时候就为其指定一个合适的容量。</p>\n<p><br/></p>\n<h3 id=\"2-Map-基础使用\"><a href=\"#2-Map-基础使用\" class=\"headerlink\" title=\"2.Map 基础使用\"></a>2.Map 基础使用</h3><p>描述：Map 中的数据都是成对出现的其Map的基本使用示例代码如下:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.采用Make初始化Map类型的变量。</span></span><br><span class=\"line\">scoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">scoreMap[<span class=\"string\">\"小明\"</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">fmt.Println(scoreMap[<span class=\"string\">\"小明\"</span>])</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"type of a:%T\\n\"</span>, scoreMap)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.在声明时填充元素。</span></span><br><span class=\"line\">userInfo := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"username\"</span>: <span class=\"string\">\"WeiyiGeek\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"password\"</span>: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(userInfo)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"3-Map-键值遍历\"><a href=\"#3-Map-键值遍历\" class=\"headerlink\" title=\"3.Map 键值遍历\"></a>3.Map 键值遍历</h3><p>描述: 在进行Map类型的变量遍历之前，我们先学习判断map中键是否存在。</p>\n<p><strong>(1) 键值判断</strong><br>描述: 判断Map中某个键是否存在可以采用如下特殊写法: <code>value, ok := map[key]</code><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">scoreMap[<span class=\"string\">\"小明\"</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">value, ok := scoreMap[<span class=\"string\">\"张三\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"scoreMap 存在该 '张三' 键\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"scoreMap 不存在该键值\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2) 键值遍历</strong><br>描述: Go 语言中不像Python语言一样有多种方式进行遍历, 大道至简就 <code>for...range</code> 遍历 <code>Map</code> 就可以搞定。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">scoreMap[<span class=\"string\">\"Go\"</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">scoreMap[<span class=\"string\">\"Python\"</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">scoreMap[<span class=\"string\">\"C++\"</span>] = <span class=\"number\">60</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历 k-v 写法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">  fmt.Println(k, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历 k 写法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">  fmt.Println(k)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历 v 写法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">  fmt.Println(v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips ：遍历map时的元素顺序与添加键值对的顺序无关。</p>\n<p><br></p>\n<h3 id=\"4-Map-键值删除\"><a href=\"#4-Map-键值删除\" class=\"headerlink\" title=\"4.Map 键值删除\"></a>4.Map 键值删除</h3><p>描述: 我们可使用 <code>delete() 内建函数</code> 从map中删除一组键值对, <code>delete()</code> 函数的格式如下: <code>delete(map, key)</code> </p>\n<p>其中 <code>map:</code>表示要删除键值对的map, <code>key:</code> 表示要删除的键值对的键。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoreMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">scoreMap[<span class=\"string\">\"张三\"</span>] = <span class=\"number\">90</span></span><br><span class=\"line\">scoreMap[<span class=\"string\">\"小明\"</span>] = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(scoreMap, <span class=\"string\">\"小明\"</span> )  <span class=\"comment\">// 将`小明:100`从map中删除</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v := <span class=\"keyword\">range</span> scoreMap&#123;</span><br><span class=\"line\">  fmt.Println(k, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"5-值为map类型的切片\"><a href=\"#5-值为map类型的切片\" class=\"headerlink\" title=\"5.值为map类型的切片\"></a>5.值为map类型的切片</h3><p>描述: 第一次看到时可能比较绕，其实可以看做在切片中存放Map类型变量。</p>\n<p>简单示例:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mapSlice = <span class=\"built_in\">make</span>([]<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"index:%d value:%v\\n\"</span>, index, value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  <span class=\"comment\">// 对切片中的map元素进行初始化</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">0</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  mapSlice[<span class=\"number\">1</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  mapSlice[<span class=\"number\">2</span>] = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  mapSlice[<span class=\"number\">0</span>][<span class=\"string\">\"name\"</span>] = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">0</span>][<span class=\"string\">\"sex\"</span>] = <span class=\"string\">\"Man\"</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">1</span>][<span class=\"string\">\"姓名\"</span>] = <span class=\"string\">\"极客\"</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">1</span>][<span class=\"string\">\"性别\"</span>] = <span class=\"string\">\"男\"</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">2</span>][<span class=\"string\">\"hobby\"</span>] = <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\">  mapSlice[<span class=\"number\">2</span>][<span class=\"string\">\"爱好\"</span>] = <span class=\"string\">\"电脑技术\"</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> mapSlice &#123;</span><br><span class=\"line\">    <span class=\"comment\">//fmt.Printf(\"index:%d value:%v\\n\", i, v)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> v &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"index:%d value:%v\\n\"</span>, i, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index:0 value:map[]</span><br><span class=\"line\">index:1 value:map[]</span><br><span class=\"line\">index:2 value:map[]</span><br><span class=\"line\"></span><br><span class=\"line\">index:0 value:Man</span><br><span class=\"line\">index:0 value:WeiyiGeek</span><br><span class=\"line\">index:1 value:极客</span><br><span class=\"line\">index:1 value:男</span><br><span class=\"line\">index:2 value:Computer</span><br><span class=\"line\">index:2 value:电脑技术</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"6-值为切片类型的map\"><a href=\"#6-值为切片类型的map\" class=\"headerlink\" title=\"6.值为切片类型的map\"></a>6.值为切片类型的map</h3><p>描述: 同样在Map中存放切片类型的数据。</p>\n<p>代码演示了map中值为切片类型的操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 值为切片类型的map</span><br><span class=\"line\">func <span class=\"function\"><span class=\"title\">demo4</span></span>() &#123;</span><br><span class=\"line\">  var sliceMap = make(map[string][]string, 3)</span><br><span class=\"line\">  var key = [2]string&#123;<span class=\"string\">\"Country\"</span>, <span class=\"string\">\"City\"</span>&#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"初始化 sliceMap 其值 : \"</span>, sliceMap)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := range key &#123;</span><br><span class=\"line\">    // 判断键值是否存在如果不存在则初始化一个容量为2的切片</span><br><span class=\"line\">    value, ok := sliceMap[v]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">      value = make([]string, 0, 2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> v == <span class=\"string\">\"Country\"</span> &#123;</span><br><span class=\"line\">      value = append(value, <span class=\"string\">\"中国\"</span>, <span class=\"string\">\"巴基斯坦\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      value = append(value, <span class=\"string\">\"北京\"</span>, <span class=\"string\">\"上海\"</span>,<span class=\"string\">\"台湾\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 将切片值赋值给Map类型的变量</span><br><span class=\"line\">    sliceMap[v] = value</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化 sliceMap 其值 :  map[]</span><br><span class=\"line\">map[City:[北京 上海] Country:[中国 巴基斯坦]]</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 非常重要、重要 <code>Slice切片与Map</code> 在使用时一定要做初始化操作(在内存空间申请地址)。</p>\n<p><br></p>\n<h3 id=\"7-示例演示\"><a href=\"#7-示例演示\" class=\"headerlink\" title=\"7.示例演示\"></a>7.示例演示</h3><p><strong>1.Map类型的基础示例</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.Map 定义</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a1 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int8</span>  <span class=\"comment\">// (未分配内存)</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Map 类型 的 a1 变量 :\"</span>, a1)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> a1 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"默认初始化的Map类型的a1变量值: nil\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.基本使用利用Make进行分配内存空间存储Map。</span></span><br><span class=\"line\">  b1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">  b1[<span class=\"string\">\"姓名\"</span>] = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  b1[<span class=\"string\">\"性别\"</span>] = <span class=\"string\">\"男|man\"</span></span><br><span class=\"line\">  b1[<span class=\"string\">\"爱好\"</span>] = <span class=\"string\">\"计算机技术\"</span></span><br><span class=\"line\">  b1[<span class=\"string\">\"出生日期\"</span>] = <span class=\"string\">\"2021-08-08\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 指定输出</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"b1['姓名'] = %v \\n\"</span>, b1[<span class=\"string\">\"姓名\"</span>])</span><br><span class=\"line\">  <span class=\"comment\">// 整体输出</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Map b1 Type: %T , Map b1 Value: %v \\n\"</span>, b1, b1)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.在声明时填充元素。</span></span><br><span class=\"line\">  c1 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"username\"</span>: <span class=\"string\">\"WeiyiGeek\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"sex\"</span>:      <span class=\"string\">\"Man\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"hobby\"</span>:    <span class=\"string\">\"Computer\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 指定输出</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"c1['username'] = %v \\n\"</span>, c1[<span class=\"string\">\"username\"</span>])</span><br><span class=\"line\">  <span class=\"comment\">// 整体输出</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Map c1 Type: %T , Length : %d , Map c1 Value: %v \\n\"</span>, c1, <span class=\"built_in\">len</span>(c1), c1)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.判断c1中的键值时候是否存在 sex Key.</span></span><br><span class=\"line\">  value, ok := c1[<span class=\"string\">\"sex\"</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c1 Map 变量中存在 'sex' 键 = \"</span>, value)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c1 Map 变量中不存在 sex 键\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 5.遍历Map</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> b1 &#123;</span><br><span class=\"line\">    fmt.Println(k, <span class=\"string\">\"=\"</span>, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 6.删除指定键值对，例如删除c1中的hobby键值。</span></span><br><span class=\"line\">  <span class=\"built_in\">delete</span>(c1, <span class=\"string\">\"hobby\"</span>)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Map 现存在的键 : \"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"keyword\">range</span> c1 &#123;</span><br><span class=\"line\">    fmt.Print(k, <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map 类型 的 a1 变量 : map[]</span><br><span class=\"line\">默认初始化的Map类型的a1变量值: nil</span><br><span class=\"line\">b1[<span class=\"string\">'姓名'</span>] = WeiyiGeek </span><br><span class=\"line\">Map b1 Type: map[string]string , Map b1 Value: map[出生日期:2021-08-08 姓名:WeiyiGeek 性别:男|man 爱好:计算机技术] </span><br><span class=\"line\">c1[<span class=\"string\">'username'</span>] = WeiyiGeek </span><br><span class=\"line\">Map c1 Type: map[string]string , Length : 3 , Map c1 Value: map[hobby:Computer sex:Man username:WeiyiGeek] </span><br><span class=\"line\">c1 Map 变量中存在 <span class=\"string\">'sex'</span> 键 =  Man</span><br><span class=\"line\">出生日期 = 2021-08-08</span><br><span class=\"line\">姓名 = WeiyiGeek</span><br><span class=\"line\">性别 = 男|man</span><br><span class=\"line\">爱好 = 计算机技术</span><br><span class=\"line\">Map 现存在的键 : username sex</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>2.按照指定顺序遍历map</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  rand.Seed(time.Now().UnixNano()) <span class=\"comment\">//初始化随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 申请并初始化一个长度为 200 的 Map</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> scoreMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">    key := fmt.Sprintf(<span class=\"string\">\"stu%02d\"</span>, i) <span class=\"comment\">//生成stu开头的字符串</span></span><br><span class=\"line\">    value := rand.Intn(<span class=\"number\">100</span>)          <span class=\"comment\">//生成0~99的随机整数</span></span><br><span class=\"line\">    scoreMap[key] = value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//取出map中的所有key存入切片keys</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> scoreMap &#123;</span><br><span class=\"line\">    keys = <span class=\"built_in\">append</span>(keys, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//对切片进行排序</span></span><br><span class=\"line\">  sort.Strings(keys)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//按照排序后的key遍历map</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, key := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">    fmt.Println(key, scoreMap[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu00 <span class=\"number\">4</span></span><br><span class=\"line\">stu01 <span class=\"number\">48</span></span><br><span class=\"line\">stu02 <span class=\"number\">66</span></span><br><span class=\"line\">stu03 <span class=\"number\">18</span></span><br><span class=\"line\">stu04 <span class=\"number\">13</span></span><br><span class=\"line\">stu05 <span class=\"number\">89</span></span><br><span class=\"line\">stu06 <span class=\"number\">80</span></span><br><span class=\"line\">stu07 <span class=\"number\">16</span></span><br><span class=\"line\">stu08 <span class=\"number\">11</span></span><br><span class=\"line\">stu09 <span class=\"number\">26</span></span><br><span class=\"line\">stu10 <span class=\"number\">42</span></span><br><span class=\"line\">stu11 <span class=\"number\">45</span></span><br><span class=\"line\">stu12 <span class=\"number\">24</span></span><br><span class=\"line\">stu13 <span class=\"number\">47</span></span><br><span class=\"line\">stu14 <span class=\"number\">92</span></span><br><span class=\"line\">stu15 <span class=\"number\">77</span></span><br><span class=\"line\">stu16 <span class=\"number\">12</span></span><br><span class=\"line\">stu17 <span class=\"number\">16</span></span><br><span class=\"line\">stu18 <span class=\"number\">17</span></span><br><span class=\"line\">stu19 <span class=\"number\">76</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Tips : 探究上述示例中<code>Array 数组、Slice 切片、Map 映射</code>有序与无序输出演示。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">demo5</span></span>() &#123;</span><br><span class=\"line\">  // Array</span><br><span class=\"line\">  var Arr = [...]int&#123;1, 2, 6, 4, 5&#125;</span><br><span class=\"line\">  // Slice</span><br><span class=\"line\">  var Sli = []int&#123;1, 2, 6, 4, 5&#125;</span><br><span class=\"line\">  // Map</span><br><span class=\"line\">  var Map = map[string]int&#123;</span><br><span class=\"line\">    <span class=\"string\">\"a1\"</span>: 1,</span><br><span class=\"line\">    <span class=\"string\">\"b2\"</span>: 2,</span><br><span class=\"line\">    <span class=\"string\">\"c3\"</span>: 3,</span><br><span class=\"line\">    <span class=\"string\">\"d6\"</span>: 6,</span><br><span class=\"line\">    <span class=\"string\">\"e5\"</span>: 5,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %T, Value : %v \\n\"</span>, Arr, Arr)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, A := range Arr &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v \"</span>, A)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %T, Value : %v \\n\"</span>, Sli, Sli)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, S := range Sli &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v \"</span>, S)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %T, Value : %v \\n\"</span>, Map, Map)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, M := range Map &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v \"</span>, M)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type : [5]int, Value : [1 2 6 4 5] </span><br><span class=\"line\">1 2 6 4 5 </span><br><span class=\"line\">Type : []int, Value : [1 2 6 4 5] </span><br><span class=\"line\">1 2 6 4 5 </span><br><span class=\"line\">Type : map[string]int, Value : map[a1:1 b2:2 c3:3 d6:6 e5:5] </span><br><span class=\"line\">1 2 3 6 5</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}