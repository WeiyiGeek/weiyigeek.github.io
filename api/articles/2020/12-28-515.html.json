{"title":"SonarQube基础介绍与在代码检测中的应用","slug":"系统运维/自动化运维/CI-CD/SonarQube/SonarQube基础介绍与在代码检测中的应用","date":"2020-12-28T04:34:30.000Z","updated":"2022-03-29T07:58:06.992Z","url":"2020/12-28-515.html","path":"api/articles/2020/12-28-515.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201228162516.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231153109.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230173028.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210203171907.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230173517.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230174649.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231105517.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231112014.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231132650.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"0x00-基本概述\"><a href=\"#0x00-基本概述\" class=\"headerlink\" title=\"0x00 基本概述\"></a>0x00 基本概述</h2><p>官网描述: SonarQube 提高您的团队成员的代码质量和安全性，使所有开发人员能够编写更干净、更安全的代码。<br>官网地址: <a href=\"https://www.sonarqube.org/\" target=\"_blank\" rel=\"noopener\">https://www.sonarqube.org/</a><br>帮助文档: <a href=\"https://docs.sonarqube.org/latest/\" target=\"_blank\" rel=\"noopener\">https://docs.sonarqube.org/latest/</a></p>\n<p>Q: SonarQube 是什么?</p>\n<blockquote>\n<p>答: SonarQube 是一个开源的代码质量管理平台系统，用于检测各类开发语言（例如: java、php、python、html、C、C#、Groovy）代码中的错误，漏洞和代码规范;<br>并且现在它可以与现有的Gitlab、Jenkins进行集成，以便在项目拉取后进行连续的代码质量检查;</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201228162516.png\" alt=\"WeiyiGeek.SonarQube\" title=\"\" class=\"\">\n                <p>WeiyiGeek.SonarQube</p>\n            </figure>\n<p>Q: SonarQube 有何用处?</p>\n<blockquote>\n<p>答: CI/CD integration 和 代码评审反馈;</p>\n</blockquote>\n<p><br></p>\n<p><strong>SonarQube 特性:</strong></p>\n<ul>\n<li>(1) 检查代码是否遵循编程标准：如命名规范，编写的规范等。</li>\n<li>(2) 检查设计存在的潜在缺陷：SonarQube 通过插件 Findbugs、Checkstyle 等工具检测代码存在的缺陷。</li>\n<li>(3) 检测代码的重复代码量：SonarQube 可以展示项目中存在大量复制粘贴的代码。</li>\n<li>(4) 检测代码中注释的程度：源码注释过多或者太少都不好，影响程序的可读可理解性。</li>\n<li>(5) 检测代码中包、类之间的关系：分析类之间的关系是否合理，复杂度情况。</li>\n</ul>\n<p><br></p>\n<p><strong>SonarQube 版本: Current is 8.6</strong></p>\n<ul>\n<li>Community Edition(<code>免费</code>) ：(<code>在你的CI/CD中采用代码质量的起点</code>) The starting point for adopting code quality in your CI/CD </li>\n<li>Developer Edition(<code>14 day free trial</code>) : (<code>最大的应用程序安全性，最大的跨分支和PRs值</code>) Maximum Application Security Maximum value across branches &amp; PRs </li>\n<li>Enterprise Edition :(<code>管理您的应用程序组合，在企业级别上保证代码质量和安全性。</code>) Manage your Application Portfolio, enable Code Quality &amp; Security at an Enterprise level. </li>\n<li>Data CenterEdition : (<code>高可用性，用于全球部署</code>) High Availability, for global deployments</li>\n</ul>\n<p>参考地址: <a href=\"https://www.sonarqube.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.sonarqube.org/downloads/</a></p>\n<p><br></p>\n<p><strong>SonarQube 组成:</strong><br>SonarQube 平台是由 4 个部分组成:</p>\n<ul>\n<li>SonarQube Server</li>\n<li>SonarQube Database</li>\n<li>SonarQube Plugins</li>\n<li>SonarQube Scanner </li>\n</ul>\n<p><br></p>\n<p><strong>SonarQube 工作流程:</strong><br>SonarQube 在进行代码质量管理时，会从下面七个纬度来分析项目的质量：<code>Architecture(架构)、Duplications(段重复)、Unit test(单元测试)、Complexity(复杂程度)、Potential Bugs(潜在的BUG)、Codeding Rules(编码规则)、Comments(注解)</code></p>\n<p>SonarQube 需要数据库的支持用于存储检测项目后的分析数据，同时为了实现可持续监测还需要持续集成工具（如Jenkins）的支持，在构建版本前通过 <code>Jenkins+Sonar</code> 插件执行项目分析指令，最终的结果会通过 SonarQube 服务器的Web 页面展示；</p>\n<p>下图是使用 SonarQube 做代码持续审查的流程图：</p>\n<ul>\n<li>1.本地项目开发</li>\n<li>2.推送开发的项目到 SCM (如果 Gitlab/Github)</li>\n<li>3.Jenkins采用自定义的Job进行自动构建</li>\n<li>4.并执行代码分析检测命令 (Sonar-Scanner)</li>\n<li>5.利用SonarQube接口进行分析项目源码(上面的七个维度)并存储到数据库之中</li>\n<li>6.SonarQube Web 前台展现代码分析结果给使用者</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231153109.png\" alt=\"WeiyiGeek.SonarQube 工作流程\" title=\"\" class=\"\">\n                <p>WeiyiGeek.SonarQube 工作流程</p>\n            </figure>\n<hr>\n<h2 id=\"0x01-环境安装\"><a href=\"#0x01-环境安装\" class=\"headerlink\" title=\"0x01 环境安装\"></a>0x01 环境安装</h2><p>描述: SnoarQube 安装方式有两种您可以使用传统的zip文件安装来评估SonarQube，也可以使用我们的Docker映像来启动一个Docker容器</p>\n<p>基础环境需求:</p>\n<ul>\n<li>(0) 处理器 CPU 建议 4~8U</li>\n<li>(1) 内存 RAM 最低 1GM 建议至少 大于等于 4G</li>\n<li>(2) 磁盘空间量将取决于您使用 SonarQube 分析的代码量, 备注读写硬盘性能将对整个 SonarQube 服务器性能产生很大影响。</li>\n<li>(3) 建议 <code>服务器端</code> 与 <code>扫描端</code>都安装 64 位系统</li>\n<li>(4) Java 版本 : 甲骨文 JRE / Openjdk 建议都使用 Jdk 11，如果受环境因素较大扫描端可安装 JDK 8; </li>\n<li>(5) 数据库支持情况: 注意已经缺省弃用 MySQL 数据库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PostgreSQL\t9.3–9.6, 10~12  <span class=\"comment\"># 必须配置为使用 UTF-8 字符集</span></span><br><span class=\"line\">MsSQL 2014 ~ 2017 （MSSQL 服务器 12~14.0） 与捆绑的微软 JDBC 驱动程序。支持快速版。 <span class=\"comment\"># 排序规则必须重写 （CS） 和重音敏感 （AS）（例如：Latin1_General_CS_AS), READ_COMMITTED_SNAPSHOT必须在 SonarQube 数据库上设置，以避免在重负载下出现潜在的死锁</span></span><br><span class=\"line\">Oracle  XE 版 / 11G / 12 ~ 19 C <span class=\"comment\"># 必须配置为使用 UTF8 系列字符集（请参阅NLS_CHARACTERSET) , 驱动程序 ojdbc14.jar 不支持驱动程序, 仅支持精简模式，不支持 OCI</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>PS : 至<code>sonarqube7.9</code>版本以后就不支持Mysql了（本地试用的话可以使用它内置的数据库），系统运行内存一定要3G以上否则在启动项目时启动会显示ES失败;<br>PS : 嵌入式数据库应仅用于评估目的, 嵌入式数据库不能伸缩，它不支持升级到SonarQube的新版本，也不支持将数据从其中迁移到另一个数据库引擎。<br>环境准备(针对于):</p>\n<ul>\n<li>Jdk 11 : <a href=\"https://www.oracle.com/java/technologies/javase-jdk11-downloads.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/java/technologies/javase-jdk11-downloads.html</a></li>\n</ul>\n<p><br></p>\n<h3 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h3><p><strong>(0) 字体</strong><br>描述: 生成执行报告要求在托管 SonarQube 的服务器上安装字体。在 Windows 服务器上这是给定的。但是Linux 服务器的情况并非总是如此。<br>应确保以下事项：</p>\n<ul>\n<li>Fontconfig安装在托管 SonarQube 的服务器上</li>\n<li>在SonarQube服务器上安装了 FreeType 字体包。确切的可用包将因分发而异，但常用的包是<code>libfreetype6</code>(<a href=\"https://www.freetype.org/\" target=\"_blank\" rel=\"noopener\">https://www.freetype.org/</a>)</li>\n</ul>\n<p><strong>(1) Linux上虚拟缓存与IO设置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux 推荐配置</span></span><br><span class=\"line\">vm.max_map_count 大于或等于 524288</span><br><span class=\"line\">fs.file-max 大于或等于 131072</span><br><span class=\"line\">运行 SonarQube 的用户至少可以打开 131072 个文件描述符</span><br><span class=\"line\">运行 SonarQube 的用户至少可以打开 8192 个线程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看vm.max_map_count、fs.file-max、文件描述符、线程</span></span><br><span class=\"line\">sysctl vm.max_map_count</span><br><span class=\"line\">sysctl fs.file-max</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -u</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时配置按照需求调整</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=524288</span><br><span class=\"line\">sysctl -w fs.file-max=131072</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n 131072 </span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -u 8192   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久配置 更新 /etc/sysctl.d/99-sonarqube.conf 或 /etc/sysctl.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 指定用户 /etc/security/limits.d/99-sonarqube.conf or /etc/security/limits.conf</span></span><br><span class=\"line\">sonarqube   -   nofile   131072</span><br><span class=\"line\">sonarqube   -   nproc    8192</span><br></pre></td></tr></table></figure></p>\n<p>PS : 如果使用systemd启动 SonarQube，则必须在 <code>[服务]</code>部分中的单元文件中指定这些限制：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Service]</span><br><span class=\"line\">...</span><br><span class=\"line\">LimitNOFILE=131072</span><br><span class=\"line\">LimitNPROC=8192</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2) seccomp过滤器</strong><br>描述: 默认情况下弹性搜索使用seccomp 筛选器,在大多数发行版上，此功能在内核中激活;<br>针对于 Linux 6 发行版此功能被停用。如果使用没有此功能的发行版，并且无法升级到已激活 seccomp 的较新版本，则必须通过更新 <code>$SONARQUBEHOME/conf/sonar.properties</code> 显式停用此安全层：<code>sonar.search.javaAdditionalOpts</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 seccomp 在您的内核上是否可用，正常状态下应该是如下;</span></span><br><span class=\"line\">$ grep SECCOMP /boot/config-$(uname -r) </span><br><span class=\"line\">CONFIG_HAVE_ARCH_SECCOMP_FILTER=y</span><br><span class=\"line\">CONFIG_SECCOMP_FILTER=y</span><br><span class=\"line\">CONFIG_SECCOMP=y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置</span></span><br><span class=\"line\">sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"本机安装\"><a href=\"#本机安装\" class=\"headerlink\" title=\"本机安装\"></a>本机安装</h3><p>描述: 安装SonarQube的本地实例需要下载 SonarQube Zip 文件;</p>\n<ul>\n<li><p>Step 1.下载SonarQube社区版zip文件 : <a href=\"https://www.sonarqube.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.sonarqube.org/downloads/</a></p>\n</li>\n<li><p>Step 2.作为一个非root用户，解压它比如在<code>C:\\sonarqube</code>或<code>/app/sonarqube</code>中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用户与sonarqube目录创建</span></span><br><span class=\"line\">sudo useradd -m sonarqube  <span class=\"comment\"># esadmin、sonar</span></span><br><span class=\"line\">sudo mkdir -vp /app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将sonarqube压缩包解压到/app/sonarqube</span></span><br><span class=\"line\">sudo unzip sonarqube-8.6.0.39681.zip -d /app/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建软连接</span></span><br><span class=\"line\">/app$ sudo ln -s /app/sonarqube-8.6.0.39681/ /app/sonarqube</span><br><span class=\"line\">/app$ ls /app/sonarqube/</span><br><span class=\"line\">  <span class=\"comment\"># bin/           COPYING        elasticsearch/ lib/           temp/</span></span><br><span class=\"line\">  <span class=\"comment\"># conf/          data/          extensions/    logs/          web/</span></span><br><span class=\"line\">/app<span class=\"variable\">$sudo</span> ln -s /app/sonarqube/bin/linux-x86-64/sonar.sh /usr/<span class=\"built_in\">local</span>/bin/sonar.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 权限设置</span></span><br><span class=\"line\">/app$ sudo chown -R sonarqube:sonarqube /app</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.SonarQube 简单配置文件<code>/app/sonarqube/conf/sonar.properties</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 修改Sonarqube连接数据库配置文件</span></span><br><span class=\"line\">sonar.jdbc.username=sonarqube</span><br><span class=\"line\">sonar.jdbc.password=password</span><br><span class=\"line\"><span class=\"comment\"># #----- PostgreSQL 9.3 or greater</span></span><br><span class=\"line\">sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube?currentSchema=my_schema</span><br><span class=\"line\"><span class=\"comment\"># #----- Oracle 11g/12c/18c/19c</span></span><br><span class=\"line\">sonar.jdbc.url=jdbc:oracle:thin:@localhost:1521/XE</span><br><span class=\"line\"><span class=\"comment\"># #----- Microsoft SQLServer 2014/2016/2017 and SQL Azure</span></span><br><span class=\"line\">sonar.jdbc.url=jdbc:sqlserver://localhost;databaseName=sonar;integratedSecurity=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) Web Server JVM 设置</span></span><br><span class=\"line\"><span class=\"comment\"># -Xmx 设置你的应用程序(不是JVM)能够使用的最大内存数(注意不能超过内存数 )</span></span><br><span class=\"line\"><span class=\"comment\"># -Xms 设置程序初始化的时候内存栈的大小</span></span><br><span class=\"line\">sonar.web.javaOpts=-Xmx512m -Xms128m -XX:+HeapDumpOnOutOfMemoryError</span><br><span class=\"line\">sonar.web.host=0.0.0.0</span><br><span class=\"line\">sonar.web.port=9000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 4.注意必须采用<code>非root用户</code>，启动SonarQube服务器:（PS:此处采用内置的数据库,如果是正式项目请采用外置数据库）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># On Windows, execute:</span></span><br><span class=\"line\">C:\\sonarqube\\bin\\windows-x86-64\\StartSonar.bat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># On other operating systems, as a non-root user execute:</span></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">su - sonarqube -c <span class=\"string\">\"/app/sonarqube/bin/linux-x86-64/sonar.sh console\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看启动状态</span></span><br><span class=\"line\">su sonar ./bin/linux-x86-64/sonar.sh status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跟踪日志</span></span><br><span class=\"line\">su sonar tail -f /usr/<span class=\"built_in\">local</span>/sonarqube-6.7.5/logs/sonar.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如出现以下四行表示启动成功</span></span><br><span class=\"line\">jvm 1    | 2020.12.30 09:39:42 INFO  app[][o.s.a.SchedulerImpl] Process[es] is up</span><br><span class=\"line\">jvm 1    | 2020.12.30 09:39:55 INFO  app[][o.s.a.SchedulerImpl] Process[web] is up</span><br><span class=\"line\">jvm 1    | 2020.12.30 09:39:59 INFO  app[][o.s.a.SchedulerImpl] Process[ce] is up</span><br><span class=\"line\">jvm 1    | 2020.12.30 09:39:59 INFO  app[][o.s.a.SchedulerImpl] SonarQube is up</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230173028.png\" alt=\"WeiyiGeek.sonar.sh\" title=\"\" class=\"\">\n                <p>WeiyiGeek.sonar.sh</p>\n            </figure>\n<p><br></p>\n<h3 id=\"容器安装\"><a href=\"#容器安装\" class=\"headerlink\" title=\"容器安装\"></a>容器安装</h3><p>描述: 采用Docker 容器的安装 SonarQube 非常简单，访问 Find the Community Edition Docker image on Docker Hub:<a href=\"https://hub.docker.com/_/sonarqube/\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/sonarqube/</a> </p>\n<ul>\n<li><p>Step 1.docker拉取SonarQube镜像以及运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定版本拉取</span></span><br><span class=\"line\">docker pull sonarqube:8.6.0-community</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">$ docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=<span class=\"literal\">true</span> -p 9000:9000 sonarqube:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.实例启动并运行后，使用系统管理员凭据登录 <code>http://localhost:9000</code>，账号密码 admin，然后安装参考请看基础使用;</p>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"K8s集群安装\"><a href=\"#K8s集群安装\" class=\"headerlink\" title=\"K8s集群安装\"></a>K8s集群安装</h3><p><strong>环境说明:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Distributor ID: Ubuntu</span><br><span class=\"line\">Description:    Ubuntu 20.04.1 LTS</span><br><span class=\"line\">Release:        20.04</span><br><span class=\"line\">Codename:       focal</span><br><span class=\"line\"></span><br><span class=\"line\">Client: Docker Engine - Community</span><br><span class=\"line\"> Version:           20.10.3</span><br><span class=\"line\"> API version:       1.41</span><br><span class=\"line\"> Go version:        go1.13.15</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubelet --version</span><br><span class=\"line\">Kubernetes v1.19.6</span><br><span class=\"line\"></span><br><span class=\"line\">SonarQube 版本：8.6.1-community <span class=\"comment\"># https://hub.docker.com/_/sonarqube</span></span><br><span class=\"line\">Postgrep 版本：13.1             <span class=\"comment\">#  https://registry.hub.docker.com/_/postgres</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 本集群中kubernetes底层存储使用的是NFS，并且以nfs作为存储创建了storageclass(名称为<code>managed-nfs-storage</code>)便于动态创建pv<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get storageclasses  <span class=\"comment\"># alias sc</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                            PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># managed-nfs-storage (default)   fuseim.pri/ifs   Delete          Immediate           false                  19d</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>操作流程:</strong></p>\n<ul>\n<li>Step 1.环境准备之 PostgreSQL 部署，需要将数据库的数据文件持久化，因此需要创建对应的pv，本次安装通过storageclass创建pv。<br>描述: SonarQube需要依赖数据库存储数据，且SonarQube7.9及其以后版本将不再支持Mysql，所以这里推荐设置PostgreSQL作为SonarQube的数据库。<br>Tips: 由于PostgreSQL只需要集群内部连接，因此采用<code>Headless service</code>(无头服务)来创建数据库对应的svc，数据库的端口是5432，最终的yaml如下</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; PostgreSQL-Deployment.yaml &lt;&lt;'END'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">      app:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      labels:</span></span><br><span class=\"line\"><span class=\"attr\">        app:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"attr\">postgres:13.1-alpine</span></span><br><span class=\"line\"><span class=\"attr\">        imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"attr\">        - containerPort:</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">        env:</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">POSTGRES_DB</span></span><br><span class=\"line\"><span class=\"attr\">          value:</span> <span class=\"string\">\"sonarDB\"</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">POSTGRES_USER</span></span><br><span class=\"line\"><span class=\"attr\">          value:</span> <span class=\"string\">\"sonarUser\"</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">POSTGRES_PASSWORD</span> </span><br><span class=\"line\"><span class=\"attr\">          value:</span> <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"attr\">        resources:</span></span><br><span class=\"line\"><span class=\"attr\">          limits:</span></span><br><span class=\"line\"><span class=\"attr\">            cpu:</span> <span class=\"number\">1000</span><span class=\"string\">m</span></span><br><span class=\"line\"><span class=\"attr\">            memory:</span> <span class=\"number\">2048</span><span class=\"string\">Mi</span></span><br><span class=\"line\"><span class=\"attr\">          requests:</span></span><br><span class=\"line\"><span class=\"attr\">            cpu:</span> <span class=\"number\">500</span><span class=\"string\">m</span></span><br><span class=\"line\"><span class=\"attr\">            memory:</span> <span class=\"number\">1024</span><span class=\"string\">Mi</span></span><br><span class=\"line\"><span class=\"attr\">        volumeMounts:</span></span><br><span class=\"line\"><span class=\"attr\">          - name:</span> <span class=\"string\">data</span></span><br><span class=\"line\"><span class=\"attr\">            mountPath:</span> <span class=\"string\">/var/lib/postgresql/data</span></span><br><span class=\"line\"><span class=\"attr\">      volumes:</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">data</span></span><br><span class=\"line\"><span class=\"attr\">          persistentVolumeClaim:</span></span><br><span class=\"line\"><span class=\"attr\">            claimName:</span> <span class=\"string\">postgres-data</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">postgres-data</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  accessModes:</span> <span class=\"string\">[\"ReadWriteMany\"]</span></span><br><span class=\"line\"><span class=\"attr\">  storageClassName:</span> <span class=\"string\">\"managed-nfs-storage\"</span></span><br><span class=\"line\"><span class=\"attr\">  resources:</span></span><br><span class=\"line\"><span class=\"attr\">    requests:</span></span><br><span class=\"line\"><span class=\"attr\">      storage:</span> <span class=\"number\">1</span><span class=\"string\">Gi</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - port:</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">    protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">5432</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">postgres-sonar</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Step 2.执行<code>kubectl apply|create</code>创建资源，并检查对应的pv，pvc以及日志<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/k8s/sonarqube$ kubectl create -f PostgreSQL-Deployment.yaml -n devops</span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/postgres-sonar created</span></span><br><span class=\"line\"><span class=\"comment\"># persistentvolumeclaim/postgres-data created</span></span><br><span class=\"line\"><span class=\"comment\"># service/postgres-sonar created</span></span><br><span class=\"line\"></span><br><span class=\"line\">~/k8s/sonarqube$ kubectl get pvc,deployment,svc -n devops  | grep <span class=\"string\">\"postgres\"</span></span><br><span class=\"line\">  <span class=\"comment\"># persistentvolumeclaim/postgres-data   Bound    pvc-5d6936c4-2999-4f86-8248-8ad784899801   1Gi        RWX            managed-nfs-storage   71s</span></span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/postgres-sonar   1/1     1            1           71s</span></span><br><span class=\"line\">  <span class=\"comment\"># service/postgres-sonar   ClusterIP   None           &lt;none&gt;        5432/TCP                         71s</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 3.SonarQube 部署的资源清单<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; sonarqube-deployment.yaml &lt;&lt;<span class=\"string\">'END'</span></span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sonarqube</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: sonarqube</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: sonarqube</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: sonarqube</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">      - name: init-sysctl</span><br><span class=\"line\">        image: busybox</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        <span class=\"built_in\">command</span>: [<span class=\"string\">\"sysctl\"</span>, <span class=\"string\">\"-w\"</span>, <span class=\"string\">\"vm.max_map_count=262144\"</span>]</span><br><span class=\"line\">        securityContext:</span><br><span class=\"line\">          privileged: <span class=\"literal\">true</span></span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: sonarqube</span><br><span class=\"line\">        image: sonarqube:8.6.1-community</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 9000</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: SONARQUBE_JDBC_USERNAME</span><br><span class=\"line\">          value: <span class=\"string\">\"sonarUser\"</span></span><br><span class=\"line\">        - name: SONARQUBE_JDBC_PASSWORD</span><br><span class=\"line\">          value: <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">        - name: SONARQUBE_JDBC_URL</span><br><span class=\"line\">          value: <span class=\"string\">\"jdbc:postgresql://postgres-sonar:5432/sonarDB\"</span></span><br><span class=\"line\">        livenessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /sessions/new</span><br><span class=\"line\">            port: 9000</span><br><span class=\"line\">          initialDelaySeconds: 60</span><br><span class=\"line\">          periodSeconds: 30</span><br><span class=\"line\">        readinessProbe:</span><br><span class=\"line\">          httpGet:</span><br><span class=\"line\">            path: /sessions/new</span><br><span class=\"line\">            port: 9000</span><br><span class=\"line\">          initialDelaySeconds: 60</span><br><span class=\"line\">          periodSeconds: 30</span><br><span class=\"line\">          failureThreshold: 6</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            cpu: 2000m</span><br><span class=\"line\">            memory: 2048Mi</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            cpu: 1000m</span><br><span class=\"line\">            memory: 1024Mi</span><br><span class=\"line\">        volumeMounts:</span><br><span class=\"line\">        - mountPath: /opt/sonarqube/conf</span><br><span class=\"line\">          name: data</span><br><span class=\"line\">          subPath: conf</span><br><span class=\"line\">        - mountPath: /opt/sonarqube/data</span><br><span class=\"line\">          name: data</span><br><span class=\"line\">          subPath: data</span><br><span class=\"line\">        - mountPath: /opt/sonarqube/extensions</span><br><span class=\"line\">          name: data</span><br><span class=\"line\">          subPath: extensions</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: data</span><br><span class=\"line\">        persistentVolumeClaim:</span><br><span class=\"line\">          claimName: sonarqube-data  </span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sonarqube-data </span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">    - ReadWriteMany</span><br><span class=\"line\">  storageClassName: <span class=\"string\">\"managed-nfs-storage\"</span></span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 10Gi</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: sonarqube</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: sonarqube</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - name: sonarqube</span><br><span class=\"line\">      port: 9000</span><br><span class=\"line\">      targetPort: 9000</span><br><span class=\"line\">      nodePort: 30002</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: sonarqube</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips: 通过官方的<code>sonar</code>镜像部署，通过环境变量指定连接数据库的地址信息，同样通过<code>storageclass</code>来提供存储卷，通过NodePort方式暴露服务。</p>\n<p>Tips: 与常规部署不同的是，这里对sonar通过init container进行了初始化，执行修改了容器的<code>vm.max_map_count</code>根据内存大小提供;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改此权限需要授权能执行系统命令</span></span><br><span class=\"line\">securityContext:</span><br><span class=\"line\">  privileged: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如，在Linux操作系统下，可以在主机上以root用户运行以下命令来设置当前会话的推荐值:</span></span><br><span class=\"line\"><span class=\"comment\"># For example, on Linux, you can set the recommended values for the current session by running the following commands as root on the host:</span></span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\">sysctl -w fs.file-max=65536</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n 65536</span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -u 4096</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li><p>Step 4.执行部署sonarqube并查看部署状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/k8s/sonarqube$ kubectl create -f sonarqube-deployment.yaml -n devops</span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/sonarqube created</span></span><br><span class=\"line\">  <span class=\"comment\"># persistentvolumeclaim/sonarqube-data created</span></span><br><span class=\"line\">  <span class=\"comment\"># service/sonarqube created</span></span><br><span class=\"line\"></span><br><span class=\"line\">~/k8s/sonarqube$ kubectl get deployment,pvc,svc -n devops | grep <span class=\"string\">'sonarqube'</span></span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/sonarqube        0/1     1            0           4m57s</span></span><br><span class=\"line\">  <span class=\"comment\"># persistentvolumeclaim/sonarqube-data   Bound    pvc-5695d2d5-e769-43f4-a91d-7ff0f5ab0b8b   10Gi       RWX            managed-nfs-storage   4m57s</span></span><br><span class=\"line\">  <span class=\"comment\"># service/sonarqube        NodePort    10.100.233.217   &lt;none&gt;        9000:30002/TCP                   4m57s</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 5.访问SonarQube UI: <code>http://192.168.12.107:30002/sessions/new?return_to=%2F</code></p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210203171907.png\" alt=\"WeiyiGeek.K8s-SonarQube\" title=\"\" class=\"\">\n                <p>WeiyiGeek.K8s-SonarQube</p>\n            </figure>\n<hr>\n<h2 id=\"0x02-基础使用\"><a href=\"#0x02-基础使用\" class=\"headerlink\" title=\"0x02 基础使用\"></a>0x02 基础使用</h2><h3 id=\"1-初始化配置\"><a href=\"#1-初始化配置\" class=\"headerlink\" title=\"1.初始化配置\"></a>1.初始化配置</h3><ul>\n<li>Step 1.访问 <code>http://10.10.107.217:9000/</code> 输入初始密码(<code>admin / admin</code>), 更新初始密码;</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230173517.png\" alt=\"WeiyiGeek.登陆成功\" title=\"\" class=\"\">\n                <p>WeiyiGeek.登陆成功</p>\n            </figure>\n<ul>\n<li>Step 2.界面汉化插件，操作步骤:Administration -&gt; Markplace -&gt; Plugins -&gt; 搜索 Chinese -&gt; 安装 <code>Chinese Pack Localization</code> -&gt; 重启 Server -&gt; 刷新页面 重新登陆</li>\n<li>PS 官方地址中文包下载地址：<a href=\"https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/SonarQubeCommunity/sonar-l10n-zh/releases</a></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201230174649.png\" alt=\"WeiyiGeek.界面汉化\" title=\"\" class=\"\">\n                <p>WeiyiGeek.界面汉化</p>\n            </figure>\n<ul>\n<li><p>Step 3.安装代码检测插件默认已经安装了<code>C Java Python PHP js</code>等质量分析工具，并且可以根据项目自行安装其它的代码检测语言比如 Go;</p>\n</li>\n<li><p>Step 4.离线安装插件，由于SonarQube安装可能需要很长的时间，所以可以选择之前已经安装过的插件，直接导入到Plugins目录, <code>然后重新服务后即可在应用中心查看已安装过的插件</code>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Plugins 目录</span></span><br><span class=\"line\">~$ ls /app/sonarqube/extensions/plugins/</span><br><span class=\"line\">README.txt  sonar-l10n-zh-plugin-8.5.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将下载的插件解压到Plugins目录之中并授予相应的权限;</span></span><br><span class=\"line\">tar xf sonar_plugins.tar.gz -C /usr/<span class=\"built_in\">local</span>/sonarqube/extensions/plugins/</span><br><span class=\"line\">sudo shown -R sonarqube.sonarqube /usr/<span class=\"built_in\">local</span>/sonarqube/extensions/plugins/</span><br><span class=\"line\">ls /app/sonarqube/extensions/plugins/</span><br><span class=\"line\"><span class=\"comment\"># README.txt  sonar-l10n-zh-plugin-8.5.jar sonar-pmd-plugin-3.2.1.jar</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 5.如果在客户端需要分析HTML、PHP、Python等项目,则需要安装一个<code>sonar-scanner</code>(<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/)的工具\" target=\"_blank\" rel=\"noopener\">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/)的工具</a>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Client端下载解压</span></span><br><span class=\"line\">wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216.zip</span><br><span class=\"line\"><span class=\"comment\"># 2020-12-31 02:34:47 (517 KB/s) - ‘sonar-scanner-cli-4.5.0.2216.zip’ saved [589153/589153]</span></span><br><span class=\"line\">unzip sonar-scanner-cli-4.5.0.2216.zip -d sonar-scanner-cli</span><br><span class=\"line\">~/sonar/sonar-scanner-4.5.0.2216$ ls</span><br><span class=\"line\"><span class=\"comment\"># bin  conf  lib</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 软连接</span></span><br><span class=\"line\">sudo ln -s /home/weiyigeek/sonar/sonar-scanner-4.5.0.2216/bin/sonar-scanner /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">sonar-scanner -v</span><br><span class=\"line\"><span class=\"comment\"># INFO: Scanner configuration file: /home/weiyigeek/sonar/sonar-scanner-4.5.0.2216/conf/sonar-scanner.properties</span></span><br><span class=\"line\"><span class=\"comment\"># INFO: Project root configuration file: NONE</span></span><br><span class=\"line\"><span class=\"comment\"># INFO: SonarScanner 4.5.0.2216</span></span><br><span class=\"line\"><span class=\"comment\"># INFO: Java 1.8.0_211 Oracle Corporation (64-bit)</span></span><br><span class=\"line\"><span class=\"comment\"># INFO: Linux 5.4.0-46-generic amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端 sonar-scanner 基础配置</span></span><br><span class=\"line\"><span class=\"comment\">## 域名解析</span></span><br><span class=\"line\">sudo tee -a /etc/hosts &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">10.10.107.217 sonar.weiyigeek.top</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-静态项目分析实践\"><a href=\"#2-静态项目分析实践\" class=\"headerlink\" title=\"2.静态项目分析实践\"></a>2.静态项目分析实践</h3><p>描述: 前面已经对SonarQube进行了一个简单的配置, 接下来我们将建立一个代码项目并进行分析;</p>\n<ul>\n<li>Step 1.创建项目与令牌(Token), 首页创建新项目 -&gt; 手工设置(项目标识/显示名) -&gt; 创建一个令牌 -&gt; 输入<code>HelloWorld</code> -&gt; 获得Token:<code>helloWorld: 1b0b037f06e7990c360d62ce9151aaf978cec155</code> </li>\n</ul>\n<p>PS : 此时需要设置服务端开启认证(缺省是开启的)，配置 -&gt; <code>Force user authentication|强制用户使用认证</code> -&gt; 标识: sonar.forceAuthentication</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231105517.png\" alt=\"WeiyiGeek.分析项目创建\"></p>\n<ul>\n<li><p>Step 2.在我们客户端机器拉取我们的静态Blog页面代码并进行质量分析;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/code$ git <span class=\"built_in\">clone</span> git@gitlab.weiyigeek.top:ci-cd/blog.git</span><br><span class=\"line\">~/code/blog$ git config --list</span><br><span class=\"line\"><span class=\"comment\"># core.repositoryformatversion=0</span></span><br><span class=\"line\"><span class=\"comment\"># core.filemode=true</span></span><br><span class=\"line\"><span class=\"comment\"># core.bare=false</span></span><br><span class=\"line\"><span class=\"comment\"># core.logallrefupdates=true</span></span><br><span class=\"line\"><span class=\"comment\"># remote.origin.url=git@gitlab.weiyigeek.top:ci-cd/blog.git</span></span><br><span class=\"line\"><span class=\"comment\"># remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.客户端 sonar-scanner.properties 全局参数设置,在之后的使用<code>sonar-scanner</code>命令时便可不输入以下参数;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nano ~/sonar/sonar-scanner-4.5.0.2216/conf/sonar-scanner.properties</span><br><span class=\"line\"><span class=\"comment\">#----- Default SonarQube server</span></span><br><span class=\"line\">sonar.host.url=http://sonar.weiyigeek.top:9000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----- Token Configure</span></span><br><span class=\"line\">sonar.login=1b0b037f06e7990c360d62ce9151aaf978cec155</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#----- Default source code encoding</span></span><br><span class=\"line\">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 4.开始在客户端进行代码的质量扫描</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目扫描</span></span><br><span class=\"line\">sonar-scanner -Dsonar.projectname=Hello-World-Blog -Dsonar.projectKey=Hello-World -Dsonar.sources=.</span><br><span class=\"line\">  <span class=\"comment\"># INFO: CPD Executor CPD calculation finished (done) | time=270833ms</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Analysis report generated in 10280ms, dir size=159 MB</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Analysis report compressed in 44023ms, zip size=39 MB</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Analysis report uploaded in 1574ms</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ANALYSIS SUCCESSFUL, you can browse http://sonarqube.weiyigeek.top/dashboard?id=html</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: More about the report processing at http://sonarqube.weiyigeek.top/api/ce/task?id=AXa2xmjzr2pPEzGrpOUX</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Analysis total time: 6:52.709 s</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: EXECUTION SUCCESS   # 分析扫描完成</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Total time: 6:54.148s</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Final Memory: 16M/423M</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231112014.png\" alt=\"WeiyiGeek.代码质量检测结果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.代码质量检测结果</p>\n            </figure>\n<p><br></p>\n<h3 id=\"3-Java项目分析实践\"><a href=\"#3-Java项目分析实践\" class=\"headerlink\" title=\"3.Java项目分析实践\"></a>3.Java项目分析实践</h3><p>描述: Java 项目可以通过Maven进行代码质检而无需使用Sonar-Scanner工具(<code>但是扫描出的结果比官方的工具较少</code>)，只需要安装Maven即可</p>\n<ul>\n<li><p>Step 1.Linux 下 Maven 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install maven</span><br><span class=\"line\">yum install maven</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.手动从Gitlab仓库获取Java代码，进入项目目录并使用MVN进行代码质量扫描</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/code/$ git <span class=\"built_in\">clone</span> git@gitlab.weiyigeek.top:ci-cd/java-maven.git</span><br><span class=\"line\">~/code/java-maven$ git config --list</span><br><span class=\"line\"><span class=\"comment\"># core.repositoryformatversion=0</span></span><br><span class=\"line\"><span class=\"comment\"># core.filemode=true</span></span><br><span class=\"line\"><span class=\"comment\"># core.bare=false</span></span><br><span class=\"line\"><span class=\"comment\"># core.logallrefupdates=true</span></span><br><span class=\"line\"><span class=\"comment\"># remote.origin.url=git@gitlab.weiyigeek.top:ci-cd/java-maven.git</span></span><br><span class=\"line\"><span class=\"comment\"># remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*</span></span><br><span class=\"line\"><span class=\"comment\"># branch.master.remote=origin</span></span><br><span class=\"line\"><span class=\"comment\"># branch.master.merge=refs/heads/master</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.在 Maven 配置文件进行变量的定义配置只需要输入一条命令即可;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\">mvn sonar:sonar -Dsonar.host.url=http://sonar.weiyigeek.top:9000 -Dsonar.login=1b0b037f06e7990c360d62ce9151aaf978cec155</span><br><span class=\"line\"><span class=\"comment\"># [INFO] Scanning for projects...</span></span><br><span class=\"line\"><span class=\"comment\"># Downloading from weiyigeek-maven: http://maven.weiyigeek.top:8081/repository/maven-public/org/apache/maven/plugins/maven-deploy-plugin/2.7/maven-deploy-plugin-2.7.pom</span></span><br><span class=\"line\"><span class=\"comment\"># ....</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] ANALYSIS SUCCESSFUL, you can browse http://sonarqube.weiyigeek.top/dashboard?id=com.weiyigeek.main%3Ahello-world</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] More about the report processing at http://sonarqube.weiyigeek.top/api/ce/task?id=AXa2595Cr2pPEzGrpOUp</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] Analysis total time: 7.113 s</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] BUILD SUCCESS</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] ------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] Total time:  27.219 s</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] Finished at: 2020-12-31T03:46:57Z</span></span><br><span class=\"line\"><span class=\"comment\"># [INFO] ------------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.在  Maven 配置文件 文件中定义Token后</span></span><br><span class=\"line\">mvn sonar:sonar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式3.采用 `Sonar-scanner` 方式进行扫描该Maven项目</span></span><br><span class=\"line\">sonar-scanner -Dsonar.projectName=Java-maven -Dsonar.projectKey=Hello-World -Dsonar.sources=. -Dsonar.java.binaries=target/</span><br><span class=\"line\">  <span class=\"comment\"># INFO: ANALYSIS SUCCESSFUL, you can browse http://sonarqube.weiyigeek.top/dashboard?id=Hello-World</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: More about the report processing at http://sonarqube.weiyigeek.top/api/ce/task?id=AXa3PxQNr2pPEzGrpOU1</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Analysis total time: 3.467 s</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: EXECUTION SUCCESS</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Total time: 4.293s</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: Final Memory: 18M/163M</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO: ------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 4.查看 SonarQube 分析后的结果</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201231132650.png\" alt=\"WeiyiGeek.SonarQube-Maven\" title=\"\" class=\"\">\n                <p>WeiyiGeek.SonarQube-Maven</p>\n            </figure>\n<hr>\n<h2 id=\"0x03-插件收集\"><a href=\"#0x03-插件收集\" class=\"headerlink\" title=\"0x03 插件收集\"></a>0x03 插件收集</h2><ul>\n<li>(1) sonar-pdf-report (质量分析报告插件): <code>https://github.com/SonarQubeCommunity/sonar-pdf-report</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Git拉取编译</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/SonarQubeCommunity/sonar-pdf-report.git</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># [INFO] Replacing /home/weiyigeek/code/sonar-pdf-report/target/sonar-pdfreport-plugin-1.5-SNAPSHOT.jar</span></span><br><span class=\"line\">$ ls -lh /home/weiyigeek/code/sonar-pdf-report/target/</span><br><span class=\"line\">  <span class=\"comment\"># -rw-r--r-- 1 weiyigeek weiyigeek 3.1M Dec 31 02:11 sonar-pdfreport-plugin-1.5-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x04-补充说明\"><a href=\"#0x04-补充说明\" class=\"headerlink\" title=\"0x04 补充说明\"></a>0x04 补充说明</h2><h3 id=\"1-多种构建技术调用检测\"><a href=\"#1-多种构建技术调用检测\" class=\"headerlink\" title=\"(1) 多种构建技术调用检测\"></a>(1) 多种构建技术调用检测</h3><h4 id=\"使用Maven执行SonarQube扫描\"><a href=\"#使用Maven执行SonarQube扫描\" class=\"headerlink\" title=\"使用Maven执行SonarQube扫描\"></a>使用Maven执行SonarQube扫描</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用Maven执行SonarQube分析是非常简单的。只需要在你的项目目录下执行如下命令。</span></span><br><span class=\"line\">mvn sonar:sonar \\</span><br><span class=\"line\">  -Dsonar.projectKey=Jenkis \\</span><br><span class=\"line\">  -Dsonar.host.url=http://sonar.weiyigeek.top:9000 \\</span><br><span class=\"line\">  -Dsonar.login=755eeb453cb28f96aa9d4ea14334da7287c2e840</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"使用Gradle执行SonarQube扫描\"><a href=\"#使用Gradle执行SonarQube扫描\" class=\"headerlink\" title=\"使用Gradle执行SonarQube扫描\"></a>使用Gradle执行SonarQube扫描</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 使用Gradle执行SonarQube分析是非常简单的。只需要在你的&lt;code&gt;build.gradle&lt;/code&gt;文件中声明&lt;code&gt;org.sonarqube&lt;/code&gt;插件：</span></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  id <span class=\"string\">\"org.sonarqube\"</span> version <span class=\"string\">\"3.0\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 然后执行如下命令：</span></span><br><span class=\"line\">./gradlew sonarqube \\</span><br><span class=\"line\">  -Dsonar.projectKey=Jenkis \\</span><br><span class=\"line\">  -Dsonar.host.url=http://sonar.weiyigeek.top:9000 \\</span><br><span class=\"line\">  -Dsonar.login=755eeb453cb28f96aa9d4ea14334da7287c2e840</span><br></pre></td></tr></table></figure>\n<p>PS : 你需要查找当前版本的Gradle插件(<a href=\"http://sonar.weiyigeek.top:9000/documentation/analysis/scan/sonarscanner-for-gradle/\" target=\"_blank\" rel=\"noopener\">http://sonar.weiyigeek.top:9000/documentation/analysis/scan/sonarscanner-for-gradle/</a>)</p>\n<p><br></p>\n<h4 id=\"使用MSBuild扫描器执行SonarQube扫描\"><a href=\"#使用MSBuild扫描器执行SonarQube扫描\" class=\"headerlink\" title=\"使用MSBuild扫描器执行SonarQube扫描\"></a>使用MSBuild扫描器执行SonarQube扫描</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 下载并解压SonarQube MSBuild扫描器将可执行程序的目录添加至&lt;code&gt;%PATH%&lt;/code&gt;环境变量</span></span><br><span class=\"line\"><span class=\"comment\"># http://sonar.weiyigeek.top:9000/documentation/analysis/scan/sonarscanner-for-msbuild/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 使用MSBuild执行SonarQube分析是非常简单的。只需要在你的项目目录下执行如下命令。</span></span><br><span class=\"line\">SonarScanner.MSBuild.exe begin /k:<span class=\"string\">\"Jenkis\"</span> /d:sonar.host.url=<span class=\"string\">\"http://sonar.weiyigeek.top:9000\"</span> /d:sonar.login=<span class=\"string\">\"755eeb453cb28f96aa9d4ea14334da7287c2e840\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 再次</span></span><br><span class=\"line\">MsBuild.exe /t:Rebuild</span><br><span class=\"line\">SonarScanner.MSBuild.exe end /d:sonar.login=<span class=\"string\">\"755eeb453cb28f96aa9d4ea14334da7287c2e840\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"其他-比如-JS-TS-Go-Python-PHP-…-执行SonarQube扫描\"><a href=\"#其他-比如-JS-TS-Go-Python-PHP-…-执行SonarQube扫描\" class=\"headerlink\" title=\"其他 (比如 JS, TS, Go, Python, PHP, …)执行SonarQube扫描\"></a>其他 (比如 JS, TS, Go, Python, PHP, …)执行SonarQube扫描</h4><p>各大操作系统平台的scanner工具下载地址：</p>\n<ul>\n<li>Linux/Windows/Mac平台的扫描器：<a href=\"http://sonar.weiyigeek.top:9000/documentation/analysis/scan/sonarscanner/\" target=\"_blank\" rel=\"noopener\">http://sonar.weiyigeek.top:9000/documentation/analysis/scan/sonarscanner/</a></li>\n<li>分析调用<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux </span></span><br><span class=\"line\">sonar-scanner \\</span><br><span class=\"line\">  -Dsonar.projectKey=Jenkis \\</span><br><span class=\"line\">  -Dsonar.sources=. \\</span><br><span class=\"line\">  -Dsonar.host.url=http://sonar.weiyigeek.top:9000 \\</span><br><span class=\"line\">  -Dsonar.login=755eeb453cb28f96aa9d4ea14334da7287c2e840</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows</span></span><br><span class=\"line\">sonar-scanner.bat -D<span class=\"string\">\"sonar.projectKey=Jenkis\"</span> -D<span class=\"string\">\"sonar.sources=.\"</span> -D<span class=\"string\">\"sonar.host.url=http://sonar.weiyigeek.top:9000\"</span> -D<span class=\"string\">\"sonar.login=755eeb453cb28f96aa9d4ea14334da7287c2e840\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x05-入坑出坑\"><a href=\"#0x05-入坑出坑\" class=\"headerlink\" title=\"0x05 入坑出坑\"></a>0x05 入坑出坑</h2><h3 id=\"问题1-ERROR-Error-during-SonarScanner-execution-Malformed-input-or-input-contains-unmappable-characters\"><a href=\"#问题1-ERROR-Error-during-SonarScanner-execution-Malformed-input-or-input-contains-unmappable-characters\" class=\"headerlink\" title=\"问题1.ERROR: Error during SonarScanner execution Malformed input or input contains unmappable characters\"></a>问题1.ERROR: Error during SonarScanner execution Malformed input or input contains unmappable characters</h3><p>问题原因: 操作系统字符集不支持中文, 需要安装相关的中文依赖;<br>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以`Ubuntu`为例</span></span><br><span class=\"line\">- apt-get update &amp;&amp; apt-get install -y locales</span><br><span class=\"line\">- locale-gen <span class=\"string\">\"en_US.UTF-8\"</span></span><br><span class=\"line\">- update-locale LC_ALL=<span class=\"string\">\"en_US.UTF-8\"</span></span><br><span class=\"line\">- <span class=\"built_in\">export</span> LANG=<span class=\"string\">\"en_US.UTF-8\"</span></span><br></pre></td></tr></table></figure><br>参考地址: <a href=\"https://community.sonarsource.com/t/analysis-failed-with-malformed-input-or-input-contains-unmappable-characters/19452\" target=\"_blank\" rel=\"noopener\">https://community.sonarsource.com/t/analysis-failed-with-malformed-input-or-input-contains-unmappable-characters/19452</a></p>\n<p>-Dsonar.scm.provider=git</p>\n<p><a href=\"https://blog.csdn.net/huangli1466384630/article/details/85283766\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huangli1466384630/article/details/85283766</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Error during SonarScanner execution</span><br><span class=\"line\">java.lang.IllegalStateException: Can not execute Findbugs</span><br><span class=\"line\">  at org.sonar.plugins.findbugs.FindbugsExecutor.execute(FindbugsExecutor.java:188)</span><br><span class=\"line\">  at org.sonar.plugins.findbugs.FindbugsSensor.execute(FindbugsSensor.java:114)</span><br><span class=\"line\">  at org.sonar.scanner.sensor.AbstractSensorWrapper.analyse(AbstractSensorWrapper.java:48)</span><br><span class=\"line\">  at org.sonar.scanner.sensor.ModuleSensorsExecutor.execute(ModuleSensorsExecutor.java:85)</span><br><span class=\"line\">  at org.sonar.scanner.sensor.ModuleSensorsExecutor.lambda<span class=\"variable\">$execute</span><span class=\"variable\">$1</span>(ModuleSensorsExecutor.java:59)</span><br><span class=\"line\">  at org.sonar.scanner.sensor.ModuleSensorsExecutor.withModuleStrategy(ModuleSensorsExecutor.java:77)</span><br><span class=\"line\">  at org.sonar.scanner.sensor.ModuleSensorsExecutor.execute(ModuleSensorsExecutor.java:59)</span><br><span class=\"line\">  at org.sonar.scanner.scan.ModuleScanContainer.doAfterStart(ModuleScanContainer.java:82)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.startComponents(ComponentContainer.java:137)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.execute(ComponentContainer.java:123)</span><br><span class=\"line\">  at org.sonar.scanner.scan.ProjectScanContainer.scan(ProjectScanContainer.java:393)</span><br><span class=\"line\">  at org.sonar.scanner.scan.ProjectScanContainer.scanRecursively(ProjectScanContainer.java:389)</span><br><span class=\"line\">  at org.sonar.scanner.scan.ProjectScanContainer.doAfterStart(ProjectScanContainer.java:358)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.startComponents(ComponentContainer.java:137)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.execute(ComponentContainer.java:123)</span><br><span class=\"line\">  at org.sonar.scanner.bootstrap.GlobalContainer.doAfterStart(GlobalContainer.java:144)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.startComponents(ComponentContainer.java:137)</span><br><span class=\"line\">  at org.sonar.core.platform.ComponentContainer.execute(ComponentContainer.java:123)</span><br><span class=\"line\">  at org.sonar.batch.bootstrapper.Batch.doExecute(Batch.java:72)</span><br><span class=\"line\">  at org.sonar.batch.bootstrapper.Batch.execute(Batch.java:66)</span><br><span class=\"line\">  at org.sonarsource.scanner.api.internal.batch.BatchIsolatedLauncher.execute(BatchIsolatedLauncher.java:46)</span><br><span class=\"line\">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">  at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">  at org.sonarsource.scanner.api.internal.IsolatedLauncherProxy.invoke(IsolatedLauncherProxy.java:60)</span><br><span class=\"line\">  at com.sun.proxy.<span class=\"variable\">$Proxy0</span>.execute(Unknown Source)</span><br><span class=\"line\">  at org.sonarsource.scanner.api.EmbeddedScanner.doExecute(EmbeddedScanner.java:189)</span><br><span class=\"line\">  at org.sonarsource.scanner.api.EmbeddedScanner.execute(EmbeddedScanner.java:138)</span><br><span class=\"line\">  at org.sonarsource.scanner.cli.Main.execute(Main.java:112)</span><br><span class=\"line\">  at org.sonarsource.scanner.cli.Main.execute(Main.java:75)</span><br><span class=\"line\">  at org.sonarsource.scanner.cli.Main.main(Main.java:61)</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: One (sub)project contains Java <span class=\"built_in\">source</span> files that are not compiled (/home/jenkins/agent/workspace/info_manage_rebuild).</span><br><span class=\"line\">  at org.sonar.plugins.findbugs.FindbugsConfiguration.getFindbugsProject(FindbugsConfiguration.java:123)</span><br><span class=\"line\">  at org.sonar.plugins.findbugs.FindbugsExecutor.execute(FindbugsExecutor.java:119)</span><br><span class=\"line\">  ... 31 more</span><br><span class=\"line\">ERROR: </span><br><span class=\"line\">ERROR: Re-run SonarScanner using the -X switch to <span class=\"built_in\">enable</span> full debug logging.</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/melody_hahaha/article/details/80567624\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/melody_hahaha/article/details/80567624</a></p>\n<p>解决sonar scanner扫描报错Please provide compiled classes of your project with sonar.java.binaries property</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"},{"name":"CI-CD","path":"api/categories/CI-CD.json"},{"name":"Code-Detection","path":"api/categories/Code-Detection.json"}],"tags":[{"name":"SonarQube","path":"api/tags/SonarQube.json"}]}