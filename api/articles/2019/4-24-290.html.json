{"title":"JAVA入门学习五","slug":"编程世界/Java/JAVA入门学习五","date":"2019-04-24T08:34:30.000Z","updated":"2022-03-29T05:39:06.303Z","url":"2019/4-24-290.html","path":"api/articles/2019/4-24-290.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190820122042.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822165026.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822171017.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822173302.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190825230243.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"String-类使用\"><a href=\"#String-类使用\" class=\"headerlink\" title=\"String 类使用\"></a>String 类使用</h4><h5 id=\"1-Scanner-详解于使用\"><a href=\"#1-Scanner-详解于使用\" class=\"headerlink\" title=\"1.Scanner 详解于使用\"></a>1.Scanner 详解于使用</h5><p>Scanner的概述：一个简单的文本扫描器，可以使用正则表达式解析原始类型和字符串，以默认空格作为分割。<br>Scanner的构造方法原理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#由于是final修饰Scanner类不能被继承</span></span><br><span class=\"line\">public final class Scanner</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Iterator&lt;String&gt;, Closeable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#常用方法</span></span><br><span class=\"line\">Scanner(InputStream <span class=\"built_in\">source</span>)</span><br><span class=\"line\">Scanner(System.in)</span><br></pre></td></tr></table></figure><br>System类下有一个静态的字段：<code>public static final InputStream in</code>; 标准的输入流，对应着键盘录入。</p>\n<p><em>一般方法</em></p>\n<ul>\n<li>hasNextXxx() #判断是否还有下一个输入项,其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串则可以省略Xxx</li>\n<li>nextXxx()   #获取下一个输入项。Xxx的含义和上个方法中的Xxx相同,默认情况下，Scanner使用空格，回车等作为分隔符</li>\n<li>public int nextInt():获取一个int类型的值，当我们录入10的时候键盘上录入的是10和\\r\\n</li>\n<li>public String nextLine():获取一个String类型的值，可以接收任意类型，只要通过\\r\\n就证明一行结束;</li>\n</ul>\n<p>Scanner获取数据出现的小问题及解决方案</p>\n<ul>\n<li>第一种：先获取一个数值后，在创建一个新的键盘录入对象获取字符串。(会占用内存空间)</li>\n<li>第二种：把所有的数据都先按照字符串获取，然后要什么，你就对应的转换为什么。(后面讲)</li>\n</ul>\n<p>基础示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScannerClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例1：输入格式判断</span></span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sc.hasNextInt()) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"整数：\"</span>+sc.nextInt());</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"格式错误！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.NextInt域nextLine联用的问题</span></span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入第二个1数字：\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> integer = sc.nextInt();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"请输入第二个字符串：\"</span>);</span><br><span class=\"line\">    String line = sc.nextLine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Integer 整数:\"</span>+integer+<span class=\"string\">\",\"</span>+line);</span><br><span class=\"line\">    <span class=\"comment\">//解决方法1：创建两次对象</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = sc.nextInt();</span><br><span class=\"line\">    Scanner lineStr = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    String line1 = lineStr.nextLine();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"解决方法: 整数=\"</span>+ i +<span class=\"string\">\", 字符串=\"</span> + line1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">请输入一个整数:<span class=\"number\">1024</span></span><br><span class=\"line\">整数：<span class=\"number\">1024</span></span><br><span class=\"line\">请输入第二个<span class=\"number\">1</span>数字：<span class=\"number\">2048</span></span><br><span class=\"line\">请输入第二个字符串：</span><br><span class=\"line\">Integer 整数:<span class=\"number\">2048</span>,</span><br><span class=\"line\"><span class=\"number\">4096</span></span><br><span class=\"line\">I love Study Java</span><br><span class=\"line\">解决方法: 整数=<span class=\"number\">4096</span>, 字符串=I love Study Java</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-String类\"><a href=\"#2-String类\" class=\"headerlink\" title=\"2.String类\"></a>2.String类</h5><p>String类的概通过JDK提供的API，查看String类的说明,只要是<code>java.lang</code>里面的类都不用导包；</p>\n<ul>\n<li>字符串Java程序中的所有字符串文字（例如”abc” ）都被实现为此类的实例。</li>\n<li>字符串常量即它们的值在创建后不能被更改(一旦被赋值就不能被改变)</li>\n<li>字符串缓冲区支持可变字符串因为String对象是不可变的，它们可以被共享</li>\n</ul>\n<p>Java语言为字符串连接运算符（+）提供特殊支持，并为其他对象转换为字符串。</p>\n<ul>\n<li>字符串连接是通过StringBuilder （或StringBuffer ）类及其append方法实现的。 </li>\n<li>字符串转换是通过方法来实现toString</li>\n</ul>\n<p><strong>常见构造方法:</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span>:空构造</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span>:把字节数组转成字符串</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes,<span class=\"keyword\">int</span> index,<span class=\"keyword\">int</span> length)</span>:把字节数组的一部分转成字符串</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span>[] value)</span>:把字符数组转成字符串</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span>[] value,<span class=\"keyword\">int</span> index,<span class=\"keyword\">int</span> count)</span>:把字符数组的一部分转成字符串</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(String original)</span>:把字符串常量值转成字符串</span></span><br></pre></td></tr></table></figure></p>\n<p>String类的常见面试题:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#* 1.判断定义为String类型的s1和s2是否相等</span></span><br><span class=\"line\">  * String s1 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">  * String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">  * System.out.println(s1 == s2);      <span class=\"comment\">#T\t\t\t\t\t</span></span><br><span class=\"line\">  * System.out.println(s1.equals(s2)); <span class=\"comment\">#T \t\t</span></span><br><span class=\"line\"><span class=\"comment\">#* 2.下面这句话在内存中创建了几个对象?</span></span><br><span class=\"line\">  * String s1 = new String(<span class=\"string\">\"abc\"</span>);\t<span class=\"comment\">#// 2 个对象 ，常量池一份(正本)，堆内存一份(副本);\t\t</span></span><br><span class=\"line\"><span class=\"comment\">#* 3.判断定义为String类型的s1和s2是否相等</span></span><br><span class=\"line\">  * String s1 = new String(<span class=\"string\">\"abc\"</span>);\t\t\t</span><br><span class=\"line\">  * String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">  * System.out.println(s1 == s2);\t\t<span class=\"comment\">#F</span></span><br><span class=\"line\">  * System.out.println(s1.equals(s2)); <span class=\"comment\">#T</span></span><br><span class=\"line\"><span class=\"comment\">#* 4.判断定义为String类型的s1和s2是否相等</span></span><br><span class=\"line\">  * String s1 = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span> + <span class=\"string\">\"c\"</span>;</span><br><span class=\"line\">  * String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">  * System.out.println(s1 == s2);\t\t<span class=\"comment\">#T  JAVA中的常量优化机制</span></span><br><span class=\"line\">  * System.out.println(s1.equals(s2)); <span class=\"comment\">#T</span></span><br><span class=\"line\"><span class=\"comment\">#* 5.判断定义为String类型的s1和s2是否相等</span></span><br><span class=\"line\">  * String s1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">  * String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">  * String s3 = s1 + <span class=\"string\">\"c\"</span>;</span><br><span class=\"line\">  * System.out.println(s3 == s2);      <span class=\"comment\">#F</span></span><br><span class=\"line\">  * System.out.println(s3.equals(s2)); <span class=\"comment\">#T</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    <span class=\"comment\">//#示例1.字符串是不可更改的,除了 字符串缓冲区支持可变字符串</span></span><br><span class=\"line\">    String str = <span class=\"string\">\"abcdefg\"</span>; <span class=\"comment\">//字符串对象</span></span><br><span class=\"line\">    System.out.println(str);  <span class=\"comment\">//输出字符串</span></span><br><span class=\"line\">    System.out.println(str.toString()); <span class=\"comment\">//String类重写了toString方法返回的是该对象本身;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例2.字符串是常量一旦被赋值将不能被改变</span></span><br><span class=\"line\">    str = <span class=\"string\">\"重新赋值,原来的字符串就变成垃圾等待被回收!\"</span>;</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例3.String类的构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr1 = &#123;<span class=\"number\">48</span>, <span class=\"number\">65</span>, <span class=\"number\">97</span>&#125;;</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(arr1); <span class=\"comment\">//通过使用平台的默认字符集解码指定的字节数组来构造新的 String</span></span><br><span class=\"line\">    System.out.println(s1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr2 = &#123;<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>,<span class=\"number\">100</span>,<span class=\"number\">101</span>,<span class=\"number\">102</span>&#125;;</span><br><span class=\"line\">    String s2 = <span class=\"keyword\">new</span> String(arr2,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">//从arr2数组中第三个元素开始解码转换3个</span></span><br><span class=\"line\">    System.out.println(s2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr3 = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>&#125;; <span class=\"comment\">//字符数组转换成为字符串</span></span><br><span class=\"line\">    String s3 = <span class=\"keyword\">new</span> String(arr3);</span><br><span class=\"line\">    System.out.println(s3);</span><br><span class=\"line\">  </span><br><span class=\"line\">    String s4 = <span class=\"keyword\">new</span> String(arr3,<span class=\"number\">2</span>,<span class=\"number\">2</span>); <span class=\"comment\">//字符数组从指定位置开始转多少个</span></span><br><span class=\"line\">    System.out.println(s4);</span><br><span class=\"line\">    </span><br><span class=\"line\">    String s5 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    System.out.println(s5);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.面试题</span></span><br><span class=\"line\">    extracted();</span><br><span class=\"line\">    stackFinal();</span><br><span class=\"line\">      diffrenent();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//常量池中没有这个字符串对象就创建,如果有就直接引用即可(相同地址)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">extracted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String a1 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    String b1 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1：\"</span>+(a1 == b1));   <span class=\"comment\">//我们前面知道 == 号默认比较的是对象地址,这里由于字符串是常量实际a1与b1指向同一个;</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2：\"</span>+b1.equals(a1));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//常量池中的地址与堆内存中的地址是不一样的;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">stackFinal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"abc\"</span>);\t <span class=\"comment\">//记录的是堆内存的地址值\t\t</span></span><br><span class=\"line\">    String s2 = <span class=\"string\">\"abc\"</span>;               <span class=\"comment\">//记录是常量池中的地址值</span></span><br><span class=\"line\">    System.out.println(s1 == s2);    <span class=\"comment\">// == 比较的是地址</span></span><br><span class=\"line\">    System.out.println(s1.equals(s2));  <span class=\"comment\">//比较的是字符串</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//字符串串联符号+以及将其他对象转换为字符串</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">diffrenent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">    String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    String s3 = s1 + <span class=\"string\">\"c\"</span>; <span class=\"comment\">//经过StringBuffer 再使用toString转换成String ; 所以地址是不同的</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1：\"</span> + (s3 == s2));  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2：\"</span> + s3.equals(s2));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abcdefg</span><br><span class=\"line\">abcdefg</span><br><span class=\"line\"></span><br><span class=\"line\">重新赋值,原来的字符串就变成垃圾等待被回收!</span><br><span class=\"line\"></span><br><span class=\"line\">0Aa</span><br><span class=\"line\">cde</span><br><span class=\"line\">abcde</span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\">WeiyiGeek</span><br><span class=\"line\"></span><br><span class=\"line\">方式1：<span class=\"literal\">true</span></span><br><span class=\"line\">方式2：<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">方式1：<span class=\"literal\">false</span></span><br><span class=\"line\">方式2：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190820122042.png\" alt=\"WeiyiGeek.javaString类\" title=\"\" class=\"\">\n                <p>WeiyiGeek.javaString类</p>\n            </figure></p>\n<p><br></p>\n<p><strong>String类的判断功能：</strong></p>\n<ul>\n<li>boolean equals(Object obj):比较字符串的内容是否相同,区分大小写</li>\n<li>boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</li>\n<li>boolean contains(String str):判断大字符串中是否包含小字符串(当且仅当此字符串包含指定的char值序列时才返回true)</li>\n<li>boolean startsWith(String str):判断字符串是否以某个指定的字符串开头</li>\n<li>boolean endsWith(String str):判断字符串是否以某个指定的字符串结尾</li>\n<li>boolean isEmpty():判断字符串是否为空,注意null不能被该方法判断;</li>\n</ul>\n<p><em>空串””和null的区别</em></p>\n<ul>\n<li>“”是字符串常量,同时也是一个String类的对象,既然是对象当然可以调用String类中的方法</li>\n<li>null是空常量,不能调用任何方法否则<code>会出现空指针异常</code>,null常量可以给<code>任意的引用数据类型赋值</code>;</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringJudge</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    <span class=\"comment\">//示例1.判断是否为空以及内容是否相同区分大小</span></span><br><span class=\"line\">    String s1 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    String s2 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    String s3 = <span class=\"string\">\"ABC\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"isEmpty: \"</span> + s1.isEmpty());           <span class=\"comment\">//是为空返回TRUE</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"equals: \"</span> + s2.equals(s3));          <span class=\"comment\">//返回FALSE由于区分大小写</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"equalsIgnoreCase: \"</span> + s2.equalsIgnoreCase(s3)); <span class=\"comment\">//返回TRUE由于不区分大小写</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.判断字符串中是否包含另一个字符串以及匹配开头可结尾</span></span><br><span class=\"line\">    String s4 = <span class=\"string\">\"ABC is capital,then lowercase is abc\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"contains: \"</span> + s4.contains(s2)); <span class=\"comment\">// 返回为true由于S4确实包含s2字符串</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"startsWith: \"</span> + s4.startsWith(s3)); <span class=\"comment\">//返回为True由于s3字符串是s4字符串的开头</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"endsWith: \"</span> + s4.endsWith(s2)); <span class=\"comment\">//返回为TRUE由于s2字符串是s4字符的结尾</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果:</span></span><br><span class=\"line\">isEmpty: <span class=\"keyword\">true</span></span><br><span class=\"line\">equals: <span class=\"keyword\">false</span></span><br><span class=\"line\">equalsIgnoreCase: <span class=\"keyword\">true</span></span><br><span class=\"line\">contains: <span class=\"keyword\">true</span></span><br><span class=\"line\">startsWith: <span class=\"keyword\">true</span></span><br><span class=\"line\">endsWith: <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>String类的获取功能</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* int length():获取字符串的长度(其实是获取每一个字符的个数)</span><br><span class=\"line\">* char charAt(int index):获取指定索引位置的字符</span><br><span class=\"line\">* int indexOf(int ch):返回指定字符在此字符串中第一次出现处的索引。(不存再返回-1)</span><br><span class=\"line\">* int indexOf(String str):返回指定字符串在此字符串中第一次出现处的索引。</span><br><span class=\"line\">* int indexOf(int ch,int fromIndex):返回指定字符在此字符串中从指定位置后第一次出现处的索引。</span><br><span class=\"line\">* int indexOf(String str,int fromIndex):返回指定字符串在此字符串中从指定位置后第一次出现处的索引。</span><br><span class=\"line\">* lastIndexOf</span><br><span class=\"line\">* String substring(int start):从指定位置开始截取字符串,默认到末尾。</span><br><span class=\"line\">* String substring(int start,int end):从指定位置开始到指定位置结束截取字符串。</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringIndexSub</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.字符串长度length()其实是获取每一个字符的个数，不管中英文</span></span><br><span class=\"line\">    String s1 = <span class=\"string\">\"WeiyiGeek\"</span>;</span><br><span class=\"line\">    String s2 = <span class=\"string\">\"我是一名java开发者\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"English Text is \"</span>+s1+<span class=\"string\">\", Length = \"</span> +s1.length());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Chinese Text is \"</span>+s2+<span class=\"string\">\", Length = \"</span> +s2.length());</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.获取指定索引的字符或者记录字符出现的索引(+ 如果不加\"\"默认是将字符解码成为ascii序号并进行相加)</span></span><br><span class=\"line\">    System.out.println(s1.charAt(<span class=\"number\">0</span>)+<span class=\"string\">\"\"</span>+s1.charAt(<span class=\"number\">1</span>)+<span class=\"string\">\"\"</span>+s1.charAt(<span class=\"number\">2</span>)+<span class=\"string\">\"\"</span>+s1.charAt(<span class=\"number\">3</span>)+<span class=\"string\">\"\"</span>+s1.charAt(<span class=\"number\">4</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Index : \"</span> + s2.indexOf(<span class=\"string\">'j'</span>));   <span class=\"comment\">//参数接收的是int类型，传递char类型会自动提升；</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Index : \"</span> + s2.indexOf(<span class=\"string\">\"java\"</span>)); <span class=\"comment\">//如果不存在则返回 -1</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Index : \"</span> + s2.indexOf(<span class=\"string\">\"开发者\"</span>,<span class=\"number\">5</span>)+<span class=\"string\">\"\\n\"</span>); <span class=\"comment\">//指定位置开始从前向后找</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"lastIndex : \"</span> + s2.lastIndexOf(<span class=\"string\">'j'</span>)); <span class=\"comment\">//从后向前找第一次出现的字符串</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"lastIndex : \"</span> + s1.lastIndexOf(<span class=\"string\">\"e\"</span>, <span class=\"number\">7</span>)); <span class=\"comment\">//从指定位置向前找(注意这里是指定的位置任然是从字符开头到结尾数)</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"lastIndex : \"</span> + s2.lastIndexOf(<span class=\"string\">\"java\"</span>,<span class=\"number\">4</span>)+<span class=\"string\">\"\\n\"</span>); <span class=\"comment\">//从第4个位置进行查找匹配</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例3.指定截取字符串</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"My Name is \"</span> + s1.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>) + <span class=\"string\">\", I am is \"</span> + s1.substring(<span class=\"number\">5</span>)); <span class=\"comment\">//指定位置截取到末尾</span></span><br><span class=\"line\">    <span class=\"comment\">//关键点：注意字符串有些方法会在字符串上进行操作,有的不在字符串本身进行操作(substring)不会改变源字符串;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例4.字符串的遍历，通过for循环获取到字符串中每个字符的索引;</span></span><br><span class=\"line\">    String Demo = <span class=\"string\">\"Hacker\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Demo.length(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.println(Demo.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实际案例</span></span><br><span class=\"line\">    countNumber();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//统计字符串中大小写，字符串字符以及数字字符出现此时</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s = <span class=\"string\">\"abcdefABCDE123456!@#$%%^\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cap = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> small = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> other = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( c &gt;= <span class=\"string\">'a'</span> &amp;&amp; c &lt;= <span class=\"string\">'z'</span>)&#123;</span><br><span class=\"line\">        small++;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">'A'</span> &amp;&amp; c &lt;= <span class=\"string\">'Z'</span>)&#123;</span><br><span class=\"line\">        cap++;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>)&#123;</span><br><span class=\"line\">        num++;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        other++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"大写字母个数: \"</span> + cap + <span class=\"string\">\", 小写字母个数: \"</span> + small + <span class=\"string\">\", 数字个数: \"</span> + num + <span class=\"string\">\", 其他字符数量\"</span> + other);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">English Text is WeiyiGeek, Length = 9</span><br><span class=\"line\">Chinese Text is 我是一名java开发者, Length = 11</span><br><span class=\"line\"></span><br><span class=\"line\">Weiyi</span><br><span class=\"line\"></span><br><span class=\"line\">Index : 4</span><br><span class=\"line\">Index : 4</span><br><span class=\"line\">Index : 8</span><br><span class=\"line\"></span><br><span class=\"line\">lastIndex : 4</span><br><span class=\"line\">lastIndex : 7</span><br><span class=\"line\">lastIndex : 4</span><br><span class=\"line\"></span><br><span class=\"line\">My Name is Weiyi, I am is Geek</span><br><span class=\"line\">H</span><br><span class=\"line\">a</span><br><span class=\"line\">c</span><br><span class=\"line\">k</span><br><span class=\"line\">e</span><br><span class=\"line\">r</span><br><span class=\"line\"></span><br><span class=\"line\">大写字母个数: 5, 小写字母个数: 6, 数字个数: 6, 其他字符数量7</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>String类的转换功能</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* byte[] getBytes():把字符串转换为字节数组。</span><br><span class=\"line\">* char[] toCharArray():把字符串转换为字符数组。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意:String类的valueOf方法可以把任意类型的数据转成字符串</span></span><br><span class=\"line\">* static String valueOf(char[] chs):把字符数组转成字符串。</span><br><span class=\"line\">* static String valueOf(int i):把int类型的数据转成字符串</span><br><span class=\"line\">* static String\tvalueOf(Object obj): 返回 Object参数的字符串 Object形式。 </span><br><span class=\"line\">* String toLowerCase():把字符串转成小写。</span><br><span class=\"line\">* String toUpperCase():把字符串转成大写。</span><br><span class=\"line\">* String concat(String str):把字符串拼接。 (重点)</span><br></pre></td></tr></table></figure></p>\n<p>注意事项：</p>\n<ul>\n<li>gbk码表表示一个中文代表两个字节,gbk码表特点中文的第一个字节肯定是负数（由于康熙字典有十二万多）所以有时后面是为正数;</li>\n<li>copyValueOf 与 valueOf() 实现的功能是一致的<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static String copyValueOf(char[] data)  <span class=\"comment\">#相当于 valueOf(char[]) 。</span></span><br><span class=\"line\">static String copyValueOf(char[] data, int offset, int count) <span class=\"comment\">#相当于 valueOf(char[], int, int) 。</span></span><br></pre></td></tr></table></figure></li>\n<li>用+拼接与从concat()方法拼接的区别:前者非常强大任意字符串拼接,后者只能字符串类型进行拼接;</li>\n<li>链式编程：只要保证每次调用完方法返回的是对象就可以继续调用;</li>\n</ul>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringConversion</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.探究字符串默认转换的码表，编码把我们看的懂转换为计算机看的懂的;</span></span><br><span class=\"line\">    demo1();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.将字符串转换成为字符数组</span></span><br><span class=\"line\">    demo2();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.将valueof任意类型的数据转换成为字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr4 = &#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>&#125;;  <span class=\"comment\">//底层都是采用 new String() 构造方法来进行的</span></span><br><span class=\"line\">    String s = String.valueOf(arr4);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n\"</span> + s + <span class=\"string\">\", 整形转换成为字符串 : \"</span> + String.valueOf(<span class=\"number\">1024</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例4.字符串的大小写转换并且进行拼接</span></span><br><span class=\"line\">    String lower = <span class=\"string\">\"abcd\"</span>;</span><br><span class=\"line\">    String upper = <span class=\"string\">\"ABCD\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Lower -&gt; Upper :\"</span> + lower.toUpperCase());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Upper -&gt; Lower  :\"</span> + upper.toLowerCase());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"字符串拼接1：\"</span> + lower + upper);  <span class=\"comment\">//任意字符串拼接</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"字符串拼接2：\"</span> + lower.concat(upper)); <span class=\"comment\">//只能字符串类型进行拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例5.非常值得学习 把一串字符串首字母转成大写,其余为小写。(只考虑英文大小写字母字符)</span></span><br><span class=\"line\">    String ori = <span class=\"string\">\"iLOveStudyJavaPrograminG\"</span>;</span><br><span class=\"line\">    String dst = ori.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase().concat(ori.substring(<span class=\"number\">1</span>).toLowerCase()); <span class=\"comment\">//链式编程</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例5：\"</span> + dst);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s3 = <span class=\"string\">\"This\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr = s3.toCharArray();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n字符串转换成为字符数组 \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">      System.out.print(arr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String s1 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    String s2 = <span class=\"string\">\"你好,JAVA\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"英文字符：\"</span> + s1);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr1 = s1.getBytes();</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr2 = s2.getBytes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(arr1[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n中文字符：\"</span> + s2);</span><br><span class=\"line\">    <span class=\"comment\">//gbk码表表示 一个中文代表两个字节 ,gbk码表特点中文的第一个字节肯定是负数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(arr2[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注意这里是统计的数组个数所以是length (特殊中文字符串)</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n特殊中文字符：琲\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr3 = <span class=\"string\">\"琲\"</span>.getBytes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr3.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.print(arr3[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">英文字符：abc</span><br><span class=\"line\">97 98 99 </span><br><span class=\"line\"></span><br><span class=\"line\">中文字符：你好,JAVA</span><br><span class=\"line\">-60 -29 -70 -61 44 74 65 86 65 </span><br><span class=\"line\"></span><br><span class=\"line\">特殊中文字符：琲</span><br><span class=\"line\">-84 105 </span><br><span class=\"line\"></span><br><span class=\"line\">字符串转换成为字符数组 </span><br><span class=\"line\">T h i s </span><br><span class=\"line\"></span><br><span class=\"line\">abc, 整形转换成为字符串 : 1024</span><br><span class=\"line\"></span><br><span class=\"line\">Lower -&gt; Upper :ABCD</span><br><span class=\"line\">Upper -&gt; Lower  :abcd</span><br><span class=\"line\"></span><br><span class=\"line\">字符串拼接1：abcdABCD</span><br><span class=\"line\">字符串拼接2：abcdABCD</span><br><span class=\"line\"></span><br><span class=\"line\">示例5：Ilovestudyjavaprograming</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>String类的其他功能</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字符串替换</span></span><br><span class=\"line\">String replace(char old,char new)</span><br><span class=\"line\">String replace(String old,String new)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#去除字符串两空格</span></span><br><span class=\"line\">String trim()  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#String的按字典顺序比较两个字符串</span></span><br><span class=\"line\">int compareTo(String str)(暂时不用掌握)</span><br><span class=\"line\">int compareToIgnoreCase(String str)(了解)</span><br></pre></td></tr></table></figure>\n<p>注意事项:</p>\n<ul>\n<li>Jave再进行查找的时候是将中文汉字转换成为<code>10位UNICODE编码</code>再进行比较;</li>\n</ul>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringReplace</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.字符串替换replace</span></span><br><span class=\"line\">    String s = <span class=\"string\">\"I love Java Programing!\"</span>;</span><br><span class=\"line\">    String s1 = s.replace(<span class=\"string\">\"o\"</span>, <span class=\"string\">\"A\"</span>);  </span><br><span class=\"line\">    String s2 = s.replace(<span class=\"string\">\"Java\"</span>, <span class=\"string\">\"PHP\"</span>);    <span class=\"comment\">//如果没有找到替换字符则保留原字符串不改变;</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"o -&gt; A : \"</span> + s1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Java -&gt; PHP : \"</span> + s2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.除去字符串两边的空格</span></span><br><span class=\"line\">    String s3 = <span class=\"string\">\"  Weiyi Geek  \"</span>;</span><br><span class=\"line\">    String s4 = s3.trim();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"两边 blank space 去除 : \"</span> + s4);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.比较两个字符串实际将ascii码进行比较相减，如果第一个字符相减为0则,第二个字符进行相减操作直到字符串末尾;</span></span><br><span class=\"line\">    String s5 = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    String s6 = <span class=\"string\">\"bcd\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = s5.compareTo(s6);  <span class=\"comment\">//是按照码表值进行比较</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"s5 &lt; s6 = \"</span> + num); <span class=\"comment\">// 97(a) - 98(b) = -1 </span></span><br><span class=\"line\">    <span class=\"comment\">//不区分大写比较</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num2 = <span class=\"string\">\"weiyigeek\"</span>.compareToIgnoreCase(<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"CompareToIgnoreCase 不区分大小写: \"</span> + num2);</span><br><span class=\"line\">    <span class=\"comment\">//java默认是utf-8码表</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num1 = <span class=\"string\">\"唯\"</span>.compareTo(<span class=\"string\">\"一\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">'唯'</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">'一'</span>+<span class=\"number\">0</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"unicode(唯) - unicode(一) = \"</span> + num1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o -&gt; A : I lAve Java PrAgraming!</span><br><span class=\"line\">Java -&gt; PHP : I love PHP Programing!</span><br><span class=\"line\"></span><br><span class=\"line\">两边 blank space 去除 : Weiyi Geek</span><br><span class=\"line\"></span><br><span class=\"line\">s5 &lt; s6 = -<span class=\"number\">1</span></span><br><span class=\"line\">CompareToIgnoreCase 不区分大小写: <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">21807</span></span><br><span class=\"line\"><span class=\"number\">19968</span></span><br><span class=\"line\">unicode(唯) - unicode(一) = <span class=\"number\">1839</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"StringBuffer类使用\"><a href=\"#StringBuffer类使用\" class=\"headerlink\" title=\"StringBuffer类使用\"></a>StringBuffer类使用</h4><h5 id=\"StringBuffer概述\"><a href=\"#StringBuffer概述\" class=\"headerlink\" title=\"StringBuffer概述\"></a>StringBuffer概述</h5><p>描述:线程安全可变的字符序列,字符串缓冲区就像一个String但可以修改(长度会随着字符串变长而变长)。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringBuffer</span>  //不能被继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">CharSequence</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">StringBuffer</span>()  #构造一个没有字符的字符串缓冲区，初始容量为16个字符。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">StringBuffer</span>(<span class=\"title\">CharSequence</span> <span class=\"title\">seq</span>)  #构造一个包含与指定的相同字符的字符串缓冲区 它包含与指定<span class=\"title\">CharSequence</span>相同的字符</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">StringBuffer</span>(<span class=\"title\">int</span> <span class=\"title\">capacity</span>) #构造一个没有字符的字符串缓冲区和指定的初始容量。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">StringBuffer</span>(<span class=\"title\">String</span> <span class=\"title\">str</span>)  #构造一个初始化为指定字符串内容的字符串缓冲区。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>StringBuffer获取长度的方法:</p>\n<ul>\n<li>public int capacity() : 返回当前容量理论值(16个字符)</li>\n<li>public int length() : 返回实际字符的长度值</li>\n</ul>\n<p>StringBuffer两个添加方法:append 和 insert 方法;</p>\n<ul>\n<li>public StringBuffer append(String str) 把任意类型数据添加到字符串缓冲区中并返回字符串缓冲区本身。(重载的方法-拥有不同的参数)</li>\n<li>public StringBuffer insert(int offset, String str) 指定位置把任意类型的数据插入到字符串缓冲区中并返回字符串区本身 (重载的方法)</li>\n</ul>\n<p>StringBuffer的删除功能:</p>\n<ul>\n<li>public StringBuffer deleteCharAt(int index); 删除指定位置的字符并返回本身(如果指定索引不存在的时候则会导致缓冲区字符串异常)</li>\n<li>public StringBuffer delete(int start,int end); 删除指定范围的内容并返回本身</li>\n</ul>\n<p>StringBuffer的替换反转功能:</p>\n<ul>\n<li>public StringBuffer replace(int start, int end, String str) 从start开始到end用str替换;</li>\n<li>public StringBuffer reverse() 字符串反转;</li>\n</ul>\n<p>StringBuffer的截取功能:</p>\n<ul>\n<li>public StringBuffer substring(int start);  从指定位置截取到末尾</li>\n<li>public StringBuffer substring(int start, int end); 截取从指定位置开始到结束位置,包括开始位置不包括结束位置;</li>\n<li>注意事项: 不会更改StringBuffer中的字符串,而是重新将截取字符串生成一个字符串对象;</li>\n</ul>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Filename</span>: Demo1_StringBufeer.java</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Function</span>: </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateTime</span>: 下午10:12:22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.stringbuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_StringBufeer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.StringBuffer的三种构造方法</span></span><br><span class=\"line\">    StringBuffer sb1 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"空参构造 理论长度 : \"</span>+sb1.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb1.length());</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"number\">10</span>);  <span class=\"comment\">//设置一个缓冲区初始量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"有参构造 理论长度 : \"</span>+sb2.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb2.length());</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuffer sb3 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"有参构造 理论长度 : \"</span>+sb3.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb3.length()); <span class=\"comment\">//capacity() = 初始量(16) + 字符串长度(4) </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.StringBuffer的增加字符串</span></span><br><span class=\"line\">    StringBuffer sb4 = <span class=\"keyword\">new</span> StringBuffer();  </span><br><span class=\"line\">    StringBuffer sb5 = sb4.append(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    StringBuffer sb6 = sb4.append(<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//后面的多个引用其实指向同一个对象,并且该类中重写了toString方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"append方法   理论长度 : \"</span>+sb5.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb5.length() + <span class=\"string\">\", 值为 \"</span> + sb5.toString()); <span class=\"comment\">//capacity() = 初始量(16) + 字符串长度(4) </span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"append方法   理论长度 : \"</span>+sb6.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb6.length() + <span class=\"string\">\", 值为 \"</span> + sb6.toString()); <span class=\"comment\">//capacity() = 初始量(16) + 字符串长度(4) </span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.StringBuffer的指定位置添加字符元素</span></span><br><span class=\"line\">    StringBuffer sb7 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"Iloveprogramming!\"</span>); <span class=\"comment\">//注意这里缓冲区初始量是 16 + 17个字符 = 33</span></span><br><span class=\"line\">    sb7.insert(<span class=\"number\">5</span>, <span class=\"string\">\"java\"</span>); <span class=\"comment\">//索引是从0开始，在指定位置添加字符串元素,如果没有指定位置的索引便会报索引越界异常;</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"insert方法  理论长度 : \"</span>+sb7.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb7.length() + <span class=\"string\">\", 值为 \"</span> + sb7.toString()); <span class=\"comment\">//capacity() = 初始量(16) + 字符串长度(4) </span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例4.StringBuffer删除功能</span></span><br><span class=\"line\">    sb7.deleteCharAt(<span class=\"number\">16</span>); <span class=\"comment\">//删除sb7字符串中的一个m</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"deleteCharAt 方 法 : \"</span> + sb7);</span><br><span class=\"line\">    sb7.delete(<span class=\"number\">0</span>, <span class=\"number\">5</span>); <span class=\"comment\">//删除字符Ilove，删除时候是包含头但不包含尾0~5</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"delete 方法 : \"</span> + sb7);</span><br><span class=\"line\">    sb7.delete(<span class=\"number\">0</span>,sb7.length()); <span class=\"comment\">//清空缓存区</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"delete 方法   理论长度 : \"</span>+sb7.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb7.length() + <span class=\"string\">\", 值为 空\"</span> + sb7.toString()); <span class=\"comment\">//capacity() = 初始量(16) + 字符串长度(4) </span></span><br><span class=\"line\"></span><br><span class=\"line\">    sb7 = <span class=\"keyword\">new</span> StringBuffer(); <span class=\"comment\">//不要用,原来的变成垃圾浪费内存</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"[不推荐这种方式清空缓冲区]理论长度 : \"</span>+sb7.capacity() +<span class=\"string\">\", 实际长度 : \"</span>+sb7.length());</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例5.StringBuffer的替换与反转功能</span></span><br><span class=\"line\">    StringBuffer sb8 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"My Name is Weiyi\"</span>);</span><br><span class=\"line\">    sb8.replace(sb8.length()-<span class=\"number\">5</span>, sb8.length(), <span class=\"string\">\"Geek\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"replace 方法: \"</span> + sb8.toString());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"reverse 方法: \"</span> + sb8.reverse());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例6.StringBuffer字符串截取功能呢</span></span><br><span class=\"line\">    StringBuffer sb9 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"I'am weiyigeek!\"</span>);</span><br><span class=\"line\">    String subdemo1 = sb9.substring(<span class=\"number\">5</span>);  <span class=\"comment\">//截取从第六个字符到末尾</span></span><br><span class=\"line\">    String subdemo2 = sb9.substring(<span class=\"number\">5</span>,<span class=\"number\">10</span>); <span class=\"comment\">//截取从第6个字符开始截取直到底十的字符结束;</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"SubDemo1 = \"</span> + subdemo1 + <span class=\"string\">\", SubDemo2 = \"</span> + subdemo2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">空参构造 理论长度 : 16, 实际长度 : 0</span><br><span class=\"line\">有参构造 理论长度 : 10, 实际长度 : 0</span><br><span class=\"line\">有参构造 理论长度 : 20, 实际长度 : 4</span><br><span class=\"line\"></span><br><span class=\"line\">append方法   理论长度 : 16, 实际长度 : 13, 值为 trueWeiyiGeek</span><br><span class=\"line\">append方法   理论长度 : 16, 实际长度 : 13, 值为 trueWeiyiGeek</span><br><span class=\"line\"></span><br><span class=\"line\">insert方法  理论长度 : 33, 实际长度 : 21, 值为 Ilovejavaprogramming!</span><br><span class=\"line\"></span><br><span class=\"line\">deleteCharAt 方 法 : Ilovejavaprograming!</span><br><span class=\"line\">delete 方法 : javaprograming!</span><br><span class=\"line\">delete 方法   理论长度 : 33, 实际长度 : 0, 值为 空</span><br><span class=\"line\">[不推荐这种方式清空缓冲区]理论长度 : 16, 实际长度 : 0</span><br><span class=\"line\"></span><br><span class=\"line\">replace 方法: My Name is Geek</span><br><span class=\"line\">reverse 方法: keeG si emaN yM</span><br><span class=\"line\"></span><br><span class=\"line\">SubDemo1 = weiyigeek!, SubDemo2 = weiyi</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"StringBuffer与String类差异\"><a href=\"#StringBuffer与String类差异\" class=\"headerlink\" title=\"StringBuffer与String类差异\"></a>StringBuffer与String类差异</h5><p>描述：StringBuffer与String类的区别?</p>\n<ul>\n<li>String 是一个不可变的字符序列</li>\n<li>StringBuffer 是一个可变的字符序列缓冲区,当new时候是在堆内存创建一个对象,底层是一个长度为16的字符数组;当调用添加的方法时,不会重新创建对象再不断向原缓冲区添加字符;</li>\n</ul>\n<p><br></p>\n<p>StringBuffer与String进行转换：</p>\n<ul>\n<li>String -&gt; StringBuffer : 通过构造方法 或者 append() 方法;</li>\n<li>StringBuferr -&gt; String : 通过构造方法 或者 toString() 方法 或者 subString(0, length)</li>\n</ul>\n<p><br></p>\n<p>String和Stringbuffer分别作为参数传递问题;</p>\n<ul>\n<li>基本数据类型 的值传递,不改变其值;</li>\n<li>引用数据类型 的值传递,改变其值;</li>\n<li>String类虽然是引用数据类型但是它当作参数传递时候和基本数据类型是一样(由于String一旦被初始化将不可变的性质)</li>\n<li>StringBuffer是引用数据类型在作为参数传递的时候将会被改变</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.stringbuffer;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_StringBuffer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.StringBuffer类与String类相互转换</span></span><br><span class=\"line\">    <span class=\"comment\">//String -&gt; StringBuffer对象 : 通过构造方法 或者 append() 方法;</span></span><br><span class=\"line\">    StringBuffer sb1 = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"initialize 初始化\"</span>); <span class=\"comment\">//通过String对象转换成为StringBuffer对象;</span></span><br><span class=\"line\">    StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb2.append(<span class=\"string\">\"initialize append\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法1 : \"</span> + sb1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法2 : \"</span> + sb2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//StringBuferr -&gt; String : 通过构造方法 或者 toString() 方法 或者 subString(0, length)</span></span><br><span class=\"line\">    String s1 = <span class=\"keyword\">new</span> String(sb1);</span><br><span class=\"line\">    String s2 = sb1.toString();</span><br><span class=\"line\">    String s3 = sb1.substring(<span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法1 = \"</span> + s1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法2 = \"</span> + s2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法3 = \"</span> + s3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2.String和Stringbuffer分别作为参数传递问题</span></span><br><span class=\"line\">    String s4 = <span class=\"string\">\"String parma\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"源字符串 : \"</span> + s4);</span><br><span class=\"line\">    changeStr(s4);  <span class=\"comment\">//一弹栈就内部的s4就变成了垃圾，也由于String一旦初始化将不会被改变(类似于C中的局部变量)</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"changeStr 方法外: \"</span> + s4);</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuffer sb3 = <span class=\"keyword\">new</span> StringBuffer();  <span class=\"comment\">//两个引用指向同一个对象(类似于C指针);</span></span><br><span class=\"line\">    sb3.append(<span class=\"string\">\"append 1\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"第一次引用 : \"</span> + sb3);</span><br><span class=\"line\">    changeStrBuf(sb3);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"第二次引用(经过changeStrBuf) : \"</span> + sb3);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStrBuf</span><span class=\"params\">(StringBuffer sb3)</span> </span>&#123;</span><br><span class=\"line\">    sb3.append(<span class=\"string\">\",append 2\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeStr</span><span class=\"params\">(String s4)</span> </span>&#123;</span><br><span class=\"line\">    s4 += <span class=\"string\">\"add\"</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"changeStr 方法内 :  \"</span> + s4);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法<span class=\"number\">1</span> : initialize 初始化</span><br><span class=\"line\">方法<span class=\"number\">2</span> : initialize append</span><br><span class=\"line\">方法<span class=\"number\">1</span> = initialize 初始化</span><br><span class=\"line\">方法<span class=\"number\">2</span> = initialize 初始化</span><br><span class=\"line\">方法<span class=\"number\">3</span> = initialize</span><br><span class=\"line\"></span><br><span class=\"line\">源字符串 : String parma</span><br><span class=\"line\">changeStr 方法内 :  String parmaadd</span><br><span class=\"line\">changeStr 方法外: String parma</span><br><span class=\"line\"></span><br><span class=\"line\">第一次引用 : append <span class=\"number\">1</span></span><br><span class=\"line\">第二次引用(经过changeStrBuf) : append <span class=\"number\">1</span>,append <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>线程安全是以消耗效率为代价,可将线程安全比作是一把锁,当有人使用的时候外部将无法使用(原理类似于操作系统中的信号锁);</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.stringbuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_Stringbuffer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1. 利用StringBuffer将数组转换成为字符串; \"[1,2,3]\"形式</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    System.out.println(arrayToString(arr));</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2.键盘录入反转</span></span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);  <span class=\"comment\">//创建一个键盘录入对象</span></span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入一串字符: \"</span>);</span><br><span class=\"line\">    String line = sc.nextLine();  <span class=\"comment\">//将键盘录入的字符串存储到line中</span></span><br><span class=\"line\">    StringBuffer sb = reverseStr(line);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"缓存区的内容反转  : \"</span> + sb);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例3.反转字符串数组并输出特定格式</span></span><br><span class=\"line\">    String[] arr1 = &#123;<span class=\"string\">\"Study\"</span>,<span class=\"string\">\"Java\"</span>,<span class=\"string\">\"Programming\"</span>&#125;;</span><br><span class=\"line\">    System.out.println(changeStrReverse(arr1));</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//实例1.抽取方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">arrayToString</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb1 = <span class=\"keyword\">new</span> StringBuffer();  <span class=\"comment\">//创建缓冲区对象(节省内存-不需要重复的申请对象提高效率)</span></span><br><span class=\"line\">    sb1.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)  <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( i == arr.length-<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        sb1.append(arr[i]).append(<span class=\"string\">\"]\"</span>);  <span class=\"comment\">//[推荐形式]</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sb1.append(arr[i] + <span class=\"string\">\",\"</span>);  <span class=\"comment\">//只有这种形式不推荐(底层还是new string然后toString()),所以还是建议采用append的方法</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb1.toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//实例2.抽取方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">reverseStr</span><span class=\"params\">(String line)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(line); <span class=\"comment\">//重点,将输入的字符串放入缓存区之中</span></span><br><span class=\"line\">    sb.reverse(); <span class=\"comment\">//注意操作是sb对象本身</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//实例3. 抽取方法 (这里返回方法采用StringBuffer减少一次String对象申请)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">changeStrReverse</span><span class=\"params\">(String[] arr1)</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb2 = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb2.append(<span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( i == arr1.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        sb2.append(reverseStr(arr1[i])).append(<span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sb2.append(reverseStr(arr1[i])).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">请输入一串字符: Whoami</span><br><span class=\"line\">缓存区的内容反转  : imaohW</span><br><span class=\"line\">&#123;ydutS,avaJ,gnimmargorP&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h5 id=\"StringBuilder类\"><a href=\"#StringBuilder类\" class=\"headerlink\" title=\"StringBuilder类\"></a>StringBuilder类</h5><p>描述: 一个可变的字符序列。 此类提供与StringBuffer的API，但不保证同步。<br>此类设计用作简易替换为StringBuffer在正在使用由单个线程字符串缓冲区的地方（如通常是这种情况）；在可能的情况下，建议使用这个类别优先于StringBuffer ，因为它在大多数实现中将更快；<br>StringBuilder的主要StringBuilder<code>是append和insert方法</code>，它们是<code>重载的以便接受任何类型的数据</code>(参数类型不一致);<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#类结构</span></span><br><span class=\"line\">public final class StringBuilder</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Serializable, CharSequence</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>问:String,StringBuffer与StringBuilder的区别</em></p>\n<ul>\n<li>StringBuffer是jdk1.0版本的,线程是安全的但是效率低(同步);</li>\n<li>StringBuilder是jdk1.5版本的,线程是不安全的效率高(不同步);</li>\n<li>String是一个不可变字符序列,而StringBuffer,StringBuilder是可变字符序列;</li>\n</ul>\n<hr>\n\n<h4 id=\"Arrays类使用\"><a href=\"#Arrays类使用\" class=\"headerlink\" title=\"Arrays类使用\"></a>Arrays类使用</h4><p>描述:说到数组类的使用不得说关于数组相关的排序算法,这可是编程中的灵魂;<br>该类包含用于操作数组的各种方法（如排序和搜索）。 该类还包含一个静态工厂可以将数组视为列表。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Arrays</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br></pre></td></tr></table></figure><br><br></p>\n<p><strong>数组高级之冒泡排序</strong><br>描述:轻的上浮,沉的下降;两个相邻位置比较如果前面的元素大于后面的元素则交互位置;<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822165026.png\" alt=\"WeiyiGeek.冒泡排序规律\" title=\"\" class=\"\">\n                <p>WeiyiGeek.冒泡排序规律</p>\n            </figure></p>\n<p><br></p>\n<p><strong>数组高级之选择排序</strong><br>描述:用一个索引位置上的元素,依次与其他索引位置上的元素比较小在前面(右) ,大的在后面(左) - 与冒泡排序位置相反<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822171017.png\" alt=\"WeiyiGeek.选择排序\" title=\"\" class=\"\">\n                <p>WeiyiGeek.选择排序</p>\n            </figure></p>\n<p><br></p>\n<p><strong>数组高级之二分查找法</strong><br>描述:二分查找前提必须是<code>有序的</code>,二分查找 查找元素对应的索引;<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190822173302.png\" alt=\"WeiyiGeek.二分查找法\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二分查找法</p>\n            </figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_ArrayMaopao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1. 冒泡排序(相邻元素比较)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">45</span>,<span class=\"number\">12</span>,<span class=\"number\">89</span>,<span class=\"number\">75</span>,<span class=\"number\">65</span>,<span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">//外循环只需要比较arr.length-1</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123; <span class=\"comment\">// -1为了防止数组越界产生异常, -i 为了提高效率;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">          arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">          arr[j+<span class=\"number\">1</span>] = temp;  <span class=\"comment\">//拿取最大值向左边走</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    extracted(<span class=\"string\">\"冒泡算法 :\"</span>,arr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2. 选择排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr1 = &#123;<span class=\"number\">45</span>,<span class=\"number\">12</span>,<span class=\"number\">89</span>,<span class=\"number\">75</span>,<span class=\"number\">65</span>,<span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length - <span class=\"number\">1</span>; i++) &#123;  <span class=\"comment\">//循环5次</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr1.length; j++) <span class=\"comment\">//从 i + 1  次开始</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr1[i] &gt; arr1[j])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> temp = arr1[i];  <span class=\"comment\">//将大值存放在temp</span></span><br><span class=\"line\">          arr1[i] = arr1[j];   <span class=\"comment\">//循环遍历过滤出最小的</span></span><br><span class=\"line\">          arr1[j] = temp;      <span class=\"comment\">//将temp给当前[j]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    extracted(<span class=\"string\">\"\\n选择排序:\"</span>, arr1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.二分查找</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = binarySearch(arr1,<span class=\"number\">45</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(res != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\n二分查找:\\n已经找到该值 : \"</span> + arr1[res]+<span class=\"string\">\", Index = \"</span>+res);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"未找到您要查询的值!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr1, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = arr1.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (max - min) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断mid索引在数组值是否等于i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(arr1[mid] != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr1[mid] &lt; i) &#123;  <span class=\"comment\">//如果当然mid索引值 小于 查找的值 则 最小值 = mid+1;下次就从mid+1处理开始</span></span><br><span class=\"line\">        min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr1[mid] &gt; i) &#123;</span><br><span class=\"line\">        max = mid - <span class=\"number\">1</span>; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( min &gt; max ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mid = (max - min) /<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"comment\">//公共方法(输出数组各个元素值)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">extracted</span><span class=\"params\">(String name,<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">      System.out.print(arr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒泡算法 :</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">17</span> <span class=\"number\">45</span> <span class=\"number\">65</span> <span class=\"number\">75</span> <span class=\"number\">89</span> </span><br><span class=\"line\"></span><br><span class=\"line\">选择排序:</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">17</span> <span class=\"number\">45</span> <span class=\"number\">65</span> <span class=\"number\">75</span> <span class=\"number\">89</span> </span><br><span class=\"line\"></span><br><span class=\"line\">二分查找:</span><br><span class=\"line\">已经找到该值 : <span class=\"number\">45</span>, Index = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"Arrays-类常用方法\"><a href=\"#Arrays-类常用方法\" class=\"headerlink\" title=\"Arrays 类常用方法\"></a>Arrays 类常用方法</h5><p>描述：Arrays常用的以下方法可以处理上面我们的问题示例;</p>\n<ul>\n<li>public static String toString(int[] a);  //可以将整形数组转换成为字符串Arrays.toString(int[])</li>\n<li>public static void sort(int[] a);    //(dualquick排序)可以将整形数组进行排序会修改原数组</li>\n<li>public static int BinarySearch(int[] a,int key);  //Array类的二分查找方法,注意如果存在则返回数组元素的索引,不存在则返回-(mid+1)</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_ArrayMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.Arrays类中的toString</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr1 = &#123;<span class=\"number\">20</span>,<span class=\"number\">19</span>,<span class=\"number\">17</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">95</span>&#125;;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例1 : \"</span> + Arrays.toString(arr1));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.Arrays类中的sort排序</span></span><br><span class=\"line\">    Arrays.sort(arr1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例2 : \"</span> + Arrays.toString(arr1)); <span class=\"comment\">//重点这里输出是采用Arrays.方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.Arrays类中的二分法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例3 : Index = \"</span> + Arrays.binarySearch(arr1, <span class=\"number\">19</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例3 : Index = \"</span> + Arrays.binarySearch(arr1, <span class=\"number\">2019</span>)); <span class=\"comment\">//由于2019大于arr1数组中所有元素则排在索引为7的地方;  -(7+1) 及 -插入点 -1  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果：</span></span><br><span class=\"line\">示例<span class=\"number\">1</span> : [<span class=\"number\">20</span>, <span class=\"number\">19</span>, <span class=\"number\">17</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">95</span>]</span><br><span class=\"line\">示例<span class=\"number\">2</span> : [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">95</span>]</span><br><span class=\"line\">示例<span class=\"number\">3</span> : Index = <span class=\"number\">4</span></span><br><span class=\"line\">示例<span class=\"number\">3</span> : Index = -<span class=\"number\">8</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Arrays工具类的asList()方法的使用</strong><br>描述: Collection中toArray(T[] a)泛型版的集合转数组,而asList()将数组转成集合;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#加入了泛型</span></span><br><span class=\"line\">java.util.Arrays </span><br><span class=\"line\">static &lt;T&gt; List&lt;T&gt; asList(T... a) <span class=\"comment\">#返回由指定数组支持的一个固定大小的列表。 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#java.util </span></span><br><span class=\"line\">&lt;T&gt; T[] toArray(T[] a) <span class=\"comment\">#返回包含此集合中所有元素的数组；返回数组的运行时类型是指定的数组的运行时类型</span></span><br></pre></td></tr></table></figure><br>基础示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_CollectionAsList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Arrays工具类的asList()方法的使用</span></span><br><span class=\"line\">    <span class=\"comment\">//实例1.数组转成集合（虽然不能可以增加或者删除元素,但是可以利用集合的思想操作数组）,</span></span><br><span class=\"line\">    <span class=\"comment\">//也就是说使用其他集合的方法</span></span><br><span class=\"line\">    String[] arr = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>&#125;;</span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class=\"line\">    System.out.println(arr + <span class=\"string\">\" \"</span> + list);</span><br><span class=\"line\">    <span class=\"comment\">//list.add(\"不能添加\")</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.整形数组转换成为集合</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr1 = &#123;<span class=\"number\">11</span>,<span class=\"number\">222</span>,<span class=\"number\">333</span>&#125;; <span class=\"comment\">//基本数据类型</span></span><br><span class=\"line\">    List&lt;<span class=\"keyword\">int</span>[]&gt; list1 = Arrays.asList(arr1); <span class=\"comment\">//基本数据类型的数组转换成为集合.会将整改数组当做一个对象</span></span><br><span class=\"line\">    System.out.println(list1);   <span class=\"comment\">//返回的是一个地址</span></span><br><span class=\"line\">    <span class=\"comment\">//重点</span></span><br><span class=\"line\">    Integer[] arr2 = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">344</span>&#125;;   <span class=\"comment\">//引用数据类型(数组转集合)</span></span><br><span class=\"line\">    List&lt;Integer&gt; list2 = Arrays.asList(arr2);</span><br><span class=\"line\">    System.out.println(arr2 + <span class=\"string\">\" \"</span> + list2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.泛型集合转数组</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; list3 = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    list3.add(<span class=\"string\">\"demo\"</span>);</span><br><span class=\"line\">    list3.add(<span class=\"string\">\"YES\"</span>);</span><br><span class=\"line\">    list3.add(<span class=\"string\">\"this\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    String[] arr3 = list3.toArray(<span class=\"keyword\">new</span> String[<span class=\"number\">0</span>]); <span class=\"comment\">//new String[0]当集合转化成数组时候,数组的长度小于等于集合的size,转换后的数组长度等于集合</span></span><br><span class=\"line\">    <span class=\"comment\">//new String[10]如果数组长度大于了size,匹配的数组就和您设置长度一致,不存在的以null补齐</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String param : arr3) &#123;</span><br><span class=\"line\">      System.out.print(param + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">[Ljava.lang.String;@<span class=\"number\">15</span>db9742 [a, b, c, d]</span><br><span class=\"line\">[[I@<span class=\"number\">6</span>d06d69c]</span><br><span class=\"line\">[Ljava.lang.Integer;@<span class=\"number\">7852e922</span> [<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">344</span>]</span><br><span class=\"line\">demo YES <span class=\"keyword\">this</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"基本类型包类\"><a href=\"#基本类型包类\" class=\"headerlink\" title=\"基本类型包类\"></a>基本类型包类</h4><p>描述:将基本数据类型封装成为对象的好处，可以在对象中定义更多的功能方法操作该数据;<br>常见的操作就是用于基本数据类型之间的转换(进制转换/字符串之间的转换);</p>\n<p>基本数据类型和引用数据类型包装类对应表：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本数据类型   引用数据类型(包名称)</span><br><span class=\"line\">byte\t\t  Byte</span><br><span class=\"line\">short\t\t  Short</span><br><span class=\"line\">int\t\t\t  Integer <span class=\"comment\">#比较特殊</span></span><br><span class=\"line\">long\t\t  Long</span><br><span class=\"line\"><span class=\"built_in\">float</span>\t\t  Float</span><br><span class=\"line\">double \t\t  Double</span><br><span class=\"line\">char          Character  <span class=\"comment\">#比较特殊</span></span><br><span class=\"line\">boolean       Boolean</span><br></pre></td></tr></table></figure></p>\n<p>下面以Integer为例来进行学习,其他的基本数据类型与包装类都差不多;</p>\n<h5 id=\"Integer-类使用\"><a href=\"#Integer-类使用\" class=\"headerlink\" title=\"Integer 类使用\"></a>Integer 类使用</h5><p>描述:Integer类包装一个对象中的原始类型int的值。 类型为Integer的对象包含一个单一字段其类型为int ;提供了一些将int转换为String和String转换为int,以及在处理int时有用的其他常量和方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Integer</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Number</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Integer</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//自带常量值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> <span class=\"title\">int</span> \t<span class=\"title\">BYTES</span> 用于表示二进制补码二进制形式的 <span class=\"title\">int</span>值的字节数。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> <span class=\"title\">int</span> \t<span class=\"title\">MAX_VALUE</span> 一个持有最大值一个 <span class=\"title\">int</span>可以有2^31 -1。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> <span class=\"title\">int</span> \t<span class=\"title\">MIN_VALUE</span> 的常量保持的最小值的 <span class=\"title\">int</span>可以具有，-(2 ^31)。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> <span class=\"title\">int</span> \t<span class=\"title\">SIZE</span> 用于表示二进制补码二进制形式的 <span class=\"title\">int</span>值的位数。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">static</span> 类&lt;<span class=\"title\">Integer</span>&gt; \t<span class=\"title\">TYPE</span> 类原始类型 <span class=\"title\">int</span>的 类实例。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>Integer类构造方法:</em></p>\n<ul>\n<li>public Integer(int value);  构造一个新分配的 Integer对象，该对象表示指定的 int值。 </li>\n<li>public Integer(String s);  构造一个新分配 Integer对象，表示 int由指示值 String参数。 </li>\n</ul>\n<p><em>Integer类常用方法:</em></p>\n<ul>\n<li>static String toBinaryString(int i) 在基数2中返回整数参数的字符串表示形式为无符号整数。</li>\n<li>static String toHexString(int i)   返回整数参数的字符串表示形式，作为16位中的无符号整数。</li>\n<li>static String toOctalString(int i) 在基数8中返回整数参数的字符串表示形式为无符号整数。 </li>\n</ul>\n<p><em>Inter类型与String相互转换:</em></p>\n<ul>\n<li>将int转换成为Str的方法:<ul>\n<li>1.与””进行拼接</li>\n<li>2.public static String valueOf(int i); //String类型静态的valueOf方法</li>\n<li>3.public static String toString();     //integer类型静态的toString方法</li>\n<li>4.public static String toString(int i); //integer类型的静态方法</li>\n</ul>\n</li>\n<li>将str转换成为int的方法:<ul>\n<li>public int intValue();                 //以int类型返回该Interger；String -&gt; Integer -&gt; Int</li>\n<li>public static int parseInt(String s);   </li>\n</ul>\n</li>\n<li>字符串到字符的转换通过toCharArray()既就可以把字符串转换成为字符数组(JDK 8 里面取消了);</li>\n<li>注意事项:基本数据类型包装类有八种其中七种都有ParseXXX的方法(除了Character类没有),可以将这七种字符串表现形式转换成为基本数据类型;</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.integer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_Integer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.Integer类的构造方法以及常量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"int 类型  Max : \"</span> + Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"int 类型  Min : \"</span> + Integer.MIN_VALUE);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Integer it1 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">100</span>);</span><br><span class=\"line\">    Integer it2 = <span class=\"keyword\">new</span> Integer(<span class=\"string\">\"100\"</span>); <span class=\"comment\">//数字字符串转换成为整形</span></span><br><span class=\"line\">    Integer it3 = <span class=\"keyword\">new</span> Integer(<span class=\"string\">'a'</span>);   <span class=\"comment\">//注意：这里可以将单个字符转成码表对应的十进制值(但是字符串是不行的比如\"abc\")</span></span><br><span class=\"line\">    System.out.println(it1);</span><br><span class=\"line\">    System.out.println(it2);</span><br><span class=\"line\">    System.out.println(it3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例2.Integer类的一些方法(实现十进制转成其他进制)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> src = <span class=\"number\">255</span>;</span><br><span class=\"line\">    System.out.println(src + <span class=\"string\">\" -&gt; Binary : \"</span> + Integer.toBinaryString(src)); <span class=\"comment\">//二进制</span></span><br><span class=\"line\">    System.out.println(src + <span class=\"string\">\" -&gt; Octal : \"</span> + Integer.toOctalString(src));  <span class=\"comment\">//八进制</span></span><br><span class=\"line\">    System.out.println(src + <span class=\"string\">\" -&gt; Hex : \"</span> + Integer.toHexString(src));     <span class=\"comment\">//十六进制</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.int与String之间的相互转换</span></span><br><span class=\"line\">    <span class=\"comment\">//整数转成字符串类型</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    String s1 = num + <span class=\"string\">\"\"</span>;  <span class=\"comment\">//method1 (推荐)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    String s2 = String.valueOf(num); <span class=\"comment\">//method2 (推荐)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Integer num2 = <span class=\"keyword\">new</span> Integer(num);</span><br><span class=\"line\">    String s3 = num2.toString();</span><br><span class=\"line\">    </span><br><span class=\"line\">    String s4 = Integer.toString(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"四种int 转成 字符串 的 静态方法 ：\"</span> + s1 + <span class=\"string\">\", \"</span> + s2 + <span class=\"string\">\", \"</span> + s3 + <span class=\"string\">\", \"</span> + s4);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//字符串转成整数</span></span><br><span class=\"line\">    String s5 = <span class=\"string\">\"1024\"</span>;</span><br><span class=\"line\">    Integer num3 = <span class=\"keyword\">new</span> Integer(s5);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num4 = num3.intValue();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> num5 = Integer.parseInt(s5); <span class=\"comment\">// 推荐方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"字符串转换成为整形:\"</span>);</span><br><span class=\"line\">    System.out.print(num4);</span><br><span class=\"line\">    System.out.println(num5);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.ParseXXX的方法,可以将这七种字符串表现形式转换成为基本数据类型;</span></span><br><span class=\"line\">    Boolean b = Boolean.parseBoolean(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    System.out.println(b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> 类型  Max : <span class=\"number\">2147483647</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> 类型  Min : -<span class=\"number\">2147483648</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">97</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">255</span> -&gt; Binary : <span class=\"number\">11111111</span></span><br><span class=\"line\"><span class=\"number\">255</span> -&gt; Octal : <span class=\"number\">377</span></span><br><span class=\"line\"><span class=\"number\">255</span> -&gt; Hex : ff</span><br><span class=\"line\"></span><br><span class=\"line\">四种<span class=\"keyword\">int</span> 转成 字符串 的 静态方法 ：<span class=\"number\">1024</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>, <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">字符串转换成为整形:</span><br><span class=\"line\"><span class=\"number\">1024</span> <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><em>补充知识:</em></p>\n<ul>\n<li>JDK5新的特性(自动装箱和自动拆箱)<ul>\n<li>自动装箱: 把基本类型转换成为包装类型;</li>\n<li>自动拆箱: 把包装类型转换成为基本类型;</li>\n</ul>\n</li>\n<li>注意事项: 在-128到127是Byte的取值范围,如果在这个取值范围内,自动装箱就不会创建对象而是从常量池中获取;但是需要注意如果<code>超过了该范围便会重新创建该对象</code>;</li>\n</ul>\n<p>基础实例演示：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例1.JDK5的新特性(面试题会问)</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"JDK 新特殊 : 自动装箱与拆箱\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//1.5 之前</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">1024</span>;</span><br><span class=\"line\">Integer i1 = <span class=\"keyword\">new</span> Integer(x); <span class=\"comment\">//将基本数据类型 包装成为 对象 -&gt; 装箱</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> y = i1.intValue();       <span class=\"comment\">//将对象 转换成为 基本数据类型 -&gt; 拆箱</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1.5版本之后</span></span><br><span class=\"line\">Integer i2 = <span class=\"number\">1024</span>; <span class=\"comment\">// 自动装箱(把基本数据类型转换成为对象) - 其实底层还是上面的操作;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> z = i2 + <span class=\"number\">200</span>;  <span class=\"comment\">// 自动拆箱(把对象转换成为基本数据类型)</span></span><br><span class=\"line\">System.out.println(i2 + <span class=\"string\">\", \"</span> + z);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意Integer 调用intValue但是如果值为null,null调用方法就会出现异常</span></span><br><span class=\"line\"><span class=\"comment\">// Integer i3 = null;</span></span><br><span class=\"line\"><span class=\"comment\">// int a = i3 + 100;</span></span><br><span class=\"line\"><span class=\"comment\">// System.out.println(a); //调用会导致空指针异常 java.lang.NULLPointerException</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//面试题 自动装箱拆箱的特性</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> number1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> number2 = <span class=\"number\">1024</span>;</span><br><span class=\"line\">Integer int1 = <span class=\"keyword\">new</span> Integer(number1);</span><br><span class=\"line\">Integer int2 = <span class=\"keyword\">new</span> Integer(number2);</span><br><span class=\"line\">System.out.println(int1 == int2);       <span class=\"comment\">//对象地址之间的比较</span></span><br><span class=\"line\">System.out.println(int1.equals(int2));  <span class=\"comment\">//对象之间的比较</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"#-----------------------------------------#\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Integer int3 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">512</span>);</span><br><span class=\"line\">Integer int4 = <span class=\"keyword\">new</span> Integer(<span class=\"number\">512</span>);</span><br><span class=\"line\">System.out.println(int3 == int4);</span><br><span class=\"line\">System.out.println(int3.equals(int4));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"#-----------------------------------------#\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//特殊点来了(如果取值范围在bytes中 -127 ~ 128，将直接从常量中取)</span></span><br><span class=\"line\">Integer int5 = <span class=\"number\">97</span>;</span><br><span class=\"line\">Integer int6 = <span class=\"number\">97</span>;</span><br><span class=\"line\">System.out.println(int5 == int6);</span><br><span class=\"line\">System.out.println(int5.equals(int6));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"#-----------------------------------------#\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Integer int7 = <span class=\"number\">197</span>;</span><br><span class=\"line\">Integer int8 = <span class=\"number\">197</span>;</span><br><span class=\"line\">System.out.println(int7 == int8);</span><br><span class=\"line\">System.out.println(int7.equals(int8));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"#-----------------------------------------#\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果:</span></span><br><span class=\"line\">JDK 新特殊 : 自动装箱与拆箱</span><br><span class=\"line\"><span class=\"number\">1024</span>, <span class=\"number\">1224</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">#-----------------------------------------#</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">#-----------------------------------------#</span><br><span class=\"line\"><span class=\"comment\">//特殊点(-127 ~ 128)</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">#-----------------------------------------#</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">#-----------------------------------------#</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Math类使用\"><a href=\"#Math类使用\" class=\"headerlink\" title=\"Math类使用\"></a>Math类使用</h4><p>描述: Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数;里面的方法都是静态不用去new Math使用直接类名.方法名称;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#lang包里</span></span><br><span class=\"line\">java.lang.Object </span><br><span class=\"line\">  java.lang.Math </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#语法结构</span></span><br><span class=\"line\">public final class Math</span><br><span class=\"line\">extends Object</span><br></pre></td></tr></table></figure></p>\n<p>常用方法和静态属性:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#属性</span></span><br><span class=\"line\">public static final double E <span class=\"comment\">#double值比任何其他的努尔紧密，自然对数的基础。</span></span><br><span class=\"line\">public static final double PI  <span class=\"comment\"># double值比其他任何接近零圆周率，圆周和直径的比值。 </span></span><br><span class=\"line\"><span class=\"comment\">#部分方法</span></span><br><span class=\"line\">* public static int abs(int a)  <span class=\"comment\">#对a取绝对值</span></span><br><span class=\"line\">* public static double ceil(double a)  <span class=\"comment\">#向上取值 天花板</span></span><br><span class=\"line\">* public static double floor(double a) <span class=\"comment\">#向下取值 地板</span></span><br><span class=\"line\">* public static int round(<span class=\"built_in\">float</span> a)  <span class=\"comment\">#参数为double的自学</span></span><br><span class=\"line\">* public static int max(int a,int b) <span class=\"comment\">#min自学取最小值</span></span><br><span class=\"line\">* public static double pow(double a,double b)  <span class=\"comment\">#求幂次方</span></span><br><span class=\"line\">* public static double random()   <span class=\"comment\">#随机数 0~1</span></span><br><span class=\"line\">* public static double sqrt(double a) <span class=\"comment\">#求平方根</span></span><br></pre></td></tr></table></figure></p>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1.常量值</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"自然对数  : \"</span> + Math.E);</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"圆周率 : \"</span>  + Math.PI);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例2.常用方法</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\" -2 的绝对值 : \"</span> + Math.abs(-<span class=\"number\">2</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\" -2 .0的绝对值 : \"</span> + Math.abs(-<span class=\"number\">2.0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"向上取整\"</span> + Math.ceil(<span class=\"number\">12.3</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"向上取整\"</span> + Math.ceil(<span class=\"number\">12.99</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"向下取整\"</span> + Math.floor(<span class=\"number\">12.3</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"向上取整\"</span> + Math.floor(<span class=\"number\">12.99</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"四舍五入 \"</span> + Math.round(<span class=\"number\">12.30</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"四舍五入 \"</span> + Math.round(<span class=\"number\">12.50</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"5 8 最大值 = \"</span> + Math.max(<span class=\"number\">5</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"5 8 最大值 = \"</span> + Math.min(<span class=\"number\">5</span>, <span class=\"number\">8</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"2^16 = \"</span> + Math.pow(<span class=\"number\">2</span>,<span class=\"number\">16</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"随机数 = \"</span> + Math.random());</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自然对数  : <span class=\"number\">2.718281828459045</span></span><br><span class=\"line\">圆周率 : <span class=\"number\">3.141592653589793</span></span><br><span class=\"line\"></span><br><span class=\"line\">-<span class=\"number\">2</span> 的绝对值 : <span class=\"number\">2</span></span><br><span class=\"line\">-<span class=\"number\">2</span> .<span class=\"number\">0</span>的绝对值 : <span class=\"number\">2.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">向上取整<span class=\"number\">13.0</span></span><br><span class=\"line\">向上取整<span class=\"number\">13.0</span></span><br><span class=\"line\">向下取整<span class=\"number\">12.0</span></span><br><span class=\"line\">向上取整<span class=\"number\">12.0</span></span><br><span class=\"line\">四舍五入 <span class=\"number\">12</span></span><br><span class=\"line\">四舍五入 <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">8</span> 最大值 = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">5</span> <span class=\"number\">8</span> 最大值 = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>^<span class=\"number\">16</span> = <span class=\"number\">65536.0</span></span><br><span class=\"line\">随机数 = <span class=\"number\">0.511862521199665</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Random-类使用\"><a href=\"#Random-类使用\" class=\"headerlink\" title=\"Random 类使用\"></a>Random 类使用</h4><p>描述: 这个类的一个实例是用于生成伪随机数流。该类使用一个48位的种子，这是使用线性同余公式的修正。</p>\n<p>此类用于产生随机数如果用相同的<code>随机数种子</code>创建两个 Random 实例，对每个实例进行相同的方法调用序列，它们将生成并返回相同的<br>数字序列。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#包</span></span><br><span class=\"line\">java.util.Random </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#基础语法结构</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Random</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">Random</span>()  //#创建一个新的随机数发生器。此构造函数将随机数发生器的种子设置为一个非常有可能与此) 纳米值构造函数的任何其他调用不同的值。 内部取值<span class=\"title\">System</span>.<span class=\"title\">nanoTime</span>(</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">Random</span>(<span class=\"title\">long</span> <span class=\"title\">seed</span>) //#使用一个单一的 <span class=\"title\">long</span>种子创造了一种新的随机数发生器。种子的伪随机数发生器的方法 <span class=\"title\">next</span>(<span class=\"title\">int</span>)保持内部状态的初始值。 相同的种子生成的随机数是一致的</span>;与调用<span class=\"keyword\">new</span> Random(seed)是等价的：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"keyword\">int</span> bits)</span>   <span class=\"comment\">//#生成下一个随机数。  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nextInt</span><span class=\"params\">()</span>        <span class=\"comment\">//#返回下一个伪随机、均匀分布的 int价值从这个随机数生成器的序列。  </span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nextInt</span><span class=\"params\">(<span class=\"keyword\">int</span> bound)</span>  <span class=\"comment\">//#返回一个随机、均匀分布的 int值在0（含）和指定值（独家），从这个随机数发生器的顺序绘制。值为0&lt;=n&lt;bound</span></span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Random</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.Random类的使用</span></span><br><span class=\"line\">    <span class=\"comment\">//方式1:伪随机数底层种子默认采用系统当前时间的纳秒</span></span><br><span class=\"line\">    Random ra = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"伪随机 = \"</span> + ra.nextInt());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"伪随机 = \"</span> + ra.nextInt());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方式2</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"相同的seed种子数,生成的随机数是一致的:\"</span>);</span><br><span class=\"line\">    Random r = <span class=\"keyword\">new</span> Random(<span class=\"number\">1024</span>); <span class=\"comment\">//调用new Random(seed)与r.setSeed(seed)是等价的：</span></span><br><span class=\"line\">    System.out.println(r.nextInt());</span><br><span class=\"line\">    System.out.println(r.nextInt());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方式3</span></span><br><span class=\"line\">    Random r1 = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    r1.setSeed(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    System.out.println(r1.nextInt());</span><br><span class=\"line\">    System.out.println(r1.nextInt());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.生成一个范围内的随机数</span></span><br><span class=\"line\">    Random r2 = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">      System.out.print(r.nextInt(<span class=\"number\">100</span>) + <span class=\"string\">\" \"</span>); <span class=\"comment\">//生成十次 0 ~ 99 的随机数(注意这里不是100)</span></span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">伪随机 = 1656751839</span><br><span class=\"line\">伪随机 = 112905377</span><br><span class=\"line\"></span><br><span class=\"line\">相同的seed种子数,生成的随机数是一致的:</span><br><span class=\"line\">-1549467450</span><br><span class=\"line\">1376243983</span><br><span class=\"line\">-1549467450</span><br><span class=\"line\">1376243983</span><br><span class=\"line\"></span><br><span class=\"line\">87 33 98 93 9 43 61 69 68 9</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"System-类使用\"><a href=\"#System-类使用\" class=\"headerlink\" title=\"System 类使用\"></a>System 类使用</h4><p>描述: 由System类提供的设施包括标准输入、标准输出和错误输出流；访问外部定义的属性和环境变量；加载文件和库的方法；和一种快速复制数组的一部分的实用方法。</p>\n<p>注意事项:由于它私有了它的构造方法所以不能采用new System申请对象的形式(即它不能被实例化);</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基础格式</span></span><br><span class=\"line\">java.lang.System</span><br><span class=\"line\"></span><br><span class=\"line\">public final class System</span><br><span class=\"line\">extends Object</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输入输出流成员属性</span></span><br><span class=\"line\">public static final PrintStream err <span class=\"comment\">#“标准”错误输出流。该流已打开，并准备接受输出数据。 </span></span><br><span class=\"line\">public static final PrintStream <span class=\"keyword\">in</span> <span class=\"comment\">#“标准”输入流。该流已打开并准备提供输入数据。通常此流对应于主机环境或用户指定的键盘输入或另一个输入源。 (从终端键盘输入)</span></span><br><span class=\"line\">public static final PrintStream out <span class=\"comment\">#“标准”输出流。该流已打开并准备接受输出数据。通常此流对应于主机环境或用户指定的显示输出或另一个输出目的地。 (最终生成到控制台)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成员方法</span></span><br><span class=\"line\">public static void gc()  <span class=\"comment\">#运行垃圾收集器;调用gc方法表明，java虚拟机消耗的努力回收未使用的对象为了让记忆他们目前占据可以快速重用 它相当于Runtime.getRuntime().gc()</span></span><br><span class=\"line\">public static void <span class=\"built_in\">exit</span>(int status) <span class=\"comment\">#终止当前正在运行的java虚拟机。该参数作为状态代码；按惯例，一个非零状态码表示异常终止。 类似C和php中的exit(1)作用</span></span><br><span class=\"line\">public static long currentTimeMillis()  <span class=\"comment\">#返回当前时间以毫秒为单位。 </span></span><br><span class=\"line\">public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length) <span class=\"comment\">#从指定的源数组中复制一个数组，开始在指定的位置，到目标数组的指定位置。一个后继数组组件从源到目的地的 src数组引用的数组引用的 dest复制</span></span><br></pre></td></tr></table></figure>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.system;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_System</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.垃圾回收机制(需要用到Object中的)</span></span><br><span class=\"line\">    <span class=\"comment\">//protected void finalize()throws Throwable 当垃圾收集确定没有对对象的引用时，由对象上的垃圾收集器调用。</span></span><br><span class=\"line\">    <span class=\"comment\">//子类重写 finalize方法配置系统资源或执行其他清理。 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">      System.out.print(i);</span><br><span class=\"line\">      <span class=\"keyword\">new</span> GcDemo();</span><br><span class=\"line\">      System.gc(); <span class=\"comment\">//运行垃圾回收机制(当数量达到一定限制的时候)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.当前系统时间(毫秒数) 从 1970年1月1日开始</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">      System.out.print(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n循环花费的毫秒数 = \"</span> + (endTime - startTime));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.直接Arraycopy复制拼接目标数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr1 = &#123;<span class=\"number\">18</span>,<span class=\"number\">2017</span>,<span class=\"number\">2019</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>+arr1.length];</span><br><span class=\"line\">    arr2[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr2[<span class=\"number\">4</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    System.arraycopy(arr1, <span class=\"number\">0</span>, arr2, <span class=\"number\">5</span>, arr1.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">      System.out.print(arr2[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//示例4</span></span><br><span class=\"line\">    System.exit(<span class=\"number\">0</span>);  <span class=\"comment\">//正常的退出java</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意：一个java文件中只有一个public 公共类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GcDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\" - 垃圾正在被回收!\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//super.finalize();</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">012 - 垃圾正在被回收!</span><br><span class=\"line\">3 - 垃圾正在被回收!</span><br><span class=\"line\">4 - 垃圾正在被回收!</span><br><span class=\"line\"> - 垃圾正在被回收!</span><br><span class=\"line\">0  - 垃圾正在被回收!</span><br><span class=\"line\"></span><br><span class=\"line\">1  ~ ~ ~ 99 </span><br><span class=\"line\">循环花费的毫秒数 = 2</span><br><span class=\"line\"></span><br><span class=\"line\">0 1 0 0 4 18 2017 2019 7 1 9</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>避免使用  finalize（）由于finalize（）的行为不可预期，而且没有任何保证提及 finalize（）会被及时和最终会执行。</li>\n<li>System.gc()和 System.runFinalization()仅仅能够增加 finalize（）执行的可能性，但还是不能确保肯定会执行。</li>\n</ul>\n<hr>\n\n<h4 id=\"BigInteger-类使用\"><a href=\"#BigInteger-类使用\" class=\"headerlink\" title=\"BigInteger 类使用\"></a>BigInteger 类使用</h4><p>描述:可以让超过Integer范围内的数据进行运算;可变的任意精度整数,BigInteger提供类似java的所有原始的整数商,从java.lang.math所有相关的方法。此外BigInteger提供操作的模运算，GCD计算，素性测试，原代、位操作，和其他一些杂项作业。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#包</span></span><br><span class=\"line\">java.math.BigInteger </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#语法结构</span></span><br><span class=\"line\">public class BigInteger</span><br><span class=\"line\">extends Number</span><br><span class=\"line\">implements Comparable&lt;BigInteger&gt;</span><br></pre></td></tr></table></figure>\n<p>常用方法描述:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#构造方法</span></span><br><span class=\"line\">public BigInteger(String val)  <span class=\"comment\">#翻译BigInteger的十进制字符串表示为BigInteger。 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成员方法</span></span><br><span class=\"line\">* public BigInteger add(BigInteger val)  <span class=\"comment\">#//加</span></span><br><span class=\"line\">* public BigInteger subtract(BigInteger val) <span class=\"comment\"># //减</span></span><br><span class=\"line\">* public BigInteger multiply(BigInteger val) <span class=\"comment\"># //乘</span></span><br><span class=\"line\">* public BigInteger divide(BigInteger val) <span class=\"comment\">#//除法</span></span><br><span class=\"line\">* public BigInteger[] divideAndRemainder(BigInteger val) <span class=\"comment\">#//将除法所得 与取模所得 放入数组之中</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.bigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_BigInteger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.将比long大的字符串转换成为可被计算的整形</span></span><br><span class=\"line\">    String val = <span class=\"keyword\">new</span> String(<span class=\"string\">\"3141592600000000000\"</span>);</span><br><span class=\"line\">    BigInteger bi = <span class=\"keyword\">new</span> BigInteger(val);</span><br><span class=\"line\">    System.out.println(bi);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.大整数计算(注意会生成新值不会再远值上改变)</span></span><br><span class=\"line\">    BigInteger bi1 = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"256\"</span>);</span><br><span class=\"line\">    BigInteger bi2 = <span class=\"keyword\">new</span> BigInteger(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    BigInteger[] bi3 = bi1.divideAndRemainder(bi2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"add = \"</span> + bi1.add(bi2));  <span class=\"comment\">//加</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"subtract = \"</span> + bi1.subtract(bi2)); <span class=\"comment\">//减</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"multiply = \"</span> + bi1.multiply(bi2)); <span class=\"comment\">//乘</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"divide = \"</span> + bi1.divide(bi2));  <span class=\"comment\">//除</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"div = \"</span> + bi3[<span class=\"number\">0</span>] + <span class=\"string\">\", Remainder = \"</span> + bi3[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//###执行结果######</span></span><br><span class=\"line\"><span class=\"number\">3141592600000000000</span></span><br><span class=\"line\">add = <span class=\"number\">258</span></span><br><span class=\"line\">subtract = <span class=\"number\">254</span></span><br><span class=\"line\">multiply = <span class=\"number\">512</span></span><br><span class=\"line\">divide = <span class=\"number\">128</span></span><br><span class=\"line\">div = <span class=\"number\">128</span>, Remainder = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"BigDecimal-类使用\"><a href=\"#BigDecimal-类使用\" class=\"headerlink\" title=\"BigDecimal 类使用\"></a>BigDecimal 类使用</h4><p>描述：该类出现为了更加精确的处理小数部分，由于在运算的时候，float类型和double很容易丢失精度，所以为了能精确的表示、计算浮点数，Java提供了BigDecimal不可变的、任意精度的有符号十进制数。</p>\n<p>BigDecimal类的算术，尺度操纵，圆、比较、散列提供的操作，和格式转换。的toString()方法提供的一个典型代表，一个BigDecimal。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#包</span><br><span class=\"line\">java.math.BigDecimal </span><br><span class=\"line\"></span><br><span class=\"line\">#语法结构</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDecimal</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Number</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">BigDecimal</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span>(<span class=\"title\">BigInteger</span> <span class=\"title\">val</span>)  //#<span class=\"title\">BigInteger</span>值被转换为 <span class=\"title\">BigDecimal</span>。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span>(<span class=\"title\">double</span> <span class=\"title\">val</span>)  //<span class=\"title\">BigDecimal</span> <span class=\"title\">double</span>的 <span class=\"title\">double</span>二进制浮点值的小数表示。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span>(<span class=\"title\">String</span> <span class=\"title\">val</span>) //将一个字符串表示一个 <span class=\"title\">BigDecimal</span> </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#成员方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span> <span class=\"title\">add</span>(<span class=\"title\">BigDecimal</span> <span class=\"title\">augend</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span> <span class=\"title\">subtract</span>(<span class=\"title\">BigDecimal</span> <span class=\"title\">subtrahend</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span> <span class=\"title\">multiply</span>(<span class=\"title\">BigDecimal</span> <span class=\"title\">multiplicand</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">BigDecimal</span> <span class=\"title\">divide</span>(<span class=\"title\">BigDecimal</span> <span class=\"title\">divisor</span>)</span></span><br></pre></td></tr></table></figure>\n<p>基本案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_BigDecimal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.BigDecimal 精确计算的几种方法</span></span><br><span class=\"line\">    BigDecimal bd1 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">2.0</span>);  <span class=\"comment\">//方式1 传入double类型参数</span></span><br><span class=\"line\">    BigDecimal bd2 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Demo1 - 开发中不推荐此种方式  2.0 - 1.1 = \"</span> + bd1.subtract(bd2));</span><br><span class=\"line\"></span><br><span class=\"line\">    BigDecimal bd3 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"2.0\"</span>); <span class=\"comment\">//方式2 传入字符串的方式</span></span><br><span class=\"line\">    BigDecimal bd4 = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"1.1\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Demo2 - 通过构造中传入字符串的方式 开发时候推荐  2.0 - 1.1 = \"</span> +bd3.subtract(bd4));</span><br><span class=\"line\">    </span><br><span class=\"line\">    BigDecimal bd5 = BigDecimal.valueOf(<span class=\"number\">2.0</span>); <span class=\"comment\">//方式3</span></span><br><span class=\"line\">    BigDecimal bd6 = BigDecimal.valueOf(<span class=\"number\">1.1</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Demo3 - 在开发中也是推荐的 2.0 - 1.1 = \"</span> + bd5.subtract(bd6));</span><br><span class=\"line\">    System.out.println(bd5.add(bd6));</span><br><span class=\"line\">    System.out.println(bd5.multiply(bd6));</span><br><span class=\"line\">    System.out.println(bd5.divide(bd6,<span class=\"number\">1</span>));  <span class=\"comment\">//注意除法 有其他参数</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Demo1 - 开发中不推荐此种方式  <span class=\"number\">2.0</span> - <span class=\"number\">1.1</span> = <span class=\"number\">0.899999999999999911182158029987476766109466552734375</span></span><br><span class=\"line\"></span><br><span class=\"line\">Demo2 - 通过构造中传入字符串的方式 开发时候推荐  <span class=\"number\">2.0</span> - <span class=\"number\">1.1</span> = <span class=\"number\">0.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">Demo3 - 在开发中也是推荐的 <span class=\"number\">2.0</span> - <span class=\"number\">1.1</span> = <span class=\"number\">0.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.1</span></span><br><span class=\"line\"><span class=\"number\">2.20</span></span><br><span class=\"line\"><span class=\"number\">1.8</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Date-类方法\"><a href=\"#Date-类方法\" class=\"headerlink\" title=\"Date 类方法\"></a>Date 类方法</h4><p>描述:类 Date 表示特定的瞬间，精确到毫秒。里面大多方法都失效了我只关注没有没替代的;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#包</span></span><br><span class=\"line\">java.util.Date </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#语法结构</span></span><br><span class=\"line\">public class Date</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Serializable, Cloneable, Comparable&lt;Date&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#构造方法</span></span><br><span class=\"line\">public Date()  <span class=\"comment\">#分配一个 Date对象并将它初始化，它代表的时间分配给它，测量精确到毫秒。 == System.currentTimeMillis() </span></span><br><span class=\"line\">public Date(long date) <span class=\"comment\">#分配一个 Date对象并将它初始化为代表指定的毫秒数自基准时间被称为“时代”，即1970年1月1日，00:00:00 GMT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成员方法</span></span><br><span class=\"line\">public long getTime() <span class=\"comment\">#返回毫秒数自1970年1月1日以来，该 Date对象表示00:00:00 GMT。   == System.currentTimeMillis() </span></span><br><span class=\"line\"></span><br><span class=\"line\">public void setTime(long time) <span class=\"comment\">#集代表一个时间点是1970年1月1日00:00:00 GMT time毫秒后这 Date对象</span></span><br></pre></td></tr></table></figure>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Date</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.</span></span><br><span class=\"line\">    Date d1 = <span class=\"keyword\">new</span> Date(); <span class=\"comment\">//没有传入参数代表的是当前时间</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"当前时间 = \"</span> + d1);</span><br><span class=\"line\">    Date d2 = <span class=\"keyword\">new</span> Date(<span class=\"number\">0</span>); <span class=\"comment\">//代表的是1970年1月1日，通过毫秒值创建时间对象</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"格林GMT起始时间 = \"</span> + d2); <span class=\"comment\">//需要注意时区的影响</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.</span></span><br><span class=\"line\">    Date d3 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"通过时间对象获取当前毫秒值 ：\"</span> + d3.getTime());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"通过类方法获取当前毫秒值 ：\"</span> + System.currentTimeMillis());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.设置毫秒值改变时间对象 从1970年一月一日开始 (与示例 d2 有一定的关联)</span></span><br><span class=\"line\">    Date d4 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    d4.setTime(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"与示例 d2 有一定的关联\"</span> + d4);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间 = Sun Aug <span class=\"number\">25</span> <span class=\"number\">21</span>:<span class=\"number\">51</span>:<span class=\"number\">27</span> CST <span class=\"number\">2019</span></span><br><span class=\"line\">格林GMT起始时间 = Thu Jan <span class=\"number\">01</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> CST <span class=\"number\">1970</span></span><br><span class=\"line\">通过时间对象获取当前毫秒值 ：<span class=\"number\">1566741087306</span></span><br><span class=\"line\">通过类方法获取当前毫秒值 ：<span class=\"number\">1566741087306</span></span><br><span class=\"line\">与示例 d2 有一定的关联 : Thu Jan <span class=\"number\">01</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">01</span> CST <span class=\"number\">1970</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>导包的时候注意是在 <code>java.util.Date</code> 包下</li>\n<li>在new Date(0) 获取的是1970年1月1日,但是获取的小时数与您所在的时区有关;</li>\n</ul>\n<p><br></p>\n<h4 id=\"DateFormat-类使用\"><a href=\"#DateFormat-类使用\" class=\"headerlink\" title=\"DateFormat 类使用\"></a>DateFormat 类使用</h4><p>描述：DateFormat类是抽象类(无法直接new创建对象实例化)，所以使用其子类SimpleDateFormat; DateFormat 是日期/时间格式化子类的抽象类,它以与语言无关的方式格式化并解析日期或时间。</p>\n<p>日期时间格式的子类SimpleDateFormat，允许的格式（例如，日期→文本），分析（文本→日期），和归一化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#包</span><br><span class=\"line\">java.text.DateFormat </span><br><span class=\"line\"></span><br><span class=\"line\">#语法结构</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormat</span>  #<span class=\"title\">DateFormat</span>是一个抽象类的子类格式的日期/时间格式化和解析日期或独立于语言的方式时间</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Format</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#构造与方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">protected</span> <span class=\"title\">Format</span>()  //唯一的构造函数。（用于调用子类构造函数，通常是隐式的。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">static</span> <span class=\"title\">final</span> <span class=\"title\">DateFormat</span> <span class=\"title\">getDateInstance</span>() //#获取与默认格式样式为默认 <span class=\"title\">FORMAT</span>本地化的日期格式。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">static</span> <span class=\"title\">final</span> <span class=\"title\">DateFormat</span> <span class=\"title\">getDateInstance</span>(<span class=\"title\">int</span> <span class=\"title\">style</span>) //#获取与给定的格式设置样式为默认 <span class=\"title\">FORMAT</span>本地化的日期格式。  </span></span><br><span class=\"line\"><span class=\"class\">//相当于调用<span class=\"title\">getDateInstance</span>(<span class=\"title\">style</span>, <span class=\"title\">Locale</span>.<span class=\"title\">getDefault</span>(<span class=\"title\">Locale</span>.<span class=\"title\">Category</span>.<span class=\"title\">FORMAT</span>))。</span></span><br></pre></td></tr></table></figure></p>\n<p>DateFormat子类:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#包</span><br><span class=\"line\">java.text.SimpleDateFormat</span><br><span class=\"line\">#语法结构</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDateFormat</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">DateFormat</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#<span class=\"title\">SimpleDateFormat</span>构造方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">SimpleDateFormat</span>()</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">SimpleDateFormat</span>(<span class=\"title\">String</span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#子类方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">final</span> <span class=\"title\">String</span> <span class=\"title\">format</span>(<span class=\"title\">Date</span> <span class=\"title\">date</span>)</span>; <span class=\"comment\">//格式化日期转换成为字符串显示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">parse</span><span class=\"params\">(String source)</span></span>;  <span class=\"comment\">//字符串日期解析为日期对象</span></span><br></pre></td></tr></table></figure><br>下面的例子显示的日期和时间模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date and Time Pattern  Result  </span><br><span class=\"line\"><span class=\"string\">\"yyyy.MM.dd G 'at' HH:mm:ss z\"</span>  2001.07.04 AD at 12:08:56 PDT  </span><br><span class=\"line\"><span class=\"string\">\"EEE, MMM d, ''yy\"</span>  Wed, Jul 4, <span class=\"string\">'01  </span></span><br><span class=\"line\"><span class=\"string\">\"h:mm a\"  12:08 PM  </span></span><br><span class=\"line\"><span class=\"string\">\"hh '</span>o<span class=\"string\">''</span>clock<span class=\"string\">' a, zzzz\"  12 o'</span>clock PM, Pacific Daylight Time  </span><br><span class=\"line\"><span class=\"string\">\"K:mm a, z\"</span>  0:08 PM, PDT  </span><br><span class=\"line\"><span class=\"string\">\"yyyyy.MMMMM.dd GGG hh:mm aaa\"</span>  02001.July.04 AD 12:08 PM  </span><br><span class=\"line\"><span class=\"string\">\"EEE, d MMM yyyy HH:mm:ss Z\"</span>  Wed, 4 Jul 2001 12:08:56 -0700  </span><br><span class=\"line\"><span class=\"string\">\"yyMMddHHmmssZ\"</span>  010704120856-0700  </span><br><span class=\"line\"><span class=\"string\">\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"</span>  2001-07-04T12:08:56.235-0700  </span><br><span class=\"line\"><span class=\"string\">\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\"</span>  2001-07-04T12:08:56.235-07:00  </span><br><span class=\"line\"><span class=\"string\">\"YYYY-'W'ww-u\"</span>  2001-W27-3</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190825230243.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SimpleDateFormat类实现日期和字符串的相互转换</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.DateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_DateFormat</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1</span></span><br><span class=\"line\">    <span class=\"comment\">//DateFormat df = new DateFormat(); //注意 ： DateFormat是抽象类不允许实例化</span></span><br><span class=\"line\">    <span class=\"comment\">//态工厂方法之一：</span></span><br><span class=\"line\">    DateFormat df1 = DateFormat.getDateInstance();<span class=\"comment\">//默认格式YYYY/MM/dd 相当于父类引用指向子类对象,右边的方法返回一个子类</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例1 \"</span> + df1.format(<span class=\"keyword\">new</span> Date())); </span><br><span class=\"line\">    DateFormat df2 = <span class=\"keyword\">new</span> SimpleDateFormat(); <span class=\"comment\">//效果同上</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2</span></span><br><span class=\"line\">    Date d = <span class=\"keyword\">new</span> Date();  <span class=\"comment\">//时间对象</span></span><br><span class=\"line\">    SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(); <span class=\"comment\">//创建日期格式化对象</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"当前时间默认格式化:  \"</span> + sdf.format(d)); <span class=\"comment\">//将日期转换字符串</span></span><br><span class=\"line\">    <span class=\"comment\">//自定义输出格式</span></span><br><span class=\"line\">    SimpleDateFormat sdf1 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy 年 MM 月 dd 日 HH:mm:ss\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"当前时间自定义格式化:  \"</span> + sdf1.format(d));</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3</span></span><br><span class=\"line\">    String str = <span class=\"string\">\"2019 年 08 月 25 日 22:09:25\"</span>; <span class=\"comment\">//将时间字符串转换成日期对象</span></span><br><span class=\"line\">    SimpleDateFormat sdf2 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy 年 MM 月 dd 日 HH:mm:ss\"</span>);</span><br><span class=\"line\">    Date d1 = sdf2.parse(str);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"转换结果 : \"</span> + d1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例4:生日当前时间生活了多少天</span></span><br><span class=\"line\">    String birthDay = <span class=\"string\">\"1995年01月10日\"</span>;</span><br><span class=\"line\">    String currentDay = <span class=\"string\">\"2019年08月25日\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义日期格式化对象</span></span><br><span class=\"line\">    SimpleDateFormat sdf3 = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年mm月dd日\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将日期字符串转换成为日期对象</span></span><br><span class=\"line\">    Date bir = sdf3.parse(birthDay);</span><br><span class=\"line\">    Date cur = sdf3.parse(currentDay);</span><br><span class=\"line\">    <span class=\"comment\">//通过日期对象获取时间毫秒值</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> res = cur.getTime() - bir.getTime();</span><br><span class=\"line\">    <span class=\"comment\">//之间差毫秒值除以1天的毫秒值 1000 / 3600 / 24</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我已经生活了 \"</span> + (res / <span class=\"number\">1000</span> / <span class=\"number\">3600</span> / <span class=\"number\">24</span>) + <span class=\"string\">\" 天\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间默认格式化:  19-8-25 下午10:35</span><br><span class=\"line\">当前时间自定义格式化:  2019 年 08 月 25 日 22:35:18</span><br><span class=\"line\">转换结果 : Sun Aug 25 22:09:25 CST 2019</span><br><span class=\"line\">我已经生活了 8781 天</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Calendar-类使用\"><a href=\"#Calendar-类使用\" class=\"headerlink\" title=\"Calendar 类使用\"></a>Calendar 类使用</h4><p>描述Calendar类的概述是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包</span></span><br><span class=\"line\">java.util.Calendar </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calendar</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">Object</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Calendar</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//成员方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">static</span> <span class=\"title\">Calendar</span> <span class=\"title\">getInstance</span>() //<span class=\"title\">Calendar</span>的<span class=\"title\">getInstance</span>方法返回的对象<span class=\"title\">Calendar</span>日历领域已与当前的日期和时间初始化</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">int</span> <span class=\"title\">get</span>(<span class=\"title\">int</span> <span class=\"title\">field</span>) //获取一个静态变量的值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">final</span> <span class=\"title\">void</span> <span class=\"title\">set</span>(<span class=\"title\">int</span> <span class=\"title\">year</span>,<span class=\"title\">int</span> <span class=\"title\">month</span>,<span class=\"title\">int</span> <span class=\"title\">day</span>) //修改年月日</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#######常用的<span class=\"title\">field</span>#####</span></span><br><span class=\"line\">调用方法:Calendar.AM</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> AM  <span class=\"comment\">//指示在中午之前从午夜的日期 AM_PM字段值。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DATE <span class=\"comment\">//场数 get和 set显示该月的一天。</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> YEAR   <span class=\"comment\">//对于 get和 set指示年场数。 </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MONTH  <span class=\"comment\">//对于 get和 set指示的月数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DAY_OF_MONTH <span class=\"comment\">//对于 get和 set显示该月的一天场数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DAY_OF_WEEK  <span class=\"comment\">//对于 get和 set显示星期日期字段数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DAY_OF_WEEK_IN_MONTH  <span class=\"comment\">//对于 get和 set指示当前月的星期序号字段数目。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> HOUR  <span class=\"comment\">//#对于 get和 set表示上午或下午场的小时数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> HOUR_OF_DAY <span class=\"comment\">//对于 get和 set指示小时的一天场数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MINUTE <span class=\"comment\">//对于 get和 set指示在小时分钟的场数。  </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MILLISECOND  <span class=\"comment\">//对于 get和 set指示在第二毫秒字段数目。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> field,<span class=\"keyword\">int</span> amount)</span> <span class=\"comment\">//年月日时分秒 向前减向后加amout</span></span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Calendar类的概述和获取日期的方法</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.calendar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo_Calendar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1.Calendar使用</span></span><br><span class=\"line\">    Calendar c = Calendar.getInstance();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"当前详细时间 ： \"</span> + c);</span><br><span class=\"line\">    <span class=\"comment\">//获取指定的年月日周</span></span><br><span class=\"line\">    System.out.println(c.get(Calendar.YEAR));  <span class=\"comment\">//字段静态成员年</span></span><br><span class=\"line\">    System.out.println(c.get(Calendar.MONTH)+<span class=\"number\">1</span>); <span class=\"comment\">//字段获取月主要是从年开始 (注意是从0开始的)</span></span><br><span class=\"line\">    System.out.println(c.get(Calendar.DAY_OF_MONTH)); <span class=\"comment\">//月中的的第几天</span></span><br><span class=\"line\">    System.out.println(c.get(Calendar.DAY_OF_WEEK)); <span class=\"comment\">//周中第几天 周日是第一天,周六是最后一天</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例2.获取当前星期几</span></span><br><span class=\"line\">    System.out.println(getWeek(c.get(Calendar.DAY_OF_WEEK)));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.个数前进行补0</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"当前月中的天数 : \"</span> + getDay(c.get(Calendar.DAY_OF_MONTH)));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例4.常用方法</span></span><br><span class=\"line\">    Calendar c1 = Calendar.getInstance(); <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">    c1.add(Calendar.YEAR, -<span class=\"number\">1</span>);          <span class=\"comment\">//当前年份-1; 我们可以对字段进行向前减或者向后加  2018</span></span><br><span class=\"line\">    c1.set(Calendar.DAY_OF_MONTH,<span class=\"number\">29</span>); <span class=\"comment\">// 设置当前月中的天数为29号</span></span><br><span class=\"line\">    System.out.println(c1.get(Calendar.YEAR) + <span class=\"string\">\"年\"</span> + (c1.get(Calendar.MONTH)+<span class=\"number\">1</span>) +<span class=\"string\">\"月\"</span> +c1.get(Calendar.DAY_OF_MONTH)+<span class=\"string\">\"日\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例5.平年闰年判断</span></span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入一个年份判断是闰年还是平年: \"</span>);</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    String year = sc.nextLine();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = Integer.parseInt(year);  <span class=\"comment\">//将数字字符串转换成为数字</span></span><br><span class=\"line\">    Calendar c2 = Calendar.getInstance();</span><br><span class=\"line\">    c2.set(y, <span class=\"number\">2</span>, <span class=\"number\">1</span>); <span class=\"comment\">//设置年3月1日</span></span><br><span class=\"line\">    c2.add(Calendar.DAY_OF_MONTH, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    String flag = (c2.get(Calendar.DAY_OF_MONTH) == <span class=\"number\">29</span>) ? <span class=\"string\">\"润年\"</span>:<span class=\"string\">\"平年\"</span>;</span><br><span class=\"line\">    System.out.println(year+<span class=\"string\">\"年是\"</span>+flag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getWeek</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    String[] week = &#123;<span class=\"string\">\"\"</span>,<span class=\"string\">\"星期天\"</span>,<span class=\"string\">\"星期一\"</span>,<span class=\"string\">\"星期二\"</span>,<span class=\"string\">\"星期三\"</span>,<span class=\"string\">\"星期四\"</span>,<span class=\"string\">\"星期五\"</span>,<span class=\"string\">\"星期六\"</span>&#125;; <span class=\"comment\">//注意这里week[0] 为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> week[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDay</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i &gt; <span class=\"number\">9</span> ? <span class=\"string\">\"\"</span> + i:<span class=\"string\">\"0\"</span> + i;   <span class=\"comment\">//非两位数补0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#######执行结果############</span></span><br><span class=\"line\">当前详细时间 ： java.util.GregorianCalendar[time=<span class=\"number\">1566785857554</span>,areFieldsSet=<span class=\"keyword\">true</span>,areAllFieldsSet=<span class=\"keyword\">true</span>,lenient=<span class=\"keyword\">true</span>,zone=sun.util.calendar.ZoneInfo[id=<span class=\"string\">\"Asia/Shanghai\"</span>,offset=<span class=\"number\">28800000</span>,dstSavings=<span class=\"number\">0</span>,useDaylight=<span class=\"keyword\">false</span>,transitions=<span class=\"number\">29</span>,lastRule=<span class=\"keyword\">null</span>],firstDayOfWeek=<span class=\"number\">1</span>,minimalDaysInFirstWeek=<span class=\"number\">1</span>,ERA=<span class=\"number\">1</span>,YEAR=<span class=\"number\">2019</span>,MONTH=<span class=\"number\">7</span>,WEEK_OF_YEAR=<span class=\"number\">35</span>,WEEK_OF_MONTH=<span class=\"number\">5</span>,DAY_OF_MONTH=<span class=\"number\">26</span>,DAY_OF_YEAR=<span class=\"number\">238</span>,DAY_OF_WEEK=<span class=\"number\">2</span>,DAY_OF_WEEK_IN_MONTH=<span class=\"number\">4</span>,AM_PM=<span class=\"number\">0</span>,HOUR=<span class=\"number\">10</span>,HOUR_OF_DAY=<span class=\"number\">10</span>,MINUTE=<span class=\"number\">17</span>,SECOND=<span class=\"number\">37</span>,MILLISECOND=<span class=\"number\">554</span>,ZONE_OFFSET=<span class=\"number\">28800000</span>,DST_OFFSET=<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2019</span> <span class=\"number\">8</span> <span class=\"number\">26</span> <span class=\"number\">2</span></span><br><span class=\"line\">星期一</span><br><span class=\"line\"></span><br><span class=\"line\">当前月中的天数 : <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"number\">2018</span>年<span class=\"number\">8</span>月<span class=\"number\">29</span>日</span><br><span class=\"line\"></span><br><span class=\"line\">请输入一个年份判断是闰年还是平年: <span class=\"number\">2088</span></span><br><span class=\"line\"><span class=\"number\">2088</span>年是润年</span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}