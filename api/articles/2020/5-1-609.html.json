{"title":"4.Go语言项目操作之NSQ分布式消息队列实践","slug":"编程世界/Go/Extension/4.Go语言项目操作之NSQ分布式消息队列实践","date":"2020-05-01T03:16:58.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2020/5-1-609.html","path":"api/articles/2020/5-1-609.html.json","covers":["https://img.weiyigeek.top/2021/5/20211228145438.png","https://img.weiyigeek.top/2021/5/20211228145803.gif","https://img.weiyigeek.top/2021/5/20211228103638.png","https://img.weiyigeek.top/2021/5/20211228103751.png","https://img.weiyigeek.top/2021/5/20211228145801.png","https://img.weiyigeek.top/2021/5/20211228115249.png","https://img.weiyigeek.top/2021/5/20211228212934.png","https://img.weiyigeek.top/2021/5/20211228220403.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Go语言项目操作之NSQ分布式消息队列实践\"><a href=\"#0x00-Go语言项目操作之NSQ分布式消息队列实践\" class=\"headerlink\" title=\"0x00 Go语言项目操作之NSQ分布式消息队列实践\"></a>0x00 Go语言项目操作之NSQ分布式消息队列实践</h2><p>描述: 目前比较流行的一个分布式的消息队列是<code>RabbitMQ、ZeroMQ、Kafka(大项目中推荐)、NSQ</code>，本章将着重介绍 NSQ 基础概念、安装部署及Go语言如何操作NSQ分布式消息队列，因为NSQ是采用Go语言进行开发使用的。</p>\n<h3 id=\"NSQ-快速了解\"><a href=\"#NSQ-快速了解\" class=\"headerlink\" title=\"NSQ 快速了解\"></a>NSQ 快速了解</h3><p><strong>Q: 什么是NSQ?</strong><br>答: NSQ 是一个基于Go语言的分布式实时消息平台, 具有分布式，易于水平扩展，易于安装，易于集成（主流语言都有对应的客户端库）的特点。</p>\n<p><strong>其主要核心概念</strong></p>\n<ul>\n<li>Topic： 在生产者publish时会创建topic，一个topic就是程序发布消息的一个逻辑键。</li>\n<li>Channels： 通道组与消费者相关，是消费者之间的负载均衡，channel在某种意义上来说是一个“队列”。每当一个发布者发送一条消息到一个topic，消息会被复制到所有消费者连接的channel上，消费者通过这个特殊的channel读取消息，实际上，在消费者第一次订阅时就会创建channel。（Channel会将消息进行排列，如果没有消费者读取消息，消息首先会在内存中排队，当量太大时就会被保存到磁盘中）</li>\n<li>Messages: 消息构成了我们数据流的中坚力量，消费者可以选择结束消息，表明它们正在被正常处理，或者重新将他们排队待到后面再进行处理。每个消息包含传递尝试的次数，当消息传递超过一定的阀值次数时，我们应该放弃这些消息，或者作为额外消息进行处理。</li>\n</ul>\n<p><strong>NSQ 的优势</strong>：</p>\n<ul>\n<li>安装运行简单: 易于配置和部署，并且内置了管理界面。</li>\n<li>协议简单: NSQ 支持多种语言客户端接入，其有一个快速的二进制协议，通过短短的几天工作量就可以很简单地实现这些协议，我们还自己创建了我们的纯JS驱动（当时只存在coffeescript驱动）</li>\n<li>在线扩容：NSQ 支持横向扩展，没有任何集中式代理。</li>\n<li>分布式 : 提倡分布式和分散的拓扑，没有单点故障，支持容错和高可用性，并提供可靠的消息交付保证</li>\n</ul>\n<p><strong>NSQ 的特性</strong>：</p>\n<ul>\n<li>持久化模式方案: 采用的方式时内存+硬盘的模式，当内存到达一定程度时就会将数据持久化到硬盘, 如果设置了<code>--mem-queue-size=0</code>则所有的消息将会存储到磁盘。</li>\n<li>队列中的每条消息至少传递一次。</li>\n<li>队列中消息不保证有序的。</li>\n</ul>\n<p><br/></p>\n<p><strong>NSQ 四个重要组件构成</strong>：<br>(1) <code>nsqd</code>：一个负责接收、排队、转发消息到客户端的守护进程，它可以独立运行，不过通常它是由 nsqlookupd 实例所在集群配置的, 其默认监听端口<code>4150</code>和<code>4151</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nsqd 简单启动示例</span></span><br><span class=\"line\">./nsqd -broadcast-address=192.168.1.2:4160</span><br><span class=\"line\">  <span class=\"comment\"># -broadcast-address 配置广播地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果是在搭配nsqlookupd使用的模式下需要还指定nsqlookupd地址，如果是部署了多个nsqlookupd节点的集群，那还可以指定多个-lookupd-tcp-address。</span></span><br><span class=\"line\">./nsqd -broadcast-address=192.168.1.2 -lookupd-tcp-address=192.168.1.2:4160</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p><code>nsqlookupd</code>：管理拓扑信息并提供最终一致性的发现服务的守护进程,值得注意其数据并不是持久化保存,也不需要与任何其他nsqlookupd实例协调以满足查询, 因此根据你系统的冗余要求尽可能多地部署nsqlookupd节点(通常三个), 其默认监听端口<code>4160</code>和<code>4161</code>。</p>\n</li>\n<li><p><code>nsqadmin</code>：它是一套实时监控集群状态、执行各种管理任务的Web管理平台, 默认监听端口<code>4171</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 nsqadmin 示例</span></span><br><span class=\"line\">./nsqadmin -lookupd-http-address=192.168.1.2:4161</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>utilities</code>：常见基础功能、数据流处理工具，如 <code>nsq_stat、nsq_tail、nsq_to_file、nsq_to_http、nsq_to_nsq、to_nsq</code></p>\n</li>\n</ul>\n<p><br/></p>\n<p><strong>NSQ 架构及其工作模式</strong><br>我们首先开看NSQ工作模式图，值得非常注意的一点就是在非集群模式下可以直接连接指定的nsqd, 而集群模式下则通过nsqlookup查询到nsqd地址再连接。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228145438.png\" alt=\"WeiyiGeek.NSQ工作模式\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NSQ工作模式</p>\n            </figure>\n<p>上图中每个nsqd实例旨在一次处理多个数据流, 该数据流称为”topics”,并且topic与channels是1对多的关系, 每个channel都会收到topic所有消息的副本，实际上下游的服务是通过对应的channel来消费topic消息。</p>\n<ul>\n<li>topic 在首次使用时创建，方法是将其发布到指定topic，或者订阅指定topic上的channel</li>\n<li>channel 是通过订阅指定的channel在第一次使用时创建的。</li>\n</ul>\n<p>topic 和 channel 都相互独立地缓冲数据，防止缓慢的消费者导致其他chennel的积压（同样适用于topic级别），但是channel可以并且通常会连接多个客户端。</p>\n<p>假设所有连接的客户端都处于准备接收消息的状态，则每条消息将被传递到随机客户端，如下图所示:</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228145803.gif\" alt=\"WeiyiGeek.NSQ工作模式\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NSQ工作模式</p>\n            </figure>\n<p>总而言之消息是<code>从topic -&gt; channel</code>（每个channel接收该topic的所有消息的副本）多播的，但是从<code>channel -&gt; consumers</code>均匀分布（每个消费者接收该channel的一部分消息）。</p>\n<p><br/></p>\n<p><strong>NSQ 消息队列的应用场景</strong><br>(1) 异步处理: 我们可以利用消息队列把业务流程中的非关键流程异步化，从而显著降低业务请求的响应时间。 </p>\n<p><img src=\"https://img.weiyigeek.top/2021/5/20211228103638.png\" alt=\"WeiyiGeek.异步处理\"></p>\n<p>(2) 应用解耦: 通过使用消息队列将不同的业务逻辑解耦，降低系统间的耦合，提高系统的健壮性，后续有其他业务要使用订单数据可直接订阅消息队列，提高系统的灵活性。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228103751.png\" alt=\"WeiyiGeek.应用解耦\" title=\"\" class=\"\">\n                <p>WeiyiGeek.应用解耦</p>\n            </figure>\n<p>(3) 流量削峰: 在类似秒杀（大秒）等场景下，某一时间可能会产生大量的请求，使用消息队列能够为后端处理请求提供一定的缓冲区，保证后端服务的稳定性，例如:<code>秒杀请求 --Write--&gt; 消息队列 --根据规则读取--&gt; 请求处理。</code></p>\n<p>(4) 消息通信: 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯, 例如实现点对点消息队列，或者聊天室进行消息发布和接收等。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # 点对点</span></span><br><span class=\"line\">客户端A --&gt;&gt; 消息队列 &lt;&lt;-- 客户端B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 聊天室订阅主题进行消息发布和接收</span></span><br><span class=\"line\">客户端A &lt;&lt;--&gt;&gt; 消息队列 &lt;&lt;--&gt;&gt; 客户端B</span><br></pre></td></tr></table></figure></p>\n<p>例如: NSQ接收和发送消息流程如下图所示。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228145801.png\" alt=\"WeiyiGeek.NSQ接收和发送消息流程\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NSQ接收和发送消息流程</p>\n            </figure>\n<p><br/></p>\n<p><strong>附录补充</strong></p>\n<p>NSQ 官网地址: <a href=\"https://nsq.io/\" target=\"_blank\" rel=\"noopener\">https://nsq.io/</a></p>\n<p><br></p>\n<h3 id=\"NSQ-安装配置\"><a href=\"#NSQ-安装配置\" class=\"headerlink\" title=\"NSQ 安装配置\"></a>NSQ 安装配置</h3><p>从NSQ官方下载页面(<a href=\"https://nsq.io/deployment/installing.html)\" target=\"_blank\" rel=\"noopener\">https://nsq.io/deployment/installing.html)</a>, 根据自己的平台下载并解压到指定目录, 然后设置环境变量即可。</p>\n<p><strong>此处使用Docker方式安装部署测试</strong><br>实践环境说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --version</span><br><span class=\"line\">Docker version 19.03.15, build 99e3ed8919</span><br><span class=\"line\">$ docker-compose --version</span><br><span class=\"line\">docker-compose version 1.25.0, build unknown</span><br><span class=\"line\"></span><br><span class=\"line\">nsq v1.2.1</span><br></pre></td></tr></table></figure></p>\n<p>步骤01.首先创建一个 docker-compose.yml 存放了容器运行配置清单。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意操作系统中是否安装 docker-compose, 如没有安装请执行yum或者apt安装即可。</span></span><br><span class=\"line\">$ vim docker-compose.yml</span><br><span class=\"line\">version: <span class=\"string\">'2'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  nsqlookupd:</span><br><span class=\"line\">    container_name: nsqlookupd</span><br><span class=\"line\">    image: nsqio/nsq</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: /nsqlookupd</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"4160:4160\"</span></span><br><span class=\"line\">      - <span class=\"string\">\"4161:4161\"</span></span><br><span class=\"line\">  nsqd:</span><br><span class=\"line\">    image: nsqio/nsq</span><br><span class=\"line\">    container_name: nsqd</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: /nsqd --lookupd-tcp-address=nsqlookupd:4160</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"4150:4150\"</span></span><br><span class=\"line\">      - <span class=\"string\">\"4151:4151\"</span></span><br><span class=\"line\">  nsqadmin:</span><br><span class=\"line\">    image: nsqio/nsq</span><br><span class=\"line\">    container_name: nsqadmin</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: /nsqadmin --lookupd-http-address=nsqlookupd:4161</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"4171:4171\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips:从 上面的docker-compose.yml文件可以看到 <code>nsqd服务</code> 需要注册到 nsqlookupd 的 4160 端口, 而 <code>nsqadmin服务</code> 需要注册到 nsqlookupd 的 4161 端口</p>\n<p>步骤02.在该yml文件同级目录下执行如下命令进行创建并后台运行容器。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose up -d</span><br><span class=\"line\">  <span class=\"comment\"># Creating network \"docker_default\" with the default driver</span></span><br><span class=\"line\">  <span class=\"comment\"># Creating nsqd       ... done</span></span><br><span class=\"line\">  <span class=\"comment\"># Creating nsqadmin   ... done</span></span><br><span class=\"line\">  <span class=\"comment\"># Creating nsqlookupd ... done</span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">  <span class=\"comment\"># CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                            NAMES</span></span><br><span class=\"line\">  <span class=\"comment\"># 6ff1c7b396fe        nsqio/nsq           \"/nsqadmin --lookupd…\"   8 seconds ago       Up 6 seconds        4150-4151/tcp, 4160-4161/tcp, 4170/tcp, 0.0.0.0:4171-&gt;4171/tcp   nsqadmin</span></span><br><span class=\"line\">  <span class=\"comment\"># 33eeda6384e5        nsqio/nsq           \"/nsqlookupd\"            8 seconds ago       Up 6 seconds        4150-4151/tcp, 4170-4171/tcp, 0.0.0.0:4160-4161-&gt;4160-4161/tcp   nsqlookupd</span></span><br><span class=\"line\">  <span class=\"comment\"># ae4830fd10e1        nsqio/nsq           \"/nsqd --lookupd-tcp…\"   8 seconds ago       Up 6 seconds        4160-4161/tcp, 0.0.0.0:4150-4151-&gt;4150-4151/tcp, 4170-4171/tcp   nsqd</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤03.访问nsqadmin提供的消息队列监控的Web管理平台 <a href=\"http://10.10.107.225:4171/lookup。\" target=\"_blank\" rel=\"noopener\">http://10.10.107.225:4171/lookup。</a></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228115249.png\" alt=\"WeiyiGeek.nsqadmin-Web管理平台\" title=\"\" class=\"\">\n                <p>WeiyiGeek.nsqadmin-Web管理平台</p>\n            </figure>\n<p>至此安装完毕，通过docker来部署NSQ是非常简单的。</p>\n<p><br/></p>\n<h3 id=\"NSQ-实践操作\"><a href=\"#NSQ-实践操作\" class=\"headerlink\" title=\"NSQ 实践操作\"></a>NSQ 实践操作</h3><h4 id=\"1-go-nsq-安装\"><a href=\"#1-go-nsq-安装\" class=\"headerlink\" title=\"1.go-nsq 安装\"></a>1.go-nsq 安装</h4><p>描述: NSQ官方为了开发者提供了Go语言版的客户端<code>go-nsq</code>(<a href=\"https://github.com/nsqio/go-nsq)，更多客户端支持请查看CLIENT\" target=\"_blank\" rel=\"noopener\">https://github.com/nsqio/go-nsq)，更多客户端支持请查看CLIENT</a> LIBRARIES(<a href=\"https://nsq.io/clients/client_libraries.html)。\" target=\"_blank\" rel=\"noopener\">https://nsq.io/clients/client_libraries.html)。</a></p>\n<p><strong>go-nsq库安装命令如下所示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  src <span class=\"built_in\">cd</span> weiyigeek.top                           </span><br><span class=\"line\">➜  weiyigeek.top go get -u github.com/nsqio/go-nsq</span><br><span class=\"line\">  <span class=\"comment\"># go: downloading github.com/nsqio/go-nsq v1.1.0</span></span><br><span class=\"line\">  <span class=\"comment\"># go: downloading github.com/golang/snappy v0.0.1</span></span><br><span class=\"line\">  <span class=\"comment\"># go: downloading github.com/golang/snappy v0.0.4</span></span><br><span class=\"line\">  <span class=\"comment\"># go get: added github.com/golang/snappy v0.0.4</span></span><br><span class=\"line\">  <span class=\"comment\"># go get: added github.com/nsqio/go-nsq v1.1.0</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"2-go-nsq-简单使用\"><a href=\"#2-go-nsq-简单使用\" class=\"headerlink\" title=\"2.go-nsq 简单使用\"></a>2.go-nsq 简单使用</h4><p><strong>生产者Producer</strong><br>简单的生产者示例代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// studygo/Day09/NSQ/demo1/producer.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"bufio\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"strings\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"github.com/nsqio/go-nsq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NSQ Producer(生产者)示例演示</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Producer *nsq.Producer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> NsqProducer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  nsqd_host <span class=\"keyword\">string</span></span><br><span class=\"line\">  nsqd_port <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化NSQ生产者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(NP NsqProducer)</span> <span class=\"title\">InitProducer</span><span class=\"params\">()</span> <span class=\"params\">(*nsq.Producer, error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// NewConfig返回一个新的默认nsq配置。</span></span><br><span class=\"line\">  config := nsq.NewConfig()</span><br><span class=\"line\">  <span class=\"comment\">// 组合nsqd服务连接地址。</span></span><br><span class=\"line\">  nsqdAddr := fmt.Sprintf(<span class=\"string\">\"%s:%d\"</span>, NP.nsqd_host, NP.nsqd_port)</span><br><span class=\"line\">  Producer, err := nsq.NewProducer(nsqdAddr, config)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"create producer failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Producer, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.实例化以及初始化</span></span><br><span class=\"line\">  nsqd := &amp;NsqProducer&#123;</span><br><span class=\"line\">    nsqd_host: <span class=\"string\">\"10.10.107.225\"</span>,</span><br><span class=\"line\">    nsqd_port: <span class=\"number\">4150</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Producer, err := nsqd.InitProducer()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Init producer failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"Init Producer success!\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.从标准输入读取</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"请输入你要向Topic_Demo消息队列传递的消息:\"</span>)</span><br><span class=\"line\">  reader := bufio.NewReader(os.Stdin)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    data, err := reader.ReadString(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"read string from stdin failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data = strings.TrimSpace(data)</span><br><span class=\"line\">    <span class=\"comment\">// 3.当前输入Q或者q时退出程序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> strings.ToUpper(data) == <span class=\"string\">\"Q\"</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.向 'Topic_Demo' publish 数据</span></span><br><span class=\"line\">    err = Producer.Publish(<span class=\"string\">\"Topic_Demo\"</span>, []<span class=\"keyword\">byte</span>(data))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"publish msg to nsq failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br/></p>\n<p><strong>消费者-Consumer</strong><br>简单的消费者示例代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os/signal\"</span></span><br><span class=\"line\">  <span class=\"string\">\"syscall\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  nsq <span class=\"string\">\"github.com/nsqio/go-nsq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NSQ Consumer(消费者) 示例演示</span></span><br><span class=\"line\"><span class=\"comment\">// NsqConsumer 是一个消费者类型结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NsqConsumer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Title <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HandleMessage 是需要实现的处理消息的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *NsqConsumer)</span> <span class=\"title\">HandleMessage</span><span class=\"params\">(msg *nsq.Message)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%s : recv from %v, msg:%v\\n\"</span>, m.Title, msg.NSQDAddress, <span class=\"keyword\">string</span>(msg.Body))</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化Consumer消费者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(NC *NsqConsumer)</span> <span class=\"title\">InitConsumer</span><span class=\"params\">(topic <span class=\"keyword\">string</span>, channel <span class=\"keyword\">string</span>, address <span class=\"keyword\">string</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.NewConfig返回一个新的默认nsq配置</span></span><br><span class=\"line\">  config := nsq.NewConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.查找轮询间隔此处设置15s</span></span><br><span class=\"line\">  config.LookupdPollInterval = <span class=\"number\">15</span> * time.Second</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.NewConsumer为指定的主题/频道创建新的Consumer实例</span></span><br><span class=\"line\">  c, err := nsq.NewConsumer(topic, channel, config)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"create consumer failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.AddHandler为此使用者接收的消息设置处理程序，可以多次调用该函数以添加其他处理程序，注意其必须放在连接NSQD和NSQLOOKUP前。</span></span><br><span class=\"line\">  c.AddHandler(NC)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 5.两种方式连接到NSQD</span></span><br><span class=\"line\">  <span class=\"comment\">// if err := c.ConnectToNSQD(address); err != nil &#123;   // 直接连NSQD，tcp长连接</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := c.ConnectToNSQLookupd(address); err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// 通过lookupd查询连NSQD，更易于分布式容错和高可用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实例化消费者</span></span><br><span class=\"line\">  consumer := &amp;NsqConsumer&#123;</span><br><span class=\"line\">    Title: <span class=\"string\">\"NSQ_USE\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化连接NSQD进行获取消息队列中的值</span></span><br><span class=\"line\">  err := consumer.InitConsumer(<span class=\"string\">\"Topic_Demo\"</span>, <span class=\"string\">\"channel_first\"</span>, <span class=\"string\">\"10.10.107.225:4161\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"init consumer failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个信号的通道</span></span><br><span class=\"line\">  c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal)</span><br><span class=\"line\">  <span class=\"comment\">// 转发键盘中断信号到c</span></span><br><span class=\"line\">  signal.Notify(c, syscall.SIGINT)</span><br><span class=\"line\">  <span class=\"comment\">// 通道输出消息队列中的值阻塞</span></span><br><span class=\"line\">  &lt;-c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果: 从结果可以看到当开启多个消费者时会一个发送一次消息队列中的信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生产者</span></span><br><span class=\"line\">➜  demo1 go run .</span><br><span class=\"line\">2021/12/28 21:09:40 Init Producer success!</span><br><span class=\"line\">请输入你要向Topic_Demo消息队列传递的消息:</span><br><span class=\"line\">Whoami</span><br><span class=\"line\">2021/12/28 21:21:04 INF    1 (10.10.107.225:4150) connecting to nsqd</span><br><span class=\"line\">WeiyiGeek</span><br><span class=\"line\">...</span><br><span class=\"line\">topic测试</span><br><span class=\"line\">2021/12/28 21:21:56 INF    1 (10.10.107.225:4150) connecting to nsqd</span><br><span class=\"line\">channel</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者01</span></span><br><span class=\"line\">➜  demo2 go run .</span><br><span class=\"line\">2021/12/28 21:21:37 INF    1 [Topic_Demo/channel_first] (ae4830fd10e1:4150) connecting to nsqd</span><br><span class=\"line\">NSQ_USE : recv from ae4830fd10e1:4150, msg:Whoami</span><br><span class=\"line\">NSQ_USE : recv from ae4830fd10e1:4150, msg:WeiyiGeek</span><br><span class=\"line\">NSQ_USE : recv from ae4830fd10e1:4150, msg:topic测试</span><br><span class=\"line\">NSQ_USE : recv from ae4830fd10e1:4150, msg:channel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者02</span></span><br><span class=\"line\">➜  demo2 go run .</span><br><span class=\"line\">2021/12/28 21:22:19 INF    1 [Topic_Demo/channel_first] querying nsqlookupd http://10.10.107.225:4161/lookup?topic=Topic_Demo</span><br><span class=\"line\">2021/12/28 21:22:19 INF    1 [Topic_Demo/channel_first] (ae4830fd10e1:4150) connecting to nsqd</span><br><span class=\"line\">NSQ_USE : recv from ae4830fd10e1:4150, msg:<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228212934.png\" alt=\"WeiyiGeek.Producer与Consumer实践\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Producer与Consumer实践</p>\n            </figure></p>\n<p>Tips: 在客户端执行是如果采用ConnectToNSQLookupd方法即通过lookupd查询连NSQD，需要在hosts绑定对应的容器hostname和宿主机地址（粗暴解决）。例如此处<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /etc/hosts            </span><br><span class=\"line\">127.0.0.1       localhost</span><br><span class=\"line\">127.0.1.1       Ubuntu-PC</span><br><span class=\"line\">10.10.107.225 ae4830fd10e1</span><br></pre></td></tr></table></figure></p>\n<p>Tips: 此处我们可以通过<code>nsqdadmin</code>提供的Web页面查看到我们Publish的topic，以及我们生产者向队列传递的值，和消费者从通道中接收到的值，点击页面上的Topic_Demo就能进入一个展示更多详细信息的页面, 而在<code>/counter</code>页面显示处理的消息数量。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211228220403.png\" alt=\"WeiyiGeek.Topic&Channel查看\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Topic&Channel查看</p>\n            </figure>\n<p>Tips: 在<code>/lookup</code>界面支持创建topic和channel, 这是提供了一种在将服务部署到生产环境之前设置流层次结构的方法, 如果频道名称为空，则只创建主题。</p>\n<p><br></p>\n<h4 id=\"3-go-nsq-直连方式\"><a href=\"#3-go-nsq-直连方式\" class=\"headerlink\" title=\"3.go-nsq 直连方式\"></a>3.go-nsq 直连方式</h4><p>描述: 上面实践了通过nsqlookupd的http接口查询后长连接到nsqd, 本节将简单演示直连nsqd（tcp长连接）写法。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/nsqio/go-nsq\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">go</span> startConsumer()</span><br><span class=\"line\">  startProducer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> url <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//nsqd 服务具体ip,端口根据实际情况传入或者修改默认配置, 写入和获取都是采用同一个。</span></span><br><span class=\"line\">  flag.StringVar(&amp;url, <span class=\"string\">\"url\"</span>, <span class=\"string\">\"10.10.107.225:4150\"</span>, <span class=\"string\">\"nsqd\"</span>)</span><br><span class=\"line\">  flag.Parse()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生产者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startProducer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    cfg := nsq.NewConfig()</span><br><span class=\"line\">    producer, err := nsq.NewProducer(url, cfg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 发布指定的消息</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := producer.Publish(<span class=\"string\">\"DirectConnection\"</span>, []<span class=\"keyword\">byte</span>(<span class=\"string\">\"test message\"</span>)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          log.Fatal(<span class=\"string\">\"publish error: \"</span> + err.Error())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">startConsumer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    cfg := nsq.NewConfig()</span><br><span class=\"line\">    consumer, err := nsq.NewConsumer(<span class=\"string\">\"DirectConnection\"</span>, <span class=\"string\">\"first\"</span>, cfg)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置消息处理函数</span></span><br><span class=\"line\">    consumer.AddHandler(nsq.HandlerFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(message *nsq.Message)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        log.Println(<span class=\"keyword\">string</span>(message.Body))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"comment\">// 连接到单例nsqd</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := consumer.ConnectToNSQD(url); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;-consumer.StopChan</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此完毕！</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}