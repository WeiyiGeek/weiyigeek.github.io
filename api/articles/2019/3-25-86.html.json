{"title":"MYSQL主从同步(DBA)配置.md","slug":"数据存储/Database-运维/MySQL/运维实战/MYSQL主从同步(DBA)配置","date":"2019-03-25T06:34:30.000Z","updated":"2023-01-31T02:29:07.993Z","url":"2019/3-25-86.html","path":"api/articles/2019/3-25-86.html.json","covers":["https://img.weiyigeek.top/2019/20190405170936.png","https://img.weiyigeek.top/2019/20190405171116.png","https://img.weiyigeek.top/2019/20190405171636.png","https://img.weiyigeek.top/2019/20190405171949.png","https://img.weiyigeek.top/2019/20190405172145.png","https://img.weiyigeek.top/2019/20190405172348.png","https://img.weiyigeek.top/2019/20190405173003.png","https://img.weiyigeek.top/2019/20190405182638.png","https://img.weiyigeek.top/2019/20190405182648.png","https://img.weiyigeek.top/2019/2019032502.png","https://img.weiyigeek.top/2019/2019032503.png","https://img.weiyigeek.top/2019/2019032501.png","https://img.weiyigeek.top/2019/2019032501.png","https://img.weiyigeek.top/2019/20190405184212.png","https://img.weiyigeek.top/2019/20190405192010.png","https://img.weiyigeek.top/2019/20190405173832.png","https://img.weiyigeek.top/2019/20190405182331.png"],"content":"<p>[TOC]</p>\n<h4 id=\"文章目录\"><a href=\"#文章目录\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h4><p>(1) 主从介绍<br>(2) 主从架构</p>\n<a id=\"more\"></a>\n<h5 id=\"1-主从介绍\"><a href=\"#1-主从介绍\" class=\"headerlink\" title=\"(1)主从介绍\"></a>(1)主从介绍</h5><p><strong>Q：为啥要引入主从同步机制？</strong><br>A：防止业务数据库突然宕掉，不能快速的恢复业务正常运行，有利于数据库架构的健壮性，提升访问速度，方便运维保证的数据物理安全(容灾备份)；</p>\n<p><em>引入普通文件的同步的方法：</em><br>1.NFS网络文件共享同步<br>2.samba共享数据同步<br>3.定时任务+rsync/scp/git/svn<br>4.常用inotify和rsync触发实时数据同步<br>5.FTP/SFTP数据同步<br>6.不常用：http、sersync、csync2(多向)，union(双向)；</p>\n<p><em>总结数据同步方案：</em></p>\n<ol>\n<li>文件级别的同步方案<br>文件级别也可以利用mysql，mongdb等数据库软件<br>多台服务器同时写入数据，双写就是一个同步机制。</li>\n<li>文件系统级别同步<br>drbd(基于文件系统同步网络RAID1)，同步所有的业务(Oracle数据库常常这样干)<br>mysql数据库的官方推荐drbd同步数据，所有的单点的服务器都能利用其同步；</li>\n<li>数据库同步机制<br>自身同步机制： mysql replication(mysql主从复制|逻辑的SQL从写)，ORACLE DATAGUARD(物理的磁盘块|逻辑的SQL从写)<br>第三方DRDB，百度即可；</li>\n</ol>\n<p><br></p>\n<h5 id=\"2-主从架构\"><a href=\"#2-主从架构\" class=\"headerlink\" title=\"(2)主从架构\"></a>(2)主从架构</h5><p>描述：MySQL支持单向、双向、环状、链式级联，实时，异步复制，同步复制(半同步插件-Google)；在当前的大多数Mysql应用中都是异步复制方式，即不是严格的实时的数据同步；</p>\n<p>在DMZ区中，一台服务器充当主服务器(Master)，而一个或者多个充当从服务器(Slave)<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405170936.png\" alt=\"WeiyiGeek.主从架构\" title=\"\" class=\"\">\n                <p>WeiyiGeek.主从架构</p>\n            </figure></p>\n<p>主从复制常见架构：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单向 M=&gt;S</span><br><span class=\"line\">双向主主 M &lt;===&gt; M</span><br><span class=\"line\">链式级联复制 A-&gt;B-&gt;C-&gt;D</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">集群高可用架构 类似 内存数据库(memcache), 进行分布式数据HASH存储，采用DBPOROXY进行将用户的请求根据算法选择最优的存储(采用HASH进行取模的值进行判断到底在哪一个数据库中) <span class=\"comment\">#2014百度使用的</span></span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405171116.png\" alt=\"WeiyiGeek.主从架构选择\" title=\"\" class=\"\">\n                <p>WeiyiGeek.主从架构选择</p>\n            </figure></p>\n<p><em>实时和异步：</em><br>当配置好主从复制后，所有对数据库内容的操作就必须在主服务器上进行，以避免用户对主服务器上数据库内容更新对从服务器上的数据库内容的更新不一致而导致发生冲突，从服务器一般都是进行读；</p>\n<p>防止数据写从库的方法：</p>\n<ul>\n<li>方法1：采取忽略授权表方式的同步，然后对从服务器上面的用户仅仅授权select读权限，(注意不要同步mysql库，防止自读权限被更改)</li>\n<li>方法2：在slave服务器启动选项中增加参数或者在my.cnf配置文件中加入read-only参数(启动选项加入也可以)，该参数可以让slave服务器只允许来着slave服务器线程和具有SUPER权限的用户进行更新，确保不接受来着普通用户的更新；(当然方法1和方法2可以一起使用)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">实现方法：复制环境用户的授权：</span></span><br><span class=\"line\">写库 blog  10.0.0.7</span><br><span class=\"line\">读库 blog  10.0.0.8</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Master 生产环境主库用户授权 (建议实际用到什么权限分配什么权限)</span></span><br><span class=\"line\">GRANT SELECT,INSERT,UPDATE,DELETE ON `blog`.* TO 'blog'@'10.0.0.%' identified by 'oldboy456';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Slave 生产环境用户授权</span></span><br><span class=\"line\">GRANT SELECT ON `blog`.* TO 'blog'@'10.0.0.%' identified by 'oldboy456';</span><br><span class=\"line\">REVOKE INSERT,UPDATE,DELETE ON `blog`.* FROM 'blog'@'10.0.0.%';     #建议结合--read-**only**</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">最后需要在主库配置中加上：binlog-ignore-db=mysql</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"3-主从应用场景\"><a href=\"#3-主从应用场景\" class=\"headerlink\" title=\"(3)主从应用场景\"></a>(3)主从应用场景</h5><ol>\n<li>主从服务器互为备份：当主服务器出现问题时候，我们可以从人工或者自动的方法切换到从服务器中；(需要注意误操作)</li>\n<li>主从服务器读写分离：通过程序实现读写分离(PHP，java，推荐：性能，效率最佳)或代理软件(MYSQL-PROXY，amoeba)对用户(客户端)的请求读写分离；降低用户查询响应时间以及读写同时在主服务器对于更新，将update，insert，delete交给Master服务器；门户网站常用分布式dbproxy(读写分离，hash负载均衡，健康检查)</li>\n<li>根据服务器拆分业务独立并分担压力：有为外部用户提供查询服务的从服务器，有DBA用来备份的从服务器，还有供公司内部人员访问的后台；</li>\n</ol>\n<p><img src=\"https://img.weiyigeek.top/2019/20190405171636.png\" alt=\"WeiyiGeek.主从应用场景\"></p>\n<p><br></p>\n<h5 id=\"4-主从原理\"><a href=\"#4-主从原理\" class=\"headerlink\" title=\"(4)主从原理\"></a>(4)主从原理</h5><p>MySQL Replication 主从复制同步流程：</p>\n<ol>\n<li>Slave服务器上执行start slave 开启主从开关；</li>\n<li>Slave服务器IO线程通过Master授权用户权限连接Master服务器，并请求BInlog文件名称与请求POS位置(日志名和位置在配置主从服务 change master命令指定)</li>\n<li>Master服务器收到从服务器IO线程请求后如果BINLOG存在变化，则在指定的binlog文件中读取指定的位置的Binlog信息，发送给Slave的IO线程；</li>\n<li>Slave服务器IO线程接收到Master服务器IO线程发送日志内容以及日志文件名称和位置点以后，Slave依次将内容写入自身RelayLog(中继日志)，同时将本次Binlog文件名称与位置写在Msater.info中，以便下次发送给Matser服务器；</li>\n<li>Slave服务器端的SQL线程会实时的检测本地的RelayLog变化，及时把Log文件中的内容解析成为SQL语句(导致 =&gt; 异步同步)，并且按照顺序执行这些SQL语句，应用完毕后清理应用后的日志；</li>\n<li>经过上面的流程，即Master端和Slave端执行了同样的SQL语句。</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405171949.png\" alt=\"WeiyiGeek.主从原理\" title=\"\" class=\"\">\n                <p>WeiyiGeek.主从原理</p>\n            </figure>\n<p>Master端原理图：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405172145.png\" alt=\"WeiyiGeek.Master端\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Master端</p>\n            </figure></p>\n<p>Slave端原理图：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405172348.png\" alt=\"WeiyiGeek.Master端\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Master端</p>\n            </figure></p>\n<p><em>总结与注意：</em><br>0) 主从复制是异步同步方式,通过逻辑同步模式,多种模式(混合模式),默认是通过SQL语句执行(M与S可能会不一致时间长了以后)<br>1) 主库通过记录BIN-LOG日志实现从库的同步,在设置主从同步前先将Master数据库复制到Slave数据库中，记录下初始的binlog文件名称与位置点, 需要确定同步前主从位置点相同一致的；   #biglog记录更新的SQL语句<br>2) 同步线程，在Slave服务器上有IO线程、SQL线程两个线程，在Master服务器上有IO线程；<br>3) 在Slave服务器上面配置主库的IP/user/pass/bin-file/bin-POS位置等等<br>4) 主库建立一个专用于主从复制的账号，并且打开Binlog功能；<br>5) 从库上开启同步开关Start Slave；<br>6) 从库的关键文件master.info(从库IO线程请求主库IO信息点),relay-log(从库读取主库发过来的bin-log并存入中级日志中),relay-info(从库SQL线程读取SQL语句写入数据库中)<br>7) 在主库中导出数据库mysqldump使用带–master-data=1备份的全备数据库恢复到从库时候,从库在CHANGE MASTER TO 不需要加log-file和log-pos;<br>8) 同步开启后需要注意检查同步状态及上面三个从库关键文件</p>\n<p><br></p>\n<h5 id=\"5-主从实战\"><a href=\"#5-主从实战\" class=\"headerlink\" title=\"(5)主从实战\"></a>(5)主从实战</h5><p>描述：使用一台服务器作为多实例数据库来讲解主从复制；<br>注意：一般做主从是在不同的机器上面实现，且监听端口默认都为3306，完成单数据库多实例的基础之上就可以按照上面的进行在不同的机器上完成；</p>\n<p>实验环境：<br>单机单数据库多实例环境下 Centos 6.x 环境<br>Master    192.168.1.107    3306    server-id = 1<br>Slave    192.168.1.107 3307    server-id = 2</p>\n<p>Step1.主库操作：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 3006 的 my.cnf</span></span><br><span class=\"line\">[mysqld]  #注意放置的模块</span><br><span class=\"line\">log-bin = /data/3306/binlog       #开启 binlog 参数 （在mysql show的时候是 log_bin ）</span><br><span class=\"line\">server-id = 3306       #设置server-id 为 3306 （避免实例ID和不同机器ID重复，一般常用IP地址的后8位表示(1-255)） -&gt; 0 &lt; server-id &lt; 2^32 -1  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> egrep <span class=\"string\">\"log-bin|server-id\"</span> /data/3306/my.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改后重新实例数据库</span></span><br><span class=\"line\">/data/3306/mysql restart </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看<span class=\"built_in\">log</span>-bin 是不是生效了 </span></span><br><span class=\"line\">mysql -uroot -p123@456. -S /data/3306/mysql.sock -e \"show variables like 'log_bin|server_id'\";</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| Variable_name | Value |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\">| log_bin       | ON    |</span><br><span class=\"line\">+---------------+-------+</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">建立主从复制账户</span></span><br><span class=\"line\"></span><br><span class=\"line\">grant replication slave on *.* to 'rep'@'%' IDENTIFIED BY 'System123@';   #replication slave是一个mysql权限 （mysql8.0又变化）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">mysql 8.0 主从账户</span></span><br><span class=\"line\">CREATE USER 'rep'@'%' IDENTIFIED WITH mysql_native_password BY 'System123@'; </span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* TO 'rep'@'%';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> flush privileges;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">加一个读锁（防止写东西进入） - 且mysql&gt;界面不能quit</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> flush tables with <span class=\"built_in\">read</span> lock; <span class=\"comment\"># 5.5 就是table 、 5.1是tables （注意区别）</span></span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在导出前拿到pos位置点（重要）</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show master status; </span></span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">| binlog.000003 |      588 |              |                  |                   |</span><br><span class=\"line\">+---------------+----------+--------------+------------------+-------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> show master logs;</span></span><br><span class=\"line\">+---------------+-----------+</span><br><span class=\"line\">| Log_name      | File_size |</span><br><span class=\"line\">+---------------+-----------+</span><br><span class=\"line\">| binlog.000001 |       177 |</span><br><span class=\"line\">| binlog.000002 |       421 |</span><br><span class=\"line\">| binlog.000003 |       588 |</span><br><span class=\"line\">+---------------+-----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">导出数据库将要灌入从库进行备份 （这时候读锁的界面是没有关闭的）</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">另外一种方式：记录下 FILE 及 Position 的值。将主服务器的数据文件（整个/opt/mysql/data目录）复制到从服务器，建议通过tar归档压缩后再传到从服务器解压。</span></span><br><span class=\"line\">mysqldump -uroot -p'System123@' -S /data/3306/mysql.sock -A -B --events --master-data=2 | gzip &gt;/opt/rep.sql.gz</span><br><span class=\"line\">mysqldump -uroot -p'System123@' -S /data/3306/mysql.sock -A -B --events --master-data=2 &gt;/opt/rep.sql #注意这里如果master-data 添为 1 的时候则下面可以不指定LOG_FILE,LOG_POS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭读锁</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> unlock tables;</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">打开主从同步后 （查看是否能不能同步）</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> create database demo;</span></span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure></p>\n<p>Step2.从库操作：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置 3007 的 my.cnf</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin = /data/3307/binlog       #开启 binlog 参数  (目录后都没 / )   #[开启 binlog 参数,可选,如果是链路主从复制的化]</span><br><span class=\"line\">server-id = 3307      #设置server-id 为 3307</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> egrep <span class=\"string\">\"log-bin|server-id\"</span> /data/3307/my.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 主库的数据库灌入从库：</span></span><br><span class=\"line\"> mysql -uroot -p'System123@' -S /data/3307/mysql.sock &lt; /opt/rep.sql</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">登录执行</span></span><br><span class=\"line\">mysql &gt; CHANGE MASTER TO MASTER_HOST='127.0.0.1',MASTER_PORT=3306,MASTER_USER='rep',MASTER_PASSWORD='System123@',MASTER_LOG_FILE='binlog.000006',MASTER_LOG_POS=760;</span><br><span class=\"line\">Query OK, 0 rows affected, 2 warnings (0.08 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开启复制</span></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> start slave;  <span class=\"comment\"># stop slave; 停止复制</span></span></span><br><span class=\"line\">Query OK, 0 rows affected (0.04 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看是否成功（主要参数）</span></span><br><span class=\"line\">show slave status \\G;</span><br><span class=\"line\">    Slave_IO_Running: yes</span><br><span class=\"line\">    Slave_SQL_Running: Yes</span><br><span class=\"line\">   Seconds_Behind_Master:0    #落后主库的秒数</span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">[root@WeiyiGeek 3307/data]# mysqlbinlog WeiyiGeek-relay-bin.000001</span><br><span class=\"line\">[root@WeiyiGeek data]# cat master.info</span><br><span class=\"line\">25</span><br><span class=\"line\">binlog.000003</span><br><span class=\"line\">588</span><br><span class=\"line\">10.0.2.15</span><br><span class=\"line\">rep</span><br><span class=\"line\">System1213@</span><br><span class=\"line\">3306</span><br><span class=\"line\">60  #重试时间</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\">[root@WeiyiGeek data]# cat relay-log.info</span><br><span class=\"line\">7</span><br><span class=\"line\">./WeiyiGeek-relay-bin.000001</span><br><span class=\"line\">4</span><br><span class=\"line\">binlog.000003</span><br><span class=\"line\">588   #POS 位置</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405173003.png\" alt=\"WeiyiGeek.主从实战\" title=\"\" class=\"\">\n                <p>WeiyiGeek.主从实战</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"6-主从三个线程状态\"><a href=\"#6-主从三个线程状态\" class=\"headerlink\" title=\"(6)主从三个线程状态\"></a>(6)主从三个线程状态</h5><p>描述:三个线程的状态以及状态说明;<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405182638.png\" alt=\"WeiyiGeek.master线程状态\" title=\"\" class=\"\">\n                <p>WeiyiGeek.master线程状态</p>\n            </figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">列出了主服务器的Binlog Dump线程的state列最常见的状态,如果没看见binlog线程则说明复制没有在运行，目前没有连接任何从服务器;</span></span><br><span class=\"line\">(1) send binlog event to slave : 线程已经从二进制日志读取了一个事件并且正将它发送打到从服务器中;</span><br><span class=\"line\">(2) Finished reading one binlog,switching to next binlog : 线程已经读完二进制文件并且正打开一个要发送到从服务器的日志服务器;</span><br><span class=\"line\">(3) Master has sent all binlog to slave; waiting for more updates : 线程已经从二进制日志中读取所以注意的更新并已经发送到从服务器;</span><br><span class=\"line\">(4) Waiting to finalize termination 线程停止时候发生的一个简单的状态;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405182648.png\" alt=\"WeiyiGeek.slave线程状态\" title=\"\" class=\"\">\n                <p>WeiyiGeek.slave线程状态</p>\n            </figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从服务器IO线程的state状态</span><br><span class=\"line\">(1) Connecting to master : 线程正试图连接主服务器。</span><br><span class=\"line\">(2) Checking master version : 建立同主服务器之间的连接后立即临时出现的状态。</span><br><span class=\"line\">(3) Registering slave on master : 建立同主服务器之间的连接后立即临时出现的状态。</span><br><span class=\"line\">(4) Requesting binlog dump : 建立同主服务器之间的连接后立即临时出现的状态。线程向主服务器发送一条请求，索取从请求的二进制日志文件名和位置开始的二进制日志的内容。</span><br><span class=\"line\">(5) Waiting to reconnect after a failed binlog dump request ：如果二进制日志转储请求失败（由于没有连接），线程进入睡眠状态，然后定期尝试重新连接。可以使用--master-connect-retry 选项指定重试之间的间隔。</span><br><span class=\"line\">(6) Reconnection after a failed binlog dump request ：线程正尝试重新连接主服务器</span><br><span class=\"line\">(7) Waiting for master to send event : 线程已经连接上主服务器，正等待二进制日志事件的到达,如果主服务器空闲,会持续较长的时间(如果等待持续slave_read_timeout秒,则发生超时重连)</span><br><span class=\"line\">(8) Queueing master event to thr relay log : 线程已经读取一个事件，正将它复制到中继日志中供SQL线程处理;</span><br><span class=\"line\">(9) Waiting to reconnect after a failed master event read :读取时候由于没有连接错误，线程企图重新连接将睡眠master-connet-retry秒；</span><br><span class=\"line\">(10) Reconnecting  after a failed master event read : 线程正尝试重新连接到主服务器中，当重新连接后，状态变为Waiting for master to send event;</span><br><span class=\"line\">(11) Waiting for the slave SQL thread to free enough relay log space; : 中继日志大小值超过设定的relay_log_space_limit的值,IO线程等待知道SQL线程处理中继日志内容并删除部分中继日志文件来是否足够的空间;</span><br><span class=\"line\">(12) Waiting for slave mutex on exit ： 线程停止时发生的一个简单的状态;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 从服务器SQL线程状态</span><br><span class=\"line\">(1) Reading event from the relay log; : 线程已经从中继日志读取一个事件，可以对事件进行处理；</span><br><span class=\"line\">(2) Slave has read all relay log; waiting for more updates  ：线程已经处理了中继日志文件中的所有时间，现在等待IO线程将新事件进行写入中继日志中;</span><br><span class=\"line\">(3) Waitting for slave mutex on exit;   : IO线程中state列也可以显示语句的文本,说明线程已经从中继日志读取了一个事件,从中提取了语句,并且执行语句;</span><br></pre></td></tr></table></figure>\n<p><em>查看三个线程的用途：</em> </p>\n<ul>\n<li>通过mysql线程同步状态查看数据库同步是否完成，</li>\n<li>用于主库宕机或者人工数据库文件从切换迁移等等；</li>\n<li>主库宕机选择最快的从库提升为主，需要查看当然也可以利用mysql的半同步功能,选择固定的库提升为主；</li>\n</ul>\n<p><br></p>\n<h5 id=\"7-主从配置总结\"><a href=\"#7-主从配置总结\" class=\"headerlink\" title=\"(7)主从配置总结\"></a>(7)主从配置总结</h5><ol>\n<li>服务器环境与多台数据库环境，或者单台多实例环境，测试正常启动和登录；</li>\n<li>配置数据库的my.cnf配置文件，主库（log-bin，server-id），从库（server-id），注意一般不开启从库的log-bin，配置参数后需要重启生效；</li>\n<li>登录主库增加用于从库连接主库同步的账号例如：rep并授权replication slave 同步权限；</li>\n<li>登录Master，整库锁表flush table with read lock（窗口关闭后即失效，不能关闭），然后show master status查看binlog的位置状态；</li>\n<li>新建立一个shell窗口导出主库的数据库，并拷贝到从库所在的服务器目录中；（数据库量大的时候不用mysqldump）</li>\n<li>解锁主库读锁，unlock tables；</li>\n<li>把主库的数据灌入从库中；</li>\n<li>根据主库的show master status 查看 binlog 的位置状态，在从库执行change master to （主库IP，端口，用户，密码，LOG_FILE，LOG_POS）语句</li>\n<li>从库开启同步开关，start slave，注意需要停止stop slave 才能更改change master；</li>\n<li>从库show slave status \\G，检查同步状态，并在主库进行更新测试，在从库的data目录下会出现，masterinfo，与relay-log；</li>\n</ol>\n<h5 id=\"n-主从复制半同步-待补充\"><a href=\"#n-主从复制半同步-待补充\" class=\"headerlink\" title=\"(n)主从复制半同步(待补充)\"></a>(n)主从复制半同步(待补充)</h5><p>描述：mysql5.5以上才支持半同步；一主多从主库宕机,如何恢复,通过master.info确定新的主库。</p>\n<blockquote>\n<p>直接对设置半同步的从库确定为主库,让某个稳定的从库与主库数据完全一致，即是主库与从库都将数据更新完毕后,才返回数据给用户，此时更新成功( == 实时备份同步功能)</p>\n</blockquote>\n<p>优点：确保至少一个从库和主库数据一致<br>缺点:主从之间网络延迟或者从库有问题时候,返回数据给用户的时间长;(当然可以设置超时时间10s)</p>\n<h4 id=\"企业实战-主从复制\"><a href=\"#企业实战-主从复制\" class=\"headerlink\" title=\"企业实战-主从复制\"></a>企业实战-主从复制</h4><h5 id=\"1-主库宕机从库切换主继续和从同步过程\"><a href=\"#1-主库宕机从库切换主继续和从同步过程\" class=\"headerlink\" title=\"1.主库宕机从库切换主继续和从同步过程\"></a>1.主库宕机从库切换主继续和从同步过程</h5><p>在一主多从的情况下,主库master DOWN宕掉,解决流程:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.登陆从库查看两个线程的更新状态与POS位置;</span><br><span class=\"line\">show processlist;</span><br><span class=\"line\">在从库 3307,3308 数据库目录中进行查看 master.info</span><br><span class=\"line\">cat /data/3307/data/master.info</span><br><span class=\"line\">cat /data/3308/data/master.info</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">确保更新完毕,在从库中选择POS节点最大，甚至是于DOWN机的主库是一致的。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当然利用半同步功能,就不用进行查看,由于只有一台是完整的POS(就是进行实时同步的这个从库 == 太子)。</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.确保所有的relay log更新完毕，在从库中执行:</span><br><span class=\"line\">Stop slave io_threaed;</span><br><span class=\"line\">show processlist;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">直到看见has|<span class=\"built_in\">read</span> all relay <span class=\"built_in\">log</span>,表示从库都指向完毕。</span></span><br><span class=\"line\"></span><br><span class=\"line\">3.登陆选定的作为主库的从库,配置同步的用户与主库一致就行。</span><br><span class=\"line\">mysql -uroot -p123456 -S /data/3307/mysql.sock</span><br><span class=\"line\">stop slave;</span><br><span class=\"line\">retset master;</span><br><span class=\"line\">quit;</span><br><span class=\"line\"></span><br><span class=\"line\">4.进入到数据库目录中,删除master.info , relay-log.info;</span><br><span class=\"line\">cd /data/3307/data &amp;&amp; rm -rf master.info relay-log.info</span><br><span class=\"line\"></span><br><span class=\"line\">5.提升3307作为主库,检查授权表。</span><br><span class=\"line\">vi /data/3307/my.cnf  #修改开启</span><br><span class=\"line\">log-bin = /data/3307/log-bin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果存在<span class=\"built_in\">log</span>-slave-updates 和<span class=\"built_in\">read</span>-only 等将其注释</span></span><br><span class=\"line\">/data/3306/mysql restart</span><br><span class=\"line\"></span><br><span class=\"line\">6.登陆其他从库的操作，已检查同步的user rep 均存在</span><br><span class=\"line\">stop slave;</span><br><span class=\"line\">change master to master_host = '3307的IP';</span><br><span class=\"line\">start slave; </span><br><span class=\"line\">show slave status;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主库宕机切换成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">7.修理损坏的主库,完成后作为从库使用,主库down进行恢复了,将源主库直接指向现有主库的IP地址。可以修改hosts解析。</span><br></pre></td></tr></table></figure><br>提示：如果主库服务器没有宕机,需要去拉取主库的binlog进行补全.</p>\n<h5 id=\"2-从库宕机从库重新同步过程\"><a href=\"#2-从库宕机从库重新同步过程\" class=\"headerlink\" title=\"2.从库宕机从库重新同步过程\"></a>2.从库宕机从库重新同步过程</h5><p>从库slave Down 机,恢复方法是重新做slave，直接灌数据。<br>恢复流程：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> stop slave;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> gzip -d backup.sql.gz</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysql -uroot -p<span class=\"string\">'123456'</span> -S /data/3307/mysql.sock &lt; ackup.sql.gz &amp;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> change master to master_host = <span class=\"string\">'192.168.1.35'</span>,master_user = <span class=\"string\">'repl'</span>,master_password = <span class=\"string\">'slavepass'</span>, master_log_file = <span class=\"string\">'mysql-bin.001440,master_log_pos = 68824 '</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> start slave;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> show slave status\\G;</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-主主-M-M-双向同步互为主从配置过程-不建议使用\"><a href=\"#3-主主-M-M-双向同步互为主从配置过程-不建议使用\" class=\"headerlink\" title=\"3.主主(M-M)双向同步互为主从配置过程(不建议使用)\"></a>3.主主(M-M)双向同步互为主从配置过程(不建议使用)</h5><p>使用主主前提:1.表的主键自增,2.程序写库的时候进行选择库自增ID(M1:1,3,5)(M2:2.4.6)<br>执行流程步骤：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果主主数据不同,先将从库的数据进行导出;</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysqldump -uroot -pSystem123@ -S /data/3306/mysql.sock -A -B --master-data=1 -x --events &gt; 3306.bak.sql</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">mysqldump: [Warning] Using a password on the <span class=\"built_in\">command</span> line interface can be insecure.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysql -uroot -pSystem123@ -S /data/3307/mysql.sock &lt; 3306.bak.sql</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除原有的 binlog 日志文件(记的备份)</span></span><br><span class=\"line\">rm -rf binlog*</span><br><span class=\"line\">rm -rf master.info relay-log.info WeiyiGeek-relay-bin.*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2.在3306/3307互为主从进行设置主要参数</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi 3306/my.cnf</span></span><br><span class=\"line\">  auto_increment_increment = 2</span><br><span class=\"line\">  auto_increment_offset = 2</span><br><span class=\"line\">  log-bin = /data/3306/binlog</span><br><span class=\"line\">  binlog-ignore-db = information_schema</span><br><span class=\"line\">  binlog-ignore-db = mysql</span><br><span class=\"line\">  log-slave-updates  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vi 3307/my.cnf</span></span><br><span class=\"line\">  auto_increment_increment = 2   #主主自增ID间隔, 1 3 5 间隔2</span><br><span class=\"line\">  auto_increment_offset = 1     #主主偏移ID起点</span><br><span class=\"line\">  log-bin = /data/3307/binlog    #binlog记录文件</span><br><span class=\"line\">  binlog-ignore-db = information_schema</span><br><span class=\"line\">  binlog-ignore-db = mysql  #忽略binlog日志</span><br><span class=\"line\">  log-slave-updates  #启用从库binlog日志</span><br><span class=\"line\">  skip-slave-start   #启动时候忽略从库启动</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019032502.png\" alt=\"主主同步配置文件\" title=\"\" class=\"\">\n                <p>主主同步配置文件</p>\n            </figure></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.登陆主主3306/3307机器,设置3307/3306机器master(设置对方IP与端口即可);</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysql -uroot -pSystem123@ -S /data/3307/mysql.sock</span></span><br><span class=\"line\">CHANGE MASTER TO </span><br><span class=\"line\">MASTER_HOST='127.0.0.1',</span><br><span class=\"line\">MASTER_PORT=3306,</span><br><span class=\"line\">MASTER_USER='rep',</span><br><span class=\"line\">MASTER_PASSWORD='System123@';</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysql -uroot -pSystem123@ -S /data/3306/mysql.sock</span></span><br><span class=\"line\">CHANGE MASTER TO </span><br><span class=\"line\">MASTER_HOST='127.0.0.1',</span><br><span class=\"line\">MASTER_PORT=3307,</span><br><span class=\"line\">MASTER_USER='rep',</span><br><span class=\"line\">MASTER_PASSWORD='System123@';</span><br><span class=\"line\"></span><br><span class=\"line\">start slave; #开启主从</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019032503.png\" alt=\"主主同步配置\" title=\"\" class=\"\">\n                <p>主主同步配置</p>\n            </figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.需要建立自增表,为了进行验证。</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> create database study;</span></span><br><span class=\"line\">Query OK, 1 row affected (0.01 sec)</span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> use study</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">mysql&gt;</span><span class=\"bash\"> create table student(</span></span><br><span class=\"line\">  id int(4) not null AUTO_INCREMENT,</span><br><span class=\"line\">  name char(20) not null,</span><br><span class=\"line\">  primary key(id)</span><br><span class=\"line\">);</span><br><span class=\"line\">insert into student (name) values ('weiyigeek');</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019032501.png\" alt=\"主主同步配置成功\" title=\"\" class=\"\">\n                <p>主主同步配置成功</p>\n            </figure>\n<h5 id=\"4-MYSQL从库记录BINLOG方法\"><a href=\"#4-MYSQL从库记录BINLOG方法\" class=\"headerlink\" title=\"4.MYSQL从库记录BINLOG方法\"></a>4.MYSQL从库记录BINLOG方法</h5><p><em>Q:Mysql中binlog日志作用时什么？</em><br>A:用来记录mysql内部增删改查等对mysql数据库有更新的内容的记录</p>\n<p><em>什么时候需要记录binlog的情况？</em><br>1) 当前从库作为其他从库的主库(级联同步)<br>2) 把从库作为数据库备份服务器时候;</p>\n<p>应用场景：级联复制或者从库做数据备份，A–》B–》C , B 服务器要开启记录binlog日志功能；</p>\n<p>配置方法：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">再从库的my.cnf配置文件[mysqld]中加入</span></span><br><span class=\"line\">log_bin = /data/3307/mysql-bin</span><br><span class=\"line\">log-slave-updates </span><br><span class=\"line\">expire_logs_days = 7 #过期时间设置 find /data/3307/ -type f -name \"mysql-bin.000*\" -mtime +7 | xargs rm -f</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/2019032501.png\" alt=\"从库备份故障实例\" title=\"\" class=\"\">\n                <p>从库备份故障实例</p>\n            </figure></p>\n<p>恢复流程:</p>\n<ul>\n<li>新建机器,先恢复全部数据库备份 2013-01-20.sql.gz </li>\n<li>恢复全备到数据库损坏时间节点所产生的bin-log进行导入。</li>\n</ul>\n<h5 id=\"5-主从生产场景中读写分离多种方案\"><a href=\"#5-主从生产场景中读写分离多种方案\" class=\"headerlink\" title=\"5.主从生产场景中读写分离多种方案\"></a>5.主从生产场景中读写分离多种方案</h5><p>描述：常见的是写数据在主库（简单地说就是所有的更新），从库只是读取；如果主从同时进行输入数据会导致主从复制失败；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#常用方法：SLAVE 服务器</span><br><span class=\"line\">(1) 修改用户的只读权限;</span><br><span class=\"line\">(2) web程序写的指向主库,读指向从库;</span><br><span class=\"line\">(3) 在从库my.cnf配置中进行read-only参数;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405184212.png\" alt=\"Weiyigeek.读写分离多种方案\" title=\"\" class=\"\">\n                <p>Weiyigeek.读写分离多种方案</p>\n            </figure></p>\n<p>1) 生产环境中常常采用的方式，然后对从服务器(slave)上的用户仅仅授权select读权限，不同同步mysql库从而保证主库和从库相同的用户可以授权不同的权限。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT ON 'blog'.* TO 'blog'@'10.0.0.%' identified by 'oldboy' #也可利用revoke进行权限回收</span><br></pre></td></tr></table></figure></p>\n<p>3) 通过read-only参数来防止数据写从库的方法,可以在slave服务器启动选项增加参数或者在my.cnf配置文件中加入r-o参数来确保从库只读;但需要注意用户得权限，root是不受到read-only限制得，也可以在mysql启动的时候加入–read-only效果也一样；<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">主库同步建立测试用户（或者在加入<span class=\"built_in\">read</span>-only参数前建立得用户,super权限除外）</span></span><br><span class=\"line\">root@localhost master&gt;GRANT select,insert,update,delete ON *.* TO 'web'@'%' identified by 'web@web';</span><br><span class=\"line\">root@localhost master&gt;flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 采用建立得mysql低权限账户登陆数据库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mysql -uweb -pweb@web -S <span class=\"string\">\"/data/3307/mysql.sock\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">验证从库是否是只读，不能写。</span></span><br><span class=\"line\">web@localhost slave&gt;create database test;</span><br><span class=\"line\">ERROR 1290 (HY000): The MySQL server is running with the --read-only option so it cannot execute this statement   #完成收工</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"6-主从复忽略指定库bin-log同步\"><a href=\"#6-主从复忽略指定库bin-log同步\" class=\"headerlink\" title=\"6.主从复忽略指定库bin-log同步\"></a>6.主从复忽略指定库bin-log同步</h5><p>如忽略mysql库与information_schema库主从同步,在MYSQL主库得my.cnf文件中添加下面得参数，然后进行重启即可。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replicate-ignore-db = mysql  #主从忽略的库</span><br><span class=\"line\">binlog-do-db  = testdb   #binlog需要记录的库 【master端】</span><br><span class=\"line\">binlog_ingore_db = mysql #二进制忽略的数据库多个数据库使用,分割</span><br><span class=\"line\">binlog_ingore_db = information_schema</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面是从库/主库效果</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405192010.png\" alt=\"Weiyigeek.忽略指定库bin-log同步\" title=\"\" class=\"\">\n                <p>Weiyigeek.忽略指定库bin-log同步</p>\n            </figure><br><em>注意事项：</em> 在 mysql5.0~5.1只在【主/从】库上面配置replication-ignore-db=mysql，才能做到主从库不同步mysql库。</p>\n<hr>\n\n<h4 id=\"主从故障-Q-amp-A\"><a href=\"#主从故障-Q-amp-A\" class=\"headerlink\" title=\"主从故障(Q&amp;A)\"></a>主从故障(Q&amp;A)</h4><p><em>Q:四种方法恢复主库与从库的数据不统一?</em></p>\n<ol>\n<li>拖拉MAster主库binlog文件到从服务器上面,进行导入到Slave从数据库中;</li>\n<li>进行数据库双写(同时写入成功才行),需要在程序业务中进行设置;</li>\n<li>通过临时写在在内存中的数据库数据进行同步恢复(memcache)</li>\n<li>将异步同步变成实时同步(google有个半同步插件),将主从绑定在一起,主从都成功才返回OK；</li>\n</ol>\n<p><em>Q:CHANGE MASTER LAST IO ERROR 1236 FROM MASTER</em><br>原因：change master 时候参数两边多了空格;MASTER_LOG_FILE=’ mysql-bin.000010 ‘;  #如这样</p>\n<p><em>Q:mysql锁表时问题？</em><br>答：锁表命令的时间，在不同的引擎的情况，会受到下面参数的控制；并且锁表时候如果超过设置时间(或者时间太短)，它自己操作自动解锁表<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interactive_timeout = 60;</span><br><span class=\"line\">wait_timeout = 60</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认情况下的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> show variables like <span class=\"string\">'%timeout%'</span>;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> global interactive_timeout = 1600;   <span class=\"comment\">#进行设置（需要退出进入生效）</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> global wait_timeout = 1660</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"built_in\">set</span> global lock_wait_timeout = 3156000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">锁表语句</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> flush table with <span class=\"built_in\">read</span> lock;    <span class=\"comment\">#5.5 ok</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> flush tables with <span class=\"built_in\">read</span> lock;   <span class=\"comment\">#5.1</span></span></span><br></pre></td></tr></table></figure></p>\n<p><em>Q:由于切换binlog 导致 show master status 位置变化无影响？</em><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在锁表的时候进行mysqldump导出数据库</span></span><br><span class=\"line\">mysqldump -uroot -p123456 -F -A -B --events &gt; /opt/back.sql;   //-F 会刷新bin-log 可导致 master status中</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405173832.png\" alt=\"weiyigeek.刷新binlog\" title=\"\" class=\"\">\n                <p>weiyigeek.刷新binlog</p>\n            </figure></p>\n<p><strong>Q:MySQL同步故障”Slave_IO/SQL_Running:No”解决办法?</strong><br>Slave_IO_Running:No 解决办法一：<br>查看master.info中主库的slave replication 账号密码是否正确，主库IP、port能否正常连接；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.网络不通      #互ping机器ip，无丢包率正常访问，排除</span><br><span class=\"line\">2.密码不对      #MySQL重新授权远程用户登陆账号，重新设置密码，排除</span><br><span class=\"line\">3.pos不正确     #主服务器,登陆数据库重新查看起始偏移量show master status,排除</span><br><span class=\"line\">4.ID问题        #ID的问题，在安装完mysql数据库的时候默认他们的server-id&#x3D;1 但是在做主从同步的时候需要将ID号码设置不一样才行,查看数据库配置文件cat &#x2F;etc&#x2F;my.cnf，文件写的不同</span><br><span class=\"line\">5.防火墙策略     #查看防火墙策略，是否放通双方的服务端口 iptables -nL,最后发现 防火墙策略写了多端口防火墙策略的端口不生效，解决防火墙策略单独开放端口，暂停从服务的io读取stop slave;</span><br></pre></td></tr></table></figure></p>\n<p>Slave_SQL_Running:No 解决办法一：<br>1.程序可能在slave上进行了写操作<br>2.也可能是slave机器重起后，事务回滚造成的，一般是事务回滚造成的：</p>\n<pre><code class=\"conf\">#解决办法：\nmysql&gt; stop slave ;\nmysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;\nmysql&gt; start slave ;\n\n#解决办法二：\n首先停掉Slave服务：slave stop 到主服务器上查看主机状态，记录File和Position对应的值进入master；\nmysql&gt; show master status;\n+---------------+----------+--------------+------------------+-------------------+\n| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+---------------+----------+--------------+------------------+-------------------+\n| binlog.000006 |      760 |              |                  |                   |\n+---------------+----------+--------------+------------------+-------------------+\n\n#然后到slave服务器上执行手动同步：\nstop slave;\nCHANGE MASTER TO MASTER_HOST=&apos;127.0.0.1&apos;,MASTER_PORT=3306,MASTER_USER=&apos;rep&apos;,MASTER_PASSWORD=&apos;System123@&apos;,MASTER_LOG_FILE=&apos;binlog.000006&apos;,MASTER_LOG_POS=760;\nstart slave;\nmysql&gt; show slave status\\G\n</code></pre>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190405182331.png\" alt=\"weiyigeek.SQL线程故障解决\" title=\"\" class=\"\">\n                <p>weiyigeek.SQL线程故障解决</p>\n            </figure>\n","comments":true,"excerpt":"[TOC]文章目录(1) 主从介绍<br>(2) 主从架构","categories":[{"name":"Database","path":"api/categories/Database.json"},{"name":"DBA","path":"api/categories/DBA.json"}],"tags":[{"name":"MYSQL","path":"api/tags/MYSQL.json"}]}