{"title":"Shell脚本常用命令一览","slug":"系统运维/Linux/常用命令/脚本常用类命令/Shell脚本常用命令一览","date":"2019-06-03T11:37:30.000Z","updated":"2022-08-18T09:43:14.131Z","url":"2019/6-3-179.html","path":"api/articles/2019/6-3-179.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190630232526.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190630233007.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190802132056.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190611114907.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190611123136.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604095356.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604093552.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604093851.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604123714.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629231445.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-基础命令\"><a href=\"#0x00-基础命令\" class=\"headerlink\" title=\"0x00 基础命令\"></a>0x00 基础命令</h2><h3 id=\"sh-命令\"><a href=\"#sh-命令\" class=\"headerlink\" title=\"sh 命令\"></a>sh 命令</h3><p>描述:Bourne Shell它是bash的前生所以大多用法与bash是一致的;</p>\n<p>基础语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh [options] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选项</span></span><br><span class=\"line\">-c string: 命令从-c后的字符串读取。</span><br><span class=\"line\">-i: 实现脚本交互。</span><br><span class=\"line\">-n: 进行shell脚本的语法检查。</span><br><span class=\"line\">-x: 实现shell脚本逐条语句的跟踪。</span><br><span class=\"line\">-s: 用于从标准输入中读取命令,接收命令参数在子shell中执行;</span><br></pre></td></tr></table></figure></p>\n<p>使用案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.使用-x选项跟踪脚本调试shell脚本，能打印出所执行的每一行命令以及当前状态：</span></span><br><span class=\"line\">sh -x check_ssh_login.sh</span><br><span class=\"line\">+ DEFINE=30</span><br><span class=\"line\">+ cat /var/<span class=\"built_in\">log</span>/secure</span><br><span class=\"line\">+ awk <span class=\"string\">'/Failed/ &#123;++ip[$(NF-3)]&#125; END &#123;for (i in ip) print i\"=\"ip[i]&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.使用-s选项接收命令行中传入的参数</span></span><br><span class=\"line\">curl -sSL http://weiyigeek.top/test.sh | bash -s <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'echo hello $1'</span> | sh -s <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"comment\">#hello world</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'ls $1 $2'</span> | sh -s <span class=\"string\">'-l'</span> <span class=\"string\">'-h'</span></span><br><span class=\"line\"><span class=\"comment\">#anaconda-ks.cfg</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"bash-命令-Shell灵魂\"><a href=\"#bash-命令-Shell灵魂\" class=\"headerlink\" title=\"bash 命令(Shell灵魂)\"></a>bash 命令(Shell灵魂)</h3><p>描述：bash 是一个为GNU计划编写的Unix shell，它的名字是一系列缩写Bourne-Again SHell — 这是关于Bourne shell（sh）的一个双关语（Bourne again / Born again）, Bash不但与Bourne Shell兼容，还继承了C Shell、Korn Shell等优点。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用法：    </span></span><br><span class=\"line\">bash [GNU 长选项] [选项] ...</span><br><span class=\"line\">bash [GNU 长选项] [选项] 脚本文件 ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数说明</span></span><br><span class=\"line\">-c：若用-c参数，则bash从字符串中读入命令，如果字符串后还有变量就被设定为从<span class=\"variable\">$0</span>开始的位置参数</span><br><span class=\"line\">-n：检测脚本是否正确并不执行脚本,仅仅验证语法;  (常用)</span><br><span class=\"line\">-v: 在执行脚本的时候,先将脚本内容输出到屏幕上然后执行脚本，如有错误则输出; (常用)</span><br><span class=\"line\">-x：执行脚本并输出执行过程调试利器; (常用)</span><br><span class=\"line\"></span><br><span class=\"line\">-i：若用-i参数，则bash是交互的</span><br><span class=\"line\">-s：若用-s参数，则bash从标准输入中读入命令（在执行完-c带的命令之后）直到输入<span class=\"built_in\">exit</span></span><br><span class=\"line\">-：单一的号表明参数执行完毕，并且屏蔽此后所跟参数，后面的所有变量都被看作是文件名</span><br><span class=\"line\">--norc：如果bash是交互的，则不执行个人初始化文件：-/.bashrc，如果bash作为sh来运行，这个参数缺省是关闭的</span><br><span class=\"line\">--noprofile：不执行系统范围的启动文件/etc/profile也不执行个人的启动文件-/.bash_profile，-/.bash_login或-/.profile，缺省情况下，bash作为登录的shell时以这些文件作为启动文件</span><br><span class=\"line\">--rcfile文件名：如果bash是交互的，则以此文件作为bash的启动文件替代-/.bashrc</span><br><span class=\"line\">--login：激活bash，伪装为登录shell</span><br><span class=\"line\">--nobraceexpansion：不执行大括号扩展</span><br><span class=\"line\">--nolineediting：在交互状态下不使用GNU的readline库去读取命令即取消了命令行编辑功能</span><br><span class=\"line\">--posix：改变bash的行为，使其符合Posix 1003.2规定的标准</span><br><span class=\"line\">--version：在bash开始时显示此bash的版本号--quiet：不显示版本号和其他信息，这是缺省值</span><br></pre></td></tr></table></figure>\n<p>Shell 选项:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-irsD 或 -c 命令 或 -O <span class=\"built_in\">shopt</span>选项        (仅适合调用)</span><br><span class=\"line\">-abefhkmnptuvxBCHP 或 -o 选项</span><br><span class=\"line\"><span class=\"comment\">#请输入`bash -c \"help set\"' 以获得关于 shell 选项的更多信息</span></span><br><span class=\"line\"><span class=\"comment\">#请输入`bash -c help' 以获得关于 shell 内嵌命令的更多信息</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190630232526.png\" alt=\"WeiyiGeek.内建命令\" title=\"\" class=\"\">\n                <p>WeiyiGeek.内建命令</p>\n            </figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.检测脚本是否正确，并不执行 , 在set命令中也能实现调试</span></span><br><span class=\"line\">bash -n database.sh    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.执行脚本，输出执行过程，shell脚本自身已经包含了调式选项，能都打印出脚本接受的参数和输入</span></span><br><span class=\"line\">bash -x database.sh   <span class=\"comment\">#-x 选项是打印所有行的信息</span></span><br><span class=\"line\">sh -x script.sh <span class=\"comment\">#使用-x选项跟踪脚本调试shell脚本，能打印出所执行的每一行命令以及当前状态：</span></span><br><span class=\"line\"><span class=\"comment\"># test.sh: line 8: ((: 1++: syntax error: operand expected (error token is \"+\")</span></span><br><span class=\"line\"><span class=\"comment\"># + '[' 1 -le 100 ']'</span></span><br><span class=\"line\"><span class=\"comment\"># + (( sum+=1 ))</span></span><br><span class=\"line\"><span class=\"comment\"># + (( 1++ ))</span></span><br><span class=\"line\"><span class=\"comment\"># test.sh: line 8: ((: 1++: syntax error: operand expected (error token is \"+\")</span></span><br><span class=\"line\"><span class=\"comment\"># + '[' 1 -le 100 ']'</span></span><br><span class=\"line\"><span class=\"comment\"># + (( sum+=1 ))</span></span><br><span class=\"line\"><span class=\"comment\"># + (( 1++ ))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.子shell(subshells)问题：</span></span><br><span class=\"line\"><span class=\"comment\">#运行一个shell脚本时会启动另一个命令解释器，就好像你的命令是在命令行提示下被解释的一样，类似于批处理文件start cmd.bat 里的一系列命令。</span></span><br><span class=\"line\"><span class=\"comment\">#每个shell脚本有效地运行`在父shell(parent shell)的一个子进程里`,这个父shell是指在一个控制终端或在一个`xterm窗口`中给你命令指示符的进程。</span></span><br><span class=\"line\">cmd1 | ( cmd2; cmd3; cmd4 ) | cmd5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.如果cmd2 是cd / 那么就会改变子Shell的工作目录，这种`改变只是局限于子shell内部`，cmd5则完全不知道工作目录发生的变化。`子shell是嵌在圆括号()内部的命令序列，子Shell内部定义的变量为局部变量`。</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> TERMINFO <span class=\"comment\">#清理变量名</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -C <span class=\"comment\">#转向所产生的文件</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190630233007.png\" alt=\"WeiyiGeek.临时环境变量\" title=\"\" class=\"\">\n                <p>WeiyiGeek.临时环境变量</p>\n            </figure></p>\n<hr>\n<h2 id=\"0x01-输入输出\"><a href=\"#0x01-输入输出\" class=\"headerlink\" title=\"0x01 输入输出\"></a>0x01 输入输出</h2><h3 id=\"echo-命令\"><a href=\"#echo-命令\" class=\"headerlink\" title=\"echo 命令\"></a>echo 命令</h3><p>描述：用于输出指定字符串或者变量的值;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> [选项] <span class=\"string\">\"输出内容\"</span></span><br><span class=\"line\"><span class=\"comment\">#选项</span></span><br><span class=\"line\">-n: 一行输出。</span><br><span class=\"line\">-E：不使用反斜杠字符及不激活</span><br><span class=\"line\">-e：激活转义字符,下面是支持反斜杠控制的字符转换列表</span><br><span class=\"line\">\\   转义符</span><br><span class=\"line\">\\b  退格键,向左删除键</span><br><span class=\"line\">\\n  换行符    </span><br><span class=\"line\">\\r  回车键</span><br><span class=\"line\">\\t  制表符,Tab键</span><br><span class=\"line\">\\v  垂直制表符</span><br><span class=\"line\">\\c  显示不换行</span><br><span class=\"line\">\\0nnn - 按照八进制ASCII码输出字符，其中0为数字零，nnn是三位八进制数</span><br><span class=\"line\">\\xhh -  按照十六进制ASCII表输出字符，其中hh是两位十六进制数</span><br></pre></td></tr></table></figure></p>\n<p>补充shell 终端字符颜色：终端的字符颜色是用转义序列控制的，是文本模式下的系统显示功能，和具体的语言无关shell,python,perl等均可以调用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#说明：转义序列是以 ESC 开头,可以用 \\033 完成相同的工作（ESC 的 ASCII 码用十进制表示就是 27， = 用八进制表示的 33）。</span></span><br><span class=\"line\">\\033[显示方式;前景色;背景色m <span class=\"comment\">#方式1 </span></span><br><span class=\"line\">\\E[显示方式;前景色;背景色m   <span class=\"comment\">#方式2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例：中括号中1：代表开启高亮颜色，末尾0m：代表关闭颜色</span></span><br><span class=\"line\">\\e[1;开启颜色;文字颜色;背景颜色 String \\e[0m关闭颜色 </span><br><span class=\"line\"></span><br><span class=\"line\">显示方式: 0（默认值）、1（高亮）、22（非粗体）、4（下划线）、24（非下划线）、5（闪烁）、25（非闪烁）、7（反显）、27（非反显） </span><br><span class=\"line\">文字颜色：30（黑色）、31（红色）、32（绿色）、 33（黄色）、34（蓝色）、35（洋红）、36（青色）、37（白色） </span><br><span class=\"line\">背景颜色：重置=0，40（黑色）、41（红色）、42（绿色）、 43（黄色）、44（蓝色）、45（洋红）、46（青色）、47（白色） </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Shell Code : </span></span><br><span class=\"line\"><span class=\"comment\"># echo 显示带颜色需要使用参数-e </span></span><br><span class=\"line\"><span class=\"comment\"># 字颜色：30—–37 </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[30m 黑色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[31m 红色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[32m 绿色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[33m 黄色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[34m 蓝色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[35m 紫色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[36m 天蓝字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[37m 白色字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[40;37m 黑底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[41;37m 红底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[42;37m 绿底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[43;37m 黄底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[44;37m 蓝底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[45;37m 紫底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[46;37m 天蓝底白字 \\033[0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[47;30m 白底黑字 \\033[0m”</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># print 则不需要指定参数</span></span><br><span class=\"line\"><span class=\"string\">for i in `seq 16 255`; do printf \"</span>\\e[38;5;%sm %s\\t<span class=\"string\">\" <span class=\"variable\">$i</span> <span class=\"variable\">$i</span>;done;echo \"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#Python3</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(\"</span>\\033[3;31;40m%s\\033[0m<span class=\"string\">\"%\"</span>输出红色字符<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;&gt; print(\"</span>\\033[4;31;40m%s\\033[0m<span class=\"string\">\"%\"</span>输出红色字符<span class=\"string\">\")</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190802132056.png\" alt=\"WeiyiGeek.终端字符颜色\" title=\"\" class=\"\">\n                <p>WeiyiGeek.终端字符颜色</p>\n            </figure></p>\n<p><br/></p>\n<p><strong>控制选项说明:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\33[0m 关闭所有属性 </span><br><span class=\"line\">\\33[1m 设置高亮度 </span><br><span class=\"line\">\\33[4m 下划线 </span><br><span class=\"line\">\\33[5m 闪烁 </span><br><span class=\"line\">\\33[7m 反显 </span><br><span class=\"line\">\\33[8m 消隐 </span><br><span class=\"line\">\\33[30m — \\33[37m 设置前景色 </span><br><span class=\"line\">\\33[40m — \\33[47m 设置背景色 </span><br><span class=\"line\">\\33[nA 光标上移n行 </span><br><span class=\"line\">\\33[nB 光标下移n行 </span><br><span class=\"line\">\\33[nC 光标右移n行 </span><br><span class=\"line\">\\33[nD 光标左移n行 </span><br><span class=\"line\">\\33[y;xH设置光标位置 </span><br><span class=\"line\">\\33[2J 清屏 </span><br><span class=\"line\">\\33[K 清除从光标到行尾的内容 </span><br><span class=\"line\">\\33[s 保存光标位置 </span><br><span class=\"line\">\\33[u 恢复光标位置 </span><br><span class=\"line\">\\33[?25l 隐藏光标 </span><br><span class=\"line\">\\33[?25h 显示光标</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Shell</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[4C MEasdasdsad \\033[0m \\033[?25h COOL\"</span>  <span class=\"comment\">#显示光标并左移动4行</span></span><br><span class=\"line\">    MEasdasdsad   COOL</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[4C MEasdasdsad \\033[0m \\033[?25l COOL\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>实际案例：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.原样输出变量字符串若需要原样输出变量字符串（不进行转义），请使用单引号。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'$name\\\"'</span>  <span class=\"comment\">#$name\\\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.转义字符的使用</span></span><br><span class=\"line\"><span class=\"variable\">$echo</span> -e <span class=\"string\">\"123\\b \\v\\t345678 \\0101 \\x30\"</span> </span><br><span class=\"line\">12</span><br><span class=\"line\">        345678 A 0</span><br><span class=\"line\"><span class=\"variable\">$echo</span> -e <span class=\"string\">\"h\\ve\\vl\\nl\\to\\v\"</span></span><br><span class=\"line\">h</span><br><span class=\"line\"> e</span><br><span class=\"line\">  l</span><br><span class=\"line\">l       o</span><br><span class=\"line\"><span class=\"variable\">$echo</span> -e <span class=\"string\">\"\\x68\\t\\x65\\t\\x6c\\n\\x6c\\t\\x6f\"</span>  <span class=\"comment\">#十六进制</span></span><br><span class=\"line\">h       e       l</span><br><span class=\"line\">l       o</span><br><span class=\"line\"><span class=\"variable\">$echo</span> -e <span class=\"string\">\"`ls | cat -n`\"</span>  <span class=\"comment\">#输出行号</span></span><br><span class=\"line\">     1  bin</span><br><span class=\"line\">     2  boot</span><br><span class=\"line\">     3  dev</span><br><span class=\"line\">     4  etc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"OK! \\c\"</span>  <span class=\"comment\">#显示不换行：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"It is a test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3.输出带颜色</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[1;31m 字符串 \\e[0m\"</span>      <span class=\"comment\">#红字默认黑底</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[1;31;42m this is a red color\\e[0m\"</span> <span class=\"comment\">#40m为背景颜色-红字绿底</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[37;31;5mMySQL Server Stop...\\033[37;47;0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[37;31;1;5mMySQL Server Stop...\\e[37;47;0m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例4.颜色与控制选项共同组合使用</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[37;31;5mMySQL Server Stop...\\033[39;49;0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\033[37;31;5mMySQL Server Stop...\\033[39;49;0m\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\e[37;31;1;5m \\n######### weiyigeek - IT ########### \\e[37;47;0m\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190611114907.png\" alt=\"WeiyiGeek.颜色案例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.颜色案例</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例4.Echo 也可以输出变量长度</span></span><br><span class=\"line\"><span class=\"variable\">$web</span>=123456</span><br><span class=\"line\"><span class=\"variable\">$echo</span> <span class=\"variable\">$web</span></span><br><span class=\"line\">123456</span><br><span class=\"line\"><span class=\"variable\">$echo</span> <span class=\"variable\">$&#123;#web&#125;</span>    <span class=\"comment\">#$&#123;#web&#125; 表示web变量中是6位字符</span></span><br><span class=\"line\">6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.Echo 也可以计算数值:</span></span><br><span class=\"line\"><span class=\"comment\">#$((运算式)) or $[运算式]    expr or let 数值运算工具  四种方式</span></span><br><span class=\"line\"><span class=\"variable\">$echo</span> <span class=\"string\">\"scale=3;4/8\"</span>|bc    <span class=\"comment\">#\"scale保存的小数位数;表达式\"|bc  #有效数字</span></span><br><span class=\"line\">.500</span><br><span class=\"line\"></span><br><span class=\"line\">va=1;</span><br><span class=\"line\">vb=2;</span><br><span class=\"line\"><span class=\"built_in\">echo</span>[<span class=\"variable\">$va</span>+<span class=\"variable\">$vb</span>]   <span class=\"comment\">#output :[1+2]</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span>$[va+vb]    <span class=\"comment\">#3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $((<span class=\"variable\">$va</span>+<span class=\"variable\">$vb</span>))  <span class=\"comment\">#3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> te=<span class=\"variable\">$va</span>+<span class=\"variable\">$vb</span>   <span class=\"comment\">#let 没有空格</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$te</span>   <span class=\"comment\">#3</span></span><br><span class=\"line\"></span><br><span class=\"line\">result=`expr 3 + 1`        <span class=\"comment\">#4, 注意等号，两边不能有空格;</span></span><br><span class=\"line\"><span class=\"variable\">$result</span>=`expr <span class=\"variable\">$va</span> + 1`     <span class=\"comment\">#4</span></span><br><span class=\"line\"><span class=\"variable\">$result</span>=$(expr <span class=\"variable\">$va</span> + 1)     <span class=\"comment\">#expr 也可以注意+号两边有space</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例6.定义和输出数组：</span></span><br><span class=\"line\">movie[0]=ip &amp;&amp; movie[1]=tcp</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;movie[n]&#125;</span>  <span class=\"comment\"># 单个数字的数组</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;movie[*]&#125;</span>  <span class=\"comment\"># 显示数组中的全部内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例7.Check External IP (获取外部IP)并采用echo显示</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">'\\E[32m]'</span> <span class=\"string\">\"External IP (外部IP):\"</span> <span class=\"string\">'\\E[0m'</span> `curl -s http://ipecho.net/plain`</span><br><span class=\"line\">External IP (外部IP):  222.177.8.229</span><br><span class=\"line\"><span class=\"comment\">#linux获取外网ip其方法</span></span><br><span class=\"line\">$ curl -s checkip.dyndns.org | sed <span class=\"string\">'s/.*IP Address: \\([0-9\\.]*\\).*/\\1/g'</span></span><br><span class=\"line\">$ curl ifconfig.me</span><br><span class=\"line\">$ curl icanhazip.com</span><br><span class=\"line\">$ curl ident.me</span><br><span class=\"line\">$ curl ipecho.net/plain</span><br><span class=\"line\">$ curl whatismyip.akamai.com</span><br><span class=\"line\">$ curl tnx.nl/ip</span><br><span class=\"line\">$ curl myip.dnsomatic.com</span><br><span class=\"line\">$ curl ip.appspot.com</span><br><span class=\"line\">$ curl http://ip.3322.net</span><br><span class=\"line\">$ curl icanhazip.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例8.快速清空文件内容的几种方法</span></span><br><span class=\"line\">$ : &gt; filename <span class=\"comment\">#其中的 : 是一个占位符, 不产生任何输出.</span></span><br><span class=\"line\">$ &gt; filename</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span> &gt; filename</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> /dev/null &gt; filename</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> &gt; filename</span><br><span class=\"line\">$ truncate -s 0 /tmp/<span class=\"built_in\">test</span>  </span><br><span class=\"line\">``` </span><br><span class=\"line\">![WeiyiGeek.echo数组](https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190611122521.png)</span><br><span class=\"line\"></span><br><span class=\"line\">补充：Linux本机的纯字符界面是不支持中文的！</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">实例9.按照错误管道进行输出。</span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> &gt;&amp;2 <span class=\"string\">\"error: failed to download\"</span></span><br><span class=\"line\">  <span class=\"comment\"># error: failed to download 'docker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\">cat &gt;&amp;2 &lt;&lt;-<span class=\"string\">'EOW'</span></span><br><span class=\"line\">📎 Hey there!  It looks like you<span class=\"string\">'re trying to run a Docker daemon.</span></span><br><span class=\"line\"><span class=\"string\">You probably should use the \"dind\" image variant instead, something like:</span></span><br><span class=\"line\"><span class=\"string\">  docker run --privileged --name some-docker ... docker:dind ...</span></span><br><span class=\"line\"><span class=\"string\">See https://hub.docker.com/_/docker/ for more documentation and usage examples.</span></span><br><span class=\"line\"><span class=\"string\">EOW</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"printf-命令\"><a href=\"#printf-命令\" class=\"headerlink\" title=\"printf 命令\"></a>printf 命令</h3><p>描述：printf命令格式化并输出结果到标准输出,是echo命令的增强版,它是C语言printf()库函数的一个有限的变形，并且在语法上有些不同;<br>注意：printf 由 POSIX 标准所定义，移植性要比 echo 好,但是不会像echo那样自动换行;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: <span class=\"built_in\">printf</span> [-v var] format [arguments]</span><br><span class=\"line\">* -v : ssign the output to shell variable VAR rather than display it on the standard output</span><br><span class=\"line\">* format  ：为格式控制字符串，建议使用单双引号</span><br><span class=\"line\">* arguments ： 为参数列表,使用空格分离,不用逗号</span><br><span class=\"line\"></span><br><span class=\"line\">- 表示左对齐、</span><br><span class=\"line\">+ 表示右对齐、</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190611123136.png\" alt=\"WeiyiGeek.转义字符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.转义字符</p>\n            </figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.printf 常规使用：</span></span><br><span class=\"line\"><span class=\"comment\"># format-string为双引号</span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"%d %s\\n\"</span> 1 <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单引号与双引号效果一样 </span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">'%d %s\\n'</span> 1 <span class=\"string\">\"abc\"</span> </span><br><span class=\"line\">1 abc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 没有引号也可以输出</span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> %s abcdef</span><br><span class=\"line\">abcdef</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> %s abc def</span><br><span class=\"line\">abcdef</span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> abc def</span><br><span class=\"line\">abc</span><br><span class=\"line\">def</span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"%s %s %s\\n\"</span> a b c d e f g h i j</span><br><span class=\"line\">a b c</span><br><span class=\"line\">d e f</span><br><span class=\"line\">g h i</span><br><span class=\"line\">j</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"%s and %d \\n\"</span> </span><br><span class=\"line\">NULL(Empty) and 0</span><br><span class=\"line\"><span class=\"comment\">## 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0</span></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"The first program always prints'%s,%d\\n'\"</span> Hello Shell</span><br><span class=\"line\">-bash: <span class=\"built_in\">printf</span>: Shell: invalid number</span><br><span class=\"line\">The first program always prints <span class=\"string\">'Hello,0'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.进制转换</span></span><br><span class=\"line\"><span class=\"comment\">#\\ddd 三位Octal转换为ASCLL(注意与Dec转Ascll有些异同)</span></span><br><span class=\"line\">比如：00111001(B) 71(H) 57(D) 39(O) 9(ASCII)</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"\\066\\t\\067\\t\\070\\t\\071\\n\"</span> <span class=\"comment\">#OCT </span></span><br><span class=\"line\">6       7       8       9</span><br><span class=\"line\">$ <span class=\"built_in\">printf</span> <span class=\"string\">\"\\x30 \\x31 \\x32 \\n\\x40 \\x41 \\x42\\n\"</span></span><br><span class=\"line\">0 1 2</span><br><span class=\"line\">@ A B</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例5.字符对齐与小数</span></span><br><span class=\"line\">%-5s 格式为左对齐且宽度为5的字符串代替（-表示左对齐），不使用则是右对齐。</span><br><span class=\"line\">%-4.2f 格式为左对齐宽度为4，保留两位小数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-5s %-10s %-4s\\n\"</span> NO Name Mark</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-5s %-10s %-4.2f\\n\"</span> 01 Tom 90.3456</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-5s %-10s %-4.2f\\n\"</span> 02 Jack 89.2345</span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%-5s %-10s %-4.2f\\n\"</span> 03 Jeff 98.4323</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例6.可以直接从文件读取</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"%s \\n\"</span> $(cat 1.txt)</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#这种方法执行学习</span></span><br><span class=\"line\">cat 1.txt |\\</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> num</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"<span class=\"variable\">$num</span>:%X \\v\"</span> <span class=\"variable\">$num</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例7.printf格式化字符串高级用法连接memcache数据库</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"del key\\r\\n\"</span>| nc 127.0.0.1 11211 &amp;&gt;/dev/null <span class=\"comment\">#监控memcache是否工作正常</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"set key 0 0 10\\r\\nweiyigeek1\\r\\n\"</span>|nc 127.0.0.1 11211 &amp;&gt;/dev/null  <span class=\"comment\">#监控redis或者mysql也可以使用睁眼的方法</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"get key\\r\\v\"</span>| nc 127.0.0.1 11211|grep <span class=\"string\">'weiyigeek'</span>|wc -l </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例8.变量赋予</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> -v <span class=\"string\">\"_VAR\"</span> <span class=\"string\">\"%s\"</span> <span class=\"string\">\"WEIYIGEEK\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;_VAR&#125;</span></span><br><span class=\"line\">WEIYIGEEK</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"tee-命令-从标准输入读取，写入标准输出和文件\"><a href=\"#tee-命令-从标准输入读取，写入标准输出和文件\" class=\"headerlink\" title=\"tee 命令 - 从标准输入读取，写入标准输出和文件\"></a>tee 命令 - 从标准输入读取，写入标准输出和文件</h3><p>描述: 将标准输入复制到每个文件，也复制到标准输出。</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a, --append            <span class=\"comment\">#append to the given FILEs, do not overwrite</span></span><br><span class=\"line\">-i, --ignore-interrupts <span class=\"comment\">#ignore interrupt signals</span></span><br><span class=\"line\">-p                      <span class=\"comment\">#diagnose errors writing to non pipes</span></span><br><span class=\"line\">--output-error[=MODE]   <span class=\"comment\">#set behavior on write error.  See MODE below</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MODE determines behavior with write errors on the outputs:</span></span><br><span class=\"line\"><span class=\"string\">'warn'</span> diagnose errors writing to any output</span><br><span class=\"line\"><span class=\"string\">'warn-nopipe'</span>  diagnose errors writing to any output not a pipe</span><br><span class=\"line\"><span class=\"string\">'exit'</span> <span class=\"built_in\">exit</span> on error writing to any output</span><br><span class=\"line\"><span class=\"string\">'exit-nopipe'</span> <span class=\"built_in\">exit</span> on error writing to any output not a pipe</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.&lt;&lt;&lt; 重定向符覆盖文件中的内容</span></span><br><span class=\"line\">$ sudo tee /etc/bashrc &lt;&lt;&lt; <span class=\"string\">'alias rm=\"sh /tmp/remove.sh\"'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">\"sh /tmp/remove.sh\"</span></span><br><span class=\"line\">$ cat /etc/bashrc</span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">\"sh /tmp/remove.sh\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例2.&lt;&lt; 添加字符串片段注意它不会转义变量$&#123;env&#125;这一点与echo有点不同，-a是追加而不是覆盖文件内容(注意)</span></span><br><span class=\"line\">sudo tee -a /etc/bashrc &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rm=<span class=\"string\">\"sh /tmp/remove.sh\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> rmf=<span class=\"string\">\"sh <span class=\"variable\">$&#123;REMOVE&#125;</span>\"</span>  <span class=\"comment\"># </span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">demo=<span class=\"string\">\"wEIYIGeek\"</span></span><br><span class=\"line\">tee -a test.yaml &lt;&lt; <span class=\"string\">\"EOF\"</span></span><br><span class=\"line\">name = <span class=\"variable\">$&#123;demo&#125;</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例3.低权限用户采用命令追加内容到指定文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"192.168.1.31:/nask8sapp /nfsdisk-31 nfs defaults 0 0\"</span> | sudo tee -a /etc/fstab</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-时间相关\"><a href=\"#0x02-时间相关\" class=\"headerlink\" title=\"0x02 时间相关\"></a>0x02 时间相关</h2><h3 id=\"sleep-命令\"><a href=\"#sleep-命令\" class=\"headerlink\" title=\"sleep 命令\"></a>sleep 命令</h3><p>描述：sleep命令暂停指定的时间。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: sleep NUMBER[SUFFIX]...</span><br><span class=\"line\">  or:  sleep OPTION</span><br><span class=\"line\"><span class=\"comment\">#参数：</span></span><br><span class=\"line\">时间：指定要暂停时间的长度</span><br><span class=\"line\">时间长度，后面可接 s、m、h 或 d，其中 s 为秒，m 为 分钟，h 为小时，d 为日数</span><br></pre></td></tr></table></figure></p>\n<p>案例示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.循环方式运行的监控脚本，设置间隔时间（值得学习）</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\">b=<span class=\"string\">''</span> </span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=0;<span class=\"variable\">$i</span>&lt;=100;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">\"Progress:[%-100s] %d %%\\r\"</span> <span class=\"variable\">$b</span> <span class=\"variable\">$i</span>  <span class=\"comment\"># 输出[100个占为符号] 输出百分之几 </span></span><br><span class=\"line\">    sleep 0.1 </span><br><span class=\"line\">    b=<span class=\"comment\">#$b   # 输出'#'还在不断叠加</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果</span></span><br><span class=\"line\">Progress:[<span class=\"comment\">##################################################]100%</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.sleep后面可以设置number+时间</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(seq 1 5)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span>;<span class=\"built_in\">echo</span> `date`</span><br><span class=\"line\">  sleep 1m</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604095356.png\" alt=\"WeiyiGeek.sleep\" title=\"\" class=\"\">\n                <p>WeiyiGeek.sleep</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"cal-命令-显示系统日历\"><a href=\"#cal-命令-显示系统日历\" class=\"headerlink\" title=\"cal 命令 - 显示系统日历\"></a>cal 命令 - 显示系统日历</h3><p>描述: cal命令即(<code>calendar</code>)列出指定日期的月份年与日及其周几;</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 显示目前这个月份的月历，连同今日处会有反白的显示;</span></span><br><span class=\"line\">[root@vm-1575613390 ~]<span class=\"comment\"># cal</span></span><br><span class=\"line\">      十月 2020</span><br><span class=\"line\">日 一 二 三 四 五 六</span><br><span class=\"line\">             1  2  3</span><br><span class=\"line\"> 4  5  6  7  8  9 10</span><br><span class=\"line\">11 12 13 14 15 16 17</span><br><span class=\"line\">18 19 20 21 22 23 24</span><br><span class=\"line\">25 26 27 28 29 30 31</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 指定月份和年</span></span><br><span class=\"line\">[root@vm-1575613390 ~]<span class=\"comment\"># cal 11 2020</span></span><br><span class=\"line\">     十一月 2020</span><br><span class=\"line\">日 一 二 三 四 五 六</span><br><span class=\"line\"> 1  2  3  4  5  6  7</span><br><span class=\"line\"> 8  9 10 11 12 13 14</span><br><span class=\"line\">15 16 17 18 19 20 21</span><br><span class=\"line\">22 23 24 25 26 27 28</span><br><span class=\"line\">29 30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 判断是润年还是平年</span></span><br><span class=\"line\">[root@vm-1575613390 ~]<span class=\"comment\">#  cal 29 2 2020</span></span><br><span class=\"line\">      二月 2020</span><br><span class=\"line\">日 一 二 三 四 五 六</span><br><span class=\"line\">                   1</span><br><span class=\"line\"> 2  3  4  5  6  7  8</span><br><span class=\"line\"> 9 10 11 12 13 14 15</span><br><span class=\"line\">16 17 18 19 20 21 22</span><br><span class=\"line\">23 24 25 26 27 28 29</span><br><span class=\"line\"></span><br><span class=\"line\">[root@vm-1575613390 ~]<span class=\"comment\">#  cal 30 2 2020</span></span><br><span class=\"line\">cal: illegal day value: use 1-29</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"date-命令-系统时间查询与设置\"><a href=\"#date-命令-系统时间查询与设置\" class=\"headerlink\" title=\"date 命令 - 系统时间查询与设置\"></a>date 命令 - 系统时间查询与设置</h3><p>描述：Date 命令的使用查询当前系统时间,新装的CentOS系统服务器可能设置了错误的,需要调整时区并调整时间.</p>\n<p>1）%s存在于GNU扩展版本.像在solaris等UNIX上没有该参数.<br>2）1970-01-01 00:00:00指的是UTC时间. (date -u得出来的时间)UTC是协调世界时(Universal Time Coordinated)英文缩写，又称世界标准时间 并由国际时间局(BIH)负责保持的以秒为基础的时间标度。UTC相当于本初子午线(即经度0度)上的平均太阳时，过去曾用格林威治平均时(GMT)来表示.北京时间比UTC时间早8小时。<br>以1999年1月1日0000UTC为例，UTC时间是零点，北京时间为1999年1月1日早上8点整<br>3）在国际无线电通信场合，简称UTC整个地球分为二十四时区，每个时区都有自己的本地时间，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)， UTC与格林尼治平均时(GMT, Greenwich Mean Time)一样，都与英国伦敦的本地时相同。</p>\n<p>如下是CentOS系统使用NTP来从一个时间服务器同步：</p>\n<ul>\n<li>第一步： 把当前时区调整为上海就是+8区,想改其他时区也可以去看看/usr/share/zoneinfo目录; <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\"><span class=\"variable\">$cat</span> /usr/share/zoneinfo/Asia/Chongqing</span><br></pre></td></tr></table></figure>\n第二步：利用ntpdate同步标准时间<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ntpdate  <span class=\"comment\">#注：没有安装ntpdate的可以yum一下: </span></span><br><span class=\"line\">ntpdate us.pool.ntp.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#完毕！</span></span><br><span class=\"line\">12 Jun 16:40:16 ntpdate[7015]: adjust time server 107.181.191.189 offset 0.004026 sec</span><br><span class=\"line\">12 Jun 16:42:33 ntpdate[7590]: adjust time server 66.79.136.235 offset -0.005317 sec</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date [参数]</span><br><span class=\"line\">&lt;+时间日期格式&gt;：指定显示时使用的日期时间格式。</span><br><span class=\"line\">-d &lt;字符串&gt;：显示字符串所指的日期与时间</span><br><span class=\"line\">-s &lt;字符串&gt;：根据字符串来设置日期与时间。</span><br><span class=\"line\">-u：显示UTC；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#字符串前后必须加上双引号；</span></span><br><span class=\"line\">年份是Year</span><br><span class=\"line\">月份是Month</span><br><span class=\"line\">周期是Week,缩写是,w</span><br><span class=\"line\">日是,Day,缩写是,d</span><br><span class=\"line\">小时,hour,缩写是 h</span><br><span class=\"line\">分钟是,minute,缩写是,m</span><br><span class=\"line\">秒,second,缩写是 s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##时间的表示%代码:</span></span><br><span class=\"line\">%S：十进制的秒数，（当前秒数0-59）</span><br><span class=\"line\">%s：(小写s),：能打印出自1970-01-01：00:00:00到当前时间的秒数.</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">%M：十时制表示的分钟数（0-59）</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">%H 小时，24小时制（00~23）= %k 小时，24小时制（0~23） </span><br><span class=\"line\">%I 小时，12小时制（01~12）=  %l 小时，12小时制（1~12）</span><br><span class=\"line\"></span><br><span class=\"line\">%p：本地的AM或PM的等价显示(显示出AM或PM)</span><br><span class=\"line\">%r：12小时的时间（带上下午和分钟秒数）</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">%a 星期的简称（Sun~Sat）</span><br><span class=\"line\">%A 星期的全称（Sunday~Saturday）</span><br><span class=\"line\">%u：每周的第几天，星期一为第一天：（值从0到6，星期一为0）= %w：十进制表示的星期几（值从0到6，星期天为0）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">%h,%b 月的简称（Jan~Dec） </span><br><span class=\"line\">%B 月的全称（January~December）</span><br><span class=\"line\">%m：十进制表示的月份（01~12）</span><br><span class=\"line\"></span><br><span class=\"line\">%d：十进制表示的每月的第几天  = %e：在两字符域中，十进制表示的每月的第几天</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">%C：年份的前两位数字 </span><br><span class=\"line\">%g：年份的后两位数字，使用基于周的年=%y：不带世纪的十进制年份（值从0到99）</span><br><span class=\"line\"></span><br><span class=\"line\">%Y：带世纪部分的十制年份 = %G：年分，使用基于周的年</span><br><span class=\"line\">%j：十进制表示的每年的第几天（001~366）</span><br><span class=\"line\">%W：每年的第几周，把星期一做为第一天（值从0到53）</span><br><span class=\"line\">%U：第年的第几周，把星期日做为第一天（值从0到53）</span><br><span class=\"line\">%V：每年的第几周，使用基于周的年</span><br><span class=\"line\"></span><br><span class=\"line\">%R：显示小时和分钟：hh:mm</span><br><span class=\"line\">%T：显示时分秒：hh:mm:ss</span><br><span class=\"line\">%X：标准的时间串：%H:%M:%S</span><br><span class=\"line\">%D：月/日/年 </span><br><span class=\"line\">%F：年-月-日</span><br><span class=\"line\">%c：标准的日期的时间串 （Tue Nov 20 14:12:58 2012）</span><br><span class=\"line\">%x：标准的日期串</span><br><span class=\"line\">%z,%Z：时区名称，如果不能得到时区名称则返回空字符。</span><br><span class=\"line\"></span><br><span class=\"line\">%n：新行符</span><br><span class=\"line\">%t：水平制表符</span><br><span class=\"line\">%%：百分号 （类似转义符号）</span><br></pre></td></tr></table></figure></p>\n<p>实例演示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.CST（北京时间）与UTC时间</span></span><br><span class=\"line\"><span class=\"variable\">$date</span></span><br><span class=\"line\">2019年 06月 04日 星期二 09:29:08 CST</span><br><span class=\"line\"><span class=\"variable\">$date</span> -u</span><br><span class=\"line\">2019年 06月 04日 星期二 01:28:49 UTC</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.使用%显示出时间</span></span><br><span class=\"line\"><span class=\"variable\">$date</span>  <span class=\"string\">\"+%Y-%m-%d %H:%M:%S\"</span></span><br><span class=\"line\">2019-06-04 09:34:01</span><br><span class=\"line\">date <span class=\"string\">'+%y-%m-%d'</span></span><br><span class=\"line\">16-09-29     <span class=\"comment\">#/%y/%Y：2016/16</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604093552.png\" alt=\"WeiyiGeek.date%示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.date%示例</p>\n            </figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例3.设置系统时间</span></span><br><span class=\"line\">date -s <span class=\"string\">\"20190605\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604093851.png\" alt=\"WeiyiGeek.设定时间\" title=\"\" class=\"\">\n                <p>WeiyiGeek.设定时间</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例4. 当前时间/减去/加上 10 天：</span></span><br><span class=\"line\"><span class=\"variable\">$date</span> -d <span class=\"string\">\"\"</span> +%Y-%m-%d <span class=\"comment\"># 2019-06-04</span></span><br><span class=\"line\">date -d -1day +%Y%m%d <span class=\"comment\"># 2019-06-03</span></span><br><span class=\"line\">date -d <span class=\"string\">\"-10 day\"</span> +%Y-%m-%d <span class=\"comment\"># 2019-05-25</span></span><br><span class=\"line\">date -d <span class=\"string\">\"10 day\"</span> +%Y-%m-%d  <span class=\"comment\"># 2019-06-14</span></span><br><span class=\"line\"><span class=\"comment\">#月/年加减操作：</span></span><br><span class=\"line\">date -d <span class=\"string\">\"-1 month\"</span> +%Y%m%d //显示上一月的日期 </span><br><span class=\"line\">date -d <span class=\"string\">\"+1 month\"</span> +%Y%m%d //显示下一月的日期</span><br><span class=\"line\">date -d <span class=\"string\">\"-1 year\"</span> +%Y%m%d  //显示前一年的日期 </span><br><span class=\"line\">date -d <span class=\"string\">\"+1 year\"</span> +%Y%m%d  //显示下一年的日期</span><br><span class=\"line\"><span class=\"comment\">#输出昨天日期：</span></span><br><span class=\"line\">date -d <span class=\"string\">\"1 day ago\"</span> +<span class=\"string\">\"%Y-%m-%d\"</span> </span><br><span class=\"line\">date -d <span class=\"string\">\"-1 day\"</span> +<span class=\"string\">\"%Y-%m-%d\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.传说中的 1234567890 (%s) 秒：</span></span><br><span class=\"line\">date -d <span class=\"string\">\"1970-01-01 1234567890 seconds\"</span> +<span class=\"string\">\"%Y-%m-%d %H:%m:%S\"</span> </span><br><span class=\"line\">2009-02-13 23:02:30</span><br><span class=\"line\">date -d <span class=\"string\">\"2009-12-12 13:04:58\"</span> +<span class=\"string\">\"%Y/%m/%d %H:%M:%S\"</span>   <span class=\"comment\">#普通转格式</span></span><br><span class=\"line\">2009/12/12 13:04:58 </span><br><span class=\"line\">date -d <span class=\"string\">\"Dec 5, 2009 12:00:37 AM\"</span> +<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>  <span class=\"comment\">#apache格式转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">date -d <span class=\"string\">\"Dec 5, 2009 12:00:37 AM 2 year ago\"</span> +<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span> <span class=\"comment\">#格式转换后时间游走</span></span><br><span class=\"line\">date -d <span class=\"string\">\"2009-12-12 13:04:58 2 year ago\"</span> +<span class=\"string\">\"%Y/%m/%d %H:%M:%S\"</span> </span><br><span class=\"line\">007/12/12 13:04:58 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.检查一组shell脚本或者程序执行的时间</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\">start=$(date +%s) </span><br><span class=\"line\">nmap man.linuxde.net &amp;&gt; /dev/null </span><br><span class=\"line\">end=$(date +%s) </span><br><span class=\"line\">difference=$(( <span class=\"variable\">$end</span>-<span class=\"variable\">$start</span> )) </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$difference</span> seconds.</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"timedatectl-命令-控制systemd系统中的系统时间和日期。\"><a href=\"#timedatectl-命令-控制systemd系统中的系统时间和日期。\" class=\"headerlink\" title=\"timedatectl 命令 - 控制systemd系统中的系统时间和日期。\"></a>timedatectl 命令 - 控制systemd系统中的系统时间和日期。</h3><p>描述:该命令可以完整显示当前系统时间时区，以及是否启用NTP同步以及设定当前系统时间何时区;</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timedatectl [OPTIONS...] COMMAND ...</span><br><span class=\"line\"></span><br><span class=\"line\">Query or change system time and date settings.</span><br><span class=\"line\">  -h --<span class=\"built_in\">help</span>                Show this <span class=\"built_in\">help</span> message</span><br><span class=\"line\">     --version             Show package version</span><br><span class=\"line\">     --no-pager            Do not pipe output into a pager</span><br><span class=\"line\">     --no-ask-password     Do not prompt <span class=\"keyword\">for</span> password</span><br><span class=\"line\">  -H --host=[USER@]HOST    Operate on remote host</span><br><span class=\"line\">  -M --machine=CONTAINER   Operate on <span class=\"built_in\">local</span> container</span><br><span class=\"line\">     --adjust-system-clock 当改变本地RTC模式时，调整系统时钟</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  status                   Show current time settings</span><br><span class=\"line\">  <span class=\"built_in\">set</span>-time TIME            Set system time</span><br><span class=\"line\">  <span class=\"built_in\">set</span>-timezone ZONE        Set system time zone</span><br><span class=\"line\">  list-timezones           Show known time zones</span><br><span class=\"line\">  <span class=\"built_in\">set</span>-local-rtc BOOL       Control whether RTC is <span class=\"keyword\">in</span> <span class=\"built_in\">local</span> time</span><br><span class=\"line\">  <span class=\"built_in\">set</span>-ntp BOOL             Control whether NTP is enabled</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示当前时间信息</span></span><br><span class=\"line\">timedatectl status</span><br><span class=\"line\">      Local time: 二 2019-05-14 17:24:36 CST</span><br><span class=\"line\">  Universal time: 二 2019-05-14 09:24:36 UTC</span><br><span class=\"line\">        RTC time: 四 2020-05-14 09:24:21</span><br><span class=\"line\">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class=\"line\">     NTP enabled: yes</span><br><span class=\"line\">NTP synchronized: no</span><br><span class=\"line\"> RTC <span class=\"keyword\">in</span> <span class=\"built_in\">local</span> TZ: no</span><br><span class=\"line\">      DST active: n/a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.设定当前日期时间以及时区</span></span><br><span class=\"line\">sudo timedatectl <span class=\"built_in\">set</span>-ntp 0  <span class=\"comment\">#关闭时间同步后采用能设置时间</span></span><br><span class=\"line\">sudo timedatectl <span class=\"built_in\">set</span>-time <span class=\"string\">\"2020-02-01 11:11:11\"</span></span><br><span class=\"line\">timedatectl <span class=\"built_in\">set</span>-timezone <span class=\"string\">\"Asia/Shanghai\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.设定是否使用utc时间</span></span><br><span class=\"line\">timedatectl <span class=\"built_in\">set</span>-local-rtc 0[1]</span><br><span class=\"line\">cat /etc/adjtime</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"time-命令\"><a href=\"#time-命令\" class=\"headerlink\" title=\"time 命令\"></a>time 命令</h3><p>描述：time命令用于统计给定命令所花费的总时间,所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。</p>\n<p>注意：在shell中使用必须使用绝对路径/usr/bin/time 才有选项,使用带参数的必须进行下载 yum install time</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法</span></span><br><span class=\"line\">time 参数  <span class=\"comment\">#指令指定需要运行的指令及其参数</span></span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。</span></span><br><span class=\"line\"><span class=\"variable\">$time</span> ls</span><br><span class=\"line\">test.sh  winpe_win10_amd64.iso  www.sh</span><br><span class=\"line\"><span class=\"comment\">#输出的信息分别显示了该命令所花费的real时间、user时间和sys时间。</span></span><br><span class=\"line\">real    0m0.001s</span><br><span class=\"line\">user    0m0.000s</span><br><span class=\"line\">sys     0m0.001s</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>real 时间:是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。</li>\n<li>user 时间:是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。</li>\n<li>sys  时间:是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例2.使用-o选项将执行时间写入到文件中：</span></span><br><span class=\"line\">/usr/bin/time -o outfile.txt ls</span><br><span class=\"line\">0.00user 0.00system 0:00.00elapsed 94%CPU (0avgtext+0avgdata 1024maxresident)k</span><br><span class=\"line\">0inputs+0outputs (0major+313minor)pagefaults 0swaps</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.使用-a选项追加信息：</span></span><br><span class=\"line\">/usr/bin/time -a -o outfile.txt ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用-f选项格式化时间输出：</span></span><br><span class=\"line\">/usr/bin/time -f <span class=\"string\">\"time: %U\"</span> ls</span><br><span class=\"line\">/usr/bin/time -f <span class=\"string\">\"time: %E - %U - %S - %w - %c - %k %K\"</span> ls  outfile.txt  test.sh  winpe_win10_amd64.iso  www.sh</span><br><span class=\"line\">time: 0:00.00 - 0.00 - 0.00 - 1 - 0 - 0 0</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/time -f <span class=\"string\">\"time: %C,%k,%w,%Z,%P,%w\"</span> whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">time: whoami,0,3,4096,70%,3  </span><br><span class=\"line\"><span class=\"comment\">#执行的命令，接收信号量数量,进程交换出主存的次数，系统页面大小（学过操作系统的应该知道 内存磁盘交换），进程获取CPU的百分比，上下文切换次数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190604123714.png\" alt=\"WeiyiGeek.time格式化参数\" title=\"\" class=\"\">\n                <p>WeiyiGeek.time格式化参数</p>\n            </figure>\n<p><br></p>\n<h3 id=\"tr-命令-常用\"><a href=\"#tr-命令-常用\" class=\"headerlink\" title=\"tr 命令(常用)\"></a>tr 命令(常用)</h3><p>描述：这个命令是及其重要的可以和三剑客联合使用达到非一般的效果,可以对来自标准(stdin)输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符,经常用来编写优美的单行命令,作用很强大。</p>\n<p>语法参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tr [选项]... SET1 [SET2]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选项</span></span><br><span class=\"line\">-c或——complerment：取代所有不属于第一字符集的字符；</span><br><span class=\"line\">-d或——delete：删除所有属于第一字符集的字符；</span><br><span class=\"line\">-s或--squeeze-repeats：把连续重复的字符以单独一个字符表示；</span><br><span class=\"line\">-t或--truncate-set1：先删除第一字符集较第二字符集多出的字符。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SET 是一组字符串,一般都可按照字面含义理解。解析序列如下：</span></span><br><span class=\"line\">  \\NNN\t八进制值为NNN 的字符(1 至3 个数位)</span><br><span class=\"line\">  \\\\\t\t反斜杠</span><br><span class=\"line\">  \\a\t\t终端鸣响</span><br><span class=\"line\">  \\b\t\t退格</span><br><span class=\"line\">  \\f\t\t换页</span><br><span class=\"line\">  \\n\t\t换行</span><br><span class=\"line\">  \\r\t\t回车</span><br><span class=\"line\">  \\t\t\t水平制表符</span><br><span class=\"line\">  \\v\t\t垂直制表符</span><br><span class=\"line\">  字符1-字符2\t <span class=\"comment\">#从字符1 到字符2 的升序递增过程中经历的所有字符 [0-9]</span></span><br><span class=\"line\">  [字符*]\t     <span class=\"comment\">#在SET2 中适用,指定字符会被连续复制直到吻合设置1 的长度</span></span><br><span class=\"line\">  [字符*次数]\t <span class=\"comment\">#对字符执行指定次数的复制,若次数以 0 开头则被视为八进制数</span></span><br><span class=\"line\">  [:alnum:]\t所有的字母和数字</span><br><span class=\"line\">  [:alpha:]\t所有的字母</span><br><span class=\"line\">  [:cntrl:]\t所有的控制字符</span><br><span class=\"line\">  [:digit:]\t所有的数字</span><br><span class=\"line\">  [:graph:]\t所有的可打印字符,不包括空格</span><br><span class=\"line\">  [:lower:]\t所有的小写字母</span><br><span class=\"line\">  [:upper:]\t所有的大写字母</span><br><span class=\"line\">  [:<span class=\"built_in\">print</span>:]\t所有的可打印字符,包括空格</span><br><span class=\"line\">  [:punct:]\t所有的标点字符</span><br><span class=\"line\">  [:space:]\t所有呈水平或垂直排列的空白字符</span><br><span class=\"line\">  [:blank:]\t所有呈水平排列的空白字符</span><br><span class=\"line\">  [:xdigit:] <span class=\"comment\">#所有的十六进制数</span></span><br><span class=\"line\">  [=字符=]\t <span class=\"comment\">#所有和指定字符相等的字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#字符集1：指定要转换或删除的原字符集。</span></span><br><span class=\"line\"><span class=\"comment\">#字符集2：指定要转换成的目标字符集。</span></span><br><span class=\"line\">Tips:当执行转换操作时，必须使用参数<span class=\"string\">\"字符集2”指定转换的目标字符集。但执行删除操作时，不需要参数\"</span>字符集2”；</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.字符替换</span></span><br><span class=\"line\"><span class=\"comment\">#'A-Z' 和 'a-z'都是集合，集合是可以自己制定的，例如：'ABD-&#125;'、'bB.,'、'a-de-h'、'a-c0-9'都属于集合，集合里可以使用'\\n'、'\\t'，可以可以使用其他ASCII字符。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HELLO WORLD\"</span> | tr <span class=\"string\">'A-Z'</span> <span class=\"string\">'a-z'</span>   <span class=\"comment\">#将输入字符由大写转换为小写：</span></span><br><span class=\"line\"><span class=\"comment\"># hello world</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HELLO WORLD\"</span> | tr <span class=\"string\">'HLW'</span> <span class=\"string\">'hlw'</span></span><br><span class=\"line\"><span class=\"comment\"># hEllO wORlD</span></span><br><span class=\"line\"><span class=\"variable\">$echo</span> <span class=\"string\">\"HELLO WORLDW\"</span> | tr <span class=\"string\">'HLW'</span> <span class=\"string\">'hl'</span>  <span class=\"comment\">#注意当字符集1集合数量大于字符集2集合数量的时候,便会用字符集2最后一个字符来</span></span><br><span class=\"line\"><span class=\"comment\"># hEllO lORlDl</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.字符删除</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello 123 world 456\"</span> | tr -d <span class=\"string\">'0-9'</span> </span><br><span class=\"line\"><span class=\"comment\"># hello world </span></span><br><span class=\"line\"><span class=\"comment\"># 将文件里面制表符(tab)转换为空格：</span></span><br><span class=\"line\">cat text | tr <span class=\"string\">'\\t'</span> <span class=\"string\">' '</span></span><br><span class=\"line\"><span class=\"comment\"># hello-world</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.字符集补集，从输入文本中将不在补集中的所有字符删除 -c \"只留下指定的字符集\"：</span></span><br><span class=\"line\"><span class=\"comment\">#此例中，补集中包含了数字0~9、空格和换行符\\n，所以没有被删除，其他字符全部被删除了</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> aa.,a 1 b<span class=\"comment\">#$bb 2 c*/cc 3 ddd 4 | tr -d -c '0-9 \\n' </span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.用tr压缩字符，可以压缩输入中重复的字符（-s）： </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"thissss is a text linnnnnnne.\"</span> | tr -s <span class=\"string\">'sn'</span> </span><br><span class=\"line\"><span class=\"comment\"># this is a text line. </span></span><br><span class=\"line\">grep -v -E  <span class=\"string\">'^#'</span> /etc/ssh/sshd_config | tr -s <span class=\"string\">'\\n'</span>  <span class=\"comment\">#常用取消显示多个空白行(即连续换行)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.# 对应替换 -t （依次对应）：</span></span><br><span class=\"line\">cat 1.txt | tr -t <span class=\"string\">\"ello\"</span> <span class=\"string\">\"Hell\"</span></span><br><span class=\"line\"><span class=\"comment\"># HHlll Wlrld</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例6.# 巧妙使用tr做数字相加操作：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 2 3 4 5 6 7 8 9 | xargs -n1 | <span class=\"built_in\">echo</span> $[ $(tr <span class=\"string\">'\\n'</span> <span class=\"string\">'+'</span>) 0 ] <span class=\"comment\">#值得学习</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例7.删除Windows文件\"造成”的'^M'字符,类似玉dos2unix的作用</span></span><br><span class=\"line\">cat file | tr -s <span class=\"string\">\"\\r\"</span> <span class=\"string\">\"\\n\"</span> &gt; new_file </span><br><span class=\"line\">cat file | tr -d <span class=\"string\">\"\\r\"</span> &gt; new_file</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例8.使用字符类来进行设置</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"qwe1234,./zxcad\"</span> | tr -d -c <span class=\"string\">'[:digit:] \\n'</span>  <span class=\"comment\">#-c 相当于取反的效果</span></span><br><span class=\"line\">1234</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"qwe1234,./zxcad\"</span> | tr -d <span class=\"string\">'[:punct:]'</span>   <span class=\"comment\"># 删除所有的标点字符</span></span><br><span class=\"line\">qwe1234zxcad</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"qwe1234,./zxcad\"</span> | tr -d -c <span class=\"string\">'[:punct:]  \\n'</span> <span class=\"comment\">#删除所有非标点字符</span></span><br><span class=\"line\">,./</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例9.从文件中读取字符串进行出现</span></span><br><span class=\"line\">tr <span class=\"string\">' '</span> <span class=\"string\">'\\n'</span> &lt; demo.txt</span><br><span class=\"line\">tr <span class=\"string\">'\\r\\n'</span> <span class=\"string\">'\\n'</span> &lt; index.html.log <span class=\"comment\">#值得学习</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例10.删除所有特殊符号</span></span><br><span class=\"line\">cat 20200524113201-index.html.log |  tr -d <span class=\"string\">'[:cntrl:]['</span>:punct:<span class=\"string\">']'</span></span><br><span class=\"line\">12a13 var monitorcqzsk605c606 script script </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例11.分隔字符串采用空格来分隔字符串，然后以数组的形式输出;</span></span><br><span class=\"line\">array=($(<span class=\"built_in\">echo</span> <span class=\"string\">\"hello,shell,split,test\"</span>  | tr <span class=\"string\">','</span> <span class=\"string\">' '</span>) )  </span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;array[@]&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"basename-命令-取得路径的文件名称\"><a href=\"#basename-命令-取得路径的文件名称\" class=\"headerlink\" title=\"basename 命令 - 取得路径的文件名称\"></a>basename 命令 - 取得路径的文件名称</h3><p>描述：用于打印目录或者文件的基本名称,basename和dirname命令通常用于shell脚本中的命令替换来指定和指定的输入文件名称有所差异的输出文件名称。<br>语法参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: basename NAME [SUFFIX]</span><br><span class=\"line\">  or:  basename OPTION... NAME...</span><br><span class=\"line\">  -a, --multiple       <span class=\"comment\">#支持多个文件路径 参数</span></span><br><span class=\"line\">  -s, --suffix=SUFFIX  <span class=\"comment\">#remove a trailing SUFFIX 删除尾随后缀</span></span><br><span class=\"line\">  -z, --zero          <span class=\"comment\"># separate output with NUL rather than newline 使用NULL而不是换行分隔输出</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.要显示一个shell变量的基本名称请输入</span></span><br><span class=\"line\">basename <span class=\"variable\">$WORKFILE</span>  <span class=\"comment\">#如果WORKFILE代表路径变量</span></span><br><span class=\"line\">basename <span class=\"variable\">$HOME</span></span><br><span class=\"line\"><span class=\"comment\"># root</span></span><br><span class=\"line\">basename /var/<span class=\"built_in\">log</span>/messages</span><br><span class=\"line\"><span class=\"comment\"># messages</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># basename /etc/php.ini </span></span><br><span class=\"line\">php.ini</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># basename /etc/nginx/</span></span><br><span class=\"line\">nginx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.其他示例</span></span><br><span class=\"line\">basename include/stdio.h .h     -&gt; <span class=\"string\">\"stdio\"</span></span><br><span class=\"line\">basename -s .h include/stdio.h  -&gt; <span class=\"string\">\"stdio\"</span></span><br><span class=\"line\">basename -a any/str1 any/str2   -&gt; <span class=\"string\">\"str1\"</span> <span class=\"string\">\"str2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.shell中进行使用,#当然也可以在shell中引用当前名字</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash   #test.sh</span></span><br><span class=\"line\">basename <span class=\"variable\">$&#123;0&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#构造一个和另外名称相同*(除了后缀)的文件名称请输入</span></span><br><span class=\"line\">Filename=`base /home/weiyigeek/program.c .c`.o  <span class=\"comment\">#重新拼接的program.o文件</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"dirname-命令-取得目录名称\"><a href=\"#dirname-命令-取得目录名称\" class=\"headerlink\" title=\"dirname 命令 - 取得目录名称\"></a>dirname 命令 - 取得目录名称</h3><p>描述：去除文件名中的非目录部分,仅显示与目录有关的内容,dirname命令读取指定路径名保留最后一个/及其后面的字符,删除其他部分,并写结果到标准输出n如果最后一个/后无字符dirname 命令使用倒数第二个/,并忽略其后的所有字符。</p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.出现绝对路径中的文件名称，返回起文件存在的路径目录</span></span><br><span class=\"line\"><span class=\"variable\">$dirname</span> /home/tank/test.bz2 </span><br><span class=\"line\">/home/tank</span><br><span class=\"line\">dirname /usr/bin/          -&gt; <span class=\"string\">\"/usr\"</span></span><br><span class=\"line\">dirname dir1/str dir2/str  -&gt; <span class=\"string\">\"dir1\"</span> followed by <span class=\"string\">\"dir2\"</span></span><br><span class=\"line\">dirname stdio.h            -&gt; <span class=\"string\">\".\"</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629231445.png\" alt=\"WeiyiGeek.dirname目录\" title=\"\" class=\"\">\n                <p>WeiyiGeek.dirname目录</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"readlink-命令\"><a href=\"#readlink-命令\" class=\"headerlink\" title=\"readlink 命令\"></a>readlink 命令</h3><p>描述：readlink是linux系统中一个常用工具，主要用来找出符号链接所指向的位置.简单地说就是一直跟随符号链接，直到直到非符号链接的文件位置，限制是最后必须存在一个非符号链接的文件。</p>\n<p>语法参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-f, --canonicalize   <span class=\"comment\"># 通过递归地跟踪给定名称的每个组件中的每个符号链接来规范化;</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.查找当前运行脚本的实际连接地址</span></span><br><span class=\"line\">readlink -f /bin/bash  <span class=\"comment\">#相当于是软连接</span></span><br><span class=\"line\"><span class=\"comment\"># /usr/bin/bash</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"nproc-命令\"><a href=\"#nproc-命令\" class=\"headerlink\" title=\"nproc 命令\"></a>nproc 命令</h3><p>描述：打印当前进程可用的处理单元数哪个可能小于在线处理器的数量;</p>\n<p>实际示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.当前进程可用处理单元数</span></span><br><span class=\"line\">nproc --all</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"seq-命令\"><a href=\"#seq-命令\" class=\"headerlink\" title=\"seq 命令\"></a>seq 命令</h3><p>描述：seq命令用于产生从某个数到另外一个数之间的所有整数,<code>主要可以用于生成密码字典;（Important）</code></p>\n<p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq [选项] 尾数  <span class=\"comment\">#默认从1开始</span></span><br><span class=\"line\">seq [选项] 首数 尾数  <span class=\"comment\">#默认从1开始，可指定为0</span></span><br><span class=\"line\">seq [选项] 首数 step数 尾数  <span class=\"comment\">#指定步数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选项</span></span><br><span class=\"line\">-f, --format=格式        使用<span class=\"built_in\">printf</span> 样式的浮点格式</span><br><span class=\"line\">-s, --separator=字符串   使用指定字符串分隔数字（默认使用：\\n）</span><br><span class=\"line\">-w, --equal-width        在列前添加0 使得宽度相同,注意不能和-f一起用，输出是同宽的</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.基础示例</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> 3</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"variable\">$seq</span> 0 3</span><br><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"variable\">$seq</span> 0 2 5</span><br><span class=\"line\">0</span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.%后面指定数字的位数 默认是%g，%3g那么数字位数不足部分是空格。</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> -f<span class=\"string\">\"%3g\"</span> 9 11</span><br><span class=\"line\"><span class=\"comment\"># 9</span></span><br><span class=\"line\"><span class=\"comment\"># 10</span></span><br><span class=\"line\"><span class=\"comment\"># 11</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> -f<span class=\"string\">\"str%03g\"</span> 9 11  <span class=\"comment\">#$这样的话数字位数不足部分是0，%前面制定字符串。</span></span><br><span class=\"line\"><span class=\"comment\"># str009</span></span><br><span class=\"line\"><span class=\"comment\"># str010</span></span><br><span class=\"line\"><span class=\"comment\"># str011</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.-w选项：指定输出数字同宽</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> -w 98 101</span><br><span class=\"line\">098</span><br><span class=\"line\">099</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.-s选项：指定分隔符（默认是回车）</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> -s <span class=\"string\">\" \"</span> -f <span class=\"string\">\"str%03g\"</span> 9 11</span><br><span class=\"line\">str009 str010 str011</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#要指定/t做为分隔符号：</span></span><br><span class=\"line\"><span class=\"variable\">$seq</span> -s <span class=\"string\">\"<span class=\"variable\">$(echo -e '\\t')</span>\"</span> 9 11</span><br><span class=\"line\">9       10      11</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"0x03-Shell脚本辅助命令\"><a href=\"#0x03-Shell脚本辅助命令\" class=\"headerlink\" title=\"0x03 Shell脚本辅助命令\"></a>0x03 Shell脚本辅助命令</h2><h3 id=\"gzexe-命令-将每个可执行文件替换为其自身的压缩版本-脚本加密-。\"><a href=\"#gzexe-命令-将每个可执行文件替换为其自身的压缩版本-脚本加密-。\" class=\"headerlink\" title=\"gzexe 命令 - 将每个可执行文件替换为其自身的压缩版本(脚本加密)。\"></a>gzexe 命令 - 将每个可执行文件替换为其自身的压缩版本(脚本加密)。</h3><p>描述: 该命令可以就地压缩可执行文件并使其自动运行，当您运行它们时（在性能上会有损失）会自动解压缩并执行。</p>\n<p>主要应用场景: 在写数据库相关链接的Shell脚本时会包含一些敏感的密码这是不安全的，所以此时可以采用gzexe命令来加密这些脚本保证安全性。</p>\n<p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: /usr/bin/gzexe [OPTION] FILE...</span><br><span class=\"line\"><span class=\"comment\"># [OPTION]</span></span><br><span class=\"line\">-d 解压给定的可执行文件而不是压缩它们。</span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.最简单示例</span></span><br><span class=\"line\">~$ vim gzTest.sh</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> password = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World！gzexe Command\"</span></span><br><span class=\"line\">~$ gzexe gzTest.sh</span><br><span class=\"line\">gzTest.sh:       -2.7%</span><br><span class=\"line\">~$ chmod +x gzTest.sh &amp;&amp; ./gzTest.sh</span><br><span class=\"line\">Hello World！gzexe Command</span><br><span class=\"line\">~$ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.将二进制或者shell脚本进行混淆加密</span></span><br><span class=\"line\">gzexe /usr/bin/gdb <span class=\"comment\"># it will create the following two files:</span></span><br><span class=\"line\">-rwxr-xr-x  1 root root 1026675 Jun  7 13:53 /usr/bin/gdb  <span class=\"comment\"># 编码混淆后文件</span></span><br><span class=\"line\">-rwxr-xr-x  1 root root 2304524 May 30 13:02 /usr/bin/gdb~  <span class=\"comment\"># 原始文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.解密被加密的脚本(实际上就是一个解压的功能)</span></span><br><span class=\"line\">$ gzexe -d gzTest.sh</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">gzTest.sh  gzTest.sh~</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 一旦确定/usr/bin/gdb有效就可以删除/usr/bin/gdb~.</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"shell","path":"api/tags/shell.json"}]}