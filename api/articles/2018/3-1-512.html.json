{"title":"1.汇编语言零基础入门学习笔记(1)","slug":"编程世界/AssemblyLanguage/1.汇编语言零基础入门学习笔记(1)","date":"2018-03-01T05:34:30.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2018/3-1-512.html","path":"api/articles/2018/3-1-512.html.json","covers":["https://img.weiyigeek.top/2020/2/20201129132102.png","https://img.weiyigeek.top/2020/2/20201129132517.png","https://img.weiyigeek.top/2020/2/20201129132803.png","https://img.weiyigeek.top/2020/2/20201129124055.png","https://img.weiyigeek.top/2020/2/20201129220801.png","https://img.weiyigeek.top/2020/2/20201129222243.png","https://img.weiyigeek.top/2020/2/20201129225753.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-基础介绍\"><a href=\"#0x00-基础介绍\" class=\"headerlink\" title=\"0x00 基础介绍\"></a>0x00 基础介绍</h2><p>Q: 什么是汇编语言?</p>\n<blockquote>\n<p>答: 汇编语言（<code>Assembly Language</code>）是操作最底层的语言，是可以直接在硬件之上工作的编程语言，由于采用计算机语言操作计算机其效率是非常的高, 并且大多数驱动程序以及嵌入式开发都可以采用汇编语言的思想进行开发;</p>\n</blockquote>\n<p><br/></p>\n<p>Q: 如何学习汇编语言?</p>\n<blockquote>\n<p>1.了解汇编的用途; (如何利用硬件系统的结构和指令集进行有效灵活的控制系统进行工作)<br>2.了解硬件系统的结构;<br>3.了解各CPU指令集<br>4.多动手实践</p>\n</blockquote>\n<p><br/></p>\n<h3 id=\"1-1-机器语言\"><a href=\"#1-1-机器语言\" class=\"headerlink\" title=\"1.1 机器语言\"></a>1.1 机器语言</h3><p>Q: 什么是机器语言?</p>\n<blockquote>\n<p>机器语言是机器指令（<code>Machine Instruction</code>）的集合，简单的说就是一台机器可以正确执行的命令;</p>\n</blockquote>\n<p>例: 机器语言 01010000 (指令 PUSH AX) <code>其中 AX 表示堆栈</code>，而在CPU中工作原理则是电平脉冲的形式；</p>\n<p>早期使用计算机语言是将0(不打孔)、1(打孔)数字编程的程序代码打到纸带或者卡片上，然后再通过纸带机或者卡片机输入到计算机中进行运算，随着科技的发展后面用了继电器-&gt;电子管-&gt;晶体管-&gt;比如现在 CPU 采用石英震动表示0和1;</p>\n<p><br/></p>\n<h3 id=\"1-2-汇编组成\"><a href=\"#1-2-汇编组成\" class=\"headerlink\" title=\"1.2 汇编组成\"></a>1.2 汇编组成</h3><p>描述 : 汇编语言的核心是汇编指令，它决定了汇编语言的特性。 </p>\n<ul>\n<li>PS : 汇编指令和机器指令的差别在于指令的表示方法上，简单的说汇编指令是机器指令便于阅读、记忆的书写格式;</li>\n</ul>\n<p>例: 将寄存器BX的内容送到AX中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 机器指令: 1000100111011000</span></span><br><span class=\"line\"><span class=\"comment\"># 汇编指令: MOV AX,BX </span></span><br><span class=\"line\"></span><br><span class=\"line\">PS : 注意汇编指令是从从后往前操作的;</span><br></pre></td></tr></table></figure></p>\n<p>Q: 什么是寄存器?</p>\n<blockquote>\n<p>答: 简单的讲是CPU中可以存储数据的器件，注意一个CPU中有多个寄存器它是最接近CPU的（<code>不是一级或者二级缓存</code>），而上述的AX, BX分别表示不同的寄存器的代号;</p>\n</blockquote>\n<p>Q: 汇编语言或者高级语言如何被计算机识别执行的?</p>\n<blockquote>\n<p>汇编语言程序 -&gt; 汇编指令(mov ax,bx) -&gt; 编译器(complier) -&gt; 机器码(101010100….) -&gt; 计算机执行<br>高级语言程序 -&gt; 预处理（Pre-Processing）-&gt; 编译（Compiling）-&gt; 汇编指令(mov ax,bx) -&gt; 编译器(complier) -&gt; 机器码(101010100….) -&gt; 计算机执行;</p>\n</blockquote>\n<p>[-] 汇编语言的组成：</p>\n<ul>\n<li>1、汇编指令（<code>机器码的助记符</code>）：就比如mov，jmp之类的。</li>\n<li>2、伪指令（<code>由编译器执行</code>）：没有对应的机器码、由编译器执行，计算机是不认识的，把它转化为可识别的。</li>\n<li>3、其它符号（<code>由编译器识别</code>）：就是加减乘除之类的。</li>\n</ul>\n<p><br/></p>\n<h3 id=\"1-3-存储器\"><a href=\"#1-3-存储器\" class=\"headerlink\" title=\"1.3 存储器\"></a>1.3 存储器</h3><p>描述: CPU是整个计算机的核心组件，它控制了整改计算机的运作以及运算，但是想要让一个CPU正常工作就需得向它提供指令和数据；在我们电脑每个配件上都有存储器，并且指令和数据在存储器中存放，也就是平时所说的内存.</p>\n<ul>\n<li>PS : 在PC中内存是与CPU交换最为紧密的，如果CPU离开的内存性能再好也无法工作，值得注意的是磁盘不同于内存，磁盘上的数据或者程序如果不读到内存中CPU是无法获取和使用的;</li>\n<li>PS : 实际上我们编程就是要学习怎样用CPU去调用内存，与内存打交道.</li>\n</ul>\n<p><br/></p>\n<h3 id=\"1-4-指令和数据\"><a href=\"#1-4-指令和数据\" class=\"headerlink\" title=\"1.4 指令和数据\"></a>1.4 指令和数据</h3><p>描述: 指令和数据是应用上的概念。</p>\n<p>在内存或磁盘上，指令和数据没有任何区别，都是二进制信息;</p>\n<p>例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 1001 1101 1000 -&gt; 89D8H (数据)</span><br><span class=\"line\">1000 1001 1101 1000 -&gt; MOV AX,BX (程序)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"1-5-存储单元\"><a href=\"#1-5-存储单元\" class=\"headerlink\" title=\"1.5 存储单元\"></a>1.5 存储单元</h3><p>描述: 存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号.</p>\n<ul>\n<li><p>PS : 存储器不单单只是内存还有显存，GPU的速度比CPU快得多因为需要3D画面得渲染;</p>\n</li>\n<li><p>PS : 对于大容量的存储器一般还用以下单位来计量容量（以下用B来代表Byte）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1KB=1024B</span><br><span class=\"line\">1MB=1024KB</span><br><span class=\"line\">1GB=1024MB</span><br><span class=\"line\">1TB=1024GB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PS : 在日常生活中买的硬盘、U盘之类的，黑心厂商都是以1kb=1000b算的，所以买到手的会内存会少上一部分。</p>\n</li>\n</ul>\n<p>例: 一个存储器有128个存储单位，编号从0~127(从低地址到高地址)；</p>\n<p><br/></p>\n<h3 id=\"1-6-CPU对存储器的读写\"><a href=\"#1-6-CPU对存储器的读写\" class=\"headerlink\" title=\"1.6 CPU对存储器的读写\"></a>1.6 CPU对存储器的读写</h3><p>描述: CPU要想进行数据的读写，必须和外部器件（芯片）进行三类信息的交互：（<code>在哪里--怎么做--做什么</code> ）</p>\n<ul>\n<li>（1）存储单元的地址（地址信息）————–在哪里</li>\n<li>（2）器件的选择，读或写命令（控制信息）——-怎么做</li>\n<li>（3）读或写的数据（数据信息）—————-做什么</li>\n</ul>\n<p>Q: CPU是通过什么将地址、数据和控制信息传到存储芯片中得呢?</p>\n<blockquote>\n<p>答: 电子计算机能处理、传输得信息都是电信号，而电信号一般都是通过导线进行传输;</p>\n</blockquote>\n<ul>\n<li>PS : 处理器虽然在快速的更新换代，但是其核心是不变的（换汤不换药）。所以要拿老的处理器（CPU）来演示，毕竟老的简单一点，新的只是晶体管、寄存器、通道之类的数量变多了而已。</li>\n</ul>\n<p>在计算机中专门有连接CPU和其他芯片的导线，通常称为总线（Bus）。</p>\n<ul>\n<li>物理上：一根根导线的集合；</li>\n<li><p>逻辑上划分为：</p>\n<ul>\n<li><p>地址总线 -&gt; 地址信息: CPU是通过地址总线来指定存储单元的, 地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。<code>一个CPU有N根地址总线则可以说这个CPU得地址总线宽带位N，该CPU最多可以寻找2的N次方个内存单元</code>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 地址总线的命令分高低位，底位在上、高位在下。由高位往低位读，如课件中的`地址总线: 00 0000 1011 -&gt; 1011 数据地址`，前面不足8位就补0上去.</span><br><span class=\"line\">- 地址总线的命令发送到内存，就定位到内存这个地址，也就是指向这个地址。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.weiyigeek.top/2020/2/20201129132102.png\" alt=\"WeiyiGeek.地址总线\"></p>\n</li>\n<li><p>数据总线 -&gt; 数据信息 : CPU与内存或其它器件之间的数据传送是通过数据总线来进行的，数据总线的宽度决定了CPU和外界的数据传送速度(<code>控制CPU传输速度</code>)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 8088 CPU数据总线上一次只能传8位，需要传两次。</span><br><span class=\"line\">- 8086 CPU数据总线上一次能传16位，所以说一次就解决问题了。所以说宽度决定速度。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2020/2/20201129132517.png\" alt=\"WeiyiGeek.数据总线\"></p>\n</li>\n</ul>\n<ul>\n<li><p>控制总线 -&gt; 控制信息 : CPU对外部器件的控制是通过控制总线来进行的。控制总线是一些不同控制线的集合。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制, 所以<code>控制总线的宽度决定了CPU对外部器件的控制能力</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 同样发送一个 1011 控制总线就不是像地址总线那样了，地址总线的1010是指向到这个地址，而控制总线的1011则可能是是1是写、0是读、1是修改、1是读写。简略的说就是一条线一个命令了</span><br><span class=\"line\">- CPU 向外传送读信号，向该控制线上输出低电平表示将要读取的数据；</span><br><span class=\"line\">- CPU 向外传送写信号，向该控制线上输出高电平表示将要写入的数据；</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.weiyigeek.top/2020/2/20201129132803.png\" alt=\"WeiyiGeek.控制总线\"></p>\n</li>\n</ul>\n<p>例: 对于8086CPU下面得机器码能够完成从3号单元读数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 含义从3号单元读取数据送入寄存器AX，CPU接收这条机器码后将完成上面所述得读写工作;</span></span><br><span class=\"line\">机器码: 1010 0000 0000 0011 0000 0000</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>PS : 如何达到完全使用64操作系统需要以下几个方面，64位 CPU 、操作系统、软件 三个方面缺一不可;</p>\n</li>\n<li><p>PS : 其实就是上面的归纳的三步<code>在哪里--怎么做--做什么</code></p>\n</li>\n</ul>\n<p>三大Bus总结一览：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201129124055.png\" alt=\"WeiyiGeek.CPU在内存中读和写\" title=\"\" class=\"\">\n                <p>WeiyiGeek.CPU在内存中读和写</p>\n            </figure></p>\n<p><br/></p>\n<h3 id=\"1-7-内存地址空间\"><a href=\"#1-7-内存地址空间\" class=\"headerlink\" title=\"1.7 内存地址空间\"></a>1.7 内存地址空间</h3><p>Q: 什么是内存地址空间?</p>\n<blockquote>\n<p>例如一个CPU的地址总线宽度为10，那么其可以寻址1024个内存单元(2^10)由该内存单元构成这个CPU的内存地址空间;</p>\n</blockquote>\n<p>主板与接卡口基础知识补充:</p>\n<ul>\n<li>（1）在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件。这些器件通过总线（地址总线、数据总线、控制总线）相连。</li>\n<li>（2）计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。CPU对外部设备不能直接控制，如显示器、音箱、打印机等。直接控制这些设备进行工作的是插在扩展插槽上的接口卡。</li>\n</ul>\n<p>各类存储芯片基础知识补充:</p>\n<ul>\n<li>（1）从读写属性上看分为两类：随机存储器（RAM-断电之后就遗失掉了）和只读存储器（ROM-永远只能读，数据永远保存，除非删除掉。）</li>\n<li>（2）从功能和连接上分类：<code>随机存储器RAM、装有BIOS的ROM、接口卡上的RAM(显存)</code></li>\n</ul>\n<ul>\n<li>PS : 我们PC中的BIOS(<code>Basic Input/Output System，基本输入输出系统</code>)实际都是一种只读存储器(ROM)；</li>\n<li><p>PS : BIOS是由主板和各类接口卡（如：显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出, 在主板和某些接口卡上插有存储相应BIOS的ROM。</p>\n</li>\n<li><p>PC 中各类存储器的逻辑连接图示：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201129220801.png\" alt=\"WeiyiGeek.各类存储器\" title=\"\" class=\"\">\n                <p>WeiyiGeek.各类存储器</p>\n            </figure>\n</li>\n<li><p>PS : 上述存储器在物理上是独立器件，但是他们在以下两点上相同即(<code>1.都和CPU总线连接; 2.CPU对他们进行读或者写的时候都通过控制线发出内存读写命令;</code>)</p>\n</li>\n</ul>\n<p>将各类存储器看做一个逻辑存储器其分为三大块：<br>（1）主存储器地址空间<br>（2）显存地址空间<br>（3）各个接口ROM的地址空间</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201129222243.png\" alt=\"WeiyiGeek.的8086PC内存地址空间分配\" title=\"\" class=\"\">\n                <p>WeiyiGeek.的8086PC内存地址空间分配</p>\n            </figure>\n<ul>\n<li>PS : 不同的计算机系统的内存地址空间分配情况是不同的, 例如上面的8086PC内存地址空间分配的基本情况；</li>\n</ul>\n<p>内存地址空间:<br>（1）最终运行程序的是CPU，我们用汇编编程的时候，必须要从CPU角度考虑问题。(我们学习这门课程的核心思维)<br>（2）对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。这个逻辑存储器即是我们所说的<code>内存地址空间（也就是地址总线宽度喽 ）</code></p>\n<p><br/></p>\n<h3 id=\"1-8-小结\"><a href=\"#1-8-小结\" class=\"headerlink\" title=\"1.8 小结\"></a>1.8 小结</h3><p>（1）汇编指令是机器指令的助记符，同机器指令一一对应。<br>（2）每一种CPU都有自己的汇编指令集。<br>（3）CPU可以直接使用的信息在存储器中存放。<br>（4）在存储器中指令和数据没有任何区别，都是二进制信息。<br>（5）存储单元从零开始顺序编号（低地址-&gt;高地址）。<br>（6）一个存储单元可以存储 8 个 bit （用作单位写成“b”），即 8 位二进制数。<br>（7）每一个CPU芯片都有许多管脚，而管脚和总线相连也可以说这些管脚引出总线,CPU可以引出三种总线的宽度标志了这个CPU的不同方面的性能：</p>\n<ul>\n<li>地址总线的宽度决定了<code>CPU的寻址能力</code>；（例子：如有十根地址总线，就能看到4G内存前面的2^10=1024个存储单元=1kb东西而已）</li>\n<li>数据总线的宽度决定了<code>CPU与其它器件进行数据传送时的一次数据传送量</code>；（例子：速度不变，路越宽能走的车子肯定越多）</li>\n<li>控制总线宽度决定了<code>CPU对系统中其它器件的控制能力</code>。（例子：能同时执行越多的命令，控制能力肯定越强呀）</li>\n</ul>\n<hr>\n<h2 id=\"0x02-寄存器\"><a href=\"#0x02-寄存器\" class=\"headerlink\" title=\"0x02 寄存器\"></a>0x02 寄存器</h2><p>本章节主要讲解CPU内部通讯即CPU工作原理，以及非常重要的段地址x16+偏移地址的本质;</p>\n<h3 id=\"2-1-通用寄存器\"><a href=\"#2-1-通用寄存器\" class=\"headerlink\" title=\"2.1 通用寄存器\"></a>2.1 通用寄存器</h3><p>CPU 概述：</p>\n<ul>\n<li>1.由运算器、控制器、寄存器等三大器件组成，这些器件靠内部总线相连。</li>\n<li>2.区别:<ul>\n<li>内部总线实现CPU内部各个器件之间的联系。</li>\n<li>外部总线实现CPU和主板上其它器件的联系。</li>\n</ul>\n</li>\n</ul>\n<p>例 8086 的 CPU有 14 个寄存器它们的名称为：<code>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW</code>。</p>\n<ul>\n<li>PS : 8086 的 CPU 所有的寄存器都是16位的，可以存放两个字节(2B), 简单的说一个16位寄存器可以存储一个16位的数据。</li>\n<li>PS : 16位数据在寄存器中的存放情况：从0到15</li>\n<li>PS : AX、BX、CX、DX 通常用来存放一般性数据被称为通用寄存器。</li>\n</ul>\n<p>Q : 一个16位寄存器所能存储的数据的最大值为多少？</p>\n<blockquote>\n<p>答: 2^16-1 = 65535。</p>\n</blockquote>\n<p>8086上一代CPU中的寄存器都是8位的；为保证兼容性(向下兼容),下述的四个寄存器都可以分为<code>两个独立的8位寄存器使用</code>。（分为H高位与L低位）</p>\n<ul>\n<li>AX可以分为AH和AL；</li>\n<li>BX可以分为BH和BL；</li>\n<li>CX可以分为CH和CL；</li>\n<li>DX可以分为DH和DL。</li>\n</ul>\n<p>例: 以AX为例查看其逻辑结构及其16位数据在寄存器中的存放情况；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据: 20000</span><br><span class=\"line\">二进制表示: 0100 1110 0010 0000</span><br></pre></td></tr></table></figure><br>例: 以AX为例8086CPU的16位寄存器分为两个独立8位寄存器的情况如下; 如AX的低8位（0位~7位）构成了AL寄存器，高8位（8位~15位）构成了AH寄存器(<code>AH和AL寄存器是可以独立使用的8位寄存器。</code>)。<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201129225753.png\" alt=\"WeiyiGeek.AX的16位数据在寄存器表示以及两个8位寄存器\" title=\"\" class=\"\">\n                <p>WeiyiGeek.AX的16位数据在寄存器表示以及两个8位寄存器</p>\n            </figure></p>\n<p>Q: 同样一个8位寄存器所能存储的数据的最大值是多少？</p>\n<blockquote>\n<p>答：2^8-1 = 254。</p>\n</blockquote>\n<ul>\n<li>PS : 一个字等于两个字节</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"学习笔记","path":"api/categories/学习笔记.json"}],"tags":[{"name":"AssemblyLanguage","path":"api/tags/AssemblyLanguage.json"}]}