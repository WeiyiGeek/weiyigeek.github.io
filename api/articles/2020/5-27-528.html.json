{"title":"6-Kubernetes入门基础之服务发现Service介绍","slug":"虚拟云容/云容器/Kubernetes/6-Kubernetes入门基础之服务发现Service介绍","date":"2020-05-27T10:37:47.000Z","updated":"2022-05-08T09:54:45.273Z","url":"2020/5-27-528.html","path":"api/articles/2020/5-27-528.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201112151412.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201112152643.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113213248.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113214118.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113215654.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113172111.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113220901.png"],"content":"<p>[toc]</p>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><h3 id=\"Service-服务介绍\"><a href=\"#Service-服务介绍\" class=\"headerlink\" title=\"Service - 服务介绍\"></a>Service - 服务介绍</h3><p>描述: K8s中的Service实际上是微服务框架中的微服务，Service定义了一个服务的访问入口，可以通过该入口访问其背后一组的有Pod副本组成的集群实例;</p>\n<p><strong>Q: 什么是Service服务?</strong></p>\n<blockquote>\n<p>答: kubernetes 通过Labels(标签)选择的方式来匹配一组pod，然后提供对外访问的一种机制，一组pod可以对应到多个svc的, 每一个service(svc)都可以理解为一个微服务</p>\n</blockquote>\n<p>Service有且只有一个算法 RB 轮询， 它能够提供负载均衡的能力但是在使用上有以下限制：</p>\n<ul>\n<li>提供4层负载均衡能力【只能基于ip地址和端口进行转发】</li>\n<li>提供7层功能【不能通过主机名及域名的方案去进行负载均衡】，但有时我们可能需要更多的匹配规则来转发请求，这点上4层负载均衡是不支持的;</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201112151412.png\" alt=\"WeiyiGeek.Service服务连接图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Service服务连接图</p>\n            </figure>\n<p><br></p>\n<p><strong>Q: Service 如何与后端Pod关联?</strong></p>\n<blockquote>\n<p>答: SVC 与其后端的Pod多个副本集群通过Lable Selector进行关联(<code>采用等式或者集合进行过滤</code>), 而构建这些Pod的RS、Deployment、StatefulSet等控制器是保证Pod数量满足预选定义值;</p>\n</blockquote>\n<p>关联图示如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frontend pod -&gt; Service(SVC) -&gt;                   -&gt; Pod `lable:app=backend`</span><br><span class=\"line\">                                  Label Selector  -&gt; pod `lable:app=backend`</span><br><span class=\"line\">                Controller   -&gt;                   -&gt; pod `lable:app=backend`</span><br></pre></td></tr></table></figure><br><br></p>\n<p><strong>Q: 微服务给我们带来来什么好处?</strong></p>\n<blockquote>\n<p>答: 复杂的系统微服务服务化，由<code>多个提供不同业务服务而彼此独立的微服务(Kubernetes Service)组成</code>，服务之间通过TCP/IP协议进行通信，便拥有了<code>强大的分布式、水平弹性扩展能力</code>;</p>\n</blockquote>\n<p><br></p>\n<p><strong>Q: 什么是EndPoint?</strong></p>\n<blockquote>\n<p>答: 它实际上就是我们所说的端点，默认情况下每个Pod将提供一个独立端点供SVC或者其它Pod进行访问，而端点实际上就是<code>Pod IP + Container Port</code>的组合;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get ep -o wide</span><br><span class=\"line\">NAME               ENDPOINTS                                                              AGE</span><br><span class=\"line\">deploy-blog-svc    10.244.0.209:80,10.244.1.196:80,10.244.2.99:80 <span class=\"comment\"># 对应则三个Pod          34d </span></span><br><span class=\"line\">deploy-maven-svc   10.244.0.236:8080,10.244.1.221:8080,10.244.2.124:8080                  32d</span><br><span class=\"line\">kubernetes         10.10.107.202:6443                                                     83d</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><br></p>\n<p><strong>Q: 采用Lable关联Controller创建的Pod后如何进行EndPoint访问?</strong></p>\n<blockquote>\n<p>答: 传统做法是前端部署一个负载均衡器（比如Nginx）并为该组开放一个对外端口例如8080，并将这些Pod的EndPoint转发到Nginx上，之后客户端将可以通过Nginx负载均衡(LB)对外的IP和Port来访问服务, 而对于Client的请求最终会被分发到那个Pod是由负载均衡器算法决定的;</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -o wide --show-labels</span><br><span class=\"line\">NAME                                      READY   STATUS   AGE    IP             NODE          LABELS <span class=\"comment\"># 关键点</span></span><br><span class=\"line\">deploy-blog-html-0                        1/1     Running  34d    10.244.0.209   weiyigeek-ubuntu   app=blog-html,controller-revision-hash=deploy-blog-html-b56f6cf65,release=stabel,statefulset.kubernetes.io/pod-name=deploy-blog-html-0</span><br><span class=\"line\">deploy-blog-html-1                        1/1     Running  34d    10.244.1.196   k8s-node-4    app=blog-html,controller-revision-hash=deploy-blog-html-b56f6cf65,release=stabel,statefulset.kubernetes.io/pod-name=deploy-blog-html-1</span><br><span class=\"line\">deploy-blog-html-2                        1/1     Running  34d    10.244.2.99    k8s-node-5    app=blog-html,controller-revision-hash=deploy-blog-html-b56f6cf65,release=stabel,statefulset.kubernetes.io/pod-name=deploy-blog-html-2</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -o wide --show-labels</span><br><span class=\"line\">NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE   SELECTOR <span class=\"comment\"># 关键点                LABELS</span></span><br><span class=\"line\">deploy-blog-svc    NodePort    10.104.74.36    &lt;none&gt;        80:30088/TCP     34d   app=blog-html,release=stabel    &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>Q: k8S 如何实现负载均衡?</strong></p>\n<blockquote>\n<p>答: 在K8s架构中我们提到过Kube-Proxy组件它实际上实现了一个<code>软件负载均衡器的作用</code>，负责把Service的请求转发到某一个具体后端Pod实例上，并且在内部实现了回话保持的机制;</p>\n</blockquote>\n<p>Tips : Pod 的EndPoint点可能会随着Pod的销毁或重新创建而发生改变，K8s为每个Service都<code>分配了一个Cluster IP的全局虚拟IP</code>，一旦Service被创建其生命周期内该IP会一直保持不变, 所以只要Service Name 与 Service 的 Cluster IP 做一个DNS域名映射就可以轻松的解决服务发现的问题;</p>\n<p>–</p>\n<h2 id=\"0x01-服务发现\"><a href=\"#0x01-服务发现\" class=\"headerlink\" title=\"0x01 服务发现\"></a>0x01 服务发现</h2><p>描述: 谈到微服务的服务发现，那么久离不开服务发现这个棘手的问题，前面说了Service与Cluster IP关联原理，但随之而来的是K8S如何做到四层/七层服务发现的呢?</p>\n<h3 id=\"四层服务发现\"><a href=\"#四层服务发现\" class=\"headerlink\" title=\"四层服务发现\"></a>四层服务发现</h3><p>描述: 四层服务发现主要有两种方式<code>环境变量或者DNS</code>;</p>\n<p><strong>环境变量-environment</strong><br>说明: 在K8s早期采用了Linux环境变量的方式,即每个Service生成一些对应的Linux环境变量，并在Pod启动时自动注入这些变量;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it deploy-blog-html-0 env</span><br><span class=\"line\">  <span class=\"comment\"># PATH=/usr/local/nginx/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span></span><br><span class=\"line\">  <span class=\"comment\"># HOSTNAME=deploy-blog-html-0</span></span><br><span class=\"line\">  <span class=\"comment\"># TERM=xterm</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_SERVICE_PORT=80</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_PORT_80_TCP_ADDR=10.104.74.36</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_SERVICE_PORT=443</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_PORT_443_TCP_PROTO=tcp</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_SERVICE_HOST=10.104.74.36</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_PORT_80_TCP=tcp://10.104.74.36:80</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_PORT_80_TCP_PORT=80</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_SERVICE_PORT_HTTPS=443</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_PORT=tcp://10.96.0.1:443</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_PORT=tcp://10.104.74.36:80</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_PORT_80_TCP_PROTO=tcp</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span></span><br><span class=\"line\">  <span class=\"comment\"># DEPLOY_BLOG_SVC_SERVICE_PORT_HTTP=80</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_SERVICE_HOST=10.96.0.1</span></span><br><span class=\"line\">  <span class=\"comment\"># KUBERNETES_PORT_443_TCP_PORT=443</span></span><br><span class=\"line\">  <span class=\"comment\"># NGINX_VERSION=1.19.4</span></span><br><span class=\"line\">  <span class=\"comment\"># NJS_VERSION=0.4.4</span></span><br><span class=\"line\">  <span class=\"comment\"># PKG_RELEASE=1~buster</span></span><br><span class=\"line\">  <span class=\"comment\"># IMAGE_VERSION=3.0</span></span><br><span class=\"line\">  <span class=\"comment\"># HOME=/root</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 然而采用环境变量注入的方式有很大的局限性，环境变量信息只能注入到后于该Service启动的Pod，而先启动的Pod则是查询不到后启动的Service环境变量即</p>\n<p><br></p>\n<p><strong>DNS</strong><br>描述: 鉴于环境变量的方式的局限性以及SVC的<code>Cluster IP</code>的可读性差等问题引入了DNS方式进行服务发现，利用Service Name做为DNS域名，应用程序或者集群中的其它服务可以通过域名+Port形式直接访问服务;</p>\n<p>资源清单示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; services-dns-test.yaml &lt;&lt;<span class=\"string\">'END'</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Pod</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: busybox-dns-test</span><br><span class=\"line\">  namespace: default</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  containers:</span><br><span class=\"line\">  - name: busybox</span><br><span class=\"line\">    image: busybox:latest</span><br><span class=\"line\">    imagePullPolicy: <span class=\"string\">\"IfNotPresent\"</span></span><br><span class=\"line\">    <span class=\"built_in\">command</span>: [<span class=\"string\">\"sleep\"</span>,<span class=\"string\">\"3000\"</span>]</span><br><span class=\"line\">  restartPolicy: Never</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>操作实践:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/K8s/Day13$ kubectl create -f services-dns-test.yaml</span><br><span class=\"line\">  <span class=\"comment\"># pod/busybox-dns-test created</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -o wide | grep <span class=\"string\">\"dns\"</span></span><br><span class=\"line\">  <span class=\"comment\"># busybox-dns-test   1/1     Running    44s    10.244.0.237   weiyigeek-ubuntu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Service</span></span><br><span class=\"line\">$ kubectl get svc</span><br><span class=\"line\">  <span class=\"comment\"># NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># deploy-blog-svc    NodePort    10.104.74.36    &lt;none&gt;        80:30088/TCP     34d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过Nslookup命令查看前面创建的 deploy-blog-svc</span></span><br><span class=\"line\">~/K8s/Day13$ kubectl <span class=\"built_in\">exec</span> -it busybox-dns-test -- sh -c <span class=\"string\">\"nslookup -type=a deploy-blog-svc\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Server:         10.244.0.185</span></span><br><span class=\"line\">  <span class=\"comment\"># Address:        10.244.0.185:53</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Name:   deploy-blog-svc.default.svc.cluster.local</span></span><br><span class=\"line\">  <span class=\"comment\"># Address: 10.104.74.36</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"七层服务发现\"><a href=\"#七层服务发现\" class=\"headerlink\" title=\"七层服务发现\"></a>七层服务发现</h3><p>描述: 在实际的应用场景中一定是由某些服务要暴露给用户或者集群外部访问的比如网站服务, 而此时前面所提的四层服务发现仅仅限于K8s集群内部访问, 通过需要我们的前端代理来进行实现，例如采用<code>Nginx-Ingress 或者 Traefik-Ingress</code>进行实现;</p>\n<p><strong>Q: K8s集群 Pod 间互访的原理</strong></p>\n<blockquote>\n<p>答: Pod IP 是由Docker Daemon(Docker Engine) 根据 <code>docker0</code> 网桥IP地址分配的或者是网络插件Flannel实现的, 即Pod间的通信是通过Pod IP所在虚拟二层网络通信的，而真实的TCP/IP流量是通过Node的网卡流出;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip addr | grep flannel -B 3</span><br><span class=\"line\"><span class=\"comment\"># 6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default</span></span><br><span class=\"line\"><span class=\"comment\">#     link/ether 2e:d6:4c:68:a3:24 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"comment\">#     inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7: cni0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP group default qlen 1000</span></span><br><span class=\"line\"><span class=\"comment\">#     link/ether 2e:5d:21:a6:1e:c2 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"comment\">#     inet 10.244.0.1/24 brd 10.244.0.255 scope global cni0</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                 READY   STATUS      AGE     IP # 关键点           NODE         </span></span><br><span class=\"line\">  <span class=\"comment\"># busybox-dns-test     0/1     Completed   119m    10.244.0.237   weiyigeek-ubuntu</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Tips: Service 的 Cluster IP 与 Pod IP 类似属于集群的内部地址属于虚拟IP，无法直接被其他K8S集群所访问;<br>Tips: Cluster IP 是通过集群的内部IP暴露服务，选择该值服务只能够在集群内部可以访问即默认为<code>ServiceType = ClusterIP</code></p>\n<p><br/></p>\n<p>Tips : 下面是几个常用于外部访问内部服务的方式:</p>\n<ul>\n<li>NodePort : 采用Kube-Proxy组件每个节点将为其Service开放一个30000~32000的外部端口</li>\n<li>LoadBalancer : 支持使用外部负载均衡的云提供商服务比如GCE或者AWS, lB是异步创建其信息将会通过Service的status.loadBalance字段发布出去;</li>\n<li>ExternalName : 通过返回CNAME 和 其值,可以将服务映射到ExternalName字段内<code>例如foo.example.com</code>(注意没有任何可u下代理被创建/只有Kubernetes V1.7或者更高版本的Kube-DNS支持)</li>\n</ul>\n<p><br></p>\n<h3 id=\"代理实现原理\"><a href=\"#代理实现原理\" class=\"headerlink\" title=\"代理实现原理\"></a>代理实现原理</h3><p>描述: 访问k8s集群中创建的内部Pod端口流程示意图, 其中Pod中的容器端口需要加入到EndPoints端点控制器里面;</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201112152643.png\" alt=\"WeiyiGeek.访问内部Pod端口流程示意图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.访问内部Pod端口流程示意图</p>\n            </figure>\n<p><strong>作用解析:</strong></p>\n<ul>\n<li>apiServer: 监听服务和端点通过kube-proxy去监控，以及通过监控kube-proxy去实现服务端点信息的发现;</li>\n<li>kube-proxy: 通过选择标签去监控对应的pod并写入到iptable规则里面去;</li>\n<li>client: 访问服务时通过iptables中的规则被定向到pod的地址信息(客户端访问pod是通过iptables去实现的);</li>\n<li>iptables : 规则是通过kube-proxy去写入的;</li>\n</ul>\n<p><br></p>\n<p><strong>k8s代理模式的分类</strong><br>描述: 在Kubernetes集群中，每个Node 运行一个kube-proxy 进程。kube-proxy负责为service 实现了一种VIP（虚拟IP）的形式【可以在集群内部直接访问】，而不是ExternalName【返回集群外部的地址信息】 的形式。</p>\n<ul>\n<li>在Kubernetes v1.0 版本，代理完全由userspace实现。</li>\n<li>在Kubernetes v1.1 版本，新增了iptables代理，但并不是默认的运行模式。</li>\n<li>在Kubernetes v1.2 版本起，默认就是 iptables 代理。</li>\n<li>在Kubernetes v1.14 版本起，默认使用 ipvs 代理但是缺省还是IPtables。</li>\n</ul>\n<p><br></p>\n<p><strong>Userspace - 代理模式</strong><br>描述: 客户端首先访问 iptables，然后通过 iptables 访问到 <code>kube-proxy</code> 之后访问到具体的pod上,同时kube-apiserver也会监控kube-proxy服务更新及端点的维护;<br>从上面描述过程中我们知道每次访问的时候都需要 <code>Kube-proxy</code> 进行一次代理, 这会导致 kube-proxy 压力是非常大的;</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113213248.png\" alt=\"WeiyiGeek.userspace-Proxy模式\" title=\"\" class=\"\">\n                <p>WeiyiGeek.userspace-Proxy模式</p>\n            </figure>\n<p><br/></p>\n<p><strong>IPtables - 代理模式</strong><br>描述: 它在Userspace代理模式下进行改变，即所有的访问直接通过IPtables而不需要Kube-Proxy去调度访问; 此时 kube-apiserver 依然通过监控kube-proxy去实现iptables的端口的更新维护</p>\n<p>优点: 访问速度大大增加以及Kube-Proxy稳定性会提高，并且承受的压力将会减少很多;<br>缺点: 性能方面还有待提高;</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113214118.png\" alt=\"WeiyiGeek.IPtables-Proxy模式\" title=\"\" class=\"\">\n                <p>WeiyiGeek.IPtables-Proxy模式</p>\n            </figure>\n<p><br></p>\n<p><strong>IPvs - 代理模式</strong><br>描述: IPVS模式实际是将iptables代理模式中iptables变更为ipvs, 即把原本是通过iptables进行服务定向转发变成了通过IPVS模块去实现负载均衡以及流量导向，其他的方面与IPtables代理模式相同所有的访问也是不经过Kube-Proxy的;<br>该模式 kube-proxy 会监视 Kubernetes service 对象和 Endpoints，调用netlink 接口以相应地创建ipvs 规则并定期与Kubernetes service 对象和 Endpoints 对象同步 ipvs规则，以确保ipvs状态与期望一致。当访问服务时流量将被重定向到其中一个后端 Pod;</p>\n<p>优点：ipvs基于Netfilter的hook功能，在内核空间中使用哈希表作为底层数据结构，使得 ipvs 可以更快地重定向流量，并且在同步代理规则时具有更好的性能，此外ipvs为负载均衡算法提供了更多的选项;</p>\n<p>PS : 如果操作系统没有提前预安装ipvs模块以及其依赖需求不满足时，K8S将会默认使用iptables的代理模式;</p>\n<blockquote>\n<p>假定在运行kube-proxy之前在节点上都已经安装了IPVS内核模块。<br>例如当 kube-proxy 以ipvs代理模式启动时，kube-proxy将验证节点上是否安装了IPVS模块，如果未安装则kube-proxy将回退到iptables代理模式</p>\n</blockquote>\n<p>IPVS 负载均衡算法:</p>\n<ul>\n<li>·rr：轮询调度</li>\n<li>·1c：最小连接数</li>\n<li>·dh：目标哈希</li>\n<li>·sh：源哈希</li>\n<li>·sed: 最短期望延迟</li>\n<li>·nq：不排队调度</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113215654.png\" alt=\"WeiyiGeek.ipvs-Proxy模式\" title=\"\" class=\"\">\n                <p>WeiyiGeek.ipvs-Proxy模式</p>\n            </figure>\n<p><br/></p>\n<p><strong>负载均衡</strong></p>\n<ul>\n<li>在Kubernetes v1.0 版本，service 是“4层”（TCP/UDP over IP)即只能通过主机和端口进行负载概念。</li>\n<li>在Kubernetes v1.1 版本，新增了IngressAPI(beta版)，用来表示“7层”（HTTP）服务！可以进行7层的负载均衡。正是因为有了Ingress的API接口，我们才有了7层调度的功能。</li>\n</ul>\n<p><strong>Q: 为何不使用 round-robin DNS?</strong><br>答: k8s不管是历史还是现在都没有使用过DNS，不采用DNS负载均衡集群，最大最有意义的一点就是DNS会在很多的客户端里进行缓存，很对服务访问DNS进行域名解析的时候解析完成以后得到地址以后很多的服务都不会对DNS的缓存进行清除，也就意味着只要缓存存在服务在下次访问的时候还是这个地址信息，因此也就达不到我们负载均衡的要求了，因此DNS一般仅仅作为负载均衡的一种辅助手段;</p>\n<p><br/></p>\n<p>Tips : 注意此处的四与七层不是OSI模型中的概念而是负载均衡中的概念, 你可以简单通过以下两个例子进行了解;</p>\n<ul>\n<li>四层负载均衡原理: 在接受到客户端请求后，通过修改数据包得<code>目的/源地址信息与端口号(ip+端口号)</code>将流量转发到应用服务器;</li>\n<li>七层负载均衡原理: 可以对同一个Web服务器进行负载，它除了根据IP加端口进行负载外，还可根据<code>http协议中的URL/浏览器类别/语言</code>来决定是否要进行负载均衡;</li>\n</ul>\n<hr>\n<h2 id=\"0x02-服务发现类型\"><a href=\"#0x02-服务发现类型\" class=\"headerlink\" title=\"0x02 服务发现类型\"></a>0x02 服务发现类型</h2><p>描述: 在K8s集群中Service服务发现方式有以下四种类型<code>ServiceType</code>;</p>\n<ul>\n<li><p>1) ClusterIP ： 默认类型，自动分配一个仅Cluster内部可以访问的虚拟IP(<code>常常由 flannel/Calico 网络插件进行管理</code>)【service创建一个仅集群内部可访问的ip，集群内部其他的pod可以通过该服务访问到其监控下的pod】</p>\n</li>\n<li><p>2) NodePort ：在ClusterlP基础上为Service在每台机器上绑定一个端口，这样就可以通过 NodePort来访问该服务【在service及各个node节点上开启端口，外部的应用程序或客户端访问node的端口将会转发到service的端口，而service将会依据负载均衡随机将请求转发到某一个pod的端口上。一般暴露服务常用的类型】</p>\n<ul>\n<li>注意: 为了防止某一个Node节点down掉建议将集群中所有Node节点地址+端口都设置进入负载均衡中;</li>\n</ul>\n</li>\n<li><p>3) LoadBalancer ：在NodePort的基础上，借助 cloud provider 创建一个外部负载均衡器(在云主机构建K8s基础上)，并将请求转发到：NodePort【在NodePort基础之上，即各个节点前加入了负载均衡器实现了真正的高可用，一般云供应商提供的k8s集群就是这种，即本身自带负载均衡器】</p>\n</li>\n<li><p>4) ExternalName : 把集群外部的服务引入到集群内部来在集群内部直接使用。没有任何类型代理被创建，这只有kubernetes 1.7 或更高版本的kube-dns 才支持【当我们的集群服务需要访问k8s之外的集群时，可以选择这种类型，然后把外部服务的IP及端口写入到k8s服务中来，k8s的代理将会帮助我们访问到外部的集群服务】</p>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"ClusterIP-Service\"><a href=\"#ClusterIP-Service\" class=\"headerlink\" title=\"ClusterIP - Service\"></a>ClusterIP - Service</h3><p>描述: 它主要在每个 Node 节点使用 iptables【<code>新版本默认是ipvs代理模式，并且笔者安装的K8s集群时也采用的IPVS模块因此此处为ipvs，代理模式不同所使用的底层方案也是不一致的</code>】，将发向clusterlP对应端口的数据，转发到kube-proxy中。<br>kube-proxy自己内部实现有负载均衡的方法，并可以查询到这个service下对应pod的地址和端口，进而把数据转发给对应的pod的地址和端口；</p>\n<p>Tips : 采用IPVS模块替代了IPtables,其实还是采用IPtables中类似于netfilter的Hook功能进行实现的;</p>\n<p>为了实现图上的功能，主要需要以下几个组件进行协同工作：</p>\n<ul>\n<li>(1) ApiServer : 用户通过kubectl命令向apiserver发送创建service的命令，apiserver接收到请求后将数据存储到etcd中</li>\n<li>(2) Kube-proxy : 每个节点中都有一个叫做kube-porxy的进程，这个进程负责感知service，pod的变化，并将变化的信息写入本地的iptables规则中</li>\n<li>(3) IPtables : 使用NAT等技术将virtuallP的流量转至endpoint中</li>\n</ul>\n<p>ClusterIP 资源清单示例(注意此处采用的是IPVS负载均衡技术与Flannel网络插件):<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; ClusterIP-demo.yaml &lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"string\"># Namespace ：后面的 Service 演示的资源清单都将放入在该名称空间下</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    keys:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Deployment 资源控制器 </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">clusterip-deploy</span> </span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  replicas:</span> <span class=\"number\">3</span> </span><br><span class=\"line\"><span class=\"attr\">  selector:</span>                  <span class=\"comment\"># 选择器</span></span><br><span class=\"line\"><span class=\"attr\">    matchLabels:</span>  </span><br><span class=\"line\"><span class=\"attr\">      app:</span> <span class=\"string\">nginx-clusterip</span>   <span class=\"comment\"># 匹配的Pod标签非常重要</span></span><br><span class=\"line\"><span class=\"attr\">      release:</span> <span class=\"string\">stabel</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      labels:</span></span><br><span class=\"line\"><span class=\"attr\">        app:</span> <span class=\"string\">nginx-clusterip</span>  <span class=\"comment\"># 模板标签</span></span><br><span class=\"line\"><span class=\"attr\">        release:</span> <span class=\"string\">stabel</span></span><br><span class=\"line\"><span class=\"attr\">        env:</span> <span class=\"string\">test</span> </span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">harbor.weiyigeek.top/test/nginx:v2.0</span></span><br><span class=\"line\"><span class=\"attr\">        imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">http</span>         <span class=\"comment\"># 此端口在服务中的名称</span></span><br><span class=\"line\"><span class=\"attr\">          containerPort:</span> <span class=\"number\">80</span>  <span class=\"comment\"># 容器暴露的端口</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># Services 服务发现</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span> </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">clusterip-deploy</span> </span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">ClusterIP</span>         <span class=\"comment\"># Service 类型</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">nginx-clusterip</span>  <span class=\"comment\"># 【注意】与deployment资源控制器创建的Pod标签进行绑定;</span></span><br><span class=\"line\"><span class=\"attr\">    release:</span> <span class=\"string\">stabel</span>       <span class=\"comment\"># Service 服务发现不能缺少Pod标签，有了Pod标签才能与之SVC对应</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span>                  <span class=\"comment\"># 映射端口</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">http</span>            </span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">80</span>              <span class=\"comment\"># cluster 访问端口</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">80</span>        <span class=\"comment\"># Pod 容器内的服务端口</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p>操作流程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 资源清单的部署</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl create -f ClusterIP-demo.yaml</span><br><span class=\"line\">  <span class=\"comment\"># namespace/service-test created</span></span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/clusterip-deploy created</span></span><br><span class=\"line\">  <span class=\"comment\"># service/clusterip-deploy created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看资源控制器管理的pod</span></span><br><span class=\"line\">$ kubectl get ns  | grep <span class=\"string\">\"service-test\"</span></span><br><span class=\"line\">  <span class=\"comment\"># service-test      Active   5m23s</span></span><br><span class=\"line\">$ kubectl get deploy -n service-test -o wide --show-labels  <span class=\"comment\"># deployment 控制器</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME               READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES                                 SELECTOR                             LABELS</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy   3/3     3            3           6m5s   nginx        harbor.weiyigeek.top/test/nginx:v2.0   app=nginx-clusterip,release=stabel   &lt;none&gt;</span></span><br><span class=\"line\">$ kubectl get rs -n service-test -o wide --show-labels      <span class=\"comment\"># 受到 deployment 资源控制器管理，但是由ReplicaSet资源控制器创建Pod</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                          DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                                 SELECTOR                                                          LABELS</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b   3         3         3       6m53s   nginx        harbor.weiyigeek.top/test/nginx:v2.0   app=nginx-clusterip,pod-template-hash=76b69d5c5b,release=stabel   app=nginx-clusterip,env=test,pod-template-hash=76b69d5c5b,release=stabel</span></span><br><span class=\"line\">$ kubectl get pod -n service-test -o wide --show-labels <span class=\"comment\"># pod 相关信息</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE     IP             NODE        LABELS</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-cnfrm   1/1     Running   0          8m33s   10.244.1.108   k8s-node-4  app=nginx-clusterip,env=test,pod-template-hash=76b69d5c5b,release=stabel</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-cx8r6   1/1     Running   0          8m33s   10.244.1.107   k8s-node-4  app=nginx-clusterip,env=test,pod-template-hash=76b69d5c5b,release=stabel</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-qkwjs   1/1     Running   0          8m33s   10.244.1.109   k8s-node-4  app=nginx-clusterip,env=test,pod-template-hash=76b69d5c5b,release=stabel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 查看 Service 资源控制器</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl get svc -n service-test -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy   ClusterIP   10.108.129.19   &lt;none&gt;        80/TCP    10m   app=nginx-clusterip,release=stabel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 访问 &amp; 结果验证</span></span><br><span class=\"line\">~/K8s/Day6$ curl http://10.108.129.19/host.html</span><br><span class=\"line\">  Hostname: clusterip-deploy-76b69d5c5b-cx8r6  &lt;br&gt; <span class=\"comment\"># 基于 IPVS 负载轮询机制(Round-Robin)</span></span><br><span class=\"line\">  Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span><br><span class=\"line\">  Nginx Version: 1.19.4</span><br><span class=\"line\">~/K8s/Day6$ curl http://10.108.129.19/host.html</span><br><span class=\"line\">  Hostname: clusterip-deploy-76b69d5c5b-cnfrm  &lt;br&gt;</span><br><span class=\"line\">  Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span><br><span class=\"line\">  Nginx Version: 1.19.4</span><br><span class=\"line\">~/K8s/Day6$ curl http://10.108.129.19/host.html</span><br><span class=\"line\">  Hostname: clusterip-deploy-76b69d5c5b-qkwjs  &lt;br&gt;</span><br><span class=\"line\">  Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span><br><span class=\"line\">  Nginx Version: 1.19.4</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ipvsadm -Ln | grep <span class=\"string\">\"10.108.129.19\"</span> -A 3  <span class=\"comment\"># ipvs 负载均衡</span></span><br><span class=\"line\"><span class=\"comment\"># IP Virtual Server version 1.2.1 (size=4096)</span></span><br><span class=\"line\"><span class=\"comment\"># Prot LocalAddress:Port Scheduler Flags</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn   </span></span><br><span class=\"line\"><span class=\"comment\">#   TCP  10.108.129.19:80 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1 # 权重      0 # 当前连接数  1 # 命中数</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1             0              1</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1             0              1</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Headless-Service\"><a href=\"#Headless-Service\" class=\"headerlink\" title=\"Headless - Service\"></a>Headless - Service</h3><p>描述：Headless Service 即无头服务，它也是一种特殊的Cluster IP, 当某应用不需要、不想要负载均衡(<code>暂时不需要访问</code>)以及单独的Service IP时；</p>\n<p>简单的说: 即为了更好的转发性能, 我们希望可以自己<code>控制负载均衡策略来替代K8s默认的负载策略</code>, 或者一个应用期望知道同组服务的其他实例。 </p>\n<p>特点: 通过无头服务的方式去解决 hostname 和 portname 的变化问题也就是通过它去进行绑定;</p>\n<p>配置: 通过指定 ClusterIP (.spec.clusterIP) 的值为 <code>None</code> 来创建 Headless Service。<br>PS : 这类 Service 并不会分配 Cluster IP 并且 kube-proxy 不会处理它们，所以平台也不会为它们进行负载均衡和路由；</p>\n<p>Headless 资源清单示例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; headless-demo.yaml &lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span> </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">myapp-headless</span> </span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"comment\"># type: Headless          # Service 类型</span></span><br><span class=\"line\"><span class=\"attr\">  clusterIP:</span> <span class=\"string\">\"None\"</span>       <span class=\"comment\"># 改变点实际上就是基于ClsterIP实现的</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">nginx-clusterip</span>  <span class=\"comment\"># 选择上面创建的Pod标签</span></span><br><span class=\"line\"><span class=\"attr\">    release:</span> <span class=\"string\">stabel</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - port:</span> <span class=\"number\">80</span> </span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p>操作流程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 创建 svc 服务</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl apply -f headless-demo.yaml</span><br><span class=\"line\">  <span class=\"comment\"># service/myapp-headless created</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl get svc -n service-test</span><br><span class=\"line\">  <span class=\"comment\"># NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy   ClusterIP   10.108.129.19   &lt;none&gt;        80/TCP    18h  # app=nginx-clusterip,release=stabel</span></span><br><span class=\"line\">  <span class=\"comment\"># myapp-headless     ClusterIP   None #(观察点)   &lt;none&gt;        80/TCP    15s  # app=nginx-clusterip,release=stabel</span></span><br><span class=\"line\">$ kubectl get pod -n service-test -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-cnfrm   1/1     Running   0          24h   10.244.1.108   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-cx8r6   1/1     Running   0          24h   10.244.1.107   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy-76b69d5c5b-qkwjs   1/1     Running   0          24h   10.244.1.109   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 在SVC中一旦创建成功后,他将写入到coreDNS中去,并且会有一个主机名被写入到coreDNS中;</span></span><br><span class=\"line\"><span class=\"comment\"># 写入格式 : svc的名称+命名空间的名称+当前集群的域名</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl get pod -n kube-system -o wide | grep <span class=\"string\">\"coredns\"</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6c76c8bb89-8cgjz              1/1     Running   1          7d18h   10.244.0.5      ubuntu   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># coredns-6c76c8bb89-wgbs9              1/1     Running   1          7d18h   10.244.0.4      ubuntu   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 意味着在无头服务中虽然它没有ip了，但可以通过访问域名的方案依然可以访问服务下的pod;</span></span><br><span class=\"line\"><span class=\"comment\"># 需要将 10.244.0.5 CoreDNS 设置到 /etc/resolv.conf</span></span><br><span class=\"line\">$ cat /etc/resolv.conf</span><br><span class=\"line\">  <span class=\"comment\"># nameserver 127.0.0.53</span></span><br><span class=\"line\">  <span class=\"comment\"># nameserver 10.244.0.5</span></span><br><span class=\"line\">  <span class=\"comment\"># options edns0</span></span><br><span class=\"line\"><span class=\"comment\"># apt -y install bind-utils</span></span><br><span class=\"line\">dig -t A myapp-headless.service-test.svc.cluster.local. @10.244.0.5</span><br><span class=\"line\">  <span class=\"comment\"># ;; ANSWER SECTION:</span></span><br><span class=\"line\">  <span class=\"comment\"># myapp-headless.service-test.svc.cluster.local. 30 IN A 10.244.1.109  # 无头还是域名的方案进行访问</span></span><br><span class=\"line\">  <span class=\"comment\"># myapp-headless.service-test.svc.cluster.local. 30 IN A 10.244.1.108</span></span><br><span class=\"line\">  <span class=\"comment\"># myapp-headless.service-test.svc.cluster.local. 30 IN A 10.244.1.107</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ;; Query time: 92 msec</span></span><br><span class=\"line\">  <span class=\"comment\"># ;; SERVER: 10.244.0.5#53(10.244.0.5)</span></span><br><span class=\"line\">  <span class=\"comment\"># ;; WHEN: Fri Nov 13 16:14:59 CST 2020</span></span><br><span class=\"line\">  <span class=\"comment\"># ;; MSG SIZE  rcvd: 269</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (5) 验证</span></span><br><span class=\"line\">~/K8s$ curl http://myapp-headless.service-test.svc.cluster.local/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: clusterip-deploy-76b69d5c5b-cx8r6  &lt;br&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br><span class=\"line\">~/K8s$ curl http://myapp-headless.service-test.svc.cluster.local/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: clusterip-deploy-76b69d5c5b-cnfrm  &lt;br&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （6）可以看见访问没有走负载均衡的</span></span><br><span class=\"line\">$ sudo ipvsadm -Ln</span><br><span class=\"line\">  <span class=\"comment\"># IP Virtual Server version 1.2.1 (size=4096)</span></span><br><span class=\"line\">  <span class=\"comment\"># Prot LocalAddress:Port Scheduler Flags</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.96.0.1:443 rr</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.10.107.202:6443           Masq    1      3          0</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.96.0.10:53 rr</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.4:53                Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.5:53                Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.96.0.10:9153 rr</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.4:9153              Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.5:9153              Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.99.135.33:80 rr</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.108.129.19:80 rr</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\"># TCP  10.109.65.22:80 rr</span></span><br><span class=\"line\">  <span class=\"comment\"># UDP  10.96.0.10:53 rr</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.4:53                Masq    1      0          0</span></span><br><span class=\"line\">  <span class=\"comment\">#   -&gt; 10.244.0.5:53                Masq    1      0          0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (7) 删除创建的SVC</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl delete -f headless-demo.yaml</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"NodePort-Service\"><a href=\"#NodePort-Service\" class=\"headerlink\" title=\"NodePort - Service\"></a>NodePort - Service</h3><p>描述: nodePort的原理是在node上开放一个端口(30000~32000)间的随机端口，当客户端访问该SVC则将向该端口的流量导入到<code>kube-proxy</code>, 然后由 kube-proxy 进一步的根据<code>SVC绑定的Pod标签</code>将请求转发给对应的Pod容器;</p>\n<p><br/></p>\n<p>NodePort 资源清单示例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; nodeport-demo.yaml &lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span> </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span> </span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">nodeport-demo</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">service-test</span> </span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">NodePort</span>         <span class=\"comment\"># 关键点: Service 类型</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">nginx-clusterip</span> <span class=\"comment\"># 关键点: 利用标签绑定 Pod</span></span><br><span class=\"line\"><span class=\"attr\">    release:</span> <span class=\"string\">stabel</span> </span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">http</span>           <span class=\"comment\"># 此端口在服务中的名称这必须是一个DNS_LABEL所有ServiceSpec内的端口必须有唯一的名称</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">80</span>             <span class=\"comment\"># 集群访问端口</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">80</span>       <span class=\"comment\"># Pod 保留的端口</span></span><br><span class=\"line\"><span class=\"attr\">    nodePort:</span> <span class=\"number\">32306</span>      <span class=\"comment\"># 节点访问的端口，(注意如果不指定该字段属性) 端口范围30000~32000</span></span><br><span class=\"line\"><span class=\"attr\">    protocol:</span> <span class=\"string\">TCP</span>        <span class=\"comment\"># 协议类型</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p>操作流程:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) Service 资源控制器部署</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl apply -f nodeport-demo.yaml</span><br><span class=\"line\">  <span class=\"comment\"># service \"nodeport-demo\" create</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看创建的NodePort,其保留的端口 80 (集群IP访问的端口):32306(node节点访问的端口)/TCP  </span></span><br><span class=\"line\">~/K8s/Day6$ kubectl get svc -n service-test -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR</span></span><br><span class=\"line\">  <span class=\"comment\"># clusterip-deploy   ClusterIP   10.108.129.19    &lt;none&gt;        80/TCP         24h    app=nginx-clusterip,release=stabel</span></span><br><span class=\"line\">  <span class=\"comment\"># myapp-headless     ClusterIP   None             &lt;none&gt;        80/TCP         6h1m   app=nginx-clusterip</span></span><br><span class=\"line\">  <span class=\"comment\"># nodeport-demo      NodePort    10.98.144.122   &lt;none&gt;        80:32306/TCP   40s    app=nginx-clusterip,release=stabel</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 验证两种方式访问</span></span><br><span class=\"line\">~/K8s/Day6$ curl http://10.98.144.122/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: clusterip-deploy-76b69d5c5b-qkwjs  &lt;br&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br><span class=\"line\">~/K8s/Day6$ curl http://10.10.107.214:32306/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: clusterip-deploy-76b69d5c5b-qkwjs  &lt;br&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br><span class=\"line\">~/K8s/Day6$ curl http://10.10.107.202:32306/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: clusterip-deploy-76b69d5c5b-qkwjs  &lt;br&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: &lt;u&gt; 2.0 &lt;/u&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ipvsadm -Ln </span><br><span class=\"line\"><span class=\"comment\"># Prot LocalAddress:Port Scheduler Flags</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class=\"line\"><span class=\"comment\"># --- 常规(Node节点与集群节点)</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  10.10.107.202:32306 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          1</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  10.98.144.122:80 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          1</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\"># --- 特殊(也可以访问)</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  172.17.0.1:32306 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  172.18.0.1:32306 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  10.244.0.0:32306 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\"># TCP  10.244.0.1:32306 rr</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.107:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.108:80              Masq    1      0          0</span></span><br><span class=\"line\"><span class=\"comment\">#   -&gt; 10.244.1.109:80              Masq    1      0          0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 删除创建的service</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl delete -f nodeport-demo.yaml</span><br><span class=\"line\">  <span class=\"comment\"># service \"nodeport-demo\" deleted</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113172111.png\" alt=\"WeiyiGeek.NodePort节点访问\" title=\"\" class=\"\">\n                <p>WeiyiGeek.NodePort节点访问</p>\n            </figure>\n<p>PS : 采用IPtables作为负载均衡时候可以利用<code>iptables -t nat -nvL KUBE-NODEPORTS</code>看见NAT转发链;</p>\n<p><br/></p>\n<h3 id=\"LoadBalancer-Service\"><a href=\"#LoadBalancer-Service\" class=\"headerlink\" title=\"LoadBalancer - Service\"></a>LoadBalancer - Service</h3><p>描述：loadBalancer 和 nodePort 其实是同一种方式, 只是前者运行在云厂商服务器中的; 其两则区别在于 loadBalancer 就是可以调用 cloud provider【云供应商】去 创建 LB【负载均衡】来向节点导流, 但是这会增加额外的预算成本;</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201113220901.png\" alt=\"WeiyiGeek.LoadBalancer示意图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.LoadBalancer示意图</p>\n            </figure>\n<p><br></p>\n<h3 id=\"ExternalName-Service\"><a href=\"#ExternalName-Service\" class=\"headerlink\" title=\"ExternalName - Service\"></a>ExternalName - Service</h3><p>描述: 该类型的 Service 通过返回 CNAME和它的值，可以将服务映射到externalName字段的内容(例如：hub.weiyigeek.top)。</p>\n<p>它是 Service 的特例<code>它没有 selector 也没有定义任何的端口和Endpoint</code>, 相反的对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务, 所以其作用类似软链或者快捷方式;</p>\n<p>PS : 其目标是为了将外部流量引入到集群内部（在正式的生产环境中在两个集群中可以利用该方式进行访问）。</p>\n<p>Tips:  说 ExternalName 接受 IPv4 地址字符串，但作为包含数字的 DNS 名称，而不是 IP 地址。 类似于 IPv4 地址的外部名称不能由 CoreDNS 或 ingress-nginx 解析，因为外部名称旨在指定规范的 DNS 名称。 要对 IP 地址进行硬编码，请考虑使用 <a href=\"#headless-services\">headless Services</a>。</p>\n<p>ExternalName 资源清单示例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; externalname-demo.yaml &lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">externalname-demo</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">service-test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\"><span class=\"attr\">  externalName:</span> <span class=\"string\">s.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips: 当查找主机 <code>externalname-demo.service-test.svc.cluster.local</code> 时，群集DNS服务返回 CNAME 记录，其值为 s.weiyigeek.top。 访问 my-service 的方式与其他服务的方式相同，但主要区别在于重定向发生在 DNS 级别<code>而不是通过代理或转发</code>。 如果以后您决定将数据库移到群集中，则可以启动其 Pod，添加适当的选择器或端点以及更改服务的类型。</p>\n<p><strong>操作流程:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 创建</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl apply -f externalname-demo.yaml</span><br><span class=\"line\">  <span class=\"comment\"># service/externalname-demo created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查看</span></span><br><span class=\"line\">~/K8s/Day6$ kubectl get svc -n service-test -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                TYPE           CLUSTER-IP      EXTERNAL-IP          PORT(S)        AGE    SELECTOR</span></span><br><span class=\"line\">  <span class=\"comment\"># externalname-demo   ExternalName   &lt;none&gt;          self.weiyigeek.top   &lt;none&gt;         25s    &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 查询主机DNS解析集群的DNS服务器将返回一个值my.database.example.com的CNAME记录;</span></span><br><span class=\"line\"><span class=\"comment\"># 访问这个服务的工作方式和其他的相同，唯一不同的是重定向发生在DNS层，而且不会进行代理或转发。</span></span><br><span class=\"line\">~/K8s/Day6$ dig -t A externalname-demo.service-test.svc.cluster.local. @10.244.0.5</span><br><span class=\"line\">  <span class=\"comment\"># ;; ANSWER SECTION:</span></span><br><span class=\"line\">  <span class=\"comment\"># externalname-demo.service-test.svc.cluster.local. 30 IN CNAME s.weiyigeek.top.</span></span><br><span class=\"line\">  <span class=\"comment\"># s.weiyigeek.top.     30      IN      A       125.32.244.252</span></span><br><span class=\"line\"></span><br><span class=\"line\">~/K8s/Day6$ telnet externalname-demo.service-test.svc.cluster.local. 80</span><br><span class=\"line\">  <span class=\"comment\"># Trying 125.32.244.252...</span></span><br><span class=\"line\">  <span class=\"comment\"># Connected to s.weiyigeek.top.</span></span><br><span class=\"line\">  <span class=\"comment\"># Escape character is '^]'.</span></span><br></pre></td></tr></table></figure></p>\n<BR>\n\n<p>externalIPs 资源清单示例:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">tee</span> <span class=\"string\">svc-ExternalIP.yaml</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">extip</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  externalIPs:</span> </span><br><span class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"61.128.1.26\"</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">    protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">nginx-demo</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips: externalIPs 字段一般设置为外部网卡地址。<br>Tips: 注意<code>externalIPs</code>字段千万不要使用<code>kubernetes master</code>的网卡地址，否则无法管理k8s集群。</p>\n<p><strong>操作流程:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.快速部署由deployment管理的nginx应用</span></span><br><span class=\"line\">kubectl create deployment -n <span class=\"built_in\">test</span> --image=nginx:latest --replicas 1 nginx-demo </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.部署svc-ExternalIP与查看创建的 svc/extip</span></span><br><span class=\"line\">$ kubectl apply -f svc-ExternalIP.yam</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe svc/extip -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  Name:              extip</span><br><span class=\"line\">  Namespace:         <span class=\"built_in\">test</span></span><br><span class=\"line\">  Labels:            &lt;none&gt;</span><br><span class=\"line\">  Annotations:       &lt;none&gt;</span><br><span class=\"line\">  Selector:          app=nginx-demo</span><br><span class=\"line\">  Type:              ClusterIP</span><br><span class=\"line\">  IP:                10.108.92.122</span><br><span class=\"line\">  External IPs:      61.128.1.26</span><br><span class=\"line\">  Port:              http  8081/TCP</span><br><span class=\"line\">  TargetPort:        80/TCP</span><br><span class=\"line\">  Endpoints:         172.16.100.120:80</span><br><span class=\"line\">  Session Affinity:  None</span><br><span class=\"line\">  Events:            &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n <span class=\"built_in\">test</span> blog1</span><br><span class=\"line\">  NAME    TYPE        CLUSTER-IP      EXTERNAL-IP      PORT(S)   AGE</span><br><span class=\"line\">  extip   ClusterIP   10.108.92.122   61.128.1.26      80/TCP    10m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.验证服务，通过svc名称和EXTERNAL-IP地址访问</span></span><br><span class=\"line\">$ curl extip.test.svc:8081</span><br><span class=\"line\">$ curl 61.128.1.26:8081     <span class=\"comment\"># 集群中所有Node访问可以通过绑定的外部地址EXTERNAL-IP来访问nginx-demo应用，注意不能设置集群内部节点的地址。</span></span><br><span class=\"line\">  Kubernetes Services Demo , WeiyiGeek</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.可以看见在执行的Master机器上的监听</span></span><br><span class=\"line\">$ netstat -tlnp | grep <span class=\"string\">\"61.128.1.26:8081\"</span></span><br><span class=\"line\">tcp        0      0 61.128.1.26:8081       0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"0x03-Proxy-代理转发\"><a href=\"#0x03-Proxy-代理转发\" class=\"headerlink\" title=\"0x03 Proxy - 代理转发\"></a>0x03 Proxy - 代理转发</h2><h3 id=\"1-使用port-forward访问集群中的应用程序\"><a href=\"#1-使用port-forward访问集群中的应用程序\" class=\"headerlink\" title=\"1.使用port-forward访问集群中的应用程序\"></a>1.使用port-forward访问集群中的应用程序</h3><p>描述:在实际进行Debug时使用 <code>kubectl port-forward</code> 访问 Kubernetes 集群中的 Redis Server进行调试;</p>\n<p>Step1.分别为Redis创建Deployment和Service<br><strong>Deployment</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; redis-master-deployment.yaml&lt;&lt;'END'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">redis-master-deployment</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    matchLabels:</span></span><br><span class=\"line\"><span class=\"attr\">      app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">      role:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">      tier:</span> <span class=\"string\">backend</span></span><br><span class=\"line\"><span class=\"attr\">  replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      labels:</span></span><br><span class=\"line\"><span class=\"attr\">        app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">        role:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">        tier:</span> <span class=\"string\">backend</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">        image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">        resources:</span></span><br><span class=\"line\"><span class=\"attr\">          requests:</span></span><br><span class=\"line\"><span class=\"attr\">            cpu:</span> <span class=\"number\">100</span><span class=\"string\">m</span></span><br><span class=\"line\"><span class=\"attr\">            memory:</span> <span class=\"number\">100</span><span class=\"string\">Mi</span></span><br><span class=\"line\"><span class=\"attr\">        ports:</span></span><br><span class=\"line\"><span class=\"attr\">        - containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Service</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; redis-master-service.yaml&lt;&lt;'END'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">redis-master-service</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">    tier:</span> <span class=\"string\">backend</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">    role:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">    tier:</span> <span class=\"string\">backend</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Step2.执行apply命令以创建 Redis Deployment与Service:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f redis-master-deployment.yaml</span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/redis-master-deployment created</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f redis-master-service.yaml</span><br><span class=\"line\"><span class=\"comment\"># service/redis-master-service created</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Step3.分别查看deployment与service部署情况:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br><span class=\"line\"><span class=\"comment\"># NAME                                       READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># redis-master-deployment-7d557b94bb-bzw2v   1/1     Running   0          3m2s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看 Deployment状态</span></span><br><span class=\"line\">kubectl get deployment</span><br><span class=\"line\"><span class=\"comment\"># NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># redis-master-deployment   1/1     1            1           3m49s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 ReplicaSet(副本) 状态</span></span><br><span class=\"line\">kubectl get rs</span><br><span class=\"line\"><span class=\"comment\"># NAME                                 DESIRED   CURRENT   READY   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># redis-master-deployment-7d557b94bb   1         1         1       4m46s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查 Service 创建结果</span></span><br><span class=\"line\">kubectl get svc -o wide | grep redis</span><br><span class=\"line\"><span class=\"comment\"># redis-master-service   ClusterIP   10.99.192.159   &lt;none&gt;        6379/TCP   9m27s   app=redis,role=master,tier=backend</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 Redis Service已经运行并监听了 6379 端口</span></span><br><span class=\"line\">kubectl get pods redis-master-deployment-7d557b94bb-bzw2v --template=<span class=\"string\">'&#123;&#123;(index (index .spec.containers 0).ports 0).containerPort&#125;&#125;&#123;&#123;\"\\n\"&#125;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 6379</span></span><br></pre></td></tr></table></figure></p>\n<p>Step4.使用<code>kubectl port-forward</code> 命令转发本地端口到Pod的端口,用户可以使用资源的名称来进行端口转发<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)下面的命令中的任意一行，都可以实现端口转发的效果：</span></span><br><span class=\"line\">kubectl port-forward redis-master-deployment-7d557b94bb-bzw2v 7000:6379</span><br><span class=\"line\">kubectl port-forward pods/redis-master-deployment-7d557b94bb-bzw2v 7000:6379 <span class=\"comment\"># kubectl get pods 获取资源名称</span></span><br><span class=\"line\">kubectl port-forward deployment/redis-master-deployment 7000:6379 <span class=\"comment\"># kubectl get deployments 获取资源名称</span></span><br><span class=\"line\">kubectl port-forward svc/redis-master-service 7000:6379 <span class=\"comment\"># kubectl get svc 获取资源名称</span></span><br><span class=\"line\">kubectl port-forward rs/redis-master-deployment-7d557b94bb 7000:6379 <span class=\"comment\"># kubectl get rs 获取资源名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2)以上命令的输出结果类似：</span></span><br><span class=\"line\">[root@master-01 ~]$ kubectl port-forward --address 127.0.0.1,10.10.107.191  redis-master-deployment-7d557b94bb-bzw2v 7000:6379</span><br><span class=\"line\"><span class=\"comment\"># Forwarding from 127.0.0.1:7000 -&gt; 6379</span></span><br><span class=\"line\"><span class=\"comment\"># Handling connection for 7000 (连接到此端口反应)</span></span><br><span class=\"line\">redis-cli -h 10.10.107.191 -p 7000</span><br><span class=\"line\"><span class=\"comment\"># 10.10.107.191:7000&gt; ping</span></span><br><span class=\"line\"><span class=\"comment\"># PONG</span></span><br></pre></td></tr></table></figure></p>\n<p>Step5.总结本机 7000 端口的连接被转发到集群中 Redis Server 所在 Pod 的 6379 端口。利用该命令可以方便开发或者运维人员进行Debug调试;</p>\n<p><em>注意事项:</em></p>\n<ul>\n<li>1) 由于已知的限制，目前的端口转发仅适用于 TCP 协议。 在 issue 47862 中正在跟踪对 UDP 协议的支持。</li>\n</ul>\n<p><br></p>\n<h2 id=\"0x04-映射外部服务到集群内\"><a href=\"#0x04-映射外部服务到集群内\" class=\"headerlink\" title=\"0x04 映射外部服务到集群内\"></a>0x04 映射外部服务到集群内</h2><h3 id=\"场景-1-集群外的数据库映射到集群内部-IP地址\"><a href=\"#场景-1-集群外的数据库映射到集群内部-IP地址\" class=\"headerlink\" title=\"场景 1.集群外的数据库映射到集群内部(IP地址)\"></a>场景 1.集群外的数据库映射到集群内部(IP地址)</h3><p>描述: 如果您在 Kubernetes 内部和外部分别运行一些服务应用，此时应用如果分别依赖集群内部和外部应用时，通过采用将集群外部服务映射到K8s集群内部。</p>\n<p>希望未来某个时候您可以将所有服务都移入集群内，但在此之前将是“内外混用”的状态。幸运的是您可以使用静态 Kubernetes 服务来缓解上述痛点。</p>\n<p>在本例中，假如有一个集群外的 MySQL 服务器, 由于此服务器在与 Kubernetes 集群相同的网络（或 VPC）中创建，因此可以使用高性能的内部 IP 地址映射到集群内部以供Pod访问。</p>\n<ul>\n<li><p>第一步,我们创建一个将从此服务接收流量的 Endpoints 对象并将该对象与Service进行绑定。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非常注意: service和endpoint名字要相同属于同一个名称空间.</span></span><br><span class=\"line\">tee mapping-svc-ep.yaml &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mysqldb</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 192.168.12.50</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - port: 3306</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: mysqldb</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: ClusterIP  </span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 13306</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 3306</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二步,创建Service和Endpoints,然后您可以看到 Endpoints 手动定义了数据库的 IP 地址，并且使用的名称与服务名称相同。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f mapping-svc-ep.yaml</span><br><span class=\"line\">  <span class=\"comment\"># endpoints/mysqldb created</span></span><br><span class=\"line\">  <span class=\"comment\"># service/mysqldb created</span></span><br><span class=\"line\">$ kubectl describe svc/mysql -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  <span class=\"comment\"># Name:              mysqldb</span></span><br><span class=\"line\">  <span class=\"comment\"># Namespace:         test</span></span><br><span class=\"line\">  <span class=\"comment\"># Labels:            &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Annotations:       &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Selector:          &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Type:              ClusterIP</span></span><br><span class=\"line\">  <span class=\"comment\"># IP:                10.102.172.40</span></span><br><span class=\"line\">  <span class=\"comment\"># Port:              &lt;unset&gt;  13306/TCP  # 集群内部访问的映射端口</span></span><br><span class=\"line\">  <span class=\"comment\"># TargetPort:        3306/TCP            # 目标服务端口</span></span><br><span class=\"line\">  <span class=\"comment\"># Endpoints:         192.168.12.50:3306  # 目标服务IP及端口</span></span><br><span class=\"line\">  <span class=\"comment\"># Session Affinity:  None</span></span><br><span class=\"line\">  <span class=\"comment\"># Events:            &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n <span class=\"built_in\">test</span> mysqldb</span><br><span class=\"line\">  NAME    TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE</span><br><span class=\"line\">  mysql   ClusterIP   10.102.172.40   &lt;none&gt;        13306/TCP   23s</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三步,集群内部Pod访问映射的MySQL服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Telnet cluster_ip mapping_port</span></span><br><span class=\"line\">$ telnet 10.102.172.40 13306</span><br><span class=\"line\">  <span class=\"comment\"># Trying 10.102.172.40...</span></span><br><span class=\"line\">  <span class=\"comment\"># Connected to 10.102.172.40.</span></span><br><span class=\"line\">  <span class=\"comment\"># Escape character is '^]'.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 5.5.5-10.4.18-MariaDB-1:10.4.18+maria~bionic-log&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建测试Pod</span></span><br><span class=\"line\">~$ kubectl run busybox-demo -n <span class=\"built_in\">test</span> --image=busybox:latest --<span class=\"built_in\">command</span> -- sleep 3600</span><br><span class=\"line\">~$ kubectl get pod -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                         READY   STATUS             RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># busybox-demo                 1/1     Running            0          11s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入Pod的终端</span></span><br><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it -n <span class=\"built_in\">test</span> busybox-demo -- sh</span><br><span class=\"line\">ping mysql.test.svc -c 1</span><br><span class=\"line\">  <span class=\"comment\"># PING mysql.test.svc (10.102.172.40): 56 data bytes</span></span><br><span class=\"line\">  <span class=\"comment\"># 64 bytes from 10.102.172.40: seq=0 ttl=64 time=0.062 ms</span></span><br><span class=\"line\">telnet mysql.test.svc 13306  <span class=\"comment\"># 连接方式1</span></span><br><span class=\"line\">  <span class=\"comment\"># Connected to mysql.test.svc</span></span><br><span class=\"line\">  <span class=\"comment\"># t</span></span><br><span class=\"line\">  <span class=\"comment\"># 5.5.5-10.4.18-MariaDB-1:10.4.18+maria~bionic-log(AxY7G&lt;8C▒'8&amp;SPv&amp;TU0/8mysql_native_passwordxterm-256color</span></span><br><span class=\"line\">  <span class=\"comment\"># !#08S01Got packets out of orderConnection closed by foreign host</span></span><br><span class=\"line\">telnet mysql 13306          <span class=\"comment\"># 连接方式2</span></span><br><span class=\"line\">  Connected to mysql</span><br><span class=\"line\">  ....</span><br><span class=\"line\">  5.5.5-10.4.18-MariaDB-1:10.4.18+maria~bionic-log</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<p>Kubernetes 将 Endpoints 中定义的所有 IP 地址视为与常规 Kubernetes Pod 一样。现在您可以用一个简单的连接字符串访问数据库：<code>mysql://mysql.test.svc</code> 或者 <code>mysql://mysql</code></p>\n</li>\n</ul>\n<p>根本不需要在代码中使用 IP 地址！如果以后 IP 地址发生变化，您可以为端点更新 IP 地址，而应用无需进行任何更改。</p>\n<p><br></p>\n<h3 id=\"场景-2-具有-URI-的远程服务映射到集群内部\"><a href=\"#场景-2-具有-URI-的远程服务映射到集群内部\" class=\"headerlink\" title=\"场景 2.具有 URI 的远程服务映射到集群内部\"></a>场景 2.具有 URI 的远程服务映射到集群内部</h3><p>描述: 如果您使用的是来自第三方的托管网站，它们可能会为您提供可用于连接的统一资源标识符 (URI)。<br>如果它们为您提供 IP 地址，则可以使用场景 1 中的方法。</p>\n<p>在本例中，我在 集群外部创建了一个网站，而我想在集群内部进行重定向访问。</p>\n<p>第一步，编写部署的资源清单。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt; mapping-svc-ExternalName.yaml &lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">myweb</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">ExternalName</span></span><br><span class=\"line\"><span class=\"attr\">  externalName:</span> <span class=\"string\">www.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>第二步，部署ExternalName类型的services, 我们创建一个 “ExternalName” Kubernetes 服务，此服务为您提供将流量重定向到外部服务的静态 Kubernetes 服务。此服务在内核级别执行简单的 CNAME 重定向，因此对性能的影响非常小。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ kubectl apply -f mapping-svc-ExternalName.yaml</span><br><span class=\"line\">~$ kubectl describe svc/myweb -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  <span class=\"comment\"># Name:              myweb</span></span><br><span class=\"line\">  <span class=\"comment\"># Namespace:         test</span></span><br><span class=\"line\">  <span class=\"comment\"># Labels:            &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Annotations:       &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Selector:          &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Type:              ExternalName</span></span><br><span class=\"line\">  <span class=\"comment\"># IP:</span></span><br><span class=\"line\">  <span class=\"comment\"># External Name:     www.weiyigeek.top  # 外部域名</span></span><br><span class=\"line\">  <span class=\"comment\"># Session Affinity:  None</span></span><br><span class=\"line\">  <span class=\"comment\"># Events:            &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">~$ kubectl get svc -n <span class=\"built_in\">test</span> myweb</span><br><span class=\"line\">  NAME    TYPE           CLUSTER-IP   EXTERNAL-IP       PORT(S)   AGE</span><br><span class=\"line\">  myweb   ExternalName   &lt;none&gt;       www.weiyigeek.top   &lt;none&gt;    48s</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>第三步,进入Pod中进行访问测试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ kubectl <span class=\"built_in\">exec</span> -it -n <span class=\"built_in\">test</span> busybox-demo -- sh</span><br><span class=\"line\">ping myweb</span><br><span class=\"line\">  <span class=\"comment\"># PING myweb (192.168.12.18): 56 data bytes</span></span><br><span class=\"line\">  <span class=\"comment\"># 64 bytes from 192.168.12.18: seq=0 ttl=63 time=0.344 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget myweb/api.json <span class=\"comment\"># 由于Busybox 中不带curl 此处简单采用wget进行演示</span></span><br><span class=\"line\">  <span class=\"comment\"># Connecting to myweb (192.168.12.18:80)</span></span><br><span class=\"line\">  <span class=\"comment\"># saving to 'api.json'</span></span><br><span class=\"line\">  <span class=\"comment\"># api.json             100%  15  0:00:00 ETA</span></span><br><span class=\"line\">  <span class=\"comment\"># 'api.json' saved</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat api.json</span><br><span class=\"line\">  <span class=\"comment\"># &#123;\"status\":\"ok\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">wget --spider myweb.test.svc/api.json <span class=\"comment\"># </span></span><br><span class=\"line\">  <span class=\"comment\"># Connecting to myweb.test.svc (192.168.12.18:80)</span></span><br><span class=\"line\">  <span class=\"comment\"># remote file exists</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips: 非常注意,由于 “ExternalName” 使用 CNAME 重定向，因此无法执行端口重映射我们无法使用<code>port</code>指定集群内部访问端口字段。</p>\n<p><br></p>\n<h3 id=\"场景-3-具有-URI-和端口重映射功能的远程托管数据库\"><a href=\"#场景-3-具有-URI-和端口重映射功能的远程托管数据库\" class=\"headerlink\" title=\"场景 3.具有 URI 和端口重映射功能的远程托管数据库\"></a>场景 3.具有 URI 和端口重映射功能的远程托管数据库</h3><p>描述: CNAME 重定向对于每个环境均使用相同端口的服务非常有效，但如果每个环境的不同端点使用不同的端口，CNAME 重定向就略显不足，此时我们可以</p>\n<p>幸运的是我们可以使用一些基本工具来解决这个问题，手动创建无头服务及endpoint，引入外部数据库，然后通过k8s集群中的域名解析服务访问，访问的主机名格式为<code>[svc_name].[namespace_name].svc.cluster.local</code>。</p>\n<p>在本例中，我在其它K8S集群外部创建了一个appspring的应用，而我想在当前集群通过集群services进行访问调用。</p>\n<p>第一步，资源清单的创建，此处使用无头服务，对应的svc及endpoint配置文件应该如下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee svc-ep-clusterIP.yaml &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">kind: Endpoints</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: appspring</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: appspring</span><br><span class=\"line\">subsets:</span><br><span class=\"line\">  - addresses:</span><br><span class=\"line\">    - ip: 10.41.40.21</span><br><span class=\"line\">    - ip: 10.41.40.22</span><br><span class=\"line\">    - ip: 10.41.40.23</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">    - name: http</span><br><span class=\"line\">      port: 32179</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">---</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: appspring</span><br><span class=\"line\">  namespace: <span class=\"built_in\">test</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: appspring</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterIP: None</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 32179</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: ClusterIP</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>第二步,创建service及endpoint<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f svc-ep-clusterIP.yaml</span><br><span class=\"line\">  <span class=\"comment\"># endpoints/appspring created</span></span><br><span class=\"line\">  <span class=\"comment\"># service/appspring created</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl describe svc/appspring -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  <span class=\"comment\"># Name:              appspring</span></span><br><span class=\"line\">  <span class=\"comment\"># Namespace:         test</span></span><br><span class=\"line\">  <span class=\"comment\"># Labels:            app=appspring</span></span><br><span class=\"line\">  <span class=\"comment\"># Annotations:       &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Selector:          &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># Type:              ClusterIP</span></span><br><span class=\"line\">  <span class=\"comment\"># IP:                None</span></span><br><span class=\"line\">  <span class=\"comment\"># Port:              http  80/TCP  # 映射到集群内部端口</span></span><br><span class=\"line\">  <span class=\"comment\"># TargetPort:        32179/TCP</span></span><br><span class=\"line\">  <span class=\"comment\"># Endpoints:         10.41.40.21:32179,10.41.40.22:32179,10.41.40.23:32179    # 目标负载IP以及应用端口</span></span><br><span class=\"line\">  <span class=\"comment\"># Session Affinity:  None</span></span><br><span class=\"line\">  <span class=\"comment\"># Events:            &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get svc -n <span class=\"built_in\">test</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME   TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># appspring   ClusterIP   None         &lt;none&gt;        80/TCP    4m45s</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>第三步,在k8s集群中启动一个<code>alpine:latest</code>容器进行验证：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl run alpine-demo -n <span class=\"built_in\">test</span> --image=alpine:latest --<span class=\"built_in\">command</span> -- sleep 3600</span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it -n <span class=\"built_in\">test</span>  alpine-demo -- sh</span><br><span class=\"line\">/ <span class=\"comment\"># ping appspring -c 1  # 可以看出是轮询请求的</span></span><br><span class=\"line\">PING appspring (10.41.40.22): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.41.40.22: seq=0 ttl=60 time=1.196 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># ping appspring -c 1</span></span><br><span class=\"line\">PING appspring (10.41.40.21): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.41.40.21: seq=0 ttl=60 time=1.273 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># ping appspring -c 1</span></span><br><span class=\"line\">PING appspring (10.41.40.23): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.41.40.23: seq=0 ttl=60 time=1.304 ms</span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># wget appspring:32179</span></span><br><span class=\"line\">Connecting to appspring:32179 (10.41.40.22:32179)</span><br><span class=\"line\">Connecting to appspring:32179 (10.41.40.21:32179)</span><br><span class=\"line\">saving to <span class=\"string\">'index.html'</span></span><br><span class=\"line\">index.html           100% |*************************************************************************|  5275  0:00:00 ETA</span><br><span class=\"line\"><span class=\"string\">'index.html'</span> saved</span><br><span class=\"line\">/ <span class=\"comment\"># cat index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">/ <span class=\"comment\"># ls -alh index.html</span></span><br><span class=\"line\">-rw-r--r--    1 root     root        5.2K Dec  6 14:58 index.htm</span><br></pre></td></tr></table></figure></p>\n<p>注：URI 可以使用 DNS 在多个 IP 地址之间进行负载平衡，因此，如果 IP 地址发生变化，这个方法可能会有风险！如果您通过上述命令获取多个 IP 地址，则可以将所有这些地址都包含在 Endpoints YAML 中，并且 Kubernetes 会在所有 IP 地址之间进行流量的负载平衡。</p>\n<p><br/></p>\n<p><strong>映射总结:</strong><br>将外部服务映射到内部服务可让您未来灵活地将这些服务纳入集群，同时最大限度地减少重构工作。即使您今天不打算将服务加入集群，以后可能也会这样做！而且，这样一来，您可以更轻松地管理和了解组织所使用的外部服务。</p>\n<p>如果外部服务具有有效域名，并且您不需要重新映射端口，那么使用 “ExternalName” 服务类型将外部服务映射到内部服务十分简便、快捷。如果您没有域名或需要执行端口重映射，只需将 IP 地址添加到端点并使用即可。</p>\n<p>至此从K8s集群中引入外部服务实践完成。</p>\n","comments":true,"excerpt":null,"categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"k8s","path":"api/tags/k8s.json"}]}