{"title":"Ingress-Nginx进阶学习扩展实践","slug":"虚拟云容/云容器/Kubernetes/功能组件/Ingress-Nginx/Ingress-Nginx进阶学习扩展实践","date":"2020-05-27T11:37:47.000Z","updated":"2022-07-13T09:31:52.375Z","url":"2020/5-27-587.html","path":"api/articles/2020/5-27-587.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/1/20220309090428.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/1/20220308173810.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Ingress-Nginx-快速安装配置实践\"><a href=\"#0x00-Ingress-Nginx-快速安装配置实践\" class=\"headerlink\" title=\"0x00 Ingress-Nginx 快速安装配置实践\"></a>0x00 Ingress-Nginx 快速安装配置实践</h2><p>描述: 此节，作为上一章的扩展补充，主要因为ingress-nginx迭代较快，加入了很多新得特性导致原来某些配置被弃用，当前时间节点【2022年3月8日 17:24:28】针对现有Ingress-nginx版本（v1.1.1）进行快速安装配置，与上一章中的安装是存在一定的不同，安装时都可以作为参考。</p>\n<p><strong>知识复习</strong><br>Q: 什么是Ingress?<br>A: Ingress 是管理对集群中服务的提供外部访问的 API 对象,Ingress 控制器负责实现 Ingress，通常使用负载均衡器，但它也可以配置边缘路由器或其他前端来帮助处理流量，它可以将来自集群外部的 HTTP 和 HTTPS 路由转发到集群内部的 Service 中。</p>\n<p>Ingress 只是一个统称，其由 Ingress 和 Ingress Controller 两部分组成。</p>\n<ul>\n<li>Ingress 用作将原来需要手动配置的规则抽象成一个 Ingress 对象，使用 YAML 格式的文件来创建和管理。</li>\n<li>Ingress Controller 用作通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化。</li>\n</ul>\n<p>使用 Ingress 控制器可以轻松实现外部URL访问集群内部服务、负载均衡、代理转发、支持配置SSL/TLS并提供基于名称的虚拟主机，值得注意的是 Ingress 不会暴露任意端口或协议，通过使用 <code>Service.Type=NodePort</code> 或 <code>Service.Type=LoadBalancer</code>类型的服务向向 Internet 公开 HTTP 和 HTTPS 的访问服务</p>\n<p><strong>Q: 常用 Ingress 控制器有那些? 其它更多适用于Kubernetes的ingress控制器可以参考地址[<a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/ingress-controllers/#%E5%85%B6%E4%BB%96%E6%8E%A7%E5%88%B6%E5%99%A8]\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/zh/docs/concepts/services-networking/ingress-controllers/#%E5%85%B6%E4%BB%96%E6%8E%A7%E5%88%B6%E5%99%A8]</a></strong></p>\n<ul>\n<li>ingress-Nginx : 用于 <a href=\"https://github.com/kubernetes/ingress-nginx\" target=\"_blank\" rel=\"noopener\">Nginx Kubernetes Ingress</a> 控制器能够与 NGINX Web 服务器（作为代理）一起使用 (推荐)</li>\n<li>ingress-Traefik ：由 <a href=\"https://doc.traefik.io/traefik/providers/kubernetes-ingress/\" target=\"_blank\" rel=\"noopener\">Traefik Kubernetes Ingress</a> 提供程序是一个用于 Traefik 代理的Ingress控制器。</li>\n<li>ingress-istio : <a href=\"https://istio.io/latest/docs/tasks/traffic-management/ingress/kubernetes-ingress/\" target=\"_blank\" rel=\"noopener\">Istio Ingress</a> 是一个基于Istio的Ingress控制器。</li>\n</ul>\n<p>温馨提示: 理想情况下所有 Ingress 控制器都应符合参考规范。实际上各种 Ingress 控制器的操作略有不同,请参考相应Ingress的控制器官方文档。</p>\n<p>如下图所示的一个简单的示例，客户端请求访问外部URL地址, Ingress 将其所有流量发送到一个Service中, 后端 Pod 提供服务端响应通过路由进行返回给客户端。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/1/20220309090428.png\" alt=\"WeiyiGeek.Ingress\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Ingress</p>\n            </figure>\n<p><br></p>\n<p><strong>Q: Ingress 规则有哪些?</strong></p>\n<ul>\n<li>host : 虚拟主机名称, 主机名通配符主机可以是精确匹配（例如”foo.bar.com”）或通配符（例如“ *.foo.com”）</li>\n<li>paths : URL访问路径。</li>\n<li>pathType : Ingress 中的每个路径都需要有对应的路径类型（Path Type）</li>\n<li>backend : 是 Service 文档中所述的服务和端口名称的组合与规则的 host 和 path 匹配的对 Ingress 的 HTTP（和 HTTPS ）请求将发送到列出的 backend, 一般情况可以单独为路径设置Backend以及未匹配的url默认访问的后端defaultBackend。</li>\n</ul>\n<p>Ingress 中的每个路径都需要有对应的路径类型（Path Type），未明确设置 pathType 的路径无法通过合法性检查，当前支持的路径类型有三种：</p>\n<ul>\n<li>Exact：精确匹配 URL 路径，且区分大小写。</li>\n<li>Prefix：基于以<code>/</code>分隔的URL路径前缀匹配, 且区分大小写，并且对路径中的元素逐个完成。</li>\n<li>ImplementationSpecific：此路径类型匹配方法取决于 IngressClass, 具体实现可以将其作为单独的 pathType 处理或者与 Prefix 、 Exact 类型作相同处理。</li>\n</ul>\n<p>说明： 如果路径的最后一个元素是请求路径中最后一个元素的子字符串，则不会匹配 （例如：/foo/bar 匹配 /foo/bar/baz, 但不匹配 /foo/barbaz）。</p>\n<p>温馨提示: defaultBackend 通常在 Ingress 控制器中配置，以服务与规范中的路径不匹配的任何请求。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">tee</span> <span class=\"string\">&gt; test.yaml &lt;&lt; 'EOF'</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">test-ingress</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  defaultBackend:</span></span><br><span class=\"line\"><span class=\"attr\">    service:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">      port:</span></span><br><span class=\"line\"><span class=\"attr\">        number:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"bullet\">-f</span></span><br></pre></td></tr></table></figure><br>注意, 入口控制器和负载平衡器可能需要一两分钟才能分配 IP 地址。 在此之前，你通常会看到地址字段的值被设定为<code>&lt;pending&gt;</code>。</p>\n<p><br></p>\n<h3 id=\"1-快速安装\"><a href=\"#1-快速安装\" class=\"headerlink\" title=\"1.快速安装\"></a><strong>1.快速安装</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.下载 v1.1.1 版本的ingress YAML资源清单到本地。</span></span><br><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.为了加快国内环境拉取镜像的速度，此处将k8s.gcr.io替换为阿里云提供的镜像源。</span></span><br><span class=\"line\">$ sed -i -r <span class=\"string\">'s#k8s.gcr.io/ingress-nginx/controller:(.*)@.*$#registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:\\1#g'</span> ingress-nginx-deploy.yaml</span><br><span class=\"line\">$ sed -i -r <span class=\"string\">'s#k8s.gcr.io/ingress-nginx/(.*)@.*$#registry.cn-hangzhou.aliyuncs.com/google_containers/\\1#g'</span> ingress-nginx-deploy.yaml</span><br><span class=\"line\"><span class=\"comment\">#  或者使用skopeo同步到私有仓库</span></span><br><span class=\"line\"><span class=\"comment\"># ./skopeo copy --insecure-policy --src-tls-verify=false --dest-tls-verify=false --dest-authfile /root/.docker/config.json docker://registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.2.0 docker://harbor.weiyigeek.top/devops/nginx-ingress-controller:v1.2.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.在ingress-nginx命名空间中，部署 YAML 清单中ingress相关的控制器资源</span></span><br><span class=\"line\">$ kubectl apply -f ingress-nginx-deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.指定条件等待Ingress相关资源部署完成以及查看namespace中部署ingress的相关Pod及其状态</span></span><br><span class=\"line\">$ kubectl <span class=\"built_in\">wait</span> --namespace ingress-nginx \\</span><br><span class=\"line\">  --<span class=\"keyword\">for</span>=condition=ready pod \\</span><br><span class=\"line\">  --selector=app.kubernetes.io/component=controller \\</span><br><span class=\"line\">  --timeout=120s</span><br><span class=\"line\">$ kubectl get pods --namespace=ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.创建的默认后端的资源名称一定要与ingress-nginx-controller中的 --default-backend-service 字段值相对应</span></span><br><span class=\"line\">  <span class=\"comment\"># 使用如下命令利用deployment 资源控制器快速创建default-backend 对象</span></span><br><span class=\"line\">$ kubectl create deployment default-backend --image=nginx:latest --namespace ingress-nginx</span><br><span class=\"line\">  <span class=\"comment\"># 为default-backend Pod 创建clusterip 类型的服务</span></span><br><span class=\"line\">$ kubectl create service clusterip default-backend --namespace ingress-nginx --tcp=80</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 或者资源清单的方式</span></span><br><span class=\"line\">tee default-backend.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    prometheus.io/path: /metrics</span><br><span class=\"line\">    prometheus.io/port: <span class=\"string\">\"80\"</span></span><br><span class=\"line\">    prometheus.io/scheme: http</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: weiyigeek.top</span><br><span class=\"line\">    ref: default-backend</span><br><span class=\"line\">  name: default-backend</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 80</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: weiyigeek.top</span><br><span class=\"line\">    ref: default-backend</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: ClusterIP</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.查看Ingress的ClassName，此处名称为nginx</span></span><br><span class=\"line\">$ kubectl get ingressclasses.networking.k8s.io</span><br><span class=\"line\">  <span class=\"comment\"># NAME      CONTROLLER             PARAMETERS        AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx     k8s.io/ingress-nginx        &lt;none&gt;       10d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将ingress controler服务Pod运行在所有Work节点上，有几台机器就可以设置几个副本，当然master要去除污点后使用</span></span><br><span class=\"line\">~$ kubectl scale deployment -n ingress-nginx ingress-nginx-controller --replicas=4</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2-服务验证\"><a href=\"#2-服务验证\" class=\"headerlink\" title=\"2.服务验证\"></a><strong>2.服务验证</strong></h3><p>描述: 创建使用指定的名称Ingress入口，此处可以采用两种方式进行创建，第一种方式是通过命令行方式，第二种是通过Ingress资源清单方式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1，创建一个名为demo-myweb-blog的入口，控制器名称为nginx，规则是将访问demo.weiyigeek.top请求转发到后端myweb-blog:80 服务之上</span></span><br><span class=\"line\">kubectl create ingress demo-myweb-blog --class=nginx --rule=<span class=\"string\">\"demo.weiyigeek.top/=web-blog:80\"</span> --namespace devtest</span><br><span class=\"line\"><span class=\"comment\"># kubectl create ingress test-app -n devtest --rule=\"test.app.weiyigeek.top/oa(/|\\$)(.*)=weiyigeek-oa-prod:8080\" --annotation nginx.ingress.kubernetes.io/rewrite-target=/\\$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.Ingress资源清单如下所示，其中重点是ingressClassName与rules字段</span></span><br><span class=\"line\">cat &gt; www-myweb-blog.ingress &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: www-blog</span><br><span class=\"line\">  namespace: devtest</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    kubernetes.io/ingress.class: <span class=\"string\">\"nginx\"</span>              <span class=\"comment\"># 方式1.根据该注解指定发现 Ingress</span></span><br><span class=\"line\">    ingressclass.kubernetes.io/is-default-class: <span class=\"literal\">true</span> <span class=\"comment\"># 如未设置IngressClassName名称则采用默认Ingress</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/ssl-redirect : <span class=\"literal\">false</span>  <span class=\"comment\"># 禁用强制跳转</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: blog</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ingressClassName: nginx  <span class=\"comment\"># 方式2.根据该字段指定发现 Ingress</span></span><br><span class=\"line\">  defaultBackend:</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: default-http</span><br><span class=\"line\">      port:</span><br><span class=\"line\">        number: 80</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: <span class=\"string\">\"www.weiyigeek.top\"</span></span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - pathType: Prefix</span><br><span class=\"line\">        path: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: www-blog</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">  - host: <span class=\"string\">\"web.weiyigeek.top\"</span></span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - pathType: ImplementationSpecific</span><br><span class=\"line\">        path: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: web-blog</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80 </span><br><span class=\"line\">  tls:</span><br><span class=\"line\">  - hosts:</span><br><span class=\"line\">      - www.weiyigeek.top</span><br><span class=\"line\">    secretName: testsecret-tls   </span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># 部署资源清单</span></span><br><span class=\"line\">kubectl apply -f www-myweb-blog.ingress</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看上面部署的ingress入口信息及其规则默认后端信息。</span></span><br><span class=\"line\">kubectl get ingress -n devtest</span><br><span class=\"line\">kubectl describe ingress -n devtest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用修改后的 Ingress yaml 文件。</span></span><br><span class=\"line\">kubectl replace -f www-myweb-blog.ingress</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过本机的hosts文件，手动将www.weiyigeek.top、demo.weiyigeek.top域名绑定到K8S中Node节点IP地址上，即可通过浏览器访问。</span></span><br><span class=\"line\">192.168.12.222 www.weiyigeek.top demo.weiyigeek.top</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/1/20220308173810.png\" alt=\"WeiyiGeek.describe ingress\" title=\"\" class=\"\">\n                <p>WeiyiGeek.describe ingress</p>\n            </figure>\n<p><br></p>\n<h3 id=\"3-配置虚拟主机证书\"><a href=\"#3-配置虚拟主机证书\" class=\"headerlink\" title=\"3.配置虚拟主机证书\"></a><strong>3.配置虚拟主机证书</strong></h3><p>描述: 通过设定包含 TLS 私钥和证书的 Secret 来保护 Ingress, TLS Secret 必须包含名为 <code>tls.crt (证书)</code> 和 <code>tls.key (私钥)</code> 的键名<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.资源清单方式</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Secret</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: www.weiyigeek.top</span><br><span class=\"line\">  namespace: devtest</span><br><span class=\"line\">data:</span><br><span class=\"line\">  tls.crt: `base64 编码的 cert`</span><br><span class=\"line\">  tls.key: `base64 编码的 key`</span><br><span class=\"line\"><span class=\"built_in\">type</span>: kubernetes.io/tls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.kubectl 命令行方式</span></span><br><span class=\"line\">kubectl create secret tls www.weiyigeek.top --cert=server.crt --key=server.key -n devtest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用示例:</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: tls-example-ingress</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  tls:</span><br><span class=\"line\">  - hosts:</span><br><span class=\"line\">      - www.weiyigeek.top </span><br><span class=\"line\">    secretName: testsecret-tls</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 在 Ingress 中引用此 Secret 将会告诉 Ingress 控制器使用 TLS 加密从客户端到负载均衡器的通道。</p>\n<p><br/></p>\n<h3 id=\"4-使用hostNetwork网络方式\"><a href=\"#4-使用hostNetwork网络方式\" class=\"headerlink\" title=\"4.使用hostNetwork网络方式\"></a><strong>4.使用hostNetwork网络方式</strong></h3><p>描述: 定义后<code>Ingress-controller</code>的IP就与宿主机IP一样。</p>\n<p>步骤 01.编辑 Ingress-controller 的 deploy 资源控制器内容，添加<code>hostNetWork为true</code>的键值对,。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit deployments.apps -n ingress-nginx ingress-nginx-controller</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      hostNetwork: <span class=\"literal\">true</span></span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - args:</span><br><span class=\"line\">        - /nginx-ingress-controller</span><br></pre></td></tr></table></figure>\n<p>步骤 02.查看Pod的IP地址，此时你会发现其地址<code>为节点主机地址</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ kubectl get pod -n ingress-nginx  -o wide | grep <span class=\"string\">\"ingress-nginx-controller\"</span></span><br><span class=\"line\">ingress-nginx-controller-6b8bd48548-dfnvc   1/1     Running     0          4m26s   192.168.12.224   weiyigeek-224</span><br><span class=\"line\">ingress-nginx-controller-6b8bd48548-r9kpl   1/1     Running     0          5m      192.168.12.226   weiyigeek-226</span><br><span class=\"line\">ingress-nginx-controller-6b8bd48548-x9w9j   1/1     Running     0          5m33s   192.168.12.225   weiyigeek-225</span><br><span class=\"line\">ingress-nginx-controller-6b8bd48548-xqpcc   1/1     Running     0          5m33s   192.168.12.223   weiyigeek-223 </span><br><span class=\"line\"></span><br><span class=\"line\">~$ curl 192.168.12.225</span><br><span class=\"line\">Hello ingress-Nginx , Index /</span><br></pre></td></tr></table></figure></p>\n<p>步骤 03.让Pod均衡的分别运行在work节点,我们需要执行以下两步，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置工作节点标签</span></span><br><span class=\"line\">~$ kubectl label nodes weiyigeek-223 weiyigeek-224 weiyigeek-225 weiyigeek-226 node=work</span><br><span class=\"line\">  <span class=\"comment\"># node/weiyigeek-223 labeled</span></span><br><span class=\"line\">  <span class=\"comment\"># node/weiyigeek-224 labeled</span></span><br><span class=\"line\">  <span class=\"comment\"># node/weiyigeek-225 labeled</span></span><br><span class=\"line\">  <span class=\"comment\"># node/weiyigeek-226 labeled</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置节点硬亲和、pod软亲和</span></span><br><span class=\"line\">~$ kubectl edit deployments.apps -n ingress-nginx ingress-nginx-controller</span><br><span class=\"line\">    spec: </span><br><span class=\"line\">      affinity:</span><br><span class=\"line\">        nodeAffinity:</span><br><span class=\"line\">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">            nodeSelectorTerms:</span><br><span class=\"line\">            - matchExpressions:</span><br><span class=\"line\">              - key: node</span><br><span class=\"line\">                operator: In</span><br><span class=\"line\">                values:</span><br><span class=\"line\">                - work</span><br><span class=\"line\">        podAntiAffinity:</span><br><span class=\"line\">          preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">          - podAffinityTerm:</span><br><span class=\"line\">              labelSelector:</span><br><span class=\"line\">                matchExpressions:</span><br><span class=\"line\">                - key: ingress</span><br><span class=\"line\">                  operator: In</span><br><span class=\"line\">                  values:</span><br><span class=\"line\">                  - nginx</span><br><span class=\"line\">              topologyKey: kubernetes.io/hostname</span><br><span class=\"line\">            weight: 100</span><br></pre></td></tr></table></figure><br><br/></p>\n<h3 id=\"5-使用externalIP网络方式\"><a href=\"#5-使用externalIP网络方式\" class=\"headerlink\" title=\"5.使用externalIP网络方式\"></a><strong>5.使用externalIP网络方式</strong></h3><p>描述: 前面我们使用了 hostNetwork 方式，知道了可以使用 <code>controller.hostNetwork=true</code> 参数进行设置, 此处我们采用采用 <code>externalIP</code> 的方式进行服务暴露。</p>\n<p>温馨提示：默认的控制器类型是Deployment，不过为其稳定性建议使用 DaemonSet 类型的控制器, 设置 hostNetwork 为 true、设置 dnsPolicy 为 ClusterFirstWithHostNet，也建议为要部署到的节点上打上ingress标签, 然后使用<code>NodeSelector</code>添加<code>ingress: &quot;true&quot;</code>部署至指定节点。</p>\n<p><strong>安装部署</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用 RBAC 支持</span></span><br><span class=\"line\">$ helm install --name nginx-ingress --<span class=\"built_in\">set</span> <span class=\"string\">\"rbac.create=true,controller.service.externalIPs[0]=192.168.12.211,controller.service.externalIPs[1]=192.168.12.212,controller.service.externalIPs[2]=192.168.12.213\"</span> stable/nginx-ingress</span><br></pre></td></tr></table></figure></p>\n<p>部署完成后我们可以看到 Kubernetes 服务中增加了 <code>nginx-ingress-controller</code> 和 <code>nginx-ingress-default-backend</code> 两个服务。nginx-ingress-controller 为 Ingress Controller，主要做为一个七层的负载均衡器来提供 HTTP 路由、粘性会话、SSL 终止、SSL直通、TCP 和 UDP 负载平衡等功能。nginx-ingress-default-backend 为默认的后端，当集群外部的请求通过 Ingress 进入到集群内部时，如果无法负载到相应后端的 Service 上时，这种未知的请求将会被负载到这个默认的后端上。</p>\n<p>由于我们采用了 externalIP 方式对外暴露服务， 所以 nginx-ingress-controller 会在 192.168.12.211、192.168.12.212、192.168.12.213 三台节点宿主机上的 暴露 80/443 端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc | grep <span class=\"string\">\"nginx-ingress-controller\"</span></span><br><span class=\"line\">nginx-ingress-controller        LoadBalancer   10.254.84.72     192.168.12.211,192.168.12.212,192.168.12.213   80:8410/TCP,443:8948/TCP   46s</span><br></pre></td></tr></table></figure>\n<p>访问 Nginx Ingress Controller , 我们可以使用以下命令来获取 Nginx 的 HTTP 和 HTTPS 地址。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl --namespace default get services -o wide -w nginx-ingress-controller</span><br></pre></td></tr></table></figure></p>\n<p><strong>访问验证:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 返回 200</span></span><br><span class=\"line\">$ curl -I  http://192.168.12.211</span><br><span class=\"line\">$ curl -I --insecure http://192.168.12.211</span><br></pre></td></tr></table></figure></p>\n<p>在几台节点宿主机上查看，我们可以看到 ExternalIP 的 Service 是通过 Kube-Proxy对外暴露的，这里的 192.168.12.211、192.168.12.212、192.168.12.213 是三个内网 IP。 实际生产应用中是需要通过边缘路由器或全局统一接入层的负载均衡器将到达公网 IP 的外网流量转发到这几个内网 IP 上，外部用户再通过域名访问集群中以 Ingress 暴露的所有服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo netstat -tlunp|grep kube-proxy|grep -E <span class=\"string\">'80|443'</span></span><br><span class=\"line\">tcp        0      0 192.168.12.211:80      0.0.0.0:*               LISTEN      714/kube-proxy</span><br><span class=\"line\">tcp        0      0 192.168.12.211:443     0.0.0.0:*               LISTEN      714/kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo netstat -tlunp|grep kube-proxy|grep -E <span class=\"string\">'80|443'</span></span><br><span class=\"line\">tcp        0      0 192.168.12.212:80      0.0.0.0:*               LISTEN      690/kube-proxy</span><br><span class=\"line\">tcp        0      0 192.168.12.212:443     0.0.0.0:*               LISTEN      690/kube-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo netstat -tlunp|grep kube-proxy|grep -E <span class=\"string\">'80|443'</span></span><br><span class=\"line\">tcp        0      0 192.168.12.213:80      0.0.0.0:*               LISTEN      748/kube-proxy</span><br><span class=\"line\">tcp        0      0 192.168.12.213:443     0.0.0.0:*               LISTEN      748/kube-proxy</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"6-对外暴露端口配置\"><a href=\"#6-对外暴露端口配置\" class=\"headerlink\" title=\"6.对外暴露端口配置\"></a><strong>6.对外暴露端口配置</strong></h3><p>描述: 默认的 Ingress 配置是暴露 http(80) 、https(443) 端口, 但需要注意的是创建的 Ingress 必须要和对外暴露的 Service 在同一命名空间下！</p>\n<p>除此之外其实还可通过 Ingress controller 来实现TCP 和 UDP 服务端口的暴露，下面进行一一讲解。</p>\n<p><strong>1) http/https端口</strong><br>描述: 缺少ingress支持http与https协议的后端应用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: Ingress</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  annotations:</span></span><br><span class=\"line\"><span class=\"string\">    nginx.ingress.kubernetes.io/rewrite-target: /$2</span></span><br><span class=\"line\"><span class=\"string\">  name: rewrite</span></span><br><span class=\"line\"><span class=\"string\">  namespace: default</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  ingressClassName: nginx</span></span><br><span class=\"line\"><span class=\"string\">  rules:</span></span><br><span class=\"line\"><span class=\"string\">  - host: rewrite.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"string\">    http:</span></span><br><span class=\"line\"><span class=\"string\">      paths:</span></span><br><span class=\"line\"><span class=\"string\">      - path: /something(/|$)(.*)</span></span><br><span class=\"line\"><span class=\"string\">        pathType: Prefix</span></span><br><span class=\"line\"><span class=\"string\">        backend:</span></span><br><span class=\"line\"><span class=\"string\">          service:</span></span><br><span class=\"line\"><span class=\"string\">            name: http-svc</span></span><br><span class=\"line\"><span class=\"string\">            port: </span></span><br><span class=\"line\"><span class=\"string\">              number: 80</span></span><br><span class=\"line\"><span class=\"string\">'</span> | kubectl create -f -</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>2) 暴露TCP/UDP端口</strong><br>描述: 我们可以通过 tcp-services-configmap.yaml 设置映射tcp， 通过 udp-services-configmap.yaml 映射udp<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tcp-services-configmap.yaml</span></span><br><span class=\"line\">cat &gt; tcp-services-configmap.yaml &lt;&lt;EOF</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: tcp-services</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">data:</span><br><span class=\"line\">  2181: <span class=\"string\">\"kafka/kafka-zookeeper:2181\"</span></span><br><span class=\"line\">  50000: <span class=\"string\">\"devops/jenkins:50000\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat  tcp-services-configmap.yaml | kubectl create -f -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># udp-services-configmap.yaml</span></span><br><span class=\"line\">tee udp-services-configmap.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: udp-services</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">data:</span><br><span class=\"line\">  53: <span class=\"string\">\"kube-system/kube-dns:53\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">cat udp-services-configmap.yaml | kubectl create -f -</span><br></pre></td></tr></table></figure></p>\n<p>查看 ConfigMap 资源<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ kubectl get cm -n ingress-nginx  | grep <span class=\"string\">\"services\"</span></span><br><span class=\"line\">tcp-services                2      15h</span><br><span class=\"line\">udp-services                1      15h</span><br></pre></td></tr></table></figure></p>\n<p>验证暴露的 TCP/UDP 服务:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ telnet 192.168.12.225 50000</span><br><span class=\"line\">Trying 192.168.12.225...</span><br><span class=\"line\">Connected to 192.168.12.225.</span><br><span class=\"line\">Escape character is <span class=\"string\">'^]'</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">~$ dig -x jenkins.devops.svc @192.168.12.225</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>3) 通过helm更新公开端口</strong><br>描述: 通过<code>helm chart</code>图表中的<code>deployment-tcp-udp-values.yaml</code>或者<code>deployment-tcp-udp-configMapNamespace-values.yaml文件</code>进行暴露TCP/UDP (如果你使用采用helm方式部署的ingress,此种方式是推荐的。), 注意此种方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ngress-nginx/ci/deployment-tcp-udp-values.yaml</span></span><br><span class=\"line\">controller:</span><br><span class=\"line\">  image:</span><br><span class=\"line\">    repository: ingress-controller/controller</span><br><span class=\"line\">    tag: 1.0.0-dev</span><br><span class=\"line\">    digest: null</span><br><span class=\"line\">  admissionWebhooks:</span><br><span class=\"line\">    enabled: <span class=\"literal\">false</span></span><br><span class=\"line\">  service:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: ClusterIP</span><br><span class=\"line\">  </span><br><span class=\"line\">tcp:</span><br><span class=\"line\">  9000: <span class=\"string\">\"default/test:8080\"</span></span><br><span class=\"line\">udp:</span><br><span class=\"line\">  9001: <span class=\"string\">\"default/test:8080\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行更新</span></span><br><span class=\"line\">helm upgrade nginx-ingress stable/nginx-ingress \\</span><br><span class=\"line\">-f ./ci/deployment-tcp-udp-values.yaml</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"7-节点与Pod亲和性设置\"><a href=\"#7-节点与Pod亲和性设置\" class=\"headerlink\" title=\"7.节点与Pod亲和性设置\"></a><strong>7.节点与Pod亲和性设置</strong></h3><p>描述: 为 deployments.apps 资源控制器部署的 ingress 设置节点亲和。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sepc:</span><br><span class=\"line\">  affinity:</span><br><span class=\"line\">    nodeAffinity:</span><br><span class=\"line\">      requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">        nodeSelectorTerms:</span><br><span class=\"line\">        - matchExpressions:</span><br><span class=\"line\">          - key: node</span><br><span class=\"line\">            operator: In</span><br><span class=\"line\">            values:</span><br><span class=\"line\">            - app</span><br><span class=\"line\">            - ali</span><br><span class=\"line\">            - www</span><br><span class=\"line\">    podAntiAffinity:</span><br><span class=\"line\">      preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">      - podAffinityTerm:</span><br><span class=\"line\">          labelSelector:</span><br><span class=\"line\">            matchExpressions:</span><br><span class=\"line\">            - key: kubernetes.io/os</span><br><span class=\"line\">              operator: In</span><br><span class=\"line\">              values:</span><br><span class=\"line\">              - linux</span><br><span class=\"line\">          topologyKey: kubernetes.io/hostname</span><br><span class=\"line\">        weight: 100</span><br><span class=\"line\">  nodeSelector:</span><br><span class=\"line\">    k8s.io/ingress-nginx: <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"8-基于-auth-url-模块认证方式实践\"><a href=\"#8-基于-auth-url-模块认证方式实践\" class=\"headerlink\" title=\"8.基于 auth-url 模块认证方式实践\"></a><strong>8.基于 auth-url 模块认证方式实践</strong></h3><p><strong>1.使用auth-url模块配置ldap登录</strong><br>描述: 在 K8s 中我们可以使用 <code>nginx Ingress</code> 的 <code>auth-url</code> 模块配置ldap登录验证。</p>\n<p>前置需求已经有部署自己的<code>ldap server</code>, 然后还要在要配置ldap验证的服务ingress 上添加以下annotation：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/auth-url:</span> <span class=\"attr\">https://&#123;server_domain&#125;/auth/ldap/$remote_user/$http_authorization</span></span><br></pre></td></tr></table></figure>\n<p>温馨提示: 此处 <code>{server_domain}</code> 是你的 <code>ldap-auth-server</code> 域名或IP地址, 其实现原理也是非常简单的即用你的程序去ldap server校验用户名密码是否正确即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># description: ldap 服务用户账号密码验证</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> ldap3 <span class=\"keyword\">import</span> Server, Connection, ALL, SUBTREE, ALL_ATTRIBUTES, MODIFY_REPLACE, MODIFY_ADD, MODIFY_DELETE</span><br><span class=\"line\"><span class=\"keyword\">from</span> ldap3.utils.hashed <span class=\"keyword\">import</span> hashed</span><br><span class=\"line\"><span class=\"keyword\">from</span> ldap3 <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    HASHED_SALTED_SHA, MODIFY_REPLACE</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">import</span> json,os</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    Flask,</span><br><span class=\"line\">    Response,</span><br><span class=\"line\">    request,</span><br><span class=\"line\">    render_template,</span><br><span class=\"line\">    redirect,</span><br><span class=\"line\">    jsonify,</span><br><span class=\"line\">    make_response,</span><br><span class=\"line\">    url_for,</span><br><span class=\"line\">    abort,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> helpers <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    status_code</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LdapUtils</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, ldap_host=None, port=None, base_dn=None, user=None, password=None)</span>:</span></span><br><span class=\"line\">        self.base_dn = base_dn</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            server = Server(ldap_host, port, get_info=ALL)</span><br><span class=\"line\">            self.ldapconn = Connection(server, user=<span class=\"literal\">None</span>, password=<span class=\"literal\">None</span>,</span><br><span class=\"line\">                                       auto_bind=<span class=\"string\">'NONE'</span>, version=<span class=\"number\">3</span>, authentication=<span class=\"string\">'SIMPLE'</span>,</span><br><span class=\"line\">                                       client_strategy=<span class=\"string\">'SYNC'</span>,</span><br><span class=\"line\">                                       auto_referrals=<span class=\"literal\">True</span>, check_names=<span class=\"literal\">True</span>, read_only=<span class=\"literal\">False</span>, lazy=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       raise_exceptions=<span class=\"literal\">False</span>)</span><br><span class=\"line\">            self.ldapconn.rebind(user=user, password=password)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ldap_search_dn</span><span class=\"params\">(self, uid=None)</span>:</span></span><br><span class=\"line\">        obj = self.ldapconn</span><br><span class=\"line\">        search_base = self.base_dn</span><br><span class=\"line\">        search_scope = SUBTREE</span><br><span class=\"line\">        search_filter = <span class=\"string\">\"(cn=&#123;0&#125;)\"</span>.format(uid)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            obj.search(search_base, search_filter, search_scope, attributes=[<span class=\"string\">'cn'</span>], paged_size=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(obj.response) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.response[<span class=\"number\">0</span>][<span class=\"string\">'dn'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ldap_update_pass</span><span class=\"params\">(self, uid=None, oldpass=None, newpass=None)</span>:</span></span><br><span class=\"line\">        target_cn = self.ldap_search_dn(uid)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            hashed_password = hashed(HASHED_SALTED_SHA, newpass)</span><br><span class=\"line\">            print(<span class=\"string\">\"password:\"</span> + hashed_password)</span><br><span class=\"line\">            changes = &#123;</span><br><span class=\"line\">                <span class=\"string\">'userPassword'</span>: [(MODIFY_REPLACE, [hashed_password])]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.ldapconn.modify(target_cn, changes=changes)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ldap_get_vaild</span><span class=\"params\">(self, uid=None, passwd=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> uid <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> passwd:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        obj = self.ldapconn</span><br><span class=\"line\">        <span class=\"comment\"># 这里注意修改成自己ldap上定义的user dn </span></span><br><span class=\"line\">        dn = <span class=\"string\">\"uid=&#123;0&#125;,ou=Users,dc=xxxxx,dc=com\"</span>.format(uid)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> obj.rebind(dn, passwd):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(<span class=\"string\">'e:'</span> + str(e))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里我是通过docker部署服务，这些配置在环境变量传入，你可以根据需要选择直接填写对应值</span></span><br><span class=\"line\">ldap_host = os.getenv(<span class=\"string\">\"host\"</span>)</span><br><span class=\"line\">port = os.getenv(<span class=\"string\">\"port\"</span>)</span><br><span class=\"line\">base_dn = os.getenv(<span class=\"string\">\"base_dn\"</span>)</span><br><span class=\"line\">user = os.getenv(<span class=\"string\">\"admin_user\"</span>)</span><br><span class=\"line\">password = os.getenv(<span class=\"string\">\"password\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ldap = LdapUtils(ldap_host, int(port), base_dn, user,password)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/auth/&lt;user&gt;/&lt;passwd&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_user</span><span class=\"params\">(user=<span class=\"string\">\"user\"</span>, passwd=<span class=\"string\">\"passwd\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ldap.ldap_get_vaild(uid=user,passwd=passwd):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status_code(<span class=\"number\">401</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(authenticated=<span class=\"literal\">True</span>, user=user)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@app.route('/auth/&lt;qop&gt;/&lt;user&gt;/&lt;passwd&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_qop_user</span><span class=\"params\">(qop=None, user=<span class=\"string\">\"user\"</span>, passwd=<span class=\"string\">\"passwd\"</span>)</span>:</span></span><br><span class=\"line\">    temp = base64.b64decode(passwd.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]).decode()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ldap.ldap_get_vaild(uid=user,passwd=temp.split(<span class=\"string\">\":\"</span>)[<span class=\"number\">1</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> status_code(<span class=\"number\">401</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(authenticated=<span class=\"literal\">True</span>, user=user)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/', defaults=&#123;'path': ''&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/&lt;path:path&gt;')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">catch_all</span><span class=\"params\">(path)</span>:</span></span><br><span class=\"line\">    auth = request.headers.get(<span class=\"string\">'Authorization'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> auth <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        uid = base64.b64decode(auth.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]).decode().split(<span class=\"string\">\":\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        passwd = base64.b64decode(auth.split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]).decode().split(<span class=\"string\">\":\"</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ldap.ldap_get_vaild(uid=uid,passwd=passwd):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> status_code(<span class=\"number\">401</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">'password.html'</span>,uid=uid)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status_code(<span class=\"number\">401</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   app.run(host = <span class=\"string\">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x01-入坑出坑\"><a href=\"#0x01-入坑出坑\" class=\"headerlink\" title=\"0x01 入坑出坑\"></a>0x01 入坑出坑</h2><h4 id=\"问题1-K8s-Nginx-Ingress-Controller-转发-X-Forwarded-Proto-请求头的问题\"><a href=\"#问题1-K8s-Nginx-Ingress-Controller-转发-X-Forwarded-Proto-请求头的问题\" class=\"headerlink\" title=\"问题1.K8s Nginx Ingress Controller 转发 X-Forwarded-Proto 请求头的问题\"></a>问题1.K8s Nginx Ingress Controller 转发 X-Forwarded-Proto 请求头的问题</h4><p>问题说明: 在 Kubernetes 集群上部署了 Nginx Ingress Controller 最前端用的是阿里云七层负载均衡，部署后发现不能正确转发 X-Forwarded-Proto 请求头，造成 http 重定向到 https 无法正常工作，请问如何解决？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 问题补充：</span></span><br><span class=\"line\"><span class=\"comment\"># 用下面的命令进入 nginx-ingress 容器</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it daemonset/nginx-ingress -n nginx-ingress cat /etc/nginx/conf.d/production-cnblogs-ingress.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发现问题是下面的配置引起的</span></span><br><span class=\"line\">proxy_set_header X-Forwarded-Proto <span class=\"variable\">$scheme</span>;</span><br></pre></td></tr></table></figure>\n<p>问题解决: 终于在 Nginx Ingress Controller 的官方帮助文档 Advanced Configuration with Annotations 中找到一个注解（annotation）解决了这个问题，它就是 <code>nginx.org/redirect-to-https: &quot;true&quot;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Annotation: nginx.org/redirect-to-https</span><br><span class=\"line\">ConfigMap Key redirect-to-https</span><br><span class=\"line\">Description Sets the 301 redirect rule based on the value of the http_x_forwarded_proto header on the server block to force incoming traffic to be over HTTPS. Useful when terminating SSL <span class=\"keyword\">in</span> a load balancer <span class=\"keyword\">in</span> front of the Ingress controller</span><br><span class=\"line\"><span class=\"comment\"># 根据服务器块上http_x_forwarded_proto报头的值设置301重定向规则，以强制传入的流量使用HTTPS。在入口控制器前的负载均衡器中终止SSL时非常有用;</span></span><br></pre></td></tr></table></figure>\n<p>操作步骤：<br>1）在 cnblogs-ingress.yaml 中 annotations 下面添加 nginx.org/redirect-to-https: “true”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: extensions/v1beta1 </span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cnblogs-ingress</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    kubernetes.io/ingress.class: nginx</span><br><span class=\"line\">    nginx.org/redirect-to-https: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: q.cnblogs.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">        - backend:</span><br><span class=\"line\">            serviceName: q-web</span><br><span class=\"line\">            servicePort: 80</span><br></pre></td></tr></table></figure>\n<p>2) 更新 ingress 配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f cnblogs-ingress.yaml</span><br></pre></td></tr></table></figure>\n<p>3) 更新 nginx-ingress</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl rollout restart daemonset/nginx-ingress -n nginx-ingress &amp;&amp; \\</span><br><span class=\"line\">kubectl rollout status daemonset/nginx-ingress -n nginx-ingress</span><br></pre></td></tr></table></figure>\n<p>4）查看 inginx 容器中的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it daemonset/nginx-ingress -n nginx-ingress cat /etc/nginx/conf.d/production-cnblogs-ingress.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发现 proxy_set_header X-Forwarded-Proto $scheme; 变成了 proxy_set_header X-Forwarded-Proto https; ，并且增加了下面的 http 重定向 https 的配置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$http_x_forwarded_proto</span> = <span class=\"string\">'http'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nginx-ingress 自己完成了基于<code>X-Forwarded-Proto</code> 的 http 重定向到 https 的操作，应用都不需要自己处理了。</p>\n<p>Tips ：建议采用 kubernetes/ingress-nginx 而非 nginxinc/kubernetes-ingress : <a href=\"https://github.com/kubernetes/ingress-nginx\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/ingress-nginx</a></p>\n<p><br/></p>\n<h4 id=\"问题2-extensions-v1beta1-Ingress-is-deprecated-in-v1-14-unavailable-in-v1-22-use-networking-k8s-io-v1-Ingress\"><a href=\"#问题2-extensions-v1beta1-Ingress-is-deprecated-in-v1-14-unavailable-in-v1-22-use-networking-k8s-io-v1-Ingress\" class=\"headerlink\" title=\"问题2:extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress\"></a>问题2:extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress</h4><p>解决办法：根据当前 Kubernetes 版本中资源组与版本进行选择即可;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/K8s/Day7/demo1$ kubectl api-resources | grep <span class=\"string\">\"ingresses\"</span></span><br><span class=\"line\">ingresses                         ing          extensions                     <span class=\"literal\">true</span>         Ingress</span><br><span class=\"line\">ingresses                         ing          networking.k8s.io              <span class=\"literal\">true</span>         Ingress</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1 <span class=\"comment\"># 注意点否则将报上面的预警</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"问题3-Error-from-server-InternalError-error-when-applying-patch\"><a href=\"#问题3-Error-from-server-InternalError-error-when-applying-patch\" class=\"headerlink\" title=\"问题3.Error from server (InternalError): error when applying patch:\"></a>问题3.Error from server (InternalError): error when applying patch:</h4><p>错误信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f demo-ingress.yaml</span><br><span class=\"line\"><span class=\"comment\"># 错误1</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"metadata\"</span>:&#123;<span class=\"string\">\"annotations\"</span>:&#123;<span class=\"string\">\"kubectl.kubernetes.io/last-applied-configuration\"</span>:<span class=\"string\">\"&#123;\\\"apiVersion\\\":\\\"networking.k8s.io/v1\\\",\\\"kind\\\":\\\"Ingress\\\",\\\"metadata\\\":&#123;\\\"annotations\\\":&#123;\\\"kubernetes.io/ingress.class\\\":\\\"nginx\\\"&#125;,\\\"name\\\":\\\"nginx\\\",\\\"namespace\\\":\\\"default\\\"&#125;,\\\"spec\\\":&#123;\\\"rules\\\":[&#123;\\\"host\\\":\\\"nginx.ieasou.cn\\\",\\\"http\\\":&#123;\\\"paths\\\":[&#123;\\\"backend\\\":&#123;\\\"service\\\":&#123;\\\"name\\\":\\\"nginx\\\",\\\"port\\\":&#123;\\\"number\\\":80&#125;&#125;&#125;,\\\"path\\\":\\\"/\\\",\\\"pathType\\\":\\\"Prefix\\\"&#125;]&#125;&#125;]&#125;&#125;\\n\"</span>,<span class=\"string\">\"kubernetes.io/ingress.class\"</span>:<span class=\"string\">\"nginx\"</span>&#125;&#125;,<span class=\"string\">\"spec\"</span>:&#123;<span class=\"string\">\"rules\"</span>:[&#123;<span class=\"string\">\"host\"</span>:<span class=\"string\">\"nginx.ieasou.cn\"</span>,<span class=\"string\">\"http\"</span>:&#123;<span class=\"string\">\"paths\"</span>:[&#123;<span class=\"string\">\"backend\"</span>:&#123;<span class=\"string\">\"service\"</span>:&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"nginx\"</span>,<span class=\"string\">\"port\"</span>:&#123;<span class=\"string\">\"number\"</span>:80&#125;&#125;&#125;,<span class=\"string\">\"path\"</span>:<span class=\"string\">\"/\"</span>,<span class=\"string\">\"pathType\"</span>:<span class=\"string\">\"Prefix\"</span>&#125;]&#125;&#125;]&#125;&#125;</span><br><span class=\"line\">to:</span><br><span class=\"line\">Resource: <span class=\"string\">\"networking.k8s.io/v1, Resource=ingresses\"</span>, GroupVersionKind: <span class=\"string\">\"networking.k8s.io/v1, Kind=Ingress\"</span></span><br><span class=\"line\">Name: <span class=\"string\">\"nginx\"</span>, Namespace: <span class=\"string\">\"default\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>: <span class=\"string\">\"demo-ingress.yaml\"</span>: Internal error occurred: failed calling webhook <span class=\"string\">\"validate.nginx.ingress.kubernetes.io\"</span>: Post <span class=\"string\">\"https://ingress-nginx-controller-admission.ingress-nginx.svc:443/extensions/v1beta1/ingresses?timeout=30s\"</span>: x509: certificate is valid <span class=\"keyword\">for</span> k8s-master002, kubernetes, kubernetes.default, kubernetes.default.svc, kubernetes.default.svc.cluster.local, not </span><br><span class=\"line\">ingress-nginx-controller-admission.ingress-nginx.svc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误2</span></span><br><span class=\"line\">kubectl create -f ingress-nginx-http-v1.yaml</span><br><span class=\"line\">  <span class=\"comment\"># Error from server (InternalError): error when creating \"ingress-nginx-http-v1.yaml\": Internal error occurred: failed calling webhook \"validate.nginx.ingress.kubernetes.io\": an error on the server (\"\") has prevented the request from succeeding</span></span><br></pre></td></tr></table></figure>\n<p>解决办法: Webhook 删除后重新构建 ingress-nginx-http-v1.yaml 资源清单即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weiyigeek@ubuntu:~/K8s/Day7/demo2$ kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission</span><br><span class=\"line\">  <span class=\"comment\"># validatingwebhookconfiguration.admissionregistration.k8s.io \"ingress-nginx-admission\" deleted</span></span><br><span class=\"line\"></span><br><span class=\"line\">weiyigeek@ubuntu:~/K8s/Day7/demo2$ kubectl create -f ingress-nginx-http-v1.yaml  </span><br><span class=\"line\">  <span class=\"comment\"># ingress.networking.k8s.io/nginx-ingress-http created  # 未其他报错正常创建</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"问题4-查看ingress规则时提示kubernetes之ingress-error-endpoints-quot-default-http-backend-quot-not-found警告\"><a href=\"#问题4-查看ingress规则时提示kubernetes之ingress-error-endpoints-quot-default-http-backend-quot-not-found警告\" class=\"headerlink\" title=\"问题4.查看ingress规则时提示kubernetes之ingress error: endpoints &quot;default-http-backend&quot; not found警告\"></a>问题4.查看ingress规则时提示<code>kubernetes之ingress error: endpoints &quot;default-http-backend&quot; not found</code>警告</h4><ul>\n<li>问题信息:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe ing</span><br><span class=\"line\">Default backend: default-http-backend:80 (&lt;error: endpoints <span class=\"string\">\"default-http-backend\"</span> not found&gt;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>问题原因: 注意:根据您正在使用的Ingress控制器，您可能需要创建一个default-http-backend服务。没有规则的入口将所有流量发送到一个默认后端。默认后端通常是Ingress控制器的一个配置选项，在您的Ingress资源中没有指定。如果Ingress对象中的主机或路径都不匹配HTTP请求，则流量将被路由到默认后端。</li>\n<li>解决办法:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ingress 控制器</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  defaultbackend:</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: nginx-ingress-v1-svc</span><br><span class=\"line\">      port:</span><br><span class=\"line\">        number: 80</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br></p>\n<h4 id=\"问题5-设置了ingress无法正常显示页面，由于没有在资源清单中指定设置ingressclass名称\"><a href=\"#问题5-设置了ingress无法正常显示页面，由于没有在资源清单中指定设置ingressclass名称\" class=\"headerlink\" title=\"问题5.设置了ingress无法正常显示页面，由于没有在资源清单中指定设置ingressclass名称\"></a>问题5.设置了ingress无法正常显示页面，由于没有在资源清单中指定设置ingressclass名称</h4><p>问题描述: 由于没有给ingress规则设置默认的ClassName，此时带有虚拟主机头的响应为默认default-http后端。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.查看部署的ingress-nginx控制器名称k8s.io/ingress-nginx。</span></span><br><span class=\"line\">~$ kubectl get deployments.apps -n ingress-nginx ingress-nginx-controller -o yaml | grep <span class=\"string\">\" --controller-class\"</span></span><br><span class=\"line\">        - --controller-class=k8s.io/ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查看ingressclass的Name信息</span></span><br><span class=\"line\">~$ kubectl get ingressclasses.networking.k8s.io</span><br><span class=\"line\">  <span class=\"comment\"># NAME    CONTROLLER             PARAMETERS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx   k8s.io/ingress-nginx   &lt;none&gt;       12d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.编辑ingressclass</span></span><br><span class=\"line\">~$ kubectl get ingressclasses.networking.k8s.io</span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: IngressClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nginx</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/component: controller</span><br><span class=\"line\">    app.kubernetes.io/instance: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/managed-by: Helm</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/version: 1.1.1</span><br><span class=\"line\">    helm.sh/chart: ingress-nginx-4.0.15</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  controller: k8s.io/ingress-nginx</span><br><span class=\"line\">  parameters:</span><br><span class=\"line\">    apiGroup: k8s.example.com</span><br><span class=\"line\">    kind: IngressParameters</span><br><span class=\"line\">    name: external-lb</span><br><span class=\"line\">    namespace: external-configuration</span><br><span class=\"line\">    scope: Namespace</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.为ingress规则指定默认的ingresclass的名称。</span></span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: blog</span><br><span class=\"line\">  namespace: devtest</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">    <span class=\"comment\"># kubernetes.io/ingress.class: nginx         #  当使用多个 Ingress 控制器时进行配置，如果不定义 ingress.class，云提供商可能使用默认的 Ingress 控制器。</span></span><br><span class=\"line\">    ingressclass.kubernetes.io/is-default-class: <span class=\"literal\">true</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ingressClassName: nginx                        <span class=\"comment\">#  推荐</span></span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: <span class=\"string\">\"www.weiyigeek.top\"</span></span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - pathType: Prefix</span><br><span class=\"line\">        path: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">        backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: myweb-blog</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br></pre></td></tr></table></figure></p>\n<p><strong>温馨提示:</strong> ingressclass API 资源对象中, 在 sepc.parameters 字段中有一个 scope 和 namespace 字段，可用来引用特定于名字空间的资源，对 Ingress 类进行配置。(<code>FEATURE STATE: Kubernetes v1.22 [beta]</code>)</p>\n<ul>\n<li>scope 字段默认为 Cluster，表示默认是集群作用域的资源。 </li>\n<li>scope 设置为 Namespace 并设置 namespace 字段就可以引用某特定名字空间中的参数资源。</li>\n</ul>\n<p><strong>温馨提示:</strong> 当前 ingress 1.1.1 版本中使用 <code>ingressClassName</code> 字段来替代<code>kubernetes.io/ingress.class</code> 注解, 两则区别在于该注解通常用于引用实现该 Ingress 的控制器的名称， 而这个新的字段则是对一个包含额外 Ingress 配置的 IngressClass 资源的引用， 包括 Ingress 控制器的名称。</p>\n<p><strong>温馨提示:</strong> 我们也可以将一个 IngressClass 资源的 <code>ingressclass.kubernetes.io/is-default-class</code> 注解设置为 true ，以确保在未指定 ingressClassName 字段的情况下，Ingress 也能够分配为这个默认的 IngressClass.</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Kubernetes","path":"api/categories/Kubernetes.json"},{"name":"负载均衡","path":"api/categories/负载均衡.json"}],"tags":[{"name":"ingress-nginx","path":"api/tags/ingress-nginx.json"}]}