{"title":"Ansible自动化运维学习笔记5","slug":"系统运维/自动化运维/Ansible/Ansible自动化运维学习笔记5","date":"2019-08-06T06:34:30.000Z","updated":"2020-10-10T02:37:47.296Z","url":"2019/8-6-270.html","path":"api/articles/2019/8-6-270.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"常用过滤器一-filters\"><a href=\"#常用过滤器一-filters\" class=\"headerlink\" title=\"常用过滤器一(filters)\"></a>常用过滤器一(filters)</h4><p>描述：”过滤器（filters）”可以帮助我们对数据进行处理，ansible中的过滤器功能来自于<code>jinja2模板引擎</code>，我们可以借助jinja2的过滤器功能在ansible中对数据进行各种处理;很多其他的过滤器有些是jinja2内置的有些是ansible特有,变量和过滤器之间采用类似于管道符进行拼接;</p>\n<p><em>(1)字符串操作有关的过滤器:</em></p>\n<ul>\n<li>upper 过滤器 : 将所有小写字母都被变成了大写</li>\n<li>lower 过滤器 : 将所有大写字母都被变成了小写</li>\n<li>capitalize 过滤器 : 将字符串变成首字母大写,之后所有字母纯小写</li>\n<li>reverse 过滤器 : 将字符串反转</li>\n<li>list 过滤器 : 将字符串转换成列表，每个字符作为一个元素</li>\n<li>shuffle 过滤器 : 字面意思为洗牌,将字符串转换成列表每个字符作为一个元素，并且随机打乱顺序 #在随机打乱顺序时将ansible_date_time.epoch的值设置为随机种子</li>\n<li>first 过滤器 : 返回字符串的第一个字符</li>\n<li>last 过滤器 : 返回字符串的最后一个字符</li>\n<li>length 过滤器 : 返回字符串长度,length与count等效,可以写为count</li>\n<li>center(width=30) : 将字符串放在中间，并且设置字符串的长度默认以0补齐</li>\n</ul>\n<p><em>(2)数字操作有关的过滤器</em></p>\n<ul>\n<li>int,int(default=6) : 将对应的值转换成int类型,将对应的值转换成int类型,如果无法转换,默认返回0</li>\n<li>float,float(8.88) : 将对应的值转换成浮点型，如果无法转换，默认返回’0.0’,当对应的值无法被转换成浮点型时，则返回指定值’8.8‘</li>\n<li>abs : 获取对应数值的绝对值</li>\n<li>round,round(5): 四舍五入或者取小数点后</li>\n<li>random(seed=(ansible_date_time.epoch)),random(start=5),random(start=5,step=3): 随机返回一个随机数并且可以设置步长，同样可以设置随机数种子</li>\n</ul>\n<p><em>(3)与列表相关的过滤器</em></p>\n<ul>\n<li>length,first,last,random,shuffle,upper,lower  : 与前面意思相同不同在于是列表</li>\n<li>min : 返回列表中最小的值</li>\n<li>max : 返回列表中最大的值</li>\n<li>sort, sort(reverse=true) :将列表升序排序输出,将列表降序排序输出</li>\n<li>sum : 返回纯数字非嵌套列表中所有数字的和</li>\n<li>flatten : 那么使用flatten可以’拉平’嵌套的列表</li>\n<li>join, join(‘ , ‘) : 列表元素合成字符串还可以每个元素之间用指定的字符隔开；</li>\n<li>unique : 去掉列表中重复的元素，重复的元素只留下一个</li>\n<li>union(testvar12) : 两个列表的并集</li>\n<li>intersect(testvar12) : 两个列表的交集</li>\n<li>symmetric_difference(testvar12) : 去除两个列表的补集</li>\n<li>difference(testvar12) : 两个列表的交集在列表1中的补集</li>\n</ul>\n<p><em>(4)变量未定义时相关操作的过滤器</em></p>\n<ul>\n<li>default(‘WeiyiGeek’) : 如果变量没有定义，则临时返回一个指定的默认值</li>\n<li>mandatory : 如果对应的变量未定义,则报出“Mandatory variable not defined.”错误</li>\n</ul>\n<p><br></p>\n<p>基础示例1：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat &gt;filtersString.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    testvar:</span> <span class=\"string\">\"abc123ABC 666\"</span></span><br><span class=\"line\"><span class=\"attr\">    testvar1:</span> <span class=\"string\">\"  abc  \"</span></span><br><span class=\"line\"><span class=\"attr\">    testvar2:</span> <span class=\"string\">'123456789'</span></span><br><span class=\"line\"><span class=\"attr\">    testvar3:</span> <span class=\"string\">\"1a2b,@#$%^&amp;\"</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成纯大写.将获取到的变量的值中的所有字母都变成大写</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | upper &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成纯小写</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | lower &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串变成首字母大写,之后所有字母纯小写</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | capitalize &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串反转</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | reverse &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串的第一个字符</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | first &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串的最后一个字符</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar | last &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串开头和结尾的空格去除</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar1 | trim &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串放在中间，并且设置字符串的长度为30，字符串两边用空格补齐30位长</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar1 | center(width=30) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回字符串长度,length与count等效,可以写为count</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar2 | length &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar3 | list &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#shuffle的字面意思为洗牌</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar3 | shuffle &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将字符串转换成列表，每个字符作为一个元素，并且随机打乱顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#在随机打乱顺序时，将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以使用其他值作为随机种子，ansible_date_time.epoch是facts信息</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar3 | shuffle(seed=(ansible_date_time.epoch)) &#125;&#125;</span> </span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>基础示例1：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat &gt;filtersNumber.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">test70</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    testvar4:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成int类型</span></span><br><span class=\"line\">      <span class=\"comment\">#ansible中，字符串和整形不能直接计算，比如&#123;&#123; 8+'8' &#125;&#125;会报错</span></span><br><span class=\"line\">      <span class=\"comment\">#所以，我们可以把一个值为数字的字符串转换成整形后再做计算</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 8+('8' | int) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成int类型,如果无法转换,默认返回0</span></span><br><span class=\"line\">      <span class=\"comment\">#使用int(default=6)或者int(6)时，如果无法转换则返回指定值6</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 'a' | int(default=6) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将对应的值转换成浮点型，如果无法转换，默认返回'0.0'</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '8' | float &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#当对应的值无法被转换成浮点型时，则返回指定值’8.8‘</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 'a' | float(8.88) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#获取对应数值的绝对值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar4 | abs &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#四舍五入</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 12.5 | round &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取小数点后五位</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 3.1415926 | round(5) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到100中随机返回一个随机数</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 100 | random &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从5到10中随机返回一个随机数</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 10 | random(start=5) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从5到15中随机返回一个随机数,步长为3</span></span><br><span class=\"line\">      <span class=\"comment\">#步长为3的意思是返回的随机数只有可能是5、8、11、14中的一个</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 15 | random(start=5,step=3) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到15中随机返回一个随机数,这个随机数是5的倍数</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 15 | random(step=5) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从0到15中随机返回一个随机数，并将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#也可以使用其他值作为随机种子，ansible_date_time.epoch是facts信息</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 15 | random(seed=(ansible_date_time.epoch)) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>基础示例2：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;filtersList.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    testvar7:</span> <span class=\"string\">[22,18,5,33,27,30]</span></span><br><span class=\"line\"><span class=\"attr\">    testvar8:</span> <span class=\"string\">[1,[7,2,[15,9]],3,5]</span></span><br><span class=\"line\"><span class=\"attr\">    testvar9:</span> <span class=\"string\">[1,'b',5]</span></span><br><span class=\"line\"><span class=\"attr\">    testvar10:</span> <span class=\"string\">[1,'A','b',['QQ','wechat'],'CdEf']</span></span><br><span class=\"line\"><span class=\"attr\">    testvar11:</span> <span class=\"string\">['abc',1,3,'a',3,'1','abc']</span></span><br><span class=\"line\"><span class=\"attr\">    testvar12:</span> <span class=\"string\">['abc',2,'a','b','a']</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表长度,length与count等效,可以写为count</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | length &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中的第一个值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | first &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中的最后一个值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | last &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中最小的值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | min &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回列表中最大的值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | max &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表升序排序输出</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | sort &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表降序排序输出</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | sort(reverse=true) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#返回纯数字非嵌套列表中所有数字的和</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar7 | sum &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果列表中包含列表，那么使用flatten可以'拉平'嵌套的列表</span></span><br><span class=\"line\">      <span class=\"comment\">#2.5版本中可用,执行如下示例后查看效果</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar8 | flatten &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果列表中嵌套了列表，那么将第1层的嵌套列表‘拉平’</span></span><br><span class=\"line\">      <span class=\"comment\">#2.5版本中可用,执行如下示例后查看效果</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar8 | flatten(levels=1) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#过滤器都是可以自由结合使用的，就好像linux命令中的管道符一样</span></span><br><span class=\"line\">      <span class=\"comment\">#如下，取出嵌套列表中的最大值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar8 | flatten | max &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的元素合并成一个字符串</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | join &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的元素合并成一个字符串,每个元素之间用指定的字符隔开</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | join(' , ') &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从列表中随机返回一个元素</span></span><br><span class=\"line\">      <span class=\"comment\">#对列表使用random过滤器时，不能使用start和step参数</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | random &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#从列表中随机返回一个元素,并将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | random(seed=(ansible_date_time.epoch)) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#随机打乱顺序列表中元素的顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#shuffle的字面意思为洗牌</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | shuffle &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#随机打乱顺序列表中元素的顺序</span></span><br><span class=\"line\">      <span class=\"comment\">#在随机打乱顺序时，将ansible_date_time.epoch的值设置为随机种子</span></span><br><span class=\"line\">      <span class=\"comment\">#seed参数从ansible2.3版本开始可用</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar9 | shuffle(seed=(ansible_date_time.epoch)) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的每个元素变成纯大写</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar10 | upper &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将列表中的每个元素变成纯小写</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar10 | lower &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#去掉列表中重复的元素，重复的元素只留下一个</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar11 | unique &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#将两个列表合并，重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#也就是求两个列表的并集</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar11 | union(testvar12) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出两个列表的交集，重复的元素只留下一个</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar11 | intersect(testvar12) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出存在于testvar11列表中,但是不存在于testvar12列表中的元素</span></span><br><span class=\"line\">      <span class=\"comment\">#去重后重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#换句话说就是:两个列表的交集在列表1中的补集</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar11 | difference(testvar12) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#取出两个列表中各自独有的元素,重复的元素只留下一个</span></span><br><span class=\"line\">      <span class=\"comment\">#即去除两个列表的交集，剩余的元素</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar11 | symmetric_difference(testvar12) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>基础示例3：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">cat</span> <span class=\"string\">&gt;filtersVarible.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">test70</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    testvar6:</span> <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果变量没有定义，则临时返回一个指定的默认值</span></span><br><span class=\"line\">      <span class=\"comment\">#注：如果定义了变量，变量值为空字符串，则会输出空字符</span></span><br><span class=\"line\">      <span class=\"comment\">#default过滤器的别名是d</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar5 | default('WeiyiGeek') &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果变量的值是一个空字符串或者变量没有定义，则临时返回一个指定的默认值</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar6 | default('WeiyiGeek',boolean=true) &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\">      <span class=\"comment\">#如果对应的变量未定义,则报出“Mandatory variable not defined.”错误，而不是报出默认错误</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; testvar5 | mandatory &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p>default过滤器还有一个很方便的用法，不仅能在变量未定义时返回指定的值，还能够让模块的参数变得”可有可无”</p>\n<ul>\n<li>如果item有mode属性，就把file模块的mode参数的值设置为item的mode属性的值</li>\n<li>如果item没有mode属性，file模块就直接省略mode参数’omit’的字面意思就是”省略”</li>\n</ul>\n<p>实际案例：对应其中一个建立建立的文件进行权限设定，而其他建立的文件则设置为系统缺省权限;<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat &gt;default.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  vars:</span></span><br><span class=\"line\"><span class=\"attr\">    paths:</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/tmp/test</span></span><br><span class=\"line\"><span class=\"attr\">        mode:</span> <span class=\"string\">'0444'</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/tmp/foo</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/tmp/bar</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\">  <span class=\"comment\">#未使用了default过滤器</span></span><br><span class=\"line\">  <span class=\"comment\"># - file: dest=&#123;&#123;item.path&#125;&#125; state=touch mode=&#123;&#123;item.mode&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">#   with_items: \"&#123;&#123; paths &#125;&#125;\"</span></span><br><span class=\"line\">  <span class=\"comment\">#   when: item.mode is defined</span></span><br><span class=\"line\">  <span class=\"comment\"># - file: dest=&#123;&#123;item.path&#125;&#125; state=touch</span></span><br><span class=\"line\">  <span class=\"comment\">#   with_items: \"&#123;&#123; paths &#125;&#125;\"</span></span><br><span class=\"line\">  <span class=\"comment\">#   when: item.mode is undefined</span></span><br><span class=\"line\">  <span class=\"comment\">#使用了default过滤器</span></span><br><span class=\"line\"><span class=\"attr\">  - file:</span> <span class=\"string\">dest=&#123;&#123;item.path&#125;&#125;</span> <span class=\"string\">state=touch</span> <span class=\"string\">mode=&#123;&#123;item.mode</span> <span class=\"string\">| default(omit)&#125;&#125; #我们并没有对文件是否有mode属性进行判断，而是直接调用了file模块的mode参数</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">    with_items:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; paths &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p>过滤器的用法详细:</p>\n<ul>\n<li>jinja2的官网链接:<a href=\"http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters\" target=\"_blank\" rel=\"noopener\">http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters</a></li>\n</ul>\n<p><br></p>\n<h4 id=\"json-query-过滤器\"><a href=\"#json-query-过滤器\" class=\"headerlink\" title=\"json_query 过滤器\"></a>json_query 过滤器</h4><p>描述：如果有时候您从某处API接口进行请求并且成功返回一串json字符串的话,有当您打开后发现里面是杂乱无章的这时可以借助于我们的ansible神器;<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"logs\"</span>:[&#123;<span class=\"attr\">\"domain\"</span>:<span class=\"string\">\"test.com\"</span>,<span class=\"attr\">\"url\"</span>:<span class=\"string\">\"?key=asdashashdhad&amp;uid=124\"</span>&#125;,&#123;<span class=\"attr\">\"domain\"</span>:<span class=\"string\">\"test.com\"</span>,<span class=\"attr\">\"url\"</span>:<span class=\"string\">\"?key=jioenlkhuxcai&amp;uid=125\"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将这段数据所在的文件当做变量文件引入到playbook中，然后输出对应的变量即可;<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">test70</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - include_vars:</span></span><br><span class=\"line\"><span class=\"attr\">      file:</span> <span class=\"string\">\"/testdir/ansible/CDN.log\"</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">testjson</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;test.json&#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure><br>运行上面这段脚本后便会将杂乱无章的json格式化显示;<br>原因：其实<code>json是yaml的子集</code>，<code>yaml是json的超集</code>，yaml格式的数据和json格式的数据是可以<code>互相转换</code>的，所以对于ansible来说，当我们把上例中的json数据文件当做变量文件引入时，就好像引入了一个我们定义好的yaml格式的变量文件一样，对于ansible来说是没有区别的，而且，即使在变量文件中使用yaml格式定义了变量，在使用debug模块输出变量信息时，ansible也会自动将yaml格式的数据转化为json格式后进行输出;</p>\n<p>我们把上述json数据转换成yaml的格式，同时列出上述数据的json格式与yaml格式，你可以根据自己的使用习惯选择阅读哪种格式的数据，以便你能够更好的理解这段数据的含义，yaml格式如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat &gt;/root/filter.txt&lt;&lt;END</span></span><br><span class=\"line\">---</span><br><span class=\"line\">logs:</span><br><span class=\"line\">- domainName: test.com</span><br><span class=\"line\">  files:</span><br><span class=\"line\">   - dateFrom: 2018-09-05-0000</span><br><span class=\"line\">     url: ?key=asdashashdhad&amp;uid=124</span><br><span class=\"line\">- domainName: test123.com</span><br><span class=\"line\">  files:</span><br><span class=\"line\">   - dateFrom: 2018-09-05-0000</span><br><span class=\"line\">     url: ?key=asdashashdhad&amp;uid=124</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>此刻如果我们想要获取到整个列表中的所有日志文件的Url，我们该怎么办呢？<br>答:我们有两种方式一种是通过with_subelements,另外一种是通过json_query的过滤器实现;<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat &gt;/root/filterYml.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - include_vars:</span></span><br><span class=\"line\"><span class=\"attr\">      file:</span> <span class=\"string\">\"/root/filter.txt\"</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">vartest</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;item.1.url&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    with_subelements:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest.logs&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">files</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure><br>执行结果:(坑呀)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TASK [debug] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; (item=[&#123;u<span class=\"string\">'domainName'</span>: u<span class=\"string\">'test.com'</span>&#125;, &#123;u<span class=\"string\">'url'</span>: u<span class=\"string\">'?key=asdashashdhad&amp;uid=124'</span>, u<span class=\"string\">'dateFrom'</span>: u<span class=\"string\">'2018-09-05-0000'</span>&#125;]) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"?key=asdashashdhad&amp;uid=124\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; (item=[&#123;u<span class=\"string\">'domainName'</span>: u<span class=\"string\">'test123.com'</span>&#125;, &#123;u<span class=\"string\">'url'</span>: u<span class=\"string\">'?key=asdashashdhad&amp;uid=124'</span>, u<span class=\"string\">'dateFrom'</span>: u<span class=\"string\">'2018-09-05-0000'</span>&#125;]) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: <span class=\"string\">\"?key=asdashashdhad&amp;uid=124\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>json_query过滤器</strong><br>描述：可以直接提取json数据,可以进行通配符进行配置,从而比上面采用with_subelement更加的简便;在复现上面的实例的时候我们先来看看你它如何使用;<br>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat &gt; filter1.txt&lt;&lt;END</span></span><br><span class=\"line\">---</span><br><span class=\"line\">users:</span><br><span class=\"line\">- name: tom</span><br><span class=\"line\">  age: 17</span><br><span class=\"line\">  hobby:</span><br><span class=\"line\">    - run</span><br><span class=\"line\">    - pingpang</span><br><span class=\"line\">- name: jerry</span><br><span class=\"line\">  age: 12</span><br><span class=\"line\">  hobby:</span><br><span class=\"line\">    - computer</span><br><span class=\"line\">    - basketball</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>当数据结构中存在列表时，我们可以使用\\”列表名[*]\\”获取到列表下面的所有项</li>\n<li>使用json_query过滤器对这个变量进行了处理json_query(‘users[*].name’)表示找到users列表中所有元素的name属性</li>\n<li>使用json_query(‘test.users[?name==`tom`].hobby[*]’)表示只查找users列表中name属性等于tom的hobby信息 (注意是反引号)</li>\n<li>使用json_query(‘test.users[*].{uname:name,uage:age}’)表示找到users列表中所有用户的name值和age值</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat &gt;json_queryDemo.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - include_vars:</span></span><br><span class=\"line\"><span class=\"attr\">      file:</span> <span class=\"string\">\"/root/filter1.txt\"</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">vartest</span></span><br><span class=\"line\">      <span class=\"comment\">#坑：注意下面是name(在palybook执行中显示的title)</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">\"json_query Demo 1 : Name\"</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest | json_query('users[*].name')&#125;&#125;</span>\"</span> </span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">\"json_query Demo 2 : Hobby\"</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest | json_query('users[*].hobby[*]')&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">\"Advances json_query Demo1\"</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest | json_query('users[?name==\\`tom\\`].hobby[*]')&#125;&#125;</span>\"</span> <span class=\"comment\">#关键点指定用户过滤</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">\"Advances json_query Demo2\"</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\">       <span class=\"comment\">#用户的姓名和年龄都按照我们定义的方式输出</span></span><br><span class=\"line\"><span class=\"attr\">       msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest | json_query('users[*].&#123;username:name,userage:age&#125;')&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TASK [json_query Demo 1 : Name] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: [<span class=\"string\">\"tom\"</span>,<span class=\"string\">\"jerry\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [json_query Demo 2 : Hobby] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: [</span><br><span class=\"line\">        [<span class=\"string\">\"run\"</span>, <span class=\"string\">\"pingpang\"</span>],</span><br><span class=\"line\">        [<span class=\"string\">\"computer\"</span>,<span class=\"string\">\"basketball\"</span>]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [Advances json_query Demo] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: [[<span class=\"string\">\"run\"</span>,<span class=\"string\">\"pingpang\"</span>]]  <span class=\"comment\">#关键点1 过滤判断是关键</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">TASK [Advances json_query Demo2] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: [</span><br><span class=\"line\">        &#123;<span class=\"string\">\"userage\"</span>: 17, <span class=\"string\">\"username\"</span>: <span class=\"string\">\"tom\"</span>&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">\"userage\"</span>: 12, <span class=\"string\">\"username\"</span>: <span class=\"string\">\"jerry\"</span>&#125;  <span class=\"comment\">#关键点2 指定格式输出</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>回归最初的示例:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cat &gt;json_query.yml&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\"><span class=\"attr\">  - include_vars:</span></span><br><span class=\"line\"><span class=\"attr\">      file:</span> <span class=\"string\">\"/root/filter.txt\"</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">vartest</span></span><br><span class=\"line\"><span class=\"attr\">  - name:</span> <span class=\"string\">\"json_query Filter Demo\"</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;vartest|json_query('logs[*].files[*].url')&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TASK [json_query Filter Demo] </span><br><span class=\"line\">ok: [<span class=\"built_in\">local</span>] =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">#从这里可以看出于with_subelements关键字的不同更加的高效</span></span><br><span class=\"line\">    <span class=\"string\">\"msg\"</span>: [[<span class=\"string\">\"?key=asdashashdhad&amp;uid=124\"</span>], [<span class=\"string\">\"?key=asdashashdhad&amp;uid=124\"</span>]]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"常用过滤器二\"><a href=\"#常用过滤器二\" class=\"headerlink\" title=\"常用过滤器二\"></a>常用过滤器二</h4><p>描述：继续总结一些使用的过滤器,可以直接采用cmd进行测试:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看软连接的实际文件(注意硬连接是不行的)</span></span><br><span class=\"line\">ansible <span class=\"built_in\">local</span> -m debug -e <span class=\"string\">\"path=/bin/bash\"</span> -a <span class=\"string\">\"msg=&#123;&#123;path|realpath&#125;&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">- hosts:</span> <span class=\"string\">test70</span></span><br><span class=\"line\"><span class=\"attr\">  remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">  gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  tasks:</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#在调用shell模块时，如果引用某些变量时需要添加引号，则可以使用quote过滤器代替引号</span></span><br><span class=\"line\">  <span class=\"comment\">#示例如下，先看示例，后面会有注解</span></span><br><span class=\"line\"><span class=\"attr\">  - shell:</span> <span class=\"string\">\"echo <span class=\"template-variable\">&#123;&#123;teststr | quote&#125;&#125;</span> &gt; /testdir/testfile\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">\"a\\nb\\nc\"</span></span><br><span class=\"line\">  <span class=\"comment\">#上例中shell模块的写法与如下写法完全等效</span></span><br><span class=\"line\">  <span class=\"comment\">#shell: \"echo '&#123;&#123;teststr&#125;&#125;' &gt; /testdir/testfile\"</span></span><br><span class=\"line\">  <span class=\"comment\">#没错，如你所见，quote过滤器能够代替引号</span></span><br><span class=\"line\">  <span class=\"comment\">#上例中，如果不对&#123;&#123;teststr&#125;&#125;添加引号，则会报错，因为teststr变量中包含\"\\n\"转义符</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#ternary过滤器可以实现三元运算的效果 示例如下</span></span><br><span class=\"line\">  <span class=\"comment\">#如下示例表示如果name变量的值是John，那么对应的值则为Mr,否则则为Ms</span></span><br><span class=\"line\">  <span class=\"comment\">#简便的实现类似if else对变量赋值的效果</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span> </span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; (name == 'John') | ternary('Mr','Ms') &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">\"John\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#basename过滤器可以获取到一个路径字符串中的 文件名 \"msg\": \"test.conf\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;teststr | basename&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">\"/testdir/ansible/testfile\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#获取到一个windows路径字符串中的文件名,2.0版本以后的ansible可用</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;teststr | win_basename&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">'D:\\study\\WeiyiGeek'</span> </span><br><span class=\"line\">  <span class=\"comment\">#示例如下\"msg\": \"D:\\\\study\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#dirname过滤器可以获取到一个路径字符串中的 路径名</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;teststr | dirname&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">\"/testdir/ansible/testfile\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#获取到一个windows路径字符串中的文件名,2.0版本以后的ansible可用</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;teststr | win_dirname&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">'D:\\study\\WeiyiGeek'</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#将一个windows路径字符串中的盘符和路径分开,2.0版本以后的ansible可用</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123;teststr | win_splitdrive&#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">'D:\\study\\WeiyiGeek'</span></span><br><span class=\"line\">  <span class=\"comment\">#可以配合之前总结的过滤器一起使用，比如只获取到盘符/路径，示例如下 \"msg\": \"(u'D:', u'\\\\\\\\study\\\\\\\\WeiyiGeek')\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#realpath过滤器可以获取软链接文件所指向的真正文件</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; path | realpath &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">\"/testdir/ansible/testsoft\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#relpath过滤器可以获取到path对于“指定路径”来说的“相对路径”</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; path | relpath('/testdir/testdir') &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">\"/testdir/ansible\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#splitext过滤器可以将带有文件名后缀的路径从“.后缀”部分分开</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; path | splitext &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      path:</span> <span class=\"string\">\"/etc/nginx/conf.d/test.conf\"</span></span><br><span class=\"line\">  <span class=\"comment\">#可以配置之前总结的过滤器，获取到文件前缀名路径以及后缀名 \"msg\": \"(u'/etc/nginx/conf.d/test', u'.conf')\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#to_uuid过滤器能够为对应的字符串生成uuid  \"msg\": \"9e4cc6d9-89b3-5a09-be35-f3fbd1526102\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; teststr | to_uuid &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">\"This is a test statement\"</span> </span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#bool过滤器可以根据字符串的内容返回bool值true或者false</span></span><br><span class=\"line\">  <span class=\"comment\">#字符串的内容为yes、1、True、true则返回布尔值true，字符串内容为其他内容则返回false</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; teststr | bool &#125;&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"attr\">    vars:</span></span><br><span class=\"line\"><span class=\"attr\">      teststr:</span> <span class=\"string\">\"1\"</span></span><br><span class=\"line\">  <span class=\"comment\">#当和用户交互时，有可能需要用户从两个选项中选择一个，比如是否继续，</span></span><br><span class=\"line\">  <span class=\"comment\">#这时，将用户输入的字符串通过bool过滤器处理后得出布尔值，从而进行判断，比如如下用法</span></span><br><span class=\"line\">  <span class=\"comment\">#- debug:</span></span><br><span class=\"line\">  <span class=\"comment\">#    msg: \"output when bool is true\"</span></span><br><span class=\"line\">  <span class=\"comment\">#  when: some_string_user_input | bool</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#map过滤器可以从列表中获取到每个元素所共有的某个属性的值，并将这些值组成一个列表</span></span><br><span class=\"line\"><span class=\"comment\">#当列表中嵌套了列表，不能越级获取属性的值，也就是说只能获取直接子元素的共有属性值。</span></span><br><span class=\"line\"><span class=\"attr\">  - vars:</span></span><br><span class=\"line\"><span class=\"attr\">      users:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">tom</span></span><br><span class=\"line\"><span class=\"attr\">        age:</span> <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"attr\">        hobby:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">Skateboard</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">VideoGame</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">jerry</span></span><br><span class=\"line\"><span class=\"attr\">        age:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">        hobby:</span></span><br><span class=\"line\"><span class=\"bullet\">        -</span> <span class=\"string\">Music</span></span><br><span class=\"line\"><span class=\"attr\">    debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; users | map(attribute='name') | list &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#也可以组成一个字符串，用指定的字符隔开，比如分号</span></span><br><span class=\"line\">  <span class=\"comment\">#msg: \"&#123;&#123; users | map(attribute='name') | join(';') &#125;&#125;\"</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#与python中的用法相同，两个日期类型相减能够算出两个日期间的时间差</span></span><br><span class=\"line\">  <span class=\"comment\">#下例中，我们使用to_datatime过滤器将字符串类型转换成了日期了类型，并且算出了时间差</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">'<span class=\"template-variable\">&#123;&#123; (\"2016-08-14 20:00:12\"| to_datetime) - (\"2012-12-25 19:00:00\" | to_datetime) &#125;&#125;</span>'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#默认情况下，to_datatime转换的字符串的格式必须是“%Y-%m-%d %H:%M:%S”</span></span><br><span class=\"line\">  <span class=\"comment\">#如果对应的字符串不是这种格式，则需要在to_datetime中指定与字符串相同的时间格式，才能正确的转换为时间类型</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">'<span class=\"template-variable\">&#123;&#123; (\"20160814\"| to_datetime(\"%Y%m%d\")) - (\"2012-12-25 19:00:00\" | to_datetime) &#125;&#125;</span>'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#如下方法可以获取到两个日期之间一共相差多少秒</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">'<span class=\"template-variable\">&#123;&#123; ( (\"20160814\"| to_datetime(\"%Y%m%d\")) - (\"20121225\" | to_datetime(\"%Y%m%d\")) ).total_seconds() &#125;&#125;</span>'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#如下方法可以获取到两个日期“时间位”相差多少秒，注意：日期位不会纳入对比计算范围</span></span><br><span class=\"line\">  <span class=\"comment\">#也就是说，下例中的2016-08-14和2012-12-25不会纳入计算范围只是计算20:00:12与08:30:00相差多少秒</span></span><br><span class=\"line\">  <span class=\"comment\">#如果想要算出连带日期的秒数差则使用total_seconds()</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">'<span class=\"template-variable\">&#123;&#123; ( (\"2016-08-14 20:00:12\"| to_datetime) - (\"2012-12-25 08:30:00\" | to_datetime) ).seconds &#125;&#125;</span>'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#如下方法可以获取到两个日期“日期位”相差多少天，注意：时间位不会纳入对比计算范围</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">'<span class=\"template-variable\">&#123;&#123; ( (\"2016-08-14 20:00:12\"| to_datetime) - (\"2012-12-25 08:30:00\" | to_datetime) ).days &#125;&#125;</span>'</span></span><br><span class=\"line\">  <span class=\"comment\">######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#使用base64编码方式对字符串进行编码</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 'hello' | b64encode &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用base64编码方式对字符串进行解码</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; 'aGVsbG8=' | b64decode &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#######################################################################</span></span><br><span class=\"line\">  <span class=\"comment\">#使用sha1算法对字符串进行哈希</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | hash('sha1') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用md5算法对字符串进行哈希</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | hash('md5') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#获取到字符串的校验和,与md5哈希值一致</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | checksum &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用blowfish算法对字符串进行哈希，注:部分系统支持</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | hash('blowfish') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用sha256算法对字符串进行哈希,哈希过程中会生成随机\"盐\",以便无法直接对比出原值</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | password_hash('sha256') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用sha256算法对字符串进行哈希,并使用指定的字符串作为\"盐\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123456' | password_hash('sha256','mysalt') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用sha512算法对字符串进行哈希,哈希过程中会生成随机\"盐\",以便无法直接对比出原值</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123123' | password_hash('sha512') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#使用sha512算法对字符串进行哈希,并使用指定的字符串作为\"盐\"</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123123' | password_hash('sha512','.U5cjaHe55KK') &#125;&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\">#如下方法可以幂等的为每个主机的密码生成对应哈希串</span></span><br><span class=\"line\">  <span class=\"comment\">#有了之前总结的过滤器用法作为基础，你一定已经看懂了</span></span><br><span class=\"line\"><span class=\"attr\">  - debug:</span></span><br><span class=\"line\"><span class=\"attr\">      msg:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; '123123' | password_hash('sha512', 65534|random(seed=inventory_hostname)|string) &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"自动化运维","path":"api/categories/自动化运维.json"},{"name":"运维基础","path":"api/categories/运维基础.json"}],"tags":[{"name":"Ansible","path":"api/tags/Ansible.json"}]}