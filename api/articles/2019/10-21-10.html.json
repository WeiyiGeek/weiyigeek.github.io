{"title":"HTTPS原理介绍以及证书签名的申请配置","slug":"基础知识/Web原理/Web协议/HTTPS原理介绍以及证书签名的申请配置","date":"2019-10-21T02:34:30.000Z","updated":"2022-04-11T09:17:08.956Z","url":"2019/10-21-10.html","path":"api/articles/2019/10-21-10.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926092153.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926105051.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926111522.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926114558.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926115157.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926124122.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224235.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224554.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224457.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200427160937.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200427161322.png"],"content":"<p>[TOC]</p>\n<p>原文地址: HTTPS原理介绍以及证书签名的申请配置 (<a href=\"https://mp.weixin.qq.com/s/S-ZgJ3tFhmU4qvt80QwKqw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/S-ZgJ3tFhmU4qvt80QwKqw</a>)</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言介绍\"><a href=\"#0x00-前言介绍\" class=\"headerlink\" title=\"0x00 前言介绍\"></a>0x00 前言介绍</h4><p><strong>什么是 HTTP/HTTPS 协议？</strong></p>\n<ul>\n<li>HTTP协议全称Hyper Text Transfer Protocol-超文本传输协议，位于TCP/IP四层模型当中的应用层。<ul>\n<li>HTTP协议通过请求/响应的方式，在客户端和服务端之间进行通信。</li>\n<li>缺点:传输不够安全容易被拦截和篡改(HTTP协议的信息传输完全以明文方式，不做任何加密，相当于是在网络上“裸奔”)容易导致中间人攻击;</li>\n</ul>\n</li>\n<li>HTTPS协议全称Hypertext Transfer Protocol Secure，超文本传输安全协议,实际上是在HTTP协议的基础之上增加了SSL安全层（下面介绍的一系列认证流程就是在SSL层中完成）,这是一套使用公钥/私钥机制的加密系统<ul>\n<li>保护了交换数据隐私和完整性，提供对网站服务器身份认证的功能，简单来说它就是安全版的 HTTP。</li>\n<li>最新推出的TLS协议是SSL 3.0协议的升级版，和SSL协议的大体原理是相同的(简单的记就是TLS是SSL的升级版本)</li>\n</ul>\n</li>\n</ul>\n<p><strong>HTTP/HTTPS处于层次</strong><br>TCP/IP层次 | 说明<br>—|—<br>应用层(HTTP[HTTPS]/FTP) | HTTPS在HTTP基础上构建 SSL安全层,经过发展已经推出了TLS协议；<br>传输层(TCP/UDP) |<br>网络层(IP/ARP) |<br>数据链路层 |</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926092153.png\" alt=\"WeiyiGeek.层次\" title=\"\" class=\"\">\n                <p>WeiyiGeek.层次</p>\n            </figure>\n<p><br></p>\n<p><em>HTTPS 主要用途有三个：</em></p>\n<ul>\n<li>一是通过证书等信息确认网站的真实性；</li>\n<li>二是建立加密的信息通道；</li>\n<li>三是数据内容的完整性。</li>\n</ul>\n<p>HTTPS相比较于HTTP协议的一些关键点:</p>\n<ul>\n<li>成本问题:HTTPS要比HTTP更加消耗资源，SSL握手需要更多的数据包，加密解密也需要额外的运算。</li>\n<li>HTTPS的证书需要专门的机构颁发，大机构颁发的证书不是免费的每年都得交几百几千块钱才能申请到证书</li>\n<li>因为某些颁发证书的机构会滥发证书，甚至会制造假证书，假证书可以用来进行中间人攻击;</li>\n</ul>\n<hr>\n<h4 id=\"0x01-HTTPS原理\"><a href=\"#0x01-HTTPS原理\" class=\"headerlink\" title=\"0x01 HTTPS原理\"></a>0x01 HTTPS原理</h4><p>描述:在讲解HTTPS原理前面先来听听一个小故事；<br>在读小学的时候那时候不懂什么叫爱只知道喜欢和不喜欢,某一天上课我给我喜欢的女生写了一封告白信给她,不想在传递的过程之中被老师拦截并当场叫我宣读了,当时那是很尴尬也亲手藏送了我的爱情;<br>我当时在想如果上天愿意给我一个机会,我会将这封信加密后给她(并附上密码本),这样才凸显情调即使被老师拦截也不怕(因为她看不懂),说不定还能成功呢;</p>\n<p><em>为什么要出现HTTPS协议?</em><br>答:打个比方小灰是客户端，小灰的同事小红是服务端，有一天小灰试图给小红发送请求,但是由于传输信息是明文，这个信息有可能被某个中间人恶意截获甚至篡改<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926105051.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>所以为了解决这个问题我们提出了对数据进行加密传输处理,但是如何进行加密呢？以及如何选用加密方式?</p>\n<p><em>常见的对称加密与非对称加密方式:</em><br>对称加密:对称加密是指加密与解密的使用同一个密钥的加密算法。比如上面案例的(密码本)使用了同一套加密密码，所以我用的加密算法就是对称加密算法。</p>\n<ul>\n<li>目前常见的加密算法有：DES、AES、IDEA 等</li>\n</ul>\n<p>非对称加密使用的是两个密钥，公钥与私钥，我们会使用公钥对网站账号密码等数据进行加密，再用私钥对数据进行解密。<code>公钥会发给查看网站的所有人，而私钥是只有网站服务器自己拥有的</code>。</p>\n<ul>\n<li>目前常见非对称加密算法：RSA，DSA，DH等。</li>\n</ul>\n<p><br></p>\n<p><em>通过下面的方式的演变可以看到HTTPS协议的发展扩充</em></p>\n<p><strong>方式1:采用对称加密方式</strong><br>描述:小灰和小红可以事先约定一种对称加密方式，并且约定一个随机生成的密钥。<br>后续的通信中，信息发送方都使用密钥对信息加密，而信息接收方通过同样的密钥对信息解密。<br>该种方式缺陷: 因为第一次约定加密方式和密钥的通信仍然是明文，如果第一次通信就已经被拦截了，那么密钥就会泄露给中间人中间人仍然可以解密后续所有的通信内容。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926111522.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>为了解决这种方式我们<code>采用非对称加密</code>，为密钥的传输做一层额外的保护。</p>\n<p><br></p>\n<p><strong>方式2：采用非对称加密</strong><br>描述:非对称加密的一组秘钥对中包含一个公钥public和一个私钥private。<br>原理:明文既可以用<code>公钥加密，用私钥解密</code>；也可以用私钥加密，用公钥解密。在通信过程中，即使中间人在一开始就截获了公钥Key1，由于不知道私钥是什么也无从解密(但也不是绝对安全)。</p>\n<p><em>步骤流程:</em></p>\n<ul>\n<li>1.在小灰和小红建立通信的时候，小红首先把自己的公钥Key1发给小灰：</li>\n<li>2.收到小红的公钥以后，小灰自己生成一个用于对称加密的密钥Key2，并且用刚才接收的公钥Key1对Key2进行加密（这里有点绕）发送给小红：</li>\n<li>3.小红利用自己非对称加密的私钥，解开了公钥Key1的加密，获得了Key2的内容。从此以后两人就可以利用Key2进行对称加密的通信了。</li>\n</ul>\n<p><em>但是这时候攻击手法又发生了更新,是什么坏主意呢？</em></p>\n<ul>\n<li>中间人虽然不知道小红的私钥是什么，但是第一次通讯中截获了小红的公钥Key1之后，却可以偷天换日，自己另外生成一对公钥私钥把自己的公钥Key3发送给小灰。</li>\n<li>通信再次被中间人截获，中间人先用自己的私钥解开了Key3的加密，获得Key2然后再用当初小红发来的Key1重新加密再发给小红。</li>\n<li>两个人后续的通信尽管用Key2做了对称加密，但是中间人已经掌握了Key2所以可以轻松进行解密。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926114558.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>又为了解决这样的攻击方式,我们有必要引入第三方，一个权威的证书颁发机构（CA）来解决。</p>\n<p><br></p>\n<p><strong>方式3：证书颁发机构(CA)</strong><br>描述:签发证书的 CA 中心会发布一种权威性的电子文档—数字证书，它可以通过加密技术（对称加密与非对称加密）对我们在网上传输的信息进行加密,使用了SSL证书保证了网站的唯一性与真实性。<br>比如我在 github 上输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">账号：cbssfaw</span><br><span class=\"line\">密码：123djaosid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可是这个数据被黑客拦截盗窃了，那么加密后，黑客得到的数据可能就是这样的：</span></span><br><span class=\"line\">账号：çµø…≤¥ƒ∂ø†®∂˙∆¬</span><br><span class=\"line\">密码：∆ø¥§®†ƒ©®†©˚¬</span><br></pre></td></tr></table></figure><br>最后一个就是验证数据的完整性，当数据包经过无数次路由器转发后会发生数据劫持，黑客将数据劫持后进行篡改比如植入羞羞的小广告。开启HTTPS后黑客就无法对数据进行篡改，就算真的被篡改了我们也可以检测出问题。</p>\n<p>那到底什么是证书呢？<br>基于证书系统的公钥</p>\n<ul>\n<li>一方面保证用户连接的是正确的网站，</li>\n<li>另一方面结合私钥，可以保证网络数据不会被窃听。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926115157.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>流程如下：</p>\n<ol>\n<li>作为服务端的小红，首先把自己的公钥发给证书颁发机构，向证书颁发机构申请证书。</li>\n<li>证书颁发机构自己也有一对公钥私钥。机构利用自己的私钥来加密Key1，并且通过服务端网址等信息生成一个证书签名同样经过机构的<code>私钥加密</code>。证书制作完成后机构把证书发送给了服务端小红。</li>\n<li>当小灰向小红请求通信的时候，小红不再直接返回自己的公钥，而是把自己申请的证书返回给小灰。</li>\n<li>小灰收到证书以后验证证书的真伪。需要说明的是各大浏览器和操作系统已经维护了所有权威证书机构的名称和公钥。所以小灰只需要知道是<code>哪个机构颁布的证书，就可以从本地找到对应的机构公钥，解密出证书签名</code>。</li>\n<li>接下来小灰按照同样的签名规则，自己也生成一个证书签名，如果两个签名一致，说明证书是有效的。验证成功后小灰就可以放心地再次利用机构公钥，解密出服务端小红的公钥Key1。</li>\n<li>小灰利用服务端公钥Key1生成自己的对称加密密钥Key2，并且用服务端公钥Key1加密Key2发送给小红。</li>\n<li>最后小红用自己的私钥解开加密，得到对称加密密钥Key2。于是两人开始用Key2进行对称加密的通信。</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190926124122.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>这时候就算中间人自己也向权威机构申请一个证书,并把小红发的证书偷偷换成自己的证书也没什么用;因为证书的签名是又服务端网址等信息生成的，并且经过权威机构(CA)私钥加密, 中间人也无法篡改，所以发给小灰的假证书是无法通过验证的（但是需要防止某些CA滥发证书，甚至会制造假证书，假证书可以用来进行钓鱼攻击）;</p>\n<p>各大浏览器例如Chrome、Firefox等，会时不时宣布吊销某些机构证书的决定,所以对付假证书的最好办法，就是把颁发假证书的机构删掉。</p>\n<hr>\n\n<h4 id=\"0x02-证书申请配置\"><a href=\"#0x02-证书申请配置\" class=\"headerlink\" title=\"0x02 证书申请配置\"></a>0x02 证书申请配置</h4><p>首先了解一下SSL证书：<br>SSL证书用于加密HTTP协议也就是HTTPS。它分为三种类型，<code>域名型SSL证书（DV SSL）、企业型SSL证书（OVSSL）、增强型SSL证书（EVSSL）</code>。</p>\n<p><strong>1.SSL证书三种类型</strong><br>1.1 域名型 SSL 证书（DV SSL - Domain Validation SSL）</p>\n<ul>\n<li>即证书颁布机构只对域名的所有者进行在线检查，通常是验证域名下某个指定文件的内容，或者验证与域名相关的某条 TXT 记录；<br>比如访问 [http|https]://<a href=\"http://www.weiyigeek.top/.../test.txt，文件内容：\" target=\"_blank\" rel=\"noopener\">www.weiyigeek.top/.../test.txt，文件内容：</a> 2016082xxxxxmimvpcom2016<br>或添加一条 TXT 记录：<a href=\"http://www.weiyigeek.top\" target=\"_blank\" rel=\"noopener\">www.weiyigeek.top</a> –&gt; TXT –&gt; 20170xxxxxmimvpcom2066</li>\n</ul>\n<p>1.2 企业型 SSL 证书（OV SSL - Organization Validation SSL）</p>\n<ul>\n<li>是要购买者提交组织机构资料和单位授权信等在官方注册的凭证，证书颁发机构在签发 SSL 证书前，不仅仅要检验域名所有权，还必须对这些资料的真实合法性进行多方查验，只有通过验证的才能颁发 SSL 证书。</li>\n</ul>\n<p>1.3 增强型 SSL 证书（EV SSL - Extended Validation SSL）</p>\n<ul>\n<li>与其他 SSL 证书一样，都是基于 SSL/TLS 安全协议，但是验证流程更加具体详细，验证步骤更多，这样一来证书所绑定的网站就更加的可靠、可信。它跟普通 SSL 证书的区别也是明显的，安全浏览器的地址栏变绿，如果是不受信的 SSL 证书则拒绝显示，如果是钓鱼网站，地址栏则会变成红色，以警示用户。</li>\n</ul>\n<p><br></p>\n<p><strong>2.推荐申请的SSL证书的网站：</strong></p>\n<ul>\n<li>2.1.腾讯云的SSL证书申请地址（推荐）<a href=\"https://cloud.tencent.com/product/ssl\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/product/ssl</a> </li>\n<li>2.2.Let’s Encrypt是国外一个公共的免费SSL项目（推荐）<a href=\"https://letsencrypt.org\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org</a></li>\n<li>2.3.CloudFlare SSL <a href=\"https://www.cloudflare.com/ssl/\" target=\"_blank\" rel=\"noopener\">https://www.cloudflare.com/ssl/</a></li>\n<li>2.4.sslforfree <a href=\"https://www.sslforfree.com/\" target=\"_blank\" rel=\"noopener\">https://www.sslforfree.com/</a></li>\n</ul>\n<p><br></p>\n<p><strong>3.为网站配置SSL证书</strong><br>描述:在腾讯云申请后就能下载到一个压缩文件，里面存放了各个WEB应用服务器如何进行配置SSL；<br>也可以参考：<a href=\"https://cloud.tencent.com/doc/product/400/%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/doc/product/400/%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E6%8C%87%E5%BC%95</a></p>\n<p><em>(1) nginx为服务的配置方法，</em></p>\n<ul>\n<li><p>首先你需要将解压出来的Nginx下的两个文件拷贝到你nginx.conf的目录下(例如:/usr/local/nginx/conf目录下)，然后为nginx.conf添加以下的配置(如果已经有监听443端口的server则作出对应的修改即可)，443端口跟80端口一样，只是80被http使用，443是https使用，当然这只是我的理解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 443 ssl http2;</span><br><span class=\"line\">  listen [::]:443 ssl http2;</span><br><span class=\"line\">  server_name weiyigeek.top;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># HSTS (ngx_http_headers_module is required) 应该只使用 HTTPS 而不是使用 HTTP 通信</span></span><br><span class=\"line\">  add_header Strict-Transport-Security <span class=\"string\">\"max-age=31536000;includeSubDomains;preload\"</span> always;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># XXS-Protection</span></span><br><span class=\"line\">  add_header X-XSS-Protection <span class=\"string\">\"1; mode=block\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># MIME 模拟探测</span></span><br><span class=\"line\">  add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Frame 安全控制</span></span><br><span class=\"line\">  add_header X-Frame-Options ALLOW-FROM music.163.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Spider Robots 爬取策略限制</span></span><br><span class=\"line\">  add_header X-Robots-Tag none;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 开启 SSL ，如果想http 与 https 公用一个配置则可以将其注释( the \"ssl\" directive is deprecated )</span></span><br><span class=\"line\">  <span class=\"comment\"># ssl on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置证书链与证书密钥</span></span><br><span class=\"line\">  ssl_certificate      /etc/nginx/ssl/fullchain.cer;</span><br><span class=\"line\">  ssl_certificate_key  /etc/nginx/ssl/weiyigeek.top.key;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ssl会话复用超时时间以及会话复用缓存大小</span></span><br><span class=\"line\">  ssl_session_timeout 1d;</span><br><span class=\"line\">  ssl_session_cache shared:MozSSL:10m;  <span class=\"comment\"># about 40000 sessions</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置双证书时开启否则应该关闭</span></span><br><span class=\"line\">  ssl_session_tickets off;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">## OCSP stapling</span></span><br><span class=\"line\">  ssl_stapling on;</span><br><span class=\"line\">  ssl_stapling_verify on;</span><br><span class=\"line\">  <span class=\"comment\"># 使用根 CA 和中间证书验证 OCSP 响应的信任链</span></span><br><span class=\"line\">  ssl_trusted_certificate /etc/nginx/ssl/ca.cer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 仅使用ECDH是不用配置ssl_dhparam的否则你应该为它配置上 </span></span><br><span class=\"line\">  <span class=\"comment\"># curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam</span></span><br><span class=\"line\">  ssl_dhparam /path/to/dhparam;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 兼容性较为通用的SSL协议与加密算法套件</span></span><br><span class=\"line\">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;</span><br><span class=\"line\">  <span class=\"comment\"># 安全配置: ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span></span><br><span class=\"line\">  <span class=\"comment\"># 证书常规握手加密算法方式共十八个，ECDHE、DHE、AES开头分别6个</span></span><br><span class=\"line\">  ; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:HIGH:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DES:!MD5:!RC4;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 为了兼容性推荐服务器自动选择要使用的算法套件</span></span><br><span class=\"line\">  ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># replace with the IP address of your resolver</span></span><br><span class=\"line\">  resolver 223.6.6.6 8.8.8.8 192.168.12.254;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置完成后重启你的nginx服务，你就可以在浏览器上使用https访问你的网站了，浏览器会识别你的网站为安全网站，效果如下</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224235.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ul>\n<p><em>(2) Apache 2.x 证书部署</em><br>2.1 获取证书:</p>\n<ul>\n<li>Apache文件夹内获得证书文件<code>1_root_bundle.crt，2_www.domain.com_cert.crt 和私钥文件 3_www.domain.com.key</code>。</li>\n</ul>\n<ul>\n<li>1_root_bundle.crt 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–” 和 “—–END CERTIFICATE—–”,</li>\n<li>2_<a href=\"http://www.domain.com_cert.crt\" target=\"_blank\" rel=\"noopener\">www.domain.com_cert.crt</a> 文件包括一段证书代码 “—–BEGIN CERTIFICATE—–” 和 “—–END CERTIFICATE—–”,</li>\n<li>3_<a href=\"http://www.domain.com.key\" target=\"_blank\" rel=\"noopener\">www.domain.com.key</a> 文件包括一段私钥代码 “—–BEGIN RSA PRIVATE KEY—–” 和 “—–END RSA PRIVATE KEY—–”。</li>\n</ul>\n<p>2.2 编辑 Apache 根目录下 conf/httpd-ssl.conf 文件，修改成如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost _default_:443&gt;</span><br><span class=\"line\">DocumentRoot &quot;&#x2F;var&#x2F;www&#x2F;html&quot;</span><br><span class=\"line\">ServerName www.weiyi.top:443</span><br><span class=\"line\">ErrorLog logs&#x2F;ssl_error_log</span><br><span class=\"line\">TransferLog logs&#x2F;ssl_access_log</span><br><span class=\"line\">LogLevel warn</span><br><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLProtocol all -SSLv2 -SSLv3</span><br><span class=\"line\">SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA:!RC4:!DH4</span><br><span class=\"line\">SSLCertificateFile &#x2F;usr&#x2F;local&#x2F;httpd&#x2F;cert&#x2F;2_sss.club.crt</span><br><span class=\"line\">SSLCertificateKeyFile &#x2F;usr&#x2F;local&#x2F;httpd&#x2F;cert&#x2F;3_sss.club.key</span><br><span class=\"line\">SSLCertificateChainFile &#x2F;usr&#x2F;local&#x2F;httpd&#x2F;cert&#x2F;1_root_bundle.crt</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224554.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>​最后查看网站的证书情况(以我的blog.weiyigeek.top网站为例), 下面club是我的旧域名<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID:RrmgT13e</span><br><span class=\"line\">证书类型：TrustAsia TLS RSA CA(1年)</span><br><span class=\"line\">通用名称：weiyigeek.github.io</span><br><span class=\"line\">证书密匙：weiyegeek.cTOP</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190922224457.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<hr>\n<h4 id=\"0x03-补充证书申请\"><a href=\"#0x03-补充证书申请\" class=\"headerlink\" title=\"0x03 补充证书申请\"></a>0x03 补充证书申请</h4><h5 id=\"1-SSL-FOR-FREE\"><a href=\"#1-SSL-FOR-FREE\" class=\"headerlink\" title=\"1.SSL-FOR-FREE\"></a>1.SSL-FOR-FREE</h5><p>Let’s Encrypt 宣称将继续清除 Web 上采用 HTTPS 的障碍，让每个网站轻松获取管理证书。<br>网站地址:<a href=\"https://www.sslforfree.com/\" target=\"_blank\" rel=\"noopener\">https://www.sslforfree.com/</a></p>\n<p>时间节点:<code>[2020年4月27日 16:41:33]</code><br>1.输入您需要申请通配符的免费证书,然后点击按钮 Create Free SSL Certificate<br>2.点击按钮进行DNS手动验证，按照要求在您的域名解析商后台进行设置txt记录<code>此处我采用的是cloudflare</code><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200427160937.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure><br>3.认证之后您可以采用它给的CSR或者自己提供的CSR文件<code>证书签名请求文件</code>，然后点击下载即可；<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200427161322.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure><br>4.注意事项：</p>\n<ul>\n<li>(1) 输入自己提供的CSR文件的时候不带<code>-----BEGIN NEW CERTIFICATE REQUEST-----</code>以及<code>-----END NEW CERTIFICATE REQUEST-----</code>;</li>\n<li>(2) 如果是自己提供的证书则下载的时候不包括密钥，因为在您生成csr文件过程中就会产生密钥文件（<code>注意文件的保存</code>）</li>\n</ul>\n<hr>\n<h4 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h4><p>描述:通过上文我们已经知道，HTTPS 就是在 HTTP 传输协议的基础上对网站进行认证，给予它独一无二的身份证明再对网站数据进行加密，并对传输的数据进行完整性验证。HTTPS 作为一种加密手段不仅加密了数据，还给了网站一张身份证。</p>\n<ul>\n<li>HTTPS=数据加密+网站认证+完整性验证+HTTP</li>\n</ul>\n<p>后述：如果让我回到十年前，那么我一定会这样跟我的女朋友传纸条：<br>先准备一张独一无二的纸条，并在上面签上我的大名(CA颁发证书-确定是否是本人),然后用只有我女朋友可以解密的方式进行数据加密，最后写完后用胶水封起来(防篡改))，防止隔壁桌的小王偷看修改小纸条内容。</p>\n","comments":true,"excerpt":"[TOC]原文地址: HTTPS原理介绍以及证书签名的申请配置 (https://mp.weixin.qq.com/s/S-ZgJ3tFhmU4qvt80QwKqw)","categories":[{"name":"Web协议","path":"api/categories/Web协议.json"}],"tags":[{"name":"SSL-TLS","path":"api/tags/SSL-TLS.json"},{"name":"HTTPS","path":"api/tags/HTTPS.json"}]}