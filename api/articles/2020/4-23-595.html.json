{"title":"6.Go编程快速入门学习","slug":"编程世界/Go/6.Go编程快速入门学习","date":"2020-04-23T03:16:58.000Z","updated":"2023-01-31T02:29:10.672Z","url":"2020/4-23-595.html","path":"api/articles/2020/4-23-595.html.json","covers":["https://img.weiyigeek.top/2021/5/20210902231146.png","https://img.weiyigeek.top/2021/5/20210903104625.png","https://img.weiyigeek.top/2021/5/20210903105329.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0X00-Go语言基础之接口\"><a href=\"#0X00-Go语言基础之接口\" class=\"headerlink\" title=\"0X00 Go语言基础之接口\"></a>0X00 Go语言基础之接口</h2><p><strong>Q: 在开发编程中您有可能遇到以下场景?</strong></p>\n<blockquote>\n<p>答: 我不关心变量是什么类型，只关心能调用它的什么方法，此时我们可以采用接口<code>(Interface)</code>类型进行解决相关问题。</p>\n</blockquote>\n<h3 id=\"1-接口类型\"><a href=\"#1-接口类型\" class=\"headerlink\" title=\"1.接口类型\"></a>1.接口类型</h3><p>描述: 在Go语言中接口（interface）是一种类型，一种抽象的类型, 其定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p>\n<p>如 interface 是一组 method 的集合，是<code>duck-type programming</code>的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。</p>\n<p>Tips: 为了保护你的Go语言职业生涯，请牢记接口（interface）是一种类型。</p>\n<p><strong>Q: 为什么要使用接口?</strong><br>在我们编程过程中会经常遇到：</p>\n<ul>\n<li>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</li>\n<li>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</li>\n<li>比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？</li>\n</ul>\n<p>例如:面的代码中定义了猫和狗，然后它们都会叫，你会发现main函数中明显有重复的代码，如果我们后续再加上猪、青蛙等动物的话，我们的代码还会一直重复下去。那我们能不能把它们当成“能叫的动物”来处理呢？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Cat)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"喵喵喵\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d Dog)</span> <span class=\"title\">Say</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"汪汪汪\"</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  c := Cat&#123;&#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"猫:\"</span>, c.Say())  <span class=\"comment\">// 猫: 喵喵喵</span></span><br><span class=\"line\">  d := Dog&#123;&#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"狗:\"</span>, d.Say())  <span class=\"comment\">// 狗: 汪汪汪</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p>\n<p><br></p>\n<h3 id=\"2-接口的定义\"><a href=\"#2-接口的定义\" class=\"headerlink\" title=\"2.接口的定义\"></a>2.接口的定义</h3><p>描述: Go语言提倡面向接口编程,每个接口由数个方法组成，接口的定义格式如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> 接口类型名 <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    方法名<span class=\"number\">1</span>( 参数列表<span class=\"number\">1</span> ) 返回值列表<span class=\"number\">1</span></span><br><span class=\"line\">    方法名<span class=\"number\">2</span>( 参数列表<span class=\"number\">2</span> ) 返回值列表<span class=\"number\">2</span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>参数说明:</strong></p>\n<ul>\n<li>接口名：使用type将接口定义为自定义的类型名。<code>Go语言的接口在命名时一般会在单词后面添加er</code>，如有写操作的接口叫Writer，有字符串功能的接口叫Stringer等。接口名最好要能突出该接口的类型含义。</li>\n<li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li>\n<li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li>\n</ul>\n<p><strong>基础示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Write([]<span class=\"keyword\">byte</span>) error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips: 当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。</p>\n<p>Tips :实现接口的条件, 即一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说接口就是一个需要实现的方法列表。</p>\n<p><br></p>\n<h3 id=\"3-接口类型变量\"><a href=\"#3-接口类型变量\" class=\"headerlink\" title=\"3.接口类型变量\"></a>3.接口类型变量</h3><p><strong>Q: 那实现了接口有什么用呢？</strong></p>\n<blockquote>\n<p>答: 接口类型变量能够存储所有实现了该接口的实例，接口类型变量实际上你可以看做一个是一个合约。</p>\n</blockquote>\n<p><strong>基础示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个接口类型writer的变量w。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> w writer <span class=\"comment\">// 声明一个writer类型的变量w</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips： 观察下面的代码，体味此处_的妙用<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 摘自gin框架routergroup.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IRouter <span class=\"keyword\">interface</span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RouterGroup <span class=\"keyword\">struct</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ IRouter = &amp;RouterGroup&#123;&#125;  <span class=\"comment\">// 确保RouterGroup实现了接口IRouter</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口声明定义以及约定必须实现的方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> speaker <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  speak()</span><br><span class=\"line\">  eat(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 人结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span>&#123; name, language <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p person)</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"我是人类，我说的是%v, 我叫%v\\n\"</span>, p.language, p.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p person)</span> <span class=\"title\">eat</span><span class=\"params\">(food <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Printf(<span class=\"string\">\"喜欢的食物: %v\\n\"</span>, food) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 猫结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span>&#123; name, language <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"动物猫，说的是%v, 叫%v\\n\"</span>, c.language, c.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">eat</span><span class=\"params\">(food <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Printf(<span class=\"string\">\"喜欢的食物: %v\\n\"</span>, food) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 狗结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span>&#123; name, language <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">speak</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"动物狗，说的是%v, 叫%v\\n\"</span>, d.language, d.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">eat</span><span class=\"params\">(food <span class=\"keyword\">string</span>)</span></span> &#123; fmt.Printf(<span class=\"string\">\"喜欢的食物: %v\\n\"</span>, food) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">talk</span><span class=\"params\">(s speaker)</span></span> &#123;</span><br><span class=\"line\">  s.speak()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (1) 接口基础使用演示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  p := person&#123;<span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"汉语\"</span>&#125;</span><br><span class=\"line\">  c := cat&#123;<span class=\"string\">\"小白\"</span>, <span class=\"string\">\"喵喵 喵喵...\"</span>&#125;</span><br><span class=\"line\">  d := dog&#123;<span class=\"string\">\"阿黄\"</span>, <span class=\"string\">\"汪汪 汪汪....\"</span>&#125;</span><br><span class=\"line\">  talk(p)</span><br><span class=\"line\">  talk(c)</span><br><span class=\"line\">  talk(d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (2) 接口类型的使用(可看作一种合约)方法不带参数以及方法带有参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个接口类型writer的变量w。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> s speaker</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type %T\\n\"</span>, s) <span class=\"comment\">// 动态类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">  s = person&#123;<span class=\"string\">\"接口类型-唯一\"</span>, <span class=\"string\">\"汉语\"</span>&#125; <span class=\"comment\">// 动态值</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"\\nType %T\\n\"</span>, s) <span class=\"comment\">// 动态类型</span></span><br><span class=\"line\">  s.speak()</span><br><span class=\"line\">  s.eat(<span class=\"string\">\"瓜果蔬菜\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  s = cat&#123;<span class=\"string\">\"接口类型-小白\"</span>, <span class=\"string\">\"喵喵...\"</span>&#125; <span class=\"comment\">// 动态值</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"\\nType %T\\n\"</span>, s) <span class=\"comment\">// 动态类型</span></span><br><span class=\"line\">  s.speak()</span><br><span class=\"line\">  s.eat(<span class=\"string\">\"fish\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  s = dog&#123;<span class=\"string\">\"接口类型-阿黄\"</span>, <span class=\"string\">\"汪汪...\"</span>&#125; <span class=\"comment\">// 动态值</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"\\nType %T\\n\"</span>, s) <span class=\"comment\">// 动态类型</span></span><br><span class=\"line\">  s.speak()</span><br><span class=\"line\">  s.eat(<span class=\"string\">\"bone\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  demo1()</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  demo2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是人类，我说的是汉语, 我叫WeiyiGeek</span><br><span class=\"line\">动物猫，说的是喵喵 喵喵..., 叫小白</span><br><span class=\"line\">动物狗，说的是汪汪 汪汪...., 叫阿黄</span><br><span class=\"line\"></span><br><span class=\"line\">Type &lt;<span class=\"literal\">nil</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Type main.person</span><br><span class=\"line\">我是人类，我说的是汉语, 我叫接口类型-唯一</span><br><span class=\"line\">喜欢的食物: 瓜果蔬菜</span><br><span class=\"line\"></span><br><span class=\"line\">Type main.cat</span><br><span class=\"line\">动物猫，说的是喵喵..., 叫接口类型-小白</span><br><span class=\"line\">喜欢的食物: fish</span><br><span class=\"line\"></span><br><span class=\"line\">Type main.dog</span><br><span class=\"line\">动物狗，说的是汪汪..., 叫接口类型-阿黄</span><br><span class=\"line\">喜欢的食物: bone</span><br></pre></td></tr></table></figure><br>注意: 带参数和不带参数的函数,在接口中实现的不是同一个方法，所以当某个结构体中没有完全实现接口中的方法将会报错。</p>\n<p><br></p>\n<h3 id=\"4-接口实现之值接收者和指针接收者\"><a href=\"#4-接口实现之值接收者和指针接收者\" class=\"headerlink\" title=\"4.接口实现之值接收者和指针接收者\"></a>4.接口实现之值接收者和指针接收者</h3><p><strong>Q: 使用值接收者实现接口和使用指针接收者实现接口有什么区别呢?</strong></p>\n<ul>\n<li>1) 值接收者实现接口: <code>结构体类型和结构体指针类型的变量都可以存储</code>，由于因为Go语言中有对指针类型变量求值的语法糖，结构体指针变量内部会自动求值（<code>取指针地址中存储的值</code>）。</li>\n<li>2) 指针接收者实现接口: <code>只能存储结构体指针类型的变量</code>。</li>\n</ul>\n<p>我们通过下面的例子进行演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口类型声明</span></span><br><span class=\"line\"><span class=\"comment\">// (1) 值接收者实现接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  move()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"值接收者实现接口 -&gt; 狗...移动....\"</span>)  &#125; <span class=\"comment\">// 关键点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m1 Mover</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d1 = dog&#123;&#125; <span class=\"comment\">// 值类型</span></span><br><span class=\"line\">  m1 = d1        <span class=\"comment\">// m1可以接收dog类型的变量</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %#v \\n\"</span>, m1)</span><br><span class=\"line\">  m1.move()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> d2 = &amp;dog&#123;&#125; <span class=\"comment\">// 指针类型</span></span><br><span class=\"line\">  m1 = d2         <span class=\"comment\">// x可以接收指针类型的(*dog)类型的变量</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %#v \\n\"</span>, m1)</span><br><span class=\"line\">  m1.move()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (2)指针接收者实现接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Runer <span class=\"keyword\">interface</span>&#123; run() &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *cat)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"指针接收者实现接口 -&gt; 猫...跑....\"</span>) &#125;</span><br><span class=\"line\"><span class=\"comment\">// 此时实现run接口的是*cat类型，所以不能给m1传入cat类型的c1，此时x只能存储*dog类型的值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m1 Runer</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c1 = cat&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">//m1不可以接收dog类型的变量</span></span><br><span class=\"line\">  <span class=\"comment\">// m1 = c1 // 报错信息: cannot use c1 (variable of type cat) as Runer value in assignment: missing method run (run has pointer receiver)compilerInvalidIfaceAssign</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %#v \\n\"</span>, c1)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//m1只能接收*dog类型的变量</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> c2 = &amp;cat&#123;&#125;</span><br><span class=\"line\">  m1 = c2</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %#v \\n\"</span>, c2)</span><br><span class=\"line\">  m1.run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  demo1()</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  demo2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><strong>执行结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type : main.dog&#123;&#125; </span><br><span class=\"line\">值接收者实现接口 -&gt; 狗...移动....</span><br><span class=\"line\">Type : &amp;main.dog&#123;&#125; </span><br><span class=\"line\">值接收者实现接口 -&gt; 狗...移动....</span><br><span class=\"line\"></span><br><span class=\"line\">Type : main.cat&#123;&#125; </span><br><span class=\"line\">Type : &amp;main.cat&#123;&#125; </span><br><span class=\"line\">指针接收者实现接口 -&gt; 猫...跑....</span><br></pre></td></tr></table></figure></p>\n<p><strong>面试题: 注意这是一道你需要回答“能”或者“不能”的题！</strong><br>问: 首先请观察下面的这段代码，然后请回答这段代码能不能通过编译？<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> People <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Speak(<span class=\"keyword\">string</span>) <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(stu *Student)</span> <span class=\"title\">Speak</span><span class=\"params\">(think <span class=\"keyword\">string</span>)</span> <span class=\"params\">(talk <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> think == <span class=\"string\">\"man\"</span> &#123;</span><br><span class=\"line\">    talk = <span class=\"string\">\"你好,帅哥\"</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    talk = <span class=\"string\">\"您好,美女\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> peo People = Student&#123;&#125; <span class=\"comment\">// 此处为关键点</span></span><br><span class=\"line\">  think := <span class=\"string\">\"woman\"</span></span><br><span class=\"line\">  fmt.Println(peo.Speak(think))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>答案: 是不行会报 <code>./interface.go:21:6: cannot use Student{} (type Student) as type People in assignment:    Student does not implement People (Speak method has pointer receiver) (exit status 2)</code>错误，由于指针接收者实现接口必须是有指针类型的结构体实例化对象以及其包含的方法。</p>\n<p><br></p>\n<h3 id=\"5-接口与类型\"><a href=\"#5-接口与类型\" class=\"headerlink\" title=\"5.接口与类型\"></a>5.接口与类型</h3><h4 id=\"一个类型实现多个接口\"><a href=\"#一个类型实现多个接口\" class=\"headerlink\" title=\"一个类型实现多个接口\"></a>一个类型实现多个接口</h4><p>描述: 一个结构体类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 </p>\n<p>例如: 狗可以叫也可以动,我们就分别定义Sayer接口和Mover接口<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123; say() &#125;</span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123; move() &#125;</span><br><span class=\"line\"><span class=\"comment\">// dog既可以实现Sayer接口，也可以实现Mover接口。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123;\tname <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现Sayer接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123; fmt.Printf(<span class=\"string\">\"%s会叫 汪汪汪\\n\"</span>, d.name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123; fmt.Printf(<span class=\"string\">\"%s会动 \\n\"</span>, d.name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">\"旺财\"</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x Sayer = a <span class=\"comment\">// 将dog类型赋予给Sayer接口类型的变量x，此时它可以调用say方法</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> y Mover = a <span class=\"comment\">// 将dog类型赋予给Mover接口类型的变量y，此时它可以调用move方法</span></span><br><span class=\"line\">  x.say() <span class=\"comment\">// 旺财会叫 汪汪汪</span></span><br><span class=\"line\">  y.move() <span class=\"comment\">// 旺财会动</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"多个类型实现同一接口\"><a href=\"#多个类型实现同一接口\" class=\"headerlink\" title=\"多个类型实现同一接口\"></a>多个类型实现同一接口</h4><p>描述: Go语言中不同的类型还可以实现同一接口,比如我们前面Person、Cat、Dog结构体类型中实现的Speak()方法。</p>\n<p>例如：我们定义一个Mover接口，它要求结构体类型中必须有一个move方法, 如狗可以动，汽车也可以动。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123; move() &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> dog <span class=\"keyword\">struct</span> &#123; name <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> car <span class=\"keyword\">struct</span> &#123; brand <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// dog类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d dog)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;\tfmt.Printf(<span class=\"string\">\"%s会跑\\n\"</span>, d.name) &#125;</span><br><span class=\"line\"><span class=\"comment\">// car类型实现Mover接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c car)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123; fmt.Printf(<span class=\"string\">\"%s速度120迈\\n\"</span>, c.brand) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x Mover</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = dog&#123;name: <span class=\"string\">\"旺财\"</span>&#125;</span><br><span class=\"line\">  x = a</span><br><span class=\"line\">  x.move() <span class=\"comment\">// 旺财会跑</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = car&#123;brand: <span class=\"string\">\"保时捷\"</span>&#125;</span><br><span class=\"line\">  x = b</span><br><span class=\"line\">  x.move() <span class=\"comment\">// 保时捷速度120迈</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非常注意: 并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。</p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> android <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  telephone(<span class=\"keyword\">int64</span>)</span><br><span class=\"line\">  music()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体声明 实现music方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> mp3 <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现接口中的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *mp3)</span> <span class=\"title\">music</span><span class=\"params\">()</span></span> &#123; fmt.Println(<span class=\"string\">\"播放音乐.....\"</span>)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体声明</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> mobilephone <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  production <span class=\"keyword\">string</span></span><br><span class=\"line\">  mp3        <span class=\"comment\">// 嵌入mp3结构体并拥有它的方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现接口中的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mb *mobilephone)</span> <span class=\"title\">telephone</span><span class=\"params\">(number <span class=\"keyword\">int64</span>)</span></span> &#123; fmt.Printf(<span class=\"string\">\"%v 手机, 正在拨打 %v 电话....\\n\"</span>, mb.production, number)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// android 接口类型</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a android</span><br><span class=\"line\">  <span class=\"comment\">// 指针类型结构体变量mb</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> mp = &amp;mobilephone&#123;production: <span class=\"string\">\"小米\"</span>&#125;</span><br><span class=\"line\">  a = mp</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Type : %#v\\n\"</span>, a) <span class=\"comment\">// android 接口类型变量输出</span></span><br><span class=\"line\">  a.telephone(<span class=\"number\">10086</span>)</span><br><span class=\"line\">  a.music()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><strong>执行结果:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type : &amp;main.mobilephone&#123;production:<span class=\"string\">\"小米\"</span>, mp3:main.mp3&#123;&#125;&#125;</span><br><span class=\"line\">小米 手机, 正在拨打 <span class=\"number\">10086</span> 电话....</span><br><span class=\"line\">播放音乐.....</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"6-接口嵌套\"><a href=\"#6-接口嵌套\" class=\"headerlink\" title=\"6.接口嵌套\"></a>6.接口嵌套</h3><p>描述: 接口与接口间可以通过嵌套创造出新的接口,嵌套得到的接口的使用与普通接口一样，这里我们让cat实现animal接口。</p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sayer 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Sayer <span class=\"keyword\">interface</span> &#123;say()&#125;</span><br><span class=\"line\"><span class=\"comment\">// Mover 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Mover <span class=\"keyword\">interface</span> &#123;move()&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Sayer</span><br><span class=\"line\">  Mover</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// cat 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口方法的实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">say</span><span class=\"params\">()</span></span> &#123;fmt.Printf(<span class=\"string\">\"%v 喵喵喵\"</span>,c.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c cat)</span> <span class=\"title\">move</span><span class=\"params\">()</span></span> &#123;fmt.Printf(<span class=\"string\">\"%v 猫会动\"</span>,c.name)&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x animal</span><br><span class=\"line\">  x = cat&#123;name: <span class=\"string\">\"花花\"</span>&#125;</span><br><span class=\"line\">  x.move() <span class=\"comment\">//喵喵喵</span></span><br><span class=\"line\">  x.say()  <span class=\"comment\">//猫会动</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"7-空接口\"><a href=\"#7-空接口\" class=\"headerlink\" title=\"7.空接口\"></a>7.空接口</h3><p><strong>空接口的定义</strong><br>描述: 空接口是指没有定义任何方法的接口,因此任何类型都实现了空接口, 该类型的变量可以<code>存储任意类型的变量</code>。他会在我们以后GO编程中常常出现。</p>\n<p>例如:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// interface 是关键字，并不是类型。</span></span><br><span class=\"line\"><span class=\"comment\">// 方式1.但一般不会采用此种方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> empty <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2.我们可以直接忽略接口名称(空接口类型)</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>空接口的应用</strong></p>\n<ul>\n<li>1) 空接口作为函数的参数: 使用空接口实现可以接收任意类型的函数参数。</li>\n<li>2) 空接口作为map的值: 使用空接口实现可以保存任意值的字典。</li>\n</ul>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (1) 空接口作为函数参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">showType</span><span class=\"params\">(a <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; fmt.Printf(<span class=\"string\">\"参数类型:%T, 参数值:%v\\n\"</span>, a, a) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// (2) 空接口作为map的值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> m1 <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;     <span class=\"comment\">// 类似于Java中的 Map&lt;String,Object&gt; m1</span></span><br><span class=\"line\">  m1 = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"comment\">// 为Map申请一块内存空间</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以存储任意类型的值</span></span><br><span class=\"line\">  m1[<span class=\"string\">\"name\"</span>] = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  m1[<span class=\"string\">\"age\"</span>] = <span class=\"number\">20</span></span><br><span class=\"line\">  m1[<span class=\"string\">\"sex\"</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">  m1[<span class=\"string\">\"hobby\"</span>] = [...]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Computer\"</span>, <span class=\"string\">\"NetSecurity\"</span>, <span class=\"string\">\"Go语言编程学习\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"#空接口作为map的值\\n%#v\"</span>, m1)</span><br><span class=\"line\">  fmt.Println(m1)</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"\\n#空接口作为函数参数\\n\"</span>)</span><br><span class=\"line\">  showType(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">  showType([]<span class=\"keyword\">byte</span>&#123;<span class=\"string\">'a'</span>&#125;)</span><br><span class=\"line\">  showType(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  showType(<span class=\"number\">1024</span>)</span><br><span class=\"line\">  showType(<span class=\"string\">\"我是一串字符串\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#空接口作为map的值 </span></span><br><span class=\"line\">map[string]interface &#123;&#125;&#123;<span class=\"string\">\"age\"</span>:20, <span class=\"string\">\"hobby\"</span>:[3]string&#123;<span class=\"string\">\"Computer\"</span>, <span class=\"string\">\"NetSecurity\"</span>, <span class=\"string\">\"Go语言编程学习\"</span>&#125;, <span class=\"string\">\"name\"</span>:<span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"sex\"</span>:<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">map[age:20 hobby:[Computer NetSecurity Go语言编程学习] name:WeiyiGeek sex:<span class=\"literal\">true</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#空接口作为函数参数</span></span><br><span class=\"line\">参数类型:&lt;nil&gt;, 参数值:&lt;nil&gt;</span><br><span class=\"line\">参数类型:[]uint8, 参数值:[97]</span><br><span class=\"line\">参数类型:bool, 参数值:<span class=\"literal\">true</span></span><br><span class=\"line\">参数类型:int, 参数值:1024</span><br><span class=\"line\">参数类型:string, 参数值:我是一串字符串</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。<br><br></p>\n<h3 id=\"8-接口之类型断言\"><a href=\"#8-接口之类型断言\" class=\"headerlink\" title=\"8.接口之类型断言\"></a>8.接口之类型断言</h3><p>描述: 空接口可以存储任意类型的值，那我们如何获取其存储的具体数据呢？</p>\n<p><strong>接口值</strong><br>描述: 一个接口的值<code>（简称接口值）</code>是由<code>一个具体类型</code>和<code>具体类型的值</code>两部分组成的,这两部分分别称为接口的<code>动态类型</code>和<code>动态值</code>。</p>\n<p>我们来看一个具体的例子:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = <span class=\"literal\">nil</span></span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\">w = <span class=\"built_in\">new</span>(bytes.Buffer)</span><br></pre></td></tr></table></figure><br>请看下图分解：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210902231146.png\" alt=\"WeiyiGeek.动态类型与动态值\" title=\"\" class=\"\">\n                <p>WeiyiGeek.动态类型与动态值</p>\n            </figure></p>\n<p>想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：<code>x.(T)</code>，其中：</p>\n<ul>\n<li>1) x：表示类型为interface{}的变量</li>\n<li>2) T：表示断言x可能是的类型。</li>\n</ul>\n<p>该语法返回两个参数，<code>第一个参数是x转化为T类型后的变量</code>，<code>第二个值是一个布尔值，若为true则表示断言成功，为false则表示断言失败</code>。</p>\n<p><strong>示例演示</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例1.采用if进行判断断言</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">assert</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  v, ok := x.(<span class=\"keyword\">string</span>) <span class=\"comment\">// v 接受是string类型</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"assert successful : %v, typeof %T\\n\"</span>, v, v)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"assert failed 非 string 类型! : %v, typeof %T\\n\"</span>, x, x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  x = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  assert(x) <span class=\"comment\">// assert successful : WeiyiGeek, typeof string</span></span><br><span class=\"line\">  x = <span class=\"number\">1024</span></span><br><span class=\"line\">  assert(x) <span class=\"comment\">// assert failed 非 string 类型! : 1024, typeof int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例2.如果要断言多次就需要写多个if判断，这个时候我们可以使用switch语句来实现：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">justifyType</span><span class=\"params\">(x <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> v := x.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"x is a string，value is %v\\n\"</span>, v)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"x is a int is %v\\n\"</span>, v)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"keyword\">bool</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"x is a bool is %v\\n\"</span>, v)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"unsupport type！\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  x = <span class=\"string\">\"i'm string\"</span></span><br><span class=\"line\">  justifyType(x)</span><br><span class=\"line\">  x = <span class=\"number\">225</span></span><br><span class=\"line\">  justifyType(x)</span><br><span class=\"line\">  x = <span class=\"literal\">true</span></span><br><span class=\"line\">  justifyType(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  demo1()</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  demo2()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert successful : WeiyiGeek, typeof <span class=\"keyword\">string</span></span><br><span class=\"line\">assert failed 非 <span class=\"keyword\">string</span> 类型! : <span class=\"number\">1024</span>, typeof <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">x is a <span class=\"keyword\">string</span>，value is i<span class=\"string\">'m string</span></span><br><span class=\"line\"><span class=\"string\">x is a int is 225</span></span><br><span class=\"line\"><span class=\"string\">x is a bool is true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>接口总结:</strong><br>描述: 关于需要注意的是只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口,不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p>\n<hr>\n<h2 id=\"0x01-Go语言基础之包\"><a href=\"#0x01-Go语言基础之包\" class=\"headerlink\" title=\"0x01 Go语言基础之包\"></a>0x01 Go语言基础之包</h2><p>描述: 在工程化的Go语言开发项目中，Go语言的源码复用是建立在包（package）基础之上的, 可以提高开发效率，使用其他开发者已经写好的代码（站在巨人的肩膀上）。</p>\n<h3 id=\"1-包的定义\"><a href=\"#1-包的定义\" class=\"headerlink\" title=\"1.包的定义\"></a>1.包的定义</h3><p>描述: Go语言的包<code>（package）</code>是多个Go源码的集合，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如<code>fmt、os、io</code>等。</p>\n<p>我们还可以根据自己的需要创建自己的包，一个包可以简单理解为一个存放<code>.go</code>文件的文件夹。 </p>\n<p>该文件夹下面的所有go文件都要在代码的第一行添加如下代码声明该文件归属的包。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// graphical.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> area</span><br></pre></td></tr></table></figure><br><br></p>\n<p><strong>注意事项:</strong></p>\n<ul>\n<li>1) 一个文件夹下面直接包含的文件只能归属一个package，同样一个package的文件不能在多个文件夹下。</li>\n<li>2) 包名可以不和文件夹的名字一样,<code>但可以与.go文件名称一致</code>，包名不能包含 - 符号并且严格按照变量命名的规则进行。</li>\n<li>3) 在导入包时应该从包的GOPATH/src后的路径开始写起其以<code>/</code>作为分隔符。</li>\n<li>4) 包名为main的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含main包的源代码则不会得到可执行文件。</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-包的导入\"><a href=\"#2-包的导入\" class=\"headerlink\" title=\"2.包的导入\"></a>2.包的导入</h3><p>描述: 要在代码中引用其他包的内容，需要使用import关键字导入使用的包。具体语法如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">\"包的路径\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>示例演示</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行导入的格式如下:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包1\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多行导入的格式如下:</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"包1\"</span></span><br><span class=\"line\">  <span class=\"string\">\"包2\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实际案例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span>       <span class=\"comment\">// golang 内置包</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span> <span class=\"comment\">// golang 内置包</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/mattn/go-sqlite3\"</span> <span class=\"comment\">// golang 项目的工程组织规范</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>Tips:  使用<code>go get</code>导入github上的package, 以 go-sqlite3 为例，采用go get将package进行下载<code>go get github.com/mattn/go-sqlite3</code>，此时该包对应的物理路径是 <code>$GOPATH/src/github.com/mattn/go-sqlite3</code>, 此外在你也可以手动进行下载项目到<code>$GOPATH/src</code></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>import导入语句通常放在文件开头包声明语句的下面。</li>\n<li>导入的包名需要使用双引号包裹起来,并且如果是多个包需要使用<code>()</code>进行包含。</li>\n<li>包名是从<code>$GOPATH/src/</code>后开始计算的，使用/进行路径分隔。</li>\n<li>Go语言中禁止循环导入包。</li>\n</ul>\n<p><br></p>\n<h3 id=\"3-包的可见性\"><a href=\"#3-包的可见性\" class=\"headerlink\" title=\"3.包的可见性\"></a>3.包的可见性</h3><p>描述: 如果想在一个包中引用另外一个包里的标识符<code>（如变量、常量、类型、函数等）</code>时，该标识符必须是对外可见的（public）。</p>\n<p>在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。</p>\n<p>举个例子， 我们定义一个包名为pkg2的包，代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> pkg2</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"comment\">// # 包变量可见性探究</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\">// 2.首字母大写外部包可见，可在其他包中使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Mode = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.首字母大写，外部包可见，可在其他包中使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4.首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">age</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Age = <span class=\"number\">18</span> <span class=\"comment\">// 函数局部变量，外部包不可见，只能在当前函数内使用</span></span><br><span class=\"line\">  fmt.Println(Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 5.首字母小写，外部包不可见，只能在当前包内使用</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123; </span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 6.结构体中的字段名和接口中的方法名如果首字母都是大写，外部包可以访问这些字段和方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name  <span class=\"keyword\">string</span> <span class=\"comment\">//可在包外访问的方法</span></span><br><span class=\"line\">  class <span class=\"keyword\">string</span> <span class=\"comment\">//仅限包内访问的字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Payer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  init() <span class=\"comment\">//仅限包内访问的方法</span></span><br><span class=\"line\">  Pay()  <span class=\"comment\">//可在包外访问的方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-自定义包名\"><a href=\"#4-自定义包名\" class=\"headerlink\" title=\"4.自定义包名\"></a>4.自定义包名</h3><p>描述: 在导入包名的时候我们还可以为导入的包设置别名。通常用于导入的包名太长或者导入的包名冲突的情况。</p>\n<p>具体语法格式如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> 别名 <span class=\"string\">\"包的路径\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.单行导入方式定义别名：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> calc <span class=\"string\">\"github.com/studygo/pkg_test\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(calc.Add(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\">  fmt.Println(calc.Mode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.多行导入方式定义别名：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">    m <span class=\"string\">\"github.com/studygo/pkg_test\"</span></span><br><span class=\"line\"> )</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(m.Add(<span class=\"number\">100</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\">  fmt.Println(m.Mode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"5-匿名导入包\"><a href=\"#5-匿名导入包\" class=\"headerlink\" title=\"5.匿名导入包\"></a>5.匿名导入包</h3><p>描述: 如果只希望导入包，而不使用包内部的数据时，可以使用匿名导入包。</p>\n<p>具体的格式如下：<code>import _ &quot;包的路径&quot;</code></p>\n<p>Tips: 匿名导入的包与其他方式导入的包一样都会被编译到可执行文件中。</p>\n<p><strong>补充说明:</strong><br>我们可以通过如下格式省略包前前缀,使用想过与同一个.go文件函数类似，但是常常不建议这样使用，可以会与当前文件中的某些相同方法的冲突。</p>\n<p>具体的格式如下：<code>import . &quot;包的路径&quot;</code>, 示例如下<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  . <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  Println(<span class=\"string\">\"我是fmt内置包的函数....\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"6-包init-初始化函数\"><a href=\"#6-包init-初始化函数\" class=\"headerlink\" title=\"6.包init()初始化函数\"></a>6.包init()初始化函数</h3><p>描述: 在Go语言程序执行时导入包语句会自动触发包内部<code>init()</code>函数的调用。</p>\n<p><strong>语法格式:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> custompackage</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"custompackage init() execute....\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>init()函数执行顺序</strong></p>\n<ul>\n<li>通常包初始化执行的顺序，如下图所示： </li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2021/5/20210903104625.png\" alt=\"WeiyiGeek.包init函数执行时机\"></p>\n<ul>\n<li>但是实际项目中，Go语言包会从main包开始检查其导入的所有包，每个包中又可能导入了其他的包。Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。<br>在运行时，被最后导入的包会最先初始化并调用其init()函数，如下图示： </li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2021/5/20210903105329.png\" alt=\"WeiyiGeek.多包中初始化函数执行顺序\"></p>\n<p><br></p>\n<p><strong>注意事项:</strong></p>\n<ul>\n<li>1) init() 函数没有参数也没有返回值。 </li>\n<li>2) init() 函数在程序运行时自动被调用执行，不能在代码中主动调用它。</li>\n</ul>\n<p><br></p>\n<h3 id=\"7-示例演示\"><a href=\"#7-示例演示\" class=\"headerlink\" title=\"7.示例演示\"></a>7.示例演示</h3><p><strong>工程项目结构:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义包的.go文件</span></span><br><span class=\"line\">➜  pkg pwd &amp; ls</span><br><span class=\"line\">/home/weiyigeek/app/program/project/<span class=\"keyword\">go</span>/src/weiyigeek.top/custom/pkg/demo1  <span class=\"comment\">//(from $GOPATH))</span></span><br><span class=\"line\">demo1.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用自定义包的.go文件</span></span><br><span class=\"line\">➜  pkg ls</span><br><span class=\"line\">weiyigeek.top/studygo/Day04/packagemain.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure></p>\n<p>不多说上代码：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # weiyigeek.top/custom/pkg/demo1/demo1.go #</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> FLAG = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基础变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Flag = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包初始化函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"This is a package demo \"</span>)</span><br><span class=\"line\">  Flag = <span class=\"number\">1024</span> <span class=\"comment\">// 注意点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Show</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> msg = <span class=\"string\">\" 我是函数内部的变量 \"</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"FLAG =&gt; %v, Flag =&gt; %v\\nmsg:%v\\n\"</span>, FLAG, Flag, msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span>&#123; Name <span class=\"keyword\">string</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span> <span class=\"title\">paly</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%v 正在打游戏....\"</span>, p.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> IPerson <span class=\"keyword\">interface</span>&#123; paly() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Exec</span><span class=\"params\">(i IPerson)</span></span> &#123;</span><br><span class=\"line\">  i.paly()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用自定义包.go文件:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span> \t<span class=\"comment\">// 不建议如. \"fmt\" 此使用</span></span><br><span class=\"line\">  demo <span class=\"string\">\"weiyigeek.top/custom/pkg/demo1\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(demo.Flag)</span><br><span class=\"line\">  fmt.Println(demo.FLAG)</span><br><span class=\"line\">  demo.Show()</span><br><span class=\"line\">  demo.Exec(demo.Person&#123;Name: <span class=\"string\">\"Weiyieek\"</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is a <span class=\"keyword\">package</span> demo </span><br><span class=\"line\"><span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">FLAG =&gt; <span class=\"literal\">true</span>, Flag =&gt; <span class=\"number\">1024</span></span><br><span class=\"line\">msg: 我是函数内部的变量 </span><br><span class=\"line\">Weiyieek 正在打游戏....</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>包总结:</strong></p>\n<ul>\n<li>1) 我们可以在<code>GOPATH/src</code>路径下按照golang项目工程组织规范进行创建自定义包。</li>\n<li>2) 自定义包中需要外部调用访问的（如变量、常量、类型、函数等），必须首字母进行大写。</li>\n<li>3) 导入自定义包时我们可以自定义别名,但是需要满足命名规则已经不能与当前目录名称重名。</li>\n<li>4) 多个包都定义init()函数时，从调用的最后一包中递归向上执行输出。</li>\n</ul>\n<p><br></p>\n<p><strong>错误说明:</strong></p>\n<ul>\n<li>Step 1.引入自定义包的时候报 go.mod file not found in current directory or any parent directory 错误.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go: go.mod file not found <span class=\"keyword\">in</span> current directory or any parent directory; see <span class=\"string\">'go help modules'</span> (<span class=\"built_in\">exit</span> status 1)</span><br><span class=\"line\">no required module provides package weiyigeek.top/custom/pkg/demo1; to add it: go get weiyigeek.top/custom/pkg/demo1 (compile)go-staticcheck</span><br></pre></td></tr></table></figure>\n问题原因: go的环境设置问题，其次查看<code>GOPATH</code>目录中src为存放第三方go包。<br>解决办法: <code>go env -w GO111MODULE=auto</code></li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 2.main redeclared in this block (see details)compiler<br>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main redeclared <span class=\"keyword\">in</span> this block (see details)compilerDuplicateDecl</span><br><span class=\"line\">03datatype.go(151, 6): main redeclared <span class=\"keyword\">in</span> this block</span><br></pre></td></tr></table></figure>\n原因分析: 在学习study go时候会创建许多.go文件,并且在同一个目录下每个.go的文件里面都有package main,也就是main函数,这就是问题所在。<br>解决办法: 同一个目录下面不能有多个package main，调整或者创建多个文件夹分别放入对应的文件下执行即可。</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}