{"title":"5.Go语言项目操作之Kafka日志收集项目实践","slug":"编程世界/Go/Extension/5.Go语言项目操作之Kafka日志收集项目实践","date":"2020-05-01T03:16:58.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2020/5-1-610.html","path":"api/articles/2020/5-1-610.html.json","covers":["https://img.weiyigeek.top/2021/5/20220111110600.png","https://img.weiyigeek.top/2021/5/20220111130808.png","https://img.weiyigeek.top/2021/5/20220111132954.png","https://img.weiyigeek.top/2021/5/20220111142643.png","https://img.weiyigeek.top/2021/5/20220111150407.png","https://img.weiyigeek.top/2021/5/20220119210502.png","https://img.weiyigeek.top/2021/5/20220119212844.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>描述: 每个业务系统都有自己的日志, 日志的重要作用在于当系统出现问题时可以准确快速排查和解决问题, 所以日志收集整理显得尤为重要, 在系统机器比较少时(单台)通常可以直接在服务器中查看即可, 而在大规模的机分布式环境中, 还采用此种方式就会显得不切实际(耗费大量的时间), 那有木有什么方法可以将分布式应用的日志进行统一收集呢?</p>\n<p><strong>解决方案：</strong>我们可将机器上的日志进行实时收集并统一存储到中心系统, 在针对存储的日志建立索引, 后续我们便可通过在Web页面搜索找到并显示对应的日志记录。但是同样也面临着一些问题，例如<code>实时日志量大(成千上万多得上亿条)</code>, <code>日志准时收集延迟控制在分钟级别</code>, <code>系统架构设计能够支持水平扩展方式</code>，业界方案大致有如下:<br>方案1.采用ELK(Elastic + Logstash + Kibana)开源的日志收集可视化展示的解决方案, 但其仍然有一些问题，例如<code>运维成本高(没增加一个日志收集项都需要手动修改配置)</code>, <code>监控缺失(无法准确获取Logstash状态)</code>, <code>社区版本无法做到定制化开发与维护</code>。<br>方案2.采用自设计日志收集系统,基于<code>ElasticSearch</code> 和 <code>Kibana</code> 基础之上加入 <code>etc</code> 和重写 <code>Log Agent</code> 并通过 <code>kafka</code> 实现自定义日志收集可视化展示解决方案。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220111110600.png\" alt=\"WeiyiGeek.自设计日志收集系统架构图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.自设计日志收集系统架构图</p>\n            </figure>\n<p><strong>你需要需要掌握和学习的技能:</strong></p>\n<ul>\n<li>Kafka和Zookeeper的安装使用</li>\n<li>ES和Kibana的安装使用</li>\n<li>Etcd的安装使用</li>\n<li>服务端Agent开发流程</li>\n<li>后端服务组件开发</li>\n</ul>\n<p><br/></p>\n<h3 id=\"1-kafka-快速介绍\"><a href=\"#1-kafka-快速介绍\" class=\"headerlink\" title=\"1.kafka 快速介绍\"></a>1.kafka 快速介绍</h3><p>Apache Kafka 是由Linkedin公司采用Scala语言开发编写的,最初设计用于解决其公司内部的海量日志传输等问题, 于2021年开源并进入Apache孵化器项目, 并于2012年10月正式毕业, 现在为Apache顶级项目。</p>\n<p>Apache Kafka 是一个分布式数据流平台, 可单实例或者集群部署, 它提供了<code>发布Publish和订阅Subscribe</code>Topic功能, 使用者可发送数据(<code>应用、流进程、DB等</code>)到Kafka中,也可从Kafka中读取数据(以便进行后续处理)。</p>\n<p>Apache Kafka 特点: 高吞吐、低延迟、高容错等特点。</p>\n<p><strong>Apache Kafka 集群架构图浅析:</strong></p>\n<ul>\n<li>Producer: 生产者即消息的生产者是消息的入口。</li>\n<li>Cluster: kafka集群模式由一台或者多台服务器组成。<ul>\n<li>Broker: kafka集群中每一个节点被称为Broker(是指部署的Kafka实例的服务器节点),集群内的broker都有一个不重复的编号,例如 broker-0、broker-1等。</li>\n<li>Topic: 消息的主题(消息的分类),在每个Borker上都可以创建多个topic,在实际应用中通常是一个业务线建立一个Topic。</li>\n<li>Partition: Topic 可以有多个分区其作用是负载提高kafka的吞吐量, 同一个Topic在不同的分区的数据是不重复的,其表现形式就是一个一个文件夹。</li>\n<li>Replication: 每个分区都有多个副本(备份), 当主分区(Leader)出现故障时会选择一个备胎(Fllower)上位成为Leader, 注意Follower和leader绝对是在不同的机器上,同一台机器对同一个分区也只能存放一个副本(包括自己)。</li>\n</ul>\n<ul>\n<li>Leader: 领导者（分区主节点）</li>\n<li>Follower: 跟随者（分区从节点、备）：默认副本的最大数量是10个。</li>\n</ul>\n</li>\n<li>Consumer: 消费者即消息的消费方,是消息的出口。<ul>\n<li>Group: 可将多个消费者组合成为一个消费组, 在kafka的设计中同一个分区的数据只能被消费者组中的某一个消费者消费, 同一个消费者组的消费者可以消费同一个Topic的不同分区的数据, 这样设计也是为提高吞吐量。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220111130808.png\" alt=\"WeiyiGeek.Kafka Cluster\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Kafka Cluster</p>\n            </figure>\n<p>Tips: 消息队列的通信模型通常分为两种一种是<code>点对点模式(Queue)</code>、另外一种就是<code>发布/订阅(Topic)模式</code>:</p>\n<ul>\n<li>Queue: 由一个生产者生成并由一个消费者消费, 当一条信息被消费后该队列则不存在该条信息,即不存在重复消费。</li>\n<li>Topic：由消息生产者(发布)将信息发布到Topic中, 同时有多个消息消息者(订阅)消费该消息，其类似于关注了我的WeiyiGeek微信公众号，当我发送文章时关注我的人都可以收到推送的文章。</li>\n</ul>\n<p>Tips：Topic 是同一类别的消息记录(Record)的集合。</p>\n<p><br/></p>\n<h4 id=\"工作流程浅析\"><a href=\"#工作流程浅析\" class=\"headerlink\" title=\"工作流程浅析\"></a>工作流程浅析</h4><ol>\n<li>P(生产者)从Kafka集群获取分区Leader信息。</li>\n<li>P(生产者)将信息发送给Leader。</li>\n<li>Leader将消息写入磁盘。</li>\n<li>F(跟随者)从Leader处拉取消息数据。</li>\n<li>F(跟随者)将消息写入本地磁盘后想Leader发送ACK信号。</li>\n<li>Leader收到F(跟随者)的ACK之后向P(生成者)发送ACK信号。</li>\n</ol>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220111132954.png\" alt=\"WeiyiGeek.生产者向Kafka发送数据的流程\" title=\"\" class=\"\">\n                <p>WeiyiGeek.生产者向Kafka发送数据的流程</p>\n            </figure>\n<p><br/></p>\n<h4 id=\"分区存储选取原则\"><a href=\"#分区存储选取原则\" class=\"headerlink\" title=\"分区存储选取原则\"></a>分区存储选取原则</h4><p>在Kafka中如果某个Topic有多个Partition时,P(生产者)如何知道该数据将发往那个分区呢? </p>\n<ol>\n<li>指定写入的Partition。</li>\n<li>如没有指定Partition但设置了数据Key时,则会根据Key的值Hash出一个Partition。</li>\n<li>如没有指定Partition又没有设置key,则会采用轮询的方式,即每次取一小段时间的数据写入某个分区,下一小段的时间写入下一个分区。</li>\n</ol>\n<p>Tips : Partition(分区)结构在服务器上的表现形式是一个文件夹,每个Partition的文件夹下面会有多组segment文件, 每组segment文件中<code>又包含.index文件、.log文件、和.timeindex文件</code>, 其中.log文件就是实际存储message的地方, 而.index和.timeindex文件为索引文件用于检索消息。</p>\n<p><br/></p>\n<h4 id=\"应答机制浅析\"><a href=\"#应答机制浅析\" class=\"headerlink\" title=\"应答机制浅析\"></a>应答机制浅析</h4><p>在P(生产者)向Kafka写入消息的时候可以设置参数来确定Kafka是否接收到数据, 该参数可设置值为0、1、all。</p>\n<ul>\n<li><code>0</code>: 表示P往集群发送数据不需要等到集群的返回,<code>不确保信息发送成功</code>,<code>其安全性最低但是效率最高</code>。</li>\n<li><code>1</code>: 表示P往集群发送数据只要Leader应答就可以发送下一条,<code>只确保Leader发送成功</code>。</li>\n<li><code>All</code>: 表示P往集群发送数据需要所有的Follower都完成从Leader的同步才会发送下一条,确保Leader发送成功以及所有的副本都完成备份, <code>安全性最高但是效率最低</code>。</li>\n</ul>\n<p>非常注意: 如果往不存在的Topic写数据, Kafka就会自动创建Topic主题。</p>\n<p><br/></p>\n<h4 id=\"数据日志文件结构\"><a href=\"#数据日志文件结构\" class=\"headerlink\" title=\"数据日志文件结构\"></a>数据日志文件结构</h4><p>描述: 对于每个主题(Topic) 由 Kafka 集群维护了一个分区数据日志文件结构，如下图所示。</p>\n<ul>\n<li>每个Partition(分区)都是一个有序并且不可变的消息记录集合, 当新的数据写入时, 就被追加到Partition的末尾。</li>\n<li>每个Partition(分区)中每条信息都会被分配一个顺序的标识,该标识被称为Offset(即偏移量)。</li>\n<li>在Kafka可配置一个保留期限, 用于标识日志在Kafka集群内保留多长时间, 当超过设定的期限后数据将会被清空,以便为后续的数据腾出空间。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220111142643.png\" alt=\"WeiyiGeek.分区数据日志文件结构\" title=\"\" class=\"\">\n                <p>WeiyiGeek.分区数据日志文件结构</p>\n            </figure>\n<p>Tips: Kafka 只保证在同一个Partition内部消息是有序的, 在不同的Partition之间并不能保证消息是有序的。</p>\n<p>Tips: 由于Kafka会将数据进行持久化存储(<code>即写入到硬盘上</code>), 所以保留的数据大小可以设置为一个比较大的值。</p>\n<p><br/></p>\n<h4 id=\"消费者消费数据说明\"><a href=\"#消费者消费数据说明\" class=\"headerlink\" title=\"消费者消费数据说明\"></a>消费者消费数据说明</h4><p>描述: 前面说过多个消费者实例可以组成一个消费者组, 并使用一个标签来标识该消费者组,<code>一个消费者组中的不同消费者实例可以运行在不同的进程甚至不同的服务器上</code>。</p>\n<ul>\n<li>如所有的消费者实例都在<code>同一个消费者组中</code>, 那么消息记录会被很好的<code>均衡</code>发送到每个消费者实例中。</li>\n<li>如所有的消费者实例都在<code>不同的消费者组中</code>, 那么每条消息记录会被<code>广播</code>发送到每个消费者实例中。</li>\n</ul>\n<p>举个例子, 如图所示两个节点的Kafka集群上拥有四个<code>Partition(P0-P3)</code>的Topic, 并有两个消费者组都在消费该Topic中的数据,在<code>组A中有两个消费者实例</code>,在<code>组B中有四个消费实例</code>。<br>在同一个消费者组中每个消费者实例可以消费多个分区, 但是每个分区<code>最多只能被消费者组里其中一个消费者实例进行消费</code>。简单得说如果有一个四个分区的Topic, 那么消费者组中最多只能够有四个消费者实例去消费。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220111150407.png\" alt=\"WeiyiGeek.消费者消费示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.消费者消费示例</p>\n            </figure>\n<p><br/></p>\n<h4 id=\"应用场景说明\"><a href=\"#应用场景说明\" class=\"headerlink\" title=\"应用场景说明\"></a>应用场景说明</h4><p>上面介绍了Kafka的基本概念和原理, 那么它到底可以做什么呢?</p>\n<p>目前主流的使用场景如下所示:</p>\n<ul>\n<li>1) 消息队列: MQ(Message Queue),它是一种跨进程的通信机制, 用于上下游的信息传递使得程序解耦, 其常用于流量削峰、数据驱动的任务依赖等。除开Kafka产品外还有ActiveMQ、RabbitMQ。</li>\n<li>2) 记录网络活动: 网站活动记录例如 PV、UV以及搜索记录等, 以及事件分类。</li>\n<li>3) 记录指标: 传输监控数据, 用来聚合分布式应用程序的统计数据, 将数据集中后进行统一的分析和展示等。</li>\n<li>4) 日志聚合: 将不同服务器上的日志收集起来并放入一个日志中心。</li>\n</ul>\n<p><br/></p>\n<h3 id=\"2-zookeeper-快速介绍\"><a href=\"#2-zookeeper-快速介绍\" class=\"headerlink\" title=\"2.zookeeper 快速介绍\"></a>2.zookeeper 快速介绍</h3><p>描述: Zookeeper 是一个分布式的、开源的分布式应用程序协调服务, 是基于Google的Chubby项目的开源实现, 它是集群的管理者, 监视着集群中各个节点的状态, 并根据节点提交的反馈进行下一步合理操作。</p>\n<p>其最终目的是将简易的接口和性能高效、功能稳定的系统提供给用户。</p>\n<hr>\n<h2 id=\"0x01-环境安装\"><a href=\"#0x01-环境安装\" class=\"headerlink\" title=\"0x01 环境安装\"></a>0x01 环境安装</h2><h3 id=\"1-安装说明\"><a href=\"#1-安装说明\" class=\"headerlink\" title=\"1.安装说明\"></a>1.安装说明</h3><p>Kafaka 环境所需依赖说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux &amp; Windows 操作系统: 此处 Ubuntu 20.04 LTS (ip: 10.10.10.225)</span><br><span class=\"line\">JDK 环境 （Java 运行环境-此处不在累述）</span><br><span class=\"line\">kafka 二进制包</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>kafka 官网地址: <a href=\"https://kafka.apache.org/\" target=\"_blank\" rel=\"noopener\">https://kafka.apache.org/</a><br>kafka 3.0.0 官方下载: <a href=\"https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz\" target=\"_blank\" rel=\"noopener\">https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz</a></p>\n<p>Tips: 下载使用国外软件时需要注意对其签名或者摘要进行比对校验。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.PGP 签名可以使用 PGP 或 GPG 进行验证, 首先下载相关发行版KEYS的asc签名文件。</span></span><br><span class=\"line\">% gpg --import KEYS </span><br><span class=\"line\">% gpg --verify 下载文件.asc 下载文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.验证文件上的哈希,可以使用 GPG 计算哈希：</span></span><br><span class=\"line\">% gpg --<span class=\"built_in\">print</span>-md SHA256 下载文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux Unix 系统（和 macOS）将有一个名为 md5、md5sum 或 shasum 的实用程序。</span></span><br><span class=\"line\">% md5sum 下载文件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows 7 和更高版本的系统</span></span><br><span class=\"line\">% certUtil -hashfile 下载文件 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS: 哈希摘要算法选择 MD2 MD4 MD5 SHA1 SHA256 SHA384 SHA512。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-安装流程\"><a href=\"#2-安装流程\" class=\"headerlink\" title=\"2.安装流程\"></a>2.安装流程</h3><p>步骤 01.下载 kafka_2.13-3.0.0.tgz 并准备数据目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/software/ &amp;&amp; mkdir -vp /data/&#123;zookeeper,kafka-logs&#125;</span><br><span class=\"line\">wget https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz</span><br><span class=\"line\">tar zxf kafka_2.13-3.0.0.tgz</span><br></pre></td></tr></table></figure></p>\n<p>步骤 02.kafka 简单配置，此处只是为了后续Go语言使用演示，所以为了简单只安装单节点。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.针对 zookeeper.properties 配置修改</span></span><br><span class=\"line\">$ grep -v -E <span class=\"string\">'^#'</span> /opt/software/kafka_2.13-3.0.0/config/zookeeper.properties</span><br><span class=\"line\">dataDir=/data/zookeeper  <span class=\"comment\"># 关键点1.存储快照的目录</span></span><br><span class=\"line\">clientPort=2181          <span class=\"comment\"># 关键点2.zookeeper 服务端监听端口</span></span><br><span class=\"line\">maxClientCnxns=0</span><br><span class=\"line\">admin.enableServer=<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.1.针对 server.properties 配置</span></span><br><span class=\"line\">$ grep -v -E <span class=\"string\">'^#'</span>  /opt/software/kafka_2.13-3.0.0/config/server.properties</span><br><span class=\"line\">broker.id=0                  <span class=\"comment\"># 关键点1.服务器节点ID</span></span><br><span class=\"line\">listeners=PLAINTEXT://:9092  <span class=\"comment\"># 关键点2.kafka 服务端监听端口</span></span><br><span class=\"line\">num.network.threads=3</span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\">socket.send.buffer.bytes=102400</span><br><span class=\"line\">socket.receive.buffer.bytes=102400</span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\">offsets.topic.replication.factor=1</span><br><span class=\"line\">transaction.state.log.replication.factor=1</span><br><span class=\"line\">transaction.state.log.min.isr=1</span><br><span class=\"line\">log.dirs=/data/kafka-logs   <span class=\"comment\"># 关键点3.日志存储路径</span></span><br><span class=\"line\">log.retention.hours=168</span><br><span class=\"line\">log.segment.bytes=1073741824</span><br><span class=\"line\">log.retention.check.interval.ms=300000</span><br><span class=\"line\">num.partitions=1            <span class=\"comment\"># 分区数量</span></span><br><span class=\"line\">num.recovery.threads.per.data.dir=1</span><br><span class=\"line\">zookeeper.connect=10.10.107.225:2181   <span class=\"comment\"># 关键点4.zookeeper 服务端地址，如有多个请使用,分隔。</span></span><br><span class=\"line\">zookeeper.connection.timeout.ms=18000  <span class=\"comment\"># 关键点5. 连接 zookeeper 超时时间。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤 03.分别启动zookeeper和kafka服务（注意启动顺序，如果连接zookeeper服务超时18s则会报错）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先启动</span></span><br><span class=\"line\">/opt/software/kafka_2.13-3.0.0<span class=\"comment\"># ./bin/zookeeper-server-start.sh ./config/zookeeper.properties 2&gt;&amp;1 &gt; /tmp/zookeeper.log &amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再次执行</span></span><br><span class=\"line\">/opt/software/kafka_2.13-3.0.0<span class=\"comment\"># ./bin/kafka-server-start.sh ./config/server.properties  2&gt;&amp;1 &gt; /tmp/kafka.log &amp;</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,024] INFO Registered kafka:type=kafka.Log4jController MBean (kafka.utils.Log4jControllerRegistration$)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,297] INFO Setting -D jdk.tls.rejectClientInitiatedRenegotiation=true to disable client-initiated TLS renegotiation (org.apache.zookeeper.common.X509Util)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,364] INFO Registered signal handlers for TERM, INT, HUP (org.apache.kafka.common.utils.LoggingSignalHandler)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,366] INFO starting (kafka.server.KafkaServer)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,367] INFO Connecting to zookeeper on 10.10.107.225:2181 (kafka.server.KafkaServer)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,378] INFO [ZooKeeperClient Kafka server] Initializing a new session to 10.10.107.225:2181. (kafka.zookeeper.ZooKeeperClient)</span></span><br><span class=\"line\">  <span class=\"comment\"># [2022-01-18 21:55:52,381] INFO Client environment:zookeeper.version=3.6.3--6401e4ad2087061bc6b9f80dec2d69f2e3c8660a, built on 04/08/2021 16:35 GMT (org.apache.zookeeper.ZooKeeper)</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : zookeeper 默认服务端口为2181，而kafka 默认的服务端口为9092。</p>\n<p><br/></p>\n<h2 id=\"0x02-LogAgent-实践开发\"><a href=\"#0x02-LogAgent-实践开发\" class=\"headerlink\" title=\"0x02 LogAgent 实践开发\"></a>0x02 LogAgent 实践开发</h2><p>描述: LogAgent 工作流程大致有如下两个方面。</p>\n<ul>\n<li>读日志: 读取系统日志, 此处我们利用tail包进行持续读取文件中的内容。</li>\n<li>写日志: 将读取到的日志向 kafka 写入，此处我们利用sarama包连接到kafka进行生产数据和消费数据。</li>\n</ul>\n<h3 id=\"1-使用tail包进行日志文件读取\"><a href=\"#1-使用tail包进行日志文件读取\" class=\"headerlink\" title=\"1.使用tail包进行日志文件读取\"></a>1.使用tail包进行日志文件读取</h3><p>tail包项目地址: github.com/hpcloud/tail </p>\n<p><strong>拉取tail包及其依赖到本地</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  weiyigeek.top $ go get github.com/hpcloud/tail </span><br><span class=\"line\">go: downloading github.com/hpcloud/tail v1.0.0</span><br><span class=\"line\">go: downloading gopkg.in/fsnotify.v1 v1.4.7</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>tail包使用示例代码:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/hpcloud/tail\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tail 的具体用法示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.日志文件路径及其tail包Config设置</span></span><br><span class=\"line\">  fileName := <span class=\"string\">\"./access.log\"</span></span><br><span class=\"line\">  config := tail.Config&#123;</span><br><span class=\"line\">    ReOpen:    <span class=\"literal\">true</span>,                                 <span class=\"comment\">// 是否重新打开</span></span><br><span class=\"line\">    Follow:    <span class=\"literal\">true</span>,                                 <span class=\"comment\">// 是否进行跟随</span></span><br><span class=\"line\">    Location:  &amp;tail.SeekInfo&#123;Offset: <span class=\"number\">0</span>, Whence: <span class=\"number\">2</span>&#125;, <span class=\"comment\">// 是否从文件的首行开始读取</span></span><br><span class=\"line\">    MustExist: <span class=\"literal\">false</span>,                                <span class=\"comment\">// 文件是否必须存在</span></span><br><span class=\"line\">    Poll:      <span class=\"literal\">true</span>,                                 <span class=\"comment\">// 是否轮询文件更改而不是使用inotify通知</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.持续跟随文件读取</span></span><br><span class=\"line\">  tailObj, err := tail.TailFile(fileName, config)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Tail file failed, Err:%v\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.读取局部变量定义</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    msg    *tail.Line <span class=\"comment\">// 拿取到的每一行</span></span><br><span class=\"line\">    status <span class=\"keyword\">bool</span>       <span class=\"comment\">// 拿取状态记录</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.跟踪读取文件内容</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    msg, status = &lt;-tailObj.Lines <span class=\"comment\">// 日志读取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !status &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"Tail file Close Reopen filename: %s\\n\"</span>, tailObj.Filename)</span><br><span class=\"line\">      time.Sleep(time.Second)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 带中文输出的两种方式。</span></span><br><span class=\"line\">    <span class=\"comment\">// # 方式1.利用Ascii码转，中文在Go中是UTF8编码占用三个字节。</span></span><br><span class=\"line\">    <span class=\"comment\">// for _, ch := range msg.Text &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// \tfmt.Printf(\"%s\", string(ch))</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// # 方式2.利用string函数</span></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(msg.Text))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  01tail_demo go build .                        </span><br><span class=\"line\">➜  01tail_demo ./01tail_demo      </span><br><span class=\"line\">2021/12/28 03:42:17 Seeked ./access.log - &amp;&#123;Offset:0 Whence:2&#125;</span><br><span class=\"line\">2021/12/28 03:43:06 Re-opening moved/deleted file ./access.log ...</span><br><span class=\"line\">2021/12/28 03:43:06 Successfully reopened ./access.log</span><br><span class=\"line\">Hello World! Tail File Demo!</span><br><span class=\"line\">测试文件: access.log</span><br><span class=\"line\">测试输入中文字符。</span><br><span class=\"line\">Insert into line demo!</span><br><span class=\"line\">My Name is WeiyiGeek!</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220119210502.png\" alt=\"WeiyiGeek.Tail包读取日志结果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Tail包读取日志结果</p>\n            </figure>\n<p><br></p>\n<h3 id=\"2-使用sarama包连接到kafka进行数据生产和消费\"><a href=\"#2-使用sarama包连接到kafka进行数据生产和消费\" class=\"headerlink\" title=\"2.使用sarama包连接到kafka进行数据生产和消费\"></a>2.使用sarama包连接到kafka进行数据生产和消费</h3><p>描述: Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据，具有高性能、持久化、多副本备份、横向扩展等特点, 本节将介绍如何使用Go语言发送和接收kafka消息。</p>\n<p>Go操作kafka常用的包主要有如下两个，此处我们使用sarama包进行演示。</p>\n<ul>\n<li><a href=\"https://github.com/Shopify/sarama\" target=\"_blank\" rel=\"noopener\">https://github.com/Shopify/sarama</a></li>\n<li><a href=\"https://github.com/confluentinc/confluent-kafka-go\" target=\"_blank\" rel=\"noopener\">https://github.com/confluentinc/confluent-kafka-go</a></li>\n</ul>\n<p><strong>Kafka 概念复习</strong></p>\n<ul>\n<li><p><code>Broker</code> : Kafka集群包含一个或多个服务器，这种服务器被称为broker</p>\n</li>\n<li><p><code>Topic</code> : 每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>\n</li>\n<li><p><code>Partition</code> : Partition 是物理上的概念，每个Topic包含一个或多个Partition.</p>\n</li>\n<li><p><code>Producer</code> : 负责发布消息到Kafka broker</p>\n</li>\n<li><p><code>Consumer</code> : 消息消费者，向Kafka broker读取消息的客户端。</p>\n</li>\n<li><p><code>Consumer Group</code> : 每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p>\n</li>\n</ul>\n<p><strong>在项目中 sarama 第三方库下载及安装</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  weiyigeek.top $ </span><br><span class=\"line\">go get github.com/Shopify/sarama  <span class=\"comment\"># 当前 sarama 版本为 v1.30.1。</span></span><br><span class=\"line\">go: downloading github.com/Shopify/sarama v1.30.1  </span><br><span class=\"line\">.....</span><br><span class=\"line\">go: downloading github.com/pierrec/lz4 v1.0.1</span><br><span class=\"line\">go get: added github.com/Shopify/sarama v1.30.1</span><br><span class=\"line\">.....</span><br><span class=\"line\">go get: added gopkg.in/jcmturner/rpc.v1 v1.1.0</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>GO kafka sarama 生产者 消费者 简单实现</strong><br>生产者步骤：</p>\n<ol>\n<li>生成配置文件（生产者基础配置文件、指定生产者回复消息等级 0 1 all、指定生产者消息发送成功或者失败后的返回通道是什么、指定发送到哪一个分区（本文为 随机分区 正常有三种: 通过partiton、通过key 去 Hash出一个分区、轮询））</li>\n<li>构建消息（msg := &amp;sarama.Message{} 这里为指针 1.消息可更改  2. 下面的 发送消息SendMessage() 需要指针类型的参数）</li>\n<li>连接kafka </li>\n<li>发送消息</li>\n</ol>\n<p>producer.go 代码示例:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os/signal\"</span></span><br><span class=\"line\">  <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"github.com/Shopify/sarama\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Go语言中使用第三方库sarama连接kafka服务进行生产，生产者示例。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  wg                          sync.WaitGroup</span><br><span class=\"line\">  enqueued, successes, errors <span class=\"keyword\">int</span> <span class=\"comment\">// 统计参数</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基于sarama第三方库开发的kafka client示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.NewConfig 返回一个具有正常默认值的新配置实例。</span></span><br><span class=\"line\">  config := sarama.NewConfig()</span><br><span class=\"line\">  config.Producer.Partitioner = sarama.NewRandomPartitioner <span class=\"comment\">// 随机新选出一个partition</span></span><br><span class=\"line\">  config.Producer.RequiredAcks = sarama.WaitForAll          <span class=\"comment\">// 发送完数据需要leader和follow都确认</span></span><br><span class=\"line\">  config.Producer.Return.Successes = <span class=\"literal\">true</span>                   <span class=\"comment\">// 成功交付的消息将在success channel返回</span></span><br><span class=\"line\">  config.Producer.Partitioner = sarama.NewHashPartitioner   <span class=\"comment\">// 对Key进行Hash，同样的Key每次都落到一个分区，这样消息是有序的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.连接到 kafka 服务端</span></span><br><span class=\"line\">  <span class=\"comment\">// client, err := sarama.NewSyncProducer([]string&#123;\"10.10.107.225:9092\"&#125;, config)</span></span><br><span class=\"line\">  client, err := sarama.NewClient([]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"10.10.107.225:9092\"</span>&#125;, config)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"producer closed, err:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.使用给定的客户端创建新的生产者，关闭此生产者时仍然需要在基础客户端上调用Close（）。</span></span><br><span class=\"line\">  producer, err := sarama.NewAsyncProducerFromClient(client)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 5.监听 SIGINT 信号触发程序停止(值得借鉴学习)</span></span><br><span class=\"line\">  signals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">  signal.Notify(signals, os.Interrupt)</span><br><span class=\"line\"></span><br><span class=\"line\">  wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 6.启动一个 groutines 来计算成功次数</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"keyword\">range</span> producer.Successes() &#123;</span><br><span class=\"line\">      successes++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 7.启动一个 groutines 来计算失败次数</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> producer.Errors() &#123;</span><br><span class=\"line\">      log.Println(err)</span><br><span class=\"line\">      errors++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">ProducerLoop:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 8.构造一个消息生产者</span></span><br><span class=\"line\">    <span class=\"comment\">// msg := &amp;sarama.ProducerMessage&#123;Topic: \"my_topic\", Value: sarama.StringEncoder(\"This is a sarama test log！By WeiyiGeek!\")&#125;</span></span><br><span class=\"line\">    msg := &amp;sarama.ProducerMessage&#123;&#125;</span><br><span class=\"line\">    msg.Topic = <span class=\"string\">\"my_topic\"</span></span><br><span class=\"line\">    msg.Key = sarama.StringEncoder(<span class=\"string\">\"sarama\"</span>)</span><br><span class=\"line\">    message := fmt.Sprintf(<span class=\"string\">\"This is a sarama test log！By WeiyiGeek! UnixTime:%v\"</span>, time.Now().Unix())</span><br><span class=\"line\">    msg.Value = sarama.StringEncoder(message)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(message)</span><br><span class=\"line\">    <span class=\"comment\">// 9.利用通道的形式将信息异步发送给kafka</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> producer.Input() &lt;- msg:</span><br><span class=\"line\">      enqueued++</span><br><span class=\"line\">      time.Sleep(time.Second * <span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> enqueued &gt;= <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">        producer.AsyncClose() <span class=\"comment\">// 队列数超过5时则停止生产数据。</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span> ProducerLoop</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">      producer.AsyncClose() <span class=\"comment\">// Trigger a shutdown of the producer.</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span> ProducerLoop    <span class=\"comment\">// 按Ctrl+c则退出循环</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 11.等待goroutine任务结束。</span></span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  <span class=\"comment\">// 10.输出表示发生成功</span></span><br><span class=\"line\">  log.Printf(<span class=\"string\">\"Successfully, enqueued: %v ,produced: %d; errors: %d\\n\"</span>, enqueued, successes, errors)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>消费者步骤：</p>\n<ol>\n<li>生成消费者 对象 连接对应的 地址 config 可以为nil。</li>\n<li>拿到所有对应主题下的所有分区。</li>\n<li>遍历每一个分区 调用 消费者对象 传入 对应的 主题 哪一个具体的分区 从什么位置开始读取文件 Return：消息对象。</li>\n<li>通过 消息对象.Message() 可以取到对应的消息。</li>\n</ol>\n<p>consumber.go 代码示例:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"github.com/Shopify/sarama\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Go语言中使用sarama第三方库连接kafka服务进行消费，消费者示例。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.连接到 kafka 服务端</span></span><br><span class=\"line\">  consumer, err := sarama.NewConsumer([]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"10.10.107.225:9092\"</span>&#125;, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"fail to start consumer, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.根据topic取到所有的分区</span></span><br><span class=\"line\">  partitionList, err := consumer.Partitions(<span class=\"string\">\"my_topic\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"fail to get list of partition:err%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"分区信息:\"</span>, partitionList)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.遍历所有的分区</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  wg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> partition := <span class=\"keyword\">range</span> partitionList &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 4.针对每个分区创建一个对应的分区消费者</span></span><br><span class=\"line\">    pc, err := consumer.ConsumePartition(<span class=\"string\">\"my_topic\"</span>, <span class=\"keyword\">int32</span>(partition), sarama.OffsetNewest)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"failed to start consumer for partition %d,err:%v\\n\"</span>, partition, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> pc.AsyncClose()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5.异步从每个分区消费信息</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(sarama.PartitionConsumer)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> pc.Messages() &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"Topic: %v ,Partition:%d ,Offset:%d ,Key: %v ,Value: %v \\n\"</span>, msg.Topic, msg.Partition, msg.Offset, <span class=\"keyword\">string</span>(msg.Key), <span class=\"keyword\">string</span>(msg.Value))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;(pc)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生产者</span></span><br><span class=\"line\">➜ 02sarama_producer go build producer.go</span><br><span class=\"line\">➜ 02sarama_producer ./producer</span><br><span class=\"line\">This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635641</span><br><span class=\"line\">This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635643</span><br><span class=\"line\">This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635645</span><br><span class=\"line\">This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635647</span><br><span class=\"line\">This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635649</span><br><span class=\"line\">2021/12/28 04:07:31 Successfully, enqueued: 5 ,produced: 5; errors: 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者</span></span><br><span class=\"line\">➜  Day11 go build consumer.go</span><br><span class=\"line\">➜  Day11 ./consumer </span><br><span class=\"line\">分区信息: [0]</span><br><span class=\"line\">Topic: my_topic ,Partition:0 ,Offset:379686590 ,Key: sarama ,Value: This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635641 </span><br><span class=\"line\">Topic: my_topic ,Partition:0 ,Offset:379686591 ,Key: sarama ,Value: This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635643 </span><br><span class=\"line\">Topic: my_topic ,Partition:0 ,Offset:379686592 ,Key: sarama ,Value: This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635645 </span><br><span class=\"line\">Topic: my_topic ,Partition:0 ,Offset:379686593 ,Key: sarama ,Value: This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635647 </span><br><span class=\"line\">Topic: my_topic ,Partition:0 ,Offset:379686594 ,Key: sarama ,Value: This is a sarama <span class=\"built_in\">test</span> <span class=\"built_in\">log</span>！By WeiyiGeek! UnixTime:1640635649</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220119212844.png\" alt=\"WeiyiGeek.sarama producer&consumer\" title=\"\" class=\"\">\n                <p>WeiyiGeek.sarama producer&consumer</p>\n            </figure></p>\n<p><strong>使用consumer-group进行消费简单实现</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"context\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/Shopify/sarama\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os/signal\"</span></span><br><span class=\"line\">  <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> consumerGroupHandler <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span> <span class=\"title\">Setup</span><span class=\"params\">(_ sarama.ConsumerGroupSession)</span> <span class=\"title\">error</span></span>   &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(consumerGroupHandler)</span> <span class=\"title\">Cleanup</span><span class=\"params\">(_ sarama.ConsumerGroupSession)</span> <span class=\"title\">error</span></span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h consumerGroupHandler)</span> <span class=\"title\">ConsumeClaim</span><span class=\"params\">(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> claim.Messages() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%s Message topic:%q partition:%d offset:%d  value:%s\\n\"</span>,h.name, msg.Topic, msg.Partition, msg.Offset, <span class=\"keyword\">string</span>(msg.Value))</span><br><span class=\"line\">    <span class=\"comment\">// 手动确认消息</span></span><br><span class=\"line\">    sess.MarkMessage(msg, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleErrors</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup )</span></span>&#123;</span><br><span class=\"line\">  wg.Done()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> err := <span class=\"keyword\">range</span> (*group).Errors() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"ERROR\"</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">consume</span><span class=\"params\">(group *sarama.ConsumerGroup,wg  *sync.WaitGroup, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(name + <span class=\"string\">\"start\"</span>)</span><br><span class=\"line\">  wg.Done()</span><br><span class=\"line\">  ctx := context.Background()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    topics := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"my_topic\"</span>&#125;</span><br><span class=\"line\">    handler := consumerGroupHandler&#123;name: name&#125;</span><br><span class=\"line\">    err := (*group).Consume(ctx, topics, handler)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  config := sarama.NewConfig()</span><br><span class=\"line\">  config.Consumer.Return.Errors = <span class=\"literal\">false</span></span><br><span class=\"line\">  config.Version = sarama.V0_10_2_0</span><br><span class=\"line\">  client,err := sarama.NewClient([]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"localhost:9192\"</span>,<span class=\"string\">\"localhost:9292\"</span>,<span class=\"string\">\"localhost:9392\"</span>&#125;, config)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> client.Close()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  group1, err := sarama.NewConsumerGroupFromClient(<span class=\"string\">\"c1\"</span>, client)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  group2, err := sarama.NewConsumerGroupFromClient(<span class=\"string\">\"c2\"</span>, client)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  group3, err := sarama.NewConsumerGroupFromClient(<span class=\"string\">\"c3\"</span>, client)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> group1.Close()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> group2.Close()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> group3.Close()</span><br><span class=\"line\">  wg.Add(<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> consume(&amp;group1,&amp;wg,<span class=\"string\">\"c1\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> consume(&amp;group2,&amp;wg,<span class=\"string\">\"c2\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> consume(&amp;group3,&amp;wg,<span class=\"string\">\"c3\"</span>)</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\">  signals := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal, <span class=\"number\">1</span>)</span><br><span class=\"line\">  signal.Notify(signals, os.Interrupt)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> &lt;-signals:</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>入坑与出坑</strong></p>\n<ul>\n<li><p>问题1.由于<code>sarama v1.20</code>之后的版本加入了zstd压缩算法需要用到 cgo.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Windows平台编译时会提示类似如下错误，解决办法:在Windows平台请使用v1.19版本的sarama。</span><br><span class=\"line\"><span class=\"comment\"># github.com/DataDog/zstd</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span>: <span class=\"string\">\"gcc\"</span>:executable file not found <span class=\"keyword\">in</span> %PATH%</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>问题2.客户端连接kafka服务时显示如下错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误信息</span></span><br><span class=\"line\">send msg failed, err: dial tcp: lookup es01: Temporary failure <span class=\"keyword\">in</span> name resolution</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决办法</span></span><br><span class=\"line\">tee -a /etc/hosts &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">10.10.107.225 es01</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n</li>\n</ul>\n<p><strong>参考地址:</strong></p>\n<ul>\n<li>Golang中如何正确的使用sarama包操作Kafka？<a href=\"https://www.cnblogs.com/wishFreedom/p/15131600.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wishFreedom/p/15131600.html</a></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/zhang123456456/article/details/78881733\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhang123456456/article/details/78881733</a></p>\n<p>overruns<br>for i in {21..26};do ssh -p 20211 <a href=\"mailto:root@10.41.40\">root@10.41.40</a>.${i} ‘ifconfig | grep “overruns”‘;done;<br>for i in {21..26};do ssh -p 20211 <a href=\"mailto:root@10.41.40\">root@10.41.40</a>.${i} ‘netstat -i | column -t’;done;<br>for i in {78..83};do ssh -p 20211 <a href=\"mailto:root@10.41.40\">root@10.41.40</a>.${i} ‘netstat -i | column -t’;done;</p>\n<p>RX errors:表示总的收包的错误数量，这包括 too-long-frames 错误，Ring Buffer 溢出错误，crc 校验错误，帧同步错误，fifo overruns 以及 missed pkg 等等。</p>\n<p>RX dropped:表示数据包已经进入了 Ring Buffer，但是由于内存不够等系统原因，导致在拷贝到内存的过程中被丢弃。</p>\n<p>RX overruns:表示了 fifo 的 overruns，这是由于 Ring Buffer(aka Driver Queue) 传输的 IO 大于 kernel 能够处理的 IO 导致的，而 Ring Buffer 则是指在发起 IRQ 请求之前的那块 buffer。很明显，overruns 的增大意味着数据包没到 Ring Buffer 就被网卡物理层给丢弃了，而 CPU 无法即使的处理中断是造成 Ring Buffer 满的原因之一，上面那台有问题的机器就是因为 interruprs 分布的不均匀(都压在 core0)，没有做 affinity 而造成的丢包。</p>\n<p>RX frame:表示 misaligned 的 frames。</p>\n<p>一台机器经常收到丢包的报警，先看看最底层的有没有问题:</p>\n<p>ethtool eth2 | egrep ‘Speed|Duplex’</p>\n<p>cat /proc/net/dev | column -t</p>\n<p>问题：接受队列溢出产生错误，当抵达的包多于内核可以处理的包时，计算机会产生漫溢(overruns)。输入队列达到其上限(max_backlog)时，多抵达的那些包会全部被丢弃掉。@读者 achlice 补充：</p>\n<p>补充一下， 对于overrun的包，修改了ring buffer之后，重启主机后会失效，1,需要将配置添加到网卡配置文件例如 rhel系列是在/etc/sysconfig/network-scripts/ifcfg-* , 例如网卡是enp3, 在 ifcfg-enp3 配置文件添加 ‘ETHTOOL_OPTS=’-G ${DEVICE} rx 4096; -A ${DEVICE} autoneg on’ 2，如果网卡配置ETHTOOL_OPTS 参数不生效,请确保initscripts 这个软件包是最新版本.</p>\n<p> 找了一些国外的文章，可以通过ethtool来修改网卡的buffer size ，首先要网卡支持，我的服务器是是INTEL 的1000M网卡,我们看看ethtool说明 </p>\n<p>-g   –show-ringQueries the specified ethernet device for rx/tx ring parameter information.</p>\n<p>-G   –set-ringChanges the rx/tx ring parameters of the specified ethernet device.</p>\n<p>查看当前网卡的buffer size情况ethtool -g eth0   </p>\n<p>Ring parameters for eth0:</p>\n<p>Pre-set maximums:</p>\n<p>RX: 4096RX Mini: 0</p>\n<p>RX Jumbo: 0</p>\n<p>TX: 4096</p>\n<p>Current hardware settings:</p>\n<p>RX: 256</p>\n<p>RX Mini: 0</p>\n<p>RX Jumbo: 0</p>\n<p>TX: 256</p>\n<p>由于我的是rx包会有droped的情况我们用ethtool -G eth0 rx 2048</p>\n<p>同样对于eth1也是如此ethtool -G eth1 rx 2048</p>\n<p>再看看修改过后的ethtool -g eth0</p>\n<p>Ring parameters for eth0:</p>\n<p>Pre-set maximums:</p>\n<p>RX: 4096</p>\n<p>RX Mini: 0</p>\n<p>RX Jumbo: 0</p>\n<p>TX: 4096</p>\n<p>Current hardware settings:</p>\n<p>RX: 2048</p>\n<p>RX Mini: 0</p>\n<p>RX Jumbo: 0</p>\n<p>TX: 2048</p>\n<p>几个小时后，已经没有丢包增加的情况了</p>\n<p>正常情况下，RX-ERR/TX-ERR、RX-DRP/TX-DRP和RX-OVR/TX-OVR的值都应该为0，如果这几个选项的值不为0，并且很大，那么网络质量肯定有问题，网络传输性能也一定会下降。</p>\n<ol start=\"2\">\n<li>生产案例</li>\n</ol>\n<p>范例10-29：统计各个状态的网络连接个数。</p>\n<p>[root@Backend-184 ~]# netstat -n |awk ‘/^tcp/ {++oldboy[$NF]} END {for(a in oldboy) print a, oldboy[a]}’ #&lt;==这个题目利用了awk数组的功能,awk的使用请参考本书第四章。</p>\n<p>TIME_WAIT 6163</p>\n<p>FIN_WAIT1 42</p>\n<p>FIN_WAIT2 1056</p>\n<p>ESTABLISHED 4542</p>\n<p>SYN_RECV 53</p>\n<p>LAST_ACK 30</p>\n<p>root@weiyigeek-21:~# lspci -vvv | grep -A 100 “Ether”<br>00:09.0 Ethernet controller: Red Hat, Inc. Virtio network device<br>        Subsystem: Red Hat, Inc. Virtio network device<br>        Physical Slot: 9<br>        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+<br>        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- <MAbort- >SERR- &lt;PERR- INTx-<br>        Latency: 0<br>        Region 0: Memory at fe208000 (64-bit, prefetchable) [size=4K]<br>        Region 2: Memory at fe209000 (64-bit, prefetchable) [size=4K]<br>        Capabilities: [40] MSI-X: Enable+ Count=10 Masked-<br>                Vector table: BAR=2 offset=00000000<br>                PBA: BAR=2 offset=00000c00<br>        Kernel driver in use: virtio-pci</p>\n<p>00:0a.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon<br>        Subsystem: Red Hat, Inc. Virtio memory balloon<br>        Physical Slot: 10<br>        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx-<br>        Status: Cap- 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- <MAbort- >SERR- &lt;PERR- INTx-<br>        Latency: 0<br>        Interrupt: pin A routed to IRQ 10<br>        Region 0: I/O ports at d540 [size=32]<br>        Kernel driver in use: virtio-pci</p>\n<p>00:1f.0 PCI bridge: Red Hat, Inc. QEMU PCI-PCI bridge (prog-if 00 [Normal decode])<br>        Physical Slot: 31<br>        Control: I/O+ Mem+ BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx-<br>        Status: Cap+ 66MHz+ UDF- FastB2B+ ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- <MAbort- >SERR- &lt;PERR- INTx-<br>        Interrupt: pin A routed to IRQ 11<br>        Region 0: Memory at fea12000 (64-bit, non-prefetchable) [size=256]<br>        Bus: primary=00, secondary=01, subordinate=01, sec-latency=0<br>        I/O behind bridge: 0000c000-0000cfff [size=4K]<br>        Memory behind bridge: fe800000-fe9fffff [size=2M]<br>        Prefetchable memory behind bridge: 00000000fe000000-00000000fe1fffff [size=2M]<br>        Secondary status: 66MHz+ FastB2B+ ParErr- DEVSEL=fast &gt;TAbort- &lt;TAbort- &lt;MAbort- &lt;SERR- <PERR-\n        BridgeCtl: Parity- SERR+ NoISA- VGA- VGA16- MAbort- >Reset- FastB2B-<br>                PriDiscTmr- SecDiscTmr- DiscTmrStat- DiscTmrSERREn-<br>        Capabilities: [4c] MSI: Enable- Count=1/1 Maskable+ 64bit+<br>                Address: 0000000000000000  Data: 0000<br>                Masking: 00000000  Pending: 00000000<br>        Capabilities: [48] Slot ID: 0 slots, First+, chassis 01<br>        Capabilities: [40] Hot-plug capable</p>\n<p>root@weiyigeek-21:~# ethtool -l ens9<br>Channel parameters for ens9:<br>Pre-set maximums:<br>RX:             0<br>TX:             0<br>Other:          0<br>Combined:       4<br>Current hardware settings:<br>RX:             0<br>TX:             0<br>Other:          0<br>Combined:       4</p>\n<p><a href=\"https://bbs.huaweicloud.com/blogs/140990\" target=\"_blank\" rel=\"noopener\">https://bbs.huaweicloud.com/blogs/140990</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}