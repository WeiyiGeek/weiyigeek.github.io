{"title":"AWK三剑客入门与进阶实践指南","slug":"系统运维/Linux/常用命令/脚本常用类命令/awk三剑客入门与进阶实践指南","date":"2019-06-26T12:37:30.000Z","updated":"2023-03-13T04:02:59.880Z","url":"2019/6-26-175.html","path":"api/articles/2019/6-26-175.html.json","covers":["https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719105814.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719110319.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111438.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111546.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111855.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719112313.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719113232.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719164104.png","https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719170801.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><p>描述：awk 命令与其说它是一个命令，更不如说它是一门脚本编程语言，它是主要针对文本和数据进行处理的编程语言,是linux/unix下的一个强大编程工具。<br>它有三种形式 <code>awk,gawk,nawk</code> 平时所说的awk其实就是gawk;它在命令行中使用,但更多是作为脚本来使用,</p>\n<p><em>awk特点</em>:</p>\n<ul>\n<li>它支持用户自定义函数和动态正则表达式等先进功能</li>\n<li>awk有很多内建的功能：<code>可以自定义变量,有条件语句,有循环,有数组,有正则,有函数</code>等这是它和C语言的相同之处</li>\n<li>灵活性是awk最大的优势</li>\n</ul>\n<h4 id=\"0x01-命令格式和选项\"><a href=\"#0x01-命令格式和选项\" class=\"headerlink\" title=\"0x01 命令格式和选项\"></a>0x01 命令格式和选项</h4><p><strong>语法形式</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk [options] <span class=\"string\">'script'</span> -v var=value file (s) <span class=\"comment\">#数据可以来自标准输入(stdin)、一个或多个文件,或其它命令的管道输出.</span></span><br><span class=\"line\">awk [options] -f scriptfile -v var=value file(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#awk脚本基本结构:&#123;&#125;类似一个循环体，会对文件中的每一行进行迭代，</span></span><br><span class=\"line\"><span class=\"comment\">#一个awk脚本通常由三个部分是可选的。</span></span><br><span class=\"line\"><span class=\"comment\"># - BEGIN语句块、</span></span><br><span class=\"line\"><span class=\"comment\"># - 能够使用模式匹配的通用语句块、</span></span><br><span class=\"line\"><span class=\"comment\"># - END语句块</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; print \"start\" &#125; pattern&#123; commands &#125; END&#123; print \"end\" &#125;'</span> file</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>常用命令选项：</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-F fs <span class=\"comment\">#fs指定输入分隔符，fs可以是字符串或正则表达式，如-F:</span></span><br><span class=\"line\">-v var=value  <span class=\"comment\">#赋值一个用户定义变量，将外部变量传递给awk</span></span><br><span class=\"line\">-f scripfile  <span class=\"comment\">#从脚本文件中读取awk命令</span></span><br><span class=\"line\">-m[fr] val    <span class=\"comment\"># 对val值设置内在限制，-mf选项限制分配给val的最大块数目；</span></span><br><span class=\"line\">-mr选项 限制记录的最大数目 <span class=\"comment\">#这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>awk模式和操作</em><br>模式可以是以下任意一个：</p>\n<ul>\n<li>/正则表达式/：使用通配符的扩展集。</li>\n<li>关系表达式：使用运算符进行操作，可以是字符串或数字的比较测试。</li>\n<li>模式匹配表达式：用运算符~（匹配）和~!（不匹配）。</li>\n<li>BEGIN语句块、pattern语句块、END语句块参见awk的工作原理</li>\n</ul>\n<p>操作由<code>一个或多个命令、函数、表达式组成</code>之间由换行符或分号隔开，并位于大括号内主要部分是：</p>\n<ul>\n<li>变量或数组赋值</li>\n<li>输出命令</li>\n<li>内置函数</li>\n<li>控制流语句</li>\n</ul>\n<hr>\n\n<h4 id=\"0x02-awk的工作原理\"><a href=\"#0x02-awk的工作原理\" class=\"headerlink\" title=\"0x02 awk的工作原理\"></a>0x02 awk的工作原理</h4><p>比如：<code>awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;</code></p>\n<ul>\n<li>第一步：执行BEGIN{ commands }语句块中的语句；</li>\n<li>第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ commands }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程直到文件全部被读取完毕。</li>\n<li>第三步：当读至输入流末尾时，执行END{ commands }语句块。</li>\n</ul>\n<p><em>BEGIN语句块(程序初始操作)</em></p>\n<ul>\n<li>在awk开始从输入流中读取行之前被执行，<code>可选的语句块比如显示变量以及变量初始化、打印输出表格的表头</code>等语句通常可以写在BEGIN语句块中。</li>\n</ul>\n<p>pattern语句块中的通用命令是最重要的部分，它也是可选的。如果没有提供pattern语句块，则<code>默认执行{ print }即打印每一个读取到的行</code>，awk读取的每一行都会执行该语句块。</p>\n<p><em>END语句块（程序结束操作）</em></p>\n<ul>\n<li>在awk从输入流中读取完所有的行之后(程序结束之后)被执行(扫尾工作)，比如<code>打印所有行的分析结果这类信息汇总都是在END语句块中完成</code>，它也是一个可选语句块。</li>\n<li><code>有END语句块后必须有处理的文件</code>或者是通过管道符传入的字符串，否则会一直卡再输入状态;</li>\n</ul>\n<p>注意事项：<br>任何在BEGIN之后列出的操作<code>{}内</code>,将在awk开始扫描输入之前执行,而END之后列出的操作将会在扫描完全后输入后执行;</p>\n<p><br></p>\n<p>Awk支持输出中文字符,同时也支持Print与printf命令</p>\n<ul>\n<li>1.print会在每个输出之后自动加入一个换行符（Linux-shell是没有Print命令的，只有printf命令）</li>\n<li>2.printf是标准格式的输出命令，并不会自动加入换行符,如果需要则要加上\\反义字符.</li>\n</ul>\n<p><br></p>\n<p>基本示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.任意一个部分都可以不出现在脚本中，脚本通常是被单引号或双引号中，例如：</span></span><br><span class=\"line\"><span class=\"comment\">#通常变量初始化语句（如：i=0）以及打印文件头部的语句放入BEGIN语句块中，将打印的结果等语句放在END语句块中</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;'</span> filename  <span class=\"comment\">#[推荐方式] </span></span><br><span class=\"line\">awk <span class=\"string\">\"BEGIN&#123; i=0 &#125; &#123; i++ &#125; END&#123; print i &#125;\"</span> filename  <span class=\"comment\">#在awk的print语句块中双引号是被当作拼接符使用，（执行某些语句时候会出现问题）</span></span><br><span class=\"line\"><span class=\"comment\">#有END后必须在后面接上处理的文件</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN &#123;</span></span><br><span class=\"line\"><span class=\"string\">    arr[1]=\"boy\";</span></span><br><span class=\"line\"><span class=\"string\">    arr[2]=\"girl\";</span></span><br><span class=\"line\"><span class=\"string\">    for(key in array)</span></span><br><span class=\"line\"><span class=\"string\">      print key,array[key]</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span> /etc/hosts <span class=\"comment\">#毫无相关的也可以</span></span><br><span class=\"line\"><span class=\"comment\"># 1 boy</span></span><br><span class=\"line\"><span class=\"comment\"># 2 girl</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.当使用不带参数的print时，它就打印当前行，当print的参数是以逗号进行分隔时，打印时则以空格作为定界符。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"A line 1\\nA line 2\"</span> | awk <span class=\"string\">'BEGIN&#123; print \"Start\" &#125; &#123; print &#125; END&#123; print \"End\" &#125;'</span>  <span class=\"comment\">#通过管道符号</span></span><br><span class=\"line\"><span class=\"comment\"># Start</span></span><br><span class=\"line\"><span class=\"comment\"># A line 1</span></span><br><span class=\"line\"><span class=\"comment\"># A line 2</span></span><br><span class=\"line\"><span class=\"comment\"># End</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.双引号\"\"拼接使用：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> | awk <span class=\"string\">'&#123; var1=\"v1\"; var2=\"v2\"; var3=\"v3\"; print var1,var2,var3; &#125;'</span> </span><br><span class=\"line\"><span class=\"comment\">#v1 v2 v3</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> | awk <span class=\"string\">'&#123; var1=\"1\"; var2=\"2\"; var3=\"3\"; print var1\"=&gt;\"var2\"=&gt;\"var3; &#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#1=&gt;2=&gt;3</span></span><br></pre></td></tr></table></figure></p>\n<p>借助-v选项:可以将外部值（并非来自stdin）传递给awk<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.将外部变量值传递给awk,</span></span><br><span class=\"line\">VAR=10000;<span class=\"built_in\">echo</span> | awk -v VARIABLE=<span class=\"variable\">$VAR</span> <span class=\"string\">'&#123; print VARIABLE &#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 10000</span></span><br><span class=\"line\"><span class=\"comment\">#另一种传递外部变量方法：</span></span><br><span class=\"line\">var1=<span class=\"string\">\"aaa\"</span>;var2=<span class=\"string\">\"bbb\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> | awk <span class=\"string\">'&#123; print v1,v2 &#125;'</span> v1=<span class=\"variable\">$var1</span> v2=<span class=\"variable\">$var2</span>  <span class=\"comment\">#方法中变量之间用空格分隔作为awk的命令行参数跟随在BEGIN、&#123;&#125;和END语句块之后</span></span><br><span class=\"line\"><span class=\"comment\"># aaa bbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.变量传递加文件读取</span></span><br><span class=\"line\">var1=1024;var2=<span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; print v2,\"BEIGIN\",v1 &#125; &#123; print v1,v2 &#125; END&#123; print v2,v1 &#125;'</span> v1=<span class=\"variable\">$var1</span> v2=<span class=\"variable\">$var2</span> /etc/passwd</span><br><span class=\"line\">    BEIGIN     <span class=\"comment\">#BEGIN 初始化为空白此时变量还没写入</span></span><br><span class=\"line\"><span class=\"comment\"># 1024 weiyigeek  #/etc/passwd有几行就显示几行</span></span><br><span class=\"line\"><span class=\"comment\"># 1024 weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\"># 1024 weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\"># 1024 weiyigeek</span></span><br><span class=\"line\"><span class=\"comment\"># 1024 weiyigeek</span></span><br><span class=\"line\">weiyigeek 1024  <span class=\"comment\">#END 除开最后一行不一样</span></span><br></pre></td></tr></table></figure></p>\n<p>awk借助-F 选项确定分割符号进行指定列输出，默认的字段定界符是空格：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.passwd文件分割</span></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123; print $NF &#125;'</span> /etc/passwd</span><br><span class=\"line\">awk -F <span class=\"string\">\":\"</span> <span class=\"string\">'&#123; print $1 &#125;'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\"># root</span></span><br><span class=\"line\"><span class=\"comment\"># daemon</span></span><br><span class=\"line\"><span class=\"comment\"># bin</span></span><br><span class=\"line\"><span class=\"comment\"># sys</span></span><br><span class=\"line\">awk -F <span class=\"string\">'&#123; print $1 &#125;'</span> /etc/passwd</span><br><span class=\"line\"><span class=\"comment\">#补充可以采用正则的方式进行指定分隔符进行分割（及多个分隔符）</span></span><br><span class=\"line\"><span class=\"comment\"># netstat -an | grep \"EST\"</span></span><br><span class=\"line\"><span class=\"comment\">#   TCP    127.0.0.1:5354         127.0.0.1:49155        ESTABLISHED</span></span><br><span class=\"line\"><span class=\"comment\">#   TCP    127.0.0.1:5354         127.0.0.1:49156        ESTABLISHED</span></span><br><span class=\"line\"><span class=\"comment\">#值得学习</span></span><br><span class=\"line\">netstat -an | grep <span class=\"string\">\"EST\"</span> | grep -v <span class=\"string\">\"127.0.0.1\"</span> | awk -F <span class=\"string\">\"[ :]+\"</span> <span class=\"string\">'&#123;print $5&#125;'</span> | sort | uniq -c</span><br><span class=\"line\">netstat -an | grep <span class=\"string\">\"EST\"</span> | awk -F <span class=\"string\">\"[ :]+\"</span> <span class=\"string\">'&#123;print $5&#125;'</span> | sort |uniq -c</span><br><span class=\"line\">      6 127.0.0.1</span><br><span class=\"line\">      1 183.232.94.216</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.统计一个文本文件中url出现的次数，并且去重复</span></span><br><span class=\"line\">cat &gt;&gt; test.txt &lt;&lt;END</span><br><span class=\"line\">http://www.weiyigeek.github.io/1.path</span><br><span class=\"line\">http://www.weiyigeek.github.io/1.html</span><br><span class=\"line\">http://bbs.weiyigeek.github.io/1.jsp</span><br><span class=\"line\">http://www.weiyigeek.github.io/1.php</span><br><span class=\"line\">http://blog.weiyigeek.github.io/1.jsp</span><br><span class=\"line\">http://bbs.weiyigeek.github.io/1.jsp</span><br><span class=\"line\">END</span><br><span class=\"line\">workspace&gt; awk -F <span class=\"string\">\"/\"</span> <span class=\"string\">'&#123; print $3 &#125;'</span> test.txt | sort -r | uniq -c </span><br><span class=\"line\">  3 www.weiyigeek.github.io</span><br><span class=\"line\">  2 bbs.weiyigeek.github.io</span><br><span class=\"line\">  1 blog.weiyigeek.github.io</span><br><span class=\"line\"><span class=\"comment\">#补从示例2,注意字符串默认从0加整数自加1（值得学习）</span></span><br><span class=\"line\">awk -F <span class=\"string\">\"/\"</span> <span class=\"string\">'&#123;S[$3]+=1&#125;END&#123; for(item in S) print item\":\"S[item]&#125;'</span> test.txt  <span class=\"comment\">#借鉴与学习</span></span><br><span class=\"line\">awk -F <span class=\"string\">\"/\"</span> <span class=\"string\">'&#123;S[$3]++&#125;END&#123; for(item in S) print item\":\"S[item]&#125;'</span> test.txt | sort -t <span class=\"string\">\":\"</span> -k2  <span class=\"comment\">#排序</span></span><br><span class=\"line\">blog.weiyigeek.github.io:1</span><br><span class=\"line\">bbs.weiyigeek.github.io:2</span><br><span class=\"line\">www.weiyigeek.github.io:3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.统计服务器中不同网络连接状态的对应数量 （借鉴学习）</span></span><br><span class=\"line\">$ NETSTAT.EXE -an | awk <span class=\"string\">'/^tcp/ &#123;print $NF&#125;'</span> | sort | uniq -c | sort -rn |head   <span class=\"comment\">#$NF 代表最后一行</span></span><br><span class=\"line\">$ NETSTAT.EXE -an | awk -F <span class=\"string\">\" \"</span> <span class=\"string\">'&#123; if($4 == \"\" || $4 == \" \")&#123;next&#125;else&#123;S[$4]++&#125;&#125; END&#123; for(key in S) print key\"状态数量：\"S[key]; &#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># LISTENING状态数量：37</span></span><br><span class=\"line\"><span class=\"comment\"># CLOSE_WAIT状态数量：12</span></span><br><span class=\"line\"><span class=\"comment\"># ESTABLISHED状态数量：15</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.统计apache.logs日志数量 (访问次数*文件大小) 文件名称</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123; print $7\"\\t\" $10&#125;'</span> access_2018-12.log | sort | uniq -c | awk <span class=\"string\">'&#123;print $1*$3,$1,$2&#125;'</span> | sort -rn | head  <span class=\"comment\">#方式1</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;namenum[$7]++;size[$7]+=$10&#125; END &#123;for x in name&#123; print(size[x],namenum[x],x)&#125;&#125;'</span> access_2018-12.log | sort -rn -k1 | head -10  <span class=\"comment\">#方式2 （自带统计数量）</span></span><br><span class=\"line\"><span class=\"comment\"># 57254 1 /static/js/jquery-juquey-1.3.2min.js</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"0x03-awk内置变量（预定义变量）\"><a href=\"#0x03-awk内置变量（预定义变量）\" class=\"headerlink\" title=\"0x03 awk内置变量（预定义变量）\"></a>0x03 awk内置变量（预定义变量）</h4><p>说明：[A][N][P][G]表示第一个支持变量的工具<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[A]=awk</span><br><span class=\"line\">[N]=nawk</span><br><span class=\"line\">[P]=POSIXawk</span><br><span class=\"line\">[G]=gawk </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#内置变量</span></span><br><span class=\"line\"><span class=\"variable\">$n</span> 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段。 </span><br><span class=\"line\"><span class=\"variable\">$0</span> 这个变量包含执行过程中当前行的文本内容。</span><br><span class=\"line\">[N] ARGC 命令行参数的数目。</span><br><span class=\"line\">[G] ARGIND 命令行中当前文件的位置（从0开始算）。</span><br><span class=\"line\">[N] ARGV 包含命令行参数的数组。</span><br><span class=\"line\">[G] CONVFMT 数字转换格式（默认值为%.6g）。</span><br><span class=\"line\">[P] ENVIRON 环境变量关联数组。</span><br><span class=\"line\">[N] ERRNO 最后一个系统错误的描述。</span><br><span class=\"line\">[G] FIELDWIDTHS 字段宽度列表（用空格键分隔）。</span><br><span class=\"line\">[A] FILENAME 当前输入文件的名。</span><br><span class=\"line\">[P] FNR 同NR，但相对于当前文件。</span><br><span class=\"line\">[A] FS 字段分隔符（默认是任何空格）。</span><br><span class=\"line\">[G] IGNORECASE 如果为真，则进行忽略大小写的匹配。</span><br><span class=\"line\">[A] NF 表示字段数，在执行过程中对应于当前的字段数。常用</span><br><span class=\"line\">[A] NR 表示记录数，在执行过程中对应于当前的行号。 常用</span><br><span class=\"line\">[A] OFMT 数字的输出格式（默认值是%.6g）。</span><br><span class=\"line\">[A] OFS 输出字段分隔符（默认值是一个空格）。常用</span><br><span class=\"line\">[A] ORS 输出记录分隔符（默认值是一个换行符）。</span><br><span class=\"line\">[A] RS 记录分隔符（默认是一个换行符）。</span><br><span class=\"line\">[N] RSTART 由match函数所匹配的字符串的第一个位置。</span><br><span class=\"line\">[N] RLENGTH 由match函数所匹配的字符串的长度。</span><br><span class=\"line\">[N] SUBSEP 数组下标分隔符（默认值是34）。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>输出字段$0~{$1.$n}开始(类似于shell的位置参数变量):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.输出第几列的数据，类似shell从cmd传入到脚本程序的参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"1 2 3\\n4 5 6\\n7 8 9\"</span> | awk <span class=\"string\">'&#123;print $0,\" ==\",$1,\"-\",$2,\"-\",$3&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3  == 1 - 2 - 3</span></span><br><span class=\"line\"><span class=\"comment\"># 4 5 6  == 4 - 5 - 6</span></span><br><span class=\"line\"><span class=\"comment\"># 7 8 9  == 7 - 8 - 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.打印每一行的第二和第三个字段：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"1 2 3\\n4 5 6\\n7 8 9\"</span> | awk <span class=\"string\">'&#123; print $2,$3 &#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 2 3</span></span><br><span class=\"line\"><span class=\"comment\"># 5 6</span></span><br><span class=\"line\"><span class=\"comment\"># 8 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.文件处理传入输出字符,把文件内容第一列作为下标,第二列作为值，放入数组然后输出</span></span><br><span class=\"line\">cat &gt;&gt; demo1.txt &lt;&lt;END</span><br><span class=\"line\">1 WeiyiGeek</span><br><span class=\"line\">2 Weiy_</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'&#123;S[$1]=$2 &#125; END&#123; for(key in S) print key\":\"S[key] &#125;'</span> demo1.txt</span><br><span class=\"line\"><span class=\"comment\"># 1:WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># 2:Weiy_</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>对于传入的文件进行字段数NF处理：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.使用print $NF可以打印出一行中的最后一个字段，使用$(NF-1)则是打印倒数第二个字段，其他以此类推：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"line1 f2 f3\\n line2 f4 f5\"</span> | awk <span class=\"string\">'&#123;print $NF&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># f3</span></span><br><span class=\"line\"><span class=\"comment\"># f5</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"line1 f2 f3\\n line2 f4 f5\"</span> | awk <span class=\"string\">'&#123;print $(NF-1)&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># f2</span></span><br><span class=\"line\"><span class=\"comment\"># f4</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>统计文件中的行数NR<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例0：统计行数</span></span><br><span class=\"line\">$ awk <span class=\"string\">'END&#123;print NR&#125;'</span> /etc/passwd</span><br><span class=\"line\">24</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例1:输出字段$0~$1~$n开始(类似于shell的位置参数变量)，</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"line1 f2 f3\\nline2 f4 f5\\nline3 f6 f7\"</span> | awk <span class=\"string\">'&#123;print \"Line No:\" NR \", No of fields:\" NF , \"$0=\"$0, \"$1=\"$1, \"$2=\"$2, \"$3=\"$3&#125;'</span> </span><br><span class=\"line\"><span class=\"comment\"># Line No:1(关键点), No of fields:3(关键点) $0=line1 f2 f3(关键点) $1=line1(关键点) $2=f2(关键点) $3=f3(关键点)</span></span><br><span class=\"line\"><span class=\"comment\"># Line No:2, No of fields:3 $0=line2 f4 f5 $1=line2 $2=f4 $3=f5</span></span><br><span class=\"line\"><span class=\"comment\"># Line No:3, No of fields:3 $0=line3 f6 f7 $1=line3 $2=f6 $3=f7</span></span><br></pre></td></tr></table></figure><br>以上命令只使用了END语句块在读入每一行的时，awk会将NR更新为对应的行号，当到达最后一行NR的值就是最后一行的行号，所以END语句块中的NR就是文件的行数。</p>\n<p><br><br>设置字符分割定界符 FS:<br>描述：在BEGIN语句块中可以用<code>FS=&quot;定界符&quot;</code>设置输出字段的定界符;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.指定定界符</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1-2-3-4-5-6\"</span> | awk <span class=\"string\">'BEGIN&#123; FS=\"-\"&#125; &#123;print \"行数:\"$NR,\"列数:\"$NF,\"\\n选择分割元素:\"$1,\"全部元素:\"$0&#125;'</span></span><br><span class=\"line\">行数:1 列数:6 </span><br><span class=\"line\">选择分割元素:1 全部元素:1-2-3-4-5-6</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.与-F选项同功能来提取passwd</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; FS=\":\";&#125; &#123;print \"用户名:\"$1&#125;'</span> /etc/passwd | sort -u    </span><br><span class=\"line\">用户名:_apt</span><br><span class=\"line\">用户名:backup</span><br><span class=\"line\">用户名:bin</span><br><span class=\"line\">用户名:daemon</span><br><span class=\"line\">用户名:dnsmasq</span><br><span class=\"line\">用户名:games</span><br><span class=\"line\">用户名:gnats</span><br><span class=\"line\">用户名:irc</span><br><span class=\"line\">用户名:landscape</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>环境变量关联数组ENVIRON是awk常量，是子典型数组。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.获取单个环境关联数组</span></span><br><span class=\"line\">/tmp&gt; awk <span class=\"string\">'BEGIN&#123; print ENVIRON[\"LOGNAME\"] &#125;'</span>  <span class=\"comment\">#注意 双引号</span></span><br><span class=\"line\">ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.遍历打印环境数组变量</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  for(k in ENVIRON)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    print k\"=\"ENVIRON[k];</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># LESS=-R</span></span><br><span class=\"line\"><span class=\"comment\"># PAGER=less</span></span><br><span class=\"line\"><span class=\"comment\"># WSLENV=</span></span><br><span class=\"line\"><span class=\"comment\"># AWKPATH=.:/usr/share/awk</span></span><br><span class=\"line\"><span class=\"comment\"># OLDPWD=/mnt/e/githubProject/blog</span></span><br><span class=\"line\"><span class=\"comment\"># AWKLIBPATH=/usr/lib/x86_64-linux-gnu/gawk</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br>SUBSEP   数组下标分隔符用于多维数组的分割<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意此种方法输出无序</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">for(i=1;i&lt;=9;i++)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  for(j=1;j&lt;=9;j++)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    tarr[i,j]=i*j;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">  for(m in tarr)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    split(m,tarr2,SUBSEP);</span></span><br><span class=\"line\"><span class=\"string\">    print tarr2[1],\"*\",tarr2[2],\"=\",tarr[m];</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br>OFMT 设置输出数据格式是保留3位小数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#保留指定位数的小数点后的数字,注意此时输出的时候不能使用\"\"进行连接awk变量否则会失效：</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">    OFMT=\"%.3f\";</span></span><br><span class=\"line\"><span class=\"string\">    f1=20/3;</span></span><br><span class=\"line\"><span class=\"string\">    f2=cos(15%4);</span></span><br><span class=\"line\"><span class=\"string\">    f3=sin(5^2);</span></span><br><span class=\"line\"><span class=\"string\">    print \"f1=\",f1, \"f2=\",f2, \"f3=\",f3;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\">f1= 6.667 f2= -0.990 f3= -0.132</span><br></pre></td></tr></table></figure></p>\n<hr/>\n\n<h4 id=\"0x04-awk运算与判断\"><a href=\"#0x04-awk运算与判断\" class=\"headerlink\" title=\"0x04 awk运算与判断\"></a>0x04 awk运算与判断</h4><p>作为一种程序设计语言所应具有的特点之一，awk支持多种运算，这些运算与C语言提供的基本相同。函数的引用大大的提高了awk的运算功能。作为对条件转移指令的一部分，关系判断是每种程序设计语言都具备的功能，</p>\n<ul>\n<li>awk还提供了一系列内置的运算函数（如<code>log、sqr、cos、sin等</code>）和一些用于对字符串进行操作（运算）的函数（<code>如length、substr等等</code>）</li>\n<li>awk中允许进行多种测试，作为样式匹配，还提供了模式匹配表达式~（匹配）和~!（不匹配）。</li>\n<li>awk也支持用逻辑运算符作为对测试的一种扩充</li>\n</ul>\n<p><br></p>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719105814.png\" alt=\"WeiyiGeek.算数运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.算数运算符</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719110319.png\" alt=\"WeiyiGeek.赋值运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.赋值运算符</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111438.png\" alt=\"WeiyiGeek.逻辑运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.逻辑运算符</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111546.png\" alt=\"WeiyiGeek.正则运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.正则运算符</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719111855.png\" alt=\"WeiyiGeek.关系运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.关系运算符</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719112313.png\" alt=\"WeiyiGeek.其他运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.其他运算符</p>\n            </figure>\n<p>运算符优先级列表：<br><figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719113232.png\" alt=\"WeiyiGeek.运算符优先级\" title=\"\" class=\"\">\n                <p>WeiyiGeek.运算符优先级</p>\n            </figure></p>\n<p>运算符示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#算数运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"a\";print a++,++a;&#125;'</span>  <span class=\"comment\">#字母默认都是为0 </span></span><br><span class=\"line\">0 2</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=1;print a++,++a;&#125;'</span>  </span><br><span class=\"line\">1 3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#赋值运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=1;b=2; print a \"+\" b \" =\",b+=a&#125;'</span>  </span><br><span class=\"line\">1+2 = 3</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=2;b=3; print a \"**\" b \" =\",a**=b&#125;'</span>  <span class=\"comment\">#幂运算的两种形式</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=2;b=3; print a \"^\" b \" =\",a^=b&#125;'</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#逻辑运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=1;b=2; print (a&gt;5 &amp;&amp; b&lt;=2),(a&gt;5 || b&lt;=2);&#125;'</span></span><br><span class=\"line\">0 1                        <span class=\"comment\"># false           true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#正则运算符与逻辑判断</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"100testa\";if(a ~ /^a/) &#123;print \"ok\";&#125;else&#123;print \"fasle\";&#125;&#125;'</span></span><br><span class=\"line\">fasle</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"100testa\";if(a !~ /^100*/)&#123;print \"yes\";&#125;else&#123;print \"no\"&#125;&#125;'</span></span><br><span class=\"line\">no</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关系运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=11;if(a &gt;= 9)&#123;print \"ok\";&#125;else&#123;printf \"no\";&#125;&#125;'</span>  <span class=\"comment\">#ok</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=13;if(a &gt;= 9 &amp;&amp; 12&gt;=a )&#123;print \"ok\";&#125;else&#123;printf \"no\\n\";&#125;&#125;'</span> <span class=\"comment\">#no</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"weiyi\";b=\"geek\"; if(a&gt;b)&#123;print \"a字符串大于b字符串\";&#125;else&#123;printf \"a字符串小于b字符串\"&#125;&#125;'</span></span><br><span class=\"line\">a字符串大于b字符串</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#其他运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"b\";print a==\"b\"?\"ok\":\"err\";&#125;'</span>     <span class=\"comment\">#ok 三元运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"b\";arr[0]=\"b\";arr[1]=\"c\";print (a in arr);&#125;'</span> <span class=\"comment\">#0</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;a=\"b\";arr[0]=\"b\";arr[\"b\"]=\"c\";print (a in arr);&#125;'</span> <span class=\"comment\">#1</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.一个每一行中第一个字段值累加的例子：</span></span><br><span class=\"line\">seq 5 | awk <span class=\"string\">'BEGIN&#123; sum=0;printf \"总和：\" &#125; &#123;printf $1\"+\"; sum+=$1 &#125; END&#123; printf \"等于\"; printf sum &#125;'</span>  <span class=\"comment\">#内部定义的变量可以不加$</span></span><br><span class=\"line\">总和：1+2+3+4+5等于15</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.AWK进行小数计算 ($类似于引用)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"5.5 6.6\"</span> | awk <span class=\"string\">'&#123;print ($2 - $1)&#125;'</span>       <span class=\"comment\">#计算结果：1.1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"5.5 6.6\"</span> | awk <span class=\"string\">'&#123;print ($2 - $1) / 3 &#125;'</span>  <span class=\"comment\">#计算结果：0.366667</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意：</em> </p>\n<ul>\n<li>所有用作算术运算符进行操作，操作数自动转为数值，所有非数值都变为0</li>\n<li><code>&gt;</code> <code>&lt;</code>可以作为字符串比较，也可以用作数值比较，关键看操作数如果是字符串就会转换为字符串比较。</li>\n<li>两个都为数字才转为数值比较,<code>字符串比较按照ASCII码顺序比较</code>。</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x05-awk数组应用\"><a href=\"#0x05-awk数组应用\" class=\"headerlink\" title=\"0x05 awk数组应用\"></a>0x05 awk数组应用</h4><p> 数组是awk的灵魂处理文本中最不能少的就是它的数组处理，因为数组索引（下标）可以是数字和字符串在awk中数组叫做<code>关联数组(associative arrays)</code>。</p>\n<ul>\n<li>awk 中的数组不必提前声明，也不必声明大小。</li>\n<li>数组元素<code>用0或空字符串来初始化</code>，这根据上下文而定。</li>\n</ul>\n<p>关联与索引数组定义：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数字做数组索引（下标）：awk索引下标默认是从1开始的，但您也可以设置从0开始</span></span><br><span class=\"line\">Array[0]=<span class=\"string\">\"GEEK\"</span></span><br><span class=\"line\">Array[1]=<span class=\"string\">\"sun\"</span></span><br><span class=\"line\">Array[2]=<span class=\"string\">\"kai\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串做数组索引（下标）：</span></span><br><span class=\"line\">Array[<span class=\"string\">\"age\"</span>]=15</span><br><span class=\"line\">Array[<span class=\"string\">\"name\"</span>]=<span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用中print Array[1]会打印出sun；</span></span><br><span class=\"line\"><span class=\"comment\">#使用print Array[2]会打印出kai；</span></span><br><span class=\"line\"><span class=\"comment\">#使用print[\"birth\"]会得到1987。</span></span><br></pre></td></tr></table></figure></p>\n<p>数组示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我们可以利用循环来读取索引数组与关联数组，以上面的变量为例</span></span><br><span class=\"line\"><span class=\"comment\">#方式1：&#123; for(i=1;i&lt;=len;i++) &#123;print array[i]&#125;; &#125;  #Len是数组的长度</span></span><br><span class=\"line\"><span class=\"comment\">#方式2：</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">    Array[0]=\"GEEK\";</span></span><br><span class=\"line\"><span class=\"string\">    Array[1]=\"sun\";</span></span><br><span class=\"line\"><span class=\"string\">    Array[2]=\"kai\";</span></span><br><span class=\"line\"><span class=\"string\">    for(item in Array)&#123;</span></span><br><span class=\"line\"><span class=\"string\">      print \"第\",item+1,\"个元素：\"Array[item]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 第 1 个元素：GEEK</span></span><br><span class=\"line\"><span class=\"comment\"># 第 2 个元素：sun</span></span><br><span class=\"line\"><span class=\"comment\"># 第 3 个元素：kai</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关联数组</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  Array[\"name\"]=\"weiyigeek\";</span></span><br><span class=\"line\"><span class=\"string\">  Array[\"age\"]=15;</span></span><br><span class=\"line\"><span class=\"string\">  STR=\"\";</span></span><br><span class=\"line\"><span class=\"string\">  STR1=\"\";</span></span><br><span class=\"line\"><span class=\"string\">  for(item in Array)</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if( item == \"name\" )</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      STR=\"我的姓名是:\"Array[item];</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else if( item == \"age\" )&#123;</span></span><br><span class=\"line\"><span class=\"string\">      STR1=\",我的年龄是:\"Array[item];</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  print STR,STR1</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#我的姓名是:weiyigeek ,我的年龄是:15</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除键值：delete array[key]可以删除，对应数组key的，序列值。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";</span></span><br><span class=\"line\"><span class=\"string\">  delete tB[\"a\"];</span></span><br><span class=\"line\"><span class=\"string\">  for(k in tB)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    print k,tB[k];</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span>                     </span><br><span class=\"line\">b b1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"二维、多维数组使用\"><a href=\"#二维、多维数组使用\" class=\"headerlink\" title=\"二维、多维数组使用\"></a>二维、多维数组使用</h5><p>awk的多维数组在本质上是一维数组，但是awk在存储上并不支持多维数组;<br>awk提供了逻辑上模拟二维数组的访问方式。<br>例如<code>array[2,4]=1</code>这样的访问是允许的。</p>\n<p>awk多维数组新特点：</p>\n<ul>\n<li>类似一维数组的成员测试，多维数组可以使用<code>if ( (i,j) in array)</code>这样的语法，但是下标必须放置在圆括号中。</li>\n<li>类似一维数组的循环访问，多维数组使用<code>for ( item in array )</code>这样的语法遍历数组</li>\n<li>与一维数组不同的是多维数组<code>必须使用split()函数来访问单独的下标分量</code>。</li>\n</ul>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方法1.九九乘法表, 可以通过array[k,k2]引用获得数组内容。</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">for(i=1;i&lt;=9;i++)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  for(j=1;j&lt;=9;j++)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    tarr[i,j]=i*j; printf i\"*\"j\"=\"tarr[i,j]\" \";</span></span><br><span class=\"line\"><span class=\"string\">    if( j == 9)&#123;</span></span><br><span class=\"line\"><span class=\"string\">      print \"\"</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 1*1=1 1*2=2 1*3=3 1*4=4 1*5=5 1*6=6 1*7=7 1*8=8 1*9=9 </span></span><br><span class=\"line\"><span class=\"comment\"># 2*1=2 2*2=4 2*3=6 2*4=8 2*5=10 2*6=12 2*7=14 2*8=16 2*9=18</span></span><br><span class=\"line\"><span class=\"comment\"># 3*1=3 3*2=6 3*3=9 3*4=12 3*5=15 3*6=18 3*7=21 3*8=24 3*9=27</span></span><br><span class=\"line\"><span class=\"comment\"># 4*1=4 4*2=8 4*3=12 4*4=16 4*5=20 4*6=24 4*7=28 4*8=32 4*9=36</span></span><br><span class=\"line\"><span class=\"comment\"># 5*1=5 5*2=10 5*3=15 5*4=20 5*5=25 5*6=30 5*7=35 5*8=40 5*9=45</span></span><br><span class=\"line\"><span class=\"comment\"># 6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36 6*7=42 6*8=48 6*9=54</span></span><br><span class=\"line\"><span class=\"comment\"># 7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49 7*8=56 7*9=63</span></span><br><span class=\"line\"><span class=\"comment\"># 8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64 8*9=72</span></span><br><span class=\"line\"><span class=\"comment\"># 9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>：</p>\n<ul>\n<li>awk数组是关联数组，只要通过数组引用它的key，就会自动创建改序列，所以当Array[“c”]没有定义但是循环时候，发现已经<code>存在该键值并且它的值为空</code></li>\n</ul>\n<p><br></p>\n<h4 id=\"0x06-awk流程控制\"><a href=\"#0x06-awk流程控制\" class=\"headerlink\" title=\"0x06 awk流程控制\"></a>0x06 awk流程控制</h4><p>在linux中awk里面也能进行流程控制，流程控制语句/语法结构与C语言类似，有了这些语句很多shell程序都可以交给awk进行,而且性能非常的快;</p>\n<ul>\n<li>条件分支：if</li>\n<li>循环判断：while, do…while, for</li>\n<li>其他语句：break, Continue, exit<ul>\n<li>break 当 break 语句用于 while 或 for 语句时，导致退出程序循环。</li>\n<li>continue 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。</li>\n<li>next 能能够导致读入下一个输入行，并返回到脚本的顶部。这可以避免对当前输入行执行其他的操作过程。</li>\n<li>exit 语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则或在END中应用exit语句，则终止脚本的执行。</li>\n</ul>\n</li>\n</ul>\n<p><em>条件判断</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.判断优良差</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">test=100;</span></span><br><span class=\"line\"><span class=\"string\">if(test&gt;90)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  print \"very good - 优\";</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  else if(test&gt;60)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    print \"good\";</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  else&#123;</span></span><br><span class=\"line\"><span class=\"string\">    print \"no pass\";</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#very good - 优</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.指定普通用户按照终端显示 (每条命令语句后面可以用;分号结尾)。 </span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; FS=\":\"&#125; &#123; if( \"/bin/zsh\" == $7)&#123; print $0\":\"$7; &#125;else if (\"/usr/sbin/nologin\" == $7)&#123; print $1\":nologin\";&#125; &#125;'</span> /etc/passwd | sort -t <span class=\"string\">\":\"</span> -k </span><br><span class=\"line\">3 -r</span><br><span class=\"line\"><span class=\"comment\"># ubuntu:x:1000:1000:,,,:/home/ubuntu:/bin/zsh:/bin/zsh</span></span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/zsh:/bin/zsh</span></span><br><span class=\"line\"><span class=\"comment\"># www-data:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># uuidd:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># uucp:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># messagebus:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># man:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># mail:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># lp:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># list:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># landscape:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># irc:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># gnats:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># games:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># dnsmasq:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># bin:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># backup:nologin</span></span><br><span class=\"line\"><span class=\"comment\"># _apt:nologin</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>循环语句</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.采用awk的while语句,进行1加到100百;</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">test=100;</span></span><br><span class=\"line\"><span class=\"string\">total=0;</span></span><br><span class=\"line\"><span class=\"string\">while(i&lt;=test)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  total+=i;</span></span><br><span class=\"line\"><span class=\"string\">  i++;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">print \"1+..+100=\",total;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#1+..+100= 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.采用awk的for语句,进行1加到100百;</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  TOTAL=0;</span></span><br><span class=\"line\"><span class=\"string\">  for(i=0;i&lt;=100;i++)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    total+=i</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  print \"1+...+100=\"total</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#1+...+100=5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#for格式2.遍历环境变量数组输出</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  for(k in ENVIRON)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    print k\"=\"ENVIRON[k];</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.采用awk的do..while语句,进行1加到100百;</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  TOTAL=0</span></span><br><span class=\"line\"><span class=\"string\">  num=0</span></span><br><span class=\"line\"><span class=\"string\">  do</span></span><br><span class=\"line\"><span class=\"string\">  &#123;</span></span><br><span class=\"line\"><span class=\"string\">    TOTAL+=num</span></span><br><span class=\"line\"><span class=\"string\">    num++</span></span><br><span class=\"line\"><span class=\"string\">  &#125; while(num&lt;=100)</span></span><br><span class=\"line\"><span class=\"string\">  printf \"1+...+100=\"TOTAL</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#1+...+100=5050</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#判断键值存在以及删除键值,注意awk关联数组的特点;</span></span><br><span class=\"line\"><span class=\"comment\">#错误的判断方法：</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";if(tB[\"c\"]!=\"1\")&#123;print \"no found\";&#125;;for(k in tB)&#123;print k,tB[k];&#125;&#125;'</span> </span><br><span class=\"line\"><span class=\"comment\">#正确判断方法： if(key in array)通过这种方法判断数组中是否包含key键值。</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tB[\"a\"]=\"a1\";tB[\"b\"]=\"b1\";if( \"c\" in tB)&#123;print \"ok\";&#125;;for(k in tB)&#123;print k,tB[k];&#125;&#125;'</span>  </span><br><span class=\"line\">a a1</span><br><span class=\"line\">b b1</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>：</p>\n<ul>\n<li>for…in输出，因为数组是关联数组，默认是无序的;所以通过for…in得到是无序的数组。如果需要得到有序数组，需要通过下标获得。</li>\n</ul>\n<p><br></p>\n<h4 id=\"0x07-awk函数\"><a href=\"#0x07-awk函数\" class=\"headerlink\" title=\"0x07 awk函数\"></a>0x07 awk函数</h4><p>awk内置函数，主要分以下3种类似：算数函数、字符串函数、其它一般函数、时间函数。</p>\n<h5 id=\"算数函数\"><a href=\"#算数函数\" class=\"headerlink\" title=\"算数函数\"></a>算数函数</h5><p>格式    描述</p>\n<ul>\n<li>atan2( y, x )    返回 y/x 的反正切。</li>\n<li>cos( x )    返回 x 的余弦；x 是弧度。</li>\n<li>sin( x )    返回 x 的正弦；x 是弧度。</li>\n<li>exp( x )    返回 x 幂函数。</li>\n<li>log( x )    返回 x 的自然对数。</li>\n<li>sqrt( x )    返回 x 平方根。</li>\n<li>int( x )    返回 x 的截断至整数的值。</li>\n<li>rand( )    返回任意数字 n，其中 0 &lt;= n &lt; 1。</li>\n<li>srand( [expr] )    将 rand 函数的种子值设置为 Expr 参数的值，或如果省略 Expr 参数则使用某天的时间。返回先前的种子值。</li>\n</ul>\n<p>示例说明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 算数函数的使用(注意输出的时候不能有\"\"拼接)</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;OFMT=\"%.3f\";fs=sin(1);fe=exp(10);fl=log(10);fi=int(3.1415);print fs,fe,fl,fi;&#125;'</span></span><br><span class=\"line\">0.841 22026.466 2.303 3</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得随机数srand</span></span><br><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></span><br><span class=\"line\">78</span><br><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></span><br><span class=\"line\">31</span><br><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;'</span></span><br><span class=\"line\">41</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h5><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gsub( Ere, Repl, [ In ] )</td>\n<td>除了正则表达式所有具体值被替代这点，它和 sub 函数完全一样地执行。</td>\n</tr>\n<tr>\n<td>sub( Ere, Repl, [ In ] )</td>\n<td>用 Repl 参数指定的字符串替换 In 参数指定的字符串中的由 Ere 参数指定的扩展正则表达式的第一个具体值。sub 函数返回替换的数量。出现在 Repl 参数指定的字符串中的 &amp;（和符号）由 In 参数指定的与 Ere 参数的指定的扩展正则表达式匹配的字符串替换。如果未指定 In 参数，缺省值是整个记录（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>index( String1, String2 )</td>\n<td>在由 String1 参数指定的字符串（其中有出现 String2 指定的参数）中，返回位置，从 1 开始编号。如果 String2 参数不在 String1 参数中出现，则返回 0（零）。</td>\n</tr>\n<tr>\n<td>length [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>blength [(String)]</td>\n<td>返回 String 参数指定的字符串的长度（以字节为单位）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。</td>\n</tr>\n<tr>\n<td>substr( String, M, [ N ] )</td>\n<td>返回具有 N 参数指定的字符数量子串。子串从 String 参数指定的字符串取得，其字符以 M 参数指定的位置开始。M 参数指定为将 String 参数中的第一个字符作为编号 1。如果未指定 N 参数，则子串的长度将是 M 参数指定的位置到 String 参数的末尾 的长度。</td>\n</tr>\n<tr>\n<td>match( String, Ere )</td>\n<td>在 String 参数指定的字符串（Ere 参数指定的扩展正则表达式出现在其中）中返回位置（字符形式），从 1 开始编号，或如果 Ere 参数不出现，则返回 0（零）。RSTART 特殊变量设置为返回值。RLENGTH 特殊变量设置为匹配的字符串的长度，或如果未找到任何匹配，则设置为 -1（负一）。</td>\n</tr>\n<tr>\n<td>split( String, A, [Ere] )</td>\n<td>将 String 参数指定的参数分割为数组元素 A[1], A[2], . . ., A[n]，并返回 n 变量的值。此分隔可以通过 Ere 参数指定的扩展正则表达式进行，或用当前字段分隔符（FS 特殊变量）来进行（如果没有给出 Ere 参数）。除非上下文指明特定的元素还应具有一个数字值，否则 A 数组中的元素用字符串值来创建。</td>\n</tr>\n<tr>\n<td>tolower( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个大写字符将更改为小写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>toupper( String )</td>\n<td>返回 String 参数指定的字符串，字符串中每个小写字符将更改为大写。大写和小写的映射由当前语言环境的 LC_CTYPE 范畴定义。</td>\n</tr>\n<tr>\n<td>sprintf(Format, Expr, Expr, . . . )</td>\n<td>根据 Format 参数指定的 printf 子例程格式字符串来格式化 Expr 参数指定的表达式并返回最后生成的字符串。</td>\n</tr>\n</tbody>\n</table>\n<p>常用函数使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gsub,sub使用利用正则匹配</span></span><br><span class=\"line\"><span class=\"comment\"># 在 info中查找满足正则表达式，/[0-9]+/用\"!\"替换，并且替换后的值赋值给info未给info值默认是$0</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  info=\"this is a test2010test!\";</span></span><br><span class=\"line\"><span class=\"string\">  gsub(/[0-9]+/,\"!\",info);print info</span></span><br><span class=\"line\"><span class=\"string\">  sub(/test!+/,\"[replace]\",info);print info</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\">this is a <span class=\"built_in\">test</span>!<span class=\"built_in\">test</span>!</span><br><span class=\"line\">this is a [replace]<span class=\"built_in\">test</span>!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找字符串（index使用）,并且采用三元运算符</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";&#125;'</span></span><br><span class=\"line\">ok</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#正则表达式匹配查找(match使用）</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";&#125;'</span></span><br><span class=\"line\">ok</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 截取字符串(substr使用）</span></span><br><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'BEGIN&#123;info=\"this is a test2010test!\";print substr(info,4,10);&#125;'</span></span><br><span class=\"line\">s is a tes</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"WeiyiGeek LIVE Computer\"</span> | awk <span class=\"string\">'&#123;print  substr($0,0,9)&#125;'</span></span><br><span class=\"line\">WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><strong>split函数</strong><br>描述：把变量out转化成数组mon然后打印数组mon的第二个元素，并且返回数组长度工作中非常有用;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#split()函数分割成的数组是从1开始的</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; \"date\" | getline out; split(out,mon); print mon[2] &#125;'</span></span><br><span class=\"line\">Jul</span><br><span class=\"line\"><span class=\"comment\"># Fri Jul 19 12:25:12 CST 2019 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定分隔符进行分割</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; \"id\" | getline out; split(out,mon,\",\"); print mon[3] &#125;'</span></span><br><span class=\"line\">20(dialout)</span><br><span class=\"line\"><span class=\"comment\"># groups=1000(ubuntu),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(lxd),114(netdev)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出数组与下标（有序for() 和无序 in）</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;info=\"it is a test\";tlen=split(info,tA,\" \");for(k=1;k&lt;=tlen;k++)&#123;print k,tA[k];&#125;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 1 it</span></span><br><span class=\"line\"><span class=\"comment\"># 2 is</span></span><br><span class=\"line\"><span class=\"comment\"># 3 a</span></span><br><span class=\"line\"><span class=\"comment\"># 4 test</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;info=\"it is a test\";split(info,tA,\" \");for(k in tA)&#123;print k,tA[k];&#125;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 4 test</span></span><br><span class=\"line\"><span class=\"comment\"># 1 it</span></span><br><span class=\"line\"><span class=\"comment\"># 2 is</span></span><br><span class=\"line\"><span class=\"comment\"># 3 a</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>length函数</strong><br>描述：利用length函数可以得到数组的元素的个数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># length返回字符串以及数组长度，split进行分割字符串为数组，也会返回分割得到数组长度。</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  info=\"it is a test\";</span></span><br><span class=\"line\"><span class=\"string\">  lens=split(info,tA,\" \");</span></span><br><span class=\"line\"><span class=\"string\">  print \"数组长度：\"length(tA),lens;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#tA 为数组名称 </span></span><br><span class=\"line\"><span class=\"comment\">#数组长度：4 4</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>sprintf函数</strong><br>sprintf主要用于返回格式化后的字符串;其中格式化字符串包括两部分内容：</p>\n<ul>\n<li>一部分是正常字符，这些字符将按原样输出; </li>\n<li>另一部分是格式化规定字符，以”%”开始，后跟一个或几个规定字符,用来确定输出内容格式。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719164104.png\" alt=\"WeiyiGeek.sprintf函数\" title=\"\" class=\"\">\n                <p>WeiyiGeek.sprintf函数</p>\n            </figure>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#printf与sprintf的不同</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; printf(\"%.2f,%.2u,%.2g,%X,%on\",n1,n2,n3,n1,n1);&#125;'</span></span><br><span class=\"line\">124.11,18446744073709551615,1.2,7C,174</span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;n1=124.113;n2=-1.224;n3=1.2345; S1=sprintf(\"%.2f,%.2u,%.2g,%X,%on\",n1,n2,n3,n1,n1);print S1&#125;'</span></span><br><span class=\"line\">124.11,18446744073709551615,1.2,7C,174n</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h5 id=\"一般函数\"><a href=\"#一般函数\" class=\"headerlink\" title=\"一般函数\"></a>一般函数</h5><table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close( Expression )</td>\n<td>用同一个带字符串值的 Expression 参数来关闭由 print 或 printf 语句打开的或调用 getline 函数打开的文件或管道。如果文件或管道成功关闭，则返回 0；其它情况下返回非零值。如果打算写一个文件，并稍后在同一个程序中读取文件，则 close 语句是必需的。</td>\n</tr>\n<tr>\n<td>system(command )</td>\n<td>执行 Command 参数指定的命令，并返回退出状态。等同于 system 子例程。</td>\n</tr>\n<tr>\n<td>Expression</td>\n<td>getline [ Variable ]</td>\n<td>从来自 Expression 参数指定的命令的输出中通过管道传送的流中读取一个输入记录，并将该记录的值指定给 Variable 参数指定的变量。如果当前未打开将 Expression 参数的值作为其命令名称的流，则创建流。创建的流等同于调用 popen 子例程，此时 Command 参数取 Expression 参数的值且 Mode 参数设置为一个是 r 的值。只要流保留打开且 Expression 参数求得同一个字符串，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ] &lt; Expression</td>\n<td>从 Expression 参数指定的文件读取输入的下一个记录，并将 Variable 参数指定的变量设置为该记录的值。只要流保留打开且 Expression 参数对同一个字符串求值，则对 getline 函数的每次后续调用读取另一个记录。如果未指定 Variable 参数，则 $0 记录变量和 NF 特殊变量设置为从流读取的记录。</td>\n</tr>\n<tr>\n<td>getline [ Variable ]</td>\n<td>将 Variable 参数指定的变量设置为从当前输入文件读取的下一个输入记录。如果未指定 Variable 参数，则 $0 记录变量设置为该记录的值，还将设置 NF、NR 和 FNR 特殊变量。</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><strong>asort函数</strong><br>描述：asort对数组进行排序，并且返回数组长度。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  info=\"it is a test\";</span></span><br><span class=\"line\"><span class=\"string\">  split(info,tA,\" \");</span></span><br><span class=\"line\"><span class=\"string\">  print asort(tA);</span></span><br><span class=\"line\"><span class=\"string\">  &#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#4</span></span><br></pre></td></tr></table></figure><br><br></p>\n<p><strong>getline函数</strong><br>用法：输出重定向需用到getline函数。getline从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF/NR和FNR等内建变量赋值。</p>\n<p>getline语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk getline</span><br><span class=\"line\">getline var <span class=\"comment\">#变量var包含了特定行的内容。</span></span><br></pre></td></tr></table></figure></p>\n<p>返回值：</p>\n<ul>\n<li>如果得到一条记录getline函数返回1，</li>\n<li>如果到达文件的末尾就返回0，</li>\n<li>如果出现错误，例如打开文件失败，就返回-1。</li>\n</ul>\n<p>用法说明： </p>\n<ul>\n<li>当其左右 无 重定向符|或&lt;时：getline作用于当前文件，读入当前文件的第一行给其后跟的变量var或$0（无变量），应该注意到，由于awk在处理getline之前已经读入了一行，所以getline得到的返回结果是隔行的。<br>-当其左右 有 重定向符|或&lt;时：getline则作用于定向输入文件，由于该文件是刚打开，并没有被awk读入一行，只是getline读入，那么getline返回的是该文件的第一行而不是隔行。 </li>\n</ul>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.执行shell的date命令，并通过管道输出给getline，然后getline从管道中读取并将输入赋值给out： </span></span><br><span class=\"line\">/tmp&gt; awk <span class=\"string\">'BEGIN&#123; \"date\" | getline out; print out &#125;'</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">Fri Jul 19 12:22:37 CST 2019</span><br><span class=\"line\">/tmp&gt; awk <span class=\"string\">'BEGIN&#123; \"id\" | getline out; print out &#125;'</span> <span class=\"built_in\">test</span></span><br><span class=\"line\">uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(lxd),114(netdev)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.命令ls的输出传递给geline作为输入，循环使getline从ls的输出中读取一行，并把它打印到屏幕。</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; while( \"ls\" | getline) print &#125;'</span> <span class=\"comment\">#没有输入文件，因为BEGIN块在打开输入文件前执行，所以可以忽略输入文件。</span></span><br><span class=\"line\"><span class=\"comment\"># npm-252-6a2b6463</span></span><br><span class=\"line\"><span class=\"comment\"># test.txt</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; while( \"cat /etc/passwd\" | getline) print &#125;'</span> | head -5</span><br><span class=\"line\"><span class=\"comment\"># root:x:0:0:root:/root:/bin/zsh</span></span><br><span class=\"line\"><span class=\"comment\"># daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># bin:x:2:2:bin:/bin:/usr/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># sys:x:3:3:sys:/dev:/usr/sbin/nologin</span></span><br><span class=\"line\"><span class=\"comment\"># sync:x:4:65534:sync:/bin:/bin/sync</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.接受来之stdin的输入(值得学习)</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;printf \"Enter your name:\";getline name;print \"My name is \"name;&#125;'</span></span><br><span class=\"line\">Enter your name:WeiyiGeek</span><br><span class=\"line\">My name is WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>close函数</strong><br>描述:awk中允许在程序中关闭一个输入或输出文件，方法是使用awk的close语句。<br>filename可以是getline打开的文件:<code>close(&quot;filename&quot;)</code></p>\n<ul>\n<li>也可以是stdin，包含文件名的变量或者getline使用的确切命令。</li>\n<li>或一个输出文件可以是stdout，包含文件名的变量或使用管道的确切命令。</li>\n</ul>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$awk</span> <span class=\"string\">'BEGIN&#123;while(\"cat /etc/passwd\"|getline)&#123;print $0;&#125;;close(\"/etc/passwd\");&#125;'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逐行读取外部文件(getline使用方法）</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;while(getline &lt; \"/etc/passwd\")&#123;print $0;&#125;;close(\"/etc/passwd\");&#125;'</span></span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br><span class=\"line\">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class=\"line\">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>system函数</strong><br>描述：主要运用于调用外部应用程序，非常有用值得借鉴学习;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;b=system(\"ls -al\");print b;&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># total 42092</span></span><br><span class=\"line\"><span class=\"comment\"># drwxr-xr-x 14 chengmo chengmo     4096 09-30 17:47 .</span></span><br><span class=\"line\"><span class=\"comment\"># drwxr-xr-x 95 root   root       4096 10-08 14:01 ..</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2:补充案例修改 (去除![] 和 ()),变量处有$符号   </span></span><br><span class=\"line\">git ls-files | grep <span class=\"string\">\".md\"</span> | xargs sed -i <span class=\"string\">\"s#wxx.com#xxx.cn#g\"</span></span><br><span class=\"line\">git ls-files | grep <span class=\"string\">\".md\"</span> | xargs grep <span class=\"string\">\"xxx.myqcloud.com\"</span> | awk -F <span class=\"string\">\"[:/]\"</span>  <span class=\"string\">'&#123;if($NF &gt;= 2019072515)&#123;print $0&#125;&#125;'</span> &gt; text.txt</span><br><span class=\"line\">awk -F <span class=\"string\">\":\"</span> <span class=\"string\">'&#123; $cmd=\"sed s#\"$2\"#1/\"$2\"#g \" $1; print $cmd;&#125;'</span> text.txt</span><br><span class=\"line\">awk -F <span class=\"string\">\":\"</span> <span class=\"string\">'&#123; $cmd=\"sed -i s#\"$2\"#1/\"$2\"#g \" $1; system($cmd); &#125;'</span> text.txt</span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"时间函数\"><a href=\"#时间函数\" class=\"headerlink\" title=\"时间函数\"></a>时间函数</h5><ul>\n<li>mktime( YYYY MM dd HH MM ss[ DST])    生成时间格式</li>\n<li>strftime([format [, timestamp]])    格式化时间输出，将时间戳转为时间字符串具体格式，见下表.</li>\n<li>systime()    得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数</li>\n</ul>\n<p>strftime日期和时间格式说明符<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式\t描述</span><br><span class=\"line\">%a\t星期几的缩写(Sun)</span><br><span class=\"line\">%A\t星期几的完整写法(Sunday)</span><br><span class=\"line\">%b\t月名的缩写(Oct)</span><br><span class=\"line\">%B\t月名的完整写法(October)</span><br><span class=\"line\">%c\t本地日期和时间</span><br><span class=\"line\">%d\t十进制日期</span><br><span class=\"line\">%D\t日期 08/20/99</span><br><span class=\"line\">%e\t日期，如果只有一位会补上一个空格</span><br><span class=\"line\">%H\t用十进制表示24小时格式的小时</span><br><span class=\"line\">%I\t用十进制表示12小时格式的小时</span><br><span class=\"line\">%j\t从1月1日起一年中的第几天</span><br><span class=\"line\">%m\t十进制表示的月份</span><br><span class=\"line\">%M\t十进制表示的分钟</span><br><span class=\"line\">%p\t12小时表示法(AM/PM)</span><br><span class=\"line\">%S\t十进制表示的秒</span><br><span class=\"line\">%U\t十进制表示的一年中的第几个星期(星期天作为一个星期的开始)</span><br><span class=\"line\">%w\t十进制表示的星期几(星期天是0)</span><br><span class=\"line\">%W\t十进制表示的一年中的第几个星期(星期一作为一个星期的开始)</span><br><span class=\"line\">%x\t重新设置本地日期(08/20/99)</span><br><span class=\"line\">%X\t重新设置本地时间(12：00：00)</span><br><span class=\"line\">%y\t两位数字表示的年(99)</span><br><span class=\"line\">%Y\t当前月份</span><br><span class=\"line\">%Z\t时区(PDT)</span><br><span class=\"line\">%%\t百分号(%)</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#建指定时间(mktime使用）</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;</span></span><br><span class=\"line\"><span class=\"string\">  tstamp=mktime(\"2001 01 01 12 12 12\");</span></span><br><span class=\"line\"><span class=\"string\">  print strftime(\"%c\",tstamp);</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\">2001年01月01日 星期一 12时12分12秒</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回两个时间只差利用mktime与systime</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=mktime(\"2001 02 01 0 0 0\");print tstamp2-tstamp1;&#125;'</span></span><br><span class=\"line\">2634468</span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tstamp1=mktime(\"2001 01 01 12 12 12\");tstamp2=systime();print tstamp2-tstamp1;&#125;'</span> </span><br><span class=\"line\">308201392</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#strftime使用</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123; print strftime(\"%c\",systime()) &#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># Fri 19 Jul 2019 05:06:09 PM CST</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tstamp=systime();print strftime(\"%c\",tstamp);&#125;'</span></span><br><span class=\"line\">awk <span class=\"string\">'BEGIN&#123;tstamp=systime();print strftime(\"%j\",tstamp);&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ls | awk <span class=\"string\">'&#123; len=split($1,images,\".\");</span></span><br><span class=\"line\"><span class=\"string\">filename=images[1];</span></span><br><span class=\"line\"><span class=\"string\">suffix=images[len];</span></span><br><span class=\"line\"><span class=\"string\">tstamp=systime();</span></span><br><span class=\"line\"><span class=\"string\">datetime=strftime(\"%Y%m%d%H%M%S\",tstamp)\".\"suffix;</span></span><br><span class=\"line\"><span class=\"string\">cmd=\"echo \"$1\" \"datetime\"&gt;&gt; 1.txt &amp; mv \"$1\" \"datetime\" &amp; sleep 1\";</span></span><br><span class=\"line\"><span class=\"string\">system(cmd);</span></span><br><span class=\"line\"><span class=\"string\">print cmd;</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">old=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;line&#125;</span>|cut -f1 -d <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">new=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;line&#125;</span>|cut -f2 -d <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">sed -i <span class=\"string\">\"s#index_files/<span class=\"variable\">$&#123;old&#125;</span>#https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/wiz1/<span class=\"variable\">$&#123;new&#125;</span>#g\"</span> 常见编程语言对字符编码解码一览表.md</span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; 1.txt</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://weiyigeek-1251733653.cos.ap-chengdu.myqcloud.com/2019/20190719170801.png\" alt=\"WeiyiGeek.strftime示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.strftime示例</p>\n            </figure></p>\n<hr/>\n\n<h4 id=\"0x08-awk高级利用\"><a href=\"#0x08-awk高级利用\" class=\"headerlink\" title=\"0x08 awk高级利用\"></a>0x08 awk高级利用</h4><h5 id=\"实践扩展\"><a href=\"#实践扩展\" class=\"headerlink\" title=\"实践扩展\"></a>实践扩展</h5><p><strong>1.读取下一条记录-{next}</strong><br>awk中在循环逐行匹配里如果遇到next语句就会直接跳入到下一行，一般用于多行合并;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.当记录行号除以2余1，就跳过当前行下面的print NR,$0也不会执行</span></span><br><span class=\"line\"><span class=\"comment\">#下一行判断NR%2值,这个时候记录行号是：2 ，就会执行下面语句块：'print NR,$0'.</span></span><br><span class=\"line\"><span class=\"variable\">$blog</span>&gt; seq 5 | awk <span class=\"string\">'NR%2==1&#123;next&#125;&#123;print \"第\"NR\"行\",$0;&#125;'</span></span><br><span class=\"line\">第2行 2</span><br><span class=\"line\">第4行 4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> test.txt</span><br><span class=\"line\">web01[192.168.2.100]</span><br><span class=\"line\">httpd            ok</span><br><span class=\"line\">tomcat               ok</span><br><span class=\"line\">sendmail               ok</span><br><span class=\"line\">web02[192.168.2.101]</span><br><span class=\"line\">httpd            ok</span><br><span class=\"line\">postfix               ok</span><br><span class=\"line\">web03[192.168.2.102]</span><br><span class=\"line\">mysqld            ok</span><br><span class=\"line\">httpd               ok</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># next是关键注意单算引号得使用,如果存在web字符串的行则将值赋给T，然后进入下一次循环</span></span><br><span class=\"line\">awk <span class=\"string\">'/^web/&#123;T=$0;next;&#125;&#123;print T\":\"$0;&#125;'</span> test.txt  </span><br><span class=\"line\">web01[192.168.2.100]:httpd            ok</span><br><span class=\"line\">web01[192.168.2.100]:tomcat           ok</span><br><span class=\"line\">web01[192.168.2.100]:sendmail         ok</span><br><span class=\"line\">web02[192.168.2.101]:httpd            ok</span><br><span class=\"line\">web02[192.168.2.101]:postfix          ok</span><br><span class=\"line\">web03[192.168.2.102]:mysqld           ok</span><br><span class=\"line\">web03[192.168.2.102]:httpd            ok</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.记录输出</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.输出内容到一个文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> | awk <span class=\"string\">'&#123;print(\"Hello World!\\n\") &gt;&gt; \"date\"&#125;'</span>;cat date</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>3.利用awk进行xml文件解析</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">  xsi:schemaLocation=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\">  &lt;groupId&gt;top.weiyigeek&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;Platform&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用示例</span></span><br><span class=\"line\">awk <span class=\"string\">'/&lt;\\/*name\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\/*name\\/*&gt;/,\"\");print $0&#125;'</span> pom.xml | head -n 1</span><br><span class=\"line\">awk <span class=\"string\">'/&lt;\\/*artifactId\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\/*artifactId\\/*&gt;/,\"\");print $0&#125;'</span> pom.xml | head -n 1</span><br><span class=\"line\">awk <span class=\"string\">'/&lt;\\/*version\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\/*version\\/*&gt;/,\"\");print $0&#125;'</span> pom.xml | head -n 1</span><br><span class=\"line\">awk <span class=\"string\">'/&lt;\\/*packaging\\/*&gt;/&#123;gsub(/[[:space:]]*&lt;\\/*packaging\\/*&gt;/,\"\");print $0&#125;'</span> pom.xml | head -n 1</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>3.shell去除字符串中最后一个字符</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.awk</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"www.weiyigeek.top-\"</span> | awk <span class=\"string\">'&#123;sub(/.$/,\"\")&#125;1'</span></span><br><span class=\"line\">www.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.sed</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"www.weiyigeek.top-\"</span> | sed <span class=\"string\">'s/.$//'</span></span><br><span class=\"line\">www.weiyigeek.top</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"awk脚本\"><a href=\"#awk脚本\" class=\"headerlink\" title=\"awk脚本\"></a>awk脚本</h5><p>采用awk -f选项来指定脚本文件，注意蛇棒是#/bin/awk</p>\n<p>示例1：采用脚本文件输出数组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; awk.script &lt;&lt;END</span><br><span class=\"line\">BEGIN &#123;</span><br><span class=\"line\">  array[1]=<span class=\"string\">\"Weiyi\"</span>;</span><br><span class=\"line\">  array[2]=<span class=\"string\">\"geek\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(item <span class=\"keyword\">in</span> array)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"Key:\"</span>item,<span class=\"string\">\"Value:\"</span>array[item]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">\"arr = \"</span>arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令及其效果</span></span><br><span class=\"line\">$ awk -f awk.script -v arr=<span class=\"string\">\"add\"</span>  <span class=\"comment\">#注意后面设置的变量</span></span><br><span class=\"line\">Key:1 Value:Weiyi</span><br><span class=\"line\">Key:2 Value:geek</span><br><span class=\"line\">arr = add  <span class=\"comment\">#关键点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查是否设置除 root 之外 UID 为 0 的用户, 其条件值得学习。</span></span><br><span class=\"line\">cat /etc/passwd | awk -F: <span class=\"string\">'($3 == 0) &#123; print $1 &#125;'</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"shell","path":"api/tags/shell.json"}]}