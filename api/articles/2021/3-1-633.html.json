{"title":"3.Nginx模块学习使用实践指南","slug":"系统运维/Application/Web/WebApp/Nginx/3.Nginx模块学习使用实践指南","date":"2021-03-01T02:35:30.000Z","updated":"2023-01-31T02:29:10.469Z","url":"2021/3-1-633.html","path":"api/articles/2021/3-1-633.html.json","covers":["https://img.weiyigeek.top/2020/1/20200329123358.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-Nginx-常用模块使用实践\"><a href=\"#0x01-Nginx-常用模块使用实践\" class=\"headerlink\" title=\"0x01 Nginx 常用模块使用实践\"></a>0x01 Nginx 常用模块使用实践</h2><p>官方模块使用手册:<code>http://nginx.org/en/docs/</code></p>\n<h3 id=\"ngx-http-core-module-核心模块\"><a href=\"#ngx-http-core-module-核心模块\" class=\"headerlink\" title=\"ngx_http_core_module - 核心模块\"></a>ngx_http_core_module - 核心模块</h3><h4 id=\"try-files-提高解析效率\"><a href=\"#try-files-提高解析效率\" class=\"headerlink\" title=\"try_files - 提高解析效率\"></a>try_files - 提高解析效率</h4><p>描述: try_files是nginx中http_core核心模块所带的指令，主要是能替代一些rewrite的指令，提高解析效率。</p>\n<ul>\n<li>关键点1：按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理</li>\n<li>关键点2：查找路径是按照给定的root或alias为根路径来查找的</li>\n<li>关键点3：如果给出的file都没有匹配到，则重新请求最后一个参数给定的uri，就是新的location匹配</li>\n<li>关键点4：如果是格式2，如果最后一个参数是 = 404 ，若给出的file都没有匹配到，则最后返回404的响应码<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \ttry_files file ... uri;</span><br><span class=\"line\">try_files file ... =code;</span><br><span class=\"line\">Default: \t—</span><br><span class=\"line\">Context: \tserver, location</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>示例演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.例如,访问 http://127.0.0.1/images/test.gif 如果 /app/html/images/test.gif 不存在该文件则会重写请求到 http://127.0.0.1/images/weiyigeek.gif</span></span><br><span class=\"line\">location ^~ /images/ &#123;</span><br><span class=\"line\">  root /app/html/images/;</span><br><span class=\"line\">  try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /images/weiyigeek.gif; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.其他用法,若未找到给定顺序的文件，则将会交给location @weiyigeek 处理（相当于匹配到了@weiyigeek 来匹配）</span></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">  try_files /weiyigeek/index.html <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/index.html <span class=\"variable\">$uri</span>.html @weiyigeek;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location @weiyigeek &#123;</span><br><span class=\"line\">  proxy_pass http://www.weiyigeek.top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"server-server-tokens-隐藏Nginx版本号\"><a href=\"#server-server-tokens-隐藏Nginx版本号\" class=\"headerlink\" title=\"server.server_tokens -隐藏Nginx版本号\"></a>server.server_tokens -隐藏Nginx版本号</h4><p>描述: 为了保证Nginx的安全我们有必要隐藏Nginx版本号以增加攻击难度与针对性。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 隐藏版本号</span></span><br><span class=\"line\">server_tokens on;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"server-error-page-错误页面优化\"><a href=\"#server-error-page-错误页面优化\" class=\"headerlink\" title=\"server.error_page - 错误页面优化\"></a>server.error_page - 错误页面优化</h4><p>描述: 我们可以通过<code>error_page</code>进行自定义配置指定服务器返回的错误代码对应的页面。<br>Context 范围: http、server、location<br>Tips: 如果当前配置级别没有 error_page 指令时将从上层配置继承。</p>\n<p><strong>使用示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.错误代码响应页面跳转</span></span><br><span class=\"line\">error_page 404 https://www.weiyigeek.top/error.html;</span><br><span class=\"line\">error_page 400 403 404 405 408 410 412 413 414 415 http://www.weiyigeek.top/error-40x.jpg;</span><br><span class=\"line\">error_page 500 501 502 503 504 http://www.weiyigeek.top/error-50x.jpg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.错误代码重定向路径设置</span></span><br><span class=\"line\">error_page 403  /warn/403.html;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.内部跳转时无需改变URI可以将错误处理转到一个命名路径</span></span><br><span class=\"line\">error_page 404 @fallback;</span><br><span class=\"line\">location @another_url &#123;</span><br><span class=\"line\">  root /usr/share/nginx/html/warn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location @fallback &#123;</span><br><span class=\"line\">  proxy_pass http://backendweiyigeek;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">upstream backendweiyigeek &#123;</span><br><span class=\"line\">  server 192.168.12.1:8080;</span><br><span class=\"line\">  server 192.168.12.2:8080;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.使用\"=response\"语法改变响应状态码.</span></span><br><span class=\"line\">error_page 404 =200 /empty.png;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"ngx-http-log-module-日志模块\"><a href=\"#ngx-http-log-module-日志模块\" class=\"headerlink\" title=\"ngx_http_log_module - 日志模块\"></a>ngx_http_log_module - 日志模块</h3><p>nginx配置文件中记录<code>访问日志和错误日志</code>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问日志方式</span></span><br><span class=\"line\">Syntax:   access_log path [format [buffer=size] [gzip[=level]] [flush=time] [<span class=\"keyword\">if</span>=condition]];</span><br><span class=\"line\">Default: \taccess_log logs/access.log combined;</span><br><span class=\"line\">Context: \thttp, server, location, <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> location, limit_except</span><br><span class=\"line\"><span class=\"comment\"># 额外语法:</span></span><br><span class=\"line\">  access_log syslog:server=address[,parameter=value] [format [<span class=\"keyword\">if</span>=condition]];</span><br><span class=\"line\"><span class=\"comment\"># 参数说明:</span></span><br><span class=\"line\">  * path   指定日志的存放位置。</span><br><span class=\"line\">  * format 指定日志的格式。默认使用预定义的combined。</span><br><span class=\"line\">  * buffer 用来指定日志写入时的缓存大小。默认是64k。</span><br><span class=\"line\">  * gzip   日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。</span><br><span class=\"line\">  * flush  设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误日志方式</span></span><br><span class=\"line\">Syntax:   error_log path level;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志格式</span></span><br><span class=\"line\">Syntax:\tlog_format name [escape=default|json|none] string ...;</span><br><span class=\"line\">Default:\t</span><br><span class=\"line\">log_format combined <span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">Context:\thttp</span><br></pre></td></tr></table></figure></p>\n<p><strong>错误日志 记录等级 <code>[level]</code> 说明</strong></p>\n<ul>\n<li>debug 信息非常详细</li>\n<li>info  信息详细</li>\n<li>notice (默认)</li>\n<li>warn   警告</li>\n<li>error  错误</li>\n<li>crit   比较严重</li>\n<li>alert  很严重</li>\n<li>emerg  恐慌级别</li>\n</ul>\n<p>温馨提示: 上述等级从上至下日志详细程度逐级递减。</p>\n<p><br></p>\n<p><strong>日志 Format 格式变量:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数                      说明                                         示例</span><br><span class=\"line\"><span class=\"variable\">$remote_addr</span>             客户端地址                                    113.145.15.16</span><br><span class=\"line\"><span class=\"variable\">$remote_user</span>             客户端用户名称                                 --</span><br><span class=\"line\"><span class=\"variable\">$time_local</span>              访问时间和时区                                18/Jul/2012:17:00:01 +0800</span><br><span class=\"line\"><span class=\"variable\">$request</span>                 请求的URI和HTTP协议                           <span class=\"string\">\"GET /weiyigeek.html HTTP/1.1\"</span></span><br><span class=\"line\"><span class=\"variable\">$http_host</span>               请求地址，即浏览器中你输入的地址（IP或域名）     weiyigeek.top 192.168.100.100</span><br><span class=\"line\"><span class=\"variable\">$status</span>                  HTTP请求状态                                  200</span><br><span class=\"line\"><span class=\"variable\">$upstream_status</span>         upstream状态                                  200</span><br><span class=\"line\"><span class=\"variable\">$body_bytes_sent</span>         发送给客户端文件内容大小                        1547</span><br><span class=\"line\"><span class=\"variable\">$http_referer</span>            url跳转来源                                   https://www.baidu.com/</span><br><span class=\"line\"><span class=\"variable\">$http_user_agent</span>         用户终端浏览器等信息                           Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</span><br><span class=\"line\"><span class=\"variable\">$ssl_protocol</span>            SSL协议版本                                   TLSv1</span><br><span class=\"line\"><span class=\"variable\">$ssl_cipher</span>              交换数据中的算法                               RC4-SHA</span><br><span class=\"line\"><span class=\"variable\">$upstream_addr</span>           后台upstream的地址，即真正提供服务的主机地址     10.10.10.100:80</span><br><span class=\"line\"><span class=\"variable\">$request_time</span>            整个请求的总时间                                0.205 （代表 Nginx 从收到客户端请求、到发送完响应的整个时间）</span><br><span class=\"line\"><span class=\"variable\">$upstream_response_time</span>  请求过程中，upstream响应时间                    0.002 （在 Nginx 接受完 client 的请求后，再和 upstream server 请求的过程的时间）</span><br></pre></td></tr></table></figure></p>\n<p><strong>日志 Format 的几种格式:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 常规模式</span></span><br><span class=\"line\">log_format main <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩格式        </span></span><br><span class=\"line\">log_format custom <span class=\"string\">'$remote_addr - $remote_user - $http_x_forwarded_for [$time_local] \"$request\" '</span></span><br><span class=\"line\">                  <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                  <span class=\"string\">'\"$http_user_agent\" rt=$request_time urt=$upstream_response_time'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">log_format combined <span class=\"string\">'$remote_addr - $remote_user [$time_local]'</span> </span><br><span class=\"line\">                    <span class=\"string\">'\"$request\" $status $body_bytes_sent '</span></span><br><span class=\"line\">                    <span class=\"string\">'\"$http_referer\" \"$http_user_agent\" rt=$request_time urt=$upstream_response_time'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># upstream 格式</span></span><br><span class=\"line\">log_format upstream_time <span class=\"string\">'$remote_addr - $remote_user [$time_local] '</span></span><br><span class=\"line\">                         <span class=\"string\">'\"$request\" $status $body_bytes_sent '</span></span><br><span class=\"line\">                         <span class=\"string\">'\"$http_referer\" \"$http_user_agent\"'</span></span><br><span class=\"line\">                        <span class=\"string\">'rt=$request_time uct=\"$upstream_connect_time\" uht=\"$upstream_header_time\" urt=\"$upstream_response_time\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># json 字符串模式</span></span><br><span class=\"line\">log_format logstash_json <span class=\"string\">'&#123;\"@timestamp\":\"$time_iso8601\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"host\": \"$server_addr\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"client\": \"$remote_addr\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"size\": $body_bytes_sent,'</span></span><br><span class=\"line\">       <span class=\"string\">'\"responsetime\": $request_time,'</span></span><br><span class=\"line\">       <span class=\"string\">'\"domain\": \"$host\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"url\":\"$request_uri\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"referer\": \"$http_referer\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"agent\": \"$http_user_agent\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"status\":\"$status\",'</span></span><br><span class=\"line\">       <span class=\"string\">'\"x_forwarded_for\":\"$http_x_forwarded_for\"&#125;'</span>;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>基础示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.关闭 access_log与error_log 即不记录访问日志与错误日志。</span></span><br><span class=\"line\">access_log off;</span><br><span class=\"line\">error_log /dev/null;  <span class=\"comment\"># 注意此处并不是off而是/dev/null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.debug 调试模式开启，启用时将在error log中记录notice级别的重写日志。</span></span><br><span class=\"line\">error_log  /var/logs/nginx/example.com.error.log; </span><br><span class=\"line\">rewrite_log on;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># 3.指定访问日志进行gzip当缓存到达128k或者1分钟后写入到日志文件中与错误日志记录等级。</span></span><br><span class=\"line\">access_log /var/<span class=\"built_in\">log</span>/nginx/access.log main buffer=128k gzip flush=1m;</span><br><span class=\"line\">error_log /var/<span class=\"built_in\">log</span>/nginx/error.log warn buffer=256k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.分析 Web Server 的性能配置,gizp compression需要zlib库的支持</span></span><br><span class=\"line\">access_log /path/to/access.log.gz combined buffer=32k gzip flush=5m;   </span><br><span class=\"line\"><span class=\"comment\"># 其压缩格式需要通过`zcat`命令查看</span></span><br><span class=\"line\">$ zcat /path/to/access.log.gz</span><br><span class=\"line\">187.217.160.191 - - [29/Mar/2020:14:35:49 +0800]<span class=\"string\">\"GET / HTTP/1.1\"</span> 200 2046 <span class=\"string\">\"-\"</span> <span class=\"string\">\"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0\"</span> 0.000 0.001</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.忽略favicon.ico日志减少无需信息IO</span></span><br><span class=\"line\">location = /favicon.ico &#123;</span><br><span class=\"line\">  log_not_found     off;</span><br><span class=\"line\">  access_log     off;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.按天生成Nginx日志配置,首先修改 nginx.conf 文件, 利用map设置一个时间logdate变量为y-m-d格式。</span></span><br><span class=\"line\">map <span class=\"variable\">$time_iso8601</span> <span class=\"variable\">$logdate</span> &#123;</span><br><span class=\"line\">  default <span class=\"string\">'nodate'</span>;</span><br><span class=\"line\">  <span class=\"string\">'~^(?&lt;ymd&gt;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;)'</span> <span class=\"variable\">$ymd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 补充方式.如下方式未进行复现(如有需求请自己测试)</span></span><br><span class=\"line\"><span class=\"comment\"># server &#123;</span></span><br><span class=\"line\">  ....</span><br><span class=\"line\">  <span class=\"comment\"># if ( $time_iso8601  ~ \"(\\d&#123;4&#125;-\\d&#123;2&#125;-\\d[2&#125;)\") &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">#   set $logdate $1</span></span><br><span class=\"line\">  <span class=\"comment\"># &#125;</span></span><br><span class=\"line\">  ....</span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">access_log /var/<span class=\"built_in\">log</span>/nginx/access-<span class=\"variable\">$&#123;logdate&#125;</span>.<span class=\"built_in\">log</span> main;  <span class=\"comment\"># 注意如果设置缓存写入日志，则不支持路径中存在变量。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 nginx 的用户权限赋予其可以修改日志（不建议使用root）, 然后重启nginx。</span></span><br><span class=\"line\">$ chown -R ubuntu:root /var/<span class=\"built_in\">log</span>/nginx</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>补充方式: 利用进行logrotate.d日志轮转</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 针对 Nginx logrotate.d 日志轮转设置</span></span><br><span class=\"line\">$ vim /etc/logrotate.d/nginx</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/nginx/*.<span class=\"built_in\">log</span> &#123;     <span class=\"comment\"># 指定需要轮转处理的日志文件</span></span><br><span class=\"line\">  daily              <span class=\"comment\"># 日志文件轮转周期，可用值为: daily/weekly/yearly</span></span><br><span class=\"line\">  missingok          <span class=\"comment\"># 忽略错误信息</span></span><br><span class=\"line\">  rotate 7           <span class=\"comment\"># 轮转次数，即最多存储7个归档日志，会删除最久的归档日志</span></span><br><span class=\"line\">  minsize 5M\t       <span class=\"comment\"># 限制条件，大于5M的日志文件才进行分割，否则不操作</span></span><br><span class=\"line\">  dateext            <span class=\"comment\"># 以当前日期作为命名格式</span></span><br><span class=\"line\">  compress           <span class=\"comment\"># 轮循结束后，已归档日志使用gzip进行压缩</span></span><br><span class=\"line\">  delaycompress      <span class=\"comment\"># 与compress共用，最近的一次归档不要压缩</span></span><br><span class=\"line\">  notifempty         <span class=\"comment\"># 日志文件为空，轮循不会继续执行</span></span><br><span class=\"line\">  create 640 nginx nginx <span class=\"comment\"># 新日志文件的权限</span></span><br><span class=\"line\">  sharedscripts          <span class=\"comment\"># 有多个日志需要轮询时，只执行一次脚本</span></span><br><span class=\"line\">  postrotate             <span class=\"comment\"># 将日志文件转储后执行的命令。以endscript结尾命令需要单独成行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f /var/run/nginx.pid ]; <span class=\"keyword\">then</span>   <span class=\"comment\"># 判断nginx的PID。# 默认logrotate会以root身份运行</span></span><br><span class=\"line\">    <span class=\"built_in\">kill</span> -USR1 `cat /var/run/nginx.pid`</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  endscript</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行命令:</span></span><br><span class=\"line\">/usr/sbin/logrotate -f /etc/logrotate.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建定时计划任务</span></span><br><span class=\"line\">$ crontab -e</span><br><span class=\"line\">0 1 * * * /usr/sbin/logrotate -f /etc/logrotate.conf</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"ngx-http-stub-status-module-Nginx链接状态模块\"><a href=\"#ngx-http-stub-status-module-Nginx链接状态模块\" class=\"headerlink\" title=\"ngx_http_stub_status_module - Nginx链接状态模块\"></a>ngx_http_stub_status_module - Nginx链接状态模块</h3><p>描述:即在编译时候加入预编译参数<code>--with-http_stub_status_module</code>,它是一个实时统计Nginx Client状态的;</p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context: server,location;  <span class=\"comment\">#使用的上下文范围</span></span><br><span class=\"line\">Syntax: stu_status;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用案例:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  location &#x2F;project_status &#123;</span><br><span class=\"line\">    stub_status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用效果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active Connections: 当前活动链接数 2 个</span><br><span class=\"line\"></span><br><span class=\"line\">第一个 server 表示 Nginx 启动到现在共处理了 2 个连接。</span><br><span class=\"line\">第二个 accepts 表示 Nginx 启动到现在共成功创建 2 次握手。</span><br><span class=\"line\">第三个 handled requests 表示总共处理了 5 次请求。</span><br><span class=\"line\"></span><br><span class=\"line\">reading 读取客户端的Header信息数.这个操作只是读取头部信息，读取完后马上进入writing状态，因此时间很短。</span><br><span class=\"line\">writing 响应数据到客户端的Header信息数.这个操作不仅读取头部，还要等待服务响应，因此时间比较长。</span><br><span class=\"line\">waiting 开启keep-alive后等候下一次请求指令的驻留连接.</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200329123358.png\" alt=\"WeiyiGeek.stub_status\" title=\"\" class=\"\">\n                <p>WeiyiGeek.stub_status</p>\n            </figure></p>\n<p>温馨提示: 正常情况下<code>waiting</code>数量是比较多的并不能说明性能差,反而如果<code>reading+writing</code>数量比较多说明服务并发有问题。</p>\n<p><br></p>\n<h3 id=\"ngx-http-random-index-module-随机主页选择模块\"><a href=\"#ngx-http-random-index-module-随机主页选择模块\" class=\"headerlink\" title=\"ngx_http_random_index_module - 随机主页选择模块\"></a>ngx_http_random_index_module - 随机主页选择模块</h3><p>描述:编译选项<code>--with-help_random_index_module</code>在目录中随机选择一个主页；<br>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context: location;  <span class=\"comment\">#使用的上下文范围</span></span><br><span class=\"line\">Syntax: random_index on|off; <span class=\"comment\">#默认off</span></span><br></pre></td></tr></table></figure></p>\n<p>使用案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    root /opt/app;</span><br><span class=\"line\">    random_index on;</span><br><span class=\"line\">    <span class=\"comment\">#index index.html index.htm</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"ngx-http-fastcgi-module-代理-FastCGI-服务器模块\"><a href=\"#ngx-http-fastcgi-module-代理-FastCGI-服务器模块\" class=\"headerlink\" title=\"ngx_http_fastcgi_module - 代理 FastCGI 服务器模块\"></a>ngx_http_fastcgi_module - 代理 FastCGI 服务器模块</h3><p>描述: 该 ngx_http_fastcgi_module 模块允许将请求传递给 FastCGI 服务器。</p>\n<p><strong>参考地址:</strong> <a href=\"http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html</a></p>\n<ul>\n<li>fastcgi_pass - 设置 FastCGI 服务器的地址, IP地址或者域名。</li>\n<li>fastcgi_pass_header - 传递表头到 FastCGI 服务器。</li>\n<li>fastcgi_param - 应传递给 FastCGI 服务器的参数, 该值可以包含文本、变量及其组合。</li>\n<li>fastcgi_index - 设置 FastCGI 服务器的首页。</li>\n<li><code>fastcgi_read_timeout time</code> - 定义从 FastCGI 服务器读取响应的超时时间。</li>\n<li><p><code>fastcgi_send_timeout time</code> - 设置将请求传输到 FastCGI 服务器的超时时间。</p>\n</li>\n<li><p><code>fastcgi_cache zone | off;</code> - 定义用于缓存的共享内存区域。</p>\n</li>\n<li><code>fastcgi_split_path_info regex;</code>- 定义一个捕获 <code>$fastcgi_path_info</code> 变量值的正则表达式。</li>\n<li><code>fastcgi_store on | off | string;</code> - 允许将文件保存到磁盘。</li>\n<li><code>fastcgi_temp_path path [level1 [level2 [level3]]];</code> - 定义一个用于存储临时文件的目录，其中包含从 FastCGI 服务器接收到的数据<br><br/></li>\n</ul>\n<p><strong>参考示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php解析</span></span><br><span class=\"line\">location ~ .*\\.(php|php5)?$ &#123;</span><br><span class=\"line\">  <span class=\"comment\"># FastCGI Server 相关配置</span></span><br><span class=\"line\">  fastcgi_pass blog.weiyigeek.top:9000;</span><br><span class=\"line\">  fastcgi_pass unix:/tmp/fastcgi.socket;</span><br><span class=\"line\">  fastcgi_index index.php;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># FastCGI 参数 相关配置</span></span><br><span class=\"line\">  fastcgi_param SCRIPT_FILENAME /home/www/scripts/php<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">  fastcgi_param QUERY_STRING    <span class=\"variable\">$query_string</span>;</span><br><span class=\"line\">  fastcgi_param REQUEST_METHOD  <span class=\"variable\">$request_method</span>;</span><br><span class=\"line\">  fastcgi_param CONTENT_TYPE    <span class=\"variable\">$content_type</span>;</span><br><span class=\"line\">  fastcgi_param CONTENT_LENGTH  <span class=\"variable\">$content_length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># FastCGI 相关参数调优</span></span><br><span class=\"line\">  fastcgi_cache ngx_fcgi_cache;</span><br><span class=\"line\">  fastcgi_cache_valid 200 302 1h;</span><br><span class=\"line\">  fastcgi_cache_valid 301 1d;</span><br><span class=\"line\">  fastcgi_cache_valid any 1m;</span><br><span class=\"line\">  fastcgi_cache_min_uses 1;</span><br><span class=\"line\">  fastcgi_cache_use_stale error timeout invalid_header http_500;</span><br><span class=\"line\">  fastcgi_cache_key http://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># FastCGI 发送、读取超时时间设置</span></span><br><span class=\"line\">  fastcgi_read_timeout 60;</span><br><span class=\"line\">  fastcgi_send_timeout 60;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># FastCGI 请求截取配置</span></span><br><span class=\"line\">  <span class=\"comment\"># 例如，进行 /show.php/article/0001 请求，参数变量结果如下。</span></span><br><span class=\"line\">  fastcgi_split_path_info       ^(.+\\.php)(.*)$;</span><br><span class=\"line\">  fastcgi_param SCRIPT_FILENAME /path/to/php<span class=\"variable\">$fastcgi_script_name</span>; <span class=\"comment\"># SCRIPT_FILENAME参数 /path/to/php/show.php</span></span><br><span class=\"line\">  astcgi_param PATH_INFO       <span class=\"variable\">$fastcgi_path_info</span>; <span class=\"comment\"># PATH_INF O参数 /article/0001</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 其它conf包含配置</span></span><br><span class=\"line\">  include fastcgi.conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"ngx-http-headers-module-客户端请求响应头有设置\"><a href=\"#ngx-http-headers-module-客户端请求响应头有设置\" class=\"headerlink\" title=\"ngx_http_headers_module - 客户端请求响应头有设置\"></a>ngx_http_headers_module - 客户端请求响应头有设置</h3><p>描述: 该 ngx_http_headers_module 模块允许将“Expires”和“Cache-Control”头字段以及任意字段添加到响应头中。</p>\n<p><strong>语法参数</strong></p>\n<ul>\n<li><code>add_header name value [always];</code> : 如果响应代码等于 200、201 (1.3.10)、204、206、301、302、303、304、307 (1.1.16、1.0.13) 或 308 (1.13)，则将指定字段添加到响应标头), 当指定了 always 参数（1.7.5），则无论响应代码为多少都将添加标头字段。</li>\n<li><code>expires [modified] time; | expires epoch | max | off;</code> : 如果响应代码等于 200、201 (1.3.10)、204、206、301、302、303、304、307 (1.1.1)，则启用或禁用添加或修改“Expires”和“Cache-Control”响应头字段。 16、1.0.13) 或 308 (1.13.0), 该参数可以是正时间或负时间(不缓存)。</li>\n</ul>\n<p><strong>使用演示:</strong><br>示例1.在 location 块中 添加 request_method 判断 options 请求<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$request_method</span> = <span class=\"string\">'OPTIONS'</span>) &#123;</span><br><span class=\"line\">  add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">  add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS,PATCH;</span><br><span class=\"line\">  add_header Access-Control-Allow-Credentials <span class=\"literal\">true</span>;</span><br><span class=\"line\">  add_header Access-Control-Allow-Headers DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 204;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>示例2.按照请求来源设置响应头<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 1.在location块中,判断当前来源的域名($http_origin)是不是符合条件,</span><br><span class=\"line\"># 2.符合条件的话就用add_header指令设置 Access-Control-Allow-Origin</span><br><span class=\"line\">location ~ \\.ico|jpg|gif|png|js|css|woff2|ttf$ &#123;</span><br><span class=\"line\">  root &#x2F;usr&#x2F;local&#x2F;app&#x2F;images; #存放静态文件的路径</span><br><span class=\"line\">  expires 1h;</span><br><span class=\"line\"> # 只有 blog.weiyigeek.top 域名请求访问添加如下响应头。</span><br><span class=\"line\">  if ($http_origin ~ [a-z]+\\.weiyigeek\\.top$)&#123;</span><br><span class=\"line\">    add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">    add_header Access-Control-Request-Method GET;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>示例3.利用添加的Access-Control-Allow-Origin响应头解决字体跨域配置方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* \\.(eot|ttf|woff|woff2|svg)$ &#123;</span><br><span class=\"line\">  add_header Access-Control-Allow-Origin *;</span><br><span class=\"line\">  # add_header Access-Control-Allow-Origin $http_origin;</span><br><span class=\"line\">  add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class=\"line\">  add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"ngx-http-limit-conn-module-每个IP地址-请求连接数-限制\"><a href=\"#ngx-http-limit-conn-module-每个IP地址-请求连接数-限制\" class=\"headerlink\" title=\"ngx_http_limit_conn_module - 每个IP地址(请求连接数)限制\"></a>ngx_http_limit_conn_module - 每个IP地址(请求连接数)限制</h3><p>描述: <code>ngx_http_limit_conn_module</code> 模块用于限制每个定义的键的连接数，特别是来自单个 IP 地址的连接数,并非所有连接都被计算在内。只有当服务器正在处理一个请求并且已经读取了整个请求标头时，才计算一个连接。<br>参考地址: <a href=\"http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html</a></p>\n<p><strong>Directives - 指令</strong></p>\n<ul>\n<li><code>limit_conn zone number;</code> : 为给定键值设置共享内存区域和最大允许连接数, 当超过此限制时，服务器将返回错误以响应请求</li>\n<li><code>limit_conn_dry_run on | off;</code> : 默认off,启用干运行模式,在此模式下连接数不受限制但是在共享内存区域中，过多的连接数将照常考虑在内。</li>\n<li><code>limit_conn_log_level info | notice | warn | error;</code> : 默认error,为服务器限制连接数的情况设置所需的日志记录级别。</li>\n<li><code>limit_conn_status code;</code> : 默认503,设置要返回的状态代码以响应被拒绝的请求。</li>\n<li><code>limit_conn_zone key zone=name:size;</code> : 设置共享内存区域的参数，该区域将保留各种键的状态, 状态包括当前连接数,可以包含文本、变量及其组合。</li>\n</ul>\n<p><br/></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如，每个 IP 地址一次只允许一个连接。</span></span><br><span class=\"line\">limit_conn_zone <span class=\"variable\">$binary_remote_addr</span> zone=addr:10m;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  location /download/ &#123;</span><br><span class=\"line\">    limit_conn addr 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 例如，以下配置将限制每个客户端 IP 与服务器的连接数，同时限制与虚拟服务器的连接总数。</span></span><br><span class=\"line\">limit_conn_zone <span class=\"variable\">$binary_remote_addr</span> zone=perip:10m;</span><br><span class=\"line\">limit_conn_zone <span class=\"variable\">$server_name</span> zone=perserver:10m;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  limit_conn perip 10;</span><br><span class=\"line\">  limit_conn perserver 100;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>温馨提示: 嵌入式变量 <code>$limit_conn_status</code> 其保留限制连接数的结果。<br>温馨提示: 在 HTTP/2 和 SPDY 中，每个并发请求都被视为一个单独的连接。</p>\n<p><br></p>\n<h3 id=\"ngx-http-limit-req-module-每个IP地址-请求速率-限制\"><a href=\"#ngx-http-limit-req-module-每个IP地址-请求速率-限制\" class=\"headerlink\" title=\"ngx_http_limit_req_module - 每个IP地址(请求速率)限制\"></a>ngx_http_limit_req_module - 每个IP地址(请求速率)限制</h3><p>描述: 该模块用于限制每个已定义键的请求处理速率，特别是来自单个 IP 地址的请求的处理速率。</p>\n<p><strong>Directives - 指令</strong></p>\n<ul>\n<li><code>limit_req zone=name [burst=number] [nodelay | delay=number];</code> : 设置共享内存区域和请求的最大突发大小,如果请求速率超过为区域配置的速率，则其处理将延迟，以便以定义的速率处理请求, 默认情况下最大突发大小等于零。</li>\n<li><code>limit_req_zone key zone=name:size rate=rate [sync];</code>, 设置共享内存区域的参数以及请求速率，该区域将保留各种键的状态, 状态存储当前过多请求数,可以包含文本、变量及其组合, 例如 <code>$binary_remote_addr</code>.</li>\n<li><code>limit_req_dry_run on | off;</code>, 默认off, 启用dry运行模式。在此模式下请求处理速率不受限制，但是在共享内存区域中，过多的请求数将照常计算在内。</li>\n<li><code>limit_req_log_level info | notice | warn | error;</code>,默认 error, 为服务器由于速率超过或延迟请求处理而拒绝处理请求的情况设置所需的日志记录级别。</li>\n<li><code>limit_req_status code;</code>, 默认 503, 设置要返回的状态代码以响应被拒绝的请求.</li>\n</ul>\n<p><strong>示例演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.此处，状态保存在 10 MB 区域“one”中，并且此区域的平均请求处理速率不能超过每秒 1 个请求。</span></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=one:10m rate=1r/s;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  location /search/ &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 漏桶数（队列数）为５个（相当于设置一个大小为5的缓冲区）并不启用延时，超过了访问频次的请求会先放到这个缓冲区中等待, 如果又超过缓冲区的请求数那便直接返回 503。</span></span><br><span class=\"line\">    limit_req zone=one burst=5;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.如果不希望在限制请求时延迟过多的请求，则应使用以下参数 nodelay (无延迟的意思), 表示请求超过频次时可提供处理(burst + rate)个请求的能力, 当请求速率超过（burst + rate）数量时就会直接返回 503。</span></span><br><span class=\"line\">limit_req zone=one burst=5 nodelay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.例如，以下配置将限制来自单个 IP 地址的请求的处理速率，同时限制虚拟服务器的请求处理速率</span></span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=perip:10m rate=1r/s;</span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$server_name</span> zone=perserver:10m rate=10r/s;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  limit_req zone=perip burst=5 nodelay;</span><br><span class=\"line\">  limit_req zone=perserver burst=10;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 上面的示例中将客户端IP地址用作密钥, 请注意这里使用的不是<code>$remote_addr</code>变量，而是<code>$binary_remote_addr</code>变量。<code>$binary_remote_addr</code>变量的大小对于IPv4地址始终为4字节，对于IPv6地址始终为16字节。存储状态在32位平台上始终占64字节，在64位平台上始终占128字节。一个兆字节的区域可以保存大约16000个64字节的状态或大约8000个128字节的状态, 即在10m字节的区域选64位平台下则可以保存 <code>8000x10 = 80000</code>个状态针对128字节来说。</p>\n<p>温馨提示: <code>burst</code> 相当于设置一个缓冲区大小，超过了rate 访问频次的请求会先放到这个缓冲区中等待，如果又超过缓冲区的请求数将会直接返回503。<br>温馨提示: <code>nodelay</code> 表示无延迟的意思，设置其将永远不会存在请求需要等待的情况，即当请求数超过<code>(burst + rate)</code>数量的时候就会直接返回503, 补充一点nodelay一定是与burst配合使用的。</p>\n<p>温馨提示: 嵌入式变量 <code>$limit_req_status</code> 其保留限制请求处理速率的结果。</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"基础入门","path":"api/categories/基础入门.json"},{"name":"运维实践","path":"api/categories/运维实践.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"}]}