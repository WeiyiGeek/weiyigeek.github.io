{"title":"Nodejs入门学习1.md","slug":"编程世界/NodeJs/Nodejs入门学习1","date":"2019-04-11T02:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/4-11-315.html","path":"api/articles/2019/4-11-315.html.json","covers":["https://img.weiyigeek.top/2019/20190411101119.png"],"content":"<p>[TOC]<br>Come on 开始新的征程！</p>\n<a id=\"more\"></a>\n<h4 id=\"1-模块与包\"><a href=\"#1-模块与包\" class=\"headerlink\" title=\"(1) 模块与包\"></a>(1) 模块与包</h4><p>模块：在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>\n<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。<br>在Node环境中，一个.js文件就称之为一个模块（module）。</p>\n<p>模块/包与CommonJS示例图：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190411101119.png\" alt=\"WeiyiGeek.模块包CommonJS\" title=\"\" class=\"\">\n                <p>WeiyiGeek.模块包CommonJS</p>\n            </figure></p>\n<p><em>Q:使用模块有什么好处？</em></p>\n<ul>\n<li>提高了代码的可维护性</li>\n<li>代码重用</li>\n<li>避免函数名和变量名冲突</li>\n</ul>\n<p>Tips：相同名字的函数和变量完全可以分别存在不同的模块中，因此我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>\n<h5 id=\"1-1-模块分类\"><a href=\"#1-1-模块分类\" class=\"headerlink\" title=\"1.1 模块分类\"></a>1.1 模块分类</h5><p><em>Nodejs模块基于CommonJ规范分类:</em></p>\n<ul>\n<li>内置模块:系统自带的模块我只需要调用即可;</li>\n<li>第三方模块:大佬开发的一些模块我们需要通过npm进行下载安装;<a href=\"https://npmjs.com\" target=\"_blank\" rel=\"noopener\">https://npmjs.com</a></li>\n<li>自定义模块:我们自定义的模块,即暴露接口然后引用</li>\n</ul>\n<p>案例(1):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//采用ES6规范</span></span><br><span class=\"line\"><span class=\"comment\">//######(1)内置模块##########</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>)  <span class=\"comment\">//nodejs API</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(os.hostname)  <span class=\"comment\">//DESKTOP-OVF3TEN</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#########(2)第三方模块 利用npm或者cnpm下载安装模块包  ############</span></span><br><span class=\"line\">&gt; npm init   #在项目中创建配置文件 </span><br><span class=\"line\">&gt; npm install request --save  #会建立 node_modules 文件夹存放模块包,配置里面也将写入dependencies;</span><br><span class=\"line\"><span class=\"comment\">//第三方模块使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</span><br><span class=\"line\">request(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'https://api.douban.com/v2/movie/top250'</span>,</span><br><span class=\"line\">    json: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,(error,Response,body)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(body, <span class=\"literal\">null</span>, <span class=\"number\">2</span>))  <span class=\"comment\">//空白替换 / 2 表示缩进</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//##############(3) 自定义模块 ###############</span></span><br><span class=\"line\"><span class=\"comment\">//建立一个src文件夹存储自定义模块 ./src/greeting.js</span></span><br><span class=\"line\"><span class=\"comment\">//第一步建立模块</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> hello = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello ~'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//第二步暴露模块 模块名称 = 处理方法</span></span><br><span class=\"line\"><span class=\"comment\">////module.exports = hello; 下面可直接调用hello() = &gt; Demo()</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.hello = hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#主调用文件moduel.js</span></span><br><span class=\"line\"><span class=\"comment\">//在使用require()引入模块的时候，请注意模块的相对路径，因为main.js和hello.js位于同一个目录，所以我们用了当前目录.：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Demo = <span class=\"built_in\">require</span>(<span class=\"string\">'./src/greeting.js'</span>)</span><br><span class=\"line\">Demo.hello()  <span class=\"comment\">//Hello ~</span></span><br></pre></td></tr></table></figure><br><br></p>\n<p>案例2：自定义模块<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//########## src\\hello.js ###########</span></span><br><span class=\"line\"><span class=\"comment\">//hello.js文件就是一个模块，模块的名字就是文件名</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(s + <span class=\"string\">', '</span> + name + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = greet;  <span class=\"comment\">//直接暴露方法名 (注意这点)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########## module_1.js ###########</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 引入hello模块:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> greet = <span class=\"built_in\">require</span>(<span class=\"string\">'./src/hello'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'WeiyiGeek'</span>;</span><br><span class=\"line\"><span class=\"comment\">//成功地引用了hello.js模块中定义的greet()函数</span></span><br><span class=\"line\">greet(s); <span class=\"comment\">// Hello, WeiyiGeek! (注意)</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意:</em></p>\n<ul>\n<li>遇到这个错误，你要检查：模块名是否写对了,模块文件是否存在,相对路径是否写对了;</li>\n<li></li>\n</ul>\n","comments":true,"excerpt":"[TOC]<br>Come on 开始新的征程！","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Node.js","path":"api/tags/Node.js.json"}]}