{"title":"JAVA入门学习八","slug":"编程世界/Java/JAVA入门学习八","date":"2019-09-28T03:34:30.000Z","updated":"2022-03-29T05:39:06.303Z","url":"2019/9-28-291.html","path":"api/articles/2019/9-28-291.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190929093714.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191014090433.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191008220605.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009095234.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009112059.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009171207.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010102047.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010111131.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010144505.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"异常概述和分类\"><a href=\"#异常概述和分类\" class=\"headerlink\" title=\"异常概述和分类\"></a>异常概述和分类</h4><p>概述:异常就是Java程序在运行过程中出现的错误。<br>异常的分类:</p>\n<ul>\n<li>通过API查看Throwable所知在Java.Lang里面使用是不用导包的它是JAVA语言中所有错误或者异常的超类(父根类);</li>\n<li>Error : 服务器宕机,数据库崩溃等</li>\n<li>Exception : 可以接收程序编译和运行时候发生的异常,并且异常子类后缀都是Exception;</li>\n</ul>\n<p><em>异常的继承体系:</em><br>Throwable (超类)</p>\n<ul>\n<li>Error    </li>\n<li>Exception<ul>\n<li>编译时候异常(静态): Java程序必须显示处理，否则程序就会发生错误，无法通过编译;</li>\n<li>RuntimeException(重点动态赋值) : 无需显示处理，也可以和编译时异常一样处理;</li>\n</ul>\n</li>\n</ul>\n<p><em>Q:JVM默认是如何处理异常的?</em><br>答: main函数收到这个问题时,有两种处理方式:</p>\n<ul>\n<li>a:自己将该问题处理然后继续运行;</li>\n<li>b:自己没有针对的处理方式只有交给调用main的jvm来处理;有一个默认的异常处理机制,就将该异常进行处理. 并将该异常的名称,异常的信息以及异常出现的位置打印在了控制台上,同时将程序停止运行</li>\n</ul>\n<p>编译期异常和运行期异常的区别：</p>\n<ul>\n<li>Java中的异常被分为两大类：<code>编译时异常和运行时异常</code>。</li>\n<li>所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常</li>\n</ul>\n<p>编译时异常也叫做<code>未雨绸缪异常</code>(在做某些事情的时候要做某些准备)</p>\n<ul>\n<li>编译时异常:在编译某个程序的时候,有可能会有这样那样的事情发生,比如文件找不到,这样的异常就必须在编译的时候处理,如果不处理编译通不过;</li>\n<li>运行时异常:就是程序员所犯得错误,需要回来修改代码;</li>\n</ul>\n<p>(1)RuntimeException案例演示:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Exception</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Demo d = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = d.div(<span class=\"number\">10</span>, <span class=\"number\">0</span>);  <span class=\"comment\">//不能接收ArithmeticException异常最终打印处改行</span></span><br><span class=\"line\">    System.out.println(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 除法运算 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">div</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;\t\t<span class=\"comment\">//a = 10,b = 0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a / b;\t<span class=\"comment\">//10 / 0 被除数是10,除数是0当除数是0的时候违背了算数运算法则,抛出异常</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">//new ArithmeticException(\"/ by zero\");</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190929093714.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"异常处理方式\"><a href=\"#异常处理方式\" class=\"headerlink\" title=\"异常处理方式\"></a>异常处理方式</h5><p>描述:异常处理的几种方式如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理异常的基本格式参数说明:(try...catch...finally)</span></span><br><span class=\"line\"><span class=\"comment\">// try:用来检测异常的</span></span><br><span class=\"line\"><span class=\"comment\">// catch:用来捕获异常的</span></span><br><span class=\"line\"><span class=\"comment\">// finally:释放资源</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//格式1:</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"string\">\"异常类\"</span> <span class=\"string\">\"接收参数\"</span>)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//格式2:</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">//1.代码块中有有生存周期,出了该代码块就不能使用</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(<span class=\"string\">\"异常类\"</span> <span class=\"string\">\"接收参数\"</span>)&#123;</span><br><span class=\"line\"> <span class=\"comment\">//2.异常捕获后执行处理的代码块(非常注意catch后有一个括号里面包含异常类和参数)</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">//3.异常捕获完成后执行的代码块</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//格式3:</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>异常注意:</em></p>\n<ul>\n<li>JDK7以后处理多个异常的方式及注意事项;</li>\n<li>安卓客户端开发,如何处理异常?<ul>\n<li>try{…}catch(Exception e){…}</li>\n</ul>\n</li>\n<li>JavaEE服务端开发,一般都是底层开发从底层向上抛;</li>\n</ul>\n<p><strong>补充说明:</strong></p>\n<ul>\n<li>当程序报出异常的时候为了快速定位查找,一般从下向上查找;</li>\n<li>世界上最真情的相依就是你在try我在catch,无论你发神马脾气,我都静静接受,默默处理</li>\n<li>当通过try…catch语句将问题处理了,程序会继续执行;</li>\n</ul>\n<p><br></p>\n<h5 id=\"Throwable常用方法\"><a href=\"#Throwable常用方法\" class=\"headerlink\" title=\"Throwable常用方法\"></a>Throwable常用方法</h5><p>描述:Throwable的几个常见方法</p>\n<ul>\n<li>a:getMessage() : 获取异常信息，返回字符串。</li>\n<li>b:toString() : 获取异常类名和异常信息，返回字符串。</li>\n<li>c:printStackTrace() : 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。</li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.exception;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Throwable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//(1) Throwable 常见方法</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">1</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;  <span class=\"comment\">//Exception e = new ArithmeticException(\"/ by zero\")</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"1.\"</span> + e.getMessage());  <span class=\"comment\">//获取异常信息</span></span><br><span class=\"line\">      System.out.println(e);  <span class=\"comment\">//调用toString方法打印异常类名和异常信息</span></span><br><span class=\"line\">      e.printStackTrace();    <span class=\"comment\">//jvm默认就用的这种方式处理异常</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">1./ by zero</span></span><br><span class=\"line\"><span class=\"comment\">2.java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\"><span class=\"comment\">3.java.lang.ArithmeticException: / by zero</span></span><br><span class=\"line\"><span class=\"comment\">at com.weiyigeek.exception.Demo1_Throwable.main(Demo1_Throwable.java:8)</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"throws关键字\"><a href=\"#throws关键字\" class=\"headerlink\" title=\"throws关键字\"></a>throws关键字</h5><p>描述:throws的方式处理异常<br>定义功能方法时，需要把出现的问题暴露出来让调用者去处理,那么就通过throws在方法上标识。<br>throws语法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//编译时异常抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">//@ throw Exception</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionDemo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(regual)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"抛出异常\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>throws语句也需要注意编译时和运行时抛出错误：</p>\n<ul>\n<li>编译时异常: 必须在方法上进行声明否则报错;并且异常抛出必须对其进行处理。</li>\n<li>运行时异常: 在编译时候不进行异常处理,而是在程序执行时候才进行异常处理;(函数默认的，函数上可以不用加<code>throw RuntimeException</code>声明);并且运行时异常的抛出可以处理也可以不处理;</li>\n</ul>\n<p><strong>throw的概述以及和throws的区别</strong><br>描述:在功能方法内部出现某种情况，程序不能继续运行，需要进行跳转时，就用throw把异常对象抛出；</p>\n<p>throws和throw的区别:</p>\n<ul>\n<li>a:throws<ul>\n<li>用在方法声明后面，跟的是异常类名</li>\n<li>可以跟多个异常类名，用逗号隔开</li>\n<li>表示抛出异常，由该方法的调用者来处理</li>\n</ul>\n</li>\n<li>b:throw<ul>\n<li>用在方法体内，跟的是异常对象名</li>\n<li>只能抛出一个异常对象名</li>\n<li>表示抛出异常，由方法体内的语句处理</li>\n</ul>\n</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Throws 后加异常类名以,分割(方法上)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception,RuntimeException </span>&#123; <span class=\"comment\">//关键点1</span></span><br><span class=\"line\">  <span class=\"comment\">//throw用在方法内并且有两种写法 </span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"方式1:异常对象\"</span>);  <span class=\"comment\">//关键点2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Exception e = new Exception(\"方式2:年龄非法!\");</span></span><br><span class=\"line\">  <span class=\"comment\">// throw e</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"finally关键字\"><a href=\"#finally关键字\" class=\"headerlink\" title=\"finally关键字\"></a>finally关键字</h5><p><em>finally关键字的特点及作用：</em><br>作用:用于释放资源，在IO流操作和数据库操作中会见到<br>特点:被finally控制的语句体一定会执行,特殊情况在执行到finally之前jvm退出了<code>(比如System.exit(0))</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.exception;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_finally</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">1</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"除数不能为Zero\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>; <span class=\"comment\">//相当于是方法的最后一口气,在他将死之前会看看有木有finally帮其完成遗愿；如果有就将finally执行后再彻底返回;</span></span><br><span class=\"line\">      <span class=\"comment\">// System.exit(0);  //表示退出JVM虚拟机</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"在return返回前执行了,而如果在System.exit(0)后面则不会执行finally\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>面试题1:final,finally和finalize的区别?</em></p>\n<ul>\n<li>final 可以修饰类,不能被继承;修饰方法,不能被重写;修饰变量,只能赋值一次</li>\n<li>finally 是try语句中的一个语句体不能单独使用,用来释放资源</li>\n<li>finalize 是一个方法当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</li>\n</ul>\n<p><em>面试题2:如果catch里面有return语句，请问finally的代码还会执行吗?如果会请问是在return前还是return后?</em><br>答：是可以的比如看下面的使用案例,并且是在Return后执行并且(在finally没有加return情况下)不会影响return里面的值;</p>\n<p><br></p>\n<p>finally关键字特殊使用案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.exception;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_finally</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(extracted());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">extracted</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      x = <span class=\"number\">20</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"number\">1</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"try代码块中必须要有return语句: \"</span> + x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      x = <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"catch代码块中也必须要有return语句:\"</span> + x; <span class=\"comment\">//相当于占用了一个坑里面只能存30(在finally完成后继续输出);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      x = <span class=\"number\">40</span>; <span class=\"comment\">// 注意点:finally代码块(作用是释放资源)中一定不能存在return语句否则会将覆盖try或者catch中的return语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">catch</span>代码块中也必须要有<span class=\"keyword\">return</span>语句:<span class=\"number\">30</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h5 id=\"自定义异常概述使用\"><a href=\"#自定义异常概述使用\" class=\"headerlink\" title=\"自定义异常概述使用\"></a>自定义异常概述使用</h5><p>描述:自定义异常通常是基础父类里面的方法,它可以通过异常来快速定位代码程序的问题;</p>\n<ul>\n<li>继承自Exception</li>\n<li>继承自RuntimeException</li>\n</ul>\n<p><em>异常注意事项:</em></p>\n<ul>\n<li>a:子类重写父类方法时，子类的方法必须抛出相同的异常或父类异常的子类。(<code>例如:父亲坏了儿子不能比父亲更坏</code>);</li>\n<li>b:如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者是他的子集,子类不能抛出父类没有的异常;</li>\n<li>c:如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常,如果子类方法内有异常发生,那么子类只能try不能throws;</li>\n</ul>\n<p>异常处理原则:如果该功能内部可以将问题处理,用try如果处理不了,交由调用者处理这是用throws区别:</p>\n<ul>\n<li>后续程序需要继续运行就 try 关键字</li>\n<li>后续程序不需要继续运行就 throws 关键字</li>\n<li>如果JDK没有提供对应的异常，需要自定义异常。(<code>要么继承Exception要么继承RuntimeException然后重新父类里面的构造方法即可</code>)</li>\n</ul>\n<p>自定义异常基础示例:(重点)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6_CustomException</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> AgeOutOfBoundsException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.自定义异常的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Demo1(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println(e);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"错误的信息 ： \"</span>+e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//抛出自定义异常类</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Demo1</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> <span class=\"keyword\">throws</span> AgeOutOfBoundsException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( age &gt; <span class=\"number\">0</span> &amp;&amp; age &lt;= <span class=\"number\">150</span>)&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"您是一个正常的人类\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AgeOutOfBoundsException(<span class=\"string\">\"年龄出现异常\"</span>);  <span class=\"comment\">//爆出异常</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//自定义异常类 (这里可以选择编译时异常也可选择执行时异常)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AgeOutOfBoundsException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//继承父类的构造方法,使其可以传递具体的错误参数字符串;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeOutOfBoundsException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AgeOutOfBoundsException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>异常处理基础示例2:(直接输打印异常)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.exception;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigInteger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6_Example</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 案例1.键盘输入一个int类型的整数进行输出其二进制表现形式;</span></span><br><span class=\"line\">  <span class=\"comment\">//  * 如果录入的整数过大,给予提示,录入的整数过大请重新录入一个整数BigInteger</span></span><br><span class=\"line\">  <span class=\"comment\">//  * 如果录入的是小数,给予提示,录入的是小数,请重新录入一个整数</span></span><br><span class=\"line\">  <span class=\"comment\">//  * 如果录入的是其他字符,给予提示,录入的是非法字符,请重新录入一个整数</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"/***\\n*** 二进制转换异常处理案例 ***\\n***/\"</span>);</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入一个整数: \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      String line = sc.nextLine();</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = Integer.parseInt(line);\t</span><br><span class=\"line\">        System.out.println(line+ <span class=\"string\">\"(Binary) = \"</span> +Integer.toBinaryString(num));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">new</span> BigInteger(line);  <span class=\"comment\">//采用了小数和非常字符的异常;</span></span><br><span class=\"line\">          System.out.println(<span class=\"string\">\"输入错误,录入的是一个过大的整数,请重新输入:\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e2) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//下面这里值得学习：</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> BigDecimal(line);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"输入错误,录入的是一个小数,请重新输入:\"</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (Exception e3) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"输入错误,您录入的是非法字符,请重新输入一个整数:\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">  *** 二进制转换异常处理案例执行结果 ***</span></span><br><span class=\"line\"><span class=\"comment\">***/</span></span><br><span class=\"line\">请输入一个整数: <span class=\"number\">1111111111111111111</span></span><br><span class=\"line\">输入错误,录入的是一个过大的整数,请重新输入:</span><br><span class=\"line\">abc</span><br><span class=\"line\">输入错误,您录入的是非法字符,请重新输入一个整数:</span><br><span class=\"line\"><span class=\"number\">13.3</span></span><br><span class=\"line\">输入错误,录入的是一个小数,请重新输入:</span><br><span class=\"line\"><span class=\"number\">255</span></span><br><span class=\"line\"><span class=\"number\">255</span>(Binary) = <span class=\"number\">11111111</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"File类概述和使用\"><a href=\"#File类概述和使用\" class=\"headerlink\" title=\"File类概述和使用\"></a>File类概述和使用</h4><p>描述:File类是一个路径解析类存放文件路径或者文件夹路径;</p>\n<p>路径分为绝对路径和相对路径区分:</p>\n<ul>\n<li>绝对路径是一个固定的路径,从盘符开始</li>\n<li>相对路径相对于某个位置,在eclipse下是指当前项目下在DOS下;</li>\n</ul>\n<p>文件和目录路径名的抽象表示形式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Windows (认为所有的文件都是可读的，但是可以对文件进行设置不可写)</span></span><br><span class=\"line\">c:\\\\Windows\\\\system32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Linux</span></span><br><span class=\"line\">/etc/passwd</span><br></pre></td></tr></table></figure></p>\n<p>基础使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#构造方法</span></span><br><span class=\"line\">* File(String pathname): 根据一个路径得到File对象</span><br><span class=\"line\">* File(String parent, String child): 根据一个目录和一个子文件/目录得到File对象</span><br><span class=\"line\">* File(File parent, String child): 根据一个父File对象和一个子文件/目录得到File对象</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建功能</span></span><br><span class=\"line\">* public boolean createNewFile():创建文件 如果存在这样的文件，就不创建了</span><br><span class=\"line\">* public boolean mkdir():创建文件夹 如果存在这样的文件夹，就不创建了</span><br><span class=\"line\">* public boolean mkdirs():创建文件夹,如果父文件夹不存在，会帮你创建出来</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重命名和删除功能</span></span><br><span class=\"line\">public boolean renameTo(File dest):把文件重命名为指定的文件路径</span><br><span class=\"line\">public boolean delete():删除文件或者文件夹</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断功能</span></span><br><span class=\"line\">public boolean isDirectory():判断是否是目录</span><br><span class=\"line\">public boolean isFile():判断是否是文件</span><br><span class=\"line\">public boolean exists():判断是否存在</span><br><span class=\"line\">public boolean canRead():判断是否可读</span><br><span class=\"line\">public boolean canWrite():判断是否可写</span><br><span class=\"line\">public boolean isHidden():判断是否隐藏</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取功能</span></span><br><span class=\"line\">public String getAbsolutePath()：获取绝对路径</span><br><span class=\"line\">public String getPath():获取构造方法中传入的路径</span><br><span class=\"line\">public String getName():获取名称</span><br><span class=\"line\">public long length():获取长度。字节数(文件大小))</span><br><span class=\"line\">public long lastModified():获取最后一次的修改时间，毫秒值</span><br><span class=\"line\">public String[] list():获取指定目录下的所有文件或者文件夹的名称数组</span><br><span class=\"line\">public File[] listFiles():获取指定目录下的所有文件或者文件夹的File数组 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#异常处理</span></span><br><span class=\"line\">Throws IOException</span><br></pre></td></tr></table></figure></p>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_FileConstruction</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;  <span class=\"comment\">//抛出IO异常模块(需要注意)</span></span><br><span class=\"line\">    <span class=\"comment\">//#示例1:File类的构造方法使用方法 ##########################################</span></span><br><span class=\"line\">    File f1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\githubProject\\\\Study-Promgram\\\\update.sh\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1：判断update.sh是否存在 : \"</span> + f1.exists());</span><br><span class=\"line\">    <span class=\"comment\">//----------------------</span></span><br><span class=\"line\">    String parent = <span class=\"string\">\"E:\\\\githubProject\\\\Study-Promgram\"</span>;</span><br><span class=\"line\">    String child = <span class=\"string\">\"update.sh\"</span>;</span><br><span class=\"line\">    File f2 = <span class=\"keyword\">new</span> File(parent,child);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2：\"</span> + f2.exists());</span><br><span class=\"line\">    <span class=\"comment\">//----------------------\t\t</span></span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\githubProject\\\\Study-Promgram\"</span>); <span class=\"comment\">//为什么要采用这种方式呢,后面自自然有说明;</span></span><br><span class=\"line\">    String filename = <span class=\"string\">\"update.sh\"</span>;</span><br><span class=\"line\">    File f3 = <span class=\"keyword\">new</span> File(file,filename);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式3：\"</span> + file.exists() + <span class=\"string\">\" - \"</span> + f3.exists());</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例2:File类中常用方法 ########################################################</span></span><br><span class=\"line\">    <span class=\"comment\">// createNewFile 创建文件</span></span><br><span class=\"line\">    File f4 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\\"</span>,<span class=\"string\">\"FileClass.txt\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = f4.createNewFile();</span><br><span class=\"line\">    String res = flag ? <span class=\"string\">\"文件创建成功\"</span> : <span class=\"string\">\"文件已经创建\"</span>;</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">    <span class=\"comment\">//----------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// mkdir 创建单个文件夹</span></span><br><span class=\"line\">    File d1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\CreateDirector\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"创建单个文件 ：\"</span> + d1.mkdir());</span><br><span class=\"line\">    <span class=\"comment\">//----------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// mkdirs 创建多级文件类似Linux中 md -p /tmp/create/www</span></span><br><span class=\"line\">    File d2 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\CreateDirector\\\\Web\\\\WWW\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"创建单个文件 ：\"</span> + d2.mkdirs());</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例3:File类中重命名和删除功能 ########################################################</span></span><br><span class=\"line\">    <span class=\"comment\">// renameTo 改名</span></span><br><span class=\"line\">    File f5 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\FileClass.txt\"</span>);</span><br><span class=\"line\">    File f6 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\CreateDirector\\\\Web\\\\WWW\\\\FileClassRename.txt\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(\"文件更改名称 : \" + f5.renameTo(f6));  //剪切到f6的指定路径</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// delete 删除 (注意只能删除文件夹下面为空的文件夹)</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件删除：\"</span> + f6.delete());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件夹删除：\"</span> + d1.delete());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例4:File类中判断功能 ########################################################</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"是否是文件: \"</span> + f5.isFile());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"是否是文件夹: \"</span> + d2.isDirectory());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//#示例4:File类中获取功能 ########################################################</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"绝对路径：\"</span> + f2.getAbsolutePath());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Filel类实例化传入路径 : \"</span> + f2.getPath());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件名称: \"</span> + f2.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件大写: \"</span> + f2.length()); </span><br><span class=\"line\">    Date d = <span class=\"keyword\">new</span> Date(f5.lastModified());</span><br><span class=\"line\">    SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy年MM月dd日 HH:mm:ss\"</span>);</span><br><span class=\"line\">    System.out.println(sdf.format(d));</span><br><span class=\"line\">    <span class=\"comment\">//重点(目录中的)</span></span><br><span class=\"line\">    File f7 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"F:/day19_video\"</span>);</span><br><span class=\"line\">    String[] arr = f7.list();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s : arr) &#123;</span><br><span class=\"line\">      System.out.println(s); <span class=\"comment\">//文件名称/目录名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    File[] filearr = f7.listFiles();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File sf : filearr) &#123;</span><br><span class=\"line\">      System.out.println(sf); <span class=\"comment\">//绝对路径目录并且带文件路径</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式<span class=\"number\">1</span>：判断update.sh是否存在 : <span class=\"keyword\">true</span></span><br><span class=\"line\">方式<span class=\"number\">2</span>：<span class=\"keyword\">true</span></span><br><span class=\"line\">方式<span class=\"number\">3</span>：<span class=\"keyword\">true</span> - <span class=\"keyword\">true</span></span><br><span class=\"line\">文件已经创建</span><br><span class=\"line\">创建单个文件 ：<span class=\"keyword\">false</span></span><br><span class=\"line\">创建单个文件 ：<span class=\"keyword\">false</span></span><br><span class=\"line\">文件删除：<span class=\"keyword\">false</span></span><br><span class=\"line\">文件夹删除：<span class=\"keyword\">false</span></span><br><span class=\"line\">是否是文件: <span class=\"keyword\">true</span></span><br><span class=\"line\">是否是文件夹: <span class=\"keyword\">true</span></span><br><span class=\"line\">绝对路径：E:\\githubProject\\Study-Promgram\\update.sh</span><br><span class=\"line\">Filel类实例化传入路径 : E:\\githubProject\\Study-Promgram\\update.sh</span><br><span class=\"line\">文件名称: update.sh</span><br><span class=\"line\">文件大写: <span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"number\">2019</span>年<span class=\"number\">09</span>月<span class=\"number\">29</span>日 <span class=\"number\">17</span>:<span class=\"number\">09</span>:<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">19.14</span>_File类(File类的概述和构造方法).avi</span><br><span class=\"line\"><span class=\"number\">19.15</span>_File类(File类的创建功能).avi</span><br><span class=\"line\"><span class=\"number\">19.16</span>_File类(File类的重命名和删除功能).avi</span><br><span class=\"line\"><span class=\"number\">19.17</span>_File类(File类的判断功能).avi</span><br><span class=\"line\"><span class=\"number\">19.18</span>_File类(File类的获取功能).avi</span><br><span class=\"line\"><span class=\"number\">19.19</span>_File类(输出指定目录下指定后缀的文件名).avi</span><br><span class=\"line\"><span class=\"number\">19.20</span>_File类(文件名称过滤器的概述及使用).avi</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.14</span>_File类(File类的概述和构造方法).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.15</span>_File类(File类的创建功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.16</span>_File类(File类的重命名和删除功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.17</span>_File类(File类的判断功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.18</span>_File类(File类的获取功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.19</span>_File类(输出指定目录下指定后缀的文件名).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.20</span>_File类(文件名称过滤器的概述及使用).avi</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>如果你创建文件或者文件夹忘了写盘符路径，那么默认在项目路径下。</li>\n<li>重命名注意如果路径名相同，就是改名; 如果路径名不同，就是改名并剪切。</li>\n<li>Java中的删除不走回收站,且要删除一个文件夹，请注意该文件夹内不能包含文件或者文件夹。</li>\n</ul>\n<p><br></p>\n<h5 id=\"File类过滤器\"><a href=\"#File类过滤器\" class=\"headerlink\" title=\"File类过滤器\"></a>File类过滤器</h5><p>描述:利用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件名称过滤器的概述</span></span><br><span class=\"line\">* public String[] list(FilenameFilter filter) <span class=\"comment\">#存放满足条件的文件名称字符串数组(list方法的匿名内部类)</span></span><br><span class=\"line\">* public File[] listFiles(FileFilter filter)  <span class=\"comment\">#存放满足条件的文件名称File类数组(有不同哟)</span></span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.文件过滤查找实例(条件判断)</span></span><br><span class=\"line\">    File f1 = <span class=\"keyword\">new</span> File(<span class=\"string\">\"F:/day19_video\"</span>);</span><br><span class=\"line\">    File[] subFiles = f1.listFiles();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : subFiles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(file.isFile() &amp;&amp; file.getName().endsWith(<span class=\"string\">\".avi\"</span>))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//输出后缀为.avi的文件</span></span><br><span class=\"line\">        System.out.println(file);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//实例2.过滤器的使用;需求：判断E盘目录下是否有后缀名为.jpg的文件，如果有就输出该文件名称</span></span><br><span class=\"line\">    String[] arr = f1.list(<span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(dir, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> file.isFile() &amp;&amp; file.getName().endsWith(<span class=\"string\">\".avi\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String str : arr) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"满足条件的 ：\"</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.14</span>_File类(File类的概述和构造方法).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.15</span>_File类(File类的创建功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.16</span>_File类(File类的重命名和删除功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.17</span>_File类(File类的判断功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.18</span>_File类(File类的获取功能).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.19</span>_File类(输出指定目录下指定后缀的文件名).avi</span><br><span class=\"line\">F:\\day19_video\\<span class=\"number\">19.20</span>_File类(文件名称过滤器的概述及使用).avi</span><br><span class=\"line\"></span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.14</span>_File类(File类的概述和构造方法).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.15</span>_File类(File类的创建功能).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.16</span>_File类(File类的重命名和删除功能).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.17</span>_File类(File类的判断功能).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.18</span>_File类(File类的获取功能).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.19</span>_File类(输出指定目录下指定后缀的文件名).avi</span><br><span class=\"line\">满足条件的 ：<span class=\"number\">19.20</span>_File类(文件名称过滤器的概述及使用).avi</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"File类的使用\"><a href=\"#File类的使用\" class=\"headerlink\" title=\"File类的使用\"></a>File类的使用</h5><p>描述:实现File类的递归文件夹进行查找文件,从键盘接收一个文件夹路径打印出该文件下的所有的java文件名;</p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_FileRecursion</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需求1.从键盘接收一个文件夹路径打印出该文件下的所有的java文件名;</span></span><br><span class=\"line\">    File path = getFile();</span><br><span class=\"line\">    printTxt(path);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//终端输入路径并进验证</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"请输入一个文件夹路径:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">      String path = sc.nextLine();</span><br><span class=\"line\">      File dir = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!dir.exists()) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"录入的文件夹路径不存在,请重新输入\"</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir.isFile()) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"您录的是一个文件,请重新输入一个文件夹路径\"</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dir;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//递归函数</span></span><br><span class=\"line\">  <span class=\"comment\">//获取文件夹路径下的所有的文件</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printTxt</span><span class=\"params\">(File dir)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">    File[] subFiles = dir.listFiles();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : subFiles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(file.isFile() &amp;&amp; file.getName().endsWith(<span class=\"string\">\".txt\"</span>))&#123;</span><br><span class=\"line\">        System.out.println(file);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(file.isDirectory())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!file.getPath().endsWith(<span class=\"string\">\".\"</span>)) &#123;</span><br><span class=\"line\">          printTxt(file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 请输入一个文件夹路径:d:\\</span></span><br><span class=\"line\"><span class=\"comment\">// d:\\65c8e74d816b6aae2e0c208aa0b5c64c\\目录说明.txt</span></span><br><span class=\"line\"><span class=\"comment\">// d:\\Builder\\mingw64\\build-info.txt</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"File递归使用\"><a href=\"#File递归使用\" class=\"headerlink\" title=\"File递归使用\"></a>File递归使用</h5><p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.file;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_RecursionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1.通过从键盘录入一个路径然后统计该路径下所有文件大小</span></span><br><span class=\"line\">    <span class=\"comment\">// 从键盘接收一个文件夹(注意直接获取文件夹size是0)</span></span><br><span class=\"line\">    <span class=\"comment\">//File dir = getPath();</span></span><br><span class=\"line\">    <span class=\"comment\">// 统计好文件夹大小</span></span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(dir.getPath() +\" 路径下的所有文件大小: \" + (getFileSize(dir) / 1024.0 / 1024.0) + \"MB\" );</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//实例2.从键盘接收一个文件夹路径删除该文件夹</span></span><br><span class=\"line\">    <span class=\"comment\">//delFile(dir);</span></span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(\"文件夹删除完毕!\");</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.键盘接收两个文件夹路径拷贝到宁一个文件夹中;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tFile src = getPath();  </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tFile dest = getPath();  //实现建立一个已存在的新目标文件夹</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t//防止空文件夹循环执行建立,不会进行循环遍历建立</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif(src.equals(dest))&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(\"目标与源对象是同一个文件目录!(不能进行拷贝)\"); //目标文件夹是源文件夹的子文件夹</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tcopyFile(src, dest);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例4.键盘接收一个文件夹路径把文件中所有文件以及文件名称按照层级打印</span></span><br><span class=\"line\">    File dir = getPath();</span><br><span class=\"line\">    printfFile(dir,<span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * getPath() </span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能:获取键盘输入得路径并进行一系列判断并且返回File类型得文件夹路径对象</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span>:File</span></span><br><span class=\"line\"><span class=\"comment\">\t * */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入要统计/删除/拷贝文件夹得路径:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      String lines = sc.nextLine();</span><br><span class=\"line\">      File path = <span class=\"keyword\">new</span> File(lines);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!path.exists())</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"录入得文件夹路径不存在,请重新输入\"</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(path.isFile())&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"您录入得是一个文件不是文件夹,请重新输入:\"</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">\t * getFileSize : 统计该文件夹大小;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> dir</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getFileSize</span><span class=\"params\">(File dir)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义求和变量</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//获取该文件夹下得所有文件路径</span></span><br><span class=\"line\">    File[] file = dir.listFiles();</span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File subFile : file) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(subFile.isFile())&#123;</span><br><span class=\"line\">        len += subFile.length(); <span class=\"comment\">//如果是文件获取其size然后进行累加</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        len += getFileSize(subFile); <span class=\"comment\">//如果是文件就采用递归进行调用</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">\t * delFile: 获取并删除该文件夹下的所有文件和文件夹</span></span><br><span class=\"line\"><span class=\"comment\">\t * Description：删除不走回车站</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> dir</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">delFile</span><span class=\"params\">(File dir)</span></span>&#123;</span><br><span class=\"line\">    File[] subFiles = dir.listFiles();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : subFiles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(file.isFile())&#123;</span><br><span class=\"line\">        file.delete();  <span class=\"comment\">//删除文件</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        delFile(file);  <span class=\"comment\">//递归调用文件夹进行删除</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dir.delete(); <span class=\"comment\">// 遍历删除后直接删除空文件夹</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * copyFile() : 把其中一个文件夹中(包含内容)拷贝到另外一个文件夹中</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> File,File</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> IOException </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@Return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(File src, File dest)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//在目标文件夹中创建原文件夹</span></span><br><span class=\"line\">    File newDir = <span class=\"keyword\">new</span> File(dest, src.getName());</span><br><span class=\"line\">    System.out.println(src.getName());</span><br><span class=\"line\">    newDir.mkdir();</span><br><span class=\"line\">    <span class=\"comment\">//获取原文件中所有的文件和文件夹存储在File数组中</span></span><br><span class=\"line\">    File[] subFiles = src.listFiles();</span><br><span class=\"line\">    <span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File file : subFiles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(file.isFile())</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">//后面会介绍到IO流(不急),这里采用字节流</span></span><br><span class=\"line\">        BufferedInputStream bis = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(file));  <span class=\"comment\">//创建输入流</span></span><br><span class=\"line\">        BufferedOutputStream bos = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(newDir,file.getName()))); <span class=\"comment\">//新的路径+文件名称</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((ch = bis.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">          bos.write(ch);</span><br><span class=\"line\">        </span><br><span class=\"line\">        bis.close();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归调用处理文件夹</span></span><br><span class=\"line\">        copyFile(file, newDir); <span class=\"comment\">//精华之所在在新建立路径建立文件夹</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * printfFile : 层级打印文件夹下的文件(非常值得学习)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printfFile</span><span class=\"params\">(File dir,<span class=\"keyword\">int</span> flag)</span></span>&#123;</span><br><span class=\"line\">    File[] subFiles = dir.listFiles();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File subFile: subFiles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= flag; i++)&#123; <span class=\"comment\">//精华之处当前层级处理完原来层级目录下的flag是不改变的</span></span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"&gt; \"</span>);  </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(subFile.getName());</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(subFile.isDirectory())</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        printfFile(subFile,flag+<span class=\"number\">1</span>);  <span class=\"comment\">//注意++flag/flag++都会出现层级不一致的问题（会导致原有的flag值覆盖，zhi）</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请输入要统计/删除/拷贝文件夹得路径:F:\\Shadowsocks-configure</span></span><br><span class=\"line\"><span class=\"comment\">// F:\\Shadowsocks-configure 路径下的所有文件大小: 10.199078559875488MB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请输入要统计文件夹得路径:F:\\SS</span></span><br><span class=\"line\"><span class=\"comment\">// 删除完毕!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请输入要统计/删除/拷贝文件夹得路径:F:\\Shadowsocks-configure</span></span><br><span class=\"line\"><span class=\"comment\">// 请输入要统计/删除/拷贝文件夹得路径:f:\\SS</span></span><br><span class=\"line\"><span class=\"comment\">// Shadowsocks-configure</span></span><br><span class=\"line\"><span class=\"comment\">// ss_win_temp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请输入要统计/删除/拷贝/打印的文件夹得路径:f:\\ss</span></span><br><span class=\"line\"><span class=\"comment\">// Shadowsocks-configure</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; gui-config.json</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; libwinpthread-1.dll</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; obfs-local.exe</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; pac.txt</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; ss.exe</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; ss_win_temp</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; gfwlist.txt</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; libsscrypto.dll</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; mgwz.dll</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; privoxy_-1874302787.conf</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; privoxy_-2036185281.conf</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; privoxy_1208268387.conf</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; privoxy_1347100589.conf</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; privoxy_507497830.conf</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; Shadowsocks-4.1.7.1.zip</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; shadowsocks.availability.json</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; shadowsocks.log</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; ss_privoxy.exe</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; ss_privoxy.log</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; sysproxy.exe</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; &gt; user-wininet.json</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; statistics-config.json</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191014090433.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><strong>注意事项</strong></p>\n<ul>\n<li>递归recursion优缺点：<ul>\n<li>弊端:调用的次数过多容易导致栈内存溢出;<ul>\n<li>优点:精简代码无序固定设置循环次数;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构造放不能使用递归调用</li>\n<li>递归不一定存在返回值(可以有也可以没有)</li>\n</ul>\n<hr>\n\n<h4 id=\"IO流概述和使用\"><a href=\"#IO流概述和使用\" class=\"headerlink\" title=\"IO流概述和使用\"></a>IO流概述和使用</h4><p>描述:IO流用来处理设备之间的数据传输</p>\n<ul>\n<li>Java对数据的操作是通过流的方式，用于操作流的类都在IO包中(java.io)</li>\n<li>流按流向分为两种：<code>输入流，输出流</code>。</li>\n<li>流按操作类型分为两种：<ul>\n<li><code>字节流</code> : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的(任意文件)</li>\n<li><code>字符流</code> : 字符流只能操作纯字符数据，比较方便。</li>\n</ul>\n</li>\n</ul>\n<p><strong>IO流常用父类：</strong></p>\n<ul>\n<li>字节流的抽象父类(不能够直接实例化的对象，必须采用其继承的子类对象)：<ul>\n<li>InputStream <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该抽象类是所有的类表示字节输入流的父类。</span></span><br><span class=\"line\"><span class=\"comment\">#它需要定义一个类InputStream应用程序必须提供一个方法，返回输入的下一个字节。</span></span><br><span class=\"line\">public abstract class InputStream</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Closeable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#子类接口</span></span><br><span class=\"line\">FileInputStream(<span class=\"string\">\"文件路径\"</span>) <span class=\"comment\">#是读取原始字节的图像数据流。</span></span><br><span class=\"line\">FileReader <span class=\"comment\">#是读取字符流</span></span><br></pre></td></tr></table></figure></li>\n<li>OutputStream<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该抽象类是所有类的字节输出流的父类。</span></span><br><span class=\"line\"><span class=\"comment\">#输出流接受输出字节，并将它们发送到一些接收器。</span></span><br><span class=\"line\">public abstract class OutputStream</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Closeable, Flushable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#子类接口</span></span><br><span class=\"line\">FileOutputStream(<span class=\"string\">\"文件路径\"</span>,追加(True/False)) <span class=\"comment\">#是写作的原始字节的图像数据流。</span></span><br><span class=\"line\">FileWriter <span class=\"comment\">#书写的字符流考虑使用它。</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>字符流的抽象父类：<ul>\n<li>Reader </li>\n<li>Writer</li>\n</ul>\n</li>\n<li>IO流常用的异常<ul>\n<li>IOException<ul>\n<li>FileNotFoundException</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>IO程序书写:</strong></p>\n<ul>\n<li>使用前，导入IO包中的类</li>\n<li>使用时，进行IO异常处理,内存与硬盘相关的关系需要进行异常的处理;</li>\n<li>使用后，释放资源,对内存和磁盘操作后都需要进行释放资源;</li>\n</ul>\n<p>IO流常用方法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#InputStream的FileInputStream子类中方法</span></span><br><span class=\"line\">- <span class=\"built_in\">read</span>() <span class=\"comment\">#方法读取的字节个数返回的是int(有参数字节数组时候返回实际读取的个数)，如果没有有效的字节个数则返回-1;</span></span><br><span class=\"line\">- available()  <span class=\"comment\">#返回一个剩余的字节数的估计，可以从这个输入流读取（或跳过），而不阻塞该输入流的方法的下一次调用。 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#OutputStream的FileOnputStream子类中方法</span></span><br><span class=\"line\">- write() <span class=\"comment\">#方法一次写出一个字节，可以指定byte[]字节数组索引和长度</span></span><br><span class=\"line\">- write(byte[] b)</span><br><span class=\"line\">- write(byte[] b, int off, int len) <span class=\"comment\">#写出有效的字节个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通用方法</span></span><br><span class=\"line\">- close() 方法关闭打开的资源</span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_IO</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1.一个读程序案例InputStream</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"c:\\\\read.txt\"</span>); <span class=\"comment\">//创建流对象并关联demo.txt</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"文件中读取到的字符: \"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((flag = fis.read()) != -<span class=\"number\">1</span>)  <span class=\"comment\">//从硬盘上读取一个字节结束标志为-1</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        System.out.print(Character.toChars(flag)); <span class=\"comment\">//打印每一个字符将字节编码转换成为字符</span></span><br><span class=\"line\">      &#125;\t</span><br><span class=\"line\">      fis.close();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(IOException e) &#123;</span><br><span class=\"line\">      System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 示例2.写入字符到文本之中</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//创建数据流对象如果没有该文件则建立该文件,如果有这个文件会将覆盖其内容</span></span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"c:\\\\write.txt\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">32</span>; i &lt; <span class=\"number\">128</span>; i++) &#123;</span><br><span class=\"line\">        fos.write(i); <span class=\"comment\">//虽然写出的是一个int数,但是在写出的时候会将前面的24个0去掉所以写出的一个byte</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\\nASCII码字符写入覆盖成功!\"</span>);</span><br><span class=\"line\">      fos.close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">      System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.FileOutputStream实现数据的追加写入</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"c:\\\\write.txt\"</span>, <span class=\"keyword\">true</span>); <span class=\"comment\">//多个一个boolean参数表示进行追加写入</span></span><br><span class=\"line\">      fos.write(<span class=\"string\">'\\r'</span>); <span class=\"comment\">//换行回车符</span></span><br><span class=\"line\">      fos.write(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'e'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'n'</span>);</span><br><span class=\"line\">      fos.write(<span class=\"string\">'d'</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"追加Append写入成功!\"</span>);</span><br><span class=\"line\">      fos.close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">文件中读取到的字符: abc</span><br><span class=\"line\">ASCII码字符写入覆盖成功!</span><br><span class=\"line\">追加Append写入成功!</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191008220605.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p>基础示例2:(拷贝图片、音频采用字节流)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基础示例</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_IOunion</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.IO流程核心拷贝图片字节流(输入流、输出流)-方式1</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"F:\\\\IMG_2330.PNG\"</span>); <span class=\"comment\">//创建输入流</span></span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"F:\\\\IMG_2330.bak.png\"</span>); <span class=\"comment\">//创建输出流</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flag;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((flag = fis.read()) != -<span class=\"number\">1</span>) <span class=\"comment\">//相当于是copy的效果但是(效率太低-有多少个字节都需要读取多少次)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        fos.write(flag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">\"示例1.输入流与输出流联合使用进行Copy图片的效果;\"</span>);</span><br><span class=\"line\">      fis.close(); <span class=\"comment\">//关闭输入流打开的文件释放资源</span></span><br><span class=\"line\">      fos.close(); <span class=\"comment\">//关闭输出流打开的文件释放资源</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception e) &#123;</span><br><span class=\"line\">      System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.IO拷贝音视频资源字节流(一次性-1B-8bit)-方式2(但是此种方式容易导致内存溢出)</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"F:\\\\I2330.mp3\"</span>); <span class=\"comment\">//创建输入流</span></span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"F:\\\\2330.bak.mp3\"</span>); <span class=\"comment\">//创建输出流</span></span><br><span class=\"line\">      <span class=\"keyword\">byte</span>[] count = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[fis.available()]; <span class=\"comment\">//存入可用字节数到数组之中(创建和文件相同大小的字节数组-一次性读完)</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"音频大小: \"</span>+fis.available()+<span class=\"string\">\" Byte\"</span>);</span><br><span class=\"line\">      fis.read(count); <span class=\"comment\">//将文件上的Byte类型数组数据字节读取到内存中(读到 b.length从输入流到字节数组数据字节。 )</span></span><br><span class=\"line\">      fos.write(count); <span class=\"comment\">//将字节数组中的字节数据写到文件上</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      System.out.println();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"示例2.一次性读取文件大的字节数到内存中,然后再内存中的字节数据写入到磁盘文件中\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//执行结果输出</span></span><br><span class=\"line\">示例<span class=\"number\">1</span>.输入流与输出流联合使用进行Copy图片的效果;图片大小: <span class=\"number\">69982</span> Byte</span><br><span class=\"line\">示例<span class=\"number\">2</span>.一次性读取文件大的字节数到内存中,然后再内存中的字节数据写入到磁盘文件中</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>注意事项:</strong></p>\n<ul>\n<li>文件读取的结束标记是-1与C语言是00它们是不同的;</li>\n<li>read()为什么返回是int而不是byte?<ul>\n<li>因为字节输入流可以操作任意类型的文件,比如图片音频等文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111；那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上24个0凑足4个字节,那么byte类型的-1就变成int类型的255了这样可以保证整个数据读完,而结束标记的-1就是int类型。 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">比如:一个文本的字节流表示</span><br><span class=\"line\">00010100 00100100 01000001 11111111(byte会导致提前结束读取) 0000000</span><br><span class=\"line\">10000001 <span class=\"comment\">#byte类型-1的原码</span></span><br><span class=\"line\">11111110 <span class=\"comment\">#-1的反码</span></span><br><span class=\"line\">11111111 <span class=\"comment\">#-1的补码(所以当遇到的时候将会被认为是提前结束了)</span></span><br></pre></td></tr></table></figure>\n<br></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"IO字节流数组\"><a href=\"#IO字节流数组\" class=\"headerlink\" title=\"IO字节流数组\"></a>IO字节流数组</h5><p>描述:IO流采用字节数组可以更快更方便的进行文件的读取和写入，并且提高了大文件的读取和写入的效率;<br>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_IOarray</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例3.读取的第三种方式</span></span><br><span class=\"line\">    FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"C:\\\\demo.avi\"</span>);</span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\demo.avi\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] len = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">8</span>]; <span class=\"comment\">//值得学习1024=1k * 8 = 8K</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"comment\">//如果read里没有加上len返回就不是读取的个数,而是字节的码表值 300 - 6 = 294(98 + 97 + 99)abc</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((length = fis.read(len)) != -<span class=\"number\">1</span>)  <span class=\"comment\">//read(len) 返回实际读取到的字节个数(将文件上的字节读取到字节数组中)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      fos.write(len, <span class=\"number\">0</span>, length);  <span class=\"comment\">//指定索引和偏移来截取写入(这样就不可能多读或者少读)-会进行循环拷贝每次8k数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fis.close();</span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"IO字节流缓存\"><a href=\"#IO字节流缓存\" class=\"headerlink\" title=\"IO字节流缓存\"></a>IO字节流缓存</h5><p>描述:缓冲思想字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多(效率也比较高)，这是加入了数组这样的缓冲区效果，java本身在设计的时候也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了<code>字节缓冲区流</code><br><br><br>BufferedInputStream子类</p>\n<ul>\n<li>内置了一个缓冲区(数组)从中读取一个字节时BufferedInputStream会一次性从文件中读取8192个, 存在缓冲区中返回给程序一个，程序再次读取时就不用找文件了, 直接从缓冲区中获取直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个;<br>BufferedOutputStream子类</li>\n<li>也内置了一个缓冲区(数组)程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.io.InputStream </span><br><span class=\"line\">java.io.FilterInputStream </span><br><span class=\"line\">java.io.BufferedInputStream|BufferedOutputStream </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#从流中读取字节或跳过，内部缓冲区填充为必要从包含输入流，同时许多字节</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BufferedInputStream</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">FilterInputStream</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#实现一个缓冲输出流。通过设置这样的输出流，一个应用程序可以写字节到基本的输出流，而不必导致每个字节写入的底层系统的调用。 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">BufferedOutputStream</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">FilterOutputStream</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#公用方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">close</span>() 方法 //#如果是带缓冲区的流对象的该方法具备刷新的功能会在关闭流之前会刷新一次缓存区，并且将缓冲区的字节全部都刷新到文件之上再关闭流释放资源的</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">flush()方法  <span class=\"comment\">//#用来刷新缓冲区的刷新后可以再次写出</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_IOBuffered</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例:BufferedInputStream 与 BufferedOutputStream</span></span><br><span class=\"line\">    BufferedInputStream bis = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"c:\\\\demo.txt\"</span>)); <span class=\"comment\">//创建文件输入流对象并且创建缓冲区对FileInputStream对象装饰</span></span><br><span class=\"line\">    BufferedOutputStream bos = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\demo.bak.txt\"</span>)); <span class=\"comment\">//创建文件输出流对象并且创建缓冲区对FileInputStream对象装饰(让其变得更加的强大))</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((b = bis.read()) != -<span class=\"number\">1</span>) &#123;\t <span class=\"comment\">//每次读取8192字节数据进行读取到内存然后写入到磁盘中</span></span><br><span class=\"line\">      bos.write(b);  <span class=\"comment\">//从内存中读取写入到磁盘中，经过两个字节数组转换效率不如byte数组直接公用效率高省内存</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//只需要关闭装饰后的对象即可原实例化对象不需要管理</span></span><br><span class=\"line\">    bis.close();</span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009095234.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><em>补充:小数组的读写和带Buffered的读取哪个更快?</em><br>答：定义小数组如果是8192个字节大小和Buffered比较的话，定义小数组会略胜一筹,因为读和写操作的是同一个数组而Buffered操作的是两个数组</p>\n<p><em>补充:close()与flush()方法的区别</em></p>\n<ul>\n<li>close() 关闭流后不能继续读写</li>\n<li>flush() 刷新缓冲区后可以继续读写</li>\n</ul>\n<p><br></p>\n<h5 id=\"IO字节流中文处理\"><a href=\"#IO字节流中文处理\" class=\"headerlink\" title=\"IO字节流中文处理\"></a>IO字节流中文处理</h5><p>描述:字节流在读中文的时候有可能会读到半个中文会造成乱码(中文占用2Byte);由于字节流直接操作的字节,所以写出中文必须将<code>字符串转换成字节数组</code>写出回车换行<code>write(&quot;\\r\\n&quot;.getBytes());</code></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo6_IOrwchinese</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例：IO流读取写入中文</span></span><br><span class=\"line\">    BufferedInputStream bis = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo.txt\"</span>));</span><br><span class=\"line\">    BufferedOutputStream bos = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bis.available()]; <span class=\"comment\">//字节数组</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//读取</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = bis.read(arr);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"文件大小: \"</span>+ size + <span class=\"string\">\"B\"</span>); <span class=\"comment\">//实际读取的文件大小</span></span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String(arr,<span class=\"number\">0</span>,size));  <span class=\"comment\">//采用String类直接采用字节数组来读取中文字符</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//写入</span></span><br><span class=\"line\">    bos.write(arr);                              <span class=\"comment\">//write直接写入中文</span></span><br><span class=\"line\">    bos.write(<span class=\"string\">\"\\r\\n\"</span>.getBytes()); \t\t\t\t <span class=\"comment\">//Windows下的回车换行符转换为字节数组</span></span><br><span class=\"line\">    bos.write(<span class=\"string\">\"我和我的祖国一刻也不能分割!\"</span>.getBytes());  <span class=\"comment\">//也可以直接将字符串转换成为字节数组</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    bis.close();</span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果:</span></span><br><span class=\"line\">文件大小: <span class=\"number\">17</span>B</span><br><span class=\"line\">我爱您,祖国!</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009112059.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"IO字节流异常处理\"><a href=\"#IO字节流异常处理\" class=\"headerlink\" title=\"IO字节流异常处理\"></a>IO字节流异常处理</h5><p>描述:对于内存和磁盘的操作读写都需要对其进行异常处理，提高程序的健壮性;<br>原理:自动关闭IO流<code>在try()中创建的流对象必须实现了AutoCloseable这个接口</code>,如果实现了在try后面的{}(读写代码)执行后就会<code>自动调用流对象的close方法</code>将流关掉; (<code>类似于PHP中操作文件fopen()的析构方法进行文件关闭处理</code>)</p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_IOException</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1：IO流的异常处理(1.6版本)</span></span><br><span class=\"line\">    <span class=\"comment\">//demo1();</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例2：IO流的异常处理(1.7版本-自动关闭流)</span></span><br><span class=\"line\">    <span class=\"comment\">//inputStream体系实现了AutoCloseable接口是从jdk1.7版本开始的</span></span><br><span class=\"line\">    <span class=\"comment\">//坑呀注意try后面是()而不是&#123;&#125;,而且我们重写了自动关闭流的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>(</span><br><span class=\"line\">      FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo.txt\"</span>);</span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);</span><br><span class=\"line\">      MyClose mc = <span class=\"keyword\">new</span> MyClose(fis,fos);  <span class=\"comment\">//重写自动关闭流的接口</span></span><br><span class=\"line\">    )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((n = fis.read()) != -<span class=\"number\">1</span> )</span><br><span class=\"line\">      fos.write(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">    FileInputStream fis = <span class=\"keyword\">null</span>; <span class=\"comment\">// 这里的null是非常重要的</span></span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">    <span class=\"comment\">//异常处理开始</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\demo.txt\"</span>);</span><br><span class=\"line\">      fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((b = fis.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">        fos.write(b);</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//try fianlly的嵌套目的是能关一个尽量关一个 (标准化值得学习)</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//值得学习</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fis != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  \tfis.close();</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                  \tfis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                      e.printStackTrace();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fos != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          fos.close();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClose</span> <span class=\"keyword\">implements</span> <span class=\"title\">AutoCloseable</span></span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyClose</span><span class=\"params\">(FileInputStream fis,FileOutputStream fos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fis = fis;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fos = fos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"重写自动关闭流!采用AutoCloseable()接口\"</span>);</span><br><span class=\"line\">    fis.close();</span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">重写自动关闭流!采用AutoCloseable()接口</span><br></pre></td></tr></table></figure></p>\n<p><strong>JDK1.7及以上IO流自动关闭总结：</strong></p>\n<ul>\n<li>（1）需要关闭的资源必须实现Closeable或者AutoCloseable；查看JDK源码，Closeable继承自AutoCloseable，这两个接口中只有一个方法：void close() throws Exception;</li>\n<li>（2）需要关闭的资源必须重写close()方法，方法中必须包含完整的资源关闭操作代码；</li>\n<li>（3）调用写法：自动关闭功能属于try的增强特性，此时无需显式的书写资源关闭代码，try段代码执行完毕后，系统会自动调用资源的关闭方法关闭资源：<br><br></li>\n</ul>\n<h5 id=\"IO字节流图片加解密思路\"><a href=\"#IO字节流图片加解密思路\" class=\"headerlink\" title=\"IO字节流图片加解密思路\"></a>IO字节流图片加解密思路</h5><p>描述:1Byte=8bit（11111111 - 127(max)）将写出的字节异或一个密匙，解密的时候再次异或即可；</p>\n<p>基础实例:(完整的采用处理异常的方法进行))<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo8_ImagesEncrpty</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例实现图片的加解密并且复用两种异常处理方法</span></span><br><span class=\"line\">    Byte secret = <span class=\"number\">127</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"1.图片加密中!\"</span>);</span><br><span class=\"line\">    encryption(secret);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"2.图片解密中!\"</span>);</span><br><span class=\"line\">    decrption(secret);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//图片加密</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">encryption</span><span class=\"params\">(Byte secretKey)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\qq.png\"</span>);</span><br><span class=\"line\">      fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\qq.encrpty.png\"</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((count = fis.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">        fos.write(count ^ secretKey);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"qq.png 加密完成!\"</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(fis != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(fos != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//图片解密</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">decrption</span><span class=\"params\">(Byte secretKey)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>(</span><br><span class=\"line\">      FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\qq.encrpty.png\"</span>);</span><br><span class=\"line\">      FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\qq.decrpty.png\"</span>);</span><br><span class=\"line\">    )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(( count = fis.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">        fos.write(count ^ secretKey);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"qq.encrpty.png 解密完成!\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"comment\">//自动的调用AutoCloseable方法;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//###执行结果###</span></span><br><span class=\"line\"><span class=\"number\">1</span>.图片加密中!</span><br><span class=\"line\">qq.png 加密完成!</span><br><span class=\"line\"><span class=\"number\">2</span>.图片解密中!</span><br><span class=\"line\">qq.encrpty.png 解密完成!</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191009171207.png\" alt=\"WeiyiGeek.加密后的效果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.加密后的效果</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"IO字节流综合实例\"><a href=\"#IO字节流综合实例\" class=\"headerlink\" title=\"IO字节流综合实例\"></a>IO字节流综合实例</h5><p>需求1:在控制台录入文件的路径,将文件拷贝到当前项目下;<br>需求2:将键盘录入的数据拷贝到当前项目下文件中(上面的文件名称追加数据),键盘录入数据当遇到quit时就退出;<br>基础实例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo9_IOSynthesize</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 需求1:在控制台录入文件的路径,将文件拷贝到当前项目下</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 需求分析:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1,定义方法对键盘录入的路径进行判断,如果是文件就返回</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2,在主方法中接收该文件</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3,读和写该文件 */</span></span><br><span class=\"line\">    File file = getFile(); <span class=\"comment\">//利用File类获取文件</span></span><br><span class=\"line\">    BufferedInputStream bis = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(file));</span><br><span class=\"line\">    BufferedOutputStream bos = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(file.getName())); <span class=\"comment\">//获取路径中的文件名称并将数据存储再当前目录中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((b = bis.read()) != -<span class=\"number\">1</span>)\t&#123;</span><br><span class=\"line\">      bos.write(b);</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">    bis.close();</span><br><span class=\"line\">    bos.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 需求2：将键盘录入的数据拷贝追加到当前项目下的文件中(上面需求1再当前目录下建立的文件),键盘录入数据当遇到quit时就退出</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 分析:</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1,创建键盘录入对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2,创建输出流对象关联需求1再当前目录下建立的文件</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3,定义无限循环</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4,遇到quit退出循环</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 5,如果不quit,就将内容写出</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 6,关闭流</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * <span class=\"doctag\">@throws</span> IOException </span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//1,创建键盘录入对象</span></span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    <span class=\"comment\">//2,创建输出流对象关联file.getName()文件(追加)</span></span><br><span class=\"line\">    FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(file.getName(),<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"请输入数据:\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//3,定义无限循环</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      String line = sc.nextLine();\t\t\t\t\t<span class=\"comment\">//将键盘录入的数据存储在line中</span></span><br><span class=\"line\">      <span class=\"comment\">//4,遇到quit退出循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"string\">\"quit\"</span>.equals(line)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//5,如果不quit,就将内容写出</span></span><br><span class=\"line\">      fos.write(line.getBytes());\t\t\t\t\t\t<span class=\"comment\">//字符串写出必须转换成字节数组</span></span><br><span class=\"line\">      fos.write(<span class=\"string\">\"\\r\\n\"</span>.getBytes());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//6,关闭流</span></span><br><span class=\"line\">    fos.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//(1)验证并且获取控制台输入的地址</span></span><br><span class=\"line\">  <span class=\"comment\">/* 定义一个方法获取键盘录入的文件路径并封装成File对象返回</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1,返回值类型File</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2,参数列表无</span></span><br><span class=\"line\"><span class=\"comment\">\t * */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"请输入一个文件路径:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      String line = sc.nextLine();</span><br><span class=\"line\">      File file = <span class=\"keyword\">new</span> File(line); <span class=\"comment\">//封装成File对象并对其进行判断(非常值得学习)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!file.exists())</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"文件路径\"</span> + line + <span class=\"string\">\", 文件不存在!请重写输入路径:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(file.isDirectory())</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"文件路径\"</span> + line + <span class=\"string\">\", 是个文件夹!请重写输入路径:\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> file;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">文件路径, 文件不存在!请重写输入路径:</span><br><span class=\"line\">d:\\demo.txt</span><br><span class=\"line\">请输入数据:</span><br><span class=\"line\">whoami? I<span class=\"string\">'m WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"string\">I Want to Study Java Paramgraming!</span></span><br><span class=\"line\"><span class=\"string\">quit'</span></span><br><span class=\"line\"><span class=\"comment\">//当前目录下的文件</span></span><br><span class=\"line\">我爱您,祖国!whoami? I<span class=\"string\">'m WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"string\">I Want to Study Java Paramgraming!</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"IO字符流介绍和使用\"><a href=\"#IO字符流介绍和使用\" class=\"headerlink\" title=\"IO字符流介绍和使用\"></a>IO字符流介绍和使用</h5><p><em>字符流是什么?</em><br>答:字符流是可以直接读写字符的IO流;使用过程字符流读取字符就要先读取到字节数据, 然后转为字符. 如果要写出字符需要把字符转为字节再写出(有了一个自动转换的功能) </p>\n<p><em>为什么IO字符流可以按字节区分读取中文</em><br>答:这是因为<code>编码表的功能</code>中文字符基本以负数的形式的体现的，所以比较好区分和划分，每一次发现一个负数也会将紧随其后的负数或者正数一起读取(即自动读取两个字节);</p>\n<p><strong>IO字符流类和方法</strong>:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.io.Reader </span><br><span class=\"line\">java.io.InputStreamReader | OutputStreamWriter </span><br><span class=\"line\">java.io.FileReader  | FileWriter </span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\"><span class=\"comment\">#FileReader类</span></span><br><span class=\"line\">public class FileReader extends InputStreamReader</span><br><span class=\"line\"><span class=\"comment\">#常用方法</span></span><br><span class=\"line\">- <span class=\"built_in\">read</span>() <span class=\"comment\">#方法可以按照字符大小读取(如果是中文字符一次性读取两个字节,读到末尾返回为-1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#FileWriter类</span></span><br><span class=\"line\">public class FileWriter extends OutputStreamWriter</span><br><span class=\"line\"><span class=\"comment\">#常用方法</span></span><br><span class=\"line\">- write()  <span class=\"comment\">#方法可以自动把字符转为字节写出到文件(可以写单个字符或者多个字符)</span></span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------</span><br><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.io.Reader </span><br><span class=\"line\">java.io.BufferedReader | java.io.BufferedWriter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#BufferedReader：从一个字符输入流中读取文本，缓冲字符，以便提供字符、数组和行的有效读取。 </span></span><br><span class=\"line\">public class BufferedReader extends Reader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文本写入到字符输出流中，缓冲字符，以便提供对单个字符、数组和字符串的有效写入。 </span></span><br><span class=\"line\">public class BufferedWriter extends Writer</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo10_IOCharStream</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1.字符流类FileReader的读取使用</span></span><br><span class=\"line\">    FileReader fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((x = fr.read()) != -<span class=\"number\">1</span>) <span class=\"comment\">//通过码表一次读取一个字符(如果是中文一次读取两个字节)</span></span><br><span class=\"line\">      System.out.print((<span class=\"keyword\">char</span>)x); <span class=\"comment\">//强制转型</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    fr.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例2.字符流类FileWriter的读取使用</span></span><br><span class=\"line\">    FileWriter fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\demo.txt\"</span>,<span class=\"keyword\">true</span>); </span><br><span class=\"line\">    fw.write(<span class=\"string\">\"\\r\\n我和我的祖国一刻也不能分割!\\r\\n\"</span>); <span class=\"comment\">//可以将中文字符串直接写入(其实底层还是将其转换成为字节数组存入)</span></span><br><span class=\"line\">    fw.write(<span class=\"number\">98</span>); <span class=\"comment\">//可以写出单个字符</span></span><br><span class=\"line\">    fw.close();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 实例3.字符流类实现字符的拷贝</span></span><br><span class=\"line\">    FileReader fr1 = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);</span><br><span class=\"line\">    FileWriter fw1 = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\demo.txt\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = fr1.read()) != -<span class=\"number\">1</span>)</span><br><span class=\"line\">      fw1.write(ch);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n字符流拷贝完成！正在关闭IO流！\"</span>);</span><br><span class=\"line\">    fr1.close();</span><br><span class=\"line\">    fw1.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//@@@执行结果@@@</span></span><br><span class=\"line\">我爱您,祖国!</span><br><span class=\"line\">字符流拷贝完成！正在关闭IO流！</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//demo.txt内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">我和我的祖国一刻也不能分割!</span><br><span class=\"line\">b我爱您,祖国!</span><br></pre></td></tr></table></figure></p>\n<p>注意事项:</p>\n<ul>\n<li><p>1.什么情况下使用字符流?什么情况下使用字节流?</p>\n<ul>\n<li>字符流也可以拷贝文本文件<code>但不推荐使用</code>. 因为读取时会把字节转为字符, 写出时还要把字符转回字节(效率问题);<ul>\n<li><code>[-]程序需要读取一段文本或者需要写出一段文本的时候(只读只写情况下)可以使用字符流</code>；优点:读取的时候是按照字符的大小读取的不会出现半个中文(乱码)；写出的时候可以直接将字符串写出不用转换为字节数组。</li>\n<li><code>[-]程序需要读取一段文本或者需要写出一段文本的时候可以使用字符</code>流；优点:读取的时候是按照字符的大小读取的不会出现半个中文；写出的时候可以直接将字符串写出不用转换为字节数组。<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010102047.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>2.字符流是否可以拷贝非纯文本的文件?</p>\n<ul>\n<li><code>不可以拷贝非纯文本的文件</code>;因为在读的时候会将字节转换为字符,在转换过程中,可能找不到对应的字符,就会用?代替,写出的时候会将字符转换成字节写出去如果是?,直接写出这样写出之后的文件就乱码无法正常打开;  </li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h5 id=\"IO字符流常规使用\"><a href=\"#IO字符流常规使用\" class=\"headerlink\" title=\"IO字符流常规使用\"></a>IO字符流常规使用</h5><p><strong>1.自定义字符数组</strong><br>描述:字符流不能向字节流一样可以获取字节个数,所以只能建立一个固定的小数组进行存放;</p>\n<p><strong>2.带缓冲的字符流</strong></p>\n<ul>\n<li>BufferedReader 的read()方法 读取字符时会一次读取若干字符到缓冲区, 然后逐个返回给程序, 降低读取文件的次数提高效率；</li>\n<li>BufferedWriter 的write()方法 写出字符时会先写到缓冲区, 缓冲区写满时才会写到文件, 降低写文件的次数,提高效率；</li>\n<li>BufferedReader 的readLine()方法 可以读取一行字符(不包含换行符号)以null标准结束</li>\n<li>BufferedWriter 的newLine()方法 可以输出一个跨平台的换行符号”\\r\\n”</li>\n<li>BufferedReader 的LineNumberReader 子类<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LineNumberReader是BufferedReader的子类, 具有相同的功能, 并且可以统计行号</span></span><br><span class=\"line\">public class LineNumberReader extends BufferedReader</span><br><span class=\"line\"><span class=\"comment\">#子类方法</span></span><br><span class=\"line\">void setLineNumber(int lineNumber)  <span class=\"comment\">#设置当前行数。  </span></span><br><span class=\"line\">int getLineNumber() <span class=\"comment\">#获取当前的读取字符串行数</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo11_IOCharCustom</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.自定义字符数组</span></span><br><span class=\"line\">    customArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.带缓冲的字符流</span></span><br><span class=\"line\">    bufferRW();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3.字符流缓存区读取和写入一行到文件</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"3.字符流缓存区读取和写入一行到文件\"</span>);</span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>));       <span class=\"comment\">//创建缓冲区字符输入流</span></span><br><span class=\"line\">    BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\demo.bak.txt\"</span>,<span class=\"keyword\">true</span>)); <span class=\"comment\">//创建缓冲区字符输出流</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    bw.write(<span class=\"string\">\"----------------------------------------------------\"</span>);</span><br><span class=\"line\">    bw.newLine();  <span class=\"comment\">//写成回车换行符</span></span><br><span class=\"line\">    String lines;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((lines = br.readLine()) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">      lines = <span class=\"string\">\"\\t\"</span> + count++ + <span class=\"string\">\".\"</span> + lines;</span><br><span class=\"line\">      System.out.println(lines);</span><br><span class=\"line\">      bw.write(lines);</span><br><span class=\"line\">      bw.newLine();\t\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    bw.close();\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//实例2</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bufferRW</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"2.带缓冲的字符流\"</span>);</span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>));       <span class=\"comment\">//创建缓冲区字符输入流</span></span><br><span class=\"line\">    BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\demo.bak.txt\"</span>,<span class=\"keyword\">true</span>)); <span class=\"comment\">//创建缓冲区字符输出流</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;\t</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = br.read()) != -<span class=\"number\">1</span>) &#123;\t\t<span class=\"comment\">//read一次会先将缓冲区读满从缓冲去中一个一个的返给临时变量ch</span></span><br><span class=\"line\">      bw.write(ch);\t\t\t\t\t<span class=\"comment\">//write一次是将数据装到字符数组装满后再一起写出去</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    bw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//实例1</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">customArray</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"1.自定义字符数组\"</span>);</span><br><span class=\"line\">    FileReader fr = <span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>);   <span class=\"comment\">//创建字符输入流</span></span><br><span class=\"line\">    FileWriter fw = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\demo.txt\"</span>); <span class=\"comment\">//创建字符输出流</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">1024</span>]; <span class=\"comment\">//创建字符数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((length = fr.read(arr)) != -<span class=\"number\">1</span>) <span class=\"comment\">//将数据读到字符数组中</span></span><br><span class=\"line\">      fw.write(arr,<span class=\"number\">0</span>,length);</span><br><span class=\"line\">    fr.close();</span><br><span class=\"line\">    fw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010111131.png\" alt=\"WeiyiGeek.执行结果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.执行结果</p>\n            </figure></p>\n<p><br></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.LineNumberReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo12_IOchardemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需求1:将一个文本文档上的文本反转第一行和倒数第一行交换,第二行和倒数第二行交换</span></span><br><span class=\"line\">    reserse();</span><br><span class=\"line\">    <span class=\"comment\">//需求2:BufferedReader子类LineNumberReader行号设置和获取</span></span><br><span class=\"line\">    lnr();</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reserse</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意事项(值得学习：流对象应该晚开早关)</span></span><br><span class=\"line\">    <span class=\"comment\">//1.创建输入流对象(关键点)</span></span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//2.创建带有索引的List集合Collection</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; al = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//3.读取字符流对象打开的文件的每一行转储到集合中</span></span><br><span class=\"line\">    String lines;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((lines = br.readLine()) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">      al.add(lines);</span><br><span class=\"line\">    <span class=\"comment\">//4.关闭字符输入流(关键点)</span></span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    <span class=\"comment\">//5.创建输出流对象(关键点)</span></span><br><span class=\"line\">    BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"d:\\\\reverse.txt\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//6.倒着遍历集合上的数据并且写入到文件之中;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = al.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      bw.write(al.get(i)); <span class=\"comment\">//获取集合中索引的对应的值</span></span><br><span class=\"line\">      bw.newLine();    <span class=\"comment\">//没写入一行则换行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//7.关闭字符输出流(关键点)</span></span><br><span class=\"line\">    bw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lnr</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class=\"line\">    LineNumberReader lnr = <span class=\"keyword\">new</span> LineNumberReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">\"d:\\\\chinese.txt\"</span>));</span><br><span class=\"line\">    String line;</span><br><span class=\"line\">    lnr.setLineNumber(<span class=\"number\">1</span>); <span class=\"comment\">//行号设置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>((line = lnr.readLine()) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">      System.out.println(lnr.getLineNumber() + <span class=\"string\">\":\"</span> + line); <span class=\"comment\">//行号读取(根据我们设置的行号递增)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lnr.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">//reverse.txt 内容</span></span><br><span class=\"line\"><span class=\"comment\">//I studying JAVA!</span></span><br><span class=\"line\"><span class=\"comment\">//I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">//我爱您,祖国!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2:我爱您,祖国!</span></span><br><span class=\"line\"><span class=\"comment\">//3:I'm WeiyiGeek!</span></span><br><span class=\"line\"><span class=\"comment\">//4:I studying JAVA!</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项:</em></p>\n<ul>\n<li>newLine() 与 “\\r\\n”之间的关系?<ul>\n<li>bw.write(“\\r\\n”);        //只支持windows系统<ul>\n<li>bw.newLine();                //跨平台的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h5 id=\"IO流类型转换\"><a href=\"#IO流类型转换\" class=\"headerlink\" title=\"IO流类型转换\"></a>IO流类型转换</h5><p>注意:UTF-8字符集编码一个中文字符占用3个字节,而GBK字符集编码一个中文字符占用2个字节;<br>描述:所以在输出内容时候由于默认编码表的不同,我们需要指定码表读取字符还可以指定码表写字符;</p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.Object </span><br><span class=\"line\">java.io.Reader  |  java.io.Writer</span><br><span class=\"line\">java.io.InputStreamReader | java.io.OutputStreamReader </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//# FileReader是使用默认码表读取文件, 如果需要使用指定码表读取, 那么可以使用InputStreamReader(字节流,编码表)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputStreamReader</span> <span class=\"keyword\">extends</span> <span class=\"title\">Reader</span>  //字节-&gt;字符</span></span><br><span class=\"line\"><span class=\"class\">//#<span class=\"title\">FileWriter</span>是使用默认码表写出文件, 如果需要使用指定码表写出, 那么可以使用<span class=\"title\">OutputStreamWriter</span>(字节流,编码表)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">OutputStreamWriter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Writer</span> //字符-&gt;字节</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">//#建议对其再次进行封装提高效率</span></span><br><span class=\"line\">BufferedReader(new InputStreamReader(new FileInputStream(\"\"),CharsetName))</span><br><span class=\"line\">BufferedReader(<span class=\"keyword\">new</span> OutputStreamReader(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"\"</span>),CharsetName))</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.io;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo13_IOtranstion</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例1.使用指定编码表进行读写字符</span></span><br><span class=\"line\">    demo1();</span><br><span class=\"line\">    <span class=\"comment\">// 实例2.获取一个文本上每个字符出现的次数,将结果写在times.txt上</span></span><br><span class=\"line\">    demo2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.创建带缓冲的输入流对象</span></span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>),<span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//2.常见双列集合对象TreeMap</span></span><br><span class=\"line\">    TreeMap&lt;Character, Integer&gt; tm = <span class=\"keyword\">new</span> TreeMap&lt;Character, Integer&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//3.将读取的字符存入双列集合中(包含则+1,否则值为1存储)</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = br.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">char</span> c = (<span class=\"keyword\">char</span>)ch; <span class=\"comment\">//强制类型转换</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!tm.containsKey(c))&#123;</span><br><span class=\"line\">        tm.put(c, <span class=\"number\">1</span>);  <span class=\"comment\">//不存在就put进双列集合</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tm.put(c, tm.get(c) + <span class=\"number\">1</span>); <span class=\"comment\">//已经存在的键就直接获取其值+1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// tm.put(c, !tm.containsKey(c) ? 1 : tm.get(c) + 1)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//4.关闭输入流</span></span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    <span class=\"comment\">//5.创建输出对象</span></span><br><span class=\"line\">    BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\times.txt\"</span>),<span class=\"string\">\"gbk\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//6.遍历集合将集合中的内容写到console和times.txt之中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Character key : tm.keySet())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">//注意需要转义进行输出</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</span><br><span class=\"line\">        bw.write(<span class=\"string\">\"[空格]=\"</span> + tm.get(key));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[空格]=\"</span> + tm.get(key));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'\\n'</span>:</span><br><span class=\"line\">        bw.write(<span class=\"string\">\"\\\\n=\"</span> + tm.get(key));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\\\n=\"</span> + tm.get(key));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'\\r'</span>:</span><br><span class=\"line\">        bw.write(<span class=\"string\">\"\\\\r=\"</span> + tm.get(key));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\\\r=\"</span> + tm.get(key));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        bw.write(key + <span class=\"string\">\"=\"</span> + tm.get(key)); <span class=\"comment\">//写成键和值</span></span><br><span class=\"line\">        System.out.println(key + <span class=\"string\">\"=\"</span> + tm.get(key));</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bw.newLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//7.关闭输出流</span></span><br><span class=\"line\">    bw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">demo1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:\\\\chinese.txt\"</span>),<span class=\"string\">\"utf-8\"</span>)); <span class=\"comment\">//高效的用指定的编码表读</span></span><br><span class=\"line\">    BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"d:\\\\demoo.txt\"</span>),<span class=\"string\">\"gbk\"</span>)); <span class=\"comment\">//高效的用指定的编码表写</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((ch = br.read()) != -<span class=\"number\">1</span>) </span><br><span class=\"line\">      bw.write(ch);</span><br><span class=\"line\">    br.close();</span><br><span class=\"line\">    bw.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//#执行结果</span></span><br><span class=\"line\">\\n=<span class=\"number\">2</span></span><br><span class=\"line\">\\r=<span class=\"number\">2</span></span><br><span class=\"line\">[空格]=<span class=\"number\">3</span></span><br><span class=\"line\">!=<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"string\">'=1</span></span><br><span class=\"line\"><span class=\"string\">,=1</span></span><br><span class=\"line\"><span class=\"string\">A=2</span></span><br><span class=\"line\"><span class=\"string\">G=1</span></span><br><span class=\"line\"><span class=\"string\">I=2</span></span><br><span class=\"line\"><span class=\"string\">J=1</span></span><br><span class=\"line\"><span class=\"string\">V=1</span></span><br><span class=\"line\"><span class=\"string\">W=1</span></span><br><span class=\"line\"><span class=\"string\">d=1</span></span><br><span class=\"line\"><span class=\"string\">e=3</span></span><br><span class=\"line\"><span class=\"string\">g=1</span></span><br><span class=\"line\"><span class=\"string\">i=3</span></span><br><span class=\"line\"><span class=\"string\">k=1</span></span><br><span class=\"line\"><span class=\"string\">m=1</span></span><br><span class=\"line\"><span class=\"string\">n=1</span></span><br><span class=\"line\"><span class=\"string\">s=1</span></span><br><span class=\"line\"><span class=\"string\">t=1</span></span><br><span class=\"line\"><span class=\"string\">u=1</span></span><br><span class=\"line\"><span class=\"string\">y=2</span></span><br><span class=\"line\"><span class=\"string\">国=1</span></span><br><span class=\"line\"><span class=\"string\">您=1</span></span><br><span class=\"line\"><span class=\"string\">我=1</span></span><br><span class=\"line\"><span class=\"string\">爱=1</span></span><br><span class=\"line\"><span class=\"string\">祖=1</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191010144505.png\" alt=\"WeiyiGeek.IO转换原理\" title=\"\" class=\"\">\n                <p>WeiyiGeek.IO转换原理</p>\n            </figure></p>\n<p><strong>学习总结:</strong></p>\n<ul>\n<li>1.用BufferedReader读取GBK码表和UTF-8码表的字符</li>\n<li>2.用BufferedWriter写出字符到GBK码表和UTF-8码表的文件中</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}