{"title":"Ingress-Nginx进阶学习实践扩充配置记录","slug":"虚拟云容/云容器/Kubernetes/功能组件/Ingress-Nginx/Ingress-Nginx进阶学习实践扩充配置记录","date":"2020-05-28T12:37:47.000Z","updated":"2023-01-31T02:29:10.642Z","url":"2020/5-28-588.html","path":"api/articles/2020/5-28-588.html.json","covers":["https://img.weiyigeek.top/2021/5/20220113212607.png","https://img.weiyigeek.top/2021/5/20220113222702.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Kubernetes中Ingress跨域设置\"><a href=\"#0x00-Kubernetes中Ingress跨域设置\" class=\"headerlink\" title=\"0x00 Kubernetes中Ingress跨域设置\"></a>0x00 Kubernetes中Ingress跨域设置</h2><p>描述: 在您在<code>kubernetes</code>搭建ingress并通过其访问集群内部部署的项目时，有些功能可能会存在如下报错：<code>Access to XMLHttpRequest at ... has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code><br>上述错误提示这是一个跨域问题，在传统项目中我们更改Nginx配置即可，然后在kubernetes中或者ingress中，我们应该如何处理这种问题呢？</p>\n<p><strong>解决方式</strong><br>我们可以在<code>kubernetes</code>中的跨域设置在Ingress中进行配置，要在Ingress规则中启用跨域资源共享（CORS）只需添加如下注释: <code>nginx.ingress.kubernetes.io/enable-cors: &quot;true&quot;</code>, 除此之外我们还可以使用使用以下注释来控制CORS。</p>\n<ul>\n<li><p><code>nginx.ingress.kubernetes.io/cors-allow-methods</code> : 控制接受哪些方法。这是一个多值字段，以”，”分隔，仅接受字母（大写和小写），默认<code>GET, PUT, POST, DELETE, PATCH, OPTIONS</code>。</p>\n</li>\n<li><p><code>nginx.ingress.kubernetes.io/cors-allow-headers</code> : 控制接受哪些Header请求头。这是一个多值字段，以”，”分隔，并接受字母，数字，_和-。默认： <code>DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization</code></p>\n</li>\n<li><p><code>nginx.ingress.kubernetes.io/cors-expose-headers</code>: 控制哪些响应头暴露给客户端。这是一个多值字段，以”，”分隔，并接受字母，数字，_，-和。默认值：空。例：<code>nginx.ingress.kubernetes.io/cors-expose-headers: &quot;Version, X-CustomResponseHeader&quot;</code></p>\n</li>\n<li><p><code>nginx.ingress.kubernetes.io/cors-allow-origin</code>: 控制CORS接受的原产地。这是一个单字段值，格式如下：<code>http(s)://origin-site.com或http(s)://origin-site.com:port</code>，默认： *，例： <code>nginx.ingress.kubernetes.io/cors-allow-origin: &quot;https://origin-site.com:4443&quot;</code></p>\n</li>\n<li><p><code>nginx.ingress.kubernetes.io/cors-allow-credentials</code>: 控制在CORS操作期间是否可以传递凭据。默认： true，例： <code>nginx.ingress.kubernetes.io/cors-allow-credentials: &quot;false&quot;</code></p>\n</li>\n<li><p><code>nginx.ingress.kubernetes.io/cors-max-age</code>: 控制可以将预检请求缓存多长时间。默认值：1728000 示例：<code>nginx.ingress.kubernetes.io/cors-max-age: 600</code></p>\n</li>\n</ul>\n<p><strong>示例演示</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">front-web</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">front-web</span></span><br><span class=\"line\"><span class=\"attr\">    ref:</span> <span class=\"string\">front</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/enable-cors:</span> <span class=\"string\">\"true\"</span>   <span class=\"comment\"># 重点</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-allow-methods:</span> <span class=\"string\">\"PUT, GET, POST, DELETE, PATCH, OPTIONS\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-allow-headers:</span> <span class=\"string\">\"Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-expose-headers:</span> <span class=\"string\">\"Version, X-CustomResponseHeader\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-allow-credentials:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-allow-origin:</span> <span class=\"string\">\"https://*.weiyigeek.top\"</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/cors-max-age:</span> <span class=\"number\">600</span></span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: cors-allow-origin 还支持一个通配符如下 <code>http(s)://*.foo.bar, http(s)://*.bar.foo:8080 or http(s)://*.abc.bar.foo:9000</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example:</span></span><br><span class=\"line\">nginx.ingress.kubernetes.io/cors-allow-origin: <span class=\"string\">\"https://*.weiyigeek.top:8443, http://*.weiyigeek.top, https://wygk.eu.org:1199\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Ingress CORS官方文档: <a href=\"https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#enable-cors\" target=\"_blank\" rel=\"noopener\">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#enable-cors</a></p>\n<hr>\n<h2 id=\"0x01-Kubernetes中ingress-nginx文件上传代理访问超时设置\"><a href=\"#0x01-Kubernetes中ingress-nginx文件上传代理访问超时设置\" class=\"headerlink\" title=\"0x01 Kubernetes中ingress-nginx文件上传代理访问超时设置\"></a>0x01 Kubernetes中ingress-nginx文件上传代理访问超时设置</h2><p>描述: 早上开发一张 <code>504 gateway time-out</code>界面截图给我, 说是在后台导出1数据一分钟后显示此错误页面，由于我们的业务是通过K8s和ingress提供外部访问的，</p>\n<p>错误原因: 后台应用界面为使用ingress方式访问, 所以问题点在<code>ingress-nginx-controller</code>有关，通过查询发现ingress报<code>504 gateway time-out</code>错误，通常与<code>proxy timeout</code>有关。<br>由于默认的<code>ingress-nginx-controller</code>配置的<code>nginx.conf</code>的几个<code>timeout</code>参数都是60 此处修改为300，请根据应用实际情况修改。</p>\n<p><br/></p>\n<p><strong>解决办法:</strong><br>描述: 修改该应用域名所对应的的ingress资源，在<code>metadata-annotations</code>下面增加如下几行。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class=\"string\">\"30\"</span>   <span class=\"comment\"># 注意,此值不能超过75.</span></span><br><span class=\"line\"><span class=\"string\">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class=\"string\">\"120\"</span></span><br><span class=\"line\"><span class=\"string\">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class=\"string\">\"120\"</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>扩展知识1.文件太大报413：Request Entity Too Large</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决办法:创建 ingress 时添加 annotations（注释）</span></span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-body-size: 1024m</span><br></pre></td></tr></table></figure></p>\n<p><strong>扩展知识2.当http 的URI太长或者request header过大时会报414 Request URI too large或400 bad request错误解决办法</strong><br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 客户端请求头缓冲区大小</span></span><br><span class=\"line\"><span class=\"string\">client_header_buffer_size</span> <span class=\"number\">128</span><span class=\"string\">k;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 请求头总长度大于128k时使用如下设置的缓存区</span></span><br><span class=\"line\"><span class=\"string\">large_client_header_buffers</span> <span class=\"number\">4</span> <span class=\"number\">128</span><span class=\"string\">k;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-Kubernetes中ingress-nginx获取真实客户端IP\"><a href=\"#0x02-Kubernetes中ingress-nginx获取真实客户端IP\" class=\"headerlink\" title=\"0x02 Kubernetes中ingress-nginx获取真实客户端IP\"></a>0x02 Kubernetes中ingress-nginx获取真实客户端IP</h2><p>描述: 最近将部分业务通过Ingress进行发布管理, 从而实现应用灰蓝发布、金丝雀发布，更贴近当下自动化运维技术的发展，并为了进行实现七层自定义负载转发, 将不同应用程序配置到指定业务域名下不同的目录，并减少业务管理复杂化，同时节约域名资源，即多个业务可以通过一个域名出去提供服务。</p>\n<p>但是在实际环境中却发现一个小问题，在通过ingress-nginx访问后端应用时，无法无法获取真实的客户端IP，因为通常用户ip的传递依靠的是X-Forwarded-*参数，但是默认情况下ingress是没有开启的，其中又由于<code>Ingress-Nginx</code>前端代理是采用硬件负载将真实IP记录在自定义Header中，所以经过一天的资料查找与实践，最终将该问题进行解决，下面将记一波解决思路流程和配置实践。</p>\n<p><strong>环境说明</strong></p>\n<ul>\n<li>1.逻辑请求访问流程: 客户端 -&gt; 边界防火墙 -&gt; A10（硬件）负载均衡 -&gt; Ingrees-Nginx -&gt; statefulsets.apps (应用配置、扩容及其生命管理) -&gt; Pod (应用程序)。</li>\n<li>2.A10硬件负载均衡: 在硬件负载均衡上设置该业务域名的SSL，即实现外网访问<code>https-&gt;转内网-&gt;http</code>。</li>\n<li>3.ingress-nginx部署说明: 由helm部署的ingress名称空间 kube-base。</li>\n<li>4.ingress-nginx-controller 的 Rule 及其 ConfigMap 配置。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># （1）自定义ingress管理域名后端映射配置</span></span><br><span class=\"line\">$ kubectl get ingress -n app weiyigeek-app</span><br><span class=\"line\">  <span class=\"comment\"># NAME        CLASS           HOSTS          ADDRESS       PORTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># weiyigeek-app   ingress-nginx   app.weiyigeek.top   11.20.7.61   80      41d</span></span><br><span class=\"line\"><span class=\"comment\"># 关键配置</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ingressClassName: ingress-nginx</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: app.weiyigeek.top</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: app-shangbao</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 80</span><br><span class=\"line\">        path: /shangbao/</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （2）ingress-nginx-controller 控制器 services 服务查看</span></span><br><span class=\"line\">$ kubectl get svc -n kube-base ingress-nginx-controller</span><br><span class=\"line\">  <span class=\"comment\"># NAME                       TYPE       CLUSTER-IP    EXTERNAL-IP   PORT(S)                      AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># ingress-nginx-controller   NodePort   11.20.7.61   &lt;none&gt;        80:30080/TCP,443:30443/TCP   332d</span></span><br><span class=\"line\">$ kubectl get svc -n kube-base ingress-nginx-controller</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    k8s.kuboard.cn/workload: ingress-nginx-controller</span><br><span class=\"line\">    meta.helm.sh/release-name: ingress-nginx</span><br><span class=\"line\">    meta.helm.sh/release-namespace: kube-base</span><br><span class=\"line\">  creationTimestamp: <span class=\"string\">\"2021-02-15T04:57:22Z\"</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/component: controller</span><br><span class=\"line\">    app.kubernetes.io/instance: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">  name: ingress-nginx-controller</span><br><span class=\"line\">  namespace: kube-base</span><br><span class=\"line\">  resourceVersion: <span class=\"string\">\"82785800\"</span></span><br><span class=\"line\">  uid: 79ac32ad-82a6-4a77-b5ad-71d30ebb07c5</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  clusterIP: 11.20.7.61</span><br><span class=\"line\">  clusterIPs:</span><br><span class=\"line\">  - 11.20.7.61</span><br><span class=\"line\">  externalTrafficPolicy: Cluster  <span class=\"comment\"># 关键点</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - name: http</span><br><span class=\"line\">    nodePort: 30080</span><br><span class=\"line\">    port: 80</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 80</span><br><span class=\"line\">  - name: https</span><br><span class=\"line\">    nodePort: 30443</span><br><span class=\"line\">    port: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app.kubernetes.io/component: controller</span><br><span class=\"line\">    app.kubernetes.io/instance: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: NodePort</span><br><span class=\"line\">status:</span><br><span class=\"line\">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 01.通过业务后端日志发现获取的地址为K8S的master节点地址，而非真实的IP地址<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 日志</span></span><br><span class=\"line\">2022-01-13 09:59:19.365 [http-nio-80-exec-10] INFO  com.******.aop.AspectHandler-Access of com.******.controller.PageController.toPage?index  [IP]10.41.40.26,10.41.40.26,172.20.170.128,</span><br><span class=\"line\">2022-01-13 09:59:19.367 [http-nio-80-exec-10] INFO  com.******.aop.AspectHandler-Return of com.******.controller.PageController.toPage:shangbao/index  [IP]10.41.40.26,10.41.40.26,172.20.170.128,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 程序中获取真实IP地址的请求头几种Header.</span></span><br><span class=\"line\">String ip0 = request.getHeader(<span class=\"string\">\"X-Real-IP\"</span>);</span><br><span class=\"line\">String ip1 = request.getHeader(<span class=\"string\">\"X_FORWARDED_FOR\"</span>);</span><br><span class=\"line\">String ip2 = request.getHeader(<span class=\"string\">\"X-Forwarded-For\"</span>);</span><br><span class=\"line\">String ip3 = request.getHeader(<span class=\"string\">\"Proxy-Client-IP\"</span>);</span><br><span class=\"line\">String ip4 = request.getHeader(<span class=\"string\">\"WL-Proxy-Client-IP\"</span>);</span><br><span class=\"line\">String ip5 = request.getHeader(<span class=\"string\">\"HTTP_CLIENT_IP\"</span>);</span><br><span class=\"line\">String ip6 = request.getHeader(<span class=\"string\">\"HTTP_X_FORWARDED_FOR\"</span>);</span><br><span class=\"line\">String ip7 = request.getHeader(<span class=\"string\">\"x-Original-Forwarded-For\"</span>);</span><br><span class=\"line\">String ip8 = request.getRemoteAddr();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>step 02.通过抓取A10负载均衡流量及其A10访问ingress-nginx的流量，发现硬件负载均衡真实IP带入记录的<code>Header</code>字段是 <code>X_FORWARDED_FOR</code>, 这样做的好初是防止客户端请求时伪造真实IP。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220113212607.png\" alt=\"WeiyiGeek.A10访问ingress-nginx的流量\" title=\"\" class=\"\">\n                <p>WeiyiGeek.A10访问ingress-nginx的流量</p>\n            </figure>\n<p><br/></p>\n<ul>\n<li>Step 03.想要Ingress-Nginx传递自定义的<code>X_FORWARDED_FOR</code>字段,我们需要在 ingress-nginx 配置字典中加入如下配置.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 ingress-nginx 字典更改后会自动更新进ingress-nginx的POD中/etc/nginx/nginx.conf的文件里。</span></span><br><span class=\"line\">$ kubectl get cm -n kube-base ingress-nginx-controller -o yaml</span><br><span class=\"line\">$ kubectl edit cm -n kube-base ingress-nginx-controller</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">  data:</span><br><span class=\"line\">    <span class=\"built_in\">enable</span>-underscores-in-headers: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    use-forwarded-headers: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    forwarded-for-header: X_FORWARDED_FOR</span><br><span class=\"line\">    compute-full-forwarded-for: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    proxy-real-ip-cidr: 192.168.4.11,192.168.10.11 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 具体的 ingres-nginx 的 configMap 配置</span></span><br><span class=\"line\">tee ingress-nginx-controller-cm.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  allow-snippet-annotations: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">  compute-full-forwarded-for: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">  <span class=\"built_in\">enable</span>-real-ip: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">  <span class=\"built_in\">enable</span>-underscores-in-headers: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">  forwarded-for-header: X_FORWARDED_FOR</span><br><span class=\"line\">  proxy-real-ip-cidr: 192.168.10.1/24,10.41.40.21/28,172.20.0.0/16</span><br><span class=\"line\">  proxy-set-headers: X_FORWARDED_FOR</span><br><span class=\"line\">  use-forwarded-headers: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/component: controller</span><br><span class=\"line\">    app.kubernetes.io/instance: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/version: 1.2.0</span><br><span class=\"line\">  name: ingress-nginx-controller</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><strong>参数解析:</strong></p>\n<ol>\n<li><p><code>enable-underscores-in-headers</code>: 是否在标题名称中启用下划线, 缺省默认为off，表示如果请求中<code>header name</code> 中包含下划线，则忽略掉不会传递到后端代理或者应用程序，即获取不到该Header，所以此处为了不丢弃A10传递过来的 <code>X_FORWARDED_FOR</code> Header 需要将该参数设置为True。</p>\n</li>\n<li><p><code>use-forwarded-headers</code>: 如果设置为True时，则将设定的<code>X-Forwarded-*</code> Header传递给后端, 当Ingress在<code>L7 代理/负载均衡器</code>之后使用此选项。 如果设置为 false 时，则会忽略传入的<code>X-Forwarded-*</code>Header, 当 Ingress 直接暴露在互联网或者 L3/数据包的负载均衡器后面,并且不会更改数据包中的源 IP请使用此选项。</p>\n</li>\n<li><p><code>forwarded-for-header</code>: 设置用于标识客户端的原始 IP 地址的 Header 字段。默认值<code>X-Forwarded-For</code>，此处由于A10带入的是自定义记录IP的Header,所以此处填入是<code>X_FORWARDED_FOR</code>.</p>\n</li>\n<li><p><code>compute-full-forwarded-for</code>: 将 remote address 附加到 X-Forwarded-For Header而不是替换它。当启用此选项后端应用程序负责根据自己的受信任代理列表排除并提取客户端 IP。</p>\n</li>\n<li><p><code>proxy-real-ip-cidr</code>: 如果启用 <code>use-forwarded-headers</code> 或 <code>use-proxy-protocol</code>，则可以使用该参数其定义了外部负载衡器 、网络代理、CDN等地址，多个地址可以以逗号分隔的 CIDR 。默认值: “0.0.0.0/0”</p>\n</li>\n</ol>\n<p>Tips: 为了统一可移植性，在程序设置或者硬件负载转发中，转发、设置的 header 里不建议采用<code>&quot;_&quot;下划线</code>,可以用<code>驼峰命名</code>或者其他的符号<code>(如减号-)</code>进行代替，上述的<code>X_FORWARDED_FOR</code>字段把我是坑得，欲哭无泪。<br><br></p>\n<p>上述参数配置后在<code>ingress-nginx-control</code>中的<code>/etc/nginx/nginx.conf</code>结果如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># use-forwarded-headers 参数设置后</span></span><br><span class=\"line\">real_ip_header      X_FORWARDED_FOR;</span><br><span class=\"line\">real_ip_recursive   on;</span><br><span class=\"line\">set_real_ip_from    192.168.10.11;</span><br><span class=\"line\">set_real_ip_from    192.168.4.11;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># We can't use $proxy_add_x_forwarded_for because the realip module replaces the remote_addr too soon</span></span><br><span class=\"line\"><span class=\"comment\"># 我们不能使用 `$proxy_add_x_forwarded_for`, 因为 realip 模块过早地替换了远程 remote_addr。</span></span><br><span class=\"line\">map <span class=\"variable\">$http_x_forwarded_for</span> <span class=\"variable\">$full_x_forwarded_for</span> &#123;</span><br><span class=\"line\">  default          <span class=\"string\">\"<span class=\"variable\">$http_x_forwarded_for</span>, <span class=\"variable\">$realip_remote_addr</span>\"</span>;</span><br><span class=\"line\">  <span class=\"string\">''</span>               <span class=\"string\">\"<span class=\"variable\">$realip_remote_addr</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<ul>\n<li>Step 04.为了在后端演示<code>ingress-nginx</code>传递过来的参数, 创建一个nginx应用在log_format参数设置如下<code>&quot;$http_X_FORWARDED_FOR&quot; - &quot;$http_X_Real_IP&quot;&#39;</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/nginx.conf</span></span><br><span class=\"line\">log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">  <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">  <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\" - \"$http_X_FORWARDED_FOR\" - \"$http_X_Real_IP\"'</span>;</span><br><span class=\"line\"><span class=\"comment\"># 输出结果 \"10.41.40.22\" -- \"10.41.40.22\" --  \"10.20.172.103\"  </span></span><br><span class=\"line\"></span><br><span class=\"line\">proxy_set_header X-Real-IP              <span class=\"variable\">$remote_addr</span>;   <span class=\"comment\"># realip 模块 已经将 X_FORWARDED_FOR 字段赋值给 $remote_addr, 所以该字段也记录了真实IP.</span></span><br><span class=\"line\">proxy_set_header X-Forwarded-For        <span class=\"variable\">$full_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips: <code>remote_addr</code>: 代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，如果你使用了代理则该字段记录的的是代理IP。<br>Tips: <code>X-Forwarded-For</code>: 简称 XFF 它是一个头部扩展,TTP协议并没有对它的定义，它最开始是由 Squid 这个缓存代理软件引入用来表示 HTTP 请求端真实 IP，当前被各大 HTTP 代理、负载均衡等转发服务广泛使用并被写入 RFC 7239（Forwarded HTTP Extension）标准之中，格式为:<code>X-Forwarded-For: client, proxy1, proxy2</code>（注意：如果未经严格处理可以被伪造），例如如果一个 HTTP 请求到达服务器之前，经过了三个代理 Proxy1、Proxy2、Proxy3，IP 分别为 IP1、IP2、IP3，用户真实 IP 为 IP0，而服务端X-Forwarded-For 输出的是IP0, IP1, IP2，Proxy3 直连服务器，它会给 XFF 追加 IP2，表示它是在帮 Proxy2 转发请求，所以说列表中并没有 IP3，IP3 可以在服务端通过 Remote Address 字段获得<br>Tips: <code>X-Real-IP</code>: 自定义头部字段，通常被 HTTP 代理用来表示与它产生 TCP 连接的设备 IP，该设备可能是其他代理，也可能是真正的请求端，关键要看经过代理的层级次数或是是否始终将真实IP一路传下来（注意：如果未经严格处理，可以被伪造）。</p>\n<p><br/></p>\n<ul>\n<li>Step 05.在应用 Pod 中进行利用tcpdump抓包，日志记录真实IP和效果如下所示:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it -n app shangbao-text sh</span><br><span class=\"line\"><span class=\"comment\"># tcpdump -nnX port 80 -vv -w test.pcap </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志效果:</span></span><br><span class=\"line\">2022-01-13 22:31:00.178  INFO 1 --- [p-nio-80-exec-4] com.******.aop.AspectHandler: Access of com.******.controller.PageController.toPage?index  [IP]183.222.192.169,183.222.192.169,10.41.40.21,172.20.35.192,</span><br><span class=\"line\">2022-01-13 22:31:00.180  INFO 1 --- [p-nio-80-exec-4] com.******.aop.AspectHandler: Return of com.******.controller.PageController.toPage:shangbao/index  [IP]183.222.192.169,183.222.192.169,10.41.40.21,172.20.35.192,</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220113222702.png\" alt=\"WeiyiGeek.在Pod中抓包使用wirshake打开\" title=\"\" class=\"\">\n                <p>WeiyiGeek.在Pod中抓包使用wirshake打开</p>\n            </figure>\n<p>官方文档地址: <a href=\"https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#proxy-real-ip-cidr\" target=\"_blank\" rel=\"noopener\">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#proxy-real-ip-cidr</a></p>\n<p><strong>知识补充: Ingress Pod中无法保留源IP</strong><br>问题现象: Ingress Pod中无法保留真实客户端IP，显示为节点IP或100.XX.XX.XX网段或其它地址。</p>\n<p>问题原因: Ingress所使用的Service中<code>externalTrafficPolicy</code>设为了Cluster, SLB上使用了七层代理, 使用了WAF接入或WAF透明接入服务。<br>解决方案:</p>\n<ul>\n<li>对于设置externalTrafficPolicy为Cluster，且前端使用了四层SLB的情况。可以将externalTrafficPolicy改为Local。但可能会导致集群内部使用SLB IP访问Ingress不通，具体解决方案，请参见集群内访问集群LoadBalancer暴露的SLB地址不通。</li>\n<li>对于使用了七层代理（七层SLB、WAF、透明WAF）的情况，可以按以下步骤解决：<br>确保使用的七层代理且开启了X-Forwarded-For请求头。<br>在Ingress Controller的ConfigMap中（默认为kube-system命名空间下的nginx-configuration）添加enable-real-ip: “true”。<br>观察日志，验证是否可以获取到源IP。<br>对于链路较长，存在多次转发的情况（例如在Ingress Controller前额外配置了反向代理服务），可以在开启enable-real-ip时通过观察日志中remote_addr的值，来确定真实IP是否是以X-Forwarded-For请求头传递到Ingress容器中。若不是，请在请求到达Ingress Controller之前利用X-Forwarded-For等方式携带客户端真实IP。</li>\n</ul>\n<p><strong>总结说明:</strong><br>描述: 由上述可知并不是所有的场景都能通过X-Forwarded-For来获取用户正式ip, 例如当服务器前端使用了CDN的时候，X-Forwarded-For 方式获取到的可能就是CDN的来源ip了，此种情况可以和CDN配置管理后台约定一个字段名来记录用户真实ip, 然后代理将这个字段逐层传递最后到应用服务端。</p>\n<p>各种方式在CDN环境下,获取真实IP地址的优缺点：</p>\n<ul>\n<li><p>CDN自定义header头<br>优点：获取到最真实的用户IP地址,用户绝对不可能伪装IP。<br>缺点：需要CDN厂商提供。</p>\n</li>\n<li><p>获取forwarded-for头<br>优点：可以获取到用户的IP地址。<br>缺点：程序需要改动,以及用户IP有可能是伪装的。</p>\n</li>\n<li><p>使用realip获取<br>优点：程序不需要改动，直接使用remote_addr即可获取IP地址。<br>缺点：ip地址有可能被伪装，而且需要知道所有CDN节点的ip地址或者ip段。</p>\n</li>\n</ul>\n<p>至此完毕！</p>\n<p><br></p>\n<h2 id=\"0x03-Kubernetes中ingress-nginx-如何在外部设置自定义nginx指令snippet\"><a href=\"#0x03-Kubernetes中ingress-nginx-如何在外部设置自定义nginx指令snippet\" class=\"headerlink\" title=\"0x03 Kubernetes中ingress-nginx 如何在外部设置自定义nginx指令snippet\"></a>0x03 Kubernetes中ingress-nginx 如何在外部设置自定义nginx指令snippet</h2><p>描述: 我们可以在ingress-nginx的configMap和ingress域名规则中，利用ConfigMap和Annotations进行自定义配置 snippet 并注入nginx.conf中。</p>\n<ul>\n<li>ConfigMap: 使用ConfigMap在NGINX中设置全局配置。</li>\n<li>Annotations: 如果需要特定入口规则的特定配置，请使用此选项。</li>\n</ul>\n<p><strong>1.在ConfigMap中配置</strong><br>描述: 我们可以在Ingress-nginx中的ConfigMap进行配置全局生效的Nginx指令片段，其中主要位置的指令片段嵌入位置参数如下:</p>\n<ul>\n<li><code>main-snippet</code>: 将自定义配置添加到 nginx 配置的主要部分。</li>\n<li><code>http-snippet</code>: 将自定义配置添加到 nginx 配置的 http 部分。</li>\n<li><code>server-snippet</code>: 将自定义配置添加到 nginx 配置中的所有服务器。</li>\n<li><code>location-snippet</code>: 将自定义配置添加到 nginx 配置中的所有位置。您不能使用它来添加代理到 Kubernetes pod 的新位置，因为该片段无法访问 Go 模板函数。如果要添加自定义位置，则必须提供自己的 nginx.tmpl。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit cm -n kube-base ingress-nginx-controller</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  allow-snippet-annotations: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">  main-snippet: |</span><br><span class=\"line\">    ....指令....</span><br><span class=\"line\">  http-snippet: |</span><br><span class=\"line\">    ....指令....</span><br><span class=\"line\">  server-snippet: | </span><br><span class=\"line\">    ....指令....</span><br><span class=\"line\">  location-snippet: |</span><br><span class=\"line\">    ....指令....</span><br><span class=\"line\">kind: ConfigMap</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    meta.helm.sh/release-name: ingress-nginx</span><br><span class=\"line\">    meta.helm.sh/release-namespace: ingress-nginx</span><br><span class=\"line\">  creationTimestamp: <span class=\"string\">\"2022-06-24T05:20:53Z\"</span></span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app.kubernetes.io/component: controller</span><br><span class=\"line\">    app.kubernetes.io/instance: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/managed-by: Helm</span><br><span class=\"line\">    app.kubernetes.io/name: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class=\"line\">    app.kubernetes.io/version: 1.2.1</span><br><span class=\"line\">    helm.sh/chart: ingress-nginx-4.1.4</span><br><span class=\"line\">  name: ingress-nginx-controller</span><br><span class=\"line\">  namespace: ingress-nginx</span><br><span class=\"line\">  resourceVersion: <span class=\"string\">\"1501009\"</span></span><br><span class=\"line\">  uid: 0611906f-d100-4907-b29c-d4f55fc269ad</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>2.在ingress域名规则中配置</strong><br>温馨提示: 如果要在ingress站点配置清单中在 annotations 加入 Nginx 指令片段 snippet ， 则我们需要在 ingress-nginx 的 ConfigMap data 对象中加入<code>allow-snippet-annotations: &quot;true&quot;</code>键值对即可启用，然后我们便可在 Ingress 配置站点资源清单里的annotations对象下使用。</p>\n<p><code>nginx.ingress.kubernetes.io/server-snippet</code> : 使用注释可以在服务器配置块中添加自定义配置。(每个虚拟主机只能配置一次) 更改影响局部server站点。<br><code>nginx.ingress.kubernetes.io/configuration-snippet</code> : 使用此注释您可以向NGINX位置添加其他配置。(但多租户集群中慎用) 更改影响全局。<br><code>nginx.ingress.kubernetes.io/stream-snippet</code> : 使用注释可以添加自定义流配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl edit ingress -n app weiyigeek-app</span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class=\"line\">      ....指令片段.....</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/stream-snippet: |</span><br><span class=\"line\">      ....指令片段.....</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      ....指令片段.....</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><em>实践示例:</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class=\"line\">      proxy_set_header X-FORWARDED-FOR <span class=\"variable\">$http_X_FORWARDED_FOR</span>;</span><br><span class=\"line\">      server_tokens off; location /itwork/res/css &#123; deny all;<span class=\"built_in\">return</span> 403;&#125;      </span><br><span class=\"line\">    nginx.ingress.kubernetes.io/stream-snippet: |</span><br><span class=\"line\">      server &#123;</span><br><span class=\"line\">        listen 8000;</span><br><span class=\"line\">        proxy_pass 127.0.0.1:80;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      add_header X-Frame-Options SAMEORIGIN;</span><br><span class=\"line\">      <span class=\"comment\"># set_header X-Frame-Options SAMEORIGIN;</span></span><br><span class=\"line\">      <span class=\"built_in\">set</span> <span class=\"variable\">$flag</span> 0;</span><br><span class=\"line\">      <span class=\"built_in\">set</span> <span class=\"variable\">$childdomain</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable\">$http_user_agent</span> ~* <span class=\"string\">\"(Mobile)\"</span> )&#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span> <span class=\"variable\">$flag</span> <span class=\"string\">\"<span class=\"variable\">$&#123;flag&#125;</span>1\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"variable\">$host</span> ~* <span class=\"string\">\"(.*).weiyigeek.top\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span> <span class=\"variable\">$childdomain</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">set</span> <span class=\"variable\">$flag</span> <span class=\"string\">\"<span class=\"variable\">$&#123;flag&#125;</span>2\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( <span class=\"variable\">$flag</span> = <span class=\"string\">\"012\"</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 301 http://m.weiyigeek.top/<span class=\"variable\">$1</span><span class=\"variable\">$request_uri</span> ;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"0x04-Kubernetes中ingress-nginx指定node亲和性和nginx-ingress-controller修改缺省端口\"><a href=\"#0x04-Kubernetes中ingress-nginx指定node亲和性和nginx-ingress-controller修改缺省端口\" class=\"headerlink\" title=\"0x04 Kubernetes中ingress-nginx指定node亲和性和nginx-ingress-controller修改缺省端口\"></a>0x04 Kubernetes中ingress-nginx指定node亲和性和nginx-ingress-controller修改缺省端口</h2><p>描述: 在我们需要指定ingress-nginx-controller应用Pod允许运行在那些工作节点时可以对其进行Node和Pod亲和性设置, 与此同时我们还可以更改 <code>nginx-ingress-controller</code> 的服务端口, 但注意修改后需要更改对应的Service服务发现。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get deployments.apps  -n kube-base  ingress-nginx-controller -o wide</span><br><span class=\"line\">NAME                       READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES                                               SELECTOR</span><br><span class=\"line\">ingress-nginx-controller   9/9     9            9           329d   controller   harbor.cloud/weiyigeek/ingress-nginx-controller:v0.44.0   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑查看 ingress-nginx-controller 缺省的80、443端口</span></span><br><span class=\"line\">$ kubectl get deployments.apps  -n kube-base  ingress-nginx-controller </span><br><span class=\"line\"><span class=\"comment\"># 亲和性设置</span></span><br><span class=\"line\">  spec:</span><br><span class=\"line\">      affinity:</span><br><span class=\"line\">        nodeAffinity:</span><br><span class=\"line\">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">            nodeSelectorTerms:</span><br><span class=\"line\">            - matchExpressions:</span><br><span class=\"line\">              - key: node</span><br><span class=\"line\">                operator: In</span><br><span class=\"line\">                values:</span><br><span class=\"line\">                - app</span><br><span class=\"line\">                - work</span><br><span class=\"line\">        podAntiAffinity:</span><br><span class=\"line\">          preferredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">          - podAffinityTerm:</span><br><span class=\"line\">              labelSelector:</span><br><span class=\"line\">                matchExpressions:</span><br><span class=\"line\">                - key: app.kubernetes.io/name</span><br><span class=\"line\">                  operator: In</span><br><span class=\"line\">                  values:</span><br><span class=\"line\">                  - ingress-nginx</span><br><span class=\"line\">              topologyKey: kubernetes.io/hostname</span><br><span class=\"line\">            weight: 100</span><br><span class=\"line\"><span class=\"comment\"># nginx-ingress-controller 启动参数</span></span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - args:</span><br><span class=\"line\">        - /nginx-ingress-controller</span><br><span class=\"line\">        - --default-backend-service=$(POD_NAMESPACE)/default-backend</span><br><span class=\"line\">        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class=\"line\">        - --election-id=ingress-controller-leader</span><br><span class=\"line\">        - --ingress-class=ingress-nginx</span><br><span class=\"line\">        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span><br><span class=\"line\">        - --validating-webhook=:6443</span><br><span class=\"line\">        - --validating-webhook-certificate=/usr/<span class=\"built_in\">local</span>/certificates/cert</span><br><span class=\"line\">        - --validating-webhook-key=/usr/<span class=\"built_in\">local</span>/certificates/key</span><br><span class=\"line\">        <span class=\"comment\"># 关键点:增加以下两个参数参数（一个是http端口，一个是https端口）</span></span><br><span class=\"line\">        - --http-port=8080</span><br><span class=\"line\">        - --https-port=8443</span><br><span class=\"line\">        name: controller</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 8080</span><br><span class=\"line\">          hostPort: 8080</span><br><span class=\"line\">          name: http</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        - containerPort: 8443</span><br><span class=\"line\">          hostPort: 8443</span><br><span class=\"line\">          name: https</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        - containerPort: 6443</span><br><span class=\"line\">          hostPort: 6443</span><br><span class=\"line\">          name: webhook</span><br><span class=\"line\">          protocol: TCP</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x05-Kubernetes中ingress-nginx如何为项目配置子路径\"><a href=\"#0x05-Kubernetes中ingress-nginx如何为项目配置子路径\" class=\"headerlink\" title=\"0x05 Kubernetes中ingress-nginx如何为项目配置子路径\"></a>0x05 Kubernetes中ingress-nginx如何为项目配置子路径</h2><p><strong>方式1.创建带有app-root注释的Ingress规则</strong><br>描述: 将 approot.weiyigeek.top 请求重定向到 approot.weiyigeek.top/app1 子目录上。<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/app-root:</span> <span class=\"string\">/app1</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">approot</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  rules:</span></span><br><span class=\"line\"><span class=\"attr\">  - host:</span> <span class=\"string\">approot.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">      paths:</span></span><br><span class=\"line\"><span class=\"attr\">      - backend:</span></span><br><span class=\"line\"><span class=\"attr\">          serviceName:</span> <span class=\"string\">http-svc</span></span><br><span class=\"line\"><span class=\"attr\">          servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">        path:</span> <span class=\"string\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查rewrite是否正常</span></span><br><span class=\"line\"><span class=\"string\">curl</span> <span class=\"bullet\">-I</span> <span class=\"bullet\">-k</span> <span class=\"string\">approot.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"string\">HTTP/1.1</span> <span class=\"number\">302</span> <span class=\"string\">Moved</span> <span class=\"string\">Temporarily</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>方式2.创建带有rewrite注释的Ingress规则</strong><br>描述: 在这个Ingress定义中元组<code>（.*）</code>捕获的所有字符都将分配给占位符 $2，然后将其用作重写目标注释中的参数。</p>\n<p>例如，上面的入口定义将进行以下重写：</p>\n<ul>\n<li>weiyigeek.top/demo 重写为 weiyigeek.top/</li>\n<li>weiyigeek.top/demo/ 重写为 weiyigeek.top/</li>\n<li>weiyigeek.top/demo/issues 重写为 weiyigeek.top/issues</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class=\"string\">/$2</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">rewrite</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  rules:</span></span><br><span class=\"line\"><span class=\"attr\">  - host:</span> <span class=\"string\">rewrite.bar.com</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">      paths:</span></span><br><span class=\"line\"><span class=\"attr\">      - backend:</span></span><br><span class=\"line\"><span class=\"attr\">          serviceName:</span> <span class=\"string\">http-svc</span></span><br><span class=\"line\"><span class=\"attr\">          servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">        path:</span> <span class=\"string\">/demo(/|$)(.*)</span></span><br><span class=\"line\"><span class=\"comment\"># 元组1 $1 = (/|$)</span></span><br><span class=\"line\"><span class=\"comment\"># 元组2 $2 = (.*)</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>方式3.通过注释server-snippet片段脚本进行Ingress规则重写</strong><br>描述: 例如将访问 <code>web.weiyigeek.top/index</code> 的请求重定向到<code>http://m.weiyigeek.top/web/index</code>.<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\"> annotations:</span></span><br><span class=\"line\">   <span class=\"string\">nginx.ingress.kubernetes.io/server-snippet:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">     if ($host ~* \"(.*).weiyigeek.top\") &#123;</span></span><br><span class=\"line\"><span class=\"string\">          return 301 http://m.weiyigeek.top/$1$request_uri ;</span></span><br><span class=\"line\"><span class=\"string\">     &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\"> name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\"> namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\"> rules:</span></span><br><span class=\"line\"><span class=\"attr\"> - host:</span> <span class=\"string\">'*.weiyigeek.top'</span></span><br><span class=\"line\"><span class=\"attr\">   http:</span></span><br><span class=\"line\"><span class=\"attr\">     paths:</span></span><br><span class=\"line\"><span class=\"attr\">     - backend:</span></span><br><span class=\"line\"><span class=\"attr\">         serviceName:</span> <span class=\"string\">web-nginx</span></span><br><span class=\"line\"><span class=\"attr\">         servicePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">       path:</span> <span class=\"string\">/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.访问test.weiyigeek.top/service/index重定向到test.weiyigeek.top/s1/index地址</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">example-ingress</span></span><br><span class=\"line\"><span class=\"attr\">  annotations:</span></span><br><span class=\"line\">    <span class=\"string\">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">      rewrite /service/(.*)  /s1/$1 break;</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  rules:</span></span><br><span class=\"line\"><span class=\"attr\">  - host:</span> <span class=\"string\">test.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"attr\">    http:</span></span><br><span class=\"line\"><span class=\"attr\">      paths:</span></span><br><span class=\"line\"><span class=\"attr\">      - path:</span> <span class=\"string\">/service/</span></span><br><span class=\"line\"><span class=\"attr\">        backend:</span></span><br><span class=\"line\"><span class=\"attr\">          serviceName:</span> <span class=\"string\">app1</span></span><br><span class=\"line\"><span class=\"attr\">          servicePort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<hr>\n<h2 id=\"0x06-Kubernetes-中-ingress-nginx-上的-HTTP-的速率限制请求\"><a href=\"#0x06-Kubernetes-中-ingress-nginx-上的-HTTP-的速率限制请求\" class=\"headerlink\" title=\"0x06 Kubernetes 中 ingress-nginx 上的 HTTP 的速率限制请求\"></a>0x06 Kubernetes 中 ingress-nginx 上的 HTTP 的速率限制请求</h2><p>描述: 在某些情况我们可以使用<code>ingress-nginx</code>针对请求速率进行请求限制。</p>\n<p>通常我们使用如下两种方式<code>管理通过配置映射</code>和<code>注释调整</code>来完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置映射-ConfigMap</span></span><br><span class=\"line\">$ kubectl get cm -n ingress-nginx ingress-nginx-controller -o yaml</span><br><span class=\"line\">data:</span><br><span class=\"line\">  http-snippet: |</span><br><span class=\"line\">    limit_req_zone <span class=\"variable\">$http_authorization</span> zone=my-zone:20m rate=5r/s;</span><br><span class=\"line\">    limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=my-zone:20m rate=10r/s;</span><br><span class=\"line\">    limit_req_zone <span class=\"variable\">$http_someheader</span> zone=my-zone:20m rate=20r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置注释-annotations</span></span><br><span class=\"line\"><span class=\"comment\"># - 入口资源中的注释：</span></span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class=\"line\">      limit_req zone=my-zone-1 burst=10 nodelay;</span><br><span class=\"line\">      limit_req_log_level notice;</span><br><span class=\"line\">      limit_req_status 429;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 一个入口定义的不同位置的不同节流示例：</span></span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      location /content/images/ &#123;</span><br><span class=\"line\">        limit_req zone=my-zone-2 burst=50 nodelay;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      location /content/texts/ &#123;</span><br><span class=\"line\">        limit_req zone=my-zone-3 burst=50 nodelay;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class=\"line\">      limit_req zone=my-zone-1 burst=10 nodelay;</span><br><span class=\"line\">      limit_req_log_level notice;</span><br><span class=\"line\">      limit_req_status 429;</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 请注意 http-snippet 不允许作为注释，而只能在ConfigMap中进行映射配置！</p>\n<p><br></p>\n<hr>\n<h2 id=\"0x07-Kubernetes中ingress-nginx优化配置\"><a href=\"#0x07-Kubernetes中ingress-nginx优化配置\" class=\"headerlink\" title=\"0x07 Kubernetes中ingress-nginx优化配置\"></a>0x07 Kubernetes中ingress-nginx优化配置</h2><p>描述: 在K8s集群中部署安装 ingress-nginx 后默认并未进行相应的优化配置，本小结将针对于生产环境的中的 ingress-nginx 控制器进行优化。</p>\n<p>我们可以从 ingress-nginx-controller 资源的 Pod 、ConfigMap 、以及业务的 ingress 规则入手。</p>\n<p><br/></p>\n<h3 id=\"ingress-nginx-controller-Pod\"><a href=\"#ingress-nginx-controller-Pod\" class=\"headerlink\" title=\"ingress-nginx-controller Pod\"></a>ingress-nginx-controller Pod</h3><p>温馨提示: 我们需要针对承载 ingress-nginx 的相关 Pod 容器进行内核参数优化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get deployments.apps -n ingress-nginx ingress-nginx-controller</span><br><span class=\"line\">NAME                       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">ingress-nginx-controller   9/9     9            9           5d20h</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployments.apps -n ingress-nginx ingress-nginx-controller  -o yaml</span><br><span class=\"line\"><span class=\"comment\"># 在 spec.template.spec 对象下添加一个初始化 initContainers 容器</span></span><br><span class=\"line\">  initContainers:</span><br><span class=\"line\">  - name: sysctl</span><br><span class=\"line\">    image: alpine:3.10</span><br><span class=\"line\">    imagePullPolicy: IfNotPresent</span><br><span class=\"line\">    <span class=\"built_in\">command</span>:</span><br><span class=\"line\">    - sh</span><br><span class=\"line\">    - -c</span><br><span class=\"line\">    - |</span><br><span class=\"line\">      mount -o remount rw /proc/sys</span><br><span class=\"line\">      sysctl -w net.core.somaxconn=65535</span><br><span class=\"line\">      sysctl -w net.ipv4.tcp_tw_reuse=1</span><br><span class=\"line\">      sysctl -w net.ipv4.ip_local_port_range=<span class=\"string\">\"1024 65535\"</span></span><br><span class=\"line\">      sysctl -w fs.file-max=1048576</span><br><span class=\"line\">      sysctl -w fs.inotify.max_user_instances=16384</span><br><span class=\"line\">      sysctl -w fs.inotify.max_user_watches=524288</span><br><span class=\"line\">      sysctl -w fs.inotify.max_queued_events=16384</span><br><span class=\"line\">    securityContext:</span><br><span class=\"line\">      privileged: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"ingress-nginx-controller-ConfigMap\"><a href=\"#ingress-nginx-controller-ConfigMap\" class=\"headerlink\" title=\"ingress-nginx-controller ConfigMap\"></a>ingress-nginx-controller ConfigMap</h3><p>温馨提示: 我们需要按照需要将下述K/V配置项插入到 ingress-nginx 的 configMap 里的 data 对象下。</p>\n<p><strong>ingress-nginx 资源查看</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 Ingress-nginx 全局配置参数:</span></span><br><span class=\"line\">kubectl get cm -n ingress-nginx nginx-ingress-controller -o yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改 Ingress-nginx 全局配置参数:</span></span><br><span class=\"line\">kubectl edit cm -n ingress-nginx nginx-ingress-controller</span><br></pre></td></tr></table></figure></p>\n<p><strong>优化配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 负载工作机制,轮询</span></span><br><span class=\"line\">load-balance: <span class=\"string\">\"round_robin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误日志等级设置 (debug, info, notice, warn, error, crit, alert, or emerg)</span></span><br><span class=\"line\">error-log-level: <span class=\"string\">\"notice\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用Gzip资源压缩 (3k以上)</span></span><br><span class=\"line\">use-gzip: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">gzip-level: <span class=\"string\">\"2\"</span></span><br><span class=\"line\">gzip-min-length: <span class=\"string\">\"3072\"</span></span><br><span class=\"line\">gzip-types: <span class=\"string\">\"text/html text/plain text/css text/javascript application/javascript application/x-javascript application/xml application/x-httpd-php application/x-font-ttf application/json image/x-icon image/svg+xml image/avif image/webp font/ttf font/opentype\"</span></span><br><span class=\"line\"><span class=\"comment\"># 不建议进行照片压缩 image/jpeg image/gif image/png 可能反而会增加其体积</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用Brotli资源压缩（同等条件下优于Gzip，任选一个）</span></span><br><span class=\"line\"><span class=\"built_in\">enable</span>-brotli: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">brotli-level: 5</span><br><span class=\"line\">brotli-min-length: 3072</span><br><span class=\"line\">brotli-types: <span class=\"string\">\"text/plain text/css text/javascript application/javascript application/x-javascript application/xml application/x-httpd-php application/x-font-ttf image/x-icon  image/svg+xml image/avif image/webp font/ttf font/opentype\"</span></span><br><span class=\"line\"><span class=\"comment\"># 不建议进行照片压缩 image/jpeg image/gif image/png 可能反而会增加其体积</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用http2支持(实际上默认是开启的，如果过关闭请将其设置为true)</span></span><br><span class=\"line\">use-http2: <span class=\"string\">\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ssl 会话复用</span></span><br><span class=\"line\">ssl_session_cache: <span class=\"string\">\"shared:SSL:10m;\"</span></span><br><span class=\"line\">ssl-session-timeout: <span class=\"string\">\"10m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># worker 每个工作进程可以打开的最大文件数与同时打开最大连接数设置</span></span><br><span class=\"line\">worker-processes: <span class=\"string\">\"auto\"</span> </span><br><span class=\"line\">max-worker-open-files: <span class=\"string\">\"10240\"</span></span><br><span class=\"line\">max-worker-connections: <span class=\"string\">\"32767\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接复用</span></span><br><span class=\"line\"><span class=\"built_in\">enable</span>-multi-accept: <span class=\"string\">\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># keep-alive 连接超时和最大请求数调整 </span></span><br><span class=\"line\">keep-alive: <span class=\"string\">\"75\"</span></span><br><span class=\"line\">keep-alive-requests: <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># upstream-keepalive 与上游Pod连接超时与最大请求数调整</span></span><br><span class=\"line\">upstream-keepalive-time: <span class=\"string\">\"30m\"</span></span><br><span class=\"line\">upstream-keepalive-timeout: <span class=\"string\">\"60\"</span></span><br><span class=\"line\">upstream-keepalive-requests: <span class=\"string\">\"10000\"</span></span><br><span class=\"line\">upstream-keepalive-connections: <span class=\"string\">\"512\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># proxy-connect 设置 ingress-nginx 与 pstream pod 之间连接请求超时实践。</span></span><br><span class=\"line\"><span class=\"comment\"># 设置与代理服务器建立连接的超时时间(不能超过75s)</span></span><br><span class=\"line\">proxy-connect-timeout: <span class=\"string\">\"30\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置将请求传输到代理服务器的超时时间（以秒为单位）（超时仅在两个连续的写操作之间设置，而不是为整个请求的传输设置）</span></span><br><span class=\"line\">proxy-send-timeout: <span class=\"string\">\"120\"</span></span><br><span class=\"line\"><span class=\"comment\"># 设置从代理服务器读取响应的超时时间（以秒为单位）</span></span><br><span class=\"line\">proxy-read-timeout: <span class=\"string\">\"120\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>开发测试:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用 nginx Opentracing 扩展, 默认值：禁用</span></span><br><span class=\"line\"><span class=\"built_in\">enable</span>-opentracing: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>温馨提示:</p>\n<ul>\n<li>在 Nginx 中的 <code>upstream</code> 主要是配置均衡池和调度方法.</li>\n<li>在 Nginx 中的 <code>proxy_pass</code> 主要是配置代理服务器ip或服务器组的名字.</li>\n</ul>\n<p>温馨提示: 在高并发场景下，我们需配置<code>upstream-keepalive-*</code>相关参数, 使得 nginx 尽可能快速处理 HTTP 请求（尽量少释放并重建 TCP 连接），同时控制 nginx 内存使用量。</p>\n<p>温馨提示: ingress nginx 与 upstream pod 建立 TCP 连接并进行通信，其中涉及 3 个超时配置我们需要重点关注。</p>\n<ul>\n<li>proxy-read-timeout 选项 设置 nginx 与 upstream pod 之间读操作的超时时间，默认设置为 60s，当业务方服务异常导致响应耗时飙涨时，异常请求会长时间夯住 ingress 网关，我们在拉取所有服务正常请求的 P99.99 耗时之后，将网关与 upstream pod 之间读写超时均缩短到 3s，使得 nginx 可以及时掐断异常请求，避免长时间被夯住。</li>\n<li>proxy-connect-timeout 选项 设置 nginx 与 upstream pod 连接建立的超时时间，默认设置为 5s，由于在 nginx 和业务均在内网同机房通信，我们将此超时时间缩短到 1s。</li>\n</ul>\n<p><br/></p>\n<h3 id=\"ingress-Rule\"><a href=\"#ingress-Rule\" class=\"headerlink\" title=\"ingress Rule\"></a>ingress Rule</h3><p>描述: 通常我们需要为单个业务进行相应配置, 此时我们便需要再业务的ingress部署清单中进行修正。</p>\n<p>例如: 编辑 blog.weiyigeek.top 虚拟主机站点的 ingress 规则 (<code>kubectl edit ingress -n weiyigeek blog.weiyigeek.top</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 解决: 413 Request Entity Too Large 问题</span></span><br><span class=\"line\">    ingress.kubernetes.io/proxy-body-size: <span class=\"string\">\"128m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解决：后端大文件上传问题</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/client-body-buffer-size: 64m</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-max-temp-file-size: 128m</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解决: 上传文件较慢问题</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-buffer-size: 64m</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-buffering: <span class=\"string\">\"on\"</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-buffers-number: <span class=\"string\">\"4\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解决: 504 网关超时即后端backend超时问题</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-connect-timeout: 60</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-read-timeout: 180s</span><br><span class=\"line\">    nginx.ingress.kubernetes.io/proxy-send-timeout: 60s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解决: 处理Nginx代理转发与后端服务文件上传缓存区设置(原生命令)</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      location ~ /fastfile &#123;</span><br><span class=\"line\">        client_max_body_size 1024m;   <span class=\"comment\"># 允许客户端请求的最大单文件字节数，若超过所设定的大小，返回413错误.人话：能上传多大文件</span></span><br><span class=\"line\">        client_header_timeout 60;     <span class=\"comment\"># 读取请求头的超时时间，若超过所设定的大小，返回408错误。 </span></span><br><span class=\"line\">        client_body_timeout 60;       <span class=\"comment\"># 读取请求实体的超时时间，若超过所设定的大小，返回413错误。</span></span><br><span class=\"line\">        client_body_buffer_size 10m;  <span class=\"comment\"># 缓冲区代理缓冲用户端请求的最大字节数，人话：一次能接受多少文件，建议根据带宽上限设置，减少磁盘读写，加快速度</span></span><br><span class=\"line\">        proxy_connect_timeout 60;     <span class=\"comment\"># Nginx与后端代理连接超时时间,http请求无法立即被容器(tomcat, netty等)处理，被放在nginx的待处理池中等待被处理。</span></span><br><span class=\"line\">        proxy_read_timeout 180;       <span class=\"comment\"># 后端服务器响应时间(代理接收超时)时间，http请求被容器(tomcat, netty等)处理后，nginx会等待处理结果，也就是容器返回的response。</span></span><br><span class=\"line\">        proxy_send_timeout 30;        <span class=\"comment\"># http请求被服务器处理完后，把数据传返回给Nginx的用时，默认60秒。</span></span><br><span class=\"line\">        proxy_buffer_size 1024k;      <span class=\"comment\"># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class=\"line\">        proxy_buffers 6 500k;             <span class=\"comment\"># proxy_buffers缓冲区，网页平均在32k以下的话&gt;，这样设置</span></span><br><span class=\"line\">        proxy_busy_buffers_size 1024k;    <span class=\"comment\"># 高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class=\"line\">        proxy_temp_file_write_size 1024k; <span class=\"comment\"># 设定缓存文件夹大小，大于这个值将从upstream服务器传输</span></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"0x08-Kubernetes中ingress-nginx安全配置\"><a href=\"#0x08-Kubernetes中ingress-nginx安全配置\" class=\"headerlink\" title=\"0x08 Kubernetes中ingress-nginx安全配置\"></a>0x08 Kubernetes中ingress-nginx安全配置</h2><p>描述: 在 K8s 集群中部署安装 ingress-nginx 后默认并未根据应用安全需要进行相应的安全配置，本小结将针对于生产环境的中的 ingress-nginx 控制器以及应用常见进行安全安全配置。</p>\n<p><strong>1.配置指定的 Ingress Class</strong><br>描述: 如果一个K8S集群中部署了多个ingress controller时，我们可以在创建ingress的时候，通过ingressClassName指定ingress class，如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get ingress -n web www-weiyigeek -o yaml</span><br><span class=\"line\">apiVersion: networking.k8s.io/v1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: blog-weiyigeek-top</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># ....Kubernetes 注释添加到特定的 Ingress 对象自定义其行为....</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: blog</span><br><span class=\"line\">    ref: blog.weiyigeek.top</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ingressClassName: nginx  <span class=\"comment\"># 关键点</span></span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: weiyigeek.top</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          service:</span><br><span class=\"line\">            name: blog</span><br><span class=\"line\">            port:</span><br><span class=\"line\">              number: 8080</span><br><span class=\"line\">        path: /</span><br><span class=\"line\">        pathType: ImplementationSpecific</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>2.安全配置之强制跳转HTTPS</strong><br>描述: 通过这个annotation可以强制 https，如果是http请求，会通过308 redirect 到 https.</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 通过重定向实施服务器端 HTTPS</span></span><br><span class=\"line\">    <span class=\"comment\"># 启用了TLS，则控制器会将 （308） 重定向到 HTTPS</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/ssl-redirect: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 强制重定向到 HTTPS </span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/force-ssl-redirect: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 保留 URI 中的尾部斜杠</span></span><br><span class=\"line\">    redirectnginx.ingress.kubernetes.io/preserve-trailing-slash: <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>3.安全配置之跨域访问cors</strong><br>描述: 当将Ingress-Nginx作为API网关，必须进行跨域配置否则会对业务造成影响，例如我们公司的CDN业务必须设置跨域方面配置。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 启用cors跨域 （字面意义）</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">enable</span>-cors: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置控制 CORS 的可接受来源,遵循以下格式 http(s)://origin-site.com[:port]</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-allow-origin：<span class=\"string\">\"https://*.weiyigeek.top\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置支持跨域请求的方法 (GET, PUT, POST, DELETE, PATCH, OPTIONS)</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-allow-methods: <span class=\"string\">\"GET, PUT, POST, OPTIONS\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置支持跨域请求的标头 (DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization)</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-allow-headers: <span class=\"string\">\"X-Forwarded-For, X-App-Weiyigeek\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置支持响应公开那些指定表头 </span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-expose-headers: <span class=\"string\">\"*, X-CustomResponseHeader\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置在 CORS 操作期间传递凭据 （为了安全设置false除非业务确实需要）</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-allow-credentials: <span class=\"string\">\"false\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置控制可以缓存预检请求的时间长度 1728000</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/cors-max-age: 600</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>4.安全配置之防止DDOS请求限流</strong><br>描述: 通常针对于文件下载服务器我们需要进行一系列的配置, 我们可以通过 rps 限制每秒请求数，rpm 限制每分钟请求数，connections限制连接数, 如若超过将返回 503 。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 每分钟从给定 IP 接受的请求数。突发流量限制设置为此限制乘以突发乘数，默认乘数为 5。（顺序3）</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">limit</span>-rps: <span class=\"string\">\"5\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 每秒从给定 IP 接受的请求数，突发流量限制设置为此限制乘以突发乘数，默认乘数为 5。（顺序2）</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">limit</span>-rpm: <span class=\"string\">\"300\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许来自单个 IP 地址的并发连接数，超过此限制时返回 503 错误。（顺序1）</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">limit</span>-connections: <span class=\"string\">\"10\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 突发大小限制速率的乘数。默认突发乘数为 5</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">limit</span>-burst-multiplier：<span class=\"string\">\"5\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 配置白名单不受速率限制。(局部)</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">limit</span>-whitelist: <span class=\"string\">\"10.0.0.0/24,172.10.0.1\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>5.安全配置之请求访问白名单</strong></p>\n<p>描述: 配置白名单比黑名单更加安全，与最小所需权限一样，主要是用于安全限制，只允许特定的客户端请求，但由于现在网络中NAT的广泛应用，但是参数使用的场景比较有限，例如针对于内网采集监控服务调用，即将其访问请求IP加入到白名单中，才不受安全策略限制影响。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\"><span class=\"comment\"># 通过注释指定允许的客户端 IP 源范围，该值是以逗号分隔的CIDR列表。(全局)</span></span><br><span class=\"line\">    ingress.kubernetes.io/whitelist-source-range: <span class=\"string\">\"10.0.0.0/24,172.10.0.1\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>6.安全配置之请求访问日志记录</strong><br>描述: 为了等保合规通常需要将各类日志存储 180 天及以上，所以ingress也是非常重要，当业务被攻击时我们可以快速溯源追踪，以及其行为分析。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 启用访问日志，默认情况处于启用状态.但在某些情况下可能需要为给定入口禁用访问日志设置为False即可。</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">enable</span>-access-log: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 启用重写日志，默认情况处于未启用状态，如启用重写日志在通知级别发送到error_log文件。</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">enable</span>-rewrite-log: <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>7.安全配置之Nginx指定代理响应标头</strong><br>描述: 在使用 ingress-nginx 场景中免不了配置使用代理或响应表头，例如常见的<code>X-Frame-Options</code>规定了允许那些站点嵌入配置目标iframe站点。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 用于插入 server 块中的代码段</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      <span class=\"comment\"># 隐藏nginx版本</span></span><br><span class=\"line\">      server_tokens off;</span><br><span class=\"line\">      <span class=\"comment\"># Frame 安全控制 添加 X-Frame-Options 头</span></span><br><span class=\"line\">      add_header X-Frame-Options SAMEORIGIN;</span><br><span class=\"line\">      <span class=\"comment\"># MIME 模拟探测 、XXS-Protection、Spider Robots 爬取策略限制</span></span><br><span class=\"line\">      more_set_headers <span class=\"string\">'x-content-type-options: nosniff</span></span><br><span class=\"line\"><span class=\"string\">'</span> <span class=\"string\">'x-xss-protection: 1; mode=block'</span> <span class=\"string\">'X-Robots-Tag: none;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 用于插入 location 块代码段</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/configuration-snippet: |</span><br><span class=\"line\">      <span class=\"comment\"># 自定义访问后端服务时所带头</span></span><br><span class=\"line\">      proxy_set_header My-Custom-Header <span class=\"variable\">$http_my_custom_header</span>;</span><br><span class=\"line\">      <span class=\"comment\"># 将 X-FORWARDED-FOR 字段获取到外部IP带入后端服务</span></span><br><span class=\"line\">      proxy_set_header X-FORWARDED-FOR <span class=\"variable\">$http_X_FORWARDED_FOR</span>;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>8.安全配置之Nginx禁止访问某一目录</strong><br>描述: 在使用 ingress-nginx 场景中，如何禁止客户端访问 ingress 站点某一目录下的所有资源，我们可以配置 server-snippet 注释，例如。</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 用于插入 server 块中的代码段，禁止访问 站点的 /itwork/ 目录下资源</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/server-snippet: |</span><br><span class=\"line\">      location /itwork/ &#123; deny all;<span class=\"built_in\">return</span> 403;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>9.安全配置之请求访问认证</strong></p>\n<p>描述: 针对于某些未有认证的API接口应用，可以通过在 Ingress 规则中添加额外的注释来添加身份验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 认证类型 [basic|digest]</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/auth-type: </span><br><span class=\"line\">    <span class=\"comment\"># 包含用户/密码定义的密码的名称，使用configMap存储htpasswd生成热认证</span></span><br><span class=\"line\">    <span class=\"comment\"># $ htpasswd -c auth weiyigee</span></span><br><span class=\"line\">    <span class=\"comment\"># $ kubectl create secret generic basic-auth --from-file=auth</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/auth-secret: basic-auth</span><br><span class=\"line\">    <span class=\"comment\"># 认证密钥有两种形式：</span></span><br><span class=\"line\">    <span class=\"comment\"># auth-secret 默认，密钥中的 htpasswd 文件位于密钥中auth</span></span><br><span class=\"line\">    <span class=\"comment\"># auth-map 密钥是用户名，值是散列密码</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/auth-secret-type:auth-file</span><br><span class=\"line\">    <span class=\"comment\"># 设置认证提示</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/auth-realm: <span class=\"string\">\"身份认证\"</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>10.安全配置之启用SSL握手加密套件</strong><br>描述: 通常为了应用安全我们会为其添加证书，但是一些已知脆弱性的SSL加密方式会影响到应用信息安全，例如 RC4 与 MD5 等</p>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.ConfigMap</span></span><br><span class=\"line\">$ kubectl edit cm -n ingress-nginx ingress-nginx-controller</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  <span class=\"comment\"># 指定可以用的加密套件 </span></span><br><span class=\"line\">  ssl-ciphers: <span class=\"string\">\"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4\"</span></span><br><span class=\"line\">  <span class=\"comment\"># ssl 协议</span></span><br><span class=\"line\">  ssl-protocols: <span class=\"string\">\"TLSv1.1 TLSv1.2 TLSv1.3\"</span></span><br><span class=\"line\">  <span class=\"comment\"># ssl 会话复用</span></span><br><span class=\"line\">  ssl_session_cache: <span class=\"string\">\"shared:SSL:10m;\"</span></span><br><span class=\"line\">  ssl-session-timeout: <span class=\"string\">\"10m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.Annotations </span></span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 配置指定在使用 SSLv3 和 TLS 协议时，服务器密码应优先于客户端密码。</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 指定加密套件</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/ssl-ciphers: <span class=\"string\">\"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>11.安全配置之启用 modsecurity waf模块</strong><br>描述: ModSecurity (<a href=\"http://modsecurity.org/\" target=\"_blank\" rel=\"noopener\">http://modsecurity.org/</a>) 是一个开源的Web Application防火墙, 可以为一组特定的入口位置启用它。必须首先通过在 ConfigMap 中启用 ModSecurity 来启用 ModSecurity 模块。</p>\n<p>请注意，这将为所有路径启用 ModSecurity，并且必须手动禁用每个路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.ConfigMap</span></span><br><span class=\"line\">$ kubectl edit cm -n ingress-nginx ingress-nginx-controller</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">data:</span><br><span class=\"line\">  <span class=\"comment\"># 启用 modsecurity waf模块拦截常规Web攻击</span></span><br><span class=\"line\">  <span class=\"built_in\">enable</span>-modsecurity: <span class=\"string\">\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.Annotations </span></span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    <span class=\"comment\"># 启用 modsecurity</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">enable</span>-modsecurity: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置以下注释来启用 OWASP 核心规则集</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/<span class=\"built_in\">enable</span>-owasp-core-rules: <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 设置以下内容从nginx传递事务ID</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/modsecurity-transaction-id: <span class=\"string\">\"<span class=\"variable\">$request_id</span>\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过代码段添加自己的一组 modsecurity 规则：</span></span><br><span class=\"line\">    nginx.ingress.kubernetes.io/modsecurity-snippet: |</span><br><span class=\"line\">      Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf</span><br><span class=\"line\"></span><br><span class=\"line\">      SecRuleEngine On</span><br><span class=\"line\">      SecDebugLog /tmp/modsec_debug.log</span><br></pre></td></tr></table></figure>\n<p>OWASP 核心规则集 ：<a href=\"https://www.modsecurity.org/CRS/Documentation/\" target=\"_blank\" rel=\"noopener\">https://www.modsecurity.org/CRS/Documentation/</a><br>建议的配置参考 ：<a href=\"https://github.com/SpiderLabs/ModSecurity/blob/v3/master/modsecurity.conf-recommended\" target=\"_blank\" rel=\"noopener\">https://github.com/SpiderLabs/ModSecurity/blob/v3/master/modsecurity.conf-recommended</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Kubernetes","path":"api/categories/Kubernetes.json"},{"name":"负载均衡","path":"api/categories/负载均衡.json"}],"tags":[{"name":"ingress-nginx","path":"api/tags/ingress-nginx.json"}]}