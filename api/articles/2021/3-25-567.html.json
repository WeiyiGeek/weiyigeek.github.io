{"title":"持续集成交互部署入门学习笔记1","slug":"系统运维/自动化运维/CI-CD/基础学习/持续集成交互部署入门学习笔记1","date":"2021-03-25T12:35:30.000Z","updated":"2023-01-31T02:29:10.465Z","url":"2021/3-25-567.html","path":"api/articles/2021/3-25-567.html.json","covers":["https://img.weiyigeek.top/2020/2/20201217172016.png","https://img.weiyigeek.top/2020/2/20201217174342.png","https://img.weiyigeek.top/2020/2/20201217204612.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<p>Title: 持续集成交互部署入门学习笔记<br>2020年12月17日</p>\n<p>[TOC]</p>\n<h2 id=\"0x00-基础概念\"><a href=\"#0x00-基础概念\" class=\"headerlink\" title=\"0x00 基础概念\"></a>0x00 基础概念</h2><p>Q: 为啥要学习CI、CD?</p>\n<blockquote>\n<p>实际就是为了偷懒与提升工作效率，开发过程中最怕集成时遇到问题导致返工，而持续集成、持续交付、持续部署恰恰可以早发现早解决，从而可以避免这个问题。</p>\n</blockquote>\n<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h3><h4 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h4><p>Q: 什么是集成?</p>\n<blockquote>\n<p>A: 在一个项目之中将不同开发人员开发的不同模块进行组合装载形成一个系统（封装打包的产物，比如Jar包），随着项目的进度该系统无论是Bug修复、新功能的开发，后续都需要对系统进行不断的迭代更新；</p>\n</blockquote>\n<p>Q: 什么是持续集成?</p>\n<blockquote>\n<p>A: 持续集成（Continuous Integration）简称CI指的是频繁(一天)多次将代码集成到主干;<br>持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p>\n</blockquote>\n<p>CI 流程: 编译 -&gt; 测试 -&gt; 通知 &amp; 反馈结果</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201217172016.png\" alt=\"WeiyiGeek.CI\" title=\"\" class=\"\">\n                <p>WeiyiGeek.CI</p>\n            </figure>\n<p>好处(Advantages);</p>\n<ul>\n<li>1.快速发现错误</li>\n<li>2.节省人力成本</li>\n<li>3.加快软件开发进度</li>\n<li>4.实时交付</li>\n<li>5.防止分支大幅度偏离主干; 如果不经常集成而主干又不断更新，会导致以后集成难度变大或者难以集成;</li>\n</ul>\n<p>目的(Target): 让产品可以快速迭代，同时保持高质量(容易发现和改正Bug), 简化集成工作流程;</p>\n<p>Q: 什么情况下需要使用持续集成?</p>\n<blockquote>\n<p>A: 当项目开发规模较小的时候手动软件集成是没有问题的, 但是如果是大项目的情况下需要不断添加新功能或者升级新产品，则需要进行反复集成所以这时采用持续集成的方式来简化我们的工作;</p>\n</blockquote>\n<p><br></p>\n<h4 id=\"交付\"><a href=\"#交付\" class=\"headerlink\" title=\"交付\"></a>交付</h4><p>Q: 什么是交付?</p>\n<blockquote>\n<p>A: 在持续集成的环境基础之上，将代码部署到预生产环境中;</p>\n</blockquote>\n<p>Q: 什么是持续交互?</p>\n<blockquote>\n<p>A: 持续交付（<code>Continuous Delivery</code>）在持续集成的基础上，将集成后的代码<code>自动Auto</code>部署到更贴近真实运行环境的「类生产环境」（production-like environments）中;<br>比如: 我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p>\n</blockquote>\n<p>CD 流程 ：代码开发 -&gt; 单元测试 -&gt; 合并代码 -&gt; 测试 -&gt; Manual(手动)/Auto(自动) -&gt; 部署到预生产服务器;<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201217174342.png\" alt=\"WeiyiGeek.CD\" title=\"\" class=\"\">\n                <p>WeiyiGeek.CD</p>\n            </figure></p>\n<p><br></p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>Q: 什么是部署?</p>\n<blockquote>\n<p>A: 部署则是在持续交付的基础上，手动部署到生产环境的过程；</p>\n</blockquote>\n<p>Q: 什么是持续部署?</p>\n<blockquote>\n<p>A: 在持续部署（<code>Continuous Deployment</code>）和持续交互的区别就是最终部署到生产环境是自动化的。</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201217204612.png\" alt=\"WeiyiGeek.CD\" title=\"\" class=\"\">\n                <p>WeiyiGeek.CD</p>\n            </figure>\n<p><br/></p>\n<h4 id=\"持续集成实施流程\"><a href=\"#持续集成实施流程\" class=\"headerlink\" title=\"持续集成实施流程\"></a>持续集成实施流程</h4><p>描述: 从持续集成的设计，代码从提交到生产，整个过程有以下几步：</p>\n<blockquote>\n<p>开发者 -&gt; 提交代码 (Java/php/nodejs) -&gt; 代码托管(gitlab) -&gt; 获取代码 -&gt; 代码测试 -&gt; 构建(jenkins) -&gt; 黑盒测试(SonarQube) -&gt; 部署 -&gt; 回退</p>\n</blockquote>\n<p><br/></p>\n<p><strong>总结</strong><br>Q: 如何理解持续集成、持续交付、持续部署？</p>\n<ul>\n<li>集成：是指软件个人研发的部分向软件整体部分交付，以便尽早发现个人开发部分的问题；</li>\n<li>交付：是指研发尽快向客户交付，一般运行在以便尽早发现生产环境中存在的问题。</li>\n<li>部署：是代码尽快向可运行的开发/测试环境交付，以便尽早测试；</li>\n</ul>\n<hr>\n<h3 id=\"2-版本控制系统\"><a href=\"#2-版本控制系统\" class=\"headerlink\" title=\"2.版本控制系统\"></a>2.版本控制系统</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Q: 什么是版本控制系统(Version Control System)?</p>\n<blockquote>\n<p>A: 将每一次文件的变化，都集中在一个系统中加以版本记录，以便后续查阅特定的文件版本历史记录的系统；</p>\n</blockquote>\n<p>Q: 版本控制系统解决那些问题?</p>\n<blockquote>\n<ul>\n<li>1.追溯文件历史变更</li>\n<li>2.多人团队协同开发</li>\n<li>3.代码集中统一管理</li>\n</ul>\n</blockquote>\n<p>Q: 常见的版本控制系统工具</p>\n<ul>\n<li>1.集中式 SVN  (需要远程访问一个中央数据仓库进行通信) </li>\n<li>2.分布式 GIT (可以远程拉取代码到本地，在没有网络的情况之下也能进行版本控制，每一次提交不依赖远程服务器，等待有网卡的时候在与远程仓库进行版本同步)</li>\n</ul>\n<h4 id=\"Git-功能\"><a href=\"#Git-功能\" class=\"headerlink\" title=\"Git 功能\"></a>Git 功能</h4><p>Git 工具提交流程 : init 初始化  -&gt; 本地目录(代码修改) -&gt; 工作区 -&gt; [git add] 暂存区  -&gt; [git commit] git本地仓库 -&gt; [git push] git远程仓库；</p>\n<p>主要功能:</p>\n<ul>\n<li>代码提交</li>\n<li>文件比对</li>\n<li>版本回退<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 修改后未提交到缓冲区时，使用以前提交的至缓冲区的内容覆盖本地目录</span></span><br><span class=\"line\">git checkout -- file-test.txt </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 修改后已提交到缓冲区时，则回退到提交之前然后在用上面的命令进行依次回退</span></span><br><span class=\"line\">git reset HEAD file-test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 多次提交内容到git仓库，则利用 commit ID进行跳回到指定ID时的版本(文件内容以及其状态)</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline</span><br><span class=\"line\">git reset --hard commitID   <span class=\"comment\"># 如 回退 后想回到中间版本 则利用 git reflog 查看历史commit ID 然后安装指定ID版本进行回退</span></span><br></pre></td></tr></table></figure></li>\n<li>版本分支(简单理解平行分支): 注意一般是由分支进行拉取并合并Master提交的代码，最后提交到master分支上;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建分钟</span></span><br><span class=\"line\">git branch dev-branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换分钟</span></span><br><span class=\"line\">git checkout dev-branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建并切换分支</span></span><br><span class=\"line\">git checkout -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在dev-branch分支上合并 master 分支，此时产生新的commit-ID</span></span><br><span class=\"line\">git merge master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试无误后 回到master 分支上合并 dev-branch 分支内容</span></span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge dev-branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除分支</span></span><br><span class=\"line\">git branch -d dev-branch</span><br></pre></td></tr></table></figure></li>\n<li>标签 (可以看做是COMMIT-ID的别名)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加标签</span></span><br><span class=\"line\">git tag -a <span class=\"string\">\"v1.0\"</span> -m <span class=\"string\">\"项目初始化开发后第一个版本\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为指定的commitID（a3cc55s）打标签</span></span><br><span class=\"line\">git tag -a <span class=\"string\">\"v1.0\"</span> a3cc55s -m <span class=\"string\">\"项目初始化开发后第一个版本\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看标签</span></span><br><span class=\"line\">git tag -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看标签内容</span></span><br><span class=\"line\">git show v1.0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除标签</span></span><br><span class=\"line\">git tag -d v1.0</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h4 id=\"企业自建\"><a href=\"#企业自建\" class=\"headerlink\" title=\"企业自建\"></a>企业自建</h4><p>描述: 在大多数企业都会选用免费开源的版本控制系统进行为企业自建版本控制系统，而Gitlab就是一个不二选择;</p>\n<p>Q: 什么是Gitlab?</p>\n<blockquote>\n<p>Gitlab 是一个开源分布式的版本控制系统，它是由Ruby语言开发完成。</p>\n</blockquote>\n<p>Gitlab 主要实现的功能:管理项目源代码，以及对源代码进行版本控制、以及代码复用与查找;</p>\n<p>Q: Gitlab VS Github?</p>\n<blockquote>\n<p>1.相同点：两者都是提供代码托管服务,在很大程度上Gitlab是仿照GitHub来做的;<br>2.不同点: 最大的不同在于Github对企业创建私有仓库是收费(现在已经可以对个人用户进行免费)，而gitlab是创建的私有仓库是免费的；</p>\n</blockquote>\n<p>Gitlab 版本:</p>\n<ul>\n<li>gitlab-ee 商业版本 (收费)</li>\n<li>gitlab-ce 社区版本（Free）</li>\n</ul>\n<p>PS : 从代码的私有性方面考虑Gitlab无疑是最佳选择，而对于开源项目而言Github依然是代码托管的首选平台;</p>\n<p>Q: Gitlab 优势及应用场景?</p>\n<ul>\n<li>1.开源免费，搭建简单，维护成本低，适合中小型公司;</li>\n<li>2.权限管理，能实现代码对部分人可见，确保项目的安全性；</li>\n<li>3.离线同步，保证我们不在实时依赖网络环境进行代码提交；</li>\n</ul>\n<p>如何搭建使用请参照本博客中的<code>GitLab安装与基础使用</code>文章;</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"CICD","path":"api/categories/CICD.json"},{"name":"Web","path":"api/categories/Web.json"}],"tags":[{"name":"持续集成交互","path":"api/tags/持续集成交互.json"}]}