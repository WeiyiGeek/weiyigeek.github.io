{"title":"1.Go语言项目性能调优实践","slug":"编程世界/Go/Extension/1.Go语言项目性能调优实践","date":"2020-04-26T03:16:58.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2020/4-26-605.html","path":"api/articles/2020/4-26-605.html.json","covers":["https://img.weiyigeek.top/2021/5/20211127145003.png","https://img.weiyigeek.top/2021/5/20211129113617.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>在计算机性能调试领域里 <code>profiling</code> 是指对应用程序的画像，画像就是应用程序使用 CPU 和内存的情况。 </p>\n<p>Go语言是一个对性能特别看重的语言，所以其自带了 profiling 的库，本章将主要讲解怎么在 golang 中做 profiling。</p>\n<p><br/></p>\n<p>Go语言项目中的性能优化主要有以下几个方面：<br><code>CPU profile</code>：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据。<br><code>Memory Profile（Heap Profile）</code>：报告程序的内存使用情况。<br><code>Block Profiling</code>：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈。<br><code>Goroutine Profiling</code>：报告 goroutines 的使用情况，以及 goroutine调用关系。</p>\n<p><br></p>\n<p><strong>Q: 那如何进行程序性能数据的采集?</strong><br>Go语言内置了获取程序的运行数据的工具，包括以下两个标准库：</p>\n<ul>\n<li><code>runtime/pprof</code>：采集<code>工具型应用</code>运行数据进行分析</li>\n<li><code>net/http/pprof</code>：采集<code>服务型应用</code>运行时数据进行分析</li>\n</ul>\n<p>Tips: 当pprof被引用开启后，每隔一段时间（10ms）就会收集下当前的堆栈信息，获取各个函数占用的CPU以及内存资源；最后通过对这些采样数据进行分析，形成一个性能分析报告。</p>\n<p>Tips: 通常在我们进行性能测试时会与基准测试联用，找出程序最需要优化的点，【非常注意】我们只在进行性能测试的时候才在代码中引入pprof。</p>\n<p><br/></p>\n<h2 id=\"0x01-性能调试工具实践\"><a href=\"#0x01-性能调试工具实践\" class=\"headerlink\" title=\"0x01 性能调试工具实践\"></a>0x01 性能调试工具实践</h2><h3 id=\"1-工具型应用\"><a href=\"#1-工具型应用\" class=\"headerlink\" title=\"1.工具型应用\"></a>1.工具型应用</h3><p>描述: 如果你的应用程序是运行一段时间就结束退出类型。那么最好的办法是在应用退出的时候把 profiling 的报告保存到文件中，进行分析。对于这种情况可以使用runtime/pprof库。</p>\n<p>首先在你测试的代码中导入<code>runtime/pprof</code>工具: <code>import &quot;runtime/pprof&quot;</code>, 其主要包含了CPU 和 内存等性能分析。</p>\n<p><strong>CPU性能分析:</strong> 它会在应用执行结束后生成一个文件，保存了程序执行过程中的 <code>CPU profiling</code> 数据, 得到采样数据之后，我们可以使用<code>go tool pprof</code>工具进行CPU性能分析。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启CPU性能分析：</span></span><br><span class=\"line\">pprof.StartCPUProfile(w io.Writer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 停止CPU性能分析：</span></span><br><span class=\"line\">pprof.StopCPUProfile()</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>内存性能优化</strong> 得到采样数据之后，使用go tool pprof工具进行内存性能分析。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 记录程序的堆栈信息</span></span><br><span class=\"line\">pprof.WriteHeapProfile(w io.Writer)</span><br></pre></td></tr></table></figure></p>\n<p>Tips: 默认它是使用<code>-inuse_space</code>进行统计，还可以使用<code>-inuse-objects</code>查看分配对象的数量。</p>\n<p><br></p>\n<h3 id=\"2-服务型应用\"><a href=\"#2-服务型应用\" class=\"headerlink\" title=\"2.服务型应用\"></a>2.服务型应用</h3><p>描述: 如果你的应用程序是一直运行的，比如 web 应用，那么可以使用net/http/pprof库，它能够在提供 HTTP 服务进行分析。</p>\n<p>首先，你需要在<code>web server</code>端代码中按如下方式导入<code>net/http/pprof</code>, 例如 <code>import _ &quot;net/http/pprof&quot;</code>, 它表示只加载init方法而不是使用其的方法。</p>\n<p>如果你的<code>Web Server</code>使用了默认的 <code>http.DefaultServeMux</code> 通常是代码直接使用 `http.ListenAndServe(“0.0.0.0:8000”, nil) , 按照上述要求导入即可。</p>\n<p>如果你使用自定义的 Mux，则需要手动注册一些路由规则：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/\"</span>, pprof.Index)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/cmdline\"</span>, pprof.Cmdline)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/profile\"</span>, pprof.Profile)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/symbol\"</span>, pprof.Symbol)</span><br><span class=\"line\">r.HandleFunc(<span class=\"string\">\"/debug/pprof/trace\"</span>, pprof.Trace)</span><br></pre></td></tr></table></figure></p>\n<p>如果你使用的是gin框架，那么推荐使用<code>github.com/gin-contrib/pprof</code>，在代码中通过以下命令注册pprof相关路由: <code>pprof.Register(router)</code></p>\n<p>Tips: 总之,不管是那种方式，你的 HTTP 服务都拥有<code>/debug/pprof</code> endpoint，访问它会得到Server端程序相关的Allocs、Goroutine以及Heap等信息： </p>\n<ul>\n<li><code>/debug/pprof/profile</code>：CPU profiling的路径，访问此链接会持续记录 30s并生成一个文件供下载。</li>\n<li><code>/debug/pprof/heap</code>： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件。</li>\n<li><code>/debug/pprof/block</code>：block Profiling 的路径</li>\n<li><code>/debug/pprof/goroutines</code>：记录运行的 goroutines 列表，以及调用关系。</li>\n</ul>\n<p><br></p>\n<h3 id=\"3-pprof-命令语法\"><a href=\"#3-pprof-命令语法\" class=\"headerlink\" title=\"3.pprof 命令语法\"></a>3.pprof 命令语法</h3><p>描述: 不管是工具型应用还是服务型应用，我们使用相应的pprof库获取数据之后，下一步的都要对这些数据进行分析，我们可以使用<code>go tool pprof</code>命令行工具。</p>\n<p>go tool pprof 最简单的使用方式为 <code>go tool pprof [binary] [source]</code> ,其中</p>\n<ul>\n<li>binary 是应用的二进制文件，用来解析各种符号；</li>\n<li>source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址。</li>\n</ul>\n<p>Tips: 非常注意获取的 Profiling 数据是动态的，要想获得有效的数据，请保证应用处于较大的负载（比如正在生成中运行的服务，或者通过其他工具模拟访问压力）。<code>如果应用处于空闲状态，得到的结果可能没有任何意义</code>。</p>\n<p><br></p>\n<p><strong>pprof与性能测试结合</strong><br>描述: go test, 命令有两个参数和 pprof 相关，它们分别指定生成的 <code>CPU 和 Memory profiling</code> 保存的文件：</p>\n<ul>\n<li>-cpuprofile：cpu profiling 数据要保存的文件地址</li>\n<li>-memprofile：memory profiling 数据要报文的文件地址</li>\n</ul>\n<p>比如下面执行测试的同时，也会执行 CPU profiling，并把结果保存在 cpu.prof 文件中：<code>go test -bench . -cpuprofile=cpu.prof</code></p>\n<p>比如下面执行测试的同时，也会执行 Mem profiling，并把结果保存在 cpu.prof 文件中：<code>go test -bench . -memprofile=./mem.prof</code></p>\n<p>Tips: 特别注意Profiling 一般和性能测试一起使用,在前文我们也提到过，只有应用在负载高的情况下 Profiling 才有意义。<br><br></p>\n<p><strong>实践案例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go <span class=\"built_in\">test</span> -bench . -cpuprofile=cpu.prof</span><br><span class=\"line\">  <span class=\"comment\"># goos: linux</span></span><br><span class=\"line\">  <span class=\"comment\"># goarch: amd64</span></span><br><span class=\"line\">  <span class=\"comment\"># pkg: weiyigeek.top/studygo/Day08/07perfomance/testdemo</span></span><br><span class=\"line\">  <span class=\"comment\"># cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span></span><br><span class=\"line\">  <span class=\"comment\"># BenchmarkFib1-4           365628              3098 ns/op</span></span><br><span class=\"line\">  <span class=\"comment\"># BenchmarkFibOpt1-4        592876              1946 ns/op</span></span><br><span class=\"line\">  <span class=\"comment\"># BenchmarkFib2-4             4468            230122 ns/op</span></span><br><span class=\"line\">  <span class=\"comment\"># BenchmarkFibOpt2-4          8101            142212 ns/op</span></span><br><span class=\"line\">  <span class=\"comment\"># PASS</span></span><br><span class=\"line\">  <span class=\"comment\"># ok      weiyigeek.top/studygo/Day08/07perfomance/testdemo       4.720s</span></span><br><span class=\"line\"></span><br><span class=\"line\">➜ go tool pprof cpu.prof   </span><br><span class=\"line\">  <span class=\"comment\"># File: testdemo.test</span></span><br><span class=\"line\">  <span class=\"comment\"># Type: cpu</span></span><br><span class=\"line\">  <span class=\"comment\"># Time: Nov 29, 2021 at 10:58am (CST)</span></span><br><span class=\"line\">  <span class=\"comment\"># Duration: 4.72s, Total samples = 4.58s (97.12%)</span></span><br><span class=\"line\">  <span class=\"comment\"># Entering interactive mode (type \"help\" for commands, \"o\" for options)</span></span><br><span class=\"line\">  <span class=\"comment\"># (pprof) top3</span></span><br><span class=\"line\">  <span class=\"comment\"># Showing nodes accounting for 4.55s, 99.34% of 4.58s total</span></span><br><span class=\"line\">  <span class=\"comment\"># Dropped 31 nodes (cum &lt;= 0.02s)</span></span><br><span class=\"line\">  <span class=\"comment\"># Showing top 3 nodes out of 10</span></span><br><span class=\"line\">  <span class=\"comment\">#       flat  flat%   sum%        cum   cum%</span></span><br><span class=\"line\">  <span class=\"comment\">#     4.55s 99.34% 99.34%      4.55s 99.34%  weiyigeek.top/studygo/Day08/07perfomance/testdemo.calcStep</span></span><br><span class=\"line\">  <span class=\"comment\">#         0     0% 99.34%      4.56s 99.56%  testing.(*B).launch</span></span><br><span class=\"line\">  <span class=\"comment\">#         0     0% 99.34%      4.57s 99.78%  testing.(*B).runN</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-简单示例\"><a href=\"#4-简单示例\" class=\"headerlink\" title=\"4.简单示例\"></a>4.简单示例</h3><p><strong>示例1.首先我们来写一段有问题的代码</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/studygo/Day08/07perfomance/pporftest/main.go</span></span><br><span class=\"line\"><span class=\"comment\">// 进行Go语言性能测试的用例代码。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"runtime/pprof\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// logicCode 函数中包含一段有问题的代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">logicCode</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span> <span class=\"comment\">// 未对通道c进行初始化 make(chan int)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> v := &lt;-c: <span class=\"comment\">// 此时处于阻塞的状态</span></span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"recv from chan, value:%v\\n\"</span>, v)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"comment\">// time.Sleep(time.Second)  // 问题解决办法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main 性能测试入口函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开发规范一致性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    isCPUPprof, isMemPprof <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"comment\">// flag包主要接收命令行参数以及解析，此时我们可以在命令行控制是否开启CPU和Mem的性能分析</span></span><br><span class=\"line\">  flag.BoolVar(&amp;isCPUPprof, <span class=\"string\">\"cpu\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"turn cpu pprof on\"</span>)</span><br><span class=\"line\">  flag.BoolVar(&amp;isMemPprof, <span class=\"string\">\"mem\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"turn mem pprof on\"</span>)</span><br><span class=\"line\">  flag.Parse()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 是否进行CPU心理测试</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isCPUPprof &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在当前可执行程序下创建一个cpu.pprof文件</span></span><br><span class=\"line\">    f1, err := os.Create(<span class=\"string\">\"./cpu.pprof\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"create cpu pprof failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 往文件中记录CPU Profile信息</span></span><br><span class=\"line\">    pprof.StartCPUProfile(f1)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      pprof.StopCPUProfile()</span><br><span class=\"line\">      f1.Close()</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 进行性能测试的函数调用，此处时并发</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> logicCode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">20</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 是否进行内存分析?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isMemPprof &#123;</span><br><span class=\"line\">    f2, err := os.Create(<span class=\"string\">\"./mem.pprof\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"create mem pprof failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pprof.WriteHeapProfile(f2)</span><br><span class=\"line\">    f2.Close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>编译执行:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  pporftest <span class=\"keyword\">go</span> build                             </span><br><span class=\"line\">➜  pporftest ./pporftest -cpu <span class=\"literal\">true</span>  <span class=\"comment\">// 等待30秒后会在当前目录下生成一个cpu.pprof文件。</span></span><br><span class=\"line\">➜  pporftest ls</span><br><span class=\"line\">cpu.pprof  main.<span class=\"keyword\">go</span>  pporftest</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>当执行<code>pporftest</code>程序生成<code>cpu.pprof</code>文件后，我们可以通过下面的两种方式进行查看分析结果。</p>\n<ul>\n<li>第一种，是使用go工具链里的pprof来进入交互界面查看分析结果。</li>\n<li>第二种，是使用graphviz图形化工具，通过svg图的方式查看程序中详细的CPU占用情况</li>\n</ul>\n<p><br/></p>\n<p><strong>命令行交互界面</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.分析程序的cpu.pprof文件</span></span><br><span class=\"line\">$ go tool pprof cpu.pprof</span><br><span class=\"line\">File: pporftest</span><br><span class=\"line\">Type: cpu</span><br><span class=\"line\">Time: Nov 27, 2021 at 2:14pm (CST)</span><br><span class=\"line\">Duration: 20.17s, Total samples = 57.72s (286.19%)</span><br><span class=\"line\">Entering interactive mode (<span class=\"built_in\">type</span> <span class=\"string\">\"help\"</span> <span class=\"keyword\">for</span> commands, <span class=\"string\">\"o\"</span> <span class=\"keyword\">for</span> options)</span><br><span class=\"line\">(pprof) top  <span class=\"comment\"># 来查看程序中占用CPU前几位的函数：</span></span><br><span class=\"line\">Showing nodes accounting <span class=\"keyword\">for</span> 57.71s, 100% of 57.72s total</span><br><span class=\"line\">Dropped 5 nodes (cum &lt;= 0.29s)</span><br><span class=\"line\">      flat  flat%   sum%        cum   cum%</span><br><span class=\"line\">    22.36s 38.74% 38.74%     41.66s 72.18%  runtime.selectnbrecv</span><br><span class=\"line\">    19.30s 33.44% 72.18%     19.30s 33.44%  runtime.chanrecv</span><br><span class=\"line\">    16.05s 27.81%   100%     57.71s   100%  main.logicCode   <span class=\"comment\"># 罪魁祸首其占用的CPU耗时累计已达到100%</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结果中五个关键参数浅析</span></span><br><span class=\"line\">  <span class=\"comment\"># * flat：当前函数占用CPU的耗时</span></span><br><span class=\"line\">  <span class=\"comment\"># * flat：:当前函数占用CPU的耗时百分比</span></span><br><span class=\"line\">  <span class=\"comment\"># * sun%：函数占用CPU的耗时累计百分比</span></span><br><span class=\"line\">  <span class=\"comment\"># * cum：当前函数加上调用当前函数的函数占用CPU的总耗时</span></span><br><span class=\"line\">  <span class=\"comment\"># * cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比</span></span><br><span class=\"line\">  <span class=\"comment\"># * 最后一列：函数名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.使用list 函数名命令查看具体的函数分析，例如执行list logicCode查看我们编写的函数的详细分析。</span></span><br><span class=\"line\">(pprof)  list logicCode</span><br><span class=\"line\">Total: 57.72s</span><br><span class=\"line\">ROUTINE ======================== main.logicCode <span class=\"keyword\">in</span> /home/weiyigeek/app/program/project/go/src/weiyigeek.top/studygo/Day08/07perfomance/pporftest/main.go</span><br><span class=\"line\">  16.05s     57.71s (flat, cum)   100% of Total</span><br><span class=\"line\">        .          .     12:// logicCode 函数中包含一段有问题的代码</span><br><span class=\"line\">        .          .     13:func <span class=\"function\"><span class=\"title\">logicCode</span></span>() &#123;</span><br><span class=\"line\">        .          .     14:   var c chan int // 未对通道c进行初始化</span><br><span class=\"line\">        .          .     15:   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        .          .     16:           select &#123;</span><br><span class=\"line\">  16.05s     57.71s     17:           <span class=\"keyword\">case</span> v := &lt;-c: // 此时处于阻塞的状态   <span class=\"comment\"># 可以看到就是此行有问题。</span></span><br><span class=\"line\">        .          .     18:                   fmt.Printf(<span class=\"string\">\"recv from chan, value:%v\\n\"</span>, v)</span><br><span class=\"line\">        .          .     19:           default:</span><br><span class=\"line\">        .          .     20:</span><br><span class=\"line\">        .          .     21:           &#125;</span><br><span class=\"line\">        .          .     22:   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips: 在大多数的情况下，我们可以通过分析上面五列(关键指标)得出一个应用程序的运行情况，并对程序进行优化。</p>\n<p>总结：通过上面的结果分析发现大部分CPU资源被17行占用，我们分析出<code>select语句中的default</code>没有内容会导致上面的<code>case v:=&lt;-c:</code>一直执行, 我们在default分支添加一行<code>time.Sleep(time.Second)</code>即可, 此时我们再次查看分析结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ go build</span><br><span class=\"line\">➜ ./pporftest -cpu <span class=\"literal\">true</span></span><br><span class=\"line\">➜ go tool pprof cpu.pprof      </span><br><span class=\"line\">(pprof) top</span><br><span class=\"line\">Showing nodes accounting <span class=\"keyword\">for</span> 0, 0% of 0 total</span><br><span class=\"line\">      flat  flat%   sum%        cum   cum%</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>graphviz 可视化图形工具</strong><br>项目地址: <a href=\"https://graphviz.gitlab.io/\" target=\"_blank\" rel=\"noopener\">https://graphviz.gitlab.io/</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.graphviz工具安装(它会自动设置环境变量)</span></span><br><span class=\"line\">➜ sudo apt install graphviz <span class=\"comment\"># // Ubuntu</span></span><br><span class=\"line\">brew install graphviz     <span class=\"comment\"># // Mac</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.验证工具是否安装配置成功</span></span><br><span class=\"line\">➜ dot -version</span><br><span class=\"line\">dot - graphviz version 2.43.0 (0)</span><br><span class=\"line\">libdir = <span class=\"string\">\"/usr/lib/x86_64-linux-gnu/graphviz\"</span></span><br><span class=\"line\">Activated plugin library: libgvplugin_dot_layout.so.6</span><br><span class=\"line\">Using layout: dot:dot_layout</span><br><span class=\"line\">Activated plugin library: libgvplugin_core.so.6</span><br><span class=\"line\">Using render: dot:core</span><br><span class=\"line\">Using device: dot:dot:core</span><br><span class=\"line\">The plugin configuration file:</span><br><span class=\"line\">        /usr/lib/x86_64-linux-gnu/graphviz/config6a</span><br><span class=\"line\">                was successfully loaded.</span><br><span class=\"line\">    render      :  cairo dot dot_json fig gd json json0 map mp pic pov ps svg tk visio vml vrml xdot xdot_json</span><br><span class=\"line\">    layout      :  circo dot fdp neato nop nop1 nop2 osage patchwork sfdp twopi</span><br><span class=\"line\">    textlayout  :  textlayout</span><br><span class=\"line\">    device      :  canon cmap cmapx cmapx_np dot dot_json eps fig gd gd2 gif gv imap imap_np ismap jpe jpeg jpg json json0 mp pdf pic plain plain-ext png pov ps ps2 svg svgz tk vdx vml vmlz vrml wbmp webp x11 xdot xdot1.2 xdot1.4 xdot_json xlib</span><br><span class=\"line\">    loadimage   :  (lib) eps gd gd2 gif jpe jpeg jpg png ps svg webp xbm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.此时我们通过dot生成的图片查看程序的CPU占用情况。</span></span><br><span class=\"line\">➜ go build &amp;&amp; ./pporftest -cpu <span class=\"literal\">true</span> &amp;&amp; go tool pprof cpu.pprof</span><br><span class=\"line\">File: pporftest</span><br><span class=\"line\">Type: cpu</span><br><span class=\"line\">(pprof) gif</span><br><span class=\"line\">Generating report <span class=\"keyword\">in</span> profile001.gif</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211127145003.png\" alt=\"WeiyiGeek.graphviz可视化性能占比查看\" title=\"\" class=\"\">\n                <p>WeiyiGeek.graphviz可视化性能占比查看</p>\n            </figure></p>\n<p>补充说明: 除了分析CPU性能数据，pprof也支持分析内存性能数据.<br>比如，使用下面的命令分析http服务的heap性能数据，查看当前程序的内存占用以及热点内存对象使用的情况。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看内存占用数据</span></span><br><span class=\"line\">go tool pprof -inuse_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\">go tool pprof -inuse_objects http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\"><span class=\"comment\"># 查看临时内存分配数据</span></span><br><span class=\"line\">go tool pprof -alloc_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\">go tool pprof -alloc_objects http://127.0.0.1:8080/debug/pprof/heap</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"0x02-第三方性能调试工具实践\"><a href=\"#0x02-第三方性能调试工具实践\" class=\"headerlink\" title=\"0x02 第三方性能调试工具实践\"></a>0x02 第三方性能调试工具实践</h2><h3 id=\"1-Go-torch\"><a href=\"#1-Go-torch\" class=\"headerlink\" title=\"1.Go-torch\"></a>1.Go-torch</h3><p>描述: 火焰图（Flame Graph）是 Bredan Gregg 创建的一种性能分析图表，因为它的样子近似 🔥 而得名;<br>上面的 profiling 结果也是转换成火焰图，所以这里我们要介绍一个工具<code>go-torch</code>，它 是 uber 开源的一个工具，可以直接读取 golang profiling 数据，并生成一个火焰图的 svg 文件。</p>\n<p>火焰图 svg 文件可以通过浏览器打开，它对于调用图的最优点是它是动态的，我们可以通过点击每个方块来 zoom in 分析它上面的内容。</p>\n<p>火焰图的调用顺序从下到上，每个方块代表一个函数，它上面一层表示这个函数会调用哪些函数，方块的大小代表了占用 CPU 使用的长短。</p>\n<p>Tips: 火焰图的配色并没有特殊的意义，默认的红、黄配色是为了更像火焰而已。</p>\n<p><br/></p>\n<p><strong>环境安装:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 go-torch</span></span><br><span class=\"line\">go get -v github.com/uber/go-torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 FlameGraph</span></span><br><span class=\"line\"><span class=\"comment\"># Perl 安装 https://www.perl.org/get.html</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/brendangregg/FlameGraph.git</span><br><span class=\"line\"><span class=\"comment\"># 将FlameGraph目录加入到操作系统的环境变量中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后在go-torch目录下执行</span></span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>工具参数浅析:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go-torch 格式与参数:</span><br><span class=\"line\"><span class=\"comment\"># -u –url：要访问的 URL，这里只是主机和端口部分</span></span><br><span class=\"line\"><span class=\"comment\"># -s –suffix：pprof profile 的路径，默认为 /debug/pprof/profile</span></span><br><span class=\"line\"><span class=\"comment\"># –seconds：要执行 profiling 的时间长度，默认为 30s</span></span><br><span class=\"line\">go-torch -u http://localhost:8080 -s /debug/pprof/profile –seconds 30</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>工具使用实践:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 压测工具wrk</span></span><br><span class=\"line\">https://github.com/adjust/go-wrk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用wrk进行压测:</span></span><br><span class=\"line\">go-wrk -n 50000 http://127.0.0.1:8080/book/list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在上面压测进行的同时，打开另一个终端执行, 然后30秒之后终端会初夏如下提示：Writing svg to torch.svg:</span></span><br><span class=\"line\">go-torch -u http://127.0.0.1:8080 -t 30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此外还可以借助火焰图分析内存性能数据：</span></span><br><span class=\"line\">go-torch -inuse_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\">go-torch -inuse_objects http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\">go-torch -alloc_space http://127.0.0.1:8080/debug/pprof/heap</span><br><span class=\"line\">go-torch -alloc_objects http://127.0.0.1:8080/debug/pprof/heap</span><br></pre></td></tr></table></figure></p>\n<p>然后我们使用浏览器打开<code>torch.svg</code>就能看到如下火焰图了。 </p>\n<p><img src=\"https://img.weiyigeek.top/2021/5/20211129113617.png\" alt=\"WeiyiGeek.Flame Graph\"></p>\n<p><br/></p>\n<p><strong>Q: 如分析 Flame Graph 火焰图?</strong></p>\n<blockquote>\n<p>描述: 火焰图的<code>y轴</code>表示cpu调用方法的先后，<code>x轴</code>表示在每个采样调用时间内方法所占的时间百分比，越宽代表占据cpu时间越多。<br>通过火焰图我们就可以更清楚的找出耗时长的函数调用，然后不断的修正代码，重新采样，不断优化。</p>\n</blockquote>\n<p><br></p>\n<h3 id=\"2-Go-wrk-压测工具\"><a href=\"#2-Go-wrk-压测工具\" class=\"headerlink\" title=\"2.Go-wrk 压测工具\"></a>2.Go-wrk 压测工具</h3><p>压测工具 wrk 后面使用到再介绍 推荐使用<a href=\"https://github.com/wg/wrk\" target=\"_blank\" rel=\"noopener\">https://github.com/wg/wrk</a> 或 <a href=\"https://github.com/adjust/go-wrk\" target=\"_blank\" rel=\"noopener\">https://github.com/adjust/go-wrk</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}