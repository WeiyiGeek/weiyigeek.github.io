{"title":"7.Prometheus监控进阶之自定义监控业务应用","slug":"虚拟云容/云容器/Kubernetes/功能组件/Prometheus/7.Prometheus监控进阶之自定义监控业务应用","date":"2021-04-28T11:39:47.000Z","updated":"2023-01-31T02:29:10.641Z","url":"2021/4-28-578.html","path":"api/articles/2021/4-28-578.html.json","covers":["https://img.weiyigeek.top/2021/5/20210609223137.png","https://img.weiyigeek.top/2021/5/20210610165953.png","https://img.weiyigeek.top/2021/5/20210610105511.png","https://img.weiyigeek.top/2021/5/20210610150812.png","https://img.weiyigeek.top/2021/5/20210610161127.png","https://img.weiyigeek.top/2021/5/20210614161122.png","https://img.weiyigeek.top/2021/5/20210614170019.png","https://img.weiyigeek.top/2021/5/20210614223940.png","https://img.weiyigeek.top/2021/5/20210704232101.png","https://img.weiyigeek.top/2021/5/20210704234931.png","https://img.weiyigeek.top/2021/5/20210705212749.png","https://img.weiyigeek.top/2021/5/20210705221356.png","https://img.weiyigeek.top/2021/5/20210712144034.png","https://img.weiyigeek.top/2021/5/20210712182604.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-测控与客户端\"><a href=\"#0x00-测控与客户端\" class=\"headerlink\" title=\"0x00 测控与客户端\"></a>0x00 测控与客户端</h2><h3 id=\"1-前言简述\"><a href=\"#1-前言简述\" class=\"headerlink\" title=\"1.前言简述\"></a>1.前言简述</h3><p>描述: Prometheus 可以通过直接<code>测控或者客户端库</code>来测控业务或者应用，目前我们可以采用多种不同语言编写客户端库包括<code>(GO/Python/Java/Ruby)</code>等客户端；</p>\n<p>Tips : 应用程序监控指标的最重要的三个部分是导入模块、指标指定以及测控对象。</p>\n<p>Tips : 指标的名称必须是唯一的，一般的为避免此种情况在文件级别定义你的指标，而不是在类、函数或者方法级别。</p>\n<p><br></p>\n<h3 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2.环境准备\"></a>2.环境准备</h3><p>描述: 在 Python 3 安装和使用Prometheus客户端库以及Flask模块, 在后面的演示中注意采用Python进行实现。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install prometheus_client</span><br><span class=\"line\">pip install flask</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 在基础得演示阶段我可以使用Python3自带的<code>http.server</code>模块启动一个简易Web容器。</p>\n<p><br></p>\n<h3 id=\"3-快速入门\"><a href=\"#3-快速入门\" class=\"headerlink\" title=\"3.快速入门\"></a>3.快速入门</h3><h4 id=\"3-1-Python-展示Prometheus指标\"><a href=\"#3-1-Python-展示Prometheus指标\" class=\"headerlink\" title=\"3.1 Python 展示Prometheus指标\"></a>3.1 Python 展示Prometheus指标</h4><p>描述: 废话不多说上代码</p>\n<p><strong>方式1.python</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author:WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: Hello World 实例采用Python暴露Prometheus</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> start_http_server</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>,<span class=\"string\">'ok'</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">b\"Hello World! - Python Promethus_Client!\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World, Start Prometheus Client Server!\"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong> 测试访问:<code>127.0.0.1:8001</code>URL可以看到<code>Hello World! - Python Promethus_Client</code>输出,访问<code>http://127.0.0.1:8000/metrics</code>查看默认的指标<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210609223137.png\" alt=\"WeiyiGeek.HelloWorld\" title=\"\" class=\"\">\n                <p>WeiyiGeek.HelloWorld</p>\n            </figure></p>\n<p><br></p>\n<p><strong>方式2.Python WSGI</strong><br>描述: <code>Web Server Gateway Interface</code>(WSGI)是一个标准的Python的Web应用,在Python客户端提供了一个WSGI应用,通过链接WSGI应用你可以添加身份验证等中间件。</p>\n<p>描述: 在Python WSGI 中配置演示即不用开启两个端口服务来配合prometheus数据拉取和数据生成。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author:WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: Hello World 实例采用 prometheus_client WSGI 暴露Prometheus</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> make_wsgi_app</span><br><span class=\"line\"><span class=\"keyword\">from</span> wsgiref.simple_server <span class=\"keyword\">import</span> make_server</span><br><span class=\"line\"></span><br><span class=\"line\">metrics_app = make_wsgi_app()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HelloWSGI</span><span class=\"params\">(environ, start_fn)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 注意此/metrics可以自定义控制</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> environ[<span class=\"string\">'PATH_INFO'</span>] == <span class=\"string\">'/metrics'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> metrics_app(environ, start_fn)</span><br><span class=\"line\"></span><br><span class=\"line\">  start_fn(<span class=\"string\">'200 OK'</span>, [])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"string\">b'Hello World! - Python Promethus_Client WSGI!'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World!, Start Prometheus Client Server!\"</span>)</span><br><span class=\"line\">  httpd = make_server(<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">8000</span>, HelloWSGI)</span><br><span class=\"line\">  httpd.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p>效果示例:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210610165953.png\" alt=\"WeiyiGeek.prometheus_client-WSGI\" title=\"\" class=\"\">\n                <p>WeiyiGeek.prometheus_client-WSGI</p>\n            </figure></p>\n<p><br></p>\n<h4 id=\"3-2-Prometheus-四种数据类型测控演示\"><a href=\"#3-2-Prometheus-四种数据类型测控演示\" class=\"headerlink\" title=\"3.2 Prometheus 四种数据类型测控演示\"></a>3.2 Prometheus 四种数据类型测控演示</h4><p><strong>Counter 数据类型</strong><br>描述: 该数据类型在测控中是使用最频繁的数据类型，其用于记录事件的数量或者大小，并通常用来跟踪某个特定代码路径被执行频率和记录数、服务的字节数以及。</p>\n<p>no code,no bi bi;<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中使用 Counter 数据类型记录指标</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> start_http_server,Counter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># REQUESTS 记录请求 / 返回的次数(注意第二个参数是注释)</span></span><br><span class=\"line\">REQUESTS = Counter(<span class=\"string\">'http_server_total'</span>, <span class=\"string\">'http server requested frequency count.'</span>)</span><br><span class=\"line\"><span class=\"comment\"># EXCEPTIONS 使用上下文管理器对异常情况进行次数</span></span><br><span class=\"line\">EXCEPTION = Counter(<span class=\"string\">'http_server_execption_total'</span>, <span class=\"string\">'http server requested execption frequency count.'</span>)</span><br><span class=\"line\">EXCEPTIONS = Counter(<span class=\"string\">'http_server_execptions_total'</span>, <span class=\"string\">'http server requested execptions frequency count.'</span>)</span><br><span class=\"line\"><span class=\"comment\"># MONEYS 统计以欧元结算的销售额</span></span><br><span class=\"line\">MONEYS = Counter(<span class=\"string\">'http_server_euro_moneys_total'</span>,<span class=\"string\">'Euros made serving Http Server.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span> </span><br><span class=\"line\">  <span class=\"comment\"># 作为函数的装饰器</span></span><br><span class=\"line\"><span class=\"meta\">  @EXCEPTIONS.count_exceptions()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 记录每请求一次便会+1</span></span><br><span class=\"line\">    REQUESTS.inc()</span><br><span class=\"line\">    <span class=\"comment\"># 模块中自带异常计数功能, 它不会干扰应用程序的逻辑(建议采用修饰器的方式)</span></span><br><span class=\"line\">    <span class=\"comment\"># with EXCEPTIONS.count_exceptions():</span></span><br><span class=\"line\">    <span class=\"comment\">#   if random.randint(0,10) &lt; 1:</span></span><br><span class=\"line\">    <span class=\"comment\">#     raise Exception</span></span><br><span class=\"line\">    <span class=\"comment\"># 以欧元结算的销售额</span></span><br><span class=\"line\">    euros = random.randint(<span class=\"number\">999</span>,<span class=\"number\">9999</span>)</span><br><span class=\"line\">    MONEYS.inc(euros)</span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">\"Hello World! Prometheus Counter Example for &#123;&#125; euros.\"</span>.format(euros).encode())</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World, Start Prometheus Client /metrics Server Port 8000!\"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>执行结果:</strong> 访问<code>http://127.0.0.1:8000/metrics</code>查看上述定义和监控的指标。<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP http_server_total http server requested frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_total counter</span></span><br><span class=\"line\">http_server_total <span class=\"number\">23.0</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_created http server requested frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_created gauge</span></span><br><span class=\"line\">http_server_created <span class=\"number\">1.6232518107397504</span>e+<span class=\"number\">09</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_execption_total http server requested execption frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_execption_total counter</span></span><br><span class=\"line\">http_server_execption_total <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_execption_created http server requested execption frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_execption_created gauge</span></span><br><span class=\"line\">http_server_execption_created <span class=\"number\">1.6232518107397504</span>e+<span class=\"number\">09</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_execptions_total http server requested execptions frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_execptions_total counter</span></span><br><span class=\"line\">http_server_execptions_total <span class=\"number\">4.0</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_execptions_created http server requested execptions frequency count.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_execptions_created gauge</span></span><br><span class=\"line\">http_server_execptions_created <span class=\"number\">1.6232518107397504</span>e+<span class=\"number\">09</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_euro_moneys_total Euros made serving Http Server.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_euro_moneys_total counter</span></span><br><span class=\"line\">http_server_euro_moneys_total <span class=\"number\">90706.0</span></span><br><span class=\"line\"><span class=\"comment\"># HELP http_server_euro_moneys_created Euros made serving Http Server.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_server_euro_moneys_created gauge</span></span><br><span class=\"line\">http_server_euro_moneys_created <span class=\"number\">1.6232518107397504</span>e+<span class=\"number\">09</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 我们采用<code>Prometheus</code>进行监控我们创建的测控应用;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrape_configs:</span><br><span class=\"line\">- job_name: control</span><br><span class=\"line\">  honor_timestamps: <span class=\"literal\">true</span></span><br><span class=\"line\">  scrape_interval: 15s</span><br><span class=\"line\">  scrape_timeout: 10s</span><br><span class=\"line\">  metrics_path: /metrics</span><br><span class=\"line\">  scheme: http</span><br><span class=\"line\">  follow_redirects: <span class=\"literal\">true</span></span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets:</span><br><span class=\"line\">    - 100.201.12.103:8000</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210610105511.png\" alt=\"WeiyiGeek.Counter\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Counter</p>\n            </figure>\n<p><br></p>\n<p><strong>Gauge 数据类型</strong><br>描述: 它存放的是一些当前状态的快照其值是可以动态改变的因此可以将负数传给该类型的inc方法, 例如常用于队列中元素的个数、内存以及磁盘的使用率、活跃的线程数或者回调指定的其它函数。</p>\n<p>演示代码:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中使用 Counter 数据类型记录指标</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> Gauge, start_http_server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INPROGRESS / LAST 跟踪正在处理中的请求调用数目以及最后一个调用完成时间.</span></span><br><span class=\"line\">INPROGRESS = Gauge(<span class=\"string\">'app_inprogress'</span>, <span class=\"string\">'number of http server in progress'</span>)</span><br><span class=\"line\">LAST = Gauge(<span class=\"string\">'app_last_seconds'</span>, <span class=\"string\">'The last time a app was Served'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># INPROGRESS_Modify 此种方式也可跟踪正在处理中的请求其调用完成时间.</span></span><br><span class=\"line\">INPROGRESSMODIFY = Gauge(<span class=\"string\">'app_inprogress_modify'</span>, <span class=\"string\">'number of http server in progress modify'</span>)</span><br><span class=\"line\">LASTTIME = Gauge(<span class=\"string\">'app_last_time_seconds'</span>, <span class=\"string\">'The last time a app was Served'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># TIME 回调函数使用, 例如用来返回当前时间带有`set_functiuon()`简单示例</span></span><br><span class=\"line\">TIME = Gauge(<span class=\"string\">'current_time_seconds'</span>,<span class=\"string\">'The Current Time'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span> </span><br><span class=\"line\"><span class=\"meta\">  @INPROGRESSMODIFY.track_inprogress()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    INPROGRESS.inc(<span class=\"number\">3</span>)  <span class=\"comment\"># +3</span></span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">b\"Hello World! Prometheus Gauge Type Example\"</span>)</span><br><span class=\"line\">    LAST.set(time.time())</span><br><span class=\"line\">    LASTTIME.set_to_current_time()</span><br><span class=\"line\">    <span class=\"comment\"># 每次都会进行变化</span></span><br><span class=\"line\">    TIME.set_function(<span class=\"keyword\">lambda</span>: time.time())</span><br><span class=\"line\">    INPROGRESS.dec()  <span class=\"comment\"># -1</span></span><br><span class=\"line\">    print(<span class=\"string\">\"End Time: &#123;&#125;\"</span>.format(time.asctime(time.localtime(time.time()))))</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World, Start Prometheus Client /metrics Server!\\nServer: 127.0.0.1:8000/metrics \"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure><br>结果演示: <a href=\"http://127.0.0.1:8000/metrics\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/metrics</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP app_inprogress number of http server in progress</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_inprogress gauge</span></span><br><span class=\"line\">app_inprogress 2.0    <span class=\"comment\"># 每次访问 (+3-1)</span></span><br><span class=\"line\"><span class=\"comment\"># HELP app_last_seconds The last time a app was Served</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_last_seconds gauge</span></span><br><span class=\"line\">app_last_seconds 1.6233011413151145e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP app_inprogress_modify number of http server in progress modify</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_inprogress_modify gauge</span></span><br><span class=\"line\">app_inprogress_modify 0.0</span><br><span class=\"line\"><span class=\"comment\"># HELP app_last_time_seconds The last time a app was Served</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_last_time_seconds gauge</span></span><br><span class=\"line\">app_last_time_seconds 1.6233011413151145e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP current_time_seconds The Current Time</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE current_time_seconds gauge</span></span><br><span class=\"line\">current_time_seconds 1.6233011425841126e+09</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Summary 数据类型</strong><br>描述: 该数据类型主要针对于系统性能的监测(平均延迟数据)，例如除了后端的延时你可能也希望跟踪收到的后端响应体的大小，指标名称即<code>指标_count 与 指标_sum</code>分别代表调用数量和测控值得总和。</p>\n<p>代码演示:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中使用 Summary 数据类型记录指标</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> Summary,start_http_server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LATENCY 跟踪app程序的耗时。</span></span><br><span class=\"line\">LATENCY = Summary(<span class=\"string\">'app_latency_seconds'</span>,<span class=\"string\">'app 程序耗时统计单位秒'</span>)</span><br><span class=\"line\"><span class=\"comment\"># LATENCYMODIFY 采用修饰器来跟踪app程序的耗时。</span></span><br><span class=\"line\">LATENCYMODIFY = Summary(<span class=\"string\">'app_latencymodify_seconds'</span>,<span class=\"string\">'采用修饰器来验证 app 程序耗时统计单位秒'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">  @LATENCYMODIFY.time()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 程序起始时间</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">b\"Hello World! Prometheus Summary Example!\"</span>)</span><br><span class=\"line\">    LATENCY.observe(time.time() - start)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World, Start Prometheus Client /metrics Server!\\nServer: 127.0.0.1:8000/metrics\"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p>结果说明: 默认是指标 =&gt; <code>指标名称_count 与 指标名称_sum</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP app_latency_seconds app 程序耗时统计单位秒</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latency_seconds summary</span></span><br><span class=\"line\">app_latency_seconds_count 15.0                <span class=\"comment\"># app 页面请求的次数</span></span><br><span class=\"line\">app_latency_seconds_sum 0.005997180938720703  <span class=\"comment\"># 每次 app 页面生成到展示的时间之和</span></span><br><span class=\"line\"><span class=\"comment\"># HELP app_latency_seconds_created app 程序耗时统计单位秒</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latency_seconds_created gauge</span></span><br><span class=\"line\">app_latency_seconds_created 1.6233078021234589e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP app_latencymodify_seconds 采用修饰器来验证 app 程序耗时统计单位秒</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latencymodify_seconds summary</span></span><br><span class=\"line\">app_latencymodify_seconds_count 15.0</span><br><span class=\"line\">app_latencymodify_seconds_sum 0.006268700000005012</span><br><span class=\"line\"><span class=\"comment\"># HELP app_latencymodify_seconds_created 采用修饰器来验证 app 程序耗时统计单位秒</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latencymodify_seconds_created gauge</span></span><br><span class=\"line\">app_latencymodify_seconds_created 1.6233078021234589e+09</span><br></pre></td></tr></table></figure></p>\n<p>Tips ：在<code>Prometheus</code>中获得最后一分钟的平均延时,PromQL查询语句<code>rate(app_latency_seconds_sum{job=&quot;control&quot;}[1m])  / rate (app_latency_seconds_count{job=&quot;control&quot;}[1m])</code>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210610150812.png\" alt=\"WeiyiGeek.app_latency_seconds_sum\" title=\"\" class=\"\">\n                <p>WeiyiGeek.app_latency_seconds_sum</p>\n            </figure>\n<p><br></p>\n<p><strong>Histogram 数据类型</strong><br>描述: 该类型主要是用于告诉你低于某一个值得事件个数(<code>分位数</code>), 例如0.95分位数为300ms代表95%得请求耗时小于300ms。<br>Histogram 数据类型指标是由<code>_count,_sum,_bukect</code>组成。</p>\n<p>关键说明：桶(Bucket)它是一个counter数据类型的时序集合(必须有序),但是桶的数量影响着性能我们可以采用Prometheus中metric_relable_configs来丢弃一些无关的桶。例如一组桶<code>(1ms, 10ms, 25ms)</code>用来跟踪落入每个桶中的事件个数。</p>\n<p>代码演示:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中使用 Histogram 数据类型记录指标</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> Histogram,start_http_server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># LATENCYTIME 使用时间函数来跟踪延时(Histogram)</span></span><br><span class=\"line\">LATENCYTIME = Histogram(<span class=\"string\">'app_latency_time_seconds'</span>,<span class=\"string\">'app 程序访问延迟时间统计'</span>,buckets=[<span class=\"number\">0.0001</span> * (<span class=\"number\">2</span>**x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">  @LATENCYTIME.time()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">b\"Hello World! Prometheus Histogram Example!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Hello World, Start Prometheus Client /metrics Server!\\nServer: 127.0.0.1:8000/metrics\"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure></p>\n<p>结果说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP app_latency_time_seconds app 程序访问延迟时间统计</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latency_time_seconds histogram</span></span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0002\"</span>&#125; 0.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0004\"</span>&#125; 31.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0008\"</span>&#125; 51.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0016\"</span>&#125; 56.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0032\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0064\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0128\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0256\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0512\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"+Inf\"</span>&#125; 57.0</span><br><span class=\"line\">app_latency_time_seconds_count 57.0</span><br><span class=\"line\">app_latency_time_seconds_sum 0.027456399999900682</span><br><span class=\"line\"><span class=\"comment\"># HELP app_latency_time_seconds_created app 程序访问延迟时间统计</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE app_latency_time_seconds_created gauge</span></span><br><span class=\"line\">app_latency_time_seconds_created 1.6233113814601374e+09</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 分位数与百分位的选择我们知道95%是0.95分位数,由于更喜欢基本单位所有Prometheus默认选择分位数进行展示,而在Grafana中表示比例时常常使用百分位。<br>Tips : 注意如果是 Histogram 数据类型其必须是有标签的,并且 +Inf 分桶是必需的不应该丢弃,。<br>Tips : 我们可以采用PromQL中的函数激素那桶中的分位数，例如0.95分位数(第95个百分位数)其表达式如下<code>histogram_quantile(0.95, rate(app_latency_time_seconds_bucket[1m]))</code>;<br>Tips : 服务等级协议(Service-Level Agreements,SLA) 显式指定一个用来记录延迟的桶，例如在 histogram 中有一个0.0016s的桶,可通过以下准确的计算出耗时超过0.0016s的请求从而判断是否达到SLA要求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app_latency_time_seconds_bucket&#123;le=\"0.0016\"&#125; 56.0</span></span><br><span class=\"line\"><span class=\"comment\"># app_latency_time_seconds_bucket&#123;le=\"+Inf\"&#125; 57.0</span></span><br><span class=\"line\">app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"0.0016\"</span>&#125; / ignoring(le) app_latency_time_seconds_bucket&#123;le=<span class=\"string\">\"+Inf\"</span>&#125;   </span><br><span class=\"line\">&#123;instance=<span class=\"string\">\"10.20.172.103:8000\"</span>, job=<span class=\"string\">\"control\"</span>&#125;\t0.9824561403508771  <span class=\"comment\"># =&gt; 56 / 57</span></span><br></pre></td></tr></table></figure><br>Tips : 同样我们可以利用下面的表达式公式进行计算最后30分钟的延迟<code>rate(app_latency_time_seconds_sum{job=&quot;control&quot;}[30m]) / rate (app_latency_time_seconds_count{job=&quot;control&quot;}[30m])</code></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210610161127.png\" alt=\"WeiyiGeek.histogram_quantile\" title=\"\" class=\"\">\n                <p>WeiyiGeek.histogram_quantile</p>\n            </figure>\n<p><br></p>\n<h4 id=\"3-3-Python-Prometheus-库实践\"><a href=\"#3-3-Python-Prometheus-库实践\" class=\"headerlink\" title=\"3.3 Python Prometheus 库实践\"></a>3.3 Python Prometheus 库实践</h4><p>参考地址: <a href=\"https://prometheus.io/docs/instrumenting/clientlibs/\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/docs/instrumenting/clientlibs/</a></p>\n<ul>\n<li><strong>Counter</strong> : 计数器上升并在进程重新启动时重置。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from prometheus_client import Counter</span><br><span class=\"line\">c = Counter(<span class=\"string\">'my_failures'</span>, <span class=\"string\">'Description of counter'</span>)</span><br><span class=\"line\">c.inc()     <span class=\"comment\"># Increment by 1</span></span><br><span class=\"line\">c.inc(1.6)  <span class=\"comment\"># Increment by given value</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : Counter 指标类型只能增加，重启时置零，可以使用计数器来表示所服务的请求数，已完成的任务或错误。</p>\n<ul>\n<li><strong>Gauge</strong> : 仪表可以升降。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example</span></span><br><span class=\"line\">from prometheus_client import Gauge</span><br><span class=\"line\">g = Gauge(<span class=\"string\">'my_inprogress_requests'</span>, <span class=\"string\">'Description of gauge'</span>)</span><br><span class=\"line\">g.inc()      <span class=\"comment\"># Increment by 1</span></span><br><span class=\"line\">g.dec(10)    <span class=\"comment\"># Decrement by given value</span></span><br><span class=\"line\">g.set(4.2)   <span class=\"comment\"># Set to a given value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 Labels</span></span><br><span class=\"line\">from prometheus_client import Counter</span><br><span class=\"line\">c = Counter(<span class=\"string\">'my_requests_total'</span>, <span class=\"string\">'HTTP Failures'</span>, [<span class=\"string\">'method'</span>, <span class=\"string\">'endpoint'</span>])</span><br><span class=\"line\">c.labels(<span class=\"string\">'get'</span>, <span class=\"string\">'/'</span>).inc()</span><br><span class=\"line\">c.labels(<span class=\"string\">'post'</span>, <span class=\"string\">'/submit'</span>).inc()</span><br><span class=\"line\"><span class=\"comment\"># Labels can also be passed as keyword-arguments:</span></span><br><span class=\"line\">from prometheus_client import Counter</span><br><span class=\"line\">c = Counter(<span class=\"string\">'my_requests_total'</span>, <span class=\"string\">'HTTP Failures'</span>, [<span class=\"string\">'method'</span>, <span class=\"string\">'endpoint'</span>])</span><br><span class=\"line\">c.labels(method=<span class=\"string\">'get'</span>, endpoint=<span class=\"string\">'/'</span>).inc()</span><br><span class=\"line\">c.labels(method=<span class=\"string\">'post'</span>, endpoint=<span class=\"string\">'/submit'</span>).inc()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Gauge example:</span></span><br><span class=\"line\">from prometheus_client import Gauge</span><br><span class=\"line\">g = Gauge(<span class=\"string\">'my_inprogress_requests'</span>, <span class=\"string\">'Description of gauge'</span>,[<span class=\"string\">'mylabelname'</span>])</span><br><span class=\"line\">g.labels(mylabelname=<span class=\"string\">'labelname'</span>).<span class=\"built_in\">set</span>(30)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : Gauge 指标类型表示单个数值，可以任意地上升和下降的度量。通常用于测量值，如温度或当前内存使用情况。</p>\n<p>Tips : Gauge 指标不能使用<code>rate，irate</code>等增长率统计表达式</p>\n<p><br/></p>\n<ul>\n<li><strong>Summary、Histogram</strong>: 两种指标类型使用较少。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import psutil</span><br><span class=\"line\">import socket</span><br><span class=\"line\">from prometheus_client import Gauge,start_http_server</span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\"></span><br><span class=\"line\">g = Gauge(<span class=\"string\">'cup_use_percent_test_metric'</span>, <span class=\"string\">'Description of gauge'</span>,[<span class=\"string\">'hostip'</span>])</span><br><span class=\"line\">host_ip = socket.gethostbyname(socket.getfqdn(socket.gethostname()))      <span class=\"comment\"># 获取本机IP</span></span><br><span class=\"line\"></span><br><span class=\"line\">def get_cup_use():</span><br><span class=\"line\">    cup_use_percent = psutil.cpu_percent(0.5)      <span class=\"comment\"># 获取CPU使用率</span></span><br><span class=\"line\">    g.labels(hostip=host_ip).<span class=\"built_in\">set</span>(cup_use_percent)  <span class=\"comment\"># 本机IP传入labels，CPU使用率传入value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  start_http_server(8006)                          <span class=\"comment\"># 启动8006端口</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> True:</span><br><span class=\"line\">    get_cup_use()</span><br><span class=\"line\">    sleep(10)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>Python prometheus-client 安装与使用</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install prometheus-client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) Python 封装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">from prometheus_client import Counter, Gauge, Summary</span><br><span class=\"line\">from prometheus_client.core import CollectorRegistry</span><br><span class=\"line\">from prometheus_client.exposition import choose_encoder</span><br><span class=\"line\"></span><br><span class=\"line\">class Monitor:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">    <span class=\"comment\"># 注册收集器&amp;最大耗时map</span></span><br><span class=\"line\">    self.collector_registry = CollectorRegistry(auto_describe=False)</span><br><span class=\"line\">    self.request_time_max_map = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 接口调用summary统计</span></span><br><span class=\"line\">    self.http_request_summary = Summary(name=<span class=\"string\">\"http_server_requests_seconds\"</span>,</span><br><span class=\"line\">                                   documentation=<span class=\"string\">\"Num of request time summary\"</span>,</span><br><span class=\"line\">                                   labelnames=(<span class=\"string\">\"method\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"uri\"</span>),</span><br><span class=\"line\">                                   registry=self.collector_registry)</span><br><span class=\"line\">    <span class=\"comment\"># 接口最大耗时统计</span></span><br><span class=\"line\">    self.http_request_max_cost = Gauge(name=<span class=\"string\">\"http_server_requests_seconds_max\"</span>,</span><br><span class=\"line\">                                  documentation=<span class=\"string\">\"Number of request max cost\"</span>,</span><br><span class=\"line\">                                  labelnames=(<span class=\"string\">\"method\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"uri\"</span>),</span><br><span class=\"line\">                                  registry=self.collector_registry)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 请求失败次数统计</span></span><br><span class=\"line\">    self.http_request_fail_count = Counter(name=<span class=\"string\">\"http_server_requests_error\"</span>,</span><br><span class=\"line\">                                      documentation=<span class=\"string\">\"Times of request fail in total\"</span>,</span><br><span class=\"line\">                                      labelnames=(<span class=\"string\">\"method\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"uri\"</span>),</span><br><span class=\"line\">                                      registry=self.collector_registry)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 模型预测耗时统计</span></span><br><span class=\"line\">    self.http_request_predict_cost = Counter(name=<span class=\"string\">\"http_server_requests_seconds_predict\"</span>,</span><br><span class=\"line\">                                        documentation=<span class=\"string\">\"Seconds of prediction cost in total\"</span>,</span><br><span class=\"line\">                                        labelnames=(<span class=\"string\">\"method\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"uri\"</span>),</span><br><span class=\"line\">                                        registry=self.collector_registry)</span><br><span class=\"line\">    <span class=\"comment\"># 图片下载耗时统计</span></span><br><span class=\"line\">    self.http_request_download_cost = Counter(name=<span class=\"string\">\"http_server_requests_seconds_download\"</span>,</span><br><span class=\"line\">                                         documentation=<span class=\"string\">\"Seconds of download cost in total\"</span>,</span><br><span class=\"line\">                                         labelnames=(<span class=\"string\">\"method\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"uri\"</span>),</span><br><span class=\"line\">                                         registry=self.collector_registry)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取/metrics结果</span></span><br><span class=\"line\">    def get_prometheus_metrics_info(self, handler):</span><br><span class=\"line\">        encoder, content_type = choose_encoder(handler.request.headers.get(<span class=\"string\">'accept'</span>))</span><br><span class=\"line\">        handler.set_header(<span class=\"string\">\"Content-Type\"</span>, content_type)</span><br><span class=\"line\">        handler.write(encoder(self.collector_registry))</span><br><span class=\"line\">        self.reset_request_time_max_map()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># summary统计</span></span><br><span class=\"line\">    def set_prometheus_request_summary(self, handler):</span><br><span class=\"line\">        self.http_request_summary.labels(handler.request.method, handler.get_status(), handler.request.path).observe(handler.request.request_time())</span><br><span class=\"line\">        self.set_prometheus_request_max_cost(handler)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 自定义summary统计</span></span><br><span class=\"line\">    def set_prometheus_request_summary_customize(self, method, status, path, cost_time):</span><br><span class=\"line\">        self.http_request_summary.labels(method, status, path).observe(cost_time)</span><br><span class=\"line\">        self.set_prometheus_request_max_cost_customize(method, status, path, cost_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 失败统计</span></span><br><span class=\"line\">    def set_prometheus_request_fail_count(self, handler, amount=1.0):</span><br><span class=\"line\">        self.http_request_fail_count.labels(handler.request.method, handler.get_status(), handler.request.path).inc(amount)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 自定义失败统计</span></span><br><span class=\"line\">    def set_prometheus_request_fail_count_customize(self, method, status, path, amount=1.0):</span><br><span class=\"line\">        self.http_request_fail_count.labels(method, status, path).inc(amount)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 最大耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_max_cost(self, handler):</span><br><span class=\"line\">        requset_cost = handler.request.request_time()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.check_request_time_max_map(handler.request.path, requset_cost):</span><br><span class=\"line\">            self.http_request_max_cost.labels(handler.request.method, handler.get_status(), handler.request.path).<span class=\"built_in\">set</span>(requset_cost)</span><br><span class=\"line\">            self.request_time_max_map[handler.request.path] = requset_cost</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 自定义最大耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_max_cost_customize(self, method, status, path, cost_time):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.check_request_time_max_map(path, cost_time):</span><br><span class=\"line\">            self.http_request_max_cost.labels(method, status, path).<span class=\"built_in\">set</span>(cost_time)</span><br><span class=\"line\">            self.request_time_max_map[path] = cost_time</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预测耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_predict_cost(self, handler, amount=1.0):</span><br><span class=\"line\">        self.http_request_predict_cost.labels(handler.request.method, handler.get_status(), handler.request.path).inc(amount)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 自定义预测耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_predict_cost_customize(self, method, status, path, cost_time):</span><br><span class=\"line\">        self.http_request_predict_cost.labels(method, status, path).inc(cost_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 下载耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_download_cost(self, handler, amount=1.0):</span><br><span class=\"line\">        self.http_request_download_cost.labels(handler.request.method, handler.get_status(), handler.request.path).inc(amount)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 自定义下载耗时统计</span></span><br><span class=\"line\">    def set_prometheus_request_download_cost_customize(self, method, status, path, cost_time):</span><br><span class=\"line\">        self.http_request_download_cost.labels(method, status, path).inc(cost_time)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 校验是否赋值最大耗时map</span></span><br><span class=\"line\">    def check_request_time_max_map(self, uri, cost):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> uri not <span class=\"keyword\">in</span> self.request_time_max_map:</span><br><span class=\"line\">            <span class=\"built_in\">return</span> True</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.request_time_max_map[uri] &lt; cost:</span><br><span class=\"line\">            <span class=\"built_in\">return</span> True</span><br><span class=\"line\">        <span class=\"built_in\">return</span> False</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重置最大耗时map</span></span><br><span class=\"line\">    def reset_request_time_max_map(self):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> self.request_time_max_map:</span><br><span class=\"line\">            self.request_time_max_map[key] = 0.0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 封装调用</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">import tornado</span><br><span class=\"line\">import tornado.ioloop</span><br><span class=\"line\">import tornado.web</span><br><span class=\"line\">import tornado.gen</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">from tools.monitor import Monitor</span><br><span class=\"line\"></span><br><span class=\"line\">global g_monitor</span><br><span class=\"line\"></span><br><span class=\"line\">class ClassifierHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def post(self):</span><br><span class=\"line\">        <span class=\"comment\"># TODO Something you need</span></span><br><span class=\"line\">        <span class=\"comment\"># work....</span></span><br><span class=\"line\">        <span class=\"comment\"># 统计Summary，包括请求次数和每次耗时</span></span><br><span class=\"line\">        g_monitor.set_prometheus_request_summary(self)</span><br><span class=\"line\">        self.write(<span class=\"string\">\"OK\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class PingHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def head(self):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'INFO'</span>, datetime.now(), <span class=\"string\">\"/ping Head.\"</span>)</span><br><span class=\"line\">        g_monitor.set_prometheus_request_summary(self)</span><br><span class=\"line\">        self.write(<span class=\"string\">\"OK\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'INFO'</span>, datetime.now(), <span class=\"string\">\"/ping Get.\"</span>)</span><br><span class=\"line\">        g_monitor.set_prometheus_request_summary(self)</span><br><span class=\"line\">        self.write(<span class=\"string\">\"OK\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class MetricsHandler(tornado.web.RequestHandler):</span><br><span class=\"line\">    def get(self):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'INFO'</span>, datetime.now(), <span class=\"string\">\"/metrics Get.\"</span>)</span><br><span class=\"line\">    g_monitor.set_prometheus_request_summary(self)</span><br><span class=\"line\">    <span class=\"comment\"># 通过Metrics接口返回统计结果</span></span><br><span class=\"line\">    \tg_monitor.get_prometheus_metrics_info(self)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">def make_app():</span><br><span class=\"line\">    <span class=\"built_in\">return</span> tornado.web.Application([</span><br><span class=\"line\">        (r<span class=\"string\">\"/ping?\"</span>, PingHandler),</span><br><span class=\"line\">        (r<span class=\"string\">\"/metrics?\"</span>, MetricsHandler),</span><br><span class=\"line\">        (r<span class=\"string\">\"/work?\"</span>, ClassifierHandler)</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    g_monitor = Monitor()</span><br><span class=\"line\">  </span><br><span class=\"line\">  app = make_app()</span><br><span class=\"line\">    app.listen(port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<!-- ### 4.综合实践\n#### 4.1 采用Java程序进行声明测控和展示\n后续补充采用 simpleclient 实践。 -->\n<hr>\n<h2 id=\"0x01-PushGateway-使用实践\"><a href=\"#0x01-PushGateway-使用实践\" class=\"headerlink\" title=\"0x01 PushGateway 使用实践\"></a>0x01 PushGateway 使用实践</h2><p>描述: PushGateway 作为 Prometheus 生态中的一个重要一员，它允许任何客户端向其 Push 符合规范的自定义监控指标再结合 Prometheus 统一收集监控。</p>\n<h3 id=\"1-基础说明\"><a href=\"#1-基础说明\" class=\"headerlink\" title=\"1.基础说明\"></a>1.基础说明</h3><p>我们常常可以在以下两种场景中使用:</p>\n<ul>\n<li>1) 场景1: Prometheus 采用定时 Pull 模式，可能由于子网络或者防火墙的原因，不能直接拉取各个 Target 的指标数据，此时可以采用各个 get 往 PushGateway 上 Push 数据，然后 Prometheus 去 PushGateway 上定时 pull。</li>\n<li>2) 场景2: 在企业内部需要监控多个业务数据并且需要将各个不同的业务数据进行统一汇总时也可以采用PushGateway 来统一收集，然后 Prometheus 来统一拉取。</li>\n</ul>\n<p><strong>实验目的：</strong><br>描述: 实现Pushgateway组件多种将采集数据呈现给Prometheus，通过Python和Curl进行上传指标数据到Pushgateway之中。</p>\n<p><strong>实验环境:</strong><br>Prometheus –&gt; V2.27.1<br>Pushgateway –&gt; V1.4.1</p>\n<p>Tips ： Pushgateway不是将Prometheus从拉取模式转为推送模式的方案。</p>\n<p><br></p>\n<h3 id=\"2-实战配置\"><a href=\"#2-实战配置\" class=\"headerlink\" title=\"2.实战配置\"></a>2.实战配置</h3><p>描述: 假设您已经安装好Prometheus服务端环境在此基础之上进行如下配置。</p>\n<ul>\n<li>Step 1.<a href=\"https://github.com/prometheus/pushgateway\" target=\"_blank\" rel=\"noopener\">下载安装Pushgateway</a>并注册为系统服务地址。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tee /usr/lib/systemd/system/pushgateway.service &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Prometheus pushgateway Server Systemd</span><br><span class=\"line\">Documentation=https://prometheus.io</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">StandardError=journal</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/pushgateway/pushgateway --web.listen-address=:9091</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=3s</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload &amp;&amp; systemctl restart pushgateway.service</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210614161122.png\" alt=\"WeiyiGeek.验证Pushgateway服务\" title=\"\" class=\"\">\n                <p>WeiyiGeek.验证Pushgateway服务</p>\n            </figure>\n<p><br/></p>\n<ul>\n<li>Step 2.在Prometheus.yml配置文件中设置抓取本地安装pushgateway的IP及其端口配置。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">- job_name:</span> <span class=\"string\">'pushgateway'</span></span><br><span class=\"line\"><span class=\"attr\">    honor_labels:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    static_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - targets:</span> <span class=\"string\">['localhost:9091']</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips: 设置<code>honor_labels: true</code>是因为prometheus配置pushgateway 的时候,也会指定job和instance,但是它只表示pushgateway实例,不能真正表达收集数据的含义。所以配置pushgateway需要添加honor_labels:true,避免收集数据本身的job和instance被覆盖。</p>\n<ul>\n<li>Step 3.我们可以通过多种方式将数据推送到Pushgateway之中，最常用就是官网提供的Python library模块以及Curl POST指标数据上传。<br>描述: 在Python客户端prometheus模块之中主要采用以下三个函数以及采用request模块进行POST指标推送，官网帮助: <a href=\"https://github.com/prometheus/client_python；\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus/client_python；</a><ul>\n<li>push_to_gateway : 首先移除所有跟这个作业相关的指标并记录下刚推送的数据(<code>实际采用的是HTTP的PUT方法实现</code>)</li>\n<li>pushadd_to_gateway : 覆盖已经重名的指标而之前创建不同名的指标将保持不变(<code>实际采用的是HTTP的POST方法实现</code>)</li>\n<li>delete_from_gateway : 删除所有与该作业相关的指标(<code>实际采用的是HTTP的DELETE方法实现</code>)</li>\n</ul>\n</li>\n</ul>\n<p>综合实践:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中使用Python自定义指标并将采集的数据推送到Pushgateway上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests,random,pprint</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> CollectorRegistry, Gauge, pushadd_to_gateway, registry</span><br><span class=\"line\"></span><br><span class=\"line\">pushgateway_ip = <span class=\"string\">\"10.10.107.249\"</span></span><br><span class=\"line\">pushgateway_port = <span class=\"string\">\"9091\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1.创建一个测控批处理任务并且将指标数据推送给Pushgateway。</span></span><br><span class=\"line\">registry = CollectorRegistry()</span><br><span class=\"line\">durationtime = Gauge(<span class=\"string\">'app_job_duration_time_seconds'</span>,<span class=\"string\">'duration of my batch in seconds'</span>, registry=registry)</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">  <span class=\"keyword\">with</span> durationtime.time():</span><br><span class=\"line\">    <span class=\"comment\"># Guage(metric_name,HELP,labels_name,registry=registry)</span></span><br><span class=\"line\">    suc = Gauge(<span class=\"string\">'app_job_sucess_seconds'</span>,<span class=\"string\">'Last time my job successfully finished'</span>,[<span class=\"string\">'dst_ip'</span>,<span class=\"string\">'name'</span>],registry=registry)</span><br><span class=\"line\">    suc.labels(<span class=\"string\">'192.168.1.1'</span>,<span class=\"string\">'app'</span>).set(random.randrange(<span class=\"number\">999</span>,<span class=\"number\">9999</span>))</span><br><span class=\"line\">    suc.labels(<span class=\"string\">'192.168.1.11'</span>,<span class=\"string\">'weblogic'</span>).dec(<span class=\"number\">2</span>)  <span class=\"comment\">#dec递减2</span></span><br><span class=\"line\">    suc.labels(<span class=\"string\">'192.168.1.12'</span>,<span class=\"string\">'nginx'</span>).inc()  <span class=\"comment\">#inc递增，默认增1</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">  pushadd_to_gateway(pushgateway_ip+<span class=\"string\">\":\"</span>+pushgateway_port,job=<span class=\"string\">'app'</span>,registry=registry)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.采用request模块进行指标数据上传。</span></span><br><span class=\"line\">quota = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"># TYPE test_metric counter</span></span><br><span class=\"line\"><span class=\"string\">test_metric&#123;label=\"test\"&#125; %s</span></span><br><span class=\"line\"><span class=\"string\"># TYPE another_metric gauge</span></span><br><span class=\"line\"><span class=\"string\"># HELP another_metric Just an example.</span></span><br><span class=\"line\"><span class=\"string\">another_metric&#123;label=\"prod\"&#125; %s</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span>%(random.randrange(<span class=\"number\">1</span>,<span class=\"number\">100</span>),random.random())</span><br><span class=\"line\"><span class=\"comment\"># quota_bin = binascii.hexlify(quota)</span></span><br><span class=\"line\">res = requests.post(url=<span class=\"string\">\"http://\"</span>+pushgateway_ip+<span class=\"string\">\":\"</span>+pushgateway_port+<span class=\"string\">\"/metrics/job/app/custom_instance/test_instance\"</span>,data=quota,headers=&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/octet-stream'</span>&#125;)</span><br><span class=\"line\">pprint.pprint(res)</span><br><span class=\"line\">pprint.pprint(res.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -- 执行结果 ---</span></span><br><span class=\"line\">&lt;Response [<span class=\"number\">200</span>]&gt;</span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210614170019.png\" alt=\"WeiyiGeek.pushadd_to_gateway\" title=\"\" class=\"\">\n                <p>WeiyiGeek.pushadd_to_gateway</p>\n            </figure></p>\n<ul>\n<li>Step 4.我们采用Linux中的curl进行上传指标数据到Pushgateway之中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 1.推送单个或者多个监控指标到网关</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"name_count 1\"</span> | curl --data-binary @- http://10.10.107.249:9091/metrics/job/curl_job</span><br><span class=\"line\">cat &lt;&lt;EOF | curl --data-binary @- http://10.10.107.249:9091/metrics/job/curl_job/app/weiyigeek</span><br><span class=\"line\"><span class=\"comment\"># TYPE app_init_total counter</span></span><br><span class=\"line\"><span class=\"comment\"># HELP This is app initialization count </span></span><br><span class=\"line\">app_init_total 1314</span><br><span class=\"line\"><span class=\"comment\"># TYPE app_init_metric gauge</span></span><br><span class=\"line\"><span class=\"comment\"># HELP app_init_metric Just an example.</span></span><br><span class=\"line\">app_init_metric 1024.16</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -2.把多个指标写入到文件里通过curl的@读取文件来上传指标</span></span><br><span class=\"line\">tee metrics &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">http_request_total&#123;code=<span class=\"string\">\"200\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 276683</span><br><span class=\"line\">http_request_total&#123;code=<span class=\"string\">\"400\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 0</span><br><span class=\"line\">http_request_total&#123;code=<span class=\"string\">\"408\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 7</span><br><span class=\"line\">http_request_total&#123;code=<span class=\"string\">\"401\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 0</span><br><span class=\"line\">http_request_total&#123;schema=<span class=\"string\">\"http\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 277725</span><br><span class=\"line\">http_request_total&#123;schema=<span class=\"string\">\"https\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 0</span><br><span class=\"line\">http_request_time&#123;code=<span class=\"string\">\"total\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 76335.809000</span><br><span class=\"line\">http_request_uniqip&#123;domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 216944</span><br><span class=\"line\">http_request_maxip&#123;clientip=<span class=\"string\">\"172.27.0.12\"</span>,domain=<span class=\"string\">\"weiyigeek.top\"</span>&#125; 81</span><br><span class=\"line\">EOF</span><br><span class=\"line\">curl -XPOST --data-binary @metrics http://10.10.107.249:9091/metrics/job/curl_job/app/my_blog/site/weiyigeek.top</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210614223940.png\" alt=\"WeiyiGeek.curl-post\" title=\"\" class=\"\">\n                <p>WeiyiGeek.curl-post</p>\n            </figure>\n<p><br></p>\n<ul>\n<li>Step 5.测控进行指标的多标签生成实例演示</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Desc: 演示在测控中为指标设置多个标签</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> http.server</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> prometheus_client <span class=\"keyword\">import</span> Gauge, Summary, start_http_server,Counter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - REQUESTS 记录网站各访问路径与请求方法合计次数(多标签)</span></span><br><span class=\"line\">REQUESTS = Counter(<span class=\"string\">'http_requested_total'</span>, <span class=\"string\">'网站各访问路径与请求方法合计'</span>,[<span class=\"string\">'path'</span>, <span class=\"string\">'method'</span>])</span><br><span class=\"line\"><span class=\"comment\"># - ENUM 记录枚举值出现次数(多标签)</span></span><br><span class=\"line\">ENUM = Counter(<span class=\"string\">'http_enum_total'</span>, <span class=\"string\">'请求网站后枚举值的此时'</span>,[<span class=\"string\">'index'</span>,<span class=\"string\">'name'</span>])</span><br><span class=\"line\">DEMO_ARAAY = [<span class=\"string\">\"one\"</span>,<span class=\"string\">\"two\"</span>,<span class=\"string\">\"there\"</span>,<span class=\"string\">\"four\"</span>]</span><br><span class=\"line\"><span class=\"comment\"># - MODIFIER 使用带有标签的修饰器(多标签)</span></span><br><span class=\"line\">MODIFIER = Summary(<span class=\"string\">'http_modifier_seconds'</span>, <span class=\"string\">'请求网站中使用带有标签的修饰器'</span>, [<span class=\"string\">'index'</span>,<span class=\"string\">'name'</span>])</span><br><span class=\"line\">modifier = MODIFIER.labels(<span class=\"string\">'MODIFIER'</span>,<span class=\"string\">'weiyigeek'</span>)</span><br><span class=\"line\"><span class=\"comment\"># - DEMOINFO - 暴露指标的指定信息</span></span><br><span class=\"line\">python_info = &#123; <span class=\"string\">\"implementation\"</span>: <span class=\"string\">\"CPython\"</span>, <span class=\"string\">\"major\"</span>: <span class=\"string\">\"3\"</span>, <span class=\"string\">\"minor\"</span>: <span class=\"string\">\"7\"</span>, <span class=\"string\">\"patchlevel\"</span>: <span class=\"string\">\"0\"</span>, <span class=\"string\">\"version\"</span>: <span class=\"string\">\"3.8.0\"</span> &#125;</span><br><span class=\"line\">DEMOINFO = Gauge(<span class=\"string\">'demo_info'</span>,<span class=\"string\">'暴露指标的指定信息'</span>,labelnames=python_info.keys())</span><br><span class=\"line\">DEMOINFO.labels(**python_info).set(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span><span class=\"params\">(http.server.BaseHTTPRequestHandler)</span>:</span> </span><br><span class=\"line\"><span class=\"meta\">  @modifier.time()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    REQUESTS.labels(self.path, self.command).inc()</span><br><span class=\"line\">    ENUM.labels(DEMO_ARAAY[random.randint(<span class=\"number\">0</span>,DEMO_ARAAY.__len__() - <span class=\"number\">1</span>)], <span class=\"string\">'ENUM'</span>).inc()</span><br><span class=\"line\">    self.send_response(<span class=\"number\">200</span>)</span><br><span class=\"line\">    self.end_headers()</span><br><span class=\"line\">    self.wfile.write(<span class=\"string\">b\"Hello World! Multi label Example!\"</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  print(<span class=\"string\">\"Start Prometheus Client /metrics Server!\"</span>)</span><br><span class=\"line\">  start_http_server(<span class=\"number\">8000</span>)</span><br><span class=\"line\">  server = http.server.HTTPServer((<span class=\"string\">'0.0.0.0'</span>,<span class=\"number\">8001</span>),Hello)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure>\n<p>生成示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP http_requested_total 网站各访问路径与请求方法合计</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_requested_total counter</span></span><br><span class=\"line\">http_requested_total&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/number\"</span>&#125; 4.0</span><br><span class=\"line\">http_requested_total&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/favicon.ico\"</span>&#125; 7.0</span><br><span class=\"line\">http_requested_total&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/result\"</span>&#125; 1.0</span><br><span class=\"line\">http_requested_total&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/\"</span>&#125; 2.0</span><br><span class=\"line\">http_requested_total&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/api/\"</span>&#125; 5.0</span><br><span class=\"line\"><span class=\"comment\"># HELP http_requested_created 网站各访问路径与请求方法合计</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_requested_created gauge</span></span><br><span class=\"line\">http_requested_created&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/number\"</span>&#125; 1.623854061065871e+09</span><br><span class=\"line\">http_requested_created&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/favicon.ico\"</span>&#125; 1.6238540611298337e+09</span><br><span class=\"line\">http_requested_created&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/result\"</span>&#125; 1.6238540711289563e+09</span><br><span class=\"line\">http_requested_created&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/\"</span>&#125; 1.6238540782242467e+09</span><br><span class=\"line\">http_requested_created&#123;method=<span class=\"string\">\"GET\"</span>,path=<span class=\"string\">\"/api/\"</span>&#125; 1.6238541072589352e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP http_enum_total 请求网站后枚举值的此时</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_enum_total counter</span></span><br><span class=\"line\">http_enum_total&#123;index=<span class=\"string\">\"two\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 4.0</span><br><span class=\"line\">http_enum_total&#123;index=<span class=\"string\">\"there\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 4.0</span><br><span class=\"line\">http_enum_total&#123;index=<span class=\"string\">\"one\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 6.0</span><br><span class=\"line\">http_enum_total&#123;index=<span class=\"string\">\"four\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 5.0</span><br><span class=\"line\"><span class=\"comment\"># HELP http_enum_created 请求网站后枚举值的此时</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_enum_created gauge</span></span><br><span class=\"line\">http_enum_created&#123;index=<span class=\"string\">\"two\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 1.623854061065871e+09</span><br><span class=\"line\">http_enum_created&#123;index=<span class=\"string\">\"there\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 1.6238540611298337e+09</span><br><span class=\"line\">http_enum_created&#123;index=<span class=\"string\">\"one\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 1.623854061224779e+09</span><br><span class=\"line\">http_enum_created&#123;index=<span class=\"string\">\"four\"</span>,name=<span class=\"string\">\"ENUM\"</span>&#125; 1.6238540614066763e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP http_modifier_seconds 请求网站中使用带有标签的修饰器</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_modifier_seconds summary</span></span><br><span class=\"line\">http_modifier_seconds_count&#123;index=<span class=\"string\">\"MODIFIER\"</span>,name=<span class=\"string\">\"weiyigeek\"</span>&#125; 19.0</span><br><span class=\"line\">http_modifier_seconds_sum&#123;index=<span class=\"string\">\"MODIFIER\"</span>,name=<span class=\"string\">\"weiyigeek\"</span>&#125; 0.008954100000021725</span><br><span class=\"line\"><span class=\"comment\"># HELP http_modifier_seconds_created 请求网站中使用带有标签的修饰器</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE http_modifier_seconds_created gauge</span></span><br><span class=\"line\">http_modifier_seconds_created&#123;index=<span class=\"string\">\"MODIFIER\"</span>,name=<span class=\"string\">\"weiyigeek\"</span>&#125; 1.6238540450573144e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP demo_info 暴露指标的指定信息</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE demo_info gauge</span></span><br><span class=\"line\">demo_info&#123;implementation=<span class=\"string\">\"CPython\"</span>,major=<span class=\"string\">\"3\"</span>,minor=<span class=\"string\">\"7\"</span>,patchlevel=<span class=\"string\">\"0\"</span>,version=<span class=\"string\">\"3.8.0\"</span>&#125; 1.0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li>Step 6.上传我们删除的指标，删除标识的组中的所有指标<code>{job=&quot;curl_job&quot;}</code>请注意，这不包括<code>{job=&quot;curl_job&quot;,instance=&quot;some_instance&quot;}</code>中的指标 ，即使这些指标具有相同的 job 标签。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 1.只会删除标签只有job=\"curl_job\"的指标</span></span><br><span class=\"line\">curl -X DELETE http://10.10.107.249:9091/metrics/job/curl_job/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 2.删除指定工作任务名以及指标标签的指标</span></span><br><span class=\"line\">curl -X DELETE http://10.10.107.249:9091/metrics/job/curl_job/app/weiyigeek</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 3.当pushgateway启动时设置--web.enable-admin-api参数就可以一键清空所有指标了</span></span><br><span class=\"line\">curl -X PUT http://10.10.107.249:9091/api/v1/admin/wipe</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : 注意在一次推送后如果您不进行清除则该组信息会永远的保存在Pushgateway，在停用某个批处理作业时一定要把存储在pushgateway的指标进行清除。</p>\n<hr>\n<h2 id=\"0X02-Blackbox-使用实践\"><a href=\"#0X02-Blackbox-使用实践\" class=\"headerlink\" title=\"0X02 Blackbox 使用实践\"></a>0X02 Blackbox 使用实践</h2><h3 id=\"1-基础说明-1\"><a href=\"#1-基础说明-1\" class=\"headerlink\" title=\"1.基础说明\"></a>1.基础说明</h3><p>描述: 我们可以通过 Blackbox 黑盒导出器来监控目标<code>HTTP, HTTPS, DNS, TCP and ICMP</code>等协议服务，主要用于那些不能直接再应用实例中运行导出器的情况下使用。</p>\n<p>例如: 我们可以监控Web服务是否可以正常为用户提供服务，通常是通过访问负载均衡或者VIP地址来监控该服务。</p>\n<p><strong>Blackbox exporter configuration</strong>: <a href=\"https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus/blackbox_exporter/blob/master/CONFIGURATION.md</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 通用占位符定义如下：</span></span><br><span class=\"line\">  * &lt;boolean&gt;: a boolean that can take the values <span class=\"literal\">true</span> or <span class=\"literal\">false</span></span><br><span class=\"line\">  * &lt;int&gt;: a regular <span class=\"built_in\">integer</span></span><br><span class=\"line\">  * &lt;duration&gt;: a duration matching the regular expression [0-9]+(ms|[smhdwy])</span><br><span class=\"line\">  * &lt;filename&gt;: a valid path <span class=\"keyword\">in</span> the current working directory</span><br><span class=\"line\">  * &lt;string&gt;: a regular string</span><br><span class=\"line\">  * &lt;secret&gt;: a regular string that is a secret, such as a password</span><br><span class=\"line\">  * &lt;regex&gt;: a regular expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - exporter configuration file format</span></span><br><span class=\"line\">Module</span><br><span class=\"line\">  <span class=\"comment\"># The protocol over which the probe will take place (http, tcp, dns, icmp).</span></span><br><span class=\"line\">  prober: &lt;prober_string&gt;</span><br><span class=\"line\">  <span class=\"comment\"># How long the probe will wait before giving up.</span></span><br><span class=\"line\">  [ timeout: &lt;duration&gt; ]</span><br><span class=\"line\">  <span class=\"comment\"># The specific probe configuration - at most one of these should be specified.</span></span><br><span class=\"line\">  [ http: &lt;http_probe&gt; ]</span><br><span class=\"line\">  [ tcp: &lt;tcp_probe&gt; ]</span><br><span class=\"line\">  [ dns: &lt;dns_probe&gt; ]</span><br><span class=\"line\">  [ icmp: &lt;icmp_probe&gt; ]</span><br></pre></td></tr></table></figure></p>\n<p>官方示例: <a href=\"https://github.com/prometheus/blackbox_exporter/blob/master/example.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus/blackbox_exporter/blob/master/example.yml</a></p>\n<p><br></p>\n<h3 id=\"2-实践操作\"><a href=\"#2-实践操作\" class=\"headerlink\" title=\"2.实践操作\"></a>2.实践操作</h3><ul>\n<li><p>Step 1.准备 BlackBox Configure yaml File 分别进行imcp、Tcp、Http、Https、Dns探测实践</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/blackbox</span><br><span class=\"line\">tee /usr/<span class=\"built_in\">local</span>/blackbox/blackbox.yml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">modules:</span><br><span class=\"line\">  icmp_example:</span><br><span class=\"line\">    prober: icmp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    icmp:</span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span></span><br><span class=\"line\"><span class=\"comment\">#     source_ip_address: \"127.0.0.1\"  # 多张网卡时指定</span></span><br><span class=\"line\">  tcp_example:</span><br><span class=\"line\">    prober: tcp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">  tcp_ssh_example: </span><br><span class=\"line\">    prober: tcp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    tcp:</span><br><span class=\"line\">      query_response:</span><br><span class=\"line\">      - expect: <span class=\"string\">\"^SSH-2.0-\"</span>               <span class=\"comment\"># 验证监控端是否以SSH进行响应 </span></span><br><span class=\"line\">  tcp_tls_example:</span><br><span class=\"line\">    prober: tcp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    tcp:</span><br><span class=\"line\">      tls: <span class=\"literal\">true</span></span><br><span class=\"line\">  http_example:</span><br><span class=\"line\">    prober: http</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      valid_http_versions: [<span class=\"string\">\"HTTP/1.1\"</span>, <span class=\"string\">\"HTTP/2.0\"</span>]</span><br><span class=\"line\">      valid_status_codes: []  <span class=\"comment\"># Defaults to 2xx</span></span><br><span class=\"line\">      method: GET</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        User-Agent: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\"</span></span><br><span class=\"line\">      <span class=\"comment\"># 如果存在SSL，则探测失败。</span></span><br><span class=\"line\">      fail_if_ssl: <span class=\"literal\">false</span></span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        insecure_skip_verify: <span class=\"literal\">false</span></span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span> <span class=\"comment\"># defaults to \"ip6\"</span></span><br><span class=\"line\">  https_example:</span><br><span class=\"line\">    prober: http</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      valid_http_versions: [<span class=\"string\">\"HTTP/1.1\"</span>, <span class=\"string\">\"HTTP/2.0\"</span>]</span><br><span class=\"line\">      valid_status_codes: []  <span class=\"comment\"># Defaults to 2xx</span></span><br><span class=\"line\">      method: GET</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        User-Agent: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\"</span></span><br><span class=\"line\">      <span class=\"comment\"># 如果不存在SSL，则探测失败。</span></span><br><span class=\"line\">      fail_if_not_ssl: <span class=\"literal\">false</span> </span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        insecure_skip_verify: <span class=\"literal\">false</span></span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span> <span class=\"comment\"># defaults to \"ip6\"</span></span><br><span class=\"line\">      ip_protocol_fallback: <span class=\"literal\">false</span>  <span class=\"comment\"># no fallback to \"ip6\"</span></span><br><span class=\"line\">  dns_example:</span><br><span class=\"line\">    prober: dns</span><br><span class=\"line\">    dns:</span><br><span class=\"line\">      query_name: <span class=\"string\">\"www.weiyigeek.top\"</span></span><br><span class=\"line\">      query_type: <span class=\"string\">\"A\"</span></span><br><span class=\"line\">      valid_rcodes:</span><br><span class=\"line\">      - NOERROR</span><br><span class=\"line\">  dns_tcp_example:</span><br><span class=\"line\">    prober: dns</span><br><span class=\"line\">    dns:</span><br><span class=\"line\">      transport_protocol: <span class=\"string\">\"tcp\"</span>    <span class=\"comment\"># defaults to \"udp\"</span></span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span> <span class=\"comment\"># defaults to \"ip6\"</span></span><br><span class=\"line\">      query_name: <span class=\"string\">\"www.prometheus.io\"</span></span><br><span class=\"line\">  dns_mx_example:</span><br><span class=\"line\">    prober: dns</span><br><span class=\"line\">    dns:</span><br><span class=\"line\">      query_name: <span class=\"string\">\"weiyigeek.top\"</span></span><br><span class=\"line\">      query_type: <span class=\"string\">\"MX\"</span></span><br><span class=\"line\">      validate_answer_rrs:</span><br><span class=\"line\">        fail_if_not_matches_regexp:</span><br><span class=\"line\">        - <span class=\"string\">\".+\"</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.我们采用 Docker 容器启动 BlackBox Exporter 方便测试。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -d -p 9115:9115 --name blackbox_exporter -v /usr/<span class=\"built_in\">local</span>/blackbox:/config prom/blackbox-exporter:master --config.file=/config/blackbox.yml</span><br><span class=\"line\">d571d7587a031d01fabd82c780d8bb90bba4c88a06834e5e8b6f081a99442db9</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210704232101.png\" alt=\"WeiyiGeek.BlackBox Exporter\" title=\"\" class=\"\">\n                <p>WeiyiGeek.BlackBox Exporter</p>\n            </figure>\n<ul>\n<li>Step 3.imcp模块之监控目标，我们可以通过浏览器访问<code>http://weiyigeek.top:9115/probe?target=223.6.6.6&amp;module=icmp_example</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 结果说明</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_dns_lookup_time_seconds Returns the time taken for probe dns lookup in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_lookup_time_seconds gauge</span></span><br><span class=\"line\">probe_dns_lookup_time_seconds 2.5798e-05</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_duration_seconds Returns how long the probe took to complete in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_duration_seconds gauge</span></span><br><span class=\"line\">probe_duration_seconds 0.006506971  <span class=\"comment\"># 整个探测花费时间包括DNS解析时间</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_icmp_duration_seconds Duration of icmp request by phase</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_icmp_duration_seconds gauge</span></span><br><span class=\"line\">probe_icmp_duration_seconds&#123;phase=<span class=\"string\">\"resolve\"</span>&#125; 2.5798e-05  </span><br><span class=\"line\">probe_icmp_duration_seconds&#123;phase=<span class=\"string\">\"rtt\"</span>&#125; 0.00625726</span><br><span class=\"line\">probe_icmp_duration_seconds&#123;phase=<span class=\"string\">\"setup\"</span>&#125; 0.000126281</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_icmp_reply_hop_limit Replied packet hop limit (TTL for ipv4)</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_icmp_reply_hop_limit gauge</span></span><br><span class=\"line\">probe_icmp_reply_hop_limit 113</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ip_addr_hash Specifies the hash of IP address. It's useful to detect if the IP address changes.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ip_addr_hash gauge</span></span><br><span class=\"line\">probe_ip_addr_hash 2.372708602e+09  <span class=\"comment\"># 监测目标地址Hash</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ip_protocol gauge</span></span><br><span class=\"line\">probe_ip_protocol 4  <span class=\"comment\"># 使用IP协议版本</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1      <span class=\"comment\"># 成功返回1，否则返回0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : Target 也可以为域名形式 <code>/probe?module=icmp_example&amp;target=www.weiyigeek.top</code> 返回指标也是一样。</p>\n<p><br></p>\n<ul>\n<li>Step 4.tcp模块之监控目标探测</li>\n</ul>\n<p>TCP 常规端口探测: /probe?module=tcp_example&amp;target=192.168.12.185:80<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TYPE probe_failed_due_to_regex gauge</span></span><br><span class=\"line\">probe_failed_due_to_regex 0</span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1   <span class=\"comment\"># 成功</span></span><br></pre></td></tr></table></figure></p>\n<p>TCP SSH 端口探测（指定匹配规则）: /probe?module=tcp_ssh_example&amp;target=10.20.172.248:22<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ip_protocol gauge</span></span><br><span class=\"line\">probe_ip_protocol 4</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1   <span class=\"comment\"># 匹配成功</span></span><br></pre></td></tr></table></figure></p>\n<p>TCP SSL 端口探测: /probe?module=tcp_tls_example&amp;target=<a href=\"http://www.baidu.com:443\" target=\"_blank\" rel=\"noopener\">www.baidu.com:443</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_earliest_cert_expiry Returns earliest SSL cert expiry date</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_earliest_cert_expiry gauge</span></span><br><span class=\"line\">probe_ssl_earliest_cert_expiry 1.627277462e+09   <span class=\"comment\"># TLS/SSL证书到期时间</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_last_chain_expiry_timestamp_seconds Returns last SSL chain expiry in unixtime</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_last_chain_expiry_timestamp_seconds gauge</span></span><br><span class=\"line\">probe_ssl_last_chain_expiry_timestamp_seconds 1.627277462e+09    <span class=\"comment\"># 返回unixtime中最后一个SSL链到期时间</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_last_chain_info Contains SSL leaf certificate information</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_last_chain_info gauge</span></span><br><span class=\"line\">probe_ssl_last_chain_info&#123;fingerprint_sha256=<span class=\"string\">\"2ed189349f818f3414132ebea309e36f620d78a0507a2fa523305f275062d73c\"</span>&#125; 1  <span class=\"comment\"># 证书链信息</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1   <span class=\"comment\"># 成功标志</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_tls_version_info Returns the TLS version used, or NaN when unknown</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_tls_version_info gauge</span></span><br><span class=\"line\">probe_tls_version_info&#123;version=<span class=\"string\">\"TLS 1.2\"</span>&#125; 1  <span class=\"comment\"># 证书版本</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Step 5.http模板之监控目标探测包括http协议和https协议<br>http 协议: /probe?module=http_example&amp;target=blog.weiyigeek.top<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_dns_lookup_time_seconds Returns the time taken for probe dns lookup in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_lookup_time_seconds gauge</span></span><br><span class=\"line\">probe_dns_lookup_time_seconds 0.186725698</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_failed_due_to_regex Indicates if probe failed due to regex</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_failed_due_to_regex gauge</span></span><br><span class=\"line\">probe_failed_due_to_regex 0</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_content_length Length of http content response</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_content_length gauge</span></span><br><span class=\"line\">probe_http_content_length -1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_duration_seconds Returns how long the probe took to complete in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_duration_seconds gauge</span></span><br><span class=\"line\">probe_duration_seconds 2.142812294</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_duration_seconds Duration of http request by phase, summed over all redirects</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_duration_seconds gauge</span></span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"connect\"</span>&#125; 1.209361663</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"processing\"</span>&#125; 0.250921647</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"resolve\"</span>&#125; 0.186725698</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"tls\"</span>&#125; 0</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"transfer\"</span>&#125; 0.495566665</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_redirects The number of redirects</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_redirects gauge</span></span><br><span class=\"line\">probe_http_redirects 0</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_ssl Indicates if SSL was used for the final redirect</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_ssl gauge</span></span><br><span class=\"line\">probe_http_ssl 0</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_status_code Response HTTP status code</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_status_code gauge</span></span><br><span class=\"line\">probe_http_status_code 200</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_uncompressed_body_length Length of uncompressed response body</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_uncompressed_body_length gauge</span></span><br><span class=\"line\">probe_http_uncompressed_body_length 22279</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_version Returns the version of HTTP of the probe response</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_version gauge</span></span><br><span class=\"line\">probe_http_version 1.1  <span class=\"comment\"># HTTP 协议版本</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ip_addr_hash Specifies the hash of IP address. It's useful to detect if the IP address changes.</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ip_addr_hash gauge</span></span><br><span class=\"line\">probe_ip_addr_hash 2.341618423e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ip_protocol gauge</span></span><br><span class=\"line\">probe_ip_protocol 4</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1          <span class=\"comment\"># 探测结果</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>https 协议: /probe?target=prometheus.io&amp;module=https_example<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_duration_seconds Returns how long the probe took to complete in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_duration_seconds gauge</span></span><br><span class=\"line\">probe_duration_seconds 3.301450584</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_duration_seconds Duration of http request by phase, summed over all redirects</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_duration_seconds gauge</span></span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"connect\"</span>&#125; 0.35759203100000003</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"processing\"</span>&#125; 0.39931457400000003</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"resolve\"</span>&#125; 2.334050778</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"tls\"</span>&#125; 0.196995271</span><br><span class=\"line\">probe_http_duration_seconds&#123;phase=<span class=\"string\">\"transfer\"</span>&#125; 0.012739035</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_redirects The number of redirects</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_redirects gauge</span></span><br><span class=\"line\">probe_http_redirects 1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_ssl Indicates if SSL was used for the final redirect</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_ssl gauge</span></span><br><span class=\"line\">probe_http_ssl 1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_status_code Response HTTP status code</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_status_code gauge</span></span><br><span class=\"line\">probe_http_status_code 200</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_uncompressed_body_length Length of uncompressed response body</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_uncompressed_body_length gauge</span></span><br><span class=\"line\">probe_http_uncompressed_body_length 16377</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_http_version Returns the version of HTTP of the probe response</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_http_version gauge</span></span><br><span class=\"line\">probe_http_version 2</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_earliest_cert_expiry Returns earliest SSL cert expiry in unixtime</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_earliest_cert_expiry gauge</span></span><br><span class=\"line\">probe_ssl_earliest_cert_expiry 1.628424e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_last_chain_expiry_timestamp_seconds Returns last SSL chain expiry in timestamp seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_last_chain_expiry_timestamp_seconds gauge</span></span><br><span class=\"line\">probe_ssl_last_chain_expiry_timestamp_seconds 1.628424e+09</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_ssl_last_chain_info Contains SSL leaf certificate information</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_ssl_last_chain_info gauge</span></span><br><span class=\"line\">probe_ssl_last_chain_info&#123;fingerprint_sha256=<span class=\"string\">\"44c9e62838db98e79918c841e4b72529849e2e7e6654e337a32a74ec502edaa7\"</span>&#125; 1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_tls_version_info Contains the TLS version used</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_tls_version_info gauge</span></span><br><span class=\"line\">probe_tls_version_info&#123;version=<span class=\"string\">\"TLS 1.3\"</span>&#125; 1</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Step 6.dns模板之检测目标A记录，以及测试DNS服务器是否可通过TCP进行响应。(注意DNS通常使用UDP)</li>\n</ul>\n<p>A记录解析探测: /probe?module=dns_example&amp;target=8.8.8.8<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_dns_additional_rrs Returns number of entries in the additional resource record list</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_additional_rrs gauge</span></span><br><span class=\"line\">probe_dns_additional_rrs 0      <span class=\"comment\"># 返回附加资源记录列表中的条目数</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_dns_answer_rrs Returns number of entries in the answer resource record list</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_answer_rrs gauge</span></span><br><span class=\"line\">probe_dns_answer_rrs 2            <span class=\"comment\"># DNS 回答响应条目</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_dns_authority_rrs Returns number of entries in the authority resource record list</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_authority_rrs gauge</span></span><br><span class=\"line\">probe_dns_authority_rrs 0        <span class=\"comment\"># 返回权限资源记录列表中的条目数</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_dns_duration_seconds Duration of DNS request by phase</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_duration_seconds gauge</span></span><br><span class=\"line\">probe_dns_duration_seconds&#123;phase=<span class=\"string\">\"connect\"</span>&#125; 7.9269e-05</span><br><span class=\"line\">probe_dns_duration_seconds&#123;phase=<span class=\"string\">\"request\"</span>&#125; 0.072951973</span><br><span class=\"line\">probe_dns_duration_seconds&#123;phase=<span class=\"string\">\"resolve\"</span>&#125; 2.9612e-05</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_dns_lookup_time_seconds Returns the time taken for probe dns lookup in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_dns_lookup_time_seconds gauge</span></span><br><span class=\"line\">probe_dns_lookup_time_seconds 2.9612e-05  <span class=\"comment\"># 返回探测dns查找所用的时间（以秒为单位）</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_duration_seconds Returns how long the probe took to complete in seconds</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_duration_seconds gauge</span></span><br><span class=\"line\">probe_duration_seconds 0.073247895   <span class=\"comment\"># 返回以秒为单位完成探测所用的时间</span></span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE probe_success gauge</span></span><br><span class=\"line\">probe_success 1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>DNC以TCP响应探测记录: /probe?module=dns_tcp_example&amp;target=8.8.8.8<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># HELP probe_dns_answer_rrs Returns number of entries in the answer resource record list</span></span><br><span class=\"line\">probe_dns_answer_rrs 1</span><br><span class=\"line\"><span class=\"comment\"># HELP probe_success Displays whether or not the probe was a success</span></span><br><span class=\"line\">probe_success 1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>DNS探测器检查MX记录是否已消失: /probe?module=dns_mx_example&amp;target=223.6.6.6<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">probe_dns_answer_rrs 2</span><br><span class=\"line\">probe_success 1</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210704234931.png\" alt=\"WeiyiGeek.DNS探测器检查MX记录\" title=\"\" class=\"\">\n                <p>WeiyiGeek.DNS探测器检查MX记录</p>\n            </figure></p>\n<ul>\n<li>Step 7.采用Prometheus抓取Blackbox相应模块与对应target参数的指标值,修改yaml配置文件后重新Prometheus_server即可在target查看监控的站点。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus.yml</span></span><br><span class=\"line\">- job_name: <span class=\"string\">'blackbox'</span></span><br><span class=\"line\">  metrics_path: /probe</span><br><span class=\"line\">  params:</span><br><span class=\"line\">    module: [https_example]  <span class=\"comment\"># Look for a HTTP 200 response.</span></span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">    - targets:</span><br><span class=\"line\">      - http://weiyigeek.top    <span class=\"comment\"># Target to probe with http.</span></span><br><span class=\"line\">      - https://prometheus.io   <span class=\"comment\"># Target to probe with https.</span></span><br><span class=\"line\">  relabel_configs:</span><br><span class=\"line\">    - source_labels: [__address__]</span><br><span class=\"line\">      target_label: __param_target</span><br><span class=\"line\">    - source_labels: [__param_target]</span><br><span class=\"line\">      target_label: instance</span><br><span class=\"line\">    - target_label: __address__</span><br><span class=\"line\">      replacement: 192.168.12.107:9115  <span class=\"comment\"># The blackbox exporter's real hostname:port.</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>补充说明: 我们可以将static_configs换成file_sd_configs将监控目标写在file文件中，设置指定的标签值。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - prometheus.yml</span></span><br><span class=\"line\">  file_sd_configs:</span><br><span class=\"line\">    - files:</span><br><span class=\"line\">      - /etc/prometheus/conf.d/discovery/blackbox.yaml</span><br><span class=\"line\">      refresh_interval: 1m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - blackbox.yaml</span></span><br><span class=\"line\">- targets: [ <span class=\"string\">'http://weiyigeek.top'</span>,<span class=\"string\">'https://blog.weiyigeek.top'</span>]</span><br><span class=\"line\">  labels: &#123;<span class=\"string\">'env'</span>: <span class=\"string\">'prod'</span>, <span class=\"string\">'appname'</span>: <span class=\"string\">'mySite'</span>, <span class=\"string\">'label'</span>: <span class=\"string\">'blog'</span>&#125;</span><br><span class=\"line\">- targets: [ <span class=\"string\">'https://prometheus.io'</span>]</span><br><span class=\"line\">  labels: &#123;<span class=\"string\">'env'</span>: <span class=\"string\">'test'</span>, <span class=\"string\">'appname'</span>: <span class=\"string\">'prometheus官网'</span>, <span class=\"string\">'label'</span>: <span class=\"string\">'officialwebiste'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 我们在Prometheus配置的Blackbox导出器的state值为UP并不意味着其探测成功，只是表示抓取成功你需要检查probe_success是否为1，其PromQL语法为<code>probe_success{env=&quot;prod&quot;}</code>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210705212749.png\" alt=\"WeiyiGeek.Blackbox\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Blackbox</p>\n            </figure>\n<ul>\n<li>Step 8.Prometheus 中 Alertmanager 警报规则编写并验证报警信息。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups:</span><br><span class=\"line\">- name: normal</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - alert: web_request</span><br><span class=\"line\">    expr: probe_success == 0</span><br><span class=\"line\">    <span class=\"keyword\">for</span>: 30s</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      severity: <span class=\"string\">'critical'</span></span><br><span class=\"line\">    annotations:</span><br><span class=\"line\">      summary: <span class=\"string\">\"站点 [ &#123;&#123; <span class=\"variable\">$labels</span>.instance &#125;&#125; ] , 应用名称: &#123;&#123; <span class=\"variable\">$labels</span>.appname &#125;&#125;, 标签来自: &#123;&#123; <span class=\"variable\">$labels</span>.label&#125;&#125;\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210705221356.png\" alt=\"WeiyiGeek.Blackbox&Alertmanager\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Blackbox&Alertmanager</p>\n            </figure>\n<p>Tips: Prometheus 每次抓取的时候发送一个名为X-Prometheus-Scrape-Timeout-Seconds的HTTP请求头，Blackbox使用它来设置超时而不是缓冲区。</p>\n<p><br></p>\n<h3 id=\"3-利用Prometheus实现外网网关及网站状态监测-企业实战\"><a href=\"#3-利用Prometheus实现外网网关及网站状态监测-企业实战\" class=\"headerlink\" title=\"3.利用Prometheus实现外网网关及网站状态监测(企业实战)\"></a>3.利用Prometheus实现外网网关及网站状态监测(企业实战)</h3><p>描述: 有了上面的Blockbox基础学习实践，下面我们就可以直接上手。</p>\n<ul>\n<li>Step 1.此处采用 Blackbox_exporter 二进制（<code>0.19.0 / 2021-05-10</code>）按安装方式进行设置，下载地址: <a href=\"https://github.com/prometheus/blackbox_exporter/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/prometheus/blackbox_exporter/releases</a> 。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Blackbox_exporter 下载</span></span><br><span class=\"line\">wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.19.0/blackbox_exporter-0.19.0.linux-amd64.tar.gz</span><br><span class=\"line\">tar -zxvf blackbox_exporter-0.19.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">mv /usr/<span class=\"built_in\">local</span>/blackbox_exporter-0.19.0.linux-amd64   /usr/<span class=\"built_in\">local</span>/blackbox_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版本信息查看</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/blackbox_exporter</span><br><span class=\"line\">./blackbox_exporter --version</span><br><span class=\"line\">blackbox_exporter, version 0.19.0 (branch: HEAD, revision: 5d575b88eb12c65720862e8ad2c5890ba33d1ed0)</span><br><span class=\"line\">  build user:       root@2b0258d5a55a</span><br><span class=\"line\">  build date:       20210510-12:56:44</span><br><span class=\"line\">  go version:       go1.16.4</span><br><span class=\"line\">  platform:         linux/amd6</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 2.查看默认的 BlackBox Configure yaml File 文件.并按照需要的添加对象。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /usr/<span class=\"built_in\">local</span>/blackbox_exporter &amp;&amp; <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/blackbox_exporter</span><br><span class=\"line\">blackbox_exporter  blackbox.yml  LICENSE  NOTICE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 修改并添加自定义的对象后的BlackBox.yml.</span></span><br><span class=\"line\">$ tee /usr/<span class=\"built_in\">local</span>/blackbox_exporter/blackbox.yml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">modules:</span><br><span class=\"line\">  icmp:</span><br><span class=\"line\">    prober: icmp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    icmp:</span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span></span><br><span class=\"line\">  tcp:</span><br><span class=\"line\">    prober: tcp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">  tcp_tls:</span><br><span class=\"line\">    prober: tcp</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    tcp:</span><br><span class=\"line\">      tls: <span class=\"literal\">true</span></span><br><span class=\"line\">  http_2xx:</span><br><span class=\"line\">    prober: http</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      valid_http_versions: [<span class=\"string\">\"HTTP/1.1\"</span>, <span class=\"string\">\"HTTP/2.0\"</span>]</span><br><span class=\"line\">      valid_status_codes: []      <span class=\"comment\"># Defaults to 2xx</span></span><br><span class=\"line\">      method: GET</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        User-Agent: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\"</span></span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        insecure_skip_verify: <span class=\"literal\">false</span></span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span> <span class=\"comment\"># Defaults to \"ip6\"</span></span><br><span class=\"line\">  http_post:</span><br><span class=\"line\">    prober: http</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      valid_http_versions: [<span class=\"string\">\"HTTP/1.1\"</span>, <span class=\"string\">\"HTTP/2.0\"</span>]</span><br><span class=\"line\">      valid_status_codes: []       <span class=\"comment\"># Defaults to 2xx</span></span><br><span class=\"line\">      method: POST</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        User-Agent: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\"</span></span><br><span class=\"line\">        Content-Type: application/json</span><br><span class=\"line\">      body: <span class=\"string\">'&#123;&#125;'</span></span><br><span class=\"line\">      fail_if_not_ssl: <span class=\"literal\">false</span> </span><br><span class=\"line\">      tls_config:</span><br><span class=\"line\">        insecure_skip_verify: <span class=\"literal\">false</span></span><br><span class=\"line\">      preferred_ip_protocol: <span class=\"string\">\"ip4\"</span> <span class=\"comment\"># defaults to \"ip6\"</span></span><br><span class=\"line\">      ip_protocol_fallback: <span class=\"literal\">false</span>  <span class=\"comment\"># no fallback to \"ip6\"</span></span><br><span class=\"line\">  http_basic_auth_example:</span><br><span class=\"line\">    prober: http</span><br><span class=\"line\">    timeout: 5s</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      method: POST</span><br><span class=\"line\">      headers:</span><br><span class=\"line\">        Host: <span class=\"string\">\"login.example.com\"</span></span><br><span class=\"line\">      basic_auth:</span><br><span class=\"line\">        username: <span class=\"string\">\"username\"</span></span><br><span class=\"line\">        password: <span class=\"string\">\"mysecret\"</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 3.创建blackbox_exporter的systemd服务。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tee /usr/lib/systemd/system/blackbox_exporter.service &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=blackbox_exporter</span><br><span class=\"line\">Documentation=https://prometheus.io</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">StandardError=journal</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/blackbox_exporter/blackbox_exporter --config.file=/usr/<span class=\"built_in\">local</span>/blackbox_exporter/blackbox.yml</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=3s</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 4.启动并加入开机启动服务序列，并对服务和端口运行状态进行验证。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 自动重启</span></span><br><span class=\"line\">sudo systemctl daemon-reload &amp;&amp; systemctl restart blackbox_exporter.service</span><br><span class=\"line\">systemctl status blackbox_exporter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 监听进程查看</span></span><br><span class=\"line\">ss -lnpt | grep 9115</span><br><span class=\"line\">  <span class=\"comment\"># LISTEN     0      128       [::]:9115                  [::]:*                   users:((\"blackbox_export\",pid=1738,fd=3))</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 5.在Prometheus配置文件加入blackbox_exporter，下面我们编辑prometheus配置文件来监测外网网关存活状态。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">vi</span> <span class=\"string\">/usr/local/prometheus/prometheus.yml</span></span><br><span class=\"line\"><span class=\"comment\"># - 在配置文件中添加外网网关存活状态的job信息</span></span><br><span class=\"line\"><span class=\"attr\">  - job_name:</span> <span class=\"string\">'ICMP-Ping'</span></span><br><span class=\"line\"><span class=\"attr\">    scrape_interval:</span> <span class=\"number\">15</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">    metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\"><span class=\"attr\">    params:</span></span><br><span class=\"line\"><span class=\"attr\">      module:</span> <span class=\"string\">[icmp]</span></span><br><span class=\"line\"><span class=\"attr\">    file_sd_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - refresh_interval:</span> <span class=\"number\">30</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">      files:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/etc/prometheus/backbox_icmp.yml</span></span><br><span class=\"line\"><span class=\"attr\">    relabel_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[__address__]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">(.*)(:80)?</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"string\">$&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[__param_target]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">(.*)</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">ping</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"string\">$&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">.*</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9115</span></span><br><span class=\"line\"><span class=\"attr\">  - job_name:</span> <span class=\"string\">'HTTP-Check'</span></span><br><span class=\"line\"><span class=\"attr\">    scrape_interval:</span> <span class=\"number\">30</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">    metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\"><span class=\"attr\">    params:</span></span><br><span class=\"line\"><span class=\"attr\">      module:</span> <span class=\"string\">[http_2xx]</span></span><br><span class=\"line\"><span class=\"attr\">    file_sd_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - refresh_interval:</span> <span class=\"number\">30</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">      files:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/etc/prometheus/backbox_http.yml</span></span><br><span class=\"line\"><span class=\"attr\">    relabel_configs:</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[__address__]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">(.*)(:80)?</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"string\">$&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[__param_target]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">(.*)</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"string\">$&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"attr\">    - source_labels:</span> <span class=\"string\">[]</span></span><br><span class=\"line\"><span class=\"attr\">      regex:</span> <span class=\"string\">.*</span></span><br><span class=\"line\"><span class=\"attr\">      target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\"><span class=\"attr\">      replacement:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9115</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以 文件的形式 进行目标发现。</span></span><br><span class=\"line\"><span class=\"comment\"># icmp 协议监控目标对象设置以及其标签设置</span></span><br><span class=\"line\"><span class=\"string\">tee</span> <span class=\"string\">/etc/prometheus/backbox_icmp.yml</span> <span class=\"string\">&lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"attr\">- targets:</span> <span class=\"string\">[</span> <span class=\"string\">'183.230.37.209'</span><span class=\"string\">,'117.59.89.218']</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span> <span class=\"string\">&#123;'env':</span> <span class=\"string\">'prod'</span><span class=\"string\">,'BusinessType':</span> <span class=\"string\">'Gateway'</span><span class=\"string\">,'site':'www.weiyigeek.top','msg':</span> <span class=\"string\">'官网出口IP地址'</span><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 协议监控目标对象设置以及其标签设置</span></span><br><span class=\"line\"><span class=\"string\">tee</span> <span class=\"string\">/etc/prometheus/backbox_http.yml</span> <span class=\"string\">&lt;&lt;'EOF'</span></span><br><span class=\"line\"><span class=\"attr\">- targets:</span> <span class=\"string\">[</span> <span class=\"string\">'http://www.weiyigeek.top'</span> <span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span> <span class=\"string\">&#123;'env':</span> <span class=\"string\">'prod'</span><span class=\"string\">,'BusinessType':</span> <span class=\"string\">'Web'</span><span class=\"string\">,'site':</span> <span class=\"string\">'个人官网-www.weiyigeek.top'</span><span class=\"string\">,'msg':</span> <span class=\"string\">'A10-Load Balance-VIP 地址'</span><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 6.我们可以利用promtool工具检查配置文件是否书写正确。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/prometheus/promtool check config /usr/<span class=\"built_in\">local</span>/prometheus/prometheus.yml</span><br><span class=\"line\">Checking prometheus.yml</span><br><span class=\"line\">  SUCCESS: 2 rule files found</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : 我们可以采用以下方式进行热加载Prometheus或者BlackBox。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 动态重载blackbox配置</span></span><br><span class=\"line\">curl -XPOST http://127.0.0.1:9115/-/reload</span><br><span class=\"line\"><span class=\"comment\"># - 热加载Prometheus</span></span><br><span class=\"line\">curl -XPOST http://127.0.0.1:9090/-/reload</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li>Step 7.然后访问<code>Blackbox Exporter</code>来查看验证请求以及在Prometheus中查看监控对象状态。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210712144034.png\" alt=\"WeiyiGeek.Blackbox Exporter\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Blackbox Exporter</p>\n            </figure>\n<p><br></p>\n<ul>\n<li>Step 8.有了Prometheus拉取的数据我们就可以,在Grafana添加blackbox_exporter监测数据, 此处我们采用 <a href=\"https://grafana.com/grafana/dashboards/9965\" target=\"_blank\" rel=\"noopener\">blackbox_exporter 的 Grafana Dashbord 模板</a> 模块安装方式不再累述。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tips: 此模板需要下载饼状图插件。</span></span><br><span class=\"line\">wget -nv https://grafana.com/api/plugins/grafana-piechart-panel/versions/latest/download -O /tmp/grafana-piechart-panel.zip</span><br><span class=\"line\">grafana-cli plugins install grafana-piechart-panel</span><br><span class=\"line\">systemctl grafana-server restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20210712182604.png\" alt=\"WeiyiGeek.blackbox_exporter-Grafana—Dashbord\" title=\"\" class=\"\">\n                <p>WeiyiGeek.blackbox_exporter-Grafana—Dashbord</p>\n            </figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"monitor","path":"api/categories/monitor.json"},{"name":"kubernetes","path":"api/categories/kubernetes.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"Prometheus","path":"api/tags/Prometheus.json"}]}