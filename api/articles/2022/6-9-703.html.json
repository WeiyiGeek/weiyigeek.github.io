{"title":"12.计算机科学导论之抽象数据类型学习笔记","slug":"书籍笔记/计算机科学导论/12.计算机科学导论之抽象数据类型学习笔记-cost","date":"2022-06-09T08:35:30.000Z","updated":"2023-03-13T03:52:15.588Z","url":"2022/6-9-703.html","path":"api/articles/2022/6-9-703.html.json","covers":["https://img.weiyigeek.top/2022/8/image-20221018130116738.png","https://img.weiyigeek.top/2022/8/image-20221018174020811.png","https://img.weiyigeek.top/2022/8/image-20221018173036469.png","https://img.weiyigeek.top/2022/8/image-20221018174515893.png","https://img.weiyigeek.top/2022/8/image-20221021091049359.png","https://img.weiyigeek.top/2022/8/image-20221021091415843.png","https://img.weiyigeek.top/2022/8/image-20221020214802257.png","https://img.weiyigeek.top/2022/8/image-20221121091415843.png","https://img.weiyigeek.top/2022/8/image-20221124113802192.png","https://img.weiyigeek.top/2022/8/image-20221124115008843.png","https://img.weiyigeek.top/2022/8/image-20221207095139158.png","https://img.weiyigeek.top/2022/8/image-20221207100330300.png","https://img.weiyigeek.top/2022/8/image-20221207102955681.png","https://img.weiyigeek.top/2022/8/image-20221207104427892.png","https://img.weiyigeek.top/2022/8/image-20221207110414202.png","https://img.weiyigeek.top/2022/8/image-20221207112146010.png","https://img.weiyigeek.top/2022/8/image-20221207112609920.png","https://img.weiyigeek.top/2022/8/image-20221207113933772.png","https://img.weiyigeek.top/2022/8/image-20221221220115097.png","https://img.weiyigeek.top/2022/8/image-20221221220628469.png","https://img.weiyigeek.top/2022/8/image-20221221222050797.png","https://img.weiyigeek.top/2022/8/image-20221221223826740.png","https://img.weiyigeek.top/2022/8/image-20221221224645620.png","https://img.weiyigeek.top/2022/8/image-20221221225147253.png"],"content":"<p>[TOC]</p>\n<h1 id=\"计算机科学导论学习笔记\"><a href=\"#计算机科学导论学习笔记\" class=\"headerlink\" title=\"计算机科学导论学习笔记\"></a>计算机科学导论学习笔记</h1><h2 id=\"第-5-部分-数据组织与抽象\"><a href=\"#第-5-部分-数据组织与抽象\" class=\"headerlink\" title=\"第 5 部分 数据组织与抽象\"></a>第 5 部分 数据组织与抽象</h2><p>此部分包含第<strong>11</strong>、<strong>12</strong>、<strong>13</strong>和<strong>14</strong> 章，讨论了数据结构、抽象数据类型、文件结构以及数据库原理。</p>\n<p>在计算机科学中，原子数据汇集成记录、文件和数据库，而数据抽象使得程序员能创建关于数据的抽象观念。</p>\n<p>原文地址: <a href=\"https://mp.weixin.qq.com/s/pdA3qGYV_k6HmPWC2j0NuA\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/pdA3qGYV_k6HmPWC2j0NuA</a></p>\n<a id=\"more\"></a>\n<h3 id=\"12-抽象数据类型\"><a href=\"#12-抽象数据类型\" class=\"headerlink\" title=\"12.抽象数据类型\"></a>12.抽象数据类型</h3><p>抽象数据类型(abstact data type, ADT) 比上一章讨论的<code>数据结构(数组、记录、链表)</code>处于更高抽象层的数据类型,实际上ADT也是使用数据结构来实现的。</p>\n<p>本章将讨论各种不同的抽象数据类型，例如：<code>栈、队列、广义线性列表、树、二叉数、二叉搜索树和图</code>。</p>\n<p><strong>抽象数据类型（ADT）</strong>：是数据类的定义和应用于数据的操作定义的集合。例如，求某个列表中数字之和，则需要选择数字类型（整数或实数）以及定义运算（加法）。</p>\n<p>换言之，ADT的用户只需要知道对数据类型可用的一组操作，而不需要知道它们是如何应用的<br>。</p>\n<p><br/></p>\n<h4 id=\"12-1-定义模型\"><a href=\"#12-1-定义模型\" class=\"headerlink\" title=\"12.1 定义模型\"></a>12.1 定义模型</h4><h5 id=\"1-抽象数据类型定义\"><a href=\"#1-抽象数据类型定义\" class=\"headerlink\" title=\"(1) 抽象数据类型定义\"></a>(1) 抽象数据类型定义</h5><p>此处我们正式地定义抽象数据类型，抽象数据类型就是<code>与对该数据类型有意义的操作封装在一起的数据类型</code>, 然后用它封装数据和操作并对用户隐藏。</p>\n<p>抽象数据类型：</p>\n<blockquote>\n<p>1.数据的定义。<br>2.操作的定义。<br>3.封装数据和操作。</p>\n</blockquote>\n<p><br/></p>\n<h5 id=\"2-简单与复杂的ADT\"><a href=\"#2-简单与复杂的ADT\" class=\"headerlink\" title=\"(2) 简单与复杂的ADT\"></a>(2) 简单与复杂的ADT</h5><p><strong>简单抽象数据类型</strong><br>许多编程语言已经定义了一些简单的抽象数据类型(<code>ADT</code>)作为语言的整数部分，</p>\n<p>例如，C语言定义了称为整数的简单抽象数据类型（整型、浮点型、布尔型、字符、指针），还定义了在数据类型上应用的几种操作（加、减、乘、除等）。</p>\n<blockquote>\n<p>例如，z = x + y ，即希望X的值（整数）被加到y的值（整数）上，其结果被命名为z整数，此时程序员并不需要知道加法是如何进行的。</p>\n</blockquote>\n<p>在前一章我们学到计算机是如何执行加法运算的：把两个整数以补码的格式存储在内存地址中，把它们装入CPU的寄存器中，进行二进制相加，把结果回存到另一个内存地址中，此时对程序员来说是透明的。</p>\n<p>C语言中的整数就是一个带有预定义操作的简单抽象数据类型，程序员不必关注操作是如何进行的。</p>\n<p><br/></p>\n<p><strong>复杂抽象数据类型</strong></p>\n<p>前面我们知道了许多编程语言都实现了几种简单的抽象数据类型，但许多有用的复杂抽象数据类型却没有实现，例如表抽象数据类型、栈抽象数据类型、队列抽象数据类型。为了效率，应该建立这些抽象数据类型，通常将它们存储在计算机库中，以便使用。</p>\n<p>ADT包含了一组允许程序员使用的操作的定义，而这些操作的实现是隐藏的。此种<code>不需详细说明实现过程的泛化</code>操作称为抽象，我们抽取了过程的本质，而隐藏了实现的细节，而抽象概念意味着:</p>\n<blockquote>\n<p>1.知道一个数据类型能做什么。<br>2.如何去做是隐藏的。</p>\n</blockquote>\n<p><br/></p>\n<h5 id=\"3-抽象数据类型的模型\"><a href=\"#3-抽象数据类型的模型\" class=\"headerlink\" title=\"(3) 抽象数据类型的模型\"></a>(3) 抽象数据类型的模型</h5><p>下图中不规则轮廓中的<code>浅阴影区域部分</code>表示模型，在这个抽象区域内部是该模型的两个部分：<code>基本数据结构和数据操作</code>（公有的和私有的）。</p>\n<p>应用程序只能通过接口访问公有操作，然后再通过其访问私有操作, 而数据结构（如数组、记录、链表）包含着在抽象数据类型里面，<code>被公有和私有操作共同使用</code>。</p>\n<p><strong>接口</strong>：<code>公有操作和传给或从这些操作返回的数据的列表</code></p>\n<p><strong>私有操作</strong>：<code>是抽象数据类型内部用户使用的</code>，它依赖于抽象数据类型实现时所选择的数据结构。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221018130116738.png\" alt=\"WeiyiGeek.抽象数据类型的模型\" title=\"\" class=\"\">\n                <p>WeiyiGeek.抽象数据类型的模型</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"4-抽象数据类型的实现\"><a href=\"#4-抽象数据类型的实现\" class=\"headerlink\" title=\"(4) 抽象数据类型的实现\"></a>(4) 抽象数据类型的实现</h5><p>由于计算机编程语言不提供抽象数据类型包（类），需要程序员自行实现并存储在库中。</p>\n<p>所以下一子节将主要，介绍实现一些常见的抽象数据类型（<code>栈、队列、线性表、树、图</code>）等。</p>\n<hr>\n<h4 id=\"12-2-栈-Stack\"><a href=\"#12-2-栈-Stack\" class=\"headerlink\" title=\"12.2 栈 (Stack)\"></a>12.2 栈 (Stack)</h4><h5 id=\"1-栈的介绍\"><a href=\"#1-栈的介绍\" class=\"headerlink\" title=\"(1) 栈的介绍\"></a>(1) 栈的介绍</h5><p><strong>栈</strong>是一种<code>限制线性列表</code>，该类列表的添加和删除操作只能在”栈顶”端实现，它是<code>后进先出(LIFO)</code>数据结构。</p>\n<p>FIFO：全称First in, First out，先进先出。</p>\n<p>LIFO：全称Last in, First out，后进先出。</p>\n<blockquote>\n<p>即输入插入是顺序 5, 10, 15, 20，而输出顺序则是 20 ，15 ，10， 5。</p>\n</blockquote>\n<p>例如，人们在日常生活中使用不同类型的栈，如一堆硬币或一堆书。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221018174020811.png\" alt=\"WeiyiGeek.栈的示例图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.栈的示例图</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"2-栈的操作\"><a href=\"#2-栈的操作\" class=\"headerlink\" title=\"(2) 栈的操作\"></a>(2) 栈的操作</h5><p>尽管栈有很多操作，但基本操作有4种∶<code>建栈(stack)、入栈(push)、出栈(pop)和空(empty)</code>。</p>\n<p><strong>1) 建栈(Stack)</strong>：该操作是创建一个空栈，格式如<code>stack(stackName)</code>。</p>\n<p><strong>2) 入栈(Push)</strong>：入栈操作在栈顶添加新的元素，格式如<code>push(stackName, dataItem)</code>, stackName 是栈的名字，dataItem是要插在栈顶的数据。</p>\n<p><strong>3) 出栈(Pop)</strong>: 出栈操作将栈顶元素移走，格式如<code>pop(stackNmae,dataItem)</code>，stackName 是栈的名字，dataltem是从栈中移走的数据。</p>\n<p><strong>4) 空(empty)</strong>：空操作检查栈的状态，格式如<code>empty(stackName</code>, stackName是栈的名字，如果栈为空返回True，否则返回False。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221018173036469.png\" alt=\"WeiyiGeek.栈的操作图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.栈的操作图</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"3-栈的抽象数据类型\"><a href=\"#3-栈的抽象数据类型\" class=\"headerlink\" title=\"(3) 栈的抽象数据类型\"></a>(3) 栈的抽象数据类型</h5><p>定义: 只能在栈顶存取的数据项表。</p>\n<p>操作: 创建空栈，栈顶插入元素，栈顶插入元素，移除栈顶元素，检查栈的状态。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221018174515893.png\" alt=\"WeiyiGeek.栈操作算法片段图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.栈操作算法片段图</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"4-栈的应用\"><a href=\"#4-栈的应用\" class=\"headerlink\" title=\"(4) 栈的应用\"></a>(4) 栈的应用</h5><p>应用可分为4大类：<code>倒转数据</code>、<code>配对数据</code>、<code>数据延迟使用</code>和<code>回溯步骤</code>。</p>\n<p><strong>1) 倒转数据</strong>:  需要一组给定的数据项重新排序，使得首尾元素互换，中间的所有元素也相应地进行交换。</p>\n<blockquote>\n<p>例如：表(2, 4, 7, 1, 6, 8)变成表(8, 6, 1, 7, 4, 2),  即将得到倒排顺序的数字。</p>\n</blockquote>\n<p>任何计算机语言中的打印指令都是<code>从左到右</code>打印字符的，但算法是<code>从右到左</code>建立数字的，此时我们使用栈的倒转特性(LIFO结构)来解决这个问题。 </p>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20221021091049359.png\" alt=\"WeiyiGeek.倒转数据伪代码表示图\"></p>\n<p><br/></p>\n<p><strong>2) 配对数据项</strong>: 需要在表达式中进行一些字符的配对。</p>\n<blockquote>\n<p>例如，当用计算机语言写一个数学表达式时，我们经常使用括号来改变运算符的优先级 <code>3X(6+2) = 24</code></p>\n</blockquote>\n<p>当输入一个带有许多括号的表达式时, 通常编译程序（编译器）使用栈来检査所 有的开括号都与闭括号配对。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221021091415843.png\" alt=\"Weiyigeek.配对数据项伪代码图\" title=\"\" class=\"\">\n                <p>Weiyigeek.配对数据项伪代码图</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"5-栈的实现\"><a href=\"#5-栈的实现\" class=\"headerlink\" title=\"(5) 栈的实现\"></a>(5) 栈的实现</h5><p>栈主要包含两个操作，入栈和出栈，也就是在栈顶插入一个数据和从栈顶删除一个数据。</p>\n<p>栈抽象数据类型可以使用数组也可以使用链表来实现,下图显示了栈抽象数据类型的例子，以及我们是如何实现栈的。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221020214802257.png\" alt=\"WeiyiGeek.栈的实现\" title=\"\" class=\"\">\n                <p>WeiyiGeek.栈的实现</p>\n            </figure>\n<p><strong>数组实现(</strong>顺序栈):** 创建有两个域的记录，第一个域用来存储关于数组的信息：我们把它当作计数域，在任何时刻其中显示的是栈中数据项的数目，第二个域是含有顶元素序号的一个整数。</p>\n<p><strong>链表实现(</strong>链式栈):** 节点有两个域，一个计数器和一个指向栈顶元素的指针。</p>\n<p>此处使用Go语言实现链式栈:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc: 链式栈实现示例</span></span><br><span class=\"line\"><span class=\"comment\">// author: WeiyiGeeek</span></span><br><span class=\"line\"><span class=\"comment\">// Time: 2022年11月24日 11:19:59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈节点数据结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  data <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  next *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录栈顶节点,嵌套结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  topeNode *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 申请创建一个栈，返回一个结构体指针。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStack</span><span class=\"params\">()</span> *<span class=\"title\">Stack</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Stack&#123;</span><br><span class=\"line\">    <span class=\"literal\">nil</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Stack结构体中定义的Push方法，Push数据到栈中（注意此处取地址）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Stack)</span> <span class=\"title\">Push</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  this.topeNode = &amp;Node&#123;data:value, next:this.topeNode&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Stack)</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.topeNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pop栈中数据并输出指向下一个节点递增，如果为空返回nil</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  value := this.topeNode.data</span><br><span class=\"line\">  this.topeNode = this.topeNode.next</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回栈顶数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Stack)</span> <span class=\"title\">Top</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.topeNode.data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印所有栈中数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Stack)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"empty Stack\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cur := this.topeNode</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"literal\">nil</span> != cur&#123;</span><br><span class=\"line\">    fmt.Println(cur.data)</span><br><span class=\"line\">    cur = cur.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Go Implementation Chain Stack......\"</span>)</span><br><span class=\"line\">  demoStack := NewStack()</span><br><span class=\"line\">  demoStack.Push(<span class=\"string\">\"Go\"</span>)</span><br><span class=\"line\">  demoStack.Push(<span class=\"string\">\"C\"</span>)</span><br><span class=\"line\">  demoStack.Push(<span class=\"string\">\"Java\"</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Stack traversal -&gt;\"</span>)</span><br><span class=\"line\">  demoStack.Print()  <span class=\"comment\">// 满足 LIFO (后进先出)</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Pop Data -&gt;\"</span>, demoStack.Pop())</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# TopeNode Data -&gt;\"</span>, demoStack.Top())</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Stack Empty -&gt;\"</span>, demoStack.isEmpty())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Go Implementation Chain Stack......</span></span><br><span class=\"line\"><span class=\"comment\"># Stack traversal -&gt;</span></span><br><span class=\"line\">Java</span><br><span class=\"line\">C</span><br><span class=\"line\">Go</span><br><span class=\"line\"><span class=\"comment\"># Pop Data -&gt; Java</span></span><br><span class=\"line\"><span class=\"comment\"># TopeNode Data -&gt; C</span></span><br><span class=\"line\"><span class=\"comment\"># Stack Empty -&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>补充，此时也贴上使用数组方式实现栈此种数据结构。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc: 数组栈实现示例</span></span><br><span class=\"line\"><span class=\"comment\">// author: WeiyiGeeek</span></span><br><span class=\"line\"><span class=\"comment\">// Time: 2022年12月5日 12:19:59</span></span><br><span class=\"line\"><span class=\"comment\">// Blog: https://weiyigeek.top</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StackArray 接口声明（包含栈的各种方法）</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> StackArray <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  Clear()</span><br><span class=\"line\">  Size()<span class=\"keyword\">int</span></span><br><span class=\"line\">  Pop() <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  Push(data <span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">  isEmpty() <span class=\"keyword\">bool</span></span><br><span class=\"line\">  isFull() <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ArrayList 结构体声明</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ArrayList <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  dataStore [] <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  theSize  <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈结构体声明（指针结构体）</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  myarray *ArrayList</span><br><span class=\"line\">  capsize <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 申请分配内存10个数组元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">()</span> *<span class=\"title\">ArrayList</span></span>&#123;</span><br><span class=\"line\">  list:=<span class=\"built_in\">new</span>(ArrayList)</span><br><span class=\"line\">  list.dataStore=<span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;,<span class=\"number\">0</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">  list.theSize=<span class=\"number\">0</span> </span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"new &gt;&gt;&gt;\"</span>,list.theSize,<span class=\"built_in\">cap</span>(list.dataStore))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈对象并调用申请存放数组内存空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStack</span><span class=\"params\">(count <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Stack</span></span>&#123;</span><br><span class=\"line\">  mystack:=<span class=\"built_in\">new</span>(Stack)</span><br><span class=\"line\">  mystack.myarray=New()</span><br><span class=\"line\">  mystack.capsize=count</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mystack</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组中追加元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(list *ArrayList)</span>  <span class=\"title\">Append</span><span class=\"params\">(newval <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//list.checkmemisfull()</span></span><br><span class=\"line\">  list.dataStore=<span class=\"built_in\">append</span>(list.dataStore,newval) <span class=\"comment\">//数据叠加</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"index = \"</span>,list.theSize,<span class=\"string\">\",data = \"</span>,newval,<span class=\"built_in\">cap</span>(list.dataStore))</span><br><span class=\"line\">  <span class=\"comment\">//list.dataStore[list.theSize]=newval  //赋值</span></span><br><span class=\"line\">  <span class=\"comment\">//fmt.Println(newval)</span></span><br><span class=\"line\">  list.theSize++ <span class=\"comment\">//索引移动</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除数组中指定位置元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(list *ArrayList )</span> <span class=\"title\">Remove</span><span class=\"params\">(index <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> index &lt;<span class=\"number\">0</span> || index &gt;=list.theSize&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"索引越界\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  list.dataStore=<span class=\"built_in\">append</span>(list.dataStore[:index],list.dataStore[index+<span class=\"number\">1</span>:]...) <span class=\"comment\">//删除</span></span><br><span class=\"line\">  list.theSize--</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新清空初始化数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(list *ArrayList )</span><span class=\"title\">Clear</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  list.dataStore=<span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;,<span class=\"number\">0</span>,<span class=\"number\">10</span>) </span><br><span class=\"line\">  list.theSize=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  mystack.myarray.Clear()</span><br><span class=\"line\">  mystack.myarray.theSize=<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回数组栈数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">Size</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mystack.myarray.theSize</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断数组栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mystack.myarray.theSize==<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断数组栈的元素数量是否等于向内存空间中申请的数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> mystack.capsize &lt;= mystack.myarray.theSize&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !mystack.isEmpty()&#123;</span><br><span class=\"line\">    last:=mystack.myarray.dataStore[mystack.myarray.theSize<span class=\"number\">-1</span>]</span><br><span class=\"line\">    mystack.myarray.Remove(mystack.myarray.theSize<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加元素到栈顶</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mystack *Stack)</span> <span class=\"title\">Push</span><span class=\"params\">(data <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !mystack.isFull()&#123;</span><br><span class=\"line\">    mystack.myarray.Append(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  mystack :=NewStack(<span class=\"number\">12</span>) <span class=\"comment\">// 申请12个位置</span></span><br><span class=\"line\">  mystack.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">4</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">5</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">6</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">7</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">8</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">9</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">10</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">11</span>)</span><br><span class=\"line\">  mystack.Push(<span class=\"number\">12</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"弹栈 &gt;&gt;&gt; \"</span>)</span><br><span class=\"line\">  fmt.Println(mystack.Pop())</span><br><span class=\"line\">  fmt.Println(mystack.Pop())</span><br><span class=\"line\">  fmt.Println(mystack.Pop())</span><br><span class=\"line\">  fmt.Println(mystack.Pop())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new &gt;&gt;&gt; 0 10</span><br><span class=\"line\">压栈 &gt;&gt;&gt;</span><br><span class=\"line\">index =  0 ,data =  1 10</span><br><span class=\"line\">index =  1 ,data =  2 10</span><br><span class=\"line\">index =  2 ,data =  3 10</span><br><span class=\"line\">index =  3 ,data =  4 10</span><br><span class=\"line\">index =  4 ,data =  5 10</span><br><span class=\"line\">index =  5 ,data =  6 10</span><br><span class=\"line\">index =  6 ,data =  7 10</span><br><span class=\"line\">index =  7 ,data =  8 10</span><br><span class=\"line\">index =  8 ,data =  9 10</span><br><span class=\"line\">index =  9 ,data =  10 10</span><br><span class=\"line\">index =  10 ,data =  11 20</span><br><span class=\"line\">index =  11 ,data =  12 20</span><br><span class=\"line\">弹栈 &gt;&gt;&gt; </span><br><span class=\"line\">12</span><br><span class=\"line\">11</span><br><span class=\"line\">10</span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n<p><strong>本节总结：</strong>栈是一种”操作受限”的<code>线性表</code>，只允许在一端插入和删除数据, 当某个数据集合只涉及在一端插入和删除数据，并且满足<code>后进先出(LIFO)、先进后出的(FILO)</code>特性，我们就应该首选“栈”这种数据结构。</p>\n<hr>\n<h4 id=\"12-3-队列-Queue\"><a href=\"#12-3-队列-Queue\" class=\"headerlink\" title=\"12.3 队列 (Queue)\"></a>12.3 队列 (Queue)</h4><h5 id=\"1-队列的介绍\"><a href=\"#1-队列的介绍\" class=\"headerlink\" title=\"(1) 队列的介绍\"></a>(1) 队列的介绍</h5><p>队列也是一种<code>线性列表</code>，该表中的数据只能在称为尾部的一端插入，并且只能在称之为头部的一端删除。限制确保了数据在队列中只能按照它们存入的顺序被处理。换言之，队列就是<code>先进先出（FIFO）</code>结构。</p>\n<p>队列其实在日常生活中很常见的，例如公交车站排队上车，公园入口处排队检票，等待电话接线员回复的一系列电话也是一个队列，等待计算机处理的一系列等待任务也是队列。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221121091415843.png\" alt=\"WeiyiGeek.队列介绍\" title=\"\" class=\"\">\n                <p>WeiyiGeek.队列介绍</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"2-队列的操作\"><a href=\"#2-队列的操作\" class=\"headerlink\" title=\"(2) 队列的操作\"></a>(2) 队列的操作</h5><p>尽管我们可以为队列定义许多操作，但有4个是基本的：<code>建队列、入列、出列和空</code>，定义如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.创建队列</span></span><br><span class=\"line\">&gt; newQueue(queueName): 建队列建立一个空队列.</span><br><span class=\"line\"><span class=\"comment\"># 2.入列</span></span><br><span class=\"line\">&gt; enqueue(queueName, dataItem): 入列操作在队列的尾部插入一个数据项.</span><br><span class=\"line\"><span class=\"comment\"># 3.出列</span></span><br><span class=\"line\">&gt; dequeue(queueName, dataltem): 出列操作删除队列前端的数据项.</span><br><span class=\"line\"><span class=\"comment\"># 4.空</span></span><br><span class=\"line\">&gt; isEmpty(queueName): 空操作检査队列的状态，若队列为空返回为真，否则为假.</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221124113802192.png\" alt=\"WeiyiGeek.队列操作\" title=\"\" class=\"\">\n                <p>WeiyiGeek.队列操作</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"3-队列抽象数据类型\"><a href=\"#3-队列抽象数据类型\" class=\"headerlink\" title=\"(3) 队列抽象数据类型\"></a>(3) 队列抽象数据类型</h5><p>定义：通过前面学习，我们知道队列是一种线性列表，该表中的数据只能在称为头部的一端删除，并且只能在称为尾部的一端插入。</p>\n<blockquote>\n<p>newqueue: 创建一个空的队列。<br>enqueue: 在尾部插入一个元素。<br>dequeue: 在头部删除一个元素。<br>empty：检査队列的状态。</p>\n</blockquote>\n<p>下图显示了应用原先定义在队列Q上的操作的算法片段, 在第4个操作在队首出列前检査队列的状态，队首元素的值被存储在变量x中,它会在算法片段结束时，它将被自动丢弃。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221124115008843.png\" alt=\"WeiyiGeek.队列抽象数据类型\" title=\"\" class=\"\">\n                <p>WeiyiGeek.队列抽象数据类型</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"4-队列的应用\"><a href=\"#4-队列的应用\" class=\"headerlink\" title=\"(4) 队列的应用\"></a>(4) 队列的应用</h5><p>队列除了在生活着常常看到，它也是最常用的数据处理结构之一，在所有的操作系统以及网络中都有队列的身影，在其他技术领域更是数不胜数。</p>\n<p>例如，在计算机系统中常见就是使用队列来完成对作业或对系统设备(如打印池) 的处理，而队列应用不单单如此，在线电子商务应用程序中实现web或PC端在线交流、任务和指令流程（程序之间），在网络中实现数据有序传输。</p>\n<p><br/></p>\n<h5 id=\"5-队列的实现\"><a href=\"#5-队列的实现\" class=\"headerlink\" title=\"(5) 队列的实现\"></a>(5) 队列的实现</h5><p>队列抽象数据类型可以使用数组或链表来实现，下图中显示了一个有5个数据项的队列抽象数据类型的例子以及我们是如何实现队列的。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207095139158.png\" alt=\"WeiyiGeek.队列的实现\" title=\"\" class=\"\">\n                <p>WeiyiGeek.队列的实现</p>\n            </figure>\n<p>此处我们使用Go语言进行队列链的实现，示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc: 链式队列实现示例</span></span><br><span class=\"line\"><span class=\"comment\">// author: WeiyiGeeek</span></span><br><span class=\"line\"><span class=\"comment\">// Time: 2022年11月24日 12:19:59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈节点数据结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  data <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  next *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录队列顶、尾节点</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  headNode *Node</span><br><span class=\"line\">  lastNode *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 申请创建一个栈，返回一个结构体指针。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewQueue</span><span class=\"params\">()</span> *<span class=\"title\">Queue</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Queue&#123;</span><br><span class=\"line\">    <span class=\"literal\">nil</span>,</span><br><span class=\"line\">    <span class=\"literal\">nil</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.headNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加数据到队列中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">enqueue</span><span class=\"params\">(value <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 首次添加头节点为nil,此时进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>  this.headNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    this.lastNode  = &amp;Node&#123;data:value, next:<span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">    this.headNode = this.lastNode </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 后续在尾部添加节点指向下一个节点数据地址即可</span></span><br><span class=\"line\">    this.lastNode.next = &amp;Node&#123;data:value, next:<span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">    this.lastNode = this.lastNode.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出队列中数据并输出指向下一个节点递增，如果为空返回nil</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">dequeue</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  value := this.headNode.data</span><br><span class=\"line\">  this.headNode = this.headNode.next</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回队列头部数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">Head</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.headNode.data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回队列尾部数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">Last</span><span class=\"params\">()</span> <span class=\"title\">interface</span></span>&#123;&#125;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.lastNode.data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印所有队列中数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Queue)</span> <span class=\"title\">Print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.isEmpty()&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"empty Queue\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cur := this.headNode</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"literal\">nil</span> != cur&#123;</span><br><span class=\"line\">    fmt.Println(cur.data)</span><br><span class=\"line\">    cur = cur.next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Go Implementation Chain Queue ......\"</span>)</span><br><span class=\"line\">  demoQueue := NewQueue()</span><br><span class=\"line\">  demoQueue.enqueue(<span class=\"string\">\"1.Go\"</span>)</span><br><span class=\"line\">  demoQueue.enqueue(<span class=\"string\">\"2.C\"</span>)</span><br><span class=\"line\">  demoQueue.enqueue(<span class=\"string\">\"3.Java\"</span>)</span><br><span class=\"line\">  demoQueue.enqueue(<span class=\"string\">\"4.Python\"</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Queue 队列头部数据: \"</span>,\tdemoQueue.Head())</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Queue 队列尾部数据: \"</span>,\tdemoQueue.Last())</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# 遍历队列数据: \"</span>)</span><br><span class=\"line\">  demoQueue.Print()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# 弹出队列中头部数据并指向下一数据: \"</span>,\tdemoQueue.dequeue())</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# 弹出后此时 Queue 队列头部数据: \"</span>,\tdemoQueue.Head())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Go Implementation Chain Queue ......</span><br><span class=\"line\"><span class=\"comment\"># Queue 队列头部数据:  1.Go</span></span><br><span class=\"line\"><span class=\"comment\"># Queue 队列尾部数据:  4.Python</span></span><br><span class=\"line\"><span class=\"comment\"># 遍历队列数据: </span></span><br><span class=\"line\">1.Go</span><br><span class=\"line\">2.C</span><br><span class=\"line\">3.Java</span><br><span class=\"line\">4.Python</span><br><span class=\"line\"><span class=\"comment\"># 弹出队列中头部数据并指向下一数据:  1.Go</span></span><br><span class=\"line\"><span class=\"comment\"># 弹出后此时 Queue 队列头部数据:  2.C</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"12-4-广义线性表-List\"><a href=\"#12-4-广义线性表-List\" class=\"headerlink\" title=\"12.4 广义线性表(List)\"></a>12.4 广义线性表(List)</h4><h5 id=\"1-广义线性表的介绍\"><a href=\"#1-广义线性表的介绍\" class=\"headerlink\" title=\"(1) 广义线性表的介绍\"></a>(1) 广义线性表的介绍</h5><p>前两节中介绍的栈和队列都是限制线性表，而此小节讲解的广义线性表是像插入和删除等操作可以在其中任何地方进行的表，即我们可以在表头、表中间或表尾进行插入或删除。</p>\n<p><strong>广义线性表定义具有如下特性：</strong></p>\n<ul>\n<li>元素具有<strong>相同的类型</strong>；</li>\n<li>元素顺序排列，这意味着有第一个元素和最后一个元素；</li>\n<li>除第一个元素外每个元素都有<strong>唯一的前驱(上一个元素)</strong>；除最后一个元素外每个元素都有<strong>唯一的后继(下一个元素)</strong>;</li>\n<li>每个元素是一个<strong>带有关键字段</strong>的记录；</li>\n<li>元素按关键字值排序。</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20221207100330300.png\" alt=\"WeiyiGeek.广义线性表\"></p>\n<p><br/></p>\n<h5 id=\"2-广义线性表的操作\"><a href=\"#2-广义线性表的操作\" class=\"headerlink\" title=\"(2) 广义线性表的操作\"></a>(2) 广义线性表的操作</h5><p>此处讨论广义线性表的常用操作，即建表、插入、删除、检索，遍历和空，定义如下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.建表操作，listname为线性表名词，并返回一个空表。</span></span><br><span class=\"line\">newList(listname)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.插入操作，此处假设数据已进行了排序操作。</span></span><br><span class=\"line\">insert(listname,element)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.删除操作，我们需查找到要删除数据在表中的位置并进行删除。</span></span><br><span class=\"line\">delete(listname,target,element)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.检索操作，指针对单个元素的存取，其首先被查找，数据被发现后才能被检索。</span></span><br><span class=\"line\">retrieve(listname,target,element)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.遍历操作，可以指明是向上存取还是向下存取。</span></span><br><span class=\"line\">traverse(listName,action)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.空操作, 检查表的状态，同样空为真，否则为假。</span></span><br><span class=\"line\">isEmpty(listName)</span><br></pre></td></tr></table></figure>\n<p>广义线性表部分操作图示：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207102955681.png\" alt=\"WeiyiGeek.广义线性表\" title=\"\" class=\"\">\n                <p>WeiyiGeek.广义线性表</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"3-广义线性表抽象数据类型\"><a href=\"#3-广义线性表抽象数据类型\" class=\"headerlink\" title=\"(3) 广义线性表抽象数据类型\"></a>(3) 广义线性表抽象数据类型</h5><p>类型定义：一个<strong>有序的数据项表</strong>，所有的项具有相同类型。</p>\n<p>操作总结：</p>\n<ul>\n<li>newList: 创建一个空表</li>\n<li>insert：在表中插入一个元素。</li>\n<li>delete: 从表中删除一个元素。</li>\n<li>retrieve: 从表中检索一个元素</li>\n<li>traverse : 顺序地遍历表。</li>\n<li>isEmpty：检查表的状态。</li>\n</ul>\n<p>下图显示了在表L上应用前面定义的操作的一个算法片段。特别注意，通常在删除表中的数据项时，需要调用空操作方法判断表是否为非空。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207104427892.png\" alt=\"WeiyiGeek.广义线性表抽象数据类型\" title=\"\" class=\"\">\n                <p>WeiyiGeek.广义线性表抽象数据类型</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"4-广义线性表的应用\"><a href=\"#4-广义线性表的应用\" class=\"headerlink\" title=\"(4) 广义线性表的应用\"></a>(4) 广义线性表的应用</h5><p>其通常应用于元素被随机存取或顺序存取的情况。</p>\n<p>例如，在大学里，线性表可以用来存储每个学期入学的学生信息，我们可以使用线性表进行学生信息的增、删、改、查等操作，或者假设辅导教师在学期末要打印所有学生的记录。</p>\n<p><br/></p>\n<h5 id=\"5-广义线性表的实现\"><a href=\"#5-广义线性表的实现\" class=\"headerlink\" title=\"(5) 广义线性表的实现\"></a>(5) 广义线性表的实现</h5><p>广义线性表抽象数据类型可以使用数组或链表来实现，通过前面的学习可知在线性表抽象数据类型层次上，利用6个操作对表中的元素进行处理。</p>\n<p>在数组实现中，我们有带有两个域的记录。第一个域用来存储关于数组的信息：我们把它当作计数域，其中显示的是表中当前数据项的数目，第二个域是含有表中首元素序号的一个整数。</p>\n<p>链表的实现是相似的：我们有一个有表名字的额外节点，这个节点也有两个域：一个计数器和一个指向首元素的指针。</p>\n<p>此处，以Go语言为例分别演示数组与链表进行广义线性表的实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc: 使用数组进行广义线性表实现示例</span></span><br><span class=\"line\"><span class=\"comment\">// author: WeiyiGeeek</span></span><br><span class=\"line\"><span class=\"comment\">// Time: 2022年12月30日 12:19:59</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span> MaxSize <span class=\"keyword\">int</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// 线性表结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SeqListClass <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data   []<span class=\"keyword\">int</span></span><br><span class=\"line\">    length <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分配空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewList</span><span class=\"params\">()</span> *<span class=\"title\">SeqListClass</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> MaxSize == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;SeqListClass&#123;</span><br><span class=\"line\">        data:   <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, MaxSize, MaxSize),</span><br><span class=\"line\">        length: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为顺序表填值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">creatList</span><span class=\"params\">(data []<span class=\"keyword\">int</span>, n <span class=\"keyword\">int</span>)</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">        this.data[i] = data[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.length = n</span><br><span class=\"line\">    fmt.Println(this.data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出顺序表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">dispList</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.length == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"顺序表为0！\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; this.length; i++ &#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">\"%d\\t\"</span>, this.data[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表长</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">listLength</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> this.length</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据index查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">getEleme</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> || i &gt; this.length &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>, errors.New(<span class=\"string\">\"out of range!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> this.data[i<span class=\"number\">-1</span>], <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//依据输入元素查找index</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">LocateElem</span><span class=\"params\">(value <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">0</span>; i &lt; this.length; i++ &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value == this.data[i] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &gt;= this.length &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>, errors.New(<span class=\"string\">\"out of range\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">ListInsert</span><span class=\"params\">(i, value <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> || i &gt;= this.length &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"out of range\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := this.length; j &gt;= i; j-- &#123;</span><br><span class=\"line\">        this.data[j] = this.data[j<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.data[i] = value</span><br><span class=\"line\">    this.length++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">ListDelete</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> || i &gt;= this.length &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"out of range\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := i; j &lt; this.length; j++ &#123;</span><br><span class=\"line\">        this.data[j] = this.data[j+<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.length--</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 反转列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *SeqListClass)</span> <span class=\"title\">Reserve</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; this.length/<span class=\"number\">2</span>; i++ &#123;</span><br><span class=\"line\">        tmp := this.data[i]</span><br><span class=\"line\">        this.data[i] = this.data[this.length-i<span class=\"number\">-1</span>]</span><br><span class=\"line\">        this.data[this.length-i<span class=\"number\">-1</span>] = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//先新建一个表</span></span><br><span class=\"line\">    lst := NewList()</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个data切片</span></span><br><span class=\"line\">    data := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">//为顺序表填值</span></span><br><span class=\"line\">    lst.creatList(data, <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    lst.dispList()</span><br><span class=\"line\"></span><br><span class=\"line\">    n := lst.listLength()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"表长为\"</span>, n)</span><br><span class=\"line\">    n, _ = lst.getEleme(<span class=\"number\">5</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"查找到元素为\"</span>, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    n, _ = lst.LocateElem(<span class=\"number\">5</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"查找到的位置为\"</span>, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"插入前表长为\"</span>, lst.listLength() )</span><br><span class=\"line\"></span><br><span class=\"line\">    lst.ListInsert(<span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"插入新元素后的列表为：\"</span>, lst.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"插入后表长为\"</span>, lst.listLength() )</span><br><span class=\"line\"></span><br><span class=\"line\">    lst.ListDelete(<span class=\"number\">5</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"删除元素后的列表为：\"</span>, lst.data)</span><br><span class=\"line\">    </span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"删除后表长为\"</span>, lst.listLength() )</span><br><span class=\"line\"></span><br><span class=\"line\">    lst.Reserve()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"列表反转后为：\"</span>, lst.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">12</span> <span class=\"number\">2</span> <span class=\"number\">13</span> <span class=\"number\">4</span> <span class=\"number\">23</span> <span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"number\">8</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"number\">12</span>\t<span class=\"number\">2</span>\t<span class=\"number\">13</span>\t<span class=\"number\">4</span>\t<span class=\"number\">23</span>\t<span class=\"number\">10</span>\t<span class=\"number\">5</span>\t<span class=\"number\">8</span>\t表长为 <span class=\"number\">8</span></span><br><span class=\"line\">查找到元素为 <span class=\"number\">23</span></span><br><span class=\"line\">查找到的位置为 <span class=\"number\">7</span></span><br><span class=\"line\">插入前表长为 <span class=\"number\">8</span></span><br><span class=\"line\">插入新元素后的列表为： [<span class=\"number\">12</span> <span class=\"number\">2</span> <span class=\"number\">13</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">23</span> <span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"number\">8</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">插入后表长为 <span class=\"number\">9</span></span><br><span class=\"line\">删除元素后的列表为： [<span class=\"number\">12</span> <span class=\"number\">2</span> <span class=\"number\">13</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"number\">8</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">删除后表长为 <span class=\"number\">8</span></span><br><span class=\"line\">列表反转后为： [<span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"number\">4</span> <span class=\"number\">13</span> <span class=\"number\">2</span> <span class=\"number\">12</span> <span class=\"number\">0</span> <span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>循环单链表和单链表大致一样，但不同的地方在于，尾指针并不是指向nil，而是指向表头<br>循环双链表和双链表也类似，但时尾部指针的后指针域指向头部元素，头部元素的前指针域指向尾部元素。<br>基本操作与双链表类似，但操作难度更高，作者水平有限，此处代码转载于 (<a href=\"https://studygolang.com/articles/14527\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/articles/14527</a>)</p>\n<p>此处，使用Go语言演示循环单链表。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环单链表和单链表大致一样，但不同的地方在于，尾指针并不是指向nil，而是指向表头</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> object <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    data object <span class=\"comment\">//数据域</span></span><br><span class=\"line\">    next *node  <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cLinkList <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    num  <span class=\"keyword\">uint64</span> <span class=\"comment\">//数量</span></span><br><span class=\"line\">    head *node  <span class=\"comment\">//头节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newList</span><span class=\"params\">()</span> *<span class=\"title\">cLinkList</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;cLinkList&#123;</span><br><span class=\"line\">        num:  <span class=\"number\">0</span>,</span><br><span class=\"line\">        head: <span class=\"literal\">nil</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取表头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">getHead</span><span class=\"params\">()</span> *<span class=\"title\">node</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> this.head</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取节点数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">getNum</span><span class=\"params\">()</span> <span class=\"title\">uint64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*this).num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加表尾数据,在头部和尾巴添加数据效果一样</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">appenData</span><span class=\"params\">(data object)</span></span> &#123;</span><br><span class=\"line\">    newNode := &amp;node&#123;data: data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.getNum() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无数据，将data作为表头</span></span><br><span class=\"line\">        (*this).head = newNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//尾巴</span></span><br><span class=\"line\">        cur := this.getHead()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ; (*cur).next != this.getHead(); cur = (*cur).next &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (*cur).next = newNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (*newNode).next = (*this).getHead()</span><br><span class=\"line\">    (*this).num++</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//index后添加数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">insertData</span><span class=\"params\">(index <span class=\"keyword\">int</span>, data object)</span></span> &#123;</span><br><span class=\"line\">    newNode := &amp;node&#123;data: data&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span> || <span class=\"keyword\">uint64</span>(index) &gt; this.getNum() &#123;</span><br><span class=\"line\">        this.appenData(data)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur := this.getHead()</span><br><span class=\"line\">        count := <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> count &lt; index<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">            cur = cur.next</span><br><span class=\"line\">            count++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newNode.next = cur.next</span><br><span class=\"line\">        cur.next = newNode</span><br><span class=\"line\">        (*this).num++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">removeData</span><span class=\"params\">(data object)</span></span> &#123;</span><br><span class=\"line\">    elem := &amp;node&#123;data: data&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> elem == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"输入元素有误！\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur := this.getHead()</span><br><span class=\"line\">    pre := &amp;node&#123;data: <span class=\"literal\">nil</span>,next: <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">    prenode := &amp;node&#123;data: <span class=\"literal\">nil</span>,next: <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历到elem节点之前</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>  pre = cur; (*cur).data != (*elem).data; cur = (*cur).next &#123;</span><br><span class=\"line\">      <span class=\"comment\">//fmt.Print((*pre).data)</span></span><br><span class=\"line\">      <span class=\"comment\">//记录查询到数据的上一个节点地址</span></span><br><span class=\"line\">      prenode = pre</span><br><span class=\"line\">      pre = (*pre).next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (*prenode).next = (*cur).next</span><br><span class=\"line\">    (*this).num--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取下一个节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *node)</span> <span class=\"title\">getTail</span><span class=\"params\">()</span> <span class=\"title\">object</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> this.next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//显示列表所有元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *cLinkList)</span> <span class=\"title\">showList</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.getNum() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"当前为空表！\"</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur := this.head</span><br><span class=\"line\">        fmt.Print(<span class=\"string\">\"当前元素为：\"</span>, cur.data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> cur.next != this.getHead() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.next == this.getHead() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = cur.next</span><br><span class=\"line\">            fmt.Print(<span class=\"string\">\"\\t\"</span>,cur.data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化链表</span></span><br><span class=\"line\">    lst := newList()</span><br><span class=\"line\">    <span class=\"comment\">//添加数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++ &#123;</span><br><span class=\"line\">      lst.appenData(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//插入后显示所有元素</span></span><br><span class=\"line\">    lst.showList()</span><br><span class=\"line\">    <span class=\"comment\">//节点数量</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"节点数量\"</span>,lst.getNum())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//指定位置插入元素</span></span><br><span class=\"line\">    lst.insertData(<span class=\"number\">6</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">    lst.insertData(<span class=\"number\">7</span>, <span class=\"number\">128</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//插入后显示所有元素</span></span><br><span class=\"line\">    lst.showList()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//当前节点数量</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"当前节点数量\"</span>,lst.getNum())</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">////删除指定元素</span></span><br><span class=\"line\">    lst.removeData(<span class=\"number\">6</span>)</span><br><span class=\"line\">    lst.removeData(<span class=\"number\">128</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除后显示所有元素</span></span><br><span class=\"line\">    lst.showList()</span><br><span class=\"line\">    <span class=\"comment\">//当前节点数量</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"当前节点数量\"</span>,lst.getNum())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化元素</span></span><br><span class=\"line\">当前元素为：0\t1\t2\t3\t4\t5\t6\t7\t8</span><br><span class=\"line\">节点数量 9</span><br><span class=\"line\">当前元素为：0\t1\t2\t3\t4\t5\t64\t128\t6\t7\t8</span><br><span class=\"line\">当前节点数量 11</span><br><span class=\"line\">当前元素为：0\t1\t2\t3\t4\t5\t64\t7\t8</span><br><span class=\"line\">当前节点数量 9</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"12-5-树\"><a href=\"#12-5-树\" class=\"headerlink\" title=\"12.5 树\"></a>12.5 树</h4><h5 id=\"1-树的介绍\"><a href=\"#1-树的介绍\" class=\"headerlink\" title=\"(1) 树的介绍\"></a>(1) 树的介绍</h5><p>树在计算机科学中有许多应用，例如在目录文件索引处理中，最常用的抽象数据类型。树包括一组有限的元素，称为<strong>节点</strong>（或顶点），同时包括一组有限的有向线段，用来连接节点，称为<strong>弧</strong>。</p>\n<p>如果树是非空的，其中有一个节点没有进入的弧，该节点称为根。树中的其他节点都可以沿着从根开始的唯一路径到达，该路径是指一系列相邻连接的节点序列。</p>\n<p>树的结构通常被画成上下颠倒，根在顶部，我们可以把树中的顶点分成三类：<strong>根、叶子和内部节点</strong>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207110414202.png\" alt=\"WeiyiGeek.树的介绍\" title=\"\" class=\"\">\n                <p>WeiyiGeek.树的介绍</p>\n            </figure>\n<p>在树中每种节点允许的外出弧和进入孤的数目，例如，</p>\n<ul>\n<li>根的进入弧为0，其外出弧为0或者更多。</li>\n<li>叶子的进入弧为1，其外出弧为0。</li>\n<li>内部节点的进入弧为1，其外出弧为1或者更多。</li>\n</ul>\n<p>下图中显示了的树的所有子树，其类似于历史书中分封制度。</p>\n<ul>\n<li>子节点：从一给定节点可以直接到达（通过一个弧）的节点称为子节点，</li>\n<li>双亲：从其出发子节点可以直接到达的节点称为双亲。</li>\n<li>兄弟节点：具有相同双亲的节点称为兄弟节点，</li>\n<li>父节点（祖先）：节点的子孙是指从该节点出发可以到达的所有节点，而从其出发所有的子孙都可以到达的节点称为祖先。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207112146010.png\" alt=\"WeiyiGeek.树的类型\" title=\"\" class=\"\">\n                <p>WeiyiGeek.树的类型</p>\n            </figure>\n<p>温馨提示：树中每个节点都有可能有子树。</p>\n<p><br/></p>\n<h5 id=\"2-二叉树的介绍\"><a href=\"#2-二叉树的介绍\" class=\"headerlink\" title=\"(2) 二叉树的介绍\"></a>(2) 二叉树的介绍</h5><p>由于树的应用非常广泛，此处我们介绍一种最基本的抽象数据类型二叉树。</p>\n<p>介绍：二叉树是一棵树，且其中没有一个节点所含有的子树的个数超过两个。换句话说，任一个节点<strong>只能有0、1或是2棵子树</strong>，这些子树被描述为<strong>左子树和右子树</strong>。</p>\n<p>下图给出了一棵有两棵子树的二叉树，注意<strong>每一棵子树本身也是一棵二叉树</strong>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207112609920.png\" alt=\"WeiyiGeek.二叉树\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉树</p>\n            </figure>\n<p>二叉树的递归定义：二叉树是一棵空树或由一个根节点和两棵子树构成，而每棵子树也是二叉树。</p>\n<p>下图显示了8棵树，第一棵是空二叉树（有时称为零二叉树）。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221207113933772.png\" alt=\"WeiyiGeek.二叉树示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉树示例</p>\n            </figure>\n<p><br></p>\n<h5 id=\"3-二叉树的操作\"><a href=\"#3-二叉树的操作\" class=\"headerlink\" title=\"(3) 二叉树的操作\"></a>(3) 二叉树的操作</h5><p>二叉树中有6种最常用的操作是建树（创建一棵空树）、插入、删除、检索、空和遍历。本节只讨论二叉树的遍历，前5种超出了学习范围，有兴趣的朋友可以了解一哈。</p>\n<p><strong>1) 二叉树的遍历</strong></p>\n<p>二叉树遍历要求按照预定的顺序处理每一个节点且仅处理一次。</p>\n<p>他有两种常用的遍历次序是<strong>深度优先</strong>和<strong>广度优先</strong>。</p>\n<ul>\n<li><p>深度优先遍历：给定一棵由根、左子树、右子树构成的二叉树，我们可以定义6<strong>种</strong>不同的<strong>深度优先遍历</strong>次序，计算机科学家已经在文献定义了其中三种的标准名称（<code>前序、中序、后序</code>）遍历，而另外三种没有名称。</p>\n<blockquote>\n<p>在<strong>前序遍</strong>历中，根被首先访问，接着是左子树，最后是右子树。其中(前缀pre 表示根在子树前面被处理) ，即 （根左右）</p>\n<p>在<strong>中序遍</strong>历中，先处理左子树，然后是根，最后是右子树。其中(前缀in表示根在子树之间被处理)，即 (左根右)</p>\n<p>在<strong>后序遍</strong>历中，根在左右子树都处理完后才处理根。其中(前缀post表示根在子树之后被处理)，即（左右根）</p>\n</blockquote>\n</li>\n</ul>\n<p>下图，显示了我们使用前序遍历访问树中的每个节点。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221220115097.png\" alt=\"WeiyiGeek.二叉树的遍历\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉树的遍历</p>\n            </figure>\n<ul>\n<li><p>广度优先遍历: 它是先处理节点的子节点，然后进行下一层，就像在深度优先遍历中一样，我们也可以用行走来跟踪遍历，可以理解为先处理顶层、再处理下一层，一直到尾层。</p>\n<p>例如，下图显示了我们使用广度优先遍历访问树中的每个节点。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221220628469.png\" alt=\"WeiyiGeek.二叉树的遍历示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉树的遍历示例</p>\n            </figure>\n<p><br/></p>\n<h5 id=\"4-二叉树的应用\"><a href=\"#4-二叉树的应用\" class=\"headerlink\" title=\"(4) 二叉树的应用\"></a>(4) 二叉树的应用</h5><p>实际上二叉树在计算机科学中有许多应用，此处只简单介绍其中两种，即<code>赫夫曼编码</code>和<code>表达式树</code>。</p>\n<p><strong>1) 赫夫曼编码</strong></p>\n<p>赫夫曼编码是一种<code>压缩技术</code>，它使用二叉树来生成一个符号串的可变长度的二进制编码，在后续学习中我们会遇到。</p>\n<p><strong>2) 表达式树</strong></p>\n<p>在表达式树中，根和内部节点是操作符，而叶子是操作数。此时三种标准的遍历（<code>前序、中序和后序</code>）分部表示了三种不同的表达式格式<code>中缀、后缀、前缀</code>。</p>\n<ul>\n<li>在前缀表示中，操作符是处于两个操作数之前的;  前序遍历产生了前缀表达式。</li>\n<li>在中缀表示中，操作符是处于两个操作数中间的；中序遍历产生了中缀表达式。</li>\n<li>在后缀表示中，操作符是处于两个操作数之后的；后序遍历产生了后缀表达式。</li>\n</ul>\n<blockquote>\n<p>即 前缀：<code>+ A B</code>        中缀：<code>A + B</code>    后缀：<code>A B +</code></p>\n</blockquote>\n<p>虽然我们在编程语言中使用<code>中缀表示</code>，但<code>编译程序</code>经常在计算表达式之前需要把它们<code>转变为后缀表示</code>，进行这个转换的一种方法就是建立表达式树。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221222050797.png\" alt=\"WeiyiGeek.二叉树的表达式树\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉树的表达式树</p>\n            </figure>\n<p>温馨提示: 注意只有中缀表示法需要括号。</p>\n<h5 id=\"5-二叉树的实现\"><a href=\"#5-二叉树的实现\" class=\"headerlink\" title=\"(5) 二叉树的实现\"></a>(5) 二叉树的实现</h5><p>二叉树可以使用数组或链表来实现，而实践中对于删除和插入操作，链表实现的效率要更高，所以更为流行。</p>\n<p>此处，以Go语言为例用递归的方式遍历进行二叉树前序、中序、后续遍历演示。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"comment\">//定义结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name  <span class=\"keyword\">string</span></span><br><span class=\"line\">  Age   <span class=\"keyword\">int</span></span><br><span class=\"line\">  Score <span class=\"keyword\">float32</span></span><br><span class=\"line\">  left  *Student</span><br><span class=\"line\">  right *Student</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前序遍历函数（根左右）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">preTree</span><span class=\"params\">(tmp *Student)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> tmp == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//输出当前节点</span></span><br><span class=\"line\">  fmt.Println(*tmp)</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个左节点</span></span><br><span class=\"line\">  preTree(tmp.left)</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个右节点</span></span><br><span class=\"line\">  preTree(tmp.right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中序遍历函数（左根右）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">inTree</span><span class=\"params\">(tmp *Student)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> tmp == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个左节点</span></span><br><span class=\"line\">  inTree(tmp.left)</span><br><span class=\"line\">  <span class=\"comment\">//输出当前节点</span></span><br><span class=\"line\">  fmt.Println(*tmp)</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个右节点</span></span><br><span class=\"line\">  inTree(tmp.right)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后序遍历函数（左右根）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postTree</span><span class=\"params\">(tmp *Student)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> tmp == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个左节点</span></span><br><span class=\"line\">  postTree(tmp.left)</span><br><span class=\"line\">  <span class=\"comment\">//递归遍历下一个右节点</span></span><br><span class=\"line\">  postTree(tmp.right)</span><br><span class=\"line\">  <span class=\"comment\">//最后输出当前节点</span></span><br><span class=\"line\">  fmt.Println(*tmp)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义二叉树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//根节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> root Student</span><br><span class=\"line\">  root.Name = <span class=\"string\">\"root\"</span></span><br><span class=\"line\">  root.Age = <span class=\"number\">18</span></span><br><span class=\"line\">  root.Score = <span class=\"number\">80</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//左子树</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left1 Student</span><br><span class=\"line\">  left1.Name = <span class=\"string\">\"left1\"</span></span><br><span class=\"line\">  left1.Age = <span class=\"number\">19</span></span><br><span class=\"line\">  left1.Score = <span class=\"number\">81</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  root.left = &amp;left1</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//右子树</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right1 Student</span><br><span class=\"line\">  right1.Name = <span class=\"string\">\"right1\"</span></span><br><span class=\"line\">  right1.Age = <span class=\"number\">20</span></span><br><span class=\"line\">  right1.Score = <span class=\"number\">80</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  root.right = &amp;right1</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//二级左子树</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left2 Student</span><br><span class=\"line\">  left2.Name = <span class=\"string\">\"left2\"</span></span><br><span class=\"line\">  left2.Age = <span class=\"number\">29</span></span><br><span class=\"line\">  left2.Score = <span class=\"number\">91</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  left1.left = &amp;left2</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 前序遍历函数（根左右）</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"前序遍历函数（根左右）\"</span>)</span><br><span class=\"line\">  preTree(&amp;root)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 中序遍历函数（左根右）</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"中序遍历函数（左根右）\"</span>)</span><br><span class=\"line\">  inTree(&amp;root)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 后序变量函数（左右根）</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"后序变量函数（左右根）\"</span>)</span><br><span class=\"line\">  postTree(&amp;root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 前序遍历函数（根左右）</span></span><br><span class=\"line\">&#123;root 18 80 0xc00005e150 0xc00005e180&#125;</span><br><span class=\"line\">&#123;left1 19 81 0xc00005e1b0 &#125;</span><br><span class=\"line\">&#123;left2 29 91  &#125;</span><br><span class=\"line\">&#123;right1 20 80  &#125;</span><br><span class=\"line\"><span class=\"comment\"># 中序遍历函数（左根右）</span></span><br><span class=\"line\">&#123;left2 29 91  &#125;</span><br><span class=\"line\">&#123;left1 19 81 0xc00005e1b0 &#125;</span><br><span class=\"line\">&#123;root 18 80 0xc00005e150 0xc00005e180&#125;</span><br><span class=\"line\">&#123;right1 20 80  &#125;</span><br><span class=\"line\"><span class=\"comment\"># 后序变量函数（左右根）</span></span><br><span class=\"line\">&#123;left2 29 91  &#125;</span><br><span class=\"line\">&#123;left1 19 81 0xc00005e1b0 &#125;</span><br><span class=\"line\">&#123;right1 20 80  &#125;</span><br><span class=\"line\">&#123;root 18 80 0xc00005e150 0xc00005e180&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>示例2：非递归前序(深度优先遍历)思路：</strong></p>\n<ul>\n<li>1.声明一个栈</li>\n<li>2.从栈中弹出一个节点cur</li>\n<li>3.打印（处理）cur</li>\n<li>4.先右后左（如果有），把该节点的子节点压入栈中</li>\n<li>5.循环执行1-&gt;2-&gt;3</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Value <span class=\"keyword\">int</span></span><br><span class=\"line\">  Left  *Node</span><br><span class=\"line\">  Right *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  MaxTop <span class=\"keyword\">int</span>      <span class=\"comment\">//栈最大可以存放的数的个数</span></span><br><span class=\"line\">  Top    <span class=\"keyword\">int</span>      <span class=\"comment\">//表示栈顶的索引id，初始值为-1，最大值为MaxTop-1</span></span><br><span class=\"line\">  Arr    [<span class=\"number\">7</span>]*Node <span class=\"comment\">//数组模拟栈</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span> <span class=\"title\">Push</span><span class=\"params\">(pushNode *Node)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s.Top == s.MaxTop<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"栈满了\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.Top++</span><br><span class=\"line\">  s.Arr[s.Top] = pushNode</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"params\">(popNode *Node, err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s.Top == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"空栈\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  popNode = s.Arr[s.Top]</span><br><span class=\"line\">  s.Arr[s.Top] = <span class=\"literal\">nil</span></span><br><span class=\"line\">  s.Top--</span><br><span class=\"line\">  <span class=\"keyword\">return</span> popNode, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span> <span class=\"title\">List</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s.Top == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"空栈\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; s.Top+<span class=\"number\">1</span>; i++ &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Arr[%v]=%v\\n\"</span>, i, s.Arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ShowTree</span><span class=\"params\">(head *Node)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> head != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    nodeStack := &amp;Stack&#123;MaxTop: <span class=\"number\">7</span>, Top: <span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">    nodeStack.Push(head)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> nodeStack.Top &lt; nodeStack.MaxTop<span class=\"number\">-1</span> &amp;&amp; nodeStack.Top &gt; <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">      tmpNode, _ := nodeStack.Pop()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> tmpNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(tmpNode.Value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> tmpNode.Right != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        nodeStack.Push(tmpNode.Right)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> tmpNode.Left != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        nodeStack.Push(tmpNode.Left)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根</span></span><br><span class=\"line\">  root := &amp;Node&#123;Value: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">  left := &amp;Node&#123;Value: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  right := &amp;Node&#123;Value: <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 左树</span></span><br><span class=\"line\">  root.Left = left</span><br><span class=\"line\">  <span class=\"comment\">// 右树</span></span><br><span class=\"line\">  root.Right = right</span><br><span class=\"line\">  </span><br><span class=\"line\">  left1 := &amp;Node&#123;Value: <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  right1 := &amp;Node&#123;Value: <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">  left2 := &amp;Node&#123;Value: <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">  right2 := &amp;Node&#123;Value: <span class=\"number\">8</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 左子树</span></span><br><span class=\"line\">  left.Left = left1</span><br><span class=\"line\">  left.Right = right1</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//右子树</span></span><br><span class=\"line\">  right.Left = left2</span><br><span class=\"line\">  right.Right = right2</span><br><span class=\"line\">  ShowTree(root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">4  <span class=\"comment\"># &lt; 右树</span></span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"6-二叉搜索树的介绍\"><a href=\"#6-二叉搜索树的介绍\" class=\"headerlink\" title=\"(6) 二叉搜索树的介绍\"></a>(6) 二叉搜索树的介绍</h5><p>二叉搜索树（BST）是一种具有额外特性的二叉树：每个节点的关键字值大于左子树中的所有节点的关键字值，而小于右子树中所有节点的关键字值。</p>\n<p>BST 一个非常有趣的特性是，一个是如果我们对二叉树应用<code>中序遍历</code>，被访问的<code>元素以升序排列</code>；而另一个有趣的特性是我们能对二叉搜索树使用在第8章中使用的<code>折半査找</code>。</p>\n<p>例如，下图示了一些二叉搜索树和一些非二叉搜索树。当使用中序遍历时，得到列表：<code>(3, 6, 17)、(17, 19)和(3, 6, 14, 17, 19)</code>.</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221223826740.png\" alt=\"WeiyiGeek.二叉搜索树\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉搜索树</p>\n            </figure>\n<p>温馨提示: 如果所有子树是二叉搜索树，并且整棵树也是二叉搜索树，那这棵树才是二叉搜索树。</p>\n<h5 id=\"7-二叉搜索树的抽象数据类型\"><a href=\"#7-二叉搜索树的抽象数据类型\" class=\"headerlink\" title=\"(7) 二叉搜索树的抽象数据类型\"></a>(7) 二叉搜索树的抽象数据类型</h5><p>二叉树的抽象数据类型与我们为具有相同操作的广义线性表所定义的抽象数据类型相似。事实上，如今<code>BST表比广义线性表更为常见</code>，因为BST的査找效率比广义线性表要高，广义线性表中只能使用顺序査找，而BST中可以使用折半査找。</p>\n<h5 id=\"8-二叉搜索树的实现\"><a href=\"#8-二叉搜索树的实现\" class=\"headerlink\" title=\"(8) 二叉搜索树的实现\"></a>(8) 二叉搜索树的实现</h5><p>同样，二叉搜索树(BST)可以使用数组或链表来实现，但是链表结构更为常见并且效率更高。</p>\n<p>线性实现使用带有两个指针的节点左指针（<code>左子树</code>）和右指针（<code>右子树</code>），如果左子树为空，则左指针也为空；如果右子树为空，则右指针也为空；</p>\n<p>像广义线性表的链表实现一样，BST的链表实现也使用一个与BST具有相同名字的虚构节点。该虚构节点的数据部分含有关于树的信息，如树中的节点数目，指针部分指向树的根。</p>\n<p>例如，下图显示了一棵二叉搜索树，其中每个节点的数据域是一个记录。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221224645620.png\" alt=\"WeiyiGeek.二叉搜索树数据域\" title=\"\" class=\"\">\n                <p>WeiyiGeek.二叉搜索树数据域</p>\n            </figure>\n<p>此处，仍然使用Go语言代码进行演示，编写二叉搜索树以及测试二叉搜索树。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"sync\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//TreeNode struct</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TreeNode <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  key       <span class=\"keyword\">int</span></span><br><span class=\"line\">  value     <span class=\"keyword\">int</span></span><br><span class=\"line\">  leftNode  *TreeNode</span><br><span class=\"line\">  rightNode *TreeNode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//BinarySearchTree struct</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> BinarySearchTree <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  rootNode *TreeNode</span><br><span class=\"line\">  lock     sync.RWMutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//插入节点方法</span></span><br><span class=\"line\"><span class=\"comment\">//InsertElement method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">InsertElement</span><span class=\"params\">(key <span class=\"keyword\">int</span>, value <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  tree.lock.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.Unlock()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> treeNode *TreeNode</span><br><span class=\"line\">  treeNode = &amp;TreeNode&#123;key, value, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> tree.rootNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    tree.rootNode = treeNode</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    insertTreeNode(tree.rootNode, treeNode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//insertTreeNode function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertTreeNode</span><span class=\"params\">(rootNode *TreeNode, newTreeNode *TreeNode)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> newTreeNode.key &lt; rootNode.key &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> rootNode.leftNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      rootNode.leftNode = newTreeNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      insertTreeNode(rootNode.leftNode, newTreeNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> rootNode.rightNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      rootNode.rightNode = newTreeNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      insertTreeNode(rootNode.rightNode, newTreeNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先序遍历二叉搜索树方法</span></span><br><span class=\"line\"><span class=\"comment\">//PreOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">PreOrderTraverseTree</span><span class=\"params\">(function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  tree.lock.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.Unlock()</span><br><span class=\"line\">  preOrderTraverseTree(tree.rootNode, function)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//preOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">preOrderTraverseTree</span><span class=\"params\">(treeNode *TreeNode, function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    function(treeNode.value)</span><br><span class=\"line\">    preOrderTraverseTree(treeNode.leftNode, function)</span><br><span class=\"line\">    preOrderTraverseTree(treeNode.rightNode, function)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中序遍历二叉搜索树方法</span></span><br><span class=\"line\"><span class=\"comment\">//InOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">InOrderTraverseTree</span><span class=\"params\">(function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  tree.lock.RLock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.RUnlock()</span><br><span class=\"line\">  inOrderTraverseTree(tree.rootNode, function)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//inOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">inOrderTraverseTree</span><span class=\"params\">(treeNode *TreeNode, function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    inOrderTraverseTree(treeNode.leftNode, function)</span><br><span class=\"line\">    function(treeNode.value)</span><br><span class=\"line\">    inOrderTraverseTree(treeNode.rightNode, function)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后序遍历二叉搜索树方法</span></span><br><span class=\"line\"><span class=\"comment\">//PostOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">PostOrderTraverseTree</span><span class=\"params\">(function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  tree.lock.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.Unlock()</span><br><span class=\"line\">  postOrderTraverseTree(tree.rootNode, function)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//postOrderTraverseTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">postOrderTraverseTree</span><span class=\"params\">(treeNode *TreeNode, function <span class=\"keyword\">func</span>(<span class=\"keyword\">int</span>)</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    postOrderTraverseTree(treeNode.leftNode, function)</span><br><span class=\"line\">    postOrderTraverseTree(treeNode.rightNode, function)</span><br><span class=\"line\">    function(treeNode.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找节点最小值方法</span></span><br><span class=\"line\"><span class=\"comment\">//MinNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">MinNode</span><span class=\"params\">()</span> *<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  tree.lock.RLock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.RUnlock()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> treeNode *TreeNode</span><br><span class=\"line\">  treeNode = tree.rootNode</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*<span class=\"keyword\">int</span>)(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> treeNode.leftNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;treeNode.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNode = treeNode.leftNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找节点最大值方法</span></span><br><span class=\"line\"><span class=\"comment\">//MaxNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">MaxNode</span><span class=\"params\">()</span> *<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  tree.lock.RLock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.RUnlock()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> treeNode *TreeNode</span><br><span class=\"line\">  treeNode = tree.rootNode</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*<span class=\"keyword\">int</span>)(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> treeNode.rightNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;treeNode.value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNode = treeNode.rightNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找节点方法</span></span><br><span class=\"line\"><span class=\"comment\">//SearchNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">SearchNode</span><span class=\"params\">(key <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  tree.lock.RLock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.RUnlock()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> searchNode(tree.rootNode, key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//searchNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">searchNode</span><span class=\"params\">(treeNode *TreeNode, key <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &lt; treeNode.key &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(treeNode.leftNode, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &gt; treeNode.key &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchNode(treeNode.rightNode, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除节点方法</span></span><br><span class=\"line\"><span class=\"comment\">//RemoveNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">RemoveNode</span><span class=\"params\">(key <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  tree.lock.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.Unlock()</span><br><span class=\"line\">  removeNode(tree.rootNode, key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//removeNode method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">removeNode</span><span class=\"params\">(treeNode *TreeNode, key <span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &lt; treeNode.key &#123;</span><br><span class=\"line\">    treeNode.leftNode = removeNode(treeNode.leftNode, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &gt; treeNode.key &#123;</span><br><span class=\"line\">    treeNode.rightNode = removeNode(treeNode.rightNode, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode.leftNode == <span class=\"literal\">nil</span> &amp;&amp; treeNode.rightNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode.leftNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    treeNode = treeNode.leftNode</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode.rightNode == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    treeNode = treeNode.rightNode</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> leftmostrightNode = treeNode.rightNode</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> leftmostrightNode != <span class=\"literal\">nil</span> &amp;&amp; leftmostrightNode.leftNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      leftmostrightNode = leftmostrightNode.leftNode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  treeNode.key, treeNode.value = leftmostrightNode.key, leftmostrightNode.value</span><br><span class=\"line\">  treeNode.rightNode = removeNode(treeNode.rightNode, treeNode.key)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> treeNode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//打印树中元素</span></span><br><span class=\"line\"><span class=\"comment\">//ShowTree method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tree *BinarySearchTree)</span> <span class=\"title\">ShowTree</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  tree.lock.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> tree.lock.Unlock()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"-----------------------------------------\"</span>)</span><br><span class=\"line\">  stringify(tree.rootNode, <span class=\"number\">0</span>)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"-----------------------------------------\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//stringify method</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stringify</span><span class=\"params\">(treeNode *TreeNode, level <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> treeNode != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    format := <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; level; i++ &#123;</span><br><span class=\"line\">      format += <span class=\"string\">\" \"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    format += <span class=\"string\">\"---[ \"</span></span><br><span class=\"line\">    level++</span><br><span class=\"line\">    stringify(treeNode.leftNode, level)</span><br><span class=\"line\">    fmt.Printf(format+<span class=\"string\">\"%d\\n\"</span>, treeNode.key)</span><br><span class=\"line\">    stringify(treeNode.rightNode, level)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试二叉搜索树节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tree *BinarySearchTree = &amp;BinarySearchTree&#123;&#125;</span><br><span class=\"line\">  tree.InsertElement(<span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">  tree.InsertElement(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  tree.InsertElement(<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  tree.InsertElement(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  tree.InsertElement(<span class=\"number\">6</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">  tree.ShowTree()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-----------------------------------------</span><br><span class=\"line\">  ---[ 1</span><br><span class=\"line\"> ---[ 3</span><br><span class=\"line\">  ---[ 6</span><br><span class=\"line\">---[ 8</span><br><span class=\"line\"> ---[ 10</span><br><span class=\"line\">-----------------------------------------</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"12-6-图\"><a href=\"#12-6-图\" class=\"headerlink\" title=\"12.6 图\"></a>12.6 图</h4><p>图是由一组节点（称为顶点）和一组顶点间的连线（称为边或弧）构成的一种抽象数据类型。</p>\n<p><strong>图与树的区别是什么？</strong></p>\n<p>树是定义成层次结构的，节点<code>只能有一个双亲</code>，而图中的节点可以<code>有一个或多个双亲</code>。</p>\n<p>图可能是<code>有向的</code>或<code>无向的</code>，例如下图展示的。</p>\n<ul>\n<li>在有向图中，连接两个顶点的边都有从一个顶点到另一个顶点的方向（在图中用箭头表示）。</li>\n<li>在无向图中，边是没有方向的。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221221225147253.png\" alt=\"WeiyiGeek.有向图与无向图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.有向图与无向图</p>\n            </figure>\n<p>图中的顶点可以代表对象或概念，边或弧可以代表这些对象或概念间的关系。如果图是有向的，那么关系就是单向的；如果图是无向的，那么关系就是双向的。</p>\n<p>例如，城市的地图和连接城市的道路可以表示成计算机中的一个无向图。城市是顶点，无向边是连接它们的道路。如果我们要显示出城市间的距离，可以使用加权图，其中的每条边都有一个权重，该权重表示由这条边连接的两个城市间的距离。</p>\n<p>例如，图的另一个应用是在计算机网络（第6章）中的应用。顶点可以代表节点或集线器，边可以代表路由。每条边都有一个权重，表示从一个集线器到相邻集线器的代价。路由器能使用图算法找到它与包最终目的地间的最短路径。</p>\n","comments":true,"excerpt":"[TOC]计算机科学导论学习笔记第 5 部分 数据组织与抽象此部分包含第11、12、13和14 章，讨论了数据结构、抽象数据类型、文件结构以及数据库原理。在计算机科学中，原子数据汇集成记录、文件和数据库，而数据抽象使得程序员能创建关于数据的抽象观念。原文地址: https://mp.weixin.qq.com/s/pdA3qGYV_k6HmPWC2j0NuA","categories":[{"name":"计算机基础知识","path":"api/categories/计算机基础知识.json"}],"tags":[{"name":"计算机科学导论","path":"api/tags/计算机科学导论.json"}]}