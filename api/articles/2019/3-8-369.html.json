{"title":"Git常用命令解析","slug":"编程世界/开发必备/版本控制/GIT/Git常用命令解析","date":"2019-03-08T14:47:25.000Z","updated":"2023-01-31T02:29:10.670Z","url":"2019/3-8-369.html","path":"api/articles/2019/3-8-369.html.json","covers":["https://img.weiyigeek.top/2019/1/20190729210427.png","https://img.weiyigeek.top/2019/20190716134719.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-git常用命令\"><a href=\"#0x00-git常用命令\" class=\"headerlink\" title=\"0x00 git常用命令\"></a>0x00 git常用命令</h4><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190729210427.png\" alt=\"WeiyiGeek.git常用命令一览\" title=\"\" class=\"\">\n                <p>WeiyiGeek.git常用命令一览</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常用的：</span></span><br><span class=\"line\">gapa   git add --patch</span><br><span class=\"line\">gc!    git commit -v --amend</span><br><span class=\"line\">gcl    git <span class=\"built_in\">clone</span> --recursive</span><br><span class=\"line\">gclean    git reset --hard &amp;&amp; git clean -dfx</span><br><span class=\"line\">gcm    git checkout master</span><br><span class=\"line\">gcmsg    git commit -m</span><br><span class=\"line\">gco    git checkout</span><br><span class=\"line\">gd    git diff</span><br><span class=\"line\">gdca    git diff --cached</span><br><span class=\"line\">gp    git push</span><br><span class=\"line\">grbc    git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\">gst    git status</span><br><span class=\"line\">gup    git pull --rebase</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<hr/>\n\n<h4 id=\"0x01-git-命令\"><a href=\"#0x01-git-命令\" class=\"headerlink\" title=\"0x01 git 命令\"></a>0x01 git 命令</h4><h5 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#git中文路径显示乱码，当被修改的文件中有中文字符时，中文字符会被转换为unicode码，导致看不出来原来的文件名。</span></span><br><span class=\"line\">git config --global core.quotepath <span class=\"literal\">false</span>  <span class=\"comment\">#不会对路径进行转换，显示原来完整的中文路径(非常重要)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#常用的别名设置</span></span><br><span class=\"line\">$ git config --global <span class=\"built_in\">alias</span>.[别名名称] [原git命令]  <span class=\"comment\">#别名设置</span></span><br><span class=\"line\">$ git config --global alias.st status</span><br><span class=\"line\">$ git config --global alias.co checkout  <span class=\"comment\">#用co表示checkout，ci表示commit，br表示branch：</span></span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.br branch</span><br><span class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\">$ git config --global alias.last <span class=\"string\">'log -1'</span>    <span class=\"comment\">#配置一个git last让其显示最后一次提交信息</span></span><br><span class=\"line\">$ git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span></span><br></pre></td></tr></table></figure>\n<p>示例1.Git设置下载代理<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意git没有https代理，http包含了https，网上的教程都有误，而且地址不能加单引号</span></span><br><span class=\"line\">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.proxy socks5://10.20.172.103:1080</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有代理</span></span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消代理</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h5><p>描述：克隆仓库会下载仓库完整的文件、分支和历史记录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> [&lt;options&gt;] [--] &lt;repo&gt; [&lt;dir&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 克隆完整的仓库到 ./git-learning 目录下</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:x-cold/git-learning.git</span><br><span class=\"line\"><span class=\"comment\"># 只克隆 dev 分支到 ./dev 目录下</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b dev git@github.com:x-cold/git-learning.git dev</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h5><p>描述：用命令git add告诉Git，把<code>文件添加到暂存区</code>注意，可反复多次使用，添加多个文件；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#git add 常用命令</span></span><br><span class=\"line\">$ git add readme.txt app/ index.js <span class=\"comment\">#添加指定文件</span></span><br><span class=\"line\">$ git add -A  <span class=\"comment\">#添加所有改动</span></span><br><span class=\"line\">$ git add *   <span class=\"comment\">#添加新建文件和修改，但是不包括删除</span></span><br><span class=\"line\">$ git add .   <span class=\"comment\">#添加新建文件和修改，但是不包括删除</span></span><br><span class=\"line\">$ git add -u   <span class=\"comment\">#添加修改和删除，但是不包括新建文件</span></span><br><span class=\"line\">$ git add -f App.class   <span class=\"comment\">#强制添加被.gitignore忽略了的文件到暂存区里</span></span><br><span class=\"line\"><span class=\"comment\">#执行git命令没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h5><p>描述：，用命令git commit告诉Git，把文件提交到<code>本地仓库</code>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改当前的 commit message</span></span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">$ git commit --amend --author=<span class=\"string\">'Author Name &lt;email@address.com&gt;'</span> <span class=\"comment\">#修改作者名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#最普通的提交-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的这样你就能从历史记录里方便地找到改动记录。</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"wrote a readme file\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重置当前的 commit author 和 message</span></span><br><span class=\"line\">$ git commit --amend --reset-author</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h5><p>描述：将本地代码仓库推送到远程代码仓库之中;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定远程仓库名称与分支名称推送信息</span></span><br><span class=\"line\">git push origin master  <span class=\"comment\">#    提交本地仓库当前分支到远程仓库的 master 分支</span></span><br><span class=\"line\">$ git push -f origin master  <span class=\"comment\"># 强制推送</span></span><br><span class=\"line\">$ git push -u origin master  <span class=\"comment\">#初次git init使用后后面默认将本地orgin 提交到master分支(设置分支“master”，从“origin”跟踪远程分支“master”。)</span></span><br><span class=\"line\">$ git push --<span class=\"built_in\">set</span>-upstream origin master <span class=\"comment\">#将远程仓库设置为从“origin”跟踪远程分支“master”进行关联</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交本地仓库 dev 分支到远程的 master 分支</span></span><br><span class=\"line\">git push origin master:dev</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#推送标签到仓库</span></span><br><span class=\"line\">git push origin v1.0 <span class=\"comment\">#可以推送一个本地标签 （单个 tag）</span></span><br><span class=\"line\">git push origin --tags  <span class=\"comment\">#推送全部未推送过的本地标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete &lt;remote_branchname&gt;</span><br><span class=\"line\">git push origin :&lt;remote_branchname&gt;</span><br><span class=\"line\">$ git push --delete origin master</span><br><span class=\"line\">$ git push origin &lt;格&gt;:master</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h5><p>描述：从远程仓库拉取代码库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull  <span class=\"comment\">#相当于fetch/merge-&gt;取回远程的仓库再与本地的制定分支合并）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通常来说，默认的 pull 行为等同于 git fetch + git merge</span></span><br><span class=\"line\"><span class=\"comment\"># 下面这行命令等同于 git fetch origin master &amp;&amp; git merge origin/master</span></span><br><span class=\"line\">$ git pull origin(远程源名称) master(分支名称)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以通过变基的方式来拉取代码，这样分支模型不容易受到影响</span></span><br><span class=\"line\"><span class=\"comment\"># 下面这行命令等同于 git fetch origin master &amp;&amp; git rebase origin/master</span></span><br><span class=\"line\">$ git pull --rebase origin master  <span class=\"comment\">#rebase 复位基底</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"log\"><a href=\"#log\" class=\"headerlink\" title=\"log\"></a>log</h5><p>描述：利用命令git log查看Git，把文件提交到远程仓库的历史，进行显示;在实际工作中我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span>  <span class=\"comment\">#显示从最近到最远的提交日志</span></span><br><span class=\"line\"><span class=\"comment\"># commit 150030c770fa7675d77fc814d2310cd568858492</span></span><br><span class=\"line\"><span class=\"comment\"># Author: Weiyigeek &lt;***@qq.com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Date:   Mon Apr 10 15:11:26 2017 +0800</span></span><br><span class=\"line\"><span class=\"comment\">#     test github</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline <span class=\"comment\">#简约输出历史</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --color --graph --pretty=oneline</span><br><span class=\"line\"><span class=\"comment\"># * 890adeeddf59263d063e1406fd382ef6086b177c (HEAD -&gt; master, origin/master) www</span></span><br><span class=\"line\"><span class=\"comment\"># * 2efdfc9011eb2b3c28071ff63e8db06af453b624 testa</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#提交说明与commitid</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --oneline  </span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --oneline --decorate --graph</span><br><span class=\"line\"><span class=\"comment\"># 75b5b8 (HEAD -&gt; master, origin/master, origin/HEAD) git study</span></span><br><span class=\"line\"><span class=\"comment\"># c1ee2c4 all</span></span><br><span class=\"line\"><span class=\"comment\"># 5a0c6df shell</span></span><br><span class=\"line\"><span class=\"comment\"># 83055b1 shell</span></span><br><span class=\"line\"><span class=\"comment\"># e6598b0 1</span></span><br><span class=\"line\"><span class=\"comment\"># 0c8a94e Python数据处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定版本的提交记录</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> HEAD^  <span class=\"comment\">#上一个</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> HEAD^^ <span class=\"comment\">#上上个</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> HEAD~3 <span class=\"comment\">#上三个版本的历史</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看指定数量的log日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -1</span><br><span class=\"line\"><span class=\"comment\"># commit 890adeeddf59263d063e1406fd382ef6086b177c (HEAD -&gt; master, origin/master)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --color --graph --pretty=format:<span class=\"string\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit  <span class=\"comment\">#--graph看到分支合并图</span></span><br><span class=\"line\"><span class=\"comment\"># *   59bc1cb conflict fixed </span></span><br><span class=\"line\"><span class=\"comment\"># |\\</span></span><br><span class=\"line\"><span class=\"comment\"># | * 75a857c AND simple</span></span><br><span class=\"line\"><span class=\"comment\"># * | 400b400 &amp; simple</span></span><br><span class=\"line\"><span class=\"comment\"># |/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出前一次提交的commit message信息</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -1 --pretty=%B <span class=\"variable\">$&#123;GIT_COMMIT&#125;</span> HEAD~1</span><br><span class=\"line\"><span class=\"comment\"># bing webmaster</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190716134719.png\" alt=\"WeiyiGeek.git-log\" title=\"\" class=\"\">\n                <p>WeiyiGeek.git-log</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h5><p>描述：让我们时刻掌握仓库当前的状态，方便开发者进入下一步操作;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h5><p>描述：对比不同工作区里面的不同版本,虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。<br>比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff HEAD -- readme.txt <span class=\"comment\">#查看工作区和版本库里面最新版本的区别</span></span><br><span class=\"line\">$ git diff       <span class=\"comment\">#输出工作区和暂存区的different(不同)。</span></span><br><span class=\"line\">$ git diff HEAD  <span class=\"comment\">#输出工作区、暂存区 和本地最近的版本(commit)的different(不同)</span></span><br><span class=\"line\">$ git diff --cached  &lt;HEAD^1 / Commit ID&gt;  <span class=\"comment\">#输出暂存区和本地最近的版本(commit)的different(不同)</span></span><br><span class=\"line\">$ git diff master origin/master <span class=\"comment\">#本地仓库与origin/master就是你的远程仓库的different(不同)</span></span><br><span class=\"line\">$ git diff --color-words  <span class=\"comment\">#显示差异的不同颜色单词的</span></span><br><span class=\"line\">$ git diff --word-diff  <span class=\"comment\">#详细展示一行中的修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#来确认代码自动合并的情况</span></span><br><span class=\"line\">git diff -w [files]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h5><p>描述：既可以回退版本，也可以把暂存区的修改回退到工作区。撤销提交更改，非常强大，我们用HEAD时，表示最新的版本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)在 commit 前撤销 add 或者修改</span></span><br><span class=\"line\">git reset   <span class=\"comment\">#unstage all due changes</span></span><br><span class=\"line\">git reset &lt;file&gt; <span class=\"comment\">#撤销提交单独文件 </span></span><br><span class=\"line\">git reset HEAD file <span class=\"comment\">#可以把暂存区的修改撤销掉（unstage），重新放回工作区</span></span><br><span class=\"line\">git reset --hard HEAD^  <span class=\"comment\">#同一提交的所有内容都会变回上一个Commit时的状态</span></span><br><span class=\"line\">git reset --hard commitID  <span class=\"comment\">#回退或者前进到某一提交版本</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>实践实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不删除工作空间改动代码，撤销commit，不撤销 git add . </span></span><br><span class=\"line\">git reset --soft HEAD^</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不删除工作空间改动代码，撤销commit，并且撤销 git add . 操作</span></span><br><span class=\"line\">git reset --mixed HEAD^ </span><br><span class=\"line\">git reset HEAD^  <span class=\"comment\"># 与上效果一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作空间改动代码，撤销commit，撤销 git add . 操作(执行时慎重)</span></span><br><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h5><p>描述:可以进行分支管理与撤销文件在工作区里面的更改;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将 index.js 恢复到当前 commit 的内容</span></span><br><span class=\"line\">git checkout index.js</span><br><span class=\"line\">git checkout -- readme.txt  <span class=\"comment\">#把readme.txt文件在工作区的修改全部撤销</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#创建一个dev分支并切换到dev分支上</span></span><br><span class=\"line\">git checkout -b dev  <span class=\"comment\"># Switched to a new branch 'dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#采用 - 快速切换分支/切换指定分支</span></span><br><span class=\"line\">$ git checkout -   </span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从stash中拿出某个文件的修改</span></span><br><span class=\"line\">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file_path&gt;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h5><p>描述：创建并查看分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支会列出所有分支，当前分支前面会标一个*号。</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出本地和远程分支</span></span><br><span class=\"line\">​$ git branch -a <span class=\"comment\">#-a参数相当于：all</span></span><br><span class=\"line\">* master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/master</span><br><span class=\"line\">​</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出远程分支</span></span><br><span class=\"line\">$ git branch -r  <span class=\"comment\">#-r参数相当于：remote</span></span><br><span class=\"line\">​origin/HEAD -&gt; origin/master</span><br><span class=\"line\">origin/master</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 展示所有的分支关联的远程仓库  </span></span><br><span class=\"line\">git branch -vv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关联之后git branch -vv就可以展示关联的远程分支名了，同时推送到远程仓库直接：git push也不需要指定远程仓库了。</span></span><br><span class=\"line\">git branch -u origin/mybranch</span><br><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream &lt;localBranch&gt; &lt;remote&gt;/&lt;remoteBranch&gt; <span class=\"comment\">#设置默认上游及分支</span></span><br><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream dev origin/dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建分支</span></span><br><span class=\"line\">$ git branch dev <span class=\"comment\">#创建dev分支</span></span><br><span class=\"line\">git branch feature/canvas dev     <span class=\"comment\"># 基于远程仓库的 dev 分支，创建本地仓库的 feature/canvas 分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送本地分支：</span></span><br><span class=\"line\">git push origin develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更名分支</span></span><br><span class=\"line\">git branch [&lt;options&gt;] (-m | -M) [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br><span class=\"line\">$ git branch -m master</span><br><span class=\"line\"><span class=\"comment\"># 修改 feature/canvas 分支名为 feature/canvas2</span></span><br><span class=\"line\">git branch -M feature/canvas feature/canvas2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地分支</span></span><br><span class=\"line\">git branch -d &lt;local_branchname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行删除分支(要丢弃一个没有被合并过的分支)</span></span><br><span class=\"line\">$ git branch -D dev</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h5><p><br></p>\n<h5 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h5><p>描述：合并分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#合并某分支到当前分支</span></span><br><span class=\"line\">git merge &lt;branchname&gt;</span><br><span class=\"line\">git merge origin/master     <span class=\"comment\"># 合并远程仓库的 master 分支到当前分支</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#中止当前正在进行的合并</span></span><br><span class=\"line\">git merge --abort &lt;branchname&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#禁用Fast forward（快进）合并分支</span></span><br><span class=\"line\">git merge --no-ff -m <span class=\"string\">\"merge with no-ff\"</span> dev <span class=\"comment\">#注意--no-ff参数，并且使用-m来生成一个commitid</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h5><p>描述：把当前工作现场“储藏”起来,等一番 git 操作（比如 merge / rebase 等）之后，再将这部分更改重新放回工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时存放，临时存放区是一个栈的结构，支持多次临时存放，遵循后入先出的原则</span></span><br><span class=\"line\">$ git stash     <span class=\"comment\">#保存工作现场</span></span><br><span class=\"line\">$ git stash -u  <span class=\"comment\">#保存当前状态包括untracked的文件</span></span><br><span class=\"line\"><span class=\"comment\"># Saved working directory and index state WIP on dev: 6224937 add merge</span></span><br><span class=\"line\"><span class=\"comment\"># HEAD is now at 6224937 add merge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看保存的工作现场查看</span></span><br><span class=\"line\">$ git stash list</span><br><span class=\"line\"><span class=\"comment\"># stash@&#123;0&#125;: WIP on dev: 6224937 add merge</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新放回到工作区</span></span><br><span class=\"line\">$ git stash pop</span><br><span class=\"line\">$ git stash pop --index stash@&#123;0&#125;    <span class=\"comment\">#会回到工作区和暂存区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#保存本修改与暂存区的信息</span></span><br><span class=\"line\">$ git stash save -a <span class=\"string\">\"stash one\"</span>    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#还原暂存区,可以恢复指定的stash</span></span><br><span class=\"line\">$ git stash apply --index stash@&#123;0&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除暂存区</span></span><br><span class=\"line\">$ git stash drop --index stash@&#123;0&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除所有的stash</span></span><br><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h5><p>描述：为每一个或者指定的commitid提供标签信息;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#用命令git tag查看所有标签：</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#敲命令`git tag &lt;name&gt;`就可以打一个新标签</span></span><br><span class=\"line\">git tag v1.0  <span class=\"comment\">#默认标签是打在最新提交的commit上的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果在commit之后要为某一个COMMITID打上标签</span></span><br><span class=\"line\">git tag v1.1 6a5819e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置一个COMMITID带说明的标签信息</span></span><br><span class=\"line\">git tag -a v0.1 -m <span class=\"string\">\"version 0.1 released\"</span> 3628164</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过-s用私钥签名一个标签</span></span><br><span class=\"line\">git tag -s v0.2 -m <span class=\"string\">\"signed version 0.2 released\"</span> fec145a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#推送标签到远程仓库</span></span><br><span class=\"line\">git push origin v1.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地删除打的标签</span></span><br><span class=\"line\">$ git tag -d v0.1</span><br><span class=\"line\">  <span class=\"comment\"># Deleted tag 'v0.1' (was e078af9)</span></span><br><span class=\"line\"><span class=\"comment\"># 删除远程仓库 tag</span></span><br><span class=\"line\">git push origin tag --delete v1.1</span><br><span class=\"line\">git push origin :refs/tags/v1.0.0</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h5><p>描述：远程仓库的管理与查看,remote 指的是本地的 git 仓库关联的远程 git 仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看远程仓库</span></span><br><span class=\"line\">$ git remote    <span class=\"comment\">#origin</span></span><br><span class=\"line\">$ git remote -v <span class=\"comment\">#查看详细分支</span></span><br><span class=\"line\">origin  git@gitee.com:WeiyiGeek/test.git (fetch)</span><br><span class=\"line\">origin  git@gitee.com:WeiyiGeek/test.git (push)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程仓库的url</span></span><br><span class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin &lt;URL&gt;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行更改远程源仓库名称</span></span><br><span class=\"line\">$ git remote rename origin <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加远程仓库</span></span><br><span class=\"line\">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--tags | --no-tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class=\"line\">git remote add origin git@github.com:x-cold/git-learning.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程仓库</span></span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote remove origin <span class=\"comment\">#移除名字为 origin 的远程仓库</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个test的远程仓库</span></span><br><span class=\"line\">$ git remote rm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h5><p>描述：进行commit提交修改查看以及标签信息查看;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;tagname&gt; <span class=\"comment\">#查看标签信息</span></span><br><span class=\"line\">git show HEAD   <span class=\"comment\">#查看当前本地指向</span></span><br><span class=\"line\">git show master <span class=\"comment\">#查看当前本地Master分支指向</span></span><br><span class=\"line\">git show origin/HEAD  <span class=\"comment\">#查看当前远程指向</span></span><br><span class=\"line\">git show origin/master  <span class=\"comment\">#查看当前远程Master分支指向</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h5><p>描述：变基是一种常用且有风险的操作，会改变提交历史，谨慎使用！<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase</span><br><span class=\"line\"><span class=\"keyword\">while</span>(存在冲突) &#123;</span><br><span class=\"line\">    git status <span class=\"comment\">#找到当前冲突文件，编辑解决冲突</span></span><br><span class=\"line\">    git add -u</span><br><span class=\"line\">    git rebase --<span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( git rebase --abort )</span><br><span class=\"line\">        <span class=\"built_in\">break</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"cherry-pick\"><a href=\"#cherry-pick\" class=\"headerlink\" title=\"cherry-pick\"></a>cherry-pick</h5><p>描述：魔法级的命令cherry-pick 可以提取 N 个的提交记录，合入稳定版本的分支上<br>git cherry-pick [<options>] <commit-ish>…<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 挑选 371c2 单个提交记录，合入当前分支</span></span><br><span class=\"line\">git cherry-pick 371c2</span><br><span class=\"line\"><span class=\"comment\"># 挑选出 371c2 到 971209 的所有提交记录，并合入当前分支</span></span><br><span class=\"line\">git cherry-pick 371c2…971209</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"whatchaged\"><a href=\"#whatchaged\" class=\"headerlink\" title=\"whatchaged\"></a>whatchaged</h5><p>描述：查看指定时间段之间的改动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git whatchanged --since=<span class=\"string\">'2 weeks ago'</span>  <span class=\"comment\">#查看两个星期内的改动</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"reflog\"><a href=\"#reflog\" class=\"headerlink\" title=\"reflog\"></a>reflog</h5><p>描述：Git提供了一个命令git reflog用来记录你的每一次命令，主要用来进行回退版本到未来；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> reflog</span><br><span class=\"line\">2efdfc9 (HEAD -&gt; master, origin/master) HEAD@&#123;0&#125;: initial pull</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"rename\"><a href=\"#rename\" class=\"headerlink\" title=\"rename\"></a>rename</h5><p>描述：重命名仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rename fork forked</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h5><p>描述：删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#从版本库中删除该文件</span></span><br><span class=\"line\">git rm test.txt  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#只删除暂存区里的文件</span></span><br><span class=\"line\">git rm --cached test.txt</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"rev-parse-拾取信息参数\"><a href=\"#rev-parse-拾取信息参数\" class=\"headerlink\" title=\"rev-parse - 拾取信息参数\"></a>rev-parse - 拾取信息参数</h5><p>描述: 获取 git 项目相关信息参数信息。</p>\n<p><strong>实践案例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前HEAD值(常规)</span></span><br><span class=\"line\">git rev-parse HEAD</span><br><span class=\"line\">  <span class=\"comment\"># 3e3340aadbe304184e0c21b4763aabe9b3668d3b</span></span><br><span class=\"line\"><span class=\"comment\"># 获取当前HEAD值(短)</span></span><br><span class=\"line\">git rev-parse --short HEAD</span><br><span class=\"line\">  <span class=\"comment\"># 3e3340</span></span><br><span class=\"line\"></span><br><span class=\"line\">git rev-parse --short HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前项目路径</span></span><br><span class=\"line\">git rev-parse --show-toplevel</span><br><span class=\"line\">  <span class=\"comment\"># /usr/local/app/weiyigeek</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h5><p>描述：移动项目<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mv readme.txt ./TETS/</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h5><p>描述：清除文件<br>参数说明：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x  -----删除忽略文件已经对git来说不识别的文件</span><br><span class=\"line\">d  -----删除未被添加到git的路径中的文件</span><br><span class=\"line\">f  -----强制运行</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clean        <span class=\"comment\">#清除没有加入暂存区的文件</span></span><br><span class=\"line\">$ git clean -n     <span class=\"comment\">#不删除gitinore里面规则包含的文件</span></span><br><span class=\"line\">$ git clean -n -X  <span class=\"comment\">#显示在工作区在.gitinore规则包含的文件</span></span><br><span class=\"line\">$ git clean -x -f  <span class=\"comment\">#删除上面的所有文件，不管包括或者不包括</span></span><br><span class=\"line\">$ git clean -X -f  <span class=\"comment\">#删除工作区在.gitinore规则包含的文件 大写的x</span></span><br><span class=\"line\">$ git clean -d -fx <span class=\"string\">\"\"</span> <span class=\"comment\">#删除未被添加到git的路径中的文件</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h5><p>描述：产生覆盖文件 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert  <span class=\"comment\">#产生新的提交覆盖以前的提交</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"ls-files\"><a href=\"#ls-files\" class=\"headerlink\" title=\"ls-files\"></a>ls-files</h5><p>描述：查看仓库中所有的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#添加指定文件</span></span><br><span class=\"line\">git ls-files src/ | grep <span class=\"string\">'\\.css$'</span> | xargs git add</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#批量更换文章中的URL</span></span><br><span class=\"line\">git ls-files | grep <span class=\"string\">\"微服务浅谈与原理.md\"</span> | xargs sed <span class=\"string\">\"s#https://xxxx.com#http://baidu.com#g\"</span></span><br></pre></td></tr></table></figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"版本控制","path":"api/categories/版本控制.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}