{"title":"JavaWeb中的日志输出处理","slug":"编程世界/JavaWeb/Other/JavaWeb中的日志输出处理","date":"2019-11-18T11:56:50.000Z","updated":"2022-04-13T02:56:04.571Z","url":"2019/11-18-313.html","path":"api/articles/2019/11-18-313.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"slf4j-类\"><a href=\"#slf4j-类\" class=\"headerlink\" title=\"slf4j 类\"></a>slf4j 类</h4><p>描述:Slf4j 类是一个简单打印日志的工具，任何一个日志类库。但是不是一个日志的实现而是一个抽象层，允许在后台使用任何一个日志类库。</p>\n<p>Slf4j特点:</p>\n<ul>\n<li>1.使得日志独立于任何一个特定的日志实现，意味着不需要管理多个日志配置或者多个日志类库，因为提供了统一的记录日志的接口，对不同日志系统的具体实现进行了抽象化，只要按照其提供的方法记录即可，最终日志的格式、记录级别、输出方式等通过绑定具体的日志系统来实现。</li>\n<li>2.补充了log4j没有支持的输出打印方式，SLF4J支持{}作为占位符，等价于C语言中的%s，而不必再进行字符串的拼接节省字符串的内存消耗。</li>\n<li>3.因为 String 字符串的拼接会使用 StringBuilder 的 append()方式，有一定的性能损耗。使用占位符仅是替换动作，可以有效提升性能</li>\n<li>4.使用指定类初始化日志对象，在日志输出的时候可以打印出日志信息所在类</li>\n<li>5.每个Logger都被了一个日志级别（log level），用来控制日志信息的输出。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#日志级别从高到低分为：</span></span><br><span class=\"line\">A：off         最高等级，用于关闭所有日志记录。</span><br><span class=\"line\">B：fatal       指出每个严重的错误事件将会导致应用程序的退出。</span><br><span class=\"line\">C：error       指出虽然发生错误事件，但仍然不影响系统的继续运行。</span><br><span class=\"line\">D：warm        表明会出现潜在的错误情形。</span><br><span class=\"line\">E：info        一般和在粗粒度级别上，强调应用程序的运行全程。</span><br><span class=\"line\">F：debug       一般用于细粒度级别上，对调试应用程序非常有帮助。</span><br><span class=\"line\">G：all         最低等级，用于打开所有日志记录。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>LoggerFactory类说明:</em></p>\n<ul>\n<li>getLogger()-获取日志对象</li>\n<li>getILoggerFactory()-获取真实的日志工厂</li>\n<li>performInitialization()-初始化日志操作</li>\n<li>singleImplementationSanityCheck()-特定类存在判断</li>\n<li>bind()-绑定获取真实的日志处理类</li>\n</ul>\n<p>基础使用实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.导入 slf4j 日志包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2.获取 slf4j 日志对象</span></span><br><span class=\"line\"><span class=\"comment\">//LoggerFactory.getLogger 可以在IDE控制台打印日志，便于开发一般加在最上面：</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(xxxController.class); <span class=\"comment\">//使用指定类初始化日志对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.利用对象方法输出 slf4j 日志</span></span><br><span class=\"line\">logger.debug(<span class=\"string\">\"Processing trade with id: &#123;&#125; and symbol: &#123;&#125;\"</span>, id, symbol);</span><br><span class=\"line\">logger.info(<span class=\"string\">\"支付开始-学校id&#123;&#125;,用户openId&#123;&#125;,支付订单号&#123;&#125;,总金额&#123;&#125;,订单号List&#123;&#125;\"</span>,schoolId, openId, zfddh, total, orderNumList);</span><br><span class=\"line\">logger.error(throwable.getMessage(), throwable); <span class=\"comment\">//打印异常信息 throws Throwable,一般是将捕捉到的Exception对象作为日志记录的最后一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//4.控制台输出示例：</span></span><br><span class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">06</span>-<span class=\"number\">24</span> <span class=\"number\">18</span>:<span class=\"number\">45</span>:<span class=\"number\">49.348</span>  INFO <span class=\"number\">7308</span> --- [bio-<span class=\"number\">8080</span>-exec-<span class=\"number\">8</span>] c.x.p.m.v.controller.VoteController      : missing parameter</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"web开发","path":"api/tags/web开发.json"}]}