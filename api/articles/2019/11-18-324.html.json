{"title":"1.PS编程入门基础语法","slug":"编程世界/Powershell/Program/1.PS编程入门基础语法","date":"2019-11-18T11:56:50.000Z","updated":"2022-03-29T05:39:06.297Z","url":"2019/11-18-324.html","path":"api/articles/2019/11-18-324.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210406174815.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210327211525.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191116193627.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-PS-编程基础\"><a href=\"#0x00-PS-编程基础\" class=\"headerlink\" title=\"0x00 PS 编程基础\"></a>0x00 PS 编程基础</h2><p>描述: 当我第一次开始学习 PowerShell 时，如果无法使用 PowerShell 单行命令完成任务我会回到 GUI 找寻帮助。然后着时间的推移，我逐渐掌握了编写脚本、函数和模块的技能。</p>\n<p><br></p>\n<h3 id=\"1-基础格式\"><a href=\"#1-基础格式\" class=\"headerlink\" title=\"1.基础格式\"></a>1.基础格式</h3><ul>\n<li>1.脚本注释 : 在PS中采用 <code>#</code>字符进行注释</li>\n<li>2.变量命名 : 全局变量采用大写变量名，而非全局变量采用首字母大写或者驼峰命名法。</li>\n<li>3.对象命名 : 使用动词-名称的格式。</li>\n<li>4.大小写: 命令执行不区分大小写。</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-调用优先级\"><a href=\"#2-调用优先级\" class=\"headerlink\" title=\"2.调用优先级\"></a>2.调用优先级</h3><p>描述: Powershell调用入口的优先级(由上到下):</p>\n<ul>\n<li>别名：控制台首先会寻找输入是否为一个别名，如果是执行别名所指的命令。因此我们可以通过别名覆盖任意powershell命令，<code>因为别名的优先级最高</code>。</li>\n<li>函数：如果没有找到别名会继续寻找函数，函数类似别名，只不过它包含了更多的powershell命令。因此可以自定义函数扩充cmdlet 把常用的参数给固化进去。</li>\n<li>命令：如果没有找到函数，控制台会继续寻找命令，即cmdlet，powershell的内部命令。</li>\n<li>脚本：没有找到命令，继续寻找扩展名为“.ps1”的Powershell脚本。</li>\n<li>文件：没有找到脚本，会继续寻找文件，如果没有可用的文件，控制台会抛出异常。</li>\n</ul>\n<p><em>总结:</em> Alias &gt; Function &gt; Command &gt; Script &gt; File</p>\n<p><br></p>\n<h3 id=\"3-PS特殊字符\"><a href=\"#3-PS特殊字符\" class=\"headerlink\" title=\"3.PS特殊字符\"></a>3.PS特殊字符</h3><ul>\n<li><code>&#39;</code> : 单引号中的$符号不会识别为变量</li>\n<li><code>&quot;&quot;</code>: 双引号中的$符号会识别为变量</li>\n<li>` : PowerShell中得转义符类似于其他编程语言中得 \\ 反斜杠,如果在变量前加入该符号则不进行变量解析。</li>\n<li><code>@</code>  : 在命令行之中输入多行字符串</li>\n</ul>\n<p><strong>示例演示:</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -1.符号使用对比</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$a</span>=<span class=\"number\">8</span>; <span class=\"variable\">$b</span>=<span class=\"string\">'$a is 8'</span>; <span class=\"variable\">$b</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> is <span class=\"number\">8</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$a</span>=<span class=\"number\">8</span>; <span class=\"variable\">$b</span>=<span class=\"string\">\"<span class=\"variable\">$a</span> is 8\"</span>; <span class=\"variable\">$b</span></span><br><span class=\"line\"><span class=\"number\">8</span> is <span class=\"number\">8</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$a</span>=<span class=\"number\">8</span>; <span class=\"variable\">$b</span>=<span class=\"string\">\"`$a is 8\"</span>; <span class=\"variable\">$b</span></span><br><span class=\"line\"><span class=\"variable\">$a</span> is <span class=\"number\">8</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$json</span> = [String]<span class=\"string\">@\"</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;   \"test\": 'json',</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;   \"name\": \"WeiyiGeek\",</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt;   \"age\": 1024</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt; &#125;</span></span><br><span class=\"line\"><span class=\"string\">&gt;&gt; \"@</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$json</span></span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"test\": 'json',</span></span><br><span class=\"line\"><span class=\"string\">  \"name\": \"WeiyiGeek\",</span></span><br><span class=\"line\"><span class=\"string\">  \"age\": 1024</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># -2.转义字符进行命令执行换行使用以及字符串输出换行</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\Users\\WeiyiGeek&gt; Get-WmiObject -Class win32_bios `</span></span><br><span class=\"line\"><span class=\"string\">| select serialnumber</span></span><br><span class=\"line\"><span class=\"string\">  # serialnumber</span></span><br><span class=\"line\"><span class=\"string\">  # ------------</span></span><br><span class=\"line\"><span class=\"string\">  # 8QVY862</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"This is `nnewLine\"</span></span><br><span class=\"line\"><span class=\"string\"># This is</span></span><br><span class=\"line\"><span class=\"string\"># newLine</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Tips ：PowerShell的正则表达式中可能出现的字符(<code>实际上大致与Perl差不多</code>)</p>\n<ul>\n<li><p>(1) 字符串的匹配符（占位符PlaceHolder）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. 这是一个点儿，表示换行符之外的任意一个字符（Any character except newline (Equivalent: [^\\n])）</span><br><span class=\"line\">[^abc] 指定的字符（abc）之外的任意一个字符，可以把abc换成其它字符组。（All characters except the ones specified）</span><br><span class=\"line\">[^a-z] 任意一个非小写字母的字符（All characters except those <span class=\"keyword\">in</span> the region specified）</span><br><span class=\"line\">[abc] 指定的字符集中的任意一个，即abc中的任意一个（One of the characters）</span><br><span class=\"line\">[a-z] 指定的字符范围中的任意一个，即任意一个小写字母。One of the characters <span class=\"keyword\">in</span> the region</span><br><span class=\"line\">\\a 响呤（Bell (ASCII 7)）</span><br><span class=\"line\">\\c Any character allowed <span class=\"keyword\">in</span> XML names</span><br><span class=\"line\">\\cA-\\cZ Control+A to Control+Z, ASCII 1 to ASCII 26</span><br><span class=\"line\">\\d 任意一个数字，等同于[0-9]（Any number (Equivalent: [0-9])）</span><br><span class=\"line\">\\D 任意一个非数字。Any non-number</span><br><span class=\"line\">\\e ESC键（Escape (ASCII 27)）</span><br><span class=\"line\">\\f Form Feed, (ASCII 12)</span><br><span class=\"line\">\\n 换行Line <span class=\"built_in\">break</span></span><br><span class=\"line\">\\r 回车Carriage <span class=\"built_in\">return</span></span><br><span class=\"line\">\\s 任意一个空白键（空白键如tab，换行）Any whitespace (space, tab, new line)</span><br><span class=\"line\">\\S 任意一个非空白字符（Any non-whitespace）</span><br><span class=\"line\">\\t tab键</span><br><span class=\"line\">\\w 字母，数字和下划线（Letter, number or underline）</span><br><span class=\"line\">\\W \\w的补集（Non-letter, number, or underline）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(2) 匹配次数（量词Quantifier）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 出现零次、1次、多次（Any (no occurrence, once, many <span class=\"built_in\">times</span>)）</span><br><span class=\"line\">? 出现零次、1次（No occurrence or one occurrence）</span><br><span class=\"line\">&#123;n,&#125; 出现至少n次（At least n occurrences）</span><br><span class=\"line\">&#123;n,m&#125; 出现至少n次，最多m次（At least n occurrences, maximum m occurrences）</span><br><span class=\"line\">&#123;n&#125; 出现n次（Exactly n occurrences）</span><br><span class=\"line\">+ 出现1次、多次（One or many occurrences）</span><br><span class=\"line\">所有的匹配次数的符号，默认情况下都是贪婪的，即它将最大长度的进行匹配。如果想要得到最短的匹配，那就要在上面这组符号之后加一个问号（?）。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(3) 匹配边界</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 字符串结束（End of text）</span><br><span class=\"line\">^ 字符串开始（Start of text）</span><br><span class=\"line\">\\b Word boundary</span><br><span class=\"line\">\\B No word boundary</span><br><span class=\"line\">\\G After last match (no overlaps)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x01-PS-交互式\"><a href=\"#0x01-PS-交互式\" class=\"headerlink\" title=\"0x01 PS 交互式\"></a>0x01 PS 交互式</h2><p>描述: 我们可以通过打开<code>powershell.exe</code>应用windows窗口来进行交互式命令行的输入</p>\n<h3 id=\"1-命令行计算\"><a href=\"#1-命令行计算\" class=\"headerlink\" title=\"1.命令行计算\"></a>1.命令行计算</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (512*2)/2+512</span><br><span class=\"line\">1024</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; 1gb / 1mb</span><br><span class=\"line\">1024</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; 0x3389</span><br><span class=\"line\">13193</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2-执行外部命令\"><a href=\"#2-执行外部命令\" class=\"headerlink\" title=\"2.执行外部命令\"></a>2.执行外部命令</h3><p>描述: PS 能够像CMD一样很好的执行外部命令, 即在 windows Cmd 中运行的基本都可以在PS中运行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过netstat查看网络端口状态</span></span><br><span class=\"line\">netstat</span><br><span class=\"line\"><span class=\"comment\"># 通过IPConfig查看自己的网络配置</span></span><br><span class=\"line\">ipconfig</span><br><span class=\"line\"><span class=\"comment\"># 启动CMD控制台键入cmd或者cmd.exe, 而退出cmd可以通过命令exit。</span></span><br><span class=\"line\">cmd</span><br></pre></td></tr></table></figure></p>\n<p><strong>Q: 为什么可以通过notpad打开记事本，不能通过wordpad打开写字板?</strong></p>\n<blockquote>\n<p>答: 因为<code>notepad.exe</code>位于<code>C:Windows\\system32</code> 这个目录，而这个目录已经默认被包含在Powershell的环境变量<code>$env:Path</code>中。而wordpad.exe 所在的<code>“%ProgramFiles%\\Windows NT\\Accessories\\wordpad.exe“</code>目录却没有包含；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x</span><br><span class=\"line\">86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program File</span><br><span class=\"line\">s (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决办法:可以先进入这个目录，再运行wordpad，或者将wordpad所在的目录加入到环境变量中，$env:Path=$env:Path+”%ProgramFiles%\\Windows NT\\Accessories”。</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p><br/></p>\n<h3 id=\"3-别名设置与使用\"><a href=\"#3-别名设置与使用\" class=\"headerlink\" title=\"3.别名设置与使用\"></a>3.别名设置与使用</h3><p>描述: 与Linux的Alias命令一样Windows PS中也支持自定义别名，其别名的两个作用是<code>继承unix-shell和windows-cmd</code>和<code>方便用户使用</code>。</p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.查询别名所指的真实cmdlet命令。</span></span><br><span class=\"line\">Get-Alias -name ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查看可用的别名</span></span><br><span class=\"line\">Get-Alias</span><br><span class=\"line\"><span class=\"comment\"># 查看所有别名和指向cmdlet的别名的个数</span></span><br><span class=\"line\">ls <span class=\"built_in\">alias</span>: | Group-Object definition | sort -Descending Count</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.创建自己的别名</span></span><br><span class=\"line\">PS C:\\PS&gt; Set-Alias -Name Edit -Value notepad</span><br><span class=\"line\">PS C:\\PS&gt; Edit</span><br><span class=\"line\">PS C:\\PS&gt; <span class=\"variable\">$alias</span>:Edit</span><br><span class=\"line\">notepad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.删除自己的别名</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义的别名在powershell退出时会自动清除(前提是没有导入系统中),而内置别名需要手工进行删除别名</span></span><br><span class=\"line\">del <span class=\"built_in\">alias</span>:Edit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.保存自己的别名(导出与导入)</span></span><br><span class=\"line\">Export-Alias alias.ps1</span><br><span class=\"line\">Import-Alias -Force alias.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.通过函数扩展别名(当简单的别名无法完成复制的工作时需要采用此方法),这样定义别名会变得更加灵活;</span></span><br><span class=\"line\">PS C:\\PS&gt; <span class=\"keyword\">function</span> <span class=\"built_in\">test</span>-conn &#123; Test-Connection  -Count 2 -ComputerName <span class=\"variable\">$args</span>&#125;</span><br><span class=\"line\">PS C:\\PS&gt; Set-Alias tc <span class=\"built_in\">test</span>-conn</span><br><span class=\"line\">PS C:\\PS&gt; tc localhost  <span class=\"comment\"># 有了函数牵线别名可以完成更高级更强大的功能，其中$args为参数的占位符。</span></span><br><span class=\"line\">Source        Destination     IPV4Address      IPV6Address                              Bytes    Time(ms)</span><br><span class=\"line\">------        -----------     -----------      -----------                              -----    --------</span><br><span class=\"line\">WeiyiGeek  localhost       127.0.0.1        ::1                                      32       0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-执行文件和脚本\"><a href=\"#4-执行文件和脚本\" class=\"headerlink\" title=\"4.执行文件和脚本\"></a>4.执行文件和脚本</h3><p>描述: 我们可以直接在PS命令行中运行文件和脚本，但是必须使用绝对路径或者相对路径，或者要运行的文件必须定义在可受信任的环境变量中。</p>\n<p>PowerShell 中可执行<code>Bat批处理、VB脚本问号、以及PS1脚本文件</code>。</p>\n<p>Tips: 脚本和批处理都属于伪可执行文件，它们只是包含了若干命令行解释器能够解释和执行的命令行代码。</p>\n<p><strong>示例1.在PS中执行ping.bat批处理</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ping.bat</span></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"comment\">#batch File Test#</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> %1%</span><br><span class=\"line\">%1%</span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure><br>演示效果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; ./ping whoami</span><br><span class=\"line\"><span class=\"comment\">#batch File Test#</span></span><br><span class=\"line\">whoami</span><br><span class=\"line\">weiyigeek\\weiyigeek</span><br><span class=\"line\">请按任意键继续. . .</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; ./ping hostname</span><br><span class=\"line\"><span class=\"comment\">#batch File Test#</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\">WeiyiGeek</span><br><span class=\"line\">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210406174815.png\" alt=\"WeiyiGeek.ping\" title=\"\" class=\"\">\n                <p>WeiyiGeek.ping</p>\n            </figure>\n<p>Tips : 在cmd输入ping执行的不是ping命令而是直接运行ping.bat(即.bat覆盖了cmd命令)，而在PS上面运行ping批处理文件必须是以./ping的格式, 所以说命令与脚本的混淆不会发生在powershell中，因为powershell有更安全的机制。</p>\n<p><br/></p>\n<p>示例2.在PS中执行VB脚本文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行 .\\test.vbs 会遍历当前Win32进程，并把每个进程的详细信息通过窗口显示出来。</span></span><br><span class=\"line\"><span class=\"comment\"># test.vbs</span></span><br><span class=\"line\">Set wmi = GetObject(<span class=\"string\">\"winmgmts:\"</span>)</span><br><span class=\"line\">Set collection = wmi.ExecQuery(<span class=\"string\">\"select * from Win32_Process\"</span>)</span><br><span class=\"line\">For Each process <span class=\"keyword\">in</span> collection</span><br><span class=\"line\">WScript.Echo process.getObjectText_</span><br><span class=\"line\">Next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在powershell中执行VB脚本</span></span><br><span class=\"line\">PS C:\\PS&gt; cscript.exe .test.vbs</span><br><span class=\"line\">instance of Win32_Process</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Caption = <span class=\"string\">\"System Idle Process\"</span>;</span><br><span class=\"line\">  CreationClassName = <span class=\"string\">\"Win32_Process\"</span>;</span><br><span class=\"line\">  CSCreationClassName = <span class=\"string\">\"Win32_ComputerSystem\"</span>;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 怎样让VB脚本的通过控制台输出呢？ <code>Wscript //H:CScript</code><br>Tips : 怎样还原VB脚本通过窗口输出呢？<code>WScript //H:WScript</code></p>\n<p><br/></p>\n<p>示例3.在PS中执行ps1脚本文件<br>描述: Powershell拥有自己的脚本扩展名为”.ps1”<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\PS&gt; echo <span class=\"string\">\"dir;Get-PSProvider;help dir\"</span> &gt;test.ps1</span><br><span class=\"line\">PS C:\\PS&gt; <span class=\"built_in\">Get-Content</span> ./test.ps1</span><br><span class=\"line\">dir;<span class=\"built_in\">Get-PSProvider</span>;help dir</span><br><span class=\"line\">PS C:\\PS&gt; ./test.ps1</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-PS-管道介绍\"><a href=\"#0x02-PS-管道介绍\" class=\"headerlink\" title=\"0x02 PS 管道介绍\"></a>0x02 PS 管道介绍</h2><h3 id=\"1-基础概念\"><a href=\"#1-基础概念\" class=\"headerlink\" title=\"1.基础概念\"></a>1.基础概念</h3><p><strong>Q:什么是管道?</strong></p>\n<blockquote>\n<p>答: 管道的行为就像一系列连接的管道段一样,沿着管道移动的项会通过每个管道段;</p>\n</blockquote>\n<p>描述:在 PS 中创建管道请使用管道运算符<code>“|”</code>将命令连接在一起,<code>每个命令的输出都将被用作下一命令的输入</code>,与Linux中Shell使用类似, 但是不同的是<code>它传递的数据不是文本而是对象</code>;</p>\n<p>管道的处理模式:</p>\n<ul>\n<li>1.顺序模式（较慢）：在顺序模式中管道中同一时间只执行一条命令，只有当前一条命令的所有执行完毕，才会把所有结果交付给下一条命令。<ul>\n<li>优缺点:速度慢并且耗内存,因为需要很多次分配空间存储中间结果。</li>\n</ul>\n</li>\n<li>2.流模式（较快）：流模式会立即执行所有命令，同一时间可能在执行多条命令。<ul>\n<li>优缺点: 比较节省内存，可能管道的某个任务还在执行，但是已经有部分结果输出了，减少了中间结果的保存。</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p>Tips : 管道命令也是存在的阻塞，比如在对递归的文件进行排序的时候，需要获取全部文件后才能进行排序; (<code>Dir C: -recurse | Sort-Object</code>)</p>\n<p>Tips : 管道中的每个命令（称为管道元素）将其输出逐项传递到管道中的下一个命令</p>\n<ul>\n<li>1.传统的Cmd管道是基于文本的，但是Powershell是基于对象</li>\n<li>2.管道中传递是对象可以作为下一个cmdlet的参数</li>\n<li>3.它可以减少使用复杂命令的工作量,更轻松地查看命令的工作流程</li>\n<li>4.少了资源消耗并且能够立即开始获取输出提高执行效率</li>\n</ul>\n<p><br></p>\n<p><strong>常用需要使用管道的命令:</strong></p>\n<ul>\n<li>Compare-Object: 比较两组对象。</li>\n<li>ConvertTo-Html: 将 Microsoft .NET Framework 对象转换为可在 Web 浏览器中显示的 HTML。</li>\n<li>Export-Clixml: 创建对象的基于 XML 的表示形式并将其存储在文件中。</li>\n<li>Export-Csv: 将 Microsoft .NET Framework 对象转换为一系列以逗号分隔的、长度可变的 (CSV) 字符串，并将这些字符串保存到</li>\n<li>一个 CSV 文件中。</li>\n<li>ForEach-Object: 针对每一组输入对象执行操作。</li>\n<li>Format-List: 将输出的格式设置为属性列表，其中每个属性均各占一行显示。</li>\n<li>Format-Table: 将输出的格式设置为表。</li>\n<li>Format-Wide: 将对象的格式设置为只能显示每个对象的一个属性的宽表。</li>\n<li>Get-Unique: 从排序列表返回唯一项目。</li>\n<li>Group-Object: 指定的属性包含相同值的组对象。</li>\n<li>Import-Clixml: 导入 CLIXML 文件，并在 Windows PowerShell 中创建相应的对象。</li>\n<li>Measure-Object: 计算对象的数字属性以及字符串对象（如文本文件）中的字符数、单词数和行数。</li>\n<li>more: 对结果分屏显示。</li>\n<li>Out-File: 将输出发送到文件。</li>\n<li>Out-Null: 删除输出，不将其发送到控制台。</li>\n<li>Out-Printer: 将输出发送到打印机。</li>\n<li>Out-String: 将对象作为一列字符串发送到主机。</li>\n<li>Select-Object: 选择一个对象或一组对象的指定属性。它还可以从对象的数组中选择唯一对象，也可以从对象数组的开头或末尾选</li>\n<li>择指定个数的对象。</li>\n<li>Sort-Object: 按属性值对象进行排序。</li>\n<li>Tee-Object: 将命令输出保存在文件或变量中，并将其显示在控制台中。</li>\n<li>Where-Object: 创建控制哪些对象沿着命令管道传递的筛选器。</li>\n</ul>\n<p><br/></p>\n<h3 id=\"2-单行命令\"><a href=\"#2-单行命令\" class=\"headerlink\" title=\"2.单行命令\"></a>2.单行命令</h3><p>描述: PowerShell one 命令是一种连续管道，不一定是一条物理线路上的命令, 但又并非一个物理行上的所有命令都是单行命令。</p>\n<p>Tips : 管道符号是 PowerShell 中允许自然换行处的某个字符，包括逗号 (,) 和方左括号 ([)、大括号 ({) 和圆括号 (()。</p>\n<p>Tips : 其他不太常见的字符包括分号 (;)、等于号 (=) 以及左单引号和双引号（’、”）</p>\n<p>示例1: 即使以下命令位于多个物理行上，它也是 PowerShell 单行命令，因为它是一个连续管道。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1) 系统服务获取与属性查看</span></span><br><span class=\"line\">Get-Service |</span><br><span class=\"line\">  Where-Object CanPauseAndContinue -eq <span class=\"variable\">$true</span> |</span><br><span class=\"line\">    Select-Object -Property *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2) 输出当前目录中的文件并通过管道进行排序</span></span><br><span class=\"line\">ls | sort -Descending Name | Format-Table Name,Mode</span><br></pre></td></tr></table></figure></p>\n<p>示例2.将反引号 (`) 或重音符用作续行符是一个有争议的话题(建议尽量避免这样做)，因为上面和下面示例中所示的命令在 PowerShell 控制台中正常工作。 但如果尝试在 PowerShell ISE 的控制台窗格中运行它们，则会出现错误。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PS (执行OK)</span></span><br><span class=\"line\">Get-Service -Name w32time |</span><br><span class=\"line\">&gt;&gt; Select-Object -Property *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PS ISE : PowerShell ISE 的控制台窗格不会等待命令的其余部分在下一行（如 PowerShell 控制台）中输入。</span></span><br><span class=\"line\">Get-Service -Name w32time |</span><br><span class=\"line\">不允许使用空管道元素。</span><br><span class=\"line\">    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordEx </span><br><span class=\"line\">   ception</span><br><span class=\"line\">    + FullyQualifiedErrorId : EmptyPipeElement</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/1/20210327211525.png\" alt=\"WeiyiGeek.PowerShell与ISE\" title=\"\" class=\"\">\n                <p>WeiyiGeek.PowerShell与ISE</p>\n            </figure>\n<p>解决办法: 要避免 PowerShell ISE 的控制台窗格中出现此问题，请使用 <code>Shift+Enter</code>，而不是只是在继续执行另一行上的命令时按 Enter。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PS ISE</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; Get-Service -Name w32time | </span><br><span class=\"line\">  <span class=\"comment\"># Select-Object -Property *</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Name                : w32time</span></span><br><span class=\"line\">  <span class=\"comment\"># RequiredServices    : &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># CanPauseAndContinue : False</span></span><br><span class=\"line\">  <span class=\"comment\"># CanShutdown         : True</span></span><br><span class=\"line\">  <span class=\"comment\"># CanStop             : True</span></span><br><span class=\"line\">  <span class=\"comment\"># DisplayName         : Windows Time</span></span><br><span class=\"line\">  <span class=\"comment\"># DependentServices   : &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># MachineName         : .</span></span><br><span class=\"line\">  <span class=\"comment\"># ServiceName         : w32time</span></span><br><span class=\"line\">  <span class=\"comment\"># ServicesDependedOn  : &#123;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># ServiceHandle       : </span></span><br><span class=\"line\">  <span class=\"comment\"># Status              : Running</span></span><br><span class=\"line\">  <span class=\"comment\"># ServiceType         : Win32OwnProcess, Win32ShareProcess</span></span><br><span class=\"line\">  <span class=\"comment\"># StartType           : Manual</span></span><br><span class=\"line\">  <span class=\"comment\"># Site                : </span></span><br><span class=\"line\">  <span class=\"comment\"># Container           :</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>示例3.下一个示例不是 PowerShell 单行命令，因为它不是一个连续管道，它是一行上的两个单独命令，用分号(<code>;</code>)分隔。<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$Service</span> = <span class=\"string\">'w32time'</span>; <span class=\"built_in\">Get-Service</span> -Name <span class=\"variable\">$Service</span></span><br><span class=\"line\">  <span class=\"comment\"># Status   Name               DisplayName</span></span><br><span class=\"line\">  <span class=\"comment\"># ------   ----               -----------</span></span><br><span class=\"line\">  <span class=\"comment\"># Running  w32time            Windows Time</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>示例4.格式化管道文本输出<br>描述: PS 可以通过管道将对象结果转换成文本并显示在控制台上。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.事实上Out-Default会首先调用Format-Table，将更多的属性默认隐藏，再调用Out-Host将结果输出在控制台上。</span></span><br><span class=\"line\">ls | Out-Default</span><br><span class=\"line\">ls | Format-Table | Out-Host</span><br><span class=\"line\">ls | Format-Table * -Wrap <span class=\"comment\"># 显示隐藏的对象属性</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-重定向\"><a href=\"#3-重定向\" class=\"headerlink\" title=\"3.重定向\"></a>3.重定向</h3><p>描述: 我们可以通过重定向符将命令输出保存到文件之中 ‘&gt;’ 为覆盖 ’&gt;&gt;’ 追加;</p>\n<p>重定向标识:</p>\n<ul>\n<li>1 &gt; stdio.out</li>\n<li>2 &gt; errorout</li>\n<li>6 &gt; infoout</li>\n</ul>\n<p><br/></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.简单实例</span></span><br><span class=\"line\">PS C:\\PS&gt; <span class=\"string\">\"Powershell Routing\"</span> &gt;.txt</span><br><span class=\"line\">PS C:\\PS&gt; <span class=\"string\">\"Powershell Routing1\"</span> &gt;&gt;.txt</span><br><span class=\"line\">PS C:\\PS&gt; Get-Content .\\.txt</span><br><span class=\"line\">Powershell Routing</span><br><span class=\"line\">Powershell Routing1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.错误输出重定向</span></span><br><span class=\"line\">Get-Command Get-Acl 1&gt; out.txt 2&gt; error.txt 6&gt; info.txt</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"4-ETS与管道\"><a href=\"#4-ETS与管道\" class=\"headerlink\" title=\"4.ETS与管道\"></a>4.ETS与管道</h3><p>描述: 扩展类型系统<code>Extended Type System (ETS)</code>，ETS会对管道中对象转换成<code>文本的机制</code>进行宏观调控。</p>\n<p><strong>ETS由两部分组成：</strong></p>\n<ul>\n<li>一部分控制对象的版式: 需要创建一个.ps1xml的配置文件</li>\n<li>一部分控制对象的属性: 在管道中将对象结果转换成文本后，不能再将文本转换成对象，因为ETS不能处理文本。</li>\n</ul>\n<p>Tip : ETS配置中包含的类型对象会以最佳的方式转换成文本，我们可以ETS配置中包含的类型对象会以最佳的方式转换成文本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.首先确定命令返回结果的对象类型</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$object</span> = Get-WmiObject Win32_Processor | Select-Object -first 1</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$object</span>.GetType().FullName</span><br><span class=\"line\">System.Management.ManagementObject <span class=\"comment\">#发现目标类型为：System.Management.ManagementObject</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.其次创建一个配置文件：Win32_Processor.format.ps1xml</span></span><br><span class=\"line\">System.Management.ManagementObject</span><br><span class=\"line\">&lt;label&gt;Name&lt;/label&gt;</span><br><span class=\"line\">&lt;label&gt;Description&lt;/label&gt;</span><br><span class=\"line\">&lt;label&gt;ID&lt;/label&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">PS &gt; Update-FormatData .Win32_Processor.format.ps1xml <span class=\"comment\">#加载进ETS</span></span><br><span class=\"line\">PS &gt; Get-WmiObject win32_processor</span><br><span class=\"line\"><span class=\"comment\"># Name         Description                    ID</span></span><br><span class=\"line\"><span class=\"comment\"># ----         -----------                    --</span></span><br><span class=\"line\"><span class=\"comment\"># CPU0         x64 Family 6 Model 15 Stepp... BFEBFBFF000006FD</span></span><br></pre></td></tr></table></figure></p>\n<p>补充: 这样的定义可能有个缺点，当我们获取其它WMI对象时，也会根据我们定义的规则显示。</p>\n<p><br/></p>\n<p><strong>基础实例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.键入以下内容看到可读形式的完整列表,通过管道符号传递给其他cmdlet并进行使用</span></span><br><span class=\"line\">Get-Command -Noun Variable | Format-Table -Property Name,Definition -AutoSize -Wrap</span><br><span class=\"line\"><span class=\"comment\"># Clear-Variable [-Name] &lt;string[]&gt; [-Include &lt;string[]&gt;] [-Exclude &lt;string[]&gt;] [-Force] [-PassThru] [-Scope &lt;string&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.例如如果使用 Out-Host 来强制逐页显示来自于另一个命令的输出(看起是传递的文本)</span></span><br><span class=\"line\">Get-ChildItem -Path F:  | Out-Host -Paging</span><br><span class=\"line\">Get-ChildItem F: |  Out-Host -Paging</span><br><span class=\"line\">&lt;SPACE&gt; next page; &lt;CR&gt; next line; Q quit</span><br><span class=\"line\"><span class=\"comment\"># 目录: F:\\</span></span><br><span class=\"line\"><span class=\"comment\"># Mode                LastWriteTime         Length Name</span></span><br><span class=\"line\"><span class=\"comment\"># ----                -------------         ------ ----</span></span><br><span class=\"line\"><span class=\"comment\"># d-----        2019/7/11     12:29                BadUSB-code</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.如果运行 Get-Location，而当前位置是 C 驱动器的根路径</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; gl</span><br><span class=\"line\">  <span class=\"comment\"># Path   #文本输出是信息摘要，而非 Get-Location 返回的对象的完整表示形式</span></span><br><span class=\"line\">  <span class=\"comment\"># ----              </span></span><br><span class=\"line\">  <span class=\"comment\"># C:\\Users\\WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\">#输出中的标题通过格式化屏幕显示数据的过程添加，可以获取有关 Get-Location 返回的对象信息。</span></span><br><span class=\"line\">Get-Location | Get-Member -MemberType Property</span><br><span class=\"line\">Get-Location | Get-Member -Name Path</span><br><span class=\"line\">  <span class=\"comment\"># TypeName: System.Management.Automation.PathInfo</span></span><br><span class=\"line\">  <span class=\"comment\"># Name         MemberType Definition</span></span><br><span class=\"line\">  <span class=\"comment\"># ----         ---------- ----------</span></span><br><span class=\"line\">  <span class=\"comment\"># Equals       Method     bool Equals(System.Object obj)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.如果要执行一些大型查询，可查询一次并将结果存储在变量中以后便使用变量的内容，而无需重复使用一些开销较高的查询。property - 英 [ˈprɒpəti]</span></span><br><span class=\"line\"><span class=\"variable\">$TimeService</span> = Get-Service -Name W32Time</span><br><span class=\"line\"><span class=\"variable\">$TimeService</span> | Select-Object -Property Name,Status,ServiceType</span><br><span class=\"line\">  <span class=\"comment\"># Name     Status                        ServiceType</span></span><br><span class=\"line\">  <span class=\"comment\"># ----     ------                        -----------</span></span><br><span class=\"line\">  <span class=\"comment\"># W32Time Running Win32OwnProcess, Win32ShareProcess</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.通过管道停止服务和查看哪些参数接收管道符</span></span><br><span class=\"line\"><span class=\"comment\"># Stop-Service 的 InputObject 参数通过管道按值（按类型）接受 ServiceController 对象 。</span></span><br><span class=\"line\">Get-Service -Name w32time | Stop-Service</span><br><span class=\"line\"><span class=\"comment\"># 通过管道将 w32time 传递到 Get-Member，以确认它是一个字符串。</span></span><br><span class=\"line\"><span class=\"string\">'w32time'</span> | Get-Member</span><br><span class=\"line\">  <span class=\"comment\"># TypeName: System.String</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.在 PowerShell 中，应始终使用单引号而不是双引号，除非带引号的字符串的内容包含需要扩展为其实际值的变量。通过使用单引号，PowerShell 不必分析引号中包含的内容，因此可稍微加快代码运行速度。</span></span><br><span class=\"line\"><span class=\"string\">'w32time'</span> | Get-Service</span><br><span class=\"line\">  <span class=\"comment\"># Status   Name               DisplayName</span></span><br><span class=\"line\">  <span class=\"comment\"># ------   ----               -----------</span></span><br><span class=\"line\">  <span class=\"comment\"># Running  w32time            Windows Time</span></span><br><span class=\"line\"><span class=\"comment\"># 通过管道将 w32time 传递到 Stop-Service，以进行测试</span></span><br><span class=\"line\"><span class=\"string\">'w32time'</span> | Stop-Service</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.按 Stop-Service 的 Name 参数的属性名称创建自定义对象，以测试管道输入。</span></span><br><span class=\"line\"><span class=\"variable\">$CustomObject</span> = [pscustomobject]@&#123;</span><br><span class=\"line\"> Name = <span class=\"string\">'w32time'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># CustomObject 变量的内容是 PSCustomObject 对象类型，并且它包含名为 Name 的属性 。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果要在 $CustomObject 变量两边使用引号，则需要使用双引号。 否则，如果使用单引号，则会将文本字符串 $CustomObject 通过管道传递到 Get-Member，而不是传递变量包含的值。</span></span><br><span class=\"line\"><span class=\"variable\">$CustomObject</span> | Get-Member</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 尽管将 $CustomObject 的内容通过管道传递到 Stop-Service cmdlet 会将该内容绑定到 Name 参数，但这次它会按属性名称绑定，而不是按值，因为 $CustomObject 的内容是一个具有名为 Name 的属性的对象 。</span></span><br><span class=\"line\"><span class=\"comment\"># 尝试通过管道将 $CustomObject 传递到 Stop-Service 时会产生错误，因为它不会生成 ServiceController 或 String 对象，并且没有名为 Name 的属性 。</span></span><br><span class=\"line\"><span class=\"variable\">$CustomObject</span> | Stop-Service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果一个命令的输出与另一个命令的管道输入选项不相符，则可以使用 Select-Object 重命名属性，以便正确地配置属性。</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 Select-Object 将 Service 属性重命名为名为 Name 的属性 。</span></span><br><span class=\"line\"><span class=\"variable\">$CustomObject</span> |</span><br><span class=\"line\">  Select-Object -Property @&#123;name=<span class=\"string\">'Name'</span>;expression=&#123;<span class=\"variable\">$_</span>.Service&#125;&#125; |</span><br><span class=\"line\">    Stop-Service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.用一个命令的输出作为另一个命令的输入。 </span></span><br><span class=\"line\"><span class=\"comment\"># 首先将几个 Windows 服务的显示名称保存到一个文本文件中。</span></span><br><span class=\"line\"><span class=\"string\">'Background Intelligent Transfer Service'</span>, <span class=\"string\">'Windows Time'</span> | Out-File -FilePath <span class=\"variable\">$env</span>:TEMP\\services.txt</span><br><span class=\"line\"><span class=\"comment\"># 可以运行命令，在括号中提供所需输出，作为需要输入的命令的参数值。</span></span><br><span class=\"line\">Stop-Service -DisplayName (Get-Content -Path <span class=\"variable\">$env</span>:TEMP\\services.txt)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8.使用 PowerShellGet 模块中包含的 Find-Module cmdlet，在 PowerShell 库中查找名为 MrToolkit 的模块。并进行安装</span></span><br><span class=\"line\">Find-Module -Name MrToolkit | Install-Module</span><br></pre></td></tr></table></figure></p>\n<p><strong>备注:</strong></p>\n<ul>\n<li>1.分页还会降低 CPU 利用率，因为准备好显示完整页面时，会转为处理 Out-Host 管道中位于前面的 cmdlet 暂停执行，直到输出的下一页可用。</li>\n<li>2.并非所有的PS主机都支持 Paging 参数 例如当你尝试在 PowerShell ISE 中使用 Paging 参数时，会看到以下错误：</li>\n<li>3.查找管道输入的简单方法安装MrToolkit 模块包含一个名为 Get-MrPipelineInput 的函数;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此 cmdlet 可用于轻松确定接受管道输入的命令参数、接受的对象类型，以及是按值还是按属性名称接受管道输入 。</span></span><br><span class=\"line\">Find-Module -Name MrToolkit | Install-Module</span><br><span class=\"line\">Get-MrPipelineInput -Name Stop-Service</span><br><span class=\"line\">  <span class=\"comment\"># ParameterName ParameterType                             ValueFromPipeline ValueFromPipelineByPropertyName</span></span><br><span class=\"line\">  <span class=\"comment\"># ------------- -------------                             ----------------- ---------------</span></span><br><span class=\"line\">  <span class=\"comment\"># InputObject   System.ServiceProcess.ServiceController[]              True           False</span></span><br><span class=\"line\">  <span class=\"comment\"># Name          System.String[]                                        True            True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x03-PS-变量\"><a href=\"#0x03-PS-变量\" class=\"headerlink\" title=\"0x03 PS 变量\"></a>0x03 PS 变量</h2><p>描述:变量Variable在任何一门脚本语言或者说是编程语言中都是存在的,其本质是不相上下的;</p>\n<ul>\n<li>PS可以创建称为”变量”的命名对象，变量名称可以包含<code>下划线字符</code>和<code>任何字母数字字符</code>，且变量名大小写不敏感（$a和$A 是同一个变量)</li>\n<li>使用变量名称后跟的<code>$</code>字符调用指定变量(与世界上最好的语言相似-你懂的),或者采用${变量名}进行赋值调用，还可以将某些特殊的字符作为变量但是在实际开发中不推荐; </li>\n<li>赋值操作符不仅能给一个变量赋值，还可以同时给多个变量赋相同的值，交换变量的值PS只需要两步</li>\n<li>变量可以自动存储任何Powershell能够识别的类型信息</li>\n<li>采用`或者’’包含变量的都不能进行解析调用变量，只会原样进行输出；</li>\n<li>变量会在PS退出或关闭时自动清除</li>\n</ul>\n<p><strong>PS变量类型</strong>:</p>\n<ul>\n<li>自定义变量</li>\n<li>自动化变量</li>\n<li>环境变量: env:</li>\n<li>驱动器变量: varaible:</li>\n</ul>\n<p><br></p>\n<h3 id=\"1-自定义变量\"><a href=\"#1-自定义变量\" class=\"headerlink\" title=\"1.自定义变量\"></a>1.自定义变量</h3><p><strong>创建变量</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.创建不同类型的变量(int/String/Boolen/float)</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$var</span>=1;<span class=\"variable\">$var</span>;<span class=\"variable\">$var</span>=<span class=\"string\">\"String\"</span>;<span class=\"variable\">$var</span>;<span class=\"variable\">$var</span>=<span class=\"string\">'TRUE'</span>;<span class=\"variable\">$var</span>;<span class=\"variable\">$var</span>=3.14159267;<span class=\"variable\">$var</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"comment\"># String</span></span><br><span class=\"line\"><span class=\"comment\"># TRUE</span></span><br><span class=\"line\"><span class=\"comment\"># 3.14159267</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.将当前位置存储在变量 $loc 中</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$loc</span> = Get-Location</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$loc</span>  <span class=\"comment\">#键入 $loc 将显示当前位置：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.防止变量名与其他字符串混淆使用$&#123;&#125;</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$var</span>=<span class=\"string\">\" variable\"</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$var</span></span><br><span class=\"line\"> variable</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$&#123;var&#125;</span></span><br><span class=\"line\"> variable</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.某些特殊的字符在PS中有特殊的用途，一般不推荐使用这些字符作为变量名。</span></span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$&#123;\"I\"like $&#125;</span>=<span class=\"string\">\"mossfly\"</span>  <span class=\"comment\">#请把整个变量名后缀用花括号括起来</span></span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$&#123;\"I\"like $&#125;</span></span><br><span class=\"line\">mossfly</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.PS给多个变量同时赋值</span></span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$a</span>=<span class=\"variable\">$b</span>=<span class=\"variable\">$c</span>=123</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.交换两个变量的值</span></span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$value1</span>=10</span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$value2</span>=20</span><br><span class=\"line\">PS C:\\&gt; <span class=\"variable\">$value1</span>,<span class=\"variable\">$value2</span>=<span class=\"variable\">$value2</span>,<span class=\"variable\">$value1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.采用cmdlet声明变量</span></span><br><span class=\"line\">New-Variable number -Value 100 -Force -Option <span class=\"built_in\">readonly</span> <span class=\"comment\">#变量写保护</span></span><br><span class=\"line\">New-Variable NUMBER -Value 100 -Force -Option constant -Description <span class=\"string\">\"This is my name\"</span>  <span class=\"comment\">#声明常量并且进行描述</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.变量不解析</span></span><br><span class=\"line\">PS C:\\&gt; Write-Host the <span class=\"string\">'$HOME'</span> is <span class=\"variable\">$home</span></span><br><span class=\"line\">PS C:\\&gt; Write-Host the `<span class=\"variable\">$HOME</span> is <span class=\"variable\">$home</span></span><br><span class=\"line\">the <span class=\"variable\">$HOME</span> is C:\\Users\\WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>操作变量</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.显示使用驱动器变量和环境变量：</span></span><br><span class=\"line\">Get-ChildItem variable: <span class=\"comment\">#PS将变量的相关信息的记录存放在名为variable:的驱动中</span></span><br><span class=\"line\">Get-ChildItem variable:value* <span class=\"comment\">#查找变量</span></span><br><span class=\"line\">Get-ChildItem env:   <span class=\"comment\">#使用任何 Windows 进程可用的相同环境变量，其中包括 cmd.exe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.用 env: 驱动器前缀访问环境变量,由于用 env: 驱动器前缀访问环境变量</span></span><br><span class=\"line\"><span class=\"comment\">#例如，cmd.exe 中的 %SystemRoot% 变量包含操作系统的根目录名称</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$env</span>:SystemRoot</span><br><span class=\"line\">C:\\Windows</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$env</span>:JAVA_HOME</span><br><span class=\"line\">Programs\\java\\jdk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.示例创建一个新的环境变量</span></span><br><span class=\"line\"><span class=\"variable\">$env</span>:LIB_PATH=<span class=\"string\">'/usr/local/lib'</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$env</span>:WEIYIGEEK=<span class=\"variable\">$env</span>:PATH</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$env</span>:WEIYIGEEK</span><br><span class=\"line\"><span class=\"comment\"># C:\\Python27\\;C:\\Python27\\Scripts;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.示例或者改变更新变量PS中是 + 作为评卷符号</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$env</span>:WEIYIGEEK=<span class=\"variable\">$env</span>:PATH + <span class=\"string\">\";c:\\\"</span></span><br><span class=\"line\"><span class=\"string\">PS &gt; <span class=\"variable\">$env</span>:WEIYIGEEK</span></span><br><span class=\"line\"><span class=\"string\"># C:\\Python27\\;C:\\Python27\\Scripts;c:\\\\</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 5.验证一个变量是否存在，仍然可以象验证文件系统那样</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\&gt; -Path variable:value1</span></span><br><span class=\"line\"><span class=\"string\">True</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\&gt; -Path variable:valueUnkonw</span></span><br><span class=\"line\"><span class=\"string\">False</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 6.删除变量</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\&gt; -Path variable:value1</span></span><br><span class=\"line\"><span class=\"string\">True</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\&gt; Remove-Item variable:value1 -Force  # 强制删除  del -&gt; Remove-Item</span></span><br><span class=\"line\"><span class=\"string\">PS C:\\&gt; -Path variable:value1</span></span><br><span class=\"line\"><span class=\"string\">False</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20191116193627.png\" alt=\"WeiyiGeek.环境变量获取显示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.环境变量获取显示</p>\n            </figure>\n<p><br></p>\n<h3 id=\"2-自动化变量\"><a href=\"#2-自动化变量\" class=\"headerlink\" title=\"2.自动化变量\"></a>2.自动化变量</h3><p>描述:一旦打开Powershell就会自动加载的变量,并且某些<code>自动化变量只读不能写</code>，一般存放的内容包括：</p>\n<ul>\n<li>用户信息：例如用户的根目录$home</li>\n<li>配置信息:例如powershell控制台的大小，颜色，背景等。</li>\n<li>运行时信息：例如一个函数由谁调用，一个脚本运行的目录等。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; <span class=\"variable\">$HOME</span></span><br><span class=\"line\">C:\\Users\\</span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$currentProcessID</span>=<span class=\"variable\">$pid</span>;<span class=\"variable\">$currentProcessID</span></span><br><span class=\"line\">5356</span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; Get-Process -Id <span class=\"variable\">$pid</span></span><br><span class=\"line\"><span class=\"comment\"># Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</span></span><br><span class=\"line\"><span class=\"comment\"># -------  ------    -----      ----- -----   ------     -- -----------</span></span><br><span class=\"line\"><span class=\"comment\">#     390      10    30604      33100   172     1.11   5356 powershell</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$PROFILE</span></span><br><span class=\"line\">C:\\Users\\\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</span><br></pre></td></tr></table></figure>\n<p>详细说明-自动变量的列表:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$ : 包含会话所收到的最后一行中的最后一个令牌。</span><br><span class=\"line\"></span><br><span class=\"line\">$? : 包含最后一个操作的执行状态。如果最后一个操作成功，则包含 TRUE，失败则包含 FALSE。</span><br><span class=\"line\"></span><br><span class=\"line\">$^ : 包含会话所收到的最后一行中的第一个令牌。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$_</span> : 包含管道对象中的当前对象。在对管道中的每个对象或所选对象执行操作的命令中，可以使用此变量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Args</span> : 包含由未声明参数和/或传递给函数、脚本或脚本块的参数值组成的数组。</span><br><span class=\"line\">在创建函数时可以声明参数，方法是使用 param 关键字或在函数名称后添加以圆括号括起、逗号</span><br><span class=\"line\">分隔的参数列表。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ConsoleFileName</span> : 包含在会话中最近使用的控制台文件 (.psc1) 的路径。在通过 PSConsoleFile 参数启动</span><br><span class=\"line\">Windows PowerShell 或使用 Export-Console cmdlet 将管理单元名称导出到控制台文件</span><br><span class=\"line\">时，将填充此变量。</span><br><span class=\"line\">在使用不带参数的 Export-Console cmdlet 时，它自动更新在会话中最近使用的控制台文件。</span><br><span class=\"line\">可以使用此自动变量确定要更新的文件。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Error</span> : 包含错误对象的数组，这些对象表示最近的一些错误。最近的错误是该数组中的第一个错误对象</span><br><span class=\"line\">(<span class=\"variable\">$Error</span>[0])。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Event</span> :包含一个 PSEventArgs 对象，该对象表示一个正在被处理的事件。</span><br><span class=\"line\">此变量只在事件注册命令（例如 Register-ObjectEvent）的 Action 块内填充。</span><br><span class=\"line\">此变量的值是 Get-Event cmdlet 返回的同一个对象。</span><br><span class=\"line\">因此，可以在 Action 脚本块中使用 <span class=\"variable\">$Event</span> 变量的属性（例如</span><br><span class=\"line\"><span class=\"variable\">$Event</span>.TimeGenerated）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$EventSubscriber</span> : 包含一个 PSEventSubscriber 对象，该对象表示正在被处理的事件的事件订阅者。</span><br><span class=\"line\">此变量只在事件注册命令的 Action 块内填充。此变量的值</span><br><span class=\"line\">是 Get-EventSubscriber cmdlet 返回的同一个对象。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ExecutionContext</span> : 包含一个 EngineIntrinsics 对象，该对象表示 Windows PowerShell 主机的执行上下文。</span><br><span class=\"line\">可以使用此变量来查找可用于 cmdlet 的执行对象。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$False</span> : 包含 FALSE。可以使用此变量在命令和脚本中表示 FALSE，而不是使用字符串”<span class=\"literal\">false</span>”。如果</span><br><span class=\"line\">该字符串转换为非空字符串或非零整数，则可将该字符串解释为 TRUE。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ForEach</span> : 包含 ForEach-Object 循环的枚举数。可以对 <span class=\"variable\">$ForEach</span> 变量的值使用枚举数的属性和方法。</span><br><span class=\"line\">此变量仅在运行 For 循环时存在，循环完成即会删除。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Home</span> : 包含用户的主目录的完整路径。此变量等效于 %homedrive%%homepath% 环境变量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Host</span> : 包含一个对象，该对象表示 Windows PowerShell 的当前主机应用程序。可以使用此变量在命</span><br><span class=\"line\">令中表示当前主机，或者显示或更改主机的属性，如 <span class=\"variable\">$Host</span>.version、<span class=\"variable\">$Host</span>.CurrentCulture</span><br><span class=\"line\">或 <span class=\"variable\">$host</span>.ui.rawui.setbackgroundcolor(“Red”)。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Input</span> : 一个枚举数，它包含传递给函数的输入。<span class=\"variable\">$Input</span> 变量区分大小写，只能用于函数和脚本块。（脚本块本质上是未命名的函数。）在函数的 Process 块中，<span class=\"variable\">$Input</span> 变量包含当前位于管道中的对象。在 Process 块完成后，<span class=\"variable\">$Input</span> 的值为 NULL。如果函数没有 Process 块，则 <span class=\"variable\">$Input</span>的值可用于 End 块，它包含函数的所有输入。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$LastExitCode</span> : 包含运行的最后一个基于 Windows 的程序的退出代码。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Matches</span> : <span class=\"variable\">$Matches</span> 变量与 -match 和 -not match 运算符一起使用。</span><br><span class=\"line\">将标量输入提交给 -match 或 -notmatch 运算符时，如果检测到匹配，则会返回一个布尔值，并使用由所有匹配字符串值组成的哈希表填充 <span class=\"variable\">$Matches</span> 自动变量。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$MyInvocation</span> : 包含一个对象，该对象具有有关当前命令（如脚本、函数或脚本块）的信息。可以使用该对象中的信息（如脚本的路径和文件名 (<span class=\"variable\">$myinvocation</span>.mycommand.path) 或函数的名称</span><br><span class=\"line\">(<span class=\"variable\">$myinvocation</span>.mycommand.name)）来标识当前命令。对于查找正在运行的脚本的名称，这非常有用。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$NestedPromptLevel</span> : 包含当前提示级别。值 0 指示原始提示级别。该值在进入嵌套级别时递增，在退出嵌套级别时递减。</span><br><span class=\"line\">例如，在使用 <span class=\"variable\">$Host</span>.EnterNestedPrompt 方法时，Windows PowerShell 会出现嵌套命令提示符。在 Windows PowerShell 调试程序中到达断点时，Windows PowerShell 也会出现嵌套命令提示符。在进入嵌套提示时，Windows PowerShell 暂停当前命令，保存执行上下文，并递增</span><br><span class=\"line\"><span class=\"variable\">$NestedPromptLevel</span> 变量的值。要创建更多嵌套命令提示符（最多 128 级）或返回到原始命令提示符，请完成命令，或键入”<span class=\"built_in\">exit</span>”。</span><br><span class=\"line\"><span class=\"variable\">$NestedPromptLevel</span> 变量有助于跟踪提示级别。可以创建包含此值的备用 WindowsPowerShell 命令提示符，以使此值始终可见。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$NULL</span>: 包含 NULL 或空值。可以在命令和脚本中使用此变量表示 NULL，而不是使用字符串”NULL”。</span><br><span class=\"line\">如果该字符串转换为非空字符串或非零整数，则可将该字符串解释为 TRUE。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PID</span> : 包含承载当前 Windows PowerShell 会话的进程的进程标识符 (PID)。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Profile</span> : 包含当前用户和当前主机应用程序的 Windows PowerShell 配置文件的完整路径。可以在命令</span><br><span class=\"line\">中使用此变量表示配置文件。例如，可以在命令中使用此变量确定是否已创建某个配置文件：</span><br><span class=\"line\">也可以在命令中使用此变量创建配置文件： new-item -<span class=\"built_in\">type</span> file -path <span class=\"variable\">$pshome</span> -force 此外，还可以在命令中使用此变量在记事本中打开配置文件：</span><br><span class=\"line\">notepad <span class=\"variable\">$profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PSBoundParameters</span></span><br><span class=\"line\">包含活动参数及其当前值的字典。只有在声明参数的作用域（如脚本或函数）中，</span><br><span class=\"line\">此变量才有值。可以使用此变量显示或更改参数的当前值，也可以将参数值传递给</span><br><span class=\"line\">其他脚本或函数。</span><br><span class=\"line\"></span><br><span class=\"line\">基础示例:</span><br><span class=\"line\"><span class=\"keyword\">function</span>  &#123;</span><br><span class=\"line\">  param(<span class=\"variable\">$a</span>, <span class=\"variable\">$b</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Display the parameters in dictionary format.</span></span><br><span class=\"line\">  <span class=\"variable\">$psboundparameters</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Call the 1 function with $a and $b.</span></span><br><span class=\"line\">  1 @psboundparameters</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PsCmdlet</span> : 包含一个对象，该对象表示正在运行的 cmdlet 或高级函数。</span><br><span class=\"line\">可以在 cmdlet 或函数代码中使用该对象的属性和方法来响应使用的条件。例如，ParameterSetName 属性包含正在使用的参数集的名称，而 ShouldProcess 方法将 WhatIf和 Confirm 参数动态添加到 cmdlet。</span><br><span class=\"line\">有关 <span class=\"variable\">$PSCmdlet</span> 自动变量的详细信息，请参阅 about_Functions_Advanced。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PsCulture</span> ： 包含操作系统中当前所用的区域性的名称。区域性确定数字、货币和日期等项的显示格式。这是系统的System.Globalization.CultureInfo.CurrentCulture.Name 属性的值。要获取系统的 System.Globalization.CultureInfo 对象，请使用 Get-Culture cmdlet。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PSDebugContext</span> ： 在调试期间，此变量包含有关调试环境的信息</span><br><span class=\"line\">在其他时间，此变量包含 NULL 值。因此，可以使用此变量指示调试程序是否拥有控制权。填充之后，此变量包含一个具有 Breakpoints 和InvocationInfo 属性的 PsDebugContext 对象。InvocationInfo 属性有多个十分有用的属性，包括 Location 属性。Location 属性指示正在调试的脚本的路径。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PsHome</span></span><br><span class=\"line\">包含 Windows PowerShell 的安装目录的完整路径（通常为%windir%System32WindowsPowerShellv1.0）。可以在 Windows PowerShell 文件的路径中使用此变量。例如，下面的命令在概念性帮助主题中搜索”variable”一词：</span><br><span class=\"line\">select-string -pattern variable -path <span class=\"variable\">$pshome</span>*.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PSScriptRoot</span> ：包含要从中执行脚本模块的目录。通过此变量，脚本可以使用模块路径来访问其他资源。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PsUICulture</span></span><br><span class=\"line\">包含操作系统中当前所用的用户界面 (UI) 区域性的名称。UI 区域性确定哪些文本字符串用于用户</span><br><span class=\"line\">界面元素（如菜单和消息）。这是系统的</span><br><span class=\"line\">System.Globalization.CultureInfo.CurrentUICulture.Name 属性的值。要获取系统</span><br><span class=\"line\">的 System.Globalization.CultureInfo 对象，请使用 Get-UICulture cmdlet。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$PsVersionTable</span></span><br><span class=\"line\">包含一个只读哈希表，该哈希表显示有关在当前会话中运行的 Windows PowerShell 版本的详</span><br><span class=\"line\">细信息。</span><br><span class=\"line\">该表包括下列项：</span><br><span class=\"line\">* CLRVersion： 公共语言运行时 (CLR) 的版本</span><br><span class=\"line\">* BuildVersion： 当前版本的内部版本号</span><br><span class=\"line\">* PSVersion： Windows PowerShell 版本号</span><br><span class=\"line\">* WSManStackVersion： WS-Management 堆栈的版本号</span><br><span class=\"line\">* PSCompatibleVersions： 与当前版本兼容的 Windows PowerShell 版本</span><br><span class=\"line\">* SerializationVersion ：序列化方法的版本</span><br><span class=\"line\">* PSRemotingProtocolVersion：Windows PowerShell 远程管理协议的版本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Pwd</span> : 包含一个路径对象，该对象表示当前目录的完整路径。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$Sender</span> : 包含生成此事件的对象。此变量只在事件注册命令的 Action 块内填充。</span><br><span class=\"line\">此变量的值也可在 Get-Event 返回的 PSEventArgs</span><br><span class=\"line\">(System.Management.Automation.PSEventArgs) 对象的 Sender 属性中找到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ShellID</span> : 包含当前 shell 的标识符。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SourceArgs</span> : 包含表示正在被处理的事件的事件参数的对象。此变量只在事件注册命令的 Action</span><br><span class=\"line\">块内填充。此变量的值也可在 Get-Event 返回的 PSEventArgs</span><br><span class=\"line\">(System.Management.Automation.PSEventArgs) 对象的 SourceArgs 属性中找到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$SourceEventArgs</span> : 包含一个对象，该对象表示从正在被处理的事件的 EventArgs 中派生出的</span><br><span class=\"line\">第一个事件参数。此变量只在事件注册命令的 Action 块内填充。</span><br><span class=\"line\">此变量的值也可在 Get-Event 返回的 PSEventArgs</span><br><span class=\"line\">(System.Management.Automation.PSEventArgs) 对象的 SourceArgs 属性中找到。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$This</span> : 在定义脚本属性或脚本方法的脚本块中，<span class=\"variable\">$This</span> 变量引用要扩展的对象。</span><br><span class=\"line\"><span class=\"variable\">$True</span> : 包含 TRUE。可以在命令和脚本中使用此变量表示 TRUE。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-内置变量\"><a href=\"#3-内置变量\" class=\"headerlink\" title=\"3.内置变量\"></a>3.内置变量</h3><p>描述: 内置变量包括了PS中的默认的环境变量、以及命令行控制显示变量、以及函数参数的变量。</p>\n<ul>\n<li>1) 环境变量: 存在于操作系统之中但是如果环境变量被更新了其它程序也可以更新调用它。</li>\n</ul>\n<p><strong>内置变量一览表</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.环境变量</span></span><br><span class=\"line\"><span class=\"variable\">$env</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.消息控制变量</span></span><br><span class=\"line\"><span class=\"variable\">$DebugPreference</span>        <span class=\"comment\">#显示Debug输出: 可选值 [Continue | SilentlyContinue]</span></span><br><span class=\"line\"><span class=\"variable\">$ErrorActionPreference</span>  <span class=\"comment\">#显示Error输出: 可选值 [Continue | SilentlyContinue]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.函数及参数变量</span></span><br><span class=\"line\"><span class=\"variable\">$global</span></span><br><span class=\"line\"><span class=\"variable\">$local</span></span><br><span class=\"line\"><span class=\"variable\">$function</span></span><br><span class=\"line\"><span class=\"variable\">$input</span>   <span class=\"comment\"># 管道数据中转变量</span></span><br><span class=\"line\"><span class=\"variable\">$arg</span>     <span class=\"comment\"># 万能参数变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.其它变量</span></span><br><span class=\"line\"><span class=\"variable\">$Host</span>  <span class=\"comment\"># 例如$host.UI.Rawui</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>基础实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.读取特殊的环境变量</span></span><br><span class=\"line\">PS&gt; ls <span class=\"variable\">$env</span>:</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$env</span>:windir</span><br><span class=\"line\">C:\\Windows</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$env</span>:ProgramFiles</span><br><span class=\"line\">C:\\Program Files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.为了和其它变量保持一致，你可以把它插入到文本中。</span></span><br><span class=\"line\">PS&gt; <span class=\"string\">\"My computer name <span class=\"variable\">$env</span>:COMPUTERNAME\"</span></span><br><span class=\"line\">My computer name MYHome--01</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.创建新的环境变量</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$env</span>:Var1=<span class=\"string\">\"This is my environment variable\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$env</span>:Var2=<span class=\"string\">\"Hollow, environment variable\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$env</span>:Path+=<span class=\"string\">\";C:\\\\python\\\\\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.环境变量更新生效</span></span><br><span class=\"line\"><span class=\"comment\"># .NET方法[environment]::SetEnvironmentvariable操作可以立刻生效。</span></span><br><span class=\"line\">PS&gt; [environment]::SetEnvironmentvariable(<span class=\"string\">\"Path\"</span>, <span class=\"string\">\";c:\\WeiyiGeek\"</span>, <span class=\"string\">\"User\"</span>)</span><br><span class=\"line\">PS&gt; [environment]::GetEnvironmentvariable(<span class=\"string\">\"Path\"</span>, <span class=\"string\">\"User\"</span>)</span><br><span class=\"line\">;c:\\WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><strong>备注:</strong></p>\n<ul>\n<li>尽管没有要求，但环境变量名称通常使用全部大写字母。</li>\n</ul>\n<p><br></p>\n<h3 id=\"4-驱动器变量\"><a href=\"#4-驱动器变量\" class=\"headerlink\" title=\"4.驱动器变量\"></a>4.驱动器变量</h3><p>描述:PS中所有不是我们自己的定义的变量都属于驱动器变量（比如环境变量），它的前缀只是提供给我们一个可以访问信息的虚拟驱动器.。</p>\n<p>基础实例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#0.查看你PS支持的驱动器</span><br><span class=\"line\">PS &gt; Get-PSDrive</span><br><span class=\"line\"># Name           Used (GB)     Free (GB) Provider      Root     CurrentLocation</span><br><span class=\"line\"># ----           ---------     --------- --------      ----     --------------- </span><br><span class=\"line\"># C                  58.24         91.76 FileSystem    C:\\      Users\\WeiyiGeek</span><br><span class=\"line\"># Cert                                   Certificate   \\</span><br><span class=\"line\"># D                  11.76        249.24 FileSystem    D:\\</span><br><span class=\"line\"># E                  19.07        240.93 FileSystem    E:\\</span><br><span class=\"line\"># Env                                    Environment</span><br><span class=\"line\"># F                  88.83        171.46 FileSystem    F:\\</span><br><span class=\"line\"># Function                               Function</span><br><span class=\"line\"># G                                      FileSystem    G:\\</span><br><span class=\"line\"># HKCU                                   Registry      HKEY_CURRENT_USER</span><br><span class=\"line\"># HKLM                                   Registry      HKEY_LOCAL_MACHINE</span><br><span class=\"line\"># I                                      FileSystem    I:\\</span><br><span class=\"line\"># Variable                               Variable</span><br><span class=\"line\"># WSMan                                  WSMan</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#1.$后花括号中的路径必须是具体的路径，而不能带返回值。</span><br><span class=\"line\">PS&gt; Invoke-Expression &quot;&#96;$&#123;$env:HOMEDRIVE&#x2F;Powershell&#x2F;ping.bat&#125;&quot;  #反引号&quot;\\&#96;&quot;放在$前，会把$解析成普通字符，解释器会继续去解析第二个$</span><br><span class=\"line\">#参数&#x3D;$&#123;C:&#x2F;Powershell&#x2F;ping.bat&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"5-变量作用域\"><a href=\"#5-变量作用域\" class=\"headerlink\" title=\"5.变量作用域\"></a>5.变量作用域</h3><p>描述: PS所有的变量都有一个决定变量是否可用的作用域,有了作用域就可以限制变量的可见性了，尤其是在函数和脚本中。<br>PS支持四个作用域：<code>全局、当前、私有和脚本</code>。</p>\n<p>设置单个变量的作用域:</p>\n<ul>\n<li><code>$global</code> 全局变量: 在所有的作用域中有效，如果你在脚本或者函数中设置了全局变量，即使脚本和函数都运行结束这个变量也任然有效。</li>\n<li><code>$script</code> 脚本变量: 只会在脚本内部有效，包括脚本中的函数，一旦脚本运行结束变量就会被回收。</li>\n<li><code>$private</code> 私有变量: 只会在当前作用域有效，不能贯穿到其他作用域。</li>\n<li><code>$local</code> 默认变量: 可以省略修饰符，在当前作用域有效，其它作用域只对它有只读权限。</li>\n</ul>\n<p><br/></p>\n<p>Tips : 利用<code>&quot;.&quot;</code>来更改变量的可见性，加强变量可见性限制的优点<code>清空初始化环境</code>,但如果定义的是一个自读的常量的时候这个是不能操作和删除的;</p>\n<p>Tips : 本地变量会从全局变量继承值，但是本地变量的更改不会影响全局变量，除非显示制定global;</p>\n<p><br/></p>\n<p><strong>基础示例:</strong></p>\n<ul>\n<li><p>1) 变量在交换影响</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在脚本里面的变量不影响交互式环境中的变量</span></span><br><span class=\"line\">PS E:\\WeiyiGeek&gt; <span class=\"variable\">$DemoVar</span>=<span class=\"string\">\"This is a Demo\"</span></span><br><span class=\"line\">PS E:\\WeiyiGeek&gt; .\\Demo1.ps1</span><br><span class=\"line\">  <span class=\"comment\"># D:\\Programs\\java\\jdk</span></span><br><span class=\"line\">PS E:\\WeiyiGeek&gt; <span class=\"variable\">$DemoVar</span></span><br><span class=\"line\">  <span class=\"comment\"># This is a Demo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.点\".\"来运行脚本该符号域Linux中的source命令有异曲同工之妙;</span></span><br><span class=\"line\">PS E:\\WeiyiGeek&gt; . .\\Demo1.ps1</span><br><span class=\"line\">  <span class=\"comment\"># D:\\Programs\\java\\jdk</span></span><br><span class=\"line\">PS E:\\WeiyiGeek&gt; <span class=\"variable\">$DemoVar</span>   <span class=\"comment\"># 脚本中的变量覆盖了$DemoVar变量(关键点)</span></span><br><span class=\"line\">  <span class=\"comment\"># D:\\Programs\\java\\jdk</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2) 单个变量作用域实例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.在当前控制台只存在一个作用域，通过修饰符访问，其实访问的是同一个变量：</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=<span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$private</span>:var</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$script</span>:var</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$global</span>:var</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$local</span>:var=<span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.普通变量与Global修饰符之间的区别(在函数中利用Global修饰符来更改普通变量之中)</span></span><br><span class=\"line\"><span class=\"variable\">$var</span> = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">demo1</span></span>() &#123; <span class=\"built_in\">echo</span> <span class=\"string\">\"Function =&gt; <span class=\"variable\">$($Var)</span>\"</span>;<span class=\"variable\">$Var</span> = <span class=\"string\">\"Function Change\"</span>;<span class=\"built_in\">echo</span> <span class=\"string\">\"-----<span class=\"variable\">$($Var)</span>-----\"</span>&#125;</span><br><span class=\"line\"><span class=\"variable\">$var</span>; demo1; <span class=\"variable\">$var</span></span><br><span class=\"line\">  <span class=\"comment\"># Function =&gt; WeiyiGeek</span></span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">  <span class=\"comment\"># -----Function Change-----</span></span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">demo2</span></span>() &#123; <span class=\"variable\">$Global</span>:Var = <span class=\"string\">\"Function Change <span class=\"variable\">$var</span> 变量\"</span>;<span class=\"variable\">$var</span>&#125;</span><br><span class=\"line\"><span class=\"variable\">$var</span>; demo2; <span class=\"variable\">$var</span></span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">  <span class=\"comment\"># Function Change WeiyiGeek 变量</span></span><br><span class=\"line\">  <span class=\"comment\"># Function Change WeiyiGeek 变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.Private修饰符在控制台中的变量保护起来，不让它在函数和脚本中被访问，但他可以被Global修饰符修改;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fun</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"DemoVar=<span class=\"variable\">$($DemoVar)</span>\"</span>;</span><br><span class=\"line\">  <span class=\"variable\">$global</span>:DemoVar=<span class=\"string\">\"This is Function Inner\"</span>;</span><br><span class=\"line\">  <span class=\"variable\">$DemoVar</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$Private</span>:DemoVar=<span class=\"string\">\"This is private variable\"</span></span><br><span class=\"line\">fun;</span><br><span class=\"line\"><span class=\"variable\">$DemoVar</span></span><br><span class=\"line\">  <span class=\"comment\"># 执行结果 (此处是关键点私有变量在函数中不能获取)</span></span><br><span class=\"line\">  <span class=\"comment\"># DemoVar=   </span></span><br><span class=\"line\">  <span class=\"comment\"># This is Function Inner</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Function Inner</span></span><br><span class=\"line\"><span class=\"variable\">$Global</span>:DemoVar=<span class=\"string\">\"This is global variable\"</span></span><br><span class=\"line\">fun;</span><br><span class=\"line\"><span class=\"variable\">$DemoVar</span></span><br><span class=\"line\"><span class=\"variable\">$Private</span>:DemoVar</span><br><span class=\"line\">  <span class=\"comment\"># 执行结果 (全局变量可被内部全局变量更改)</span></span><br><span class=\"line\">  <span class=\"comment\"># DemoVar=This is global variable</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Function Inner</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Function Inner</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Function Inner</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.Global修饰符中验证对private修饰符的影响</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fun</span></span>() &#123;<span class=\"string\">\"DemoVar=<span class=\"variable\">$DemoVar</span>\"</span>;<span class=\"variable\">$Global</span>:DemoVar=<span class=\"string\">\"This is Global\"</span>;<span class=\"variable\">$DemoVar</span>;&#125;</span><br><span class=\"line\"><span class=\"variable\">$Private</span>:DemoVar=<span class=\"string\">\"this is private\"</span></span><br><span class=\"line\"><span class=\"variable\">$DemoVar</span></span><br><span class=\"line\">fun  <span class=\"comment\">#对后续变量存在影响</span></span><br><span class=\"line\"><span class=\"variable\">$DemoVar</span></span><br><span class=\"line\">  <span class=\"comment\"># 执行结果</span></span><br><span class=\"line\">  <span class=\"comment\"># this is private</span></span><br><span class=\"line\">  <span class=\"comment\"># DemoVar=this is private</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Global</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Global</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.Local修饰符可以通过$global修饰符修饰的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fun</span></span>() &#123;<span class=\"string\">\"DemoVar=<span class=\"variable\">$DemoVar</span>\"</span>;<span class=\"variable\">$Global</span>:DemoVar=<span class=\"string\">\"This is Global\"</span>;<span class=\"variable\">$DemoVar</span>;&#125;</span><br><span class=\"line\"><span class=\"variable\">$Local</span>:DemoVar=<span class=\"string\">\"this is Local\"</span></span><br><span class=\"line\"><span class=\"variable\">$DemoVar</span></span><br><span class=\"line\">fun</span><br><span class=\"line\"><span class=\"variable\">$Local</span>:DemoVar</span><br><span class=\"line\">  <span class=\"comment\"># 执行结果</span></span><br><span class=\"line\">  <span class=\"comment\"># this is Local</span></span><br><span class=\"line\">  <span class=\"comment\"># DemoVar=this is Local</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Global</span></span><br><span class=\"line\">  <span class=\"comment\"># This is Global</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"6-变量类型转换\"><a href=\"#6-变量类型转换\" class=\"headerlink\" title=\"6.变量类型转换\"></a>6.变量类型转换</h3><p>描述: Powershell 默认支持的.NET类型如下：</p>\n<ul>\n<li>[Byte] [sbyte]</li>\n<li>[Char]</li>\n<li>[Bool]</li>\n<li>[Int] [Int16] [Int32] [Int64]</li>\n<li>[uint16] [uint32] [uint64]</li>\n<li>[float]</li>\n<li>[double]</li>\n<li>[array]</li>\n<li>[string]</li>\n<li>[long]</li>\n<li>[Decimal]</li>\n<li>[timespan]</li>\n<li>[DateTime]</li>\n<li>[type]</li>\n<li>[switch]</li>\n<li>[guid]</li>\n<li>[nullable]</li>\n<li>[hashtable]</li>\n<li>[psobject]</li>\n<li>[regex]</li>\n<li>[scriptblock]</li>\n<li>[single]</li>\n<li>[Xml]</li>\n</ul>\n<p><br/></p>\n<p><strong>PS弱类型和强类型</strong><br>描述: PS给数据分配一个最佳的数据类型也称作“弱类型”，如果一个整数超出了32位整数的上限(<code>[int32]::MaxValue</code>),它就会分配一个64位整数的数据类型；同样如果是小数，字符串，日期时间也会分配成为该对应的数据类型，使用时候非常的方便;</p>\n<ul>\n<li>1.弱类型的缺点:</li>\n</ul>\n<ul>\n<li>有一个变量要存储的是即将拷贝文件的个数，可是在赋值时付了一个字符串，Powershell不会去做过多的判断，它会更新这个变量的类型，并且存储新的数据。</li>\n</ul>\n<ul>\n<li>2.强类型的优点:</li>\n</ul>\n<ul>\n<li>严谨防止程序异常,不会根据数据进行转换数据类型，</li>\n<li>手动地定义类型的一个重要原因是每个特殊的数据类型都有自己的特殊命令和特殊方法，</li>\n<li>PS中使用它的另一个原因是每一个数据类型都有属于自己的函数；</li>\n</ul>\n<p><br/></p>\n<p><strong>变量类型查看</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=1024; <span class=\"variable\">$var</span> -is [int]</span><br><span class=\"line\">True</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=1024; <span class=\"variable\">$var</span> -is [int32]</span><br><span class=\"line\">True</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$string</span>=<span class=\"string\">\"weiyigeek\"</span>; <span class=\"variable\">$string</span> -is [string]</span><br><span class=\"line\">True</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) 类型获取</span></span><br><span class=\"line\"><span class=\"variable\">$string</span>.gettype()</span><br><span class=\"line\">  <span class=\"comment\"># IsPublic IsSerial Name                                     BaseType</span></span><br><span class=\"line\">  <span class=\"comment\"># -------- -------- ----                                     --------</span></span><br><span class=\"line\">  <span class=\"comment\"># True     True     String                                   System.Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 对象类型全称</span></span><br><span class=\"line\"><span class=\"variable\">$string</span>.gettype().fullname</span><br><span class=\"line\">  <span class=\"comment\"># System.String</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>通过<code>$variable</code>的<code>GetType().Name</code>查看和验证PS分配给变量的数据类型。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=1024;<span class=\"variable\">$var</span> is Int</span><br><span class=\"line\">Int32</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=1024;<span class=\"variable\">$var</span>.GetType().name</span><br><span class=\"line\">Int32</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (999999999999999).GetType().name</span><br><span class=\"line\">Int64</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (99999999999999999999).GetType().name</span><br><span class=\"line\">Decimal</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (3.14).GetType().name</span><br><span class=\"line\">Double</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (3.14d).GetType().name</span><br><span class=\"line\">Decimal</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (<span class=\"string\">\"String\"</span>).GetType().name</span><br><span class=\"line\">String</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (date).GetType().name</span><br><span class=\"line\">DateTime</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (get-date).GetType().name</span><br><span class=\"line\">DateTime</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>指定类型定义变量:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.例如定义一个Byte类型的变量，因为Byte的定义域为[0,255],一旦尝试使用一个不在定义域中的值赋给该变量就会显示一条错误信息。</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; [byte]<span class=\"variable\">$b</span>=254</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$b</span>.gettype()</span><br><span class=\"line\">IsPublic IsSerial Name     BaseType</span><br><span class=\"line\">-------- -------- ----     --------</span><br><span class=\"line\">True     True     Byte    System.ValueType</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.DateTime类型对象的属性的使用</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; [DateTime]<span class=\"variable\">$date</span>=<span class=\"string\">\"2019-11-27 09:19:20\"</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$date</span></span><br><span class=\"line\">2019年11月27日 9:19:20</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$date</span>.DayOfWeek</span><br><span class=\"line\">Wednesday</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$date</span>.DayOfyear</span><br><span class=\"line\">331</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$date</span>.AddDays(-10)</span><br><span class=\"line\">2019年11月17日 9:19:20</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.XML类型对象的使用查询.exe 和 .dll结点</span></span><br><span class=\"line\">PS &gt; [XML]<span class=\"variable\">$xml</span>=(Get-Content .\\Demo2.xml)</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$xml</span></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\"><span class=\"comment\"># --------</span></span><br><span class=\"line\"><span class=\"comment\"># logo</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$xml</span>.FirstChild</span><br><span class=\"line\"><span class=\"comment\"># extensions unextensions</span></span><br><span class=\"line\"><span class=\"comment\"># ---------- ------------</span></span><br><span class=\"line\"><span class=\"comment\"># extensions unextensions</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$xml</span>.logo.extensions.e</span><br><span class=\"line\"><span class=\"comment\"># .exe</span></span><br><span class=\"line\"><span class=\"comment\"># .dll</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>变量强弱类型转换</strong><br>描述:每个变量的都有自己的类型，这个具体的类型存放在PsVariable对象的Attributes<code>[System.Management.Automation.PSVariableAttributeCollection]</code>属性，如果这个Attributes为空，可以给这个变量存放任何类型的数据，PS会自己选择合适的类型。</p>\n<p><em>注意事项:</em> 一旦Attribute属性确定下来就不能随意存储其他类型的数据;</p>\n<ul>\n<li>例如给<code>$var</code>存放一个整数，属于弱类型，所以Attributes属性为空，这时还可以给它赋值一个字符串。但是如果给$var增加强类型，存放一个整数，再给它赋值一个其它类型，解释器会自动尝试转换，如果不能转换就会抛出异常。</li>\n</ul>\n<p>解决办法:使用 <code>(Get-Variable var).Attributes.Clear()</code> 清空 <code>Attributes</code>此时强类型又转变成为弱类型了;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.默认申明的变量是弱类型</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=1024</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (Get-variable var).Attributes</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>.gettype()</span><br><span class=\"line\">IsPublic IsSerial Name                                     BaseType</span><br><span class=\"line\">-------- -------- ----                                     --------</span><br><span class=\"line\">True     True     Int32                                    System.ValueType</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=3.14</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>.gettype()</span><br><span class=\"line\">IsPublic IsSerial Name                                     BaseType</span><br><span class=\"line\">-------- -------- ----                                     --------</span><br><span class=\"line\">True     True     Double                                   System.ValueType</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.强类型转弱类型</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; [Int]<span class=\"variable\">$var</span>=1024</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (Get-variable var).Attributes</span><br><span class=\"line\">TransformNullOptionalParameters TypeId</span><br><span class=\"line\">------------------------------- ------</span><br><span class=\"line\">True System.Management.Automation.ArgumentTypeConverterAttribute</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=3.14;<span class=\"variable\">$var</span></span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=<span class=\"string\">\"2019 IS END\"</span></span><br><span class=\"line\"><span class=\"comment\">#无法将值“2019 IS END”转换为类型“System.Int32”。错误:“输入字符串的格式不正确。”</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; (Get-variable var).Attributes.clear() <span class=\"comment\"># 关键点-强类型清除</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$var</span>=<span class=\"string\">\"2019 IS END\"</span>;<span class=\"variable\">$var</span></span><br><span class=\"line\">2019 IS END</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"7-变量验证检查\"><a href=\"#7-变量验证检查\" class=\"headerlink\" title=\"7.变量验证检查\"></a>7.变量验证检查</h3><p>描述:变量<code>PSVariable对象</code>的<code>Attributes属性</code>能够存储一些附件条件, 常用的变量内容验证分别为：</p>\n<ul>\n<li>ValidateLengthAttribute：限制变量的长度</li>\n<li>ValidateNotNullAttribute：限制变量不能为空</li>\n<li>ValidateNotNullOrEmptyAttribute：限制变量不等为空，不能为空字符串，不能为空集合</li>\n<li>ValidatePatternAttribute:限制变量要满足制定的正则表达式</li>\n<li>ValidateRangeAttribute：限制变量的取值范围</li>\n<li>ValidateSetAttribute：限制变量的取值集合</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.ValidateLengthAttribute 限制一个字符串变量的长度为位于2-5之间</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$var</span>=<span class=\"string\">\"限制变量\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$condition</span> = New-Object System.Management.Automation.ValidateLengthAttribute -ArgumentList 2,5  <span class=\"comment\">#关键点</span></span><br><span class=\"line\">PS&gt; (Get-Variable var).Attributes.Add(<span class=\"variable\">$condition</span>)</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$var</span>=<span class=\"string\">\"射雕英雄传\"</span>  <span class=\"comment\">#变量长度位于2-5之间</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.ValidateNotNullAttribute 例子</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$a</span>=123</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$con</span>=New-Object System.Management.Automation.ValidateNotNullAttribute</span><br><span class=\"line\">PS&gt; (Get-Variable a).Attributes.Add(<span class=\"variable\">$con</span>)</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$a</span>=<span class=\"variable\">$null</span>  <span class=\"comment\">#无法验证此变量，因为值不是变量 a 的有效值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.ValidateNotNullOrEmptyAttribute 例子 注意@()为一个空数组。</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$con</span>=New-Object System.Management.Automation.ValidateNotNullOrEmptyAttribute</span><br><span class=\"line\">PS&gt; (Get-Variable a).Attributes.clear()</span><br><span class=\"line\">PS&gt; (Get-Variable a).Attributes.add(<span class=\"variable\">$con</span>)</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$a</span>=<span class=\"variable\">$null</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.ValidatePatternAttribute 例子利用正则表达式验证Email格式</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$email</span>=<span class=\"string\">\"@mossfly.com\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$con</span>=New-Object System.Management.Automation.ValidatePatternAttribute <span class=\"string\">\"[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]&#123;2,4&#125;\"</span></span><br><span class=\"line\">PS&gt; (Get-Variable email).Attributes.Add(<span class=\"variable\">$con</span>)</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$email</span>=<span class=\"string\">\"abc@abc.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5.ValidateRangeAttribute 例子验证月份1-12</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$month</span>=1</span><br><span class=\"line\">PS&gt; (Get-Variable month).Attributes.Add($(New-Object System.Management.Automation.ValidateRangeAttribute -ArgumentList 1,12))</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$month</span>=10</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x04-PS-运算操作符\"><a href=\"#0x04-PS-运算操作符\" class=\"headerlink\" title=\"0x04 PS 运算操作符\"></a>0x04 PS 运算操作符</h2><p>描述: 我们可以把 PS 看作是一个非常强大的计算器，除了支持数学表达式运算符还支持计算机容量单位和HEX进制转换；</p>\n<p>计算机容量常用单位: <code>Bit - B - KB - MB - GB - TB - PB</code></p>\n<p>参考地址: <a href=\"https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators?view=powershell-7.1\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_arithmetic_operators?view=powershell-7.1</a></p>\n<p><br/></p>\n<h3 id=\"0-运算符及其优先级一览\"><a href=\"#0-运算符及其优先级一览\" class=\"headerlink\" title=\"0.运算符及其优先级一览\"></a>0.运算符及其优先级一览</h3><ul>\n<li>1) 基础运算符: PowerShell 包含了我们常规使用的基础运算符，用于算数运算等<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- ()</span><br><span class=\"line\">- + </span><br><span class=\"line\">- -</span><br><span class=\"line\">- *</span><br><span class=\"line\">- / </span><br><span class=\"line\">- %</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>2) 比较运算符: PowerShell 包含许多比较运算符，用于比较值或查找与特定模式匹配的值。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 值 &amp; 字符串</span></span><br><span class=\"line\">-eq\t等于</span><br><span class=\"line\">-ne\t不等于</span><br><span class=\"line\">-gt\t大于</span><br><span class=\"line\">-ge\t大于或等于</span><br><span class=\"line\">-lt\t小于</span><br><span class=\"line\">-le\t小于或等于</span><br><span class=\"line\">-Like\t使用 * 通配符进行匹配</span><br><span class=\"line\">-NotLike  不使用 * 通配符进行匹配</span><br><span class=\"line\">-Match     匹配指定的正则表达式</span><br><span class=\"line\">-NotMatch\t 不匹配指定的正则表达式</span><br><span class=\"line\">-Contains\t 确定集合中是否包含指定的值</span><br><span class=\"line\">-NotContains\t确定集合是否不包含特定值</span><br><span class=\"line\">-In\t确定指定的值是否在集合中</span><br><span class=\"line\">-NotIn\t确定指定的值是否不在集合中</span><br><span class=\"line\">-Replace\t替换指定的值</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips: 上述列出的所有运算符都不区分大小写，将 c 放置在上次表中列出的运算符之前使其区分大小写。<br>Tips: <code>-Like 和 -Match</code> 运算符也可能会造成混淆, 其两者的区别是<code>前者与通配符 * 和 ? 结合使用</code> 而<code>后者与正则表达式结合使用</code>。<br>Tips: PowerShell 版本 3.0 首次引入了“in”比较运算符。换言 -in 执行与 contains 比较运算符相同的测试，不过方向相反。<br>Tips: 还有一些可用于替换内容的方法如 <code>Replace()</code>，其工作原理类似于替换运算符。但是默认情况下，-Replace 运算符不区分大小写，而 <code>Replace()</code> 方法区分大小写。<br>Tips: 字符串比较时是模仿忽略大小写并且大小写敏感比较时小写字母小于大写字母。如果需要大小写敏感比较可以使用操作符<code>-ceq, -clt, -cle, -cge</code>，如果要明确的大小写不敏感比较操作符是在默认操作符前加前缀i,即<code>-ieq,-ilt,-ile,-igt,-ige</code>。</p>\n<p><br/></p>\n<ul>\n<li>3) 逻辑运算符: 顾名思义进行逻辑判断(位运算符仅适用于整数类型)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-and     ：和</span><br><span class=\"line\">-or      ：或</span><br><span class=\"line\">-xor     ：异或</span><br><span class=\"line\">-not | ! ：逆</span><br><span class=\"line\">-band\t位与\t5 -band 3          <span class=\"comment\"># 1</span></span><br><span class=\"line\">-bnot\t按位“非”\t-bnot 5        <span class=\"comment\"># -6</span></span><br><span class=\"line\">-bor\t按位“或”\t5 -bor 0x03    <span class=\"comment\"># 7</span></span><br><span class=\"line\">-bxor\t按位“异或”\t5 -bxor 3    <span class=\"comment\"># 6</span></span><br><span class=\"line\">-shl\t将位向左移动\t3 -shl 2   <span class=\"comment\"># 12</span></span><br><span class=\"line\">-shr\t将位向右移动  16 -shr 2  <span class=\"comment\"># 4</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><p>4) 布尔转换: 包括位操作符在内的多个操作符返回数字类型的值，PowerShell可以自动将其转换为布尔类型的值，转换规则如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 任何非零值将会被转换为<span class=\"variable\">$true</span></span><br><span class=\"line\">2) 非零长度的字符串将会被转换为<span class=\"variable\">$true</span></span><br><span class=\"line\">3) 至少有一项的集合会返回<span class=\"variable\">$true</span></span><br><span class=\"line\">4) 其他对象将会被转换成<span class=\"variable\">$true</span>，除非它们为<span class=\"variable\">$null</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5) 运算符优先级</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- PowerShell 按以下顺序处理算术运算符：</span><br><span class=\"line\">  <span class=\"comment\"># 优先级\t运算符\t说明</span></span><br><span class=\"line\">  <span class=\"comment\"># 1\t()\t括号</span></span><br><span class=\"line\">  <span class=\"comment\"># 2\t-\t对于负数或一元运算符</span></span><br><span class=\"line\">  <span class=\"comment\"># 3\t*, /, %\t用于乘法和除法</span></span><br><span class=\"line\">  <span class=\"comment\"># 4\t+, -\t加法和减法</span></span><br><span class=\"line\">  <span class=\"comment\"># 5\t-band, -bnot\t对于位运算</span></span><br><span class=\"line\">  <span class=\"comment\"># 5\t-bor, -bxor\t对于位运算</span></span><br><span class=\"line\">  <span class=\"comment\"># 5\t-shr, -shl\t对于位运算</span></span><br><span class=\"line\"></span><br><span class=\"line\">- PowerShell 根据优先规则从左到右处理表达式。</span><br><span class=\"line\">  <span class=\"comment\"># 表达式\t结果</span></span><br><span class=\"line\">  <span class=\"comment\"># 3+6/3*4\t11</span></span><br><span class=\"line\">  <span class=\"comment\"># 3+6/(3*4)\t3.5</span></span><br><span class=\"line\">  <span class=\"comment\"># (3+6)/3*4\t12</span></span><br><span class=\"line\"></span><br><span class=\"line\">- PowerShell 计算表达式的顺序可能不同于你使用的其他编程和脚本语言</span><br><span class=\"line\">在此示例中，对表达式 <span class=\"variable\">$a</span>++ 进行计算 <span class=\"variable\">$b</span>[<span class=\"variable\">$a</span>] 。在 <span class=\"variable\">$a</span>++ <span class=\"variable\">$a</span> 语句中使用之后，计算更改的值， <span class=\"variable\">$c</span>[<span class=\"variable\">$a</span>++] 但在中使用它之前 <span class=\"variable\">$b</span>[<span class=\"variable\">$a</span>] 。 中的 <span class=\"variable\">$a</span> 变量 <span class=\"variable\">$b</span>[<span class=\"variable\">$a</span>] 等于 1 ，而不是 0 ; 因此，语句将值赋给 <span class=\"variable\">$b</span>[1] ，而不是 <span class=\"variable\">$b</span>[0] 。</span><br><span class=\"line\"><span class=\"variable\">$a</span> = 0</span><br><span class=\"line\"><span class=\"variable\">$b</span> = @(1,2)</span><br><span class=\"line\"><span class=\"variable\">$c</span> = @(-1,-2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$b</span>[<span class=\"variable\">$a</span>] = <span class=\"variable\">$c</span>[<span class=\"variable\">$a</span>++]  <span class=\"comment\"># $b[1] = $c[0] ==&gt; -1</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"1-基础运算符实例\"><a href=\"#1-基础运算符实例\" class=\"headerlink\" title=\"1.基础运算符实例\"></a>1.基础运算符实例</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.四则运算（交换式）</span></span><br><span class=\"line\">PS &gt; 3.14*10*10</span><br><span class=\"line\">314</span><br><span class=\"line\">PS &gt; 1+3-(2.4-5)*(7.899-4.444)</span><br><span class=\"line\">12.983</span><br><span class=\"line\"><span class=\"comment\">#由 $+圆括号+表达式 构成的变量属于子表达式变量，这样的变量会先计算表达式，然后把表达式的值返回。</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; $((3+9)/3)</span><br><span class=\"line\">4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.十六进制转换</span></span><br><span class=\"line\">PS &gt; 0xA</span><br><span class=\"line\">10</span><br><span class=\"line\">PS &gt; 0xB</span><br><span class=\"line\">11</span><br><span class=\"line\">PS &gt; 0xff</span><br><span class=\"line\">255</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.自动识别计算机容量单位</span></span><br><span class=\"line\">PS &gt; 1kb</span><br><span class=\"line\">1024</span><br><span class=\"line\">PS &gt; 1GB</span><br><span class=\"line\">1073741824</span><br><span class=\"line\">PS &gt; 1gb</span><br><span class=\"line\">1073741824</span><br><span class=\"line\">PS &gt; 1gb/1kb</span><br><span class=\"line\">1048576</span><br><span class=\"line\">PS &gt; 1gb/20mb*10kb</span><br><span class=\"line\">524288  </span><br><span class=\"line\">PS C:\\ps&gt; 80kb*800*30/1gb  <span class=\"comment\"># 假如一个网站每个页面大小为80kb，统计显示每天的PV操作为800，1个月下来占用的带宽</span></span><br><span class=\"line\">1.8310546875</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2-比较运算符实例\"><a href=\"#2-比较运算符实例\" class=\"headerlink\" title=\"2.比较运算符实例\"></a>2.比较运算符实例</h3><p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.首字母大写的“PowerShell”等效于使用等于比较运算符的小写的“powershell”。</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -eq <span class=\"string\">'powershell'</span>    <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -ceq <span class=\"string\">'powershell'</span>   <span class=\"comment\"># False 区别大小写</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 2.不等于比较运算符反转条件。</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -ne <span class=\"string\">'powershell'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.大于、大于或等于、小于和小于或等于均可用于字符串或数值。</span></span><br><span class=\"line\">5 -gt 5  <span class=\"comment\"># False</span></span><br><span class=\"line\">5 -ge 5  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"comment\"># 针对于计算机容量进行比较</span></span><br><span class=\"line\">PS &gt; 1gb -lt 1gb+1</span><br><span class=\"line\">True</span><br><span class=\"line\">PS &gt; 1gb -lt 1gb-1</span><br><span class=\"line\">False</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.执行\"like\"匹配 -Like 与通配符 * 和 ? 结合使用</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -like <span class=\"string\">'*shell'</span>       <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -notLike <span class=\"string\">'weiyigeek'</span> <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.使用正则表达式执行匹配 -Match </span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -match <span class=\"string\">'^*.shell$'</span></span><br><span class=\"line\"><span class=\"string\">'master@weiyigeek.top'</span> -match <span class=\"string\">'@'</span> <span class=\"comment\"># 貌似只要有一个字符串匹配即返回True</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"string\">'master@weiyigeek.top'</span> -match <span class=\"string\">'ji'</span></span><br><span class=\"line\"><span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"string\">'master@weiyigeek.top'</span> -notMatch <span class=\"string\">'weiye'</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.列表包含或者不包含指定`$Numbers`变量,-NotContains 反转逻辑以查看 $Numbers 变量是否不包含值。</span></span><br><span class=\"line\">(3,4,5) -contains 2 </span><br><span class=\"line\"><span class=\"variable\">$Numbers</span> = 1..10          <span class=\"comment\"># 使用范围运算符将数字 1 到 10 存储在变量中</span></span><br><span class=\"line\"><span class=\"variable\">$Numbers</span> -contains 15     <span class=\"comment\"># False</span></span><br><span class=\"line\"><span class=\"variable\">$Numbers</span> -notcontains 15  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.它用于确定某个值是否“位于”数组中。 </span></span><br><span class=\"line\"><span class=\"comment\"># $Numbers 变量是数组，因为它包含多个值。</span></span><br><span class=\"line\"><span class=\"comment\"># 与 -contains 运算符一样，not 反转 -in 运算符的逻辑。</span></span><br><span class=\"line\">15 -<span class=\"keyword\">in</span> <span class=\"variable\">$Numbers</span> <span class=\"comment\"># False</span></span><br><span class=\"line\">10 -<span class=\"keyword\">in</span> <span class=\"variable\">$Numbers</span> <span class=\"comment\"># True</span></span><br><span class=\"line\">10 -notin <span class=\"variable\">$Numbers</span>  <span class=\"comment\"># False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8.-replace 运算符 它用于替换内容</span></span><br><span class=\"line\"><span class=\"comment\"># 如果指定一个值，则会将该值替换为空值。</span></span><br><span class=\"line\"><span class=\"string\">'PowerShell'</span> -replace <span class=\"string\">'Shell'</span> <span class=\"comment\"># Power</span></span><br><span class=\"line\"><span class=\"comment\"># 如果要将值替换为其他值，请在要替换的模式之后指定新值。</span></span><br><span class=\"line\"><span class=\"string\">'my website address is hTTp://wwww.weiyigeek.top'</span> -replace <span class=\"string\">'http'</span>,<span class=\"string\">'https'</span></span><br><span class=\"line\">my website address is https://wwww.weiyigeek.top</span><br><span class=\"line\"><span class=\"comment\"># 如果要区分大小写进行替换请采用 Replace() 方法。</span></span><br><span class=\"line\"><span class=\"string\">'my website address is hTTp://wwww.weiyigeek.top'</span>.Replace(<span class=\"string\">'http'</span>,<span class=\"string\">'https'</span>)</span><br><span class=\"line\">my website address is hTTp://wwww.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 9.比较数组和集合</span></span><br><span class=\"line\">PS WeiyiGeek&gt; 1,2,3,4,3,2,1 -eq 3</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-逻辑运算符实例\"><a href=\"#3-逻辑运算符实例\" class=\"headerlink\" title=\"3.逻辑运算符实例\"></a>3.逻辑运算符实例</h3><p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.求反运算符为-not 但是像高级语言一样”！ “ 也支持求反</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$a</span>= 2 -eq 3</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$a</span></span><br><span class=\"line\">False</span><br><span class=\"line\">PS &gt; -not <span class=\"variable\">$a</span></span><br><span class=\"line\">True</span><br><span class=\"line\">PS &gt; !(<span class=\"variable\">$a</span>)</span><br><span class=\"line\">True</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$true</span> -xor <span class=\"variable\">$false</span></span><br><span class=\"line\">True</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$true</span> -xor <span class=\"variable\">$true</span></span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Powershell","path":"api/tags/Powershell.json"}]}