{"title":"使用EasyOCR库进行OCR文字识别介绍与实践","slug":"人工智能/图像识别/Pytorch/EasyOCR/使用EasyOCR库进行OCR文字识别介绍与实践","date":"2022-05-08T05:34:30.000Z","updated":"2022-08-10T08:04:30.179Z","url":"2022/5-8-658.html","path":"api/articles/2022/5-8-658.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527151152.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220528214206.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527202937.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220601170820.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220601171033.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-快速了解\"><a href=\"#0x00-快速了解\" class=\"headerlink\" title=\"0x00 快速了解\"></a>0x00 快速了解</h2><h3 id=\"EasyOCR-介绍\"><a href=\"#EasyOCR-介绍\" class=\"headerlink\" title=\"EasyOCR 介绍\"></a>EasyOCR 介绍</h3><p><strong>Q: 什么是 EasyOCR ?</strong></p>\n<blockquote>\n<p>描述: EasyOCR 是一个用于从图像中提取文本的 python 模块, 它是一种通用的 OCR，既可以读取自然场景文本，也可以读取文档中的密集文本。目前支持 80 多种语言和所有流行的书写脚本，包括：拉丁文、中文、阿拉伯文、梵文、西里尔文等。</p>\n</blockquote>\n<p><br/></p>\n<p><strong>Q: 使用 EasyOCR 可以干什么?</strong></p>\n<blockquote>\n<p>描述: EasyOCR 支持两种方式运行一种是常用的CPU，而另外一种是需要GPU支持并且需安装CUDA环境, 我们使用其可以进行图片中语言文字识别, 例如小程序里图片识别、车辆车牌识别(<code>即车债管理系统</code>)。</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527151152.png\" alt=\"WeiyiGeek.Examples\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Examples</p>\n            </figure>\n<p>Tips: 在其官网有demo演示，我们可以使用其进行简单图片ocr识别,地址为<code>https://www.jaided.ai/easyocr/</code> 或者 <code>https://huggingface.co/spaces/tomofi/EasyOCR</code></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220528214206.png\" alt=\"WeiyiGeek.官网Demo演示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.官网Demo演示</p>\n            </figure>\n<p><strong>EasyOCR Framework</strong><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527202937.png\" alt=\"WeiyiGeek.EasyOCR Framework\" title=\"\" class=\"\">\n                <p>WeiyiGeek.EasyOCR Framework</p>\n            </figure></p>\n<p>温馨提示: 图中 灰色插槽是可更换的浅蓝色模块的占位符，我们可以重构代码以支持可交换的检测和识别算法 api</p>\n<p><br/></p>\n<h3 id=\"EasyOCR-参考来源\"><a href=\"#EasyOCR-参考来源\" class=\"headerlink\" title=\"EasyOCR 参考来源\"></a>EasyOCR 参考来源</h3><p>官网地址: <a href=\"https://www.jaided.ai/easyocr/\" target=\"_blank\" rel=\"noopener\">https://www.jaided.ai/easyocr/</a></p>\n<p>项目地址: <a href=\"https://github.com/JaidedAI/EasyOCR\" target=\"_blank\" rel=\"noopener\">https://github.com/JaidedAI/EasyOCR</a></p>\n<p>实践项目源码地址：<a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Project/Python/EasyOCR/Travelcodeocr\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Project/Python/EasyOCR/Travelcodeocr</a></p>\n<p><strong>文档原文地址:</strong> <a href=\"https://www.bilibili.com/read/cv16911816\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv16911816</a></p>\n<p><strong>实践视频地址:</strong> <a href=\"https://www.bilibili.com/video/BV1nY4y1x7JG\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1nY4y1x7JG</a></p>\n<p>温馨提示: 该项目基于来自多篇论文和开源存储库的研究和代码，所有深度学习执行都基于 Pytorch ，识别模型是 CRNN 它由 3 个主要部分组成：特征提取（我们目前使用 Resnet ）和 VGG、序列标记（ LSTM ）和解码​​（ CTC ）。 ❤️</p>\n<hr>\n<h2 id=\"0x01-安装部署\"><a href=\"#0x01-安装部署\" class=\"headerlink\" title=\"0x01 安装部署\"></a>0x01 安装部署</h2><h3 id=\"环境依赖\"><a href=\"#环境依赖\" class=\"headerlink\" title=\"环境依赖\"></a>环境依赖</h3><p><strong>环境依赖</strong></p>\n<ul>\n<li>Python 建议 3.8 x64 以上版本 (原本我的环境是 Python 3.7 安装时各种稀奇古怪的错误都出来，不得已abandon放弃)</li>\n<li>easyocr 包 -&gt; 依赖 torch 、torchvision 第三方包</li>\n</ul>\n<p><strong>注意事项:</strong></p>\n<ul>\n<li><p>Note 1.本章是基于 cpu 与 GPU  下使用 EasyOCR, 如果你需要使用 GPU 跑, 那么请你安装相应的CUDA环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvidia-smi -l</span><br><span class=\"line\">Fri May 27 14:57:57 2022</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| NVIDIA-SMI 465.19.01    Driver Version: 465.19.01    CUDA Version: 11.3     |</span><br><span class=\"line\">|-------------------------------+----------------------+----------------------+</span><br><span class=\"line\">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class=\"line\">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class=\"line\">|                               |                      |               MIG M. |</span><br><span class=\"line\">|===============================+======================+======================|</span><br><span class=\"line\">|   0  NVIDIA Tesla V1...  Off  | 00000000:1B:00.0 Off |                    0 |</span><br><span class=\"line\">| N/A   41C    P0    36W / 250W |      0MiB / 32510MiB |      0%      Default |</span><br><span class=\"line\">|                               |                      |                  N/A |</span><br><span class=\"line\">+-------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Note 2.最好在Python 3.8 x64 位系统上安装使用 easyocr , 非常注意其不支持32位的python。</p>\n</li>\n<li><p>Note 3.对于 Windows，请先按照 <a href=\"https://pytorch.org\" target=\"_blank\" rel=\"noopener\">https://pytorch.org</a> 的官方说明安装 torch 和 torchvision。  在 pytorch 网站上，请务必选择您拥有的正确 CUDA 版本。  如果您打算仅在 CPU 模式下运行，请选择 CUDA = None。</p>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h3><p>描述: 此处我们使用 pip 安装 easyocr 使用以及通过官方提供的Dockerfile。</p>\n<p><strong>pip 方式</strong><br>对于最新的稳定版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install easyocr -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p>\n<p>对于最新的开发版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+git://github.com/jaidedai/easyocr.git</span><br></pre></td></tr></table></figure></p>\n<p><strong>Dockerfile</strong><br>描述: 由于国内网络环境因素, 此处我将官方提供的Dockerfile稍作更改。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /opt/images/easyocr &amp;&amp; git <span class=\"built_in\">clone</span> https://github.com/JaidedAI/EasyOCR.git --depth=1</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">Dockerfile  EasyOCR</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat Dockerfile</span><br><span class=\"line\"><span class=\"comment\"># pytorch OS is Ubuntu 18.04</span></span><br><span class=\"line\">FROM pytorch/pytorch</span><br><span class=\"line\">LABEL DESC=<span class=\"string\">\"EasyOCR Enviroment Build with Containerd Images\"</span></span><br><span class=\"line\">ARG service_home=<span class=\"string\">\"/home/EasyOCR\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enviroment &amp;&amp; Software</span></span><br><span class=\"line\">RUN sed -i -e <span class=\"string\">\"s#archive.ubuntu.com#mirrors.aliyun.com#g\"</span> -e <span class=\"string\">\"s#security.ubuntu.com#mirrors.aliyun.com#g\"</span> /etc/apt/sources.list  &amp;&amp; \\</span><br><span class=\"line\">    apt-get update -y &amp;&amp; \\</span><br><span class=\"line\">    apt-get install -y \\</span><br><span class=\"line\">    libglib2.0-0 \\</span><br><span class=\"line\">    libsm6 \\</span><br><span class=\"line\">    libxext6 \\</span><br><span class=\"line\">    libxrender-dev \\</span><br><span class=\"line\">    libgl1-mesa-dev \\</span><br><span class=\"line\">    git \\</span><br><span class=\"line\">    vim \\</span><br><span class=\"line\">    <span class=\"comment\"># cleanup</span></span><br><span class=\"line\">    &amp;&amp; apt-get autoremove -y \\</span><br><span class=\"line\">    &amp;&amp; apt-get clean -y \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># COPY EasyOCR is Github(https://github.com/JaidedAI/EasyOCR.git)</span></span><br><span class=\"line\">COPY ./EasyOCR <span class=\"string\">\"<span class=\"variable\">$service_home</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Build</span></span><br><span class=\"line\">RUN <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$service_home</span>\"</span> \\</span><br><span class=\"line\">  &amp;&amp; pip config <span class=\"built_in\">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/ \\</span><br><span class=\"line\">  &amp;&amp; python setup.py build_ext --inplace -j 4 \\</span><br><span class=\"line\">  &amp;&amp; python -m pip install -e .</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>环境验证</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows 环境</span></span><br><span class=\"line\">pip freeze | findstr <span class=\"string\">\"easyocr\"</span></span><br><span class=\"line\">easyocr @ file:///E:/%E8%BF%85%E9%9B%B7%E4%B8%8B%E8%BD%BD/easyocr-1.4.2-py3-none-any.whl</span><br><span class=\"line\"><span class=\"comment\"># Linux &amp; 容器环境</span></span><br><span class=\"line\">$ pip freeze | grep <span class=\"string\">\"EasyOCR\"</span></span><br><span class=\"line\">-e git+https://github.com/JaidedAI/EasyOCR.git@7a685cb8c4ba14f2bc246f89c213f1a56bbc2107<span class=\"comment\">#egg=easyocr</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python 命令行中使用</span></span><br><span class=\"line\">&gt;&gt;&gt; from pprint import pprint  <span class=\"comment\"># 方便格式化输出</span></span><br><span class=\"line\">&gt;&gt;&gt; import easyocr</span><br><span class=\"line\">&gt;&gt;&gt; reader = easyocr.Reader([<span class=\"string\">'ch_sim'</span>,<span class=\"string\">'en'</span>])</span><br><span class=\"line\">CUDA not available - defaulting to CPU. Note: This module is much faster with a GPU.</span><br><span class=\"line\">&gt;&gt;&gt; result = reader.readtext(<span class=\"string\">'00e336dbde464c809ef1f6ea568d4621.png'</span>)</span><br><span class=\"line\">&gt;&gt;&gt; pprint(result)</span><br><span class=\"line\">[([[354, 46], [444, 46], [444, 76], [354, 76]], <span class=\"string\">'中国移动'</span>, 0.981803297996521),</span><br><span class=\"line\"> ([[477, 55], [499, 55], [499, 75], [477, 75]], <span class=\"string\">'46'</span>, 0.3972922105840435),</span><br><span class=\"line\"> ([[533, 55], [555, 55], [555, 75], [533, 75]], <span class=\"string\">'5G'</span>, 0.5360637875500641),</span><br><span class=\"line\"> ([[354, 76], [474, 76], [474, 104], [354, 104]],</span><br><span class=\"line\">  <span class=\"string\">'中国移动四 '</span>,</span><br><span class=\"line\">  0.25950584649873865),</span><br><span class=\"line\"> ([[489, 57], [625, 57], [625, 95], [489, 95]],</span><br><span class=\"line\">  <span class=\"string\">'GMl s @'</span>,</span><br><span class=\"line\">  0.011500043801327683),</span><br><span class=\"line\"> ([[693, 55], [801, 55], [801, 95], [693, 95]], <span class=\"string\">'Q92%'</span>, 0.022083675488829613),</span><br><span class=\"line\"> ([[864, 60], [950, 60], [950, 92], [864, 92]], <span class=\"string\">'09:03'</span>, 0.9793587315696877),</span><br><span class=\"line\"> ([[884, 158], [938, 158], [938, 214], [884, 214]], <span class=\"string\">'@'</span>, 0.29484160211053734),</span><br><span class=\"line\"> ([[123, 298], [592, 298], [592, 361], [123, 361]],</span><br><span class=\"line\">  <span class=\"string\">'通信行程卡提供服务&gt;'</span>,</span><br><span class=\"line\">  0.6739866899213806),</span><br><span class=\"line\"> ([[115, 429], [384, 429], [384, 497], [115, 497]],</span><br><span class=\"line\">  <span class=\"string\">'通信行程卡'</span>,</span><br><span class=\"line\">  0.9159307714297187),</span><br><span class=\"line\"> ([[153, 596], [848, 596], [848, 704], [153, 704]],</span><br><span class=\"line\">  <span class=\"string\">'通信大数据行程卡'</span>,</span><br><span class=\"line\">  0.2522292283860262),</span><br><span class=\"line\"> ([[303, 723], [699, 723], [699, 785], [303, 785]],</span><br><span class=\"line\">  <span class=\"string\">'疫情防控;人人有责'</span>,</span><br><span class=\"line\">  0.7030201163942564),</span><br><span class=\"line\"> ([[347, 844], [653, 844], [653, 892], [347, 892]],</span><br><span class=\"line\">  <span class=\"string\">'请收下绿色行程卡'</span>,</span><br><span class=\"line\">  0.9120484515458063),</span><br><span class=\"line\"> ([[248, 950], [754, 950], [754, 1004], [248, 1004]],</span><br><span class=\"line\">  <span class=\"string\">'157****2966的动态行程卡'</span>,</span><br><span class=\"line\">  0.9868984946820241),</span><br><span class=\"line\"> ([[173, 1045], [345, 1045], [345, 1105], [173, 1105]],</span><br><span class=\"line\">  <span class=\"string\">'更新于:'</span>,</span><br><span class=\"line\">  0.972654586401667),</span><br><span class=\"line\"> ([[360, 1049], [829, 1049], [829, 1100], [360, 1100]],</span><br><span class=\"line\">  <span class=\"string\">'2022.05.2509:03:56'</span>,</span><br><span class=\"line\">  0.9411191664033213),</span><br><span class=\"line\"> ([[110, 1670], [633, 1670], [633, 1732], [110, 1732]],</span><br><span class=\"line\">  <span class=\"string\">'您于前14夭内到达或途经:'</span>,</span><br><span class=\"line\">  0.8531442220608394),</span><br><span class=\"line\"> ([[648, 1674], [788, 1674], [788, 1730], [648, 1730]],</span><br><span class=\"line\">  <span class=\"string\">'重庆市'</span>,</span><br><span class=\"line\">  0.9605511910615995),</span><br><span class=\"line\"> ([[104, 1778], [898, 1778], [898, 1810], [104, 1810]],</span><br><span class=\"line\">  <span class=\"string\">'结果包含您在前14天内到访的国家(地区) 与停留4小时以上的国内城市'</span>,</span><br><span class=\"line\">  0.6574011574316847),</span><br><span class=\"line\"> ([[272, 1825], [729, 1825], [729, 1863], [272, 1863]],</span><br><span class=\"line\">  <span class=\"string\">'色卡仅对到访地作提醒。不关联健康状况'</span>,</span><br><span class=\"line\">  0.8806245499955613),</span><br><span class=\"line\"> ([[383, 1891], [607, 1891], [607, 1933], [383, 1933]],</span><br><span class=\"line\">  <span class=\"string\">'本服务联合提供'</span>,</span><br><span class=\"line\">  0.9781898210349773),</span><br><span class=\"line\"> ([[119, 1966], [337, 1966], [337, 2006], [119, 2006]],</span><br><span class=\"line\">  <span class=\"string\">'CAICT 中国信通院'</span>,</span><br><span class=\"line\">  0.3636917908522541),</span><br><span class=\"line\"> ([[435, 1963], [533, 1963], [533, 1999], [435, 1999]],</span><br><span class=\"line\">  <span class=\"string\">'中国电信'</span>,</span><br><span class=\"line\">  0.08182162046432495),</span><br><span class=\"line\"> ([[624, 1966], [702, 1966], [702, 1990], [624, 1990]],</span><br><span class=\"line\">  <span class=\"string\">'中国移动'</span>,</span><br><span class=\"line\">  0.9323447942733765),</span><br><span class=\"line\"> ([[812, 1966], [892, 1966], [892, 1990], [812, 1990]],</span><br><span class=\"line\">  <span class=\"string\">'中国联通'</span>,</span><br><span class=\"line\">  0.9082608819007874),</span><br><span class=\"line\"> ([[441, 1993], [531, 1993], [531, 2005], [441, 2005]],</span><br><span class=\"line\">  <span class=\"string\">'CINA TUUUC0'</span>,</span><br><span class=\"line\">  0.028013896371299665),</span><br><span class=\"line\"> ([[629, 1987], [701, 1987], [701, 2003], [629, 2003]],</span><br><span class=\"line\">  <span class=\"string\">'ChnaMobile'</span>,</span><br><span class=\"line\">  0.7021787396208221),</span><br><span class=\"line\"> ([[815, 1989], [893, 1989], [893, 2003], [815, 2003]],</span><br><span class=\"line\">  <span class=\"string\">'Chnoumco'</span>,</span><br><span class=\"line\">  0.19655737186726854),</span><br><span class=\"line\"> ([[107, 2077], [281, 2077], [281, 2119], [107, 2119]],</span><br><span class=\"line\">  <span class=\"string\">'证通查来了!'</span>,</span><br><span class=\"line\">  0.9745880948510078),</span><br><span class=\"line\"> ([[467, 2075], [825, 2075], [825, 2117], [467, 2117]],</span><br><span class=\"line\">  <span class=\"string\">'全国移动电话卡\"一证通查'</span>,</span><br><span class=\"line\">  0.9208412317655043),</span><br><span class=\"line\"> ([[79, 2131], [269, 2131], [269, 2173], [79, 2173]],</span><br><span class=\"line\">  <span class=\"string\">'立即点击进入'</span>,</span><br><span class=\"line\">  0.6082888941606105),</span><br><span class=\"line\"> ([[510, 2128], [644, 2128], [644, 2172], [510, 2172]],</span><br><span class=\"line\">  <span class=\"string\">'防范诈骗'</span>,</span><br><span class=\"line\">  0.952128529548645),</span><br><span class=\"line\"> ([[663, 2129], [793, 2129], [793, 2173], [663, 2173]],</span><br><span class=\"line\">  <span class=\"string\">'保护你我'</span>,</span><br><span class=\"line\">  0.9819014668464661)]</span><br><span class=\"line\"><span class=\"comment\"># 设置 --detail=0 输出更简单</span></span><br><span class=\"line\">&gt;&gt;&gt; result = reader.readtext(<span class=\"string\">'00e336dbde464c809ef1f6ea568d4621.png'</span>, detail = 0)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>使用说明</strong></p>\n<ul>\n<li>Note 1.在使<code>easyocr.Reader([&#39;ch_sim&#39;,&#39;en&#39;])</code>于将模型加载到内存中(可能会耗费一些时间), 并且我们需要设定默认阅读的语言列表, 可以同时使用多种语言，但并非所有语言都可以一起使用, 而通常会采用英语与其他语言联合。 </li>\n</ul>\n<p>下面列举出可用语言及其语言对应列表 (<a href=\"https://www.jaided.ai/easyocr/\" target=\"_blank\" rel=\"noopener\">https://www.jaided.ai/easyocr/</a>) :<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于我们来说常用语言如下:</span></span><br><span class=\"line\"><span class=\"comment\"># Language\tCode Name</span></span><br><span class=\"line\">Simplified Chinese\tch_sim</span><br><span class=\"line\">Traditional Chinese\tch_tra</span><br><span class=\"line\">English\ten</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 所选语言的模型权重将自动下载，或者您可以从模型中心 并将它们放在<code>~/.EasyOCR/model</code>文件夹中 </p>\n<ul>\n<li><p>Note 2.如果<code>--gpu=True</code>设置为True, 而机器又没有GPU支持的化将默认采用 CPU ，所以通常你会看到如下提示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果您没有 GPU，或者您的 GPU 内存不足，您可以通过添加 gpu=False. </span></span><br><span class=\"line\">CUDA not available - defaulting to CPU. Note: This module is much faster with a GPU.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Note 3.在reader.readtext(‘参数值’)函数中的参数值,可以是图片路径、也可是图像文件字节或者 OpenCV 图像对象（numpy 数组）以及互联网上图像的URL 等几种方式.</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 图像路径</span></span><br><span class=\"line\">reader.readtext(<span class=\"string\">'chinese.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 图像URL</span></span><br><span class=\"line\">reader.readtext(<span class=\"string\">'https://www.weiyigeek.top/wechat.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 图形字节</span></span><br><span class=\"line\">with open(<span class=\"string\">\"chinese_tra.jpg\"</span>, <span class=\"string\">\"rb\"</span>) as f:</span><br><span class=\"line\">  img = f.read()</span><br><span class=\"line\">result = reader.readtext(img)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 图像作为 numpy 数组（来自 opencv）传递</span></span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'chinese_tra.jpg'</span>)</span><br><span class=\"line\">result = reader.readtext(img)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Note 3.从上面结果可以看出输出结果将采用列表格式，每个项目分别代表一个<code>边界框(四个点)、检测到的文本和可信度</code>。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[347, 844], [653, 844], [653, 892], [347, 892]],  <span class=\"comment\"># 边界 1 --&gt; 2 -&gt; 3 -&gt; 4</span></span><br><span class=\"line\"> <span class=\"string\">'请收下绿色行程卡'</span>,       <span class=\"comment\"># 文本</span></span><br><span class=\"line\"> 0.9120484515458063),     <span class=\"comment\"># 可信度</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Note 4.我们也可以在命令行中直接调用easyocr。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法示例:</span></span><br><span class=\"line\">usage: easyocr [-h] -l LANG [LANG ...] [--gpu &#123;True,False&#125;] [--model_storage_directory MODEL_STORAGE_DIRECTORY]</span><br><span class=\"line\">  [--user_network_directory USER_NETWORK_DIRECTORY] [--recog_network RECOG_NETWORK]</span><br><span class=\"line\">  [--download_enabled &#123;True,False&#125;] [--detector &#123;True,False&#125;] [--recognizer &#123;True,False&#125;]</span><br><span class=\"line\">  [--verbose &#123;True,False&#125;] [--quantize &#123;True,False&#125;] -f FILE</span><br><span class=\"line\">  [--decoder &#123;greedy,beamsearch,wordbeamsearch&#125;] [--beamWidth BEAMWIDTH] [--batch_size BATCH_SIZE]</span><br><span class=\"line\">  [--workers WORKERS] [--allowlist ALLOWLIST] [--blocklist BLOCKLIST] [--detail &#123;0,1&#125;]</span><br><span class=\"line\">  [--rotation_info ROTATION_INFO] [--paragraph &#123;True,False&#125;] [--min_size MIN_SIZE]</span><br><span class=\"line\">  [--contrast_ths CONTRAST_THS] [--adjust_contrast ADJUST_CONTRAST] [--text_threshold TEXT_THRESHOLD]</span><br><span class=\"line\">  [--low_text LOW_TEXT] [--link_threshold LINK_THRESHOLD] [--canvas_size CANVAS_SIZE]</span><br><span class=\"line\">  [--mag_ratio MAG_RATIO] [--slope_ths SLOPE_THS] [--ycenter_ths YCENTER_THS] [--height_ths HEIGHT_THS]</span><br><span class=\"line\">  [--width_ths WIDTH_THS] [--y_ths Y_THS] [--x_ths X_THS] [--add_margin ADD_MARGIN]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 案例:</span></span><br><span class=\"line\">$ easyocr -l ch_sim en -f chinese.jpg --detail=1 --gpu=False</span><br><span class=\"line\">$ easyocr -l ch_sim en -f .\\0a1e948e90964d42b435d63c9f0aa268.png --detail=0 --gpu=True</span><br><span class=\"line\">  <span class=\"comment\"># CUDA not available - defaulting to CPU. Note: This module is much faster with a GPU.</span></span><br><span class=\"line\">....</span><br><span class=\"line\">请收下绿色行程卡</span><br><span class=\"line\">191****8499的动态行程卡</span><br><span class=\"line\">更新于:2022.05.2510:49:21</span><br><span class=\"line\">您于前14夭内到达或途经:  重庆市</span><br><span class=\"line\">结果包含您在前14天内到访的国家(地区)与停留4小时以上的国内城市</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"方法参数\"><a href=\"#方法参数\" class=\"headerlink\" title=\"方法参数\"></a>方法参数</h3><p>描述: 官方提供的包的模块方法以及参数说明, 参考地址 ( <a href=\"https://www.jaided.ai/easyocr/documentation/\" target=\"_blank\" rel=\"noopener\">https://www.jaided.ai/easyocr/documentation/</a> )</p>\n<ul>\n<li><p>1.EasyOCR 的基类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">easyocr.Reader([<span class=\"string\">'ch_sim'</span>,<span class=\"string\">'en'</span>], gpu=<span class=\"literal\">False</span>, model_storage_directory=<span class=\"string\">\"~/.EasyOCR/.\"</span>,download_enabled=<span class=\"literal\">True</span>, user_network_directory=<span class=\"string\">\"~/.EasyOCR/user_network\"</span>,recog_network=<span class=\"string\">\"recog_network\"</span>,detector=<span class=\"literal\">True</span>,recognizer=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># download_enabled ：如果 EasyOCR 无法找到模型文件，则启用下载</span></span><br><span class=\"line\"><span class=\"comment\"># model_storage_directory: 模型数据目录的路径</span></span><br><span class=\"line\"><span class=\"comment\"># user_network_directory: 用户定义识别网络的路径</span></span><br><span class=\"line\"><span class=\"comment\"># detector : 加载检测模型到内存中</span></span><br><span class=\"line\"><span class=\"comment\"># recognizer : 加载识别模型到内存中</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.Reader 对象的主要方法, 有 4 组参数：General、Contrast、Text Detection 和 Bounding Box Merging, 其返回值为列表形式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader.readtext(</span><br><span class=\"line\">  <span class=\"string\">'chinese.jpg'</span>,image,decoder=<span class=\"string\">'greedy'</span>,beamWidth=5,batch_size=1,workers=0,allowlist=<span class=\"string\">\"ch_sim\"</span>,blocklist=<span class=\"string\">\"ch_tra\"</span>,detail=1,paragraph=False,min_size=10,rotation_info=[90, 180 ,270],</span><br><span class=\"line\">  contrast_ths = 0.1, adjust_contrast = 0.5,</span><br><span class=\"line\">  text_threshold = 0.7, low_text = 0.4,link_threshold = 0.4, canvas_size = 2560, mag_ratio = 1,</span><br><span class=\"line\">  slope_ths = 0.1, ycenter_ths = 0.5, height_ths = 0.5, width_ths = 0.5, add_margin = 0.1, x_ths = 1.0, y_ths = 0.5</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters 1: General</span></span><br><span class=\"line\">--batch_size : 当其值大于 1 时将使 EasyOCR 更快，但使用更多内存。</span><br><span class=\"line\">--allowlist : 强制 EasyOCR 仅识别字符子集。  对特定问题有用（例如车牌等）</span><br><span class=\"line\">--detail : 将此设置为 0 以进行简单输出.</span><br><span class=\"line\">--paragraph ：将结果合并到段落中</span><br><span class=\"line\">--min_size: 过滤小于像素最小值的文本框</span><br><span class=\"line\">--rotation_info:允许 EasyOCR 旋转每个文本框并返回具有最高置信度分数的文本框。例如，对所有可能的文本方向尝试 [90, 180 ,270]。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters 2: Contrast</span></span><br><span class=\"line\">--contrast_ths : 对比度低于此值的文本框将被传入模型 2 次,首先是原始图像，其次是对比度调整为“adjust_contrast”值,结果将返回具有更高置信度的那个。</span><br><span class=\"line\">--adjust_contrast : 低对比度文本框的目标对比度级别</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters 3: Text Detection (from CRAFT)</span></span><br><span class=\"line\">--text_threshold: 文本置信度阈值</span><br><span class=\"line\">--link_threshold: 链接置信度阈值</span><br><span class=\"line\">--canvas_size: 最大图像尺寸,大于此值的图像将被缩小。</span><br><span class=\"line\">--mag_ratio: 图像放大率</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Parameters 4: Bounding Box Merging</span></span><br><span class=\"line\">height_ths (<span class=\"built_in\">float</span>, default = 0.5) - 盒子高度的最大差异,不应合并文本大小差异很大的框。</span><br><span class=\"line\">width_ths (<span class=\"built_in\">float</span>, default = 0.5) - 合并框的最大水平距离。</span><br><span class=\"line\">x_ths (<span class=\"built_in\">float</span>, default = 1.0) - 当段落 = True 时合并文本框的最大水平距离。</span><br><span class=\"line\">y_ths (<span class=\"built_in\">float</span>, default = 0.5) - 当段落 = True 时合并文本框的最大垂直距离。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.detect method, 检测文本框的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parameters</span><br><span class=\"line\">  image (string, numpy array, byte) - Input image</span><br><span class=\"line\">  min_size (int, default = 10) - Filter text box smaller than minimum value <span class=\"keyword\">in</span> pixel</span><br><span class=\"line\">  text_threshold (<span class=\"built_in\">float</span>, default = 0.7) - Text confidence threshold</span><br><span class=\"line\">  low_text (<span class=\"built_in\">float</span>, default = 0.4) - Text low-bound score</span><br><span class=\"line\">  link_threshold (<span class=\"built_in\">float</span>, default = 0.4) - Link confidence threshold</span><br><span class=\"line\">  canvas_size (int, default = 2560) - Maximum image size. Image bigger than this value will be resized down.</span><br><span class=\"line\">  mag_ratio (<span class=\"built_in\">float</span>, default = 1) - Image magnification ratio</span><br><span class=\"line\">  slope_ths (<span class=\"built_in\">float</span>, default = 0.1) - Maximum slope (delta y/delta x) to considered merging. Low value means tiled boxes will not be merged.</span><br><span class=\"line\">  ycenter_ths (<span class=\"built_in\">float</span>, default = 0.5) - Maximum <span class=\"built_in\">shift</span> <span class=\"keyword\">in</span> y direction. Boxes with different level should not be merged.</span><br><span class=\"line\">  height_ths (<span class=\"built_in\">float</span>, default = 0.5) - Maximum different <span class=\"keyword\">in</span> box height. Boxes with very different text size should not be merged.</span><br><span class=\"line\">  width_ths (<span class=\"built_in\">float</span>, default = 0.5) - Maximum horizontal distance to merge boxes.</span><br><span class=\"line\">  add_margin (<span class=\"built_in\">float</span>, default = 0.1) - Extend bounding boxes <span class=\"keyword\">in</span> all direction by certain value. This is important <span class=\"keyword\">for</span> language with complex script (E.g. Thai).</span><br><span class=\"line\">  optimal_num_chars (int, default = None) - If specified, bounding boxes with estimated number of characters near this value are returned first.</span><br><span class=\"line\"></span><br><span class=\"line\">Return horizontal_list, free_list - horizontal_list is a list of regtangular text boxes. The format is [x_min, x_max, y_min, y_max]. free_list is a list of free-form text boxes. The format is [[x1,y1],[x2,y2],[x3,y3],[x4,y4]].</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.recognize method, 从文本框中识别字符的方法,如果未给出 Horizo​​ntal_list 和 free_list,它将整个图像视为一个文本框。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Parameters</span><br><span class=\"line\">  image (string, numpy array, byte) - Input image</span><br><span class=\"line\">  horizontal_list (list, default=None) - see format from output of detect method</span><br><span class=\"line\">  free_list (list, default=None) - see format from output of detect method</span><br><span class=\"line\">  decoder (string, default = <span class=\"string\">'greedy'</span>) - options are <span class=\"string\">'greedy'</span>, <span class=\"string\">'beamsearch'</span> and <span class=\"string\">'wordbeamsearch'</span>.</span><br><span class=\"line\">  beamWidth (int, default = 5) - How many beam to keep when decoder = <span class=\"string\">'beamsearch'</span> or <span class=\"string\">'wordbeamsearch'</span></span><br><span class=\"line\">  batch_size (int, default = 1) - batch_size&gt;1 will make EasyOCR faster but use more memory</span><br><span class=\"line\">  workers (int, default = 0) - Number thread used <span class=\"keyword\">in</span> of dataloader</span><br><span class=\"line\">  allowlist (string) - Force EasyOCR to recognize only subset of characters. Useful <span class=\"keyword\">for</span> specific problem (E.g. license plate, etc.)</span><br><span class=\"line\">  blocklist (string) - Block subset of character. This argument will be ignored <span class=\"keyword\">if</span> allowlist is given.</span><br><span class=\"line\">  detail (int, default = 1) - Set this to 0 <span class=\"keyword\">for</span> simple output</span><br><span class=\"line\">  paragraph (bool, default = False) - Combine result into paragraph</span><br><span class=\"line\">  contrast_ths (<span class=\"built_in\">float</span>, default = 0.1) - Text box with contrast lower than this value will be passed into model 2 <span class=\"built_in\">times</span>. First is with original image and second with contrast adjusted to <span class=\"string\">'adjust_contrast'</span> value. The one with more confident level will be returned as a result.</span><br><span class=\"line\">  adjust_contrast (<span class=\"built_in\">float</span>, default = 0.5) - target contrast level <span class=\"keyword\">for</span> low contrast text box</span><br><span class=\"line\"></span><br><span class=\"line\">Return list of results</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x02-实践案例\"><a href=\"#0x02-实践案例\" class=\"headerlink\" title=\"0x02 实践案例\"></a>0x02 实践案例</h2><h3 id=\"1-批量识别行程码图片\"><a href=\"#1-批量识别行程码图片\" class=\"headerlink\" title=\"1.批量识别行程码图片\"></a>1.批量识别行程码图片</h3><p>描述: 公司有业务需求做一个行程码识别, 当前是调用某云的文字识别接口来识别行程码, 而其按照调用次数进行计费, 所以为了节约成本就要Python参考了Github上大佬的们项目, 截取部分函数，并使用Flask Web 框架进行封装，从而实现通过网页进行请求调用，并返回JSON字符串。</p>\n<p>项目源码Github地址：<a href=\"https://github.com/WeiyiGeek/SecOpsDev/tree/master/Project/Python/EasyOCR/Travelcodeocr\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Project/Python/EasyOCR/Travelcodeocr</a></p>\n<p><strong>项目实践</strong><br>步骤 01.安装flask及其依赖模块的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 02.项目路径以及图片路径  <code>D:\\Study\\Project</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\Study\\Project&gt; ls</span><br><span class=\"line\">    目录: D:\\Study\\Project</span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         2022/5/25     15:59                img</span><br><span class=\"line\">d-----         2022/5/26     21:17                templates</span><br><span class=\"line\">-a----         2022/5/25     19:34           3966 setup.py</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 03.基于Flask web框架下进行调用EasyOCR执行图片文字识别的python代码(v1 版本).<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># ####################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Description: 基于easyocr实现大数据通信行程卡图片识别信息获取-Flask项目。</span></span><br><span class=\"line\"><span class=\"comment\"># Time: 2022年5月25日 17点31分</span></span><br><span class=\"line\"><span class=\"comment\"># Blog: https://www.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># Email: master@weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># 环境依赖与模块安装, 建议 Python 3.8.x 的环境下进行</span></span><br><span class=\"line\"><span class=\"comment\"># pip install flask</span></span><br><span class=\"line\"><span class=\"comment\"># pip install easyocr</span></span><br><span class=\"line\"><span class=\"comment\"># ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># 行程码有绿色、黄色、橙色、红色四种颜色。</span></span><br><span class=\"line\"><span class=\"comment\"># 1、红卡：行程中的中高风险地市将标记为红色字体作提示。</span></span><br><span class=\"line\"><span class=\"comment\"># 2、橙卡：新冠肺炎确诊或疑似患者的密切接触者。</span></span><br><span class=\"line\"><span class=\"comment\"># 3、黄卡：海外国家和地区。</span></span><br><span class=\"line\"><span class=\"comment\"># 4、绿卡：其他地区。行程卡结果包含在前14天内到访的国家（地区）与停留4小时以上的国内城市。色卡仅对到访地作提醒，不关联健康状况。</span></span><br><span class=\"line\"><span class=\"comment\"># #####################################################################</span></span><br><span class=\"line\">import os,sys</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import re</span><br><span class=\"line\">import glob</span><br><span class=\"line\">import json</span><br><span class=\"line\">import easyocr</span><br><span class=\"line\">from flask import Flask, jsonify, request,render_template</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">from werkzeug.utils import secure_filename</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import collections</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目运行路径与行程码图片路径定义</span></span><br><span class=\"line\">RUNDIR = None</span><br><span class=\"line\">IMGDIR = None</span><br><span class=\"line\">colorDict= &#123;<span class=\"string\">\"red\"</span>: <span class=\"string\">\"红色\"</span>, <span class=\"string\">\"red1\"</span>: <span class=\"string\">\"红色\"</span>, <span class=\"string\">\"orange\"</span>: <span class=\"string\">\"橙色\"</span>, <span class=\"string\">\"yellow\"</span>: <span class=\"string\">\"黄色\"</span>, <span class=\"string\">\"green\"</span>: <span class=\"string\">\"绿色\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def getColorList():</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 定义字典存放 HSV 颜色分量上下限 (HSV-RGB)</span></span><br><span class=\"line\"><span class=\"string\">  例如：&#123;颜色: [min分量, max分量]&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;'red': [array([160, 43, 46]), array([179, 255, 255])]&#125;</span></span><br><span class=\"line\"><span class=\"string\">  返回值: 专门的容器数据类型，提供Python通用内置容器、dict、list、set和tuple的替代品。</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  dict = collections.defaultdict(list)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 红色</span></span><br><span class=\"line\">  lower_red = np.array([156, 43, 46])</span><br><span class=\"line\">  upper_red = np.array([180, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_red)</span><br><span class=\"line\">  color_list.append(upper_red)</span><br><span class=\"line\">  dict[<span class=\"string\">'red'</span>]=color_list</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 红色2</span></span><br><span class=\"line\">  lower_red = np.array([0, 43, 46])</span><br><span class=\"line\">  upper_red = np.array([10, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_red)</span><br><span class=\"line\">  color_list.append(upper_red)</span><br><span class=\"line\">  dict[<span class=\"string\">'red2'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 橙色</span></span><br><span class=\"line\">  lower_orange = np.array([11, 43, 46])</span><br><span class=\"line\">  upper_orange = np.array([25, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_orange)</span><br><span class=\"line\">  color_list.append(upper_orange)</span><br><span class=\"line\">  dict[<span class=\"string\">'orange'</span>] = color_list</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 黄色</span></span><br><span class=\"line\">  lower_yellow = np.array([26, 43, 46])</span><br><span class=\"line\">  upper_yellow = np.array([34, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_yellow)</span><br><span class=\"line\">  color_list.append(upper_yellow)</span><br><span class=\"line\">  dict[<span class=\"string\">'yellow'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 绿色</span></span><br><span class=\"line\">  lower_green = np.array([35, 43, 46])</span><br><span class=\"line\">  upper_green = np.array([77, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_green)</span><br><span class=\"line\">  color_list.append(upper_green)</span><br><span class=\"line\">  dict[<span class=\"string\">'green'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">return</span> dict</span><br><span class=\"line\"></span><br><span class=\"line\">def getTravelcodeColor(img_np):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 利用阈值返回行程码主页颜色</span></span><br><span class=\"line\"><span class=\"string\">  参数值: cv2.imread() 读取的图像对象(np数组)</span></span><br><span class=\"line\"><span class=\"string\">  返回值: 行程卡颜色&#123;红、橙、绿&#125;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  hsv = cv2.cvtColor(img_np, cv2.COLOR_BGR2HSV)</span><br><span class=\"line\">  maxsum = -100</span><br><span class=\"line\">  color = None</span><br><span class=\"line\">  color_dict = getColorList()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> color_dict:</span><br><span class=\"line\">    mask = cv2.inRange(hsv,color_dict[d][0],color_dict[d][1])</span><br><span class=\"line\">    <span class=\"comment\"># cv2.imwrite(os.path.join(os.path.abspath(os.curdir),\"img\",d+'.jpg')  ,mask)</span></span><br><span class=\"line\">    binary = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)[1]</span><br><span class=\"line\">    binary = cv2.dilate(binary,None,iterations=2)</span><br><span class=\"line\">    cnts, hiera = cv2.findContours(binary.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class=\"line\">    sum = 0</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cnts:</span><br><span class=\"line\">      sum+=cv2.contourArea(c)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> sum &gt; maxsum :</span><br><span class=\"line\">      maxsum = sum</span><br><span class=\"line\">      color = d</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">return</span> colorDict[color]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def information_filter(file_path,img_np,text_str):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 提出ocr识别的行程码</span></span><br><span class=\"line\"><span class=\"string\">  参数值：字符串,文件名称</span></span><br><span class=\"line\"><span class=\"string\">  返回值：有效信息组成的字典</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 健康码字段</span></span><br><span class=\"line\">  try:</span><br><span class=\"line\">    re_healthcode = re.compile(<span class=\"string\">'请收下(.&#123;,2&#125;)行程卡'</span>)</span><br><span class=\"line\">    healthcode = re_healthcode.findall(text_str)[0]</span><br><span class=\"line\">  except Exception as _:</span><br><span class=\"line\">    healthcode = getTravelcodeColor(img_np)  <span class=\"comment\"># 文字无法识别时采用图片颜色识别</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Get Photo Color = \"</span>,healthcode)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 电话字段</span></span><br><span class=\"line\">  re_phone = re.compile(<span class=\"string\">'[0-9]&#123;3&#125;\\*&#123;4&#125;[0-9]&#123;4&#125;'</span>)</span><br><span class=\"line\">  phone_str = re_phone.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 日期字段</span></span><br><span class=\"line\">  re_data = re.compile(<span class=\"string\">'2022\\.[0-1][0-9]\\.[0-3][0-9]'</span>)</span><br><span class=\"line\">  data_str = re_data.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 时间字段</span></span><br><span class=\"line\">  re_time = re.compile(<span class=\"string\">'[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'</span>)</span><br><span class=\"line\">  time_str = re_time.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 地区城市字段</span></span><br><span class=\"line\">  citys_re = re.compile(<span class=\"string\">'到达或途经:(.+)结果包含'</span>)</span><br><span class=\"line\">  citys_str = citys_re.findall(text_str)[0].strip().split(<span class=\"string\">'('</span>)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  result_dic = &#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"succ\"</span>, <span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"类型\"</span>: healthcode, <span class=\"string\">\"电话\"</span>: phone_str, <span class=\"string\">\"日期\"</span>: data_str, <span class=\"string\">\"时间\"</span>: time_str, <span class=\"string\">\"行程\"</span>: citys_str&#125;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"\\033[032m\"</span>,result_dic,<span class=\"string\">\"\\033[0m\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def getTravelcodeInfo(filename, img_np):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 返回以JSON字符串格式过滤后结果</span></span><br><span class=\"line\"><span class=\"string\">  参数值：文件名称,图像作为 numpy 数组（来 opencv传递</span></span><br><span class=\"line\"><span class=\"string\">  返回值：JSON字符串格式</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 灰度处理</span></span><br><span class=\"line\">  img_gray = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">  <span class=\"comment\"># 阈值二进制 - &gt; 127 设置为255(白)，否则0(黑) -&gt; 淡白得更白,淡黑更黑</span></span><br><span class=\"line\">  _,img_thresh = cv2.threshold(img_gray,180,255,cv2.THRESH_BINARY)</span><br><span class=\"line\">  <span class=\"comment\"># 图像 OCR 识别</span></span><br><span class=\"line\">  text = reader.readtext(img_thresh, detail=0, batch_size=10) </span><br><span class=\"line\">  result_dic = information_filter(filename, img_np, <span class=\"string\">\"\"</span>.join(text))</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由 - 首页</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">@app.route(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">def Index():</span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"string\">\"&lt;h4 style='text-algin:center'&gt;https://www.weiyigeek.top&lt;/h4&gt;&lt;script&gt;window.location.href='https://www.weiyigeek.top'&lt;/script&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由 - /tools/ocr</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/tools/ocr'</span>,methods=[<span class=\"string\">\"GET\"</span>])</span><br><span class=\"line\">def Travelcodeocr():</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  请求路径: /tools/ocr</span></span><br><span class=\"line\"><span class=\"string\">  请求参数: (/tools/ocr?file=20220520/test.png, /tools/ocr?dir=20220520)</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  filename = request.args.get(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">  dirname = request.args.get(<span class=\"string\">\"dir\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (filename):</span><br><span class=\"line\">    img_path = os.path.join(IMGDIR, filename)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (os.path.exists(img_path)):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(img_path)  <span class=\"comment\"># 打印路径</span></span><br><span class=\"line\">      img_np = cv2.imread(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">      try:</span><br><span class=\"line\">        result_dic_succ = getTravelcodeInfo(filename,img_np)</span><br><span class=\"line\">      except Exception as err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\033[31m\"</span>+ img_path + <span class=\"string\">\" --&gt;&gt; \"</span> + str(err) + <span class=\"string\">\"\\033[0m\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> json.dumps(&#123;<span class=\"string\">\"status\"</span>:<span class=\"string\">\"err\"</span>, <span class=\"string\">\"img\"</span>: filename&#125;).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125; </span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"built_in\">return</span> json.dumps(result_dic_succ, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"err\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"文件\"</span>+img_path+<span class=\"string\">\"路径不存在.\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">elif</span> (dirname and os.path.join(IMGDIR, dirname)):</span><br><span class=\"line\">    result_dic_all = []</span><br><span class=\"line\">    result_dic_err = []</span><br><span class=\"line\">    img_path_all =  glob.iglob(os.path.join(os.path.join(IMGDIR,dirname)+<span class=\"string\">\"/*.[p|j]*g\"</span>))   <span class=\"comment\"># 正则匹配 png|jpg|jpeg 后缀的后缀,返回的是迭代器。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> img_path <span class=\"keyword\">in</span> img_path_all:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(img_path) <span class=\"comment\"># 打印路径</span></span><br><span class=\"line\">      img_np = cv2.imread(img_path)</span><br><span class=\"line\"></span><br><span class=\"line\">      try:</span><br><span class=\"line\">        result_dic_succ = getTravelcodeInfo(os.path.join(dirname,os.path.basename(img_path)),img_np)</span><br><span class=\"line\">      except Exception as err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\033[31m\"</span>+ img_path + <span class=\"string\">\" --&gt;&gt; \"</span> + str(err) + <span class=\"string\">\"\\033[0m\"</span>) <span class=\"comment\"># 输出识别错误的图像</span></span><br><span class=\"line\">        result_dic_err.append(img_path)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 成功则加入到List列表中</span></span><br><span class=\"line\">      result_dic_all.append(result_dic_succ)</span><br><span class=\"line\"></span><br><span class=\"line\">    res_succ_json=json.dumps(result_dic_all, ensure_ascii=False)</span><br><span class=\"line\">    res_err_json=json.dumps(result_dic_err, ensure_ascii=False)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(os.path.join(IMGDIR, dirname, dirname + <span class=\"string\">\"-succ.json\"</span>),<span class=\"string\">'w'</span>) as succ:</span><br><span class=\"line\">      succ.write(res_succ_json)</span><br><span class=\"line\">    with open(os.path.join(IMGDIR, dirname,  dirname + <span class=\"string\">\"-err.json\"</span>),<span class=\"string\">'w'</span>) as error:</span><br><span class=\"line\">      error.write(res_err_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> res_succ_json.encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"err\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"请求参数有误!\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由 - /tools/upload/ocr</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/tools/upload/ocr'</span>,methods=[<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"POST\"</span>])</span><br><span class=\"line\">def TravelcodeUploadocr():</span><br><span class=\"line\">  <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">    unix = datetime.now().strftime(<span class=\"string\">'%Y%m%d-%H%M%S%f'</span>)</span><br><span class=\"line\">    f = request.files[<span class=\"string\">'file'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f.mimetype == <span class=\"string\">'image/jpeg'</span> or f.mimetype == <span class=\"string\">'image/png'</span>):</span><br><span class=\"line\">      filedate = unix.split(<span class=\"string\">\"-\"</span>)[0]</span><br><span class=\"line\">      filesuffix = f.mimetype.split(<span class=\"string\">\"/\"</span>)[-1]</span><br><span class=\"line\">      uploadDir = os.path.join(<span class=\"string\">'img'</span>,filedate)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 判断上传文件目录是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (not os.path.exists(uploadDir)):</span><br><span class=\"line\">        os.makedirs(uploadDir)</span><br><span class=\"line\"></span><br><span class=\"line\">      img_path = os.path.join(uploadDir,secure_filename(unix+<span class=\"string\">\".\"</span>+filesuffix))  <span class=\"comment\"># 图片路径拼接</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span>(img_path)     <span class=\"comment\"># 打印路径</span></span><br><span class=\"line\">      f.save(img_path)    <span class=\"comment\"># 写入图片</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 判断上传文件是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (os.path.exists(img_path)):</span><br><span class=\"line\">        img_np = cv2.imread(img_path)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">          result_dic_succ = getTravelcodeInfo(os.path.join(filedate,os.path.basename(img_path)),img_np)</span><br><span class=\"line\">        except Exception as err:</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(<span class=\"string\">\"\\033[31m\"</span>+ err + <span class=\"string\">\"\\033[0m\"</span>)</span><br><span class=\"line\">          <span class=\"built_in\">return</span> json.dumps(&#123;<span class=\"string\">\"status\"</span>:<span class=\"string\">\"err\"</span>, <span class=\"string\">\"img\"</span>: img_path&#125;).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> json.dumps(result_dic_succ, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"err\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"文件\"</span>+img_path+<span class=\"string\">\"路径不存在!\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"err\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"不能上传除 jpg 与 png 格式以外的图片\"</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 程序入口</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  try:</span><br><span class=\"line\">    RUNDIR = sys.argv[1]</span><br><span class=\"line\">    IMGDIR = sys.argv[2]</span><br><span class=\"line\">  except Exception as e:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Uage:\"</span>+ sys.argv[0] + <span class=\"string\">\" RUNDIR IMGDIR\"</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Default:\"</span>+ sys.argv[0] + <span class=\"string\">\" ./ ./img\"</span> + <span class=\"string\">\"\\n\"</span> )</span><br><span class=\"line\">    RUNDIR = os.path.abspath(os.curdir)</span><br><span class=\"line\">    IMGDIR = os.path.join(RUNDIR,<span class=\"string\">\"img\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># finally:</span></span><br><span class=\"line\">  <span class=\"comment\">#   if os.path.exists(RUNDIR):</span></span><br><span class=\"line\">  <span class=\"comment\">#     RUNDIR = os.path.abspath(os.curdir)</span></span><br><span class=\"line\">  <span class=\"comment\">#   if os.path.exists(IMGDIR):</span></span><br><span class=\"line\">  <span class=\"comment\">#     IMGDIR = os.path.join(RUNDIR,\"img\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 使用easyocr模块中的Reader方法, 设置识别中英文两种语言</span></span><br><span class=\"line\">  reader = easyocr.Reader([<span class=\"string\">'ch_sim'</span>, <span class=\"string\">'en'</span>], gpu=False) </span><br><span class=\"line\">  <span class=\"comment\"># 使用Flask模块运行web</span></span><br><span class=\"line\">  app.run(host=<span class=\"string\">'0.0.0.0'</span>, port=8000, debug=True)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<ul>\n<li>步骤 03.运行该脚本并使用浏览进行指定行程码图片路径以及识别提取。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\setup.py</span><br><span class=\"line\">  <span class=\"comment\"># Using CPU. Note: This module is much faster with a GPU.</span></span><br><span class=\"line\">  <span class=\"comment\"># * Serving Flask app 'index' (lazy loading)</span></span><br><span class=\"line\">  <span class=\"comment\"># * Environment: production</span></span><br><span class=\"line\">  <span class=\"comment\">#   WARNING: This is a development server. Do not use it in a production deployment.</span></span><br><span class=\"line\">  <span class=\"comment\">#   Use a production WSGI server instead.</span></span><br><span class=\"line\">  <span class=\"comment\"># * Debug mode: on</span></span><br><span class=\"line\">  <span class=\"comment\"># * Running on all addresses (0.0.0.0)</span></span><br><span class=\"line\">  <span class=\"comment\">#   WARNING: This is a development server. Do not use it in a production deployment.</span></span><br><span class=\"line\">  <span class=\"comment\"># * Running on http://127.0.0.1:8000</span></span><br><span class=\"line\">  <span class=\"comment\"># * Running on http://10.20.172.106:8000 (Press CTRL+C to quit)</span></span><br><span class=\"line\">  <span class=\"comment\"># * Restarting with stat</span></span><br><span class=\"line\">  <span class=\"comment\"># Using CPU. Note: This module is much faster with a GPU.</span></span><br><span class=\"line\">  <span class=\"comment\"># * Debugger is active!</span></span><br><span class=\"line\">  <span class=\"comment\"># * Debugger PIN: 115-313-307</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: 从上面的Python脚本中可以看出我们可使用file参数指定图片路径或者使用dir参数指定行程码图片存放目录(默认在img目录下的子目录)。</p>\n<p>例如，获取单个行程码图片信息，我本地浏览器访问<code>http://127.0.0.1:8000/tools/ocr?file=20220530/00e336dbde464c809ef1f6ea568d4621.png</code>地址,将会返回如下JSON字符串。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\Study\\Project\\img\\20220530\\00e336dbde464c809ef1f6ea568d4621.png</span><br><span class=\"line\">127.0.0.1 - - [01/Jun/2022 16:58:58] <span class=\"string\">\"GET /tools/upload/ocr HTTP/1.1\"</span> 200 -</span><br><span class=\"line\">&#123;<span class=\"string\">'status'</span>: <span class=\"string\">'succ'</span>, <span class=\"string\">'file'</span>: <span class=\"string\">'20220530\\\\00e336dbde464c809ef1f6ea568d4621.png'</span>, <span class=\"string\">'类型'</span>: <span class=\"string\">'绿色'</span>, <span class=\"string\">'电话'</span>: <span class=\"string\">'157****2966'</span>, <span class=\"string\">'日期'</span>: <span class=\"string\">'2022.05.25'</span>, <span class=\"string\">'时间'</span>: <span class=\"string\">'09:03:56'</span>, <span class=\"string\">'行程'</span>: <span class=\"string\">'重庆市'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>例如，获取多个行程码图片识别信息，我本地浏览器访问<code>http://127.0.0.1:8000/tools/ocr?dir=20220530</code>地址,将会返回如下图所示结果。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220601170820.png\" alt=\"WeiyiGeek.批量获取行程码图片信息\" title=\"\" class=\"\">\n                <p>WeiyiGeek.批量获取行程码图片信息</p>\n            </figure>\n<p>例如, 我们可以上传并识别行程码图片信息，本地浏览器访问<code>http://127.0.0.1:8000/tools/upload/ocr</code>地址,将会返回如下图所示结果。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220601171033.png\" alt=\"WeiyiGeek.上传并识别行程码图片信息\" title=\"\" class=\"\">\n                <p>WeiyiGeek.上传并识别行程码图片信息</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"2-在k8s集群中运行\"><a href=\"#2-在k8s集群中运行\" class=\"headerlink\" title=\"2.在k8s集群中运行\"></a>2.在k8s集群中运行</h3><hr>\n<h2 id=\"0x03-代码迭代\"><a href=\"#0x03-代码迭代\" class=\"headerlink\" title=\"0x03 代码迭代\"></a>0x03 代码迭代</h2><p>温馨提示: 如下环境依赖与模块安装, 建议 Python 3.8.x 的环境下进行.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip install flask</span></span><br><span class=\"line\"><span class=\"comment\"># pip install easyocr</span></span><br><span class=\"line\"><span class=\"comment\"># pip install gevent</span></span><br><span class=\"line\"><span class=\"comment\"># pip3 install gevent-websocket</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>mylogger.py</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">from</span> logging.handlers <span class=\"keyword\">import</span> TimedRotatingFileHandler</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_PATH = <span class=\"string\">\"log\"</span></span><br><span class=\"line\">LOG_INFO = <span class=\"string\">'_info.log'</span></span><br><span class=\"line\">LOG_ERROR = <span class=\"string\">'_error.log'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">logger</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, prefix_name = <span class=\"string\">\"flask\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> os.path.exists(LOG_PATH)):</span><br><span class=\"line\">      os.makedirs(LOG_PATH)</span><br><span class=\"line\"></span><br><span class=\"line\">    self.prefix = prefix_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建logger日志对象</span></span><br><span class=\"line\">    self.info_logger = logging.getLogger(<span class=\"string\">\"info\"</span>)</span><br><span class=\"line\">    self.error_logger = logging.getLogger(<span class=\"string\">\"error\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 日志的最低输出级别</span></span><br><span class=\"line\">    self.info_logger.setLevel(logging.DEBUG)</span><br><span class=\"line\">    self.error_logger.setLevel(logging.ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 日志格式化</span></span><br><span class=\"line\">    self.format = logging.Formatter(<span class=\"string\">'[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'</span> <span class=\"string\">'[%(levelname)s] : %(message)s'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 按照时间切割文件 Handler 配置</span></span><br><span class=\"line\">    TimeFileHandlerINFO = TimedRotatingFileHandler(<span class=\"string\">\"%s/%s%s\"</span> % (LOG_PATH, prefix_name, LOG_INFO), when=<span class=\"string\">'MIDNIGHT'</span>, encoding=<span class=\"string\">\"utf-8\"</span>, backupCount=<span class=\"number\">8760</span>, delay=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    TimeFileHandlerINFO.suffix = <span class=\"string\">\"%Y-%m-%d.log\"</span></span><br><span class=\"line\">    TimeFileHandlerERROR = TimedRotatingFileHandler(<span class=\"string\">\"%s/%s%s\"</span> % (LOG_PATH, prefix_name, LOG_ERROR), when=<span class=\"string\">'MIDNIGHT'</span>, encoding=<span class=\"string\">\"utf-8\"</span>, backupCount=<span class=\"number\">8760</span>, delay=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    TimeFileHandlerERROR.suffix = <span class=\"string\">\"%Y-%m-%d.log\"</span></span><br><span class=\"line\">    LoggerStream = logging.StreamHandler()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置日志格式化</span></span><br><span class=\"line\">    TimeFileHandlerINFO.setFormatter(self.format)</span><br><span class=\"line\">    TimeFileHandlerERROR.setFormatter(self.format)</span><br><span class=\"line\">    LoggerStream.setFormatter(self.format)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加设置的句柄</span></span><br><span class=\"line\">    self.info_logger.addHandler(TimeFileHandlerINFO)</span><br><span class=\"line\">    <span class=\"comment\"># self.info_logger.addHandler(LoggerStream)</span></span><br><span class=\"line\">    self.error_logger.addHandler(TimeFileHandlerERROR)</span><br><span class=\"line\">    <span class=\"comment\"># self.error_logger.addHandler(LoggerStream)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">debug</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.debug(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.info(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warn</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.warning(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.error(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fatal</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.fatal(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">critical</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.critical(msg, *args, **kwargs)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>setup.py</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># ####################################################################</span></span><br><span class=\"line\"><span class=\"comment\"># Author: WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Description: 基于easyocr实现大数据通信行程卡图片识别信息获取-Flask项目。</span></span><br><span class=\"line\"><span class=\"comment\"># Time: 2022年5月25日 17点31分</span></span><br><span class=\"line\"><span class=\"comment\"># Blog: https://www.weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># Email: master@weiyigeek.top</span></span><br><span class=\"line\"><span class=\"comment\"># Modity: 2022年8月10日 14点53分</span></span><br><span class=\"line\"><span class=\"comment\"># ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># 环境依赖与模块安装, 建议 Python 3.8.x 的环境下进行</span></span><br><span class=\"line\"><span class=\"comment\"># pip install flask</span></span><br><span class=\"line\"><span class=\"comment\"># pip install easyocr</span></span><br><span class=\"line\"><span class=\"comment\"># pip install gevent</span></span><br><span class=\"line\"><span class=\"comment\"># pip3 install gevent-websocket</span></span><br><span class=\"line\"><span class=\"comment\"># ====================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># 行程码有绿色、黄色、橙色、红色四种颜色。</span></span><br><span class=\"line\"><span class=\"comment\"># 1、红卡：行程中的中高风险地市将标记为红色字体作提示。</span></span><br><span class=\"line\"><span class=\"comment\"># 2、橙卡：新冠肺炎确诊或疑似患者的密切接触者。</span></span><br><span class=\"line\"><span class=\"comment\"># 3、黄卡：海外国家和地区。</span></span><br><span class=\"line\"><span class=\"comment\"># 4、绿卡：其他地区。行程卡结果包含在前14天内到访的国家（地区）与停留4小时以上的国内城市。色卡仅对到访地作提醒，不关联健康状况。</span></span><br><span class=\"line\"><span class=\"comment\"># #####################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import os</span><br><span class=\"line\">import cv2</span><br><span class=\"line\">import re</span><br><span class=\"line\">import glob</span><br><span class=\"line\">import json</span><br><span class=\"line\">import easyocr</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import collections</span><br><span class=\"line\">import argparse</span><br><span class=\"line\">from flask import Flask, jsonify, request,render_template</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">from werkzeug.utils import secure_filename</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">from gevent import pywsgi</span><br><span class=\"line\">from mylogger import logger</span><br><span class=\"line\">from logging.handlers import RotatingFileHandler</span><br><span class=\"line\">from geventwebsocket.handler import WebSocketHandler</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行参数</span></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">\"本程序利用easyocr进行图像文字识别，实现行程码与健康码的识别\"</span>,prog=<span class=\"string\">'Easyocr'</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--rundir'</span>,dest=<span class=\"string\">\"rundir\"</span>, <span class=\"built_in\">type</span>=str, <span class=\"built_in\">help</span>=<span class=\"string\">\"指定程序运行目录\"</span>, required=False, default=<span class=\"string\">\"./\"</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--imgdir'</span>,dest=<span class=\"string\">\"imgdir\"</span>, <span class=\"built_in\">type</span>=str, <span class=\"built_in\">help</span>=<span class=\"string\">\"指定图像存放目录\"</span>, required=False, default=<span class=\"string\">\"./img\"</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--gpu'</span>,dest=<span class=\"string\">\"gpu\"</span>, <span class=\"built_in\">type</span>=bool, <span class=\"built_in\">help</span>=<span class=\"string\">\"指定是否使用GPU执行计算(缺省: Flase)\"</span>, required=False, default=False)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--ip'</span>,dest=<span class=\"string\">\"ip\"</span>, <span class=\"built_in\">type</span>=str, <span class=\"built_in\">help</span>=<span class=\"string\">\"指定服务监听网卡(缺省: 0.0.0.0)\"</span>, required=False, default=<span class=\"string\">\"0.0.0.0\"</span>)</span><br><span class=\"line\">parser.add_argument(<span class=\"string\">'--port'</span>,dest=<span class=\"string\">\"port\"</span>, <span class=\"built_in\">type</span>=int, <span class=\"built_in\">help</span>=<span class=\"string\">\"指定服务的端口(缺省: 8000)\"</span>, required=False, default=8000)</span><br><span class=\"line\">args = parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常量定义</span></span><br><span class=\"line\">RUNDIR = args.rundir</span><br><span class=\"line\">IMGDIR = args.imgdir</span><br><span class=\"line\">codeDict = &#123;<span class=\"string\">\"green\"</span>: <span class=\"string\">\"绿码\"</span>, <span class=\"string\">\"yellow\"</span>: <span class=\"string\">\"黄码\"</span>, <span class=\"string\">\"red\"</span>: <span class=\"string\">\"红码\"</span>, <span class=\"string\">\"other\"</span>: <span class=\"string\">\"暂时无法确认\"</span>&#125;</span><br><span class=\"line\">colorDict = &#123;<span class=\"string\">\"red\"</span>: <span class=\"string\">\"红色\"</span>, <span class=\"string\">\"red1\"</span>: <span class=\"string\">\"红色\"</span>, <span class=\"string\">\"orange\"</span>: <span class=\"string\">\"橙色\"</span>, <span class=\"string\">\"yellow\"</span>: <span class=\"string\">\"黄色\"</span>, <span class=\"string\">\"green\"</span>: <span class=\"string\">\"绿色\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def getColorList():</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 定义字典存放 HSV 颜色分量上下限 (HSV-RGB)</span></span><br><span class=\"line\"><span class=\"string\">  例如：&#123;颜色: [min分量, max分量]&#125;</span></span><br><span class=\"line\"><span class=\"string\">      &#123;'red': [array([160, 43, 46]), array([179, 255, 255])]&#125;</span></span><br><span class=\"line\"><span class=\"string\">  返回值: 专门的容器数据类型，提供Python通用内置容器、dict、list、set和tuple的替代品。</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  dict = collections.defaultdict(list)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 红色</span></span><br><span class=\"line\">  lower_red = np.array([156, 43, 46])</span><br><span class=\"line\">  upper_red = np.array([180, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_red)</span><br><span class=\"line\">  color_list.append(upper_red)</span><br><span class=\"line\">  dict[<span class=\"string\">'red'</span>]=color_list</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 红色2</span></span><br><span class=\"line\">  lower_red = np.array([0, 43, 46])</span><br><span class=\"line\">  upper_red = np.array([10, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_red)</span><br><span class=\"line\">  color_list.append(upper_red)</span><br><span class=\"line\">  dict[<span class=\"string\">'red2'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 橙色</span></span><br><span class=\"line\">  lower_orange = np.array([11, 43, 46])</span><br><span class=\"line\">  upper_orange = np.array([25, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_orange)</span><br><span class=\"line\">  color_list.append(upper_orange)</span><br><span class=\"line\">  dict[<span class=\"string\">'orange'</span>] = color_list</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 黄色</span></span><br><span class=\"line\">  lower_yellow = np.array([26, 43, 46])</span><br><span class=\"line\">  upper_yellow = np.array([34, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_yellow)</span><br><span class=\"line\">  color_list.append(upper_yellow)</span><br><span class=\"line\">  dict[<span class=\"string\">'yellow'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 绿色</span></span><br><span class=\"line\">  lower_green = np.array([35, 43, 46])</span><br><span class=\"line\">  upper_green = np.array([77, 255, 255])</span><br><span class=\"line\">  color_list = []</span><br><span class=\"line\">  color_list.append(lower_green)</span><br><span class=\"line\">  color_list.append(upper_green)</span><br><span class=\"line\">  dict[<span class=\"string\">'green'</span>] = color_list</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">return</span> dict</span><br><span class=\"line\"></span><br><span class=\"line\">def getTravelcodeColor(img_np):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 利用阈值返回行程码主页颜色</span></span><br><span class=\"line\"><span class=\"string\">  参数值: cv2.imread() 读取的图像对象(np数组)</span></span><br><span class=\"line\"><span class=\"string\">  返回值: 行程卡颜色&#123;红、橙、绿&#125;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  hsv = cv2.cvtColor(img_np, cv2.COLOR_BGR2HSV)</span><br><span class=\"line\">  maxsum = -100</span><br><span class=\"line\">  color = None</span><br><span class=\"line\">  color_dict = getColorList()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> color_dict:</span><br><span class=\"line\">    mask = cv2.inRange(hsv,color_dict[d][0],color_dict[d][1])</span><br><span class=\"line\">    <span class=\"comment\"># cv2.imwrite(os.path.join(os.path.abspath(os.curdir),\"img\",d+'.jpg')  ,mask)</span></span><br><span class=\"line\">    binary = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)[1]</span><br><span class=\"line\">    binary = cv2.dilate(binary,None,iterations=2)</span><br><span class=\"line\">    cnts, hiera = cv2.findContours(binary.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class=\"line\">    sum = 0</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> cnts:</span><br><span class=\"line\">      sum+=cv2.contourArea(c)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> sum &gt; maxsum :</span><br><span class=\"line\">      maxsum = sum</span><br><span class=\"line\">      color = d</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">return</span> colorDict[color]</span><br><span class=\"line\"></span><br><span class=\"line\">def health_filter(file_path, img_np ,text_str):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: ocr识别的健康码</span></span><br><span class=\"line\"><span class=\"string\">  参数值：字符串,文件名称</span></span><br><span class=\"line\"><span class=\"string\">  返回值：有效信息组成的字典</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 健康码字段</span></span><br><span class=\"line\">  try:</span><br><span class=\"line\">    result_dic = None</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> codeDict:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (text_str.find(codeDict[i]) &gt; 0) :</span><br><span class=\"line\">        result_dic = &#123;<span class=\"string\">\"code\"</span>: 200,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"成功获取健康码图片数据为有健康码状态.\"</span>, <span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"type\"</span>: codeDict[i]&#125;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( i == <span class=\"string\">\"other\"</span> ):</span><br><span class=\"line\">          result_dic = &#123;<span class=\"string\">\"code\"</span>: 200,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"成功获取健康码图片数据为无码.\"</span>, <span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"无码\"</span>&#125;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        result_dic = &#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"识别健康码图片数据未在字典范围内.\"</span>, <span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"未知\"</span>&#125;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\">  except Exception as _:</span><br><span class=\"line\">    <span class=\"comment\"># healthcode = getTravelcodeColor(img_np)  # 文字无法识别时采用图片颜色识别</span></span><br><span class=\"line\">    <span class=\"comment\"># print(\"[*] Get Photo Color = \",healthcode)</span></span><br><span class=\"line\">    result_dic = &#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"识别健康码图片数据失败.\"</span>, <span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"未知\"</span>&#125;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\">    </span><br><span class=\"line\">def getHealthCodeInfo(filename, img_np):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 获取健康码信息</span></span><br><span class=\"line\"><span class=\"string\">  参数值：文件名称, 图像作为 numpy 数组进行opencv传递</span></span><br><span class=\"line\"><span class=\"string\">  返回值：返回以JSON字符串格式过滤后结果</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 灰度处理</span></span><br><span class=\"line\">  <span class=\"comment\"># img_gray = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)</span></span><br><span class=\"line\">  <span class=\"comment\"># 阈值二进制 - &gt; 127 设置为255(白)，否则0(黑) -&gt; 淡白得更白,淡黑更黑</span></span><br><span class=\"line\">  <span class=\"comment\"># _,img_thresh = cv2.threshold(img_gray,176,255,cv2.THRESH_BINARY)</span></span><br><span class=\"line\">  <span class=\"comment\"># 图像 OCR 识别</span></span><br><span class=\"line\">  text = reader.readtext(img_np, detail=0, batch_size=64) </span><br><span class=\"line\">  result_dic = health_filter(filename, img_np, <span class=\"string\">\"\"</span>.join(text))</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">def travel_filter(file_path,img_np,text_str):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: ocr识别的行程码</span></span><br><span class=\"line\"><span class=\"string\">  参数值：字符串,文件名称</span></span><br><span class=\"line\"><span class=\"string\">  返回值：有效信息组成的字典</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 健康码字段</span></span><br><span class=\"line\">  try:</span><br><span class=\"line\">    re_healthcode = re.compile(<span class=\"string\">'请收下(.&#123;,2&#125;)行程卡'</span>)</span><br><span class=\"line\">    healthcode = re_healthcode.findall(text_str)[0]</span><br><span class=\"line\">  except Exception as _:</span><br><span class=\"line\">    healthcode = getTravelcodeColor(img_np)  <span class=\"comment\"># 文字无法识别时采用图片颜色识别</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"[*] Get Photo Color = \"</span>,healthcode)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 电话字段</span></span><br><span class=\"line\">  re_phone = re.compile(<span class=\"string\">'[0-9]&#123;3&#125;\\*&#123;4&#125;[0-9]&#123;4&#125;'</span>)</span><br><span class=\"line\">  phone_str = re_phone.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 日期字段</span></span><br><span class=\"line\">  re_data = re.compile(<span class=\"string\">'2022\\.[0-1][0-9]\\.[0-3][0-9]'</span>)</span><br><span class=\"line\">  data_str = re_data.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 时间字段</span></span><br><span class=\"line\">  re_time = re.compile(<span class=\"string\">'[0-9][0-9]:[0-9][0-9]:[0-9][0-9]'</span>)</span><br><span class=\"line\">  time_str = re_time.findall(text_str)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 地区城市字段</span></span><br><span class=\"line\">  citys_re = re.compile(<span class=\"string\">'到达或途经:(.+)结果包含'</span>)</span><br><span class=\"line\">  citys_str = citys_re.findall(text_str)[0].strip().split(<span class=\"string\">'('</span>)[0]</span><br><span class=\"line\"></span><br><span class=\"line\">  result_dic = &#123;<span class=\"string\">\"code\"</span>: 200,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"成功获取行程码数据.\"</span>, <span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"file\"</span>: file_path ,<span class=\"string\">\"type\"</span>: healthcode, <span class=\"string\">\"phone\"</span>: phone_str, <span class=\"string\">\"date\"</span>: data_str, <span class=\"string\">\"time\"</span>: time_str, <span class=\"string\">\"travel\"</span>: citys_str&#125;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def getTravelCodeInfo(filename, img_np):</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  函数说明: 返回以JSON字符串格式过滤后结果</span></span><br><span class=\"line\"><span class=\"string\">  参数值：文件名称,图像作为numpy数组进行opencv传递</span></span><br><span class=\"line\"><span class=\"string\">  返回值：JSON字符串格式</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 灰度处理</span></span><br><span class=\"line\">  img_gray = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)</span><br><span class=\"line\">  <span class=\"comment\"># 阈值二进制 - &gt; 127 设置为255(白)，否则0(黑) -&gt; 淡白得更白,淡黑更黑</span></span><br><span class=\"line\">  _,img_thresh = cv2.threshold(img_gray,176,255,cv2.THRESH_BINARY)</span><br><span class=\"line\">  <span class=\"comment\"># 图像 OCR 识别</span></span><br><span class=\"line\">  text = reader.readtext(img_thresh, detail=0, batch_size=64)</span><br><span class=\"line\">  result_dic = travel_filter(filename, img_np, <span class=\"string\">\"\"</span>.join(text))</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result_dic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由 - 首页</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">@app.route(<span class=\"string\">'/index'</span>)</span><br><span class=\"line\">def Index():</span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"string\">\"&lt;h4 style='text-algin:center'&gt;https://www.weiyigeek.top/wechat.html?key=%E6%AC%A2%E8%BF%8E%E5%85%B3%E6%B3%A8&lt;/h4&gt;&lt;br/&gt;&lt;b style='text-algin:center'&gt;/api/v1/ocr/health?action=jkm&amp;file=20220520/test.png &lt;br&gt; /api/v1/ocr/health?action=xcm&amp;file=20220520/test.png &lt;/b&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/api/v1/ocr/health'</span>,methods=[<span class=\"string\">\"GET\"</span>])</span><br><span class=\"line\">def Travelcodeocr():</span><br><span class=\"line\">  <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  请求路径: /api/v1/ocr/health</span></span><br><span class=\"line\"><span class=\"string\">  请求参数: (/api/v1/ocr/health?action=['jkm','xcm']&amp;file=20220520/test.png, /tools/ocr?dir=20220520)</span></span><br><span class=\"line\"><span class=\"string\">  \"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">  action = request.args.get(<span class=\"string\">\"action\"</span>)</span><br><span class=\"line\">  filename = request.args.get(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">  dirname = request.args.get(<span class=\"string\">\"dir\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action and filename):</span><br><span class=\"line\">    img_path = os.path.join(IMGDIR, filename)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (os.path.exists(img_path)):</span><br><span class=\"line\">      <span class=\"comment\"># 打印路径</span></span><br><span class=\"line\">      log.info(<span class=\"string\">\"图像路径: \"</span>+ img_path)</span><br><span class=\"line\">      img_np = cv2.imread(img_path)</span><br><span class=\"line\">      try:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (action == <span class=\"string\">\"jkm\"</span>):</span><br><span class=\"line\">          result_dic_succ = getHealthCodeInfo(filename,img_np)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          result_dic_succ = getTravelCodeInfo(filename,img_np)</span><br><span class=\"line\">      except Exception as err:</span><br><span class=\"line\">        result_dic_err = &#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"图像数据获取异常, 请调用第三方接口识别.\"</span>,<span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"action\"</span>: action,<span class=\"string\">\"file\"</span>: filename ,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"未知\"</span>&#125;&#125;  </span><br><span class=\"line\">        log.error(str(err) + <span class=\"string\">\"-\"</span> + str(result_dic_err))</span><br><span class=\"line\">        <span class=\"built_in\">return</span> json.dumps(result_dic_err, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">      log.info(result_dic_succ)</span><br><span class=\"line\">      <span class=\"built_in\">return</span> json.dumps(result_dic_succ, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      result_dic_err=&#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"图像数据获取异常, 文件\"</span>+filename+<span class=\"string\">\"或者路径不对, 请检查.\"</span>&#125;</span><br><span class=\"line\">      log.error(str(result_dic_err))</span><br><span class=\"line\">      <span class=\"built_in\">return</span> json.dumps(result_dic_err, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">elif</span> (action and dirname and os.path.join(IMGDIR, dirname)):</span><br><span class=\"line\">    result_dic_all = []</span><br><span class=\"line\">    result_dic_err = []</span><br><span class=\"line\">    img_path_all =  glob.iglob(os.path.join(os.path.join(IMGDIR,dirname)+<span class=\"string\">\"/*.[p|j]*g\"</span>))   <span class=\"comment\"># 正则匹配 png|jpg|jpeg 后缀的后缀,返回的是迭代器。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> img_path <span class=\"keyword\">in</span> img_path_all:</span><br><span class=\"line\">      img_np = cv2.imread(img_path)</span><br><span class=\"line\">      try:</span><br><span class=\"line\">        result_dic_succ = getTravelCodeInfo(os.path.join(dirname,os.path.basename(img_path)),img_np)</span><br><span class=\"line\">      except Exception as err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"\\033[31m\"</span>+ img_path + <span class=\"string\">\" --&gt;&gt; \"</span> + str(err) + <span class=\"string\">\"\\033[0m\"</span>) <span class=\"comment\"># 输出识别错误的图像</span></span><br><span class=\"line\">        result_dic_err.append(img_path)</span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 成功则加入到List列表中</span></span><br><span class=\"line\">      result_dic_all.append(result_dic_succ)</span><br><span class=\"line\"></span><br><span class=\"line\">    res_succ_json=json.dumps(result_dic_all, ensure_ascii=False)</span><br><span class=\"line\">    res_err_json=json.dumps(result_dic_err, ensure_ascii=False)</span><br><span class=\"line\"></span><br><span class=\"line\">    with open(os.path.join(IMGDIR, dirname, dirname + <span class=\"string\">\"-succ.json\"</span>),<span class=\"string\">'w'</span>) as succ:</span><br><span class=\"line\">      succ.write(res_succ_json)</span><br><span class=\"line\">    with open(os.path.join(IMGDIR, dirname,  dirname + <span class=\"string\">\"-err.json\"</span>),<span class=\"string\">'w'</span>) as error:</span><br><span class=\"line\">      error.write(res_err_json)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> res_succ_json.encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"code\"</span>: <span class=\"string\">\"0\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"请求参数有误!\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Flask 路由 - /tools/upload/ocr</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/tools/upload/ocr'</span>,methods=[<span class=\"string\">\"GET\"</span>,<span class=\"string\">\"POST\"</span>])</span><br><span class=\"line\">def TravelcodeUploadocr():</span><br><span class=\"line\">  <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">    unix = datetime.now().strftime(<span class=\"string\">'%Y%m%d-%H%M%S%f'</span>)</span><br><span class=\"line\">    f = request.files[<span class=\"string\">'file'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f.mimetype == <span class=\"string\">'image/jpeg'</span> or f.mimetype == <span class=\"string\">'image/png'</span>):</span><br><span class=\"line\">      filedate = unix.split(<span class=\"string\">\"-\"</span>)[0]</span><br><span class=\"line\">      filesuffix = f.mimetype.split(<span class=\"string\">\"/\"</span>)[-1]</span><br><span class=\"line\">      uploadDir = os.path.join(<span class=\"string\">'img'</span>,filedate)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 判断上传文件目录是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (not os.path.exists(uploadDir)):</span><br><span class=\"line\">        os.makedirs(uploadDir)</span><br><span class=\"line\">      <span class=\"comment\"># 图片路径拼接与写入图片</span></span><br><span class=\"line\">      img_path = os.path.join(uploadDir,secure_filename(unix+<span class=\"string\">\".\"</span>+filesuffix)) </span><br><span class=\"line\">      f.save(img_path) </span><br><span class=\"line\">      <span class=\"comment\"># log.info(\"上传路径:\" + img_path)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 判断上传文件是否存在</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (os.path.exists(img_path)):</span><br><span class=\"line\">        img_np = cv2.imread(img_path)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">          result_dic_succ = getTravelCodeInfo(os.path.join(filedate,os.path.basename(img_path)),img_np)</span><br><span class=\"line\">        except Exception as err:</span><br><span class=\"line\">          result_dic_err = &#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span> : <span class=\"string\">\"图像数据获取异常, 请调用第三方接口识别.\"</span>,<span class=\"string\">\"data\"</span> :&#123;<span class=\"string\">\"action\"</span>: <span class=\"string\">\"upload\"</span>,<span class=\"string\">\"img_path\"</span>: img_path ,<span class=\"string\">\"type\"</span>: <span class=\"string\">\"未知\"</span>&#125;&#125;  </span><br><span class=\"line\">          log.error(str(err) + <span class=\"string\">\"-\"</span> + str(result_dic_err))</span><br><span class=\"line\">          <span class=\"built_in\">return</span> json.dumps(result_dic_err, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(str(result_dic_succ))</span><br><span class=\"line\">        <span class=\"built_in\">return</span> json.dumps(result_dic_succ, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        result_dic_err=&#123;<span class=\"string\">\"code\"</span>: 0,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"图像数据获取异常, 文件\"</span>+img_path+<span class=\"string\">\"或者路径不对, 请检查.\"</span>&#125;</span><br><span class=\"line\">        log.error(str(result_dic_err))</span><br><span class=\"line\">        <span class=\"built_in\">return</span> json.dumps(result_dic_err, ensure_ascii=False).encode(<span class=\"string\">'utf-8'</span>), 200, &#123;<span class=\"string\">\"Content-Type\"</span>:<span class=\"string\">\"application/json\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"built_in\">return</span> jsonify(&#123;<span class=\"string\">\"status\"</span>: <span class=\"string\">\"err\"</span>,<span class=\"string\">\"msg\"</span>: <span class=\"string\">\"不能上传除 jpg 与 png 格式以外的图片\"</span>&#125;)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 程序入口</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  <span class=\"built_in\">log</span> = logger(<span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 全局设置日志的记录等级，调试INFO级</span></span><br><span class=\"line\">  logging.basicConfig(level=logging.INFO) </span><br><span class=\"line\">  <span class=\"comment\"># 创建日志记录器，指明日志保存的路径、每个日志文件的最大大小、保存的日志文件个数上限 (100 兆)</span></span><br><span class=\"line\">  file_log_handler = RotatingFileHandler(<span class=\"string\">\"log/console.log\"</span>, maxBytes=1024 * 1024 * 100, backupCount=10, encoding=<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 创建日志记录的格式 日志等级 输入日志信息的文件名 行数 日志信息</span></span><br><span class=\"line\">  formatter = logging.Formatter(<span class=\"string\">'%(levelname)s - %(message)s'</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 为刚创建的日志记录器设置日志记录格式</span></span><br><span class=\"line\">  file_log_handler.setFormatter(formatter)</span><br><span class=\"line\">  <span class=\"comment\"># 为全局的日志工具对象（flask app使用的）添加日志记录器</span></span><br><span class=\"line\">  logging.getLogger().addHandler(file_log_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># try:</span></span><br><span class=\"line\">  <span class=\"comment\">#   RUNDIR = sys.argv[1]</span></span><br><span class=\"line\">  <span class=\"comment\">#   IMGDIR = sys.argv[2]</span></span><br><span class=\"line\">  <span class=\"comment\"># except Exception as e:</span></span><br><span class=\"line\">  <span class=\"comment\">#   print(\"[*] Uage:\"+ sys.argv[0] + \" RUNDIR IMGDIR\")</span></span><br><span class=\"line\">  <span class=\"comment\">#   print(\"[*] Default:\"+ sys.argv[0] + \" ./ ./img\" + \"\\n\" )</span></span><br><span class=\"line\">  <span class=\"comment\">#   RUNDIR = os.path.abspath(os.curdir)</span></span><br><span class=\"line\">  <span class=\"comment\">#   IMGDIR = os.path.join(RUNDIR,\"img\")</span></span><br><span class=\"line\">  <span class=\"comment\"># finally:</span></span><br><span class=\"line\">  <span class=\"comment\">#   if os.path.exists(RUNDIR):</span></span><br><span class=\"line\">  <span class=\"comment\">#     RUNDIR = os.path.abspath(os.curdir)</span></span><br><span class=\"line\">  <span class=\"comment\">#   if os.path.exists(IMGDIR):</span></span><br><span class=\"line\">  <span class=\"comment\">#     IMGDIR = os.path.join(RUNDIR,\"img\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 使用easyocr模块中的Reader方法, 设置识别中英文两种语言</span></span><br><span class=\"line\">  reader = easyocr.Reader([<span class=\"string\">'ch_sim'</span>, <span class=\"string\">'en'</span>], gpu=args.gpu, detector=True, recognizer=True) </span><br><span class=\"line\">  <span class=\"comment\"># 使用原生app运行web(单线程)</span></span><br><span class=\"line\">  <span class=\"comment\"># app.run(host='0.0.0.0', port=8000, debug=False)</span></span><br><span class=\"line\">  <span class=\"comment\"># 使用WSGIServer多线程(实际上是异步)</span></span><br><span class=\"line\">  server = pywsgi.WSGIServer((args.ip, args.port), app, handler_class=WebSocketHandler)</span><br><span class=\"line\">  server.serve_forever()</span><br></pre></td></tr></table></figure>\n<p>代码执行:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x04-入坑出坑\"><a href=\"#0x04-入坑出坑\" class=\"headerlink\" title=\"0x04 入坑出坑\"></a>0x04 入坑出坑</h2><p><strong>问题1.通过pip install 安装easyocr离线的whl包是报<code>ERROR: No matching distribution found for torch</code></strong></p>\n<ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install ./easyocr-1.4.2-py3-none-any.whl -i https://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</span><br><span class=\"line\">ERROR: Could not find a version that satisfies the requirement torch (from easyocr) (from versions: none)</span><br><span class=\"line\">ERROR: No matching distribution found <span class=\"keyword\">for</span> torch</span><br></pre></td></tr></table></figure></li>\n<li>解决办法: <code>python.exe -m pip install --upgrade pip</code></li>\n</ul>\n<p><br/></p>\n<p><strong>问题2.在Python3.7的环境中安装easyocr依赖的torch模块的whl安装包报<code>not a supported wheel on this platform.</code>错误</strong></p>\n<ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install torch-1.8.0+cpu-cp37-cp37m-win_amd64.whl -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class=\"line\">WARNING: Requirement <span class=\"string\">'torch-1.8.0+cpu-cp37-cp37m-win_amd64.whl'</span> looks like a filename, but the file does not exist</span><br><span class=\"line\">Looking <span class=\"keyword\">in</span> indexes: https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class=\"line\">ERROR: torch-1.8.0+cpu-cp37-cp37m-win_amd64.whl is</span><br></pre></td></tr></table></figure></li>\n<li>错误原因: 平台与下载的whl不符合, 此处我遇到的问题明显不是这个导致的，百度后我想是由于pip版本与python版本、以及系统平台联合导致。</li>\n<li>解决办法: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决1.假如,你是linux你可以通过 https://download.pytorch.org/whl/torch_stable.html 找到所需版本。</span></span><br><span class=\"line\">文件名解释：cpu或显卡/文件名-版本号-python版本-应该是编译格式-平台-cpu类型（intel也选amd64）</span><br><span class=\"line\"><span class=\"comment\"># torch-1.8.0+cpu-cp37-cp37m-win_amd64.whl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决2.将 torch-1.8.0+cpu-cp37-cp37m-win_amd64.whl 更名为 torch-1.8.0+cpu-cp37-cp37m-win32.whl</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>问题3.在执行调用torch模块的py脚本时报`Error loading “D:**</strong>\\lib\\site-packages\\torch\\lib\\asmjit.dll” or one of its dependencies.`错误**</p>\n<ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Microsoft Visual C++ Redistributable is not installed, this may lead to the DLL load failure.</span><br><span class=\"line\">It can be downloaded at https://aka.ms/vs/16/release/vc_redist.x64.exe</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">.....</span><br><span class=\"line\">OSError: [WinError 193] &lt;no description&gt; Error loading <span class=\"string\">\"D:\\Program Files (x86)\\Python37-32\\lib\\site-packages\\torch\\lib\\asmjit.dll\"</span> or one of its dependencies.</span><br></pre></td></tr></table></figure></li>\n<li>解决办法: 在你的电脑上下载安装 <a href=\"https://aka.ms/vs/16/release/vc_redist.x64.exe\" target=\"_blank\" rel=\"noopener\">https://aka.ms/vs/16/release/vc_redist.x64.exe</a> 缺少的C++运行库，重启电脑。</li>\n</ul>\n<p><br/></p>\n<p><strong>问题4.在安装opencv_python_headless进行依赖模块安装时报<code>ERROR: No matching distribution found for torchvision&gt;=0.5</code>错误</strong></p>\n<ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using cached https://mirrors.aliyun.com/pypi/packages/a4/0a/39b102047bcf3b1a58ee1cc83a9269b2a2c4c1ab3062a65f5292d8df6594/opencv_python_headless-4.5.4.60-cp37-cp37m-win32.whl (25.8 MB)</span><br><span class=\"line\">ERROR: Could not find a version that satisfies the requirement torchvision&gt;=0.5 (from easyocr) (from versions: 0.1.6, 0.1.7, 0.1.8, 0.1.9, 0.2.0, 0.2.1, 0.2.2, 0.2.2.post2, 0.2.2.post3)</span><br><span class=\"line\">ERROR: No matching distribution found <span class=\"keyword\">for</span> torchvision&gt;=0.5</span><br></pre></td></tr></table></figure></li>\n<li>解决办法: 如果你的 python 版本为3.7.x,那么你只能安装 <code>torch 1.5</code> 和 <code>torchvision0.6</code>。</li>\n</ul>\n<p><br/></p>\n<p><strong>问题5.在执行easyocr文字识别时出现<code>Downloading detection model, please wait. This may take several minutes depending upon your network connection.</code>提示</strong></p>\n<ul>\n<li>问题描述: 在首次使用时会自动下载<code>EasyOCR</code>模块所需的模型, 而由于国内网络环境，通常会报出超时错误，此时我们提前从官网下载其所需的数据模型，并安装在指定目录中。</li>\n<li>模型下载: <a href=\"https://www.jaided.ai/easyocr/modelhub/\" target=\"_blank\" rel=\"noopener\">https://www.jaided.ai/easyocr/modelhub/</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要下载以下模型(如有其它需要请自行选择下载)</span></span><br><span class=\"line\">english_g2 : https://github.com/JaidedAI/EasyOCR/releases/download/v1.3/english_g2.zip</span><br><span class=\"line\">zh_sim_g2 : https://github.com/JaidedAI/EasyOCR/releases/download/v1.3/zh_sim_g2.zip</span><br><span class=\"line\">CRAFT : https://github.com/JaidedAI/EasyOCR/releases/download/pre-v1.1.6/craft_mlt_25k.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模型安装位置</span></span><br><span class=\"line\"><span class=\"comment\"># windows</span></span><br><span class=\"line\">C:\\Users\\WeiyiGeek\\.EasyOCR\\model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux</span></span><br><span class=\"line\">/home/weiyigeek/.EasyOCR\\model</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"图形识别","path":"api/categories/图形识别.json"}],"tags":[{"name":"EasyOCR","path":"api/tags/EasyOCR.json"}]}