{"title":"Linux基础命令行使用技巧","slug":"系统运维/Linux/运维知识/Linux基础命令行使用的深入浅出","date":"2020-05-01T06:34:30.000Z","updated":"2023-01-31T02:29:09.225Z","url":"2020/5-1-213.html","path":"api/articles/2020/5-1-213.html.json","covers":["https://img.weiyigeek.top/2020/1/20200509101249.png","https://img.weiyigeek.top/2020/1/20200509102931.png","https://img.weiyigeek.top/2020/1/20200502233257.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-基础简述\"><a href=\"#0x00-基础简述\" class=\"headerlink\" title=\"0x00 基础简述\"></a>0x00 基础简述</h4><p>描述:本章主要学习并记录了Linux中命令行补全以及参数补全的实现方法，还Linux中执行过的命令进行查看，让您想Hacker一样操作终端;</p>\n<p><strong>目录摘要:</strong><br>补全:</p>\n<ul>\n<li>何谓补全: 即在我们使用shell命令行时候按tab键进行自动补全命令或者参数</li>\n<li>补全触发按键（Tab）</li>\n<li>文件名、路径名补全</li>\n<li>程序名、命令名补全</li>\n<li>用户名(~) 、 主机名（@） 、 变量名补全（$）</li>\n<li>可编程补全</li>\n</ul>\n<p><strong>多种Shell测试版本:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bash --version</span></span><br><span class=\"line\">GNU bash, version 4.2.46(2)-release (x86_64-redhat-linux-gnu)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  zsh --version</span></span><br><span class=\"line\">zsh 5.0.2 (x86_64-redhat-linux-gnu)</span><br></pre></td></tr></table></figure></p>\n<p>两者之间的对比:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash : 除了sh就是它是最常用的shell,使用广泛多数发行版系统默认是bash</span><br><span class=\"line\">zsh: 用户的交互功能比bash更强大;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x01-补全实践\"><a href=\"#0x01-补全实践\" class=\"headerlink\" title=\"0x01 补全实践\"></a>0x01 补全实践</h4><h5 id=\"文件名补全\"><a href=\"#文件名补全\" class=\"headerlink\" title=\"文件名补全\"></a>文件名补全</h5><p><code>ALT+?</code>: 显示补齐参数列表<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@weiyigeek opt]$</span><br><span class=\"line\">gitlab/      LNMP/        sec/         student.sql</span><br><span class=\"line\"></span><br><span class=\"line\">[root@weiyigeek opt]$ gitlab/</span><br></pre></td></tr></table></figure></p>\n<p><code>FIGNORE=&quot;.ini&quot;</code>: 排除指定后缀文件，在tab补全时候将不显示排除的文件；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># ls</span></span><br><span class=\"line\">frpc           frpc.ini  frps_full.ini  LICENSE</span><br><span class=\"line\">frpc_full.ini  frps      frps.ini       systemd</span><br><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># FIGNORE=\".ini\"</span></span><br><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># cat frp</span></span><br><span class=\"line\">frpc  frps</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h5 id=\"特殊补全\"><a href=\"#特殊补全\" class=\"headerlink\" title=\"特殊补全\"></a>特殊补全</h5><p><strong>用户名(~)</strong></p>\n<p>示例1.快速进入系统用户家目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># ~</span></span><br><span class=\"line\">~adm/             ~halt/            ~polkitd/</span><br><span class=\"line\">~bin/             ~lp/              ~postfix/</span><br><span class=\"line\">~chrony/          ~mail/            ~root/</span><br><span class=\"line\">~ctcss/           ~mysql            ~shutdown/</span><br><span class=\"line\">~daemon/          ~nginx            ~sshd/</span><br><span class=\"line\">~dbus/            ~nobody/          ~sync/</span><br><span class=\"line\">~ftp              ~operator/        ~systemd-network/</span><br><span class=\"line\">~games/           ~php              ~www</span><br><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># ~www</span></span><br><span class=\"line\">-bash: /home/www: No such file or directory</span><br><span class=\"line\">[root@weiyigeek frp]<span class=\"comment\"># cd ~sshd</span></span><br><span class=\"line\">[root@weiyigeek sshd]<span class=\"comment\"># ls -alg</span></span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwx--x--x. 2 root  6 Aug  9  2019 .</span><br><span class=\"line\">drwxr-xr-x. 3 root 18 Mar  1  2019 ..</span><br><span class=\"line\">[root@weiyigeek sshd]<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/var/empty/sshd</span><br></pre></td></tr></table></figure></p>\n<p><strong>主机名（@）</strong><br>主机名来源的文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/hosts</span><br><span class=\"line\"><span class=\"comment\"># 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span></span><br><span class=\"line\"><span class=\"comment\"># ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span></span><br><span class=\"line\"><span class=\"comment\"># 113.62.177.210 my.weiyigeek.top weiyi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ~/.ssh/config&lt;&lt;END</span><br><span class=\"line\">Host *</span><br><span class=\"line\">   controlmaster auto</span><br><span class=\"line\">   controlpath /tmp/ssh_mux_%h_%p_%r</span><br><span class=\"line\">   serveraliveinterval 90</span><br><span class=\"line\">   serveralivecountmax 5</span><br><span class=\"line\">   strictHostKeyChecking no</span><br><span class=\"line\"></span><br><span class=\"line\">Host study.weiyigeek.top</span><br><span class=\"line\">   HostName 127.0.0.1</span><br><span class=\"line\">   User root</span><br><span class=\"line\">   Port 22</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示主机名</span></span><br><span class=\"line\">[root@weiyigeek ~]<span class=\"comment\"># @</span></span><br><span class=\"line\">@::1                      @localhost6.localdomain6</span><br><span class=\"line\">@localhost                @localhost.localdomain</span><br><span class=\"line\">@localhost4               @my.weiyigeek.top</span><br><span class=\"line\">@localhost4.localdomain4  @weiyi</span><br><span class=\"line\">@localhost6</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ssh利用别名登陆</span></span><br><span class=\"line\">[root@weiyigeek ~]$ ssh study.weiyigeek.top</span><br><span class=\"line\">Welcome to Ubuntu 14.04.6 LTS (GNU/Linux 3.19.0-25-generic x86_64)</span><br></pre></td></tr></table></figure></p>\n<p><strong>变量名补全（$）</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@weiyigeek ~]<span class=\"comment\"># $  [Tab 补齐]</span></span><br><span class=\"line\"><span class=\"variable\">$_</span>                <span class=\"variable\">$COMP_WORDBREAKS</span>  <span class=\"variable\">$LINENO</span>           <span class=\"variable\">$PS4</span></span><br><span class=\"line\"><span class=\"variable\">$BASH</span>             <span class=\"variable\">$DIRSTACK</span>         <span class=\"variable\">$LINES</span>            <span class=\"variable\">$PWD</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_ALIASES</span>     <span class=\"variable\">$EUID</span>             <span class=\"variable\">$LOGNAME</span>          <span class=\"variable\">$RANDOM</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_ARGC</span>        <span class=\"variable\">$GROUPS</span>           <span class=\"variable\">$LS_COLORS</span>        <span class=\"variable\">$SECONDS</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_ARGV</span>        <span class=\"variable\">$HISTCMD</span>          <span class=\"variable\">$MACHTYPE</span>         <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_CMDS</span>        <span class=\"variable\">$HISTCONTROL</span>      <span class=\"variable\">$MAIL</span>             <span class=\"variable\">$SHELLOPTS</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_COMMAND</span>     <span class=\"variable\">$HISTFILE</span>         <span class=\"variable\">$MAILCHECK</span>        <span class=\"variable\">$SHLVL</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_LINENO</span>      <span class=\"variable\">$HISTFILESIZE</span>     <span class=\"variable\">$OPTERR</span>           <span class=\"variable\">$SSH_CLIENT</span></span><br><span class=\"line\"><span class=\"variable\">$BASHOPTS</span>         <span class=\"variable\">$HISTSIZE</span>         <span class=\"variable\">$OPTIND</span>           <span class=\"variable\">$SSH_CONNECTION</span></span><br><span class=\"line\"><span class=\"variable\">$BASHPID</span>          <span class=\"variable\">$HOME</span>             <span class=\"variable\">$OSTYPE</span>           <span class=\"variable\">$SSH_TTY</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_SOURCE</span>      <span class=\"variable\">$HOSTNAME</span>         <span class=\"variable\">$PATH</span>             <span class=\"variable\">$TERM</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_SUBSHELL</span>    <span class=\"variable\">$HOSTTYPE</span>         <span class=\"variable\">$PIPESTATUS</span>       <span class=\"variable\">$UID</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_VERSINFO</span>    <span class=\"variable\">$ID</span>               <span class=\"variable\">$PPID</span>             <span class=\"variable\">$USER</span></span><br><span class=\"line\"><span class=\"variable\">$BASH_VERSION</span>     <span class=\"variable\">$IFS</span>              <span class=\"variable\">$PROMPT_COMMAND</span>   <span class=\"variable\">$XDG_RUNTIME_DIR</span></span><br><span class=\"line\"><span class=\"variable\">$colors</span>           <span class=\"variable\">$LANG</span>             <span class=\"variable\">$PS1</span>              <span class=\"variable\">$XDG_SESSION_ID</span></span><br><span class=\"line\"><span class=\"variable\">$COLUMNS</span>          <span class=\"variable\">$LESSOPEN</span>         <span class=\"variable\">$PS2</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@weiyigeek ~]<span class=\"comment\"># echo $SHELL</span></span><br><span class=\"line\">/bin/bash</span><br><span class=\"line\">[root@weiyigeek ~]<span class=\"comment\"># echo $RANDOM</span></span><br><span class=\"line\">8857</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h5 id=\"命令行参数补齐\"><a href=\"#命令行参数补齐\" class=\"headerlink\" title=\"命令行参数补齐\"></a>命令行参数补齐</h5><p>描述:针对于Bash以及Zsh命令行参数补齐我们可以分别采用以下扩展<code>bash-completion</code> 和<code>zsh-completion</code></p>\n<h6 id=\"bash-completion\"><a href=\"#bash-completion\" class=\"headerlink\" title=\"bash-completion\"></a>bash-completion</h6><p><strong>安装与配置:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Linux</span></span><br><span class=\"line\">yum install -y bash-completion</span><br><span class=\"line\">yum install -y bash-completion-extras</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Mac</span></span><br><span class=\"line\">sudo pacman -s bash-completion</span><br></pre></td></tr></table></figure><br>配置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$vim</span> ~/.bashrc</span><br><span class=\"line\">[ -r /usr/share/bash-completion/bash_completion ] &amp;&amp; . /usr/share/bash-completion/bash_completion</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> !$</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vm ~]<span class=\"comment\"># ls --al</span></span><br><span class=\"line\">--all         --almost-all</span><br><span class=\"line\"></span><br><span class=\"line\">[root@vm ~]<span class=\"comment\"># find -</span></span><br><span class=\"line\">-amin                   -ignore_readdir_race    -path</span><br><span class=\"line\">-anewer                 -ilname                 -perm</span><br></pre></td></tr></table></figure></p>\n<BR/>\n\n<h6 id=\"zsh-autosuggestions\"><a href=\"#zsh-autosuggestions\" class=\"headerlink\" title=\"zsh-autosuggestions\"></a>zsh-autosuggestions</h6><p>描述:显示命令参数以及历史信息默认都已经支持参数与子命令显示，而无需安装额外的扩展但是对bash-completion更为强大可以显示命令参数说明;</p>\n<p><strong>安装与配置:</strong><br>配置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; ~/.zshrc &lt;&lt;END</span><br><span class=\"line\"><span class=\"comment\"># Completion</span></span><br><span class=\"line\"><span class=\"built_in\">autoload</span> -U compinit</span><br><span class=\"line\">compinit -i</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#配置生效</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><br>补充:zsh命令自动建议插件zsh-autosuggestions <code>[2020年5月5日 23:36:55]</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#编辑.zshrc文件</span></span><br><span class=\"line\">plugins=(git zsh-autosuggestions)</span><br></pre></td></tr></table></figure></p>\n<p>基础实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1</span></span><br><span class=\"line\">[root@vm-1575613390]~$ find -ignore_readdir_race</span><br><span class=\"line\">-ignore_readdir_race  -inum                 -iwholename</span><br><span class=\"line\">-ilname               -ipath</span><br><span class=\"line\">-iname                -iregex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2</span></span><br><span class=\"line\">[root@vm-1575613390]~<span class=\"comment\"># git init</span></span><br><span class=\"line\">index-pack              -- build pack index file <span class=\"keyword\">for</span> an existing packed archive</span><br><span class=\"line\">init                    -- create empty git repository or re-initialize an existing one</span><br><span class=\"line\">instaweb                -- instantly browse your working repository <span class=\"keyword\">in</span> gitweb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.命令建议示例</span></span><br><span class=\"line\">[root@vm-1575613390]/tmp<span class=\"comment\"># ls -lash #此时你打出-l便会从命令历史中进行显示最近一次输入的参数，然后按右键进行补齐选择</span></span><br><span class=\"line\">[root@vm-1575613390]/tmp<span class=\"comment\"># cd /tmp</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"可编程补全\"><a href=\"#可编程补全\" class=\"headerlink\" title=\"可编程补全\"></a>可编程补全</h5><p>描述: 主要用于我们shell编程脚本中进行命令参数进行提示，依赖于bash-completion插件；</p>\n<p>bash示例可编程补全:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/bash_completion.d/Testcmd&lt;&lt;<span class=\"string\">'end'</span></span><br><span class=\"line\"><span class=\"comment\"># Completion</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">_Testcmd</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">local</span> cur opts</span><br><span class=\"line\">   <span class=\"comment\">#1.数组变量(包含当前命令行中每个单独的子)，其中COMP-CWORD 表示当前光标位置在$&#123;COMP_WORDS&#125; 中的索引;</span></span><br><span class=\"line\">   cur=<span class=\"string\">\"<span class=\"variable\">$&#123;COMP_WORDS[COMP-CWORD]&#125;</span>\"</span></span><br><span class=\"line\">   <span class=\"comment\">#2.命令选项</span></span><br><span class=\"line\">   opts=<span class=\"string\">\"--help --version\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;cur&#125;</span> == -* ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"comment\">#3.生成可供补全的选项列表</span></span><br><span class=\"line\">      COMPREPLY=($(compgen -W <span class=\"string\">\"<span class=\"variable\">$&#123;opts&#125;</span>\"</span> -- <span class=\"variable\">$&#123;cur&#125;</span>))</span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.补全函数绑定到具体的shell脚本中</span></span><br><span class=\"line\">complete -F _Testcmd Testcmd</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>zsh示例可编程补全:接下来定义的函数与变量跟 bash 示例相似</p>\n<ul>\n<li>words 相当于 bash 中的 COMP_WORDS</li>\n<li>CURRENT 与 bash 中的 COMP_CWORD 类似</li>\n<li>COMPREPLY 则和 compadd 这个内置的 zsh 命令相同</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 步骤1</span></span><br><span class=\"line\">cat &gt; ~/.zsh/_mycmd&lt;&lt;END</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">_mycmd</span></span>()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">local</span> cur opts</span><br><span class=\"line\">   cur=<span class=\"string\">'$&#123;words[CURRENT]&#125;'</span></span><br><span class=\"line\">   opts=(--<span class=\"built_in\">help</span> --version)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> [[ <span class=\"variable\">$&#123;cur&#125;</span> == -* ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    compadd -- <span class=\"variable\">$&#123;opts&#125;</span></span><br><span class=\"line\">   <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_mycmd <span class=\"string\">\"<span class=\"variable\">$0</span>\"</span></span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#步骤2.修改~/.zshrc 添加如下</span></span><br><span class=\"line\"><span class=\"comment\"># Completion:载入_mycmd中的补全代码</span></span><br><span class=\"line\">fpath=(<span class=\"variable\">$HOME</span>/.zsh <span class=\"variable\">$fpath</span>)</span><br></pre></td></tr></table></figure>\n<p>实践 mycmd 在 zsh 中的补全效果，只需先执行一下 source ~/.zshrc,值得一提的是，zsh 本身还提供了一些辅助函数以用于补全，比如 _arguments、<br>_describe、_message 等等<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mycmd --</span><br><span class=\"line\">--<span class=\"built_in\">help</span> --version</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x02-历史命令\"><a href=\"#0x02-历史命令\" class=\"headerlink\" title=\"0x02 历史命令\"></a>0x02 历史命令</h4><p>在编程领域有一个十分重要的原则，那就是如何想办法来重复利用代码。<br>比如，通过把具有相同逻辑的代码抽象成函数，从而能够加以反复调用。</p>\n<p>在Linux中的Shell终端里我们也可以将前面的命令进行复用，下面我们将先从设置历史变量以及如何查看、搜索、以及前后移动历史说起;</p>\n<h5 id=\"设置历史记录\"><a href=\"#设置历史记录\" class=\"headerlink\" title=\"设置历史记录\"></a>设置历史记录</h5><p>描述：无论是 bash 还是 zsh，都能够将我们已经执行过的命令存储到一个文件中，这样便于我们以后对其加以重复使用；</p>\n<p>Step1.查看 bash 或 zsh 的历史文件位置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@bash ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$HISTFILE</span></span><br><span class=\"line\">/root/.bash_history</span><br><span class=\"line\"></span><br><span class=\"line\">[root@zsh ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$HISTFILE</span></span><br><span class=\"line\">为 ~/.zsh_history</span><br></pre></td></tr></table></figure></p>\n<p>Step2.针对于bash进行历史变量记录设置(注意默认记录数为1000)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim  ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\">#历史文件报保存位置</span></span><br><span class=\"line\">HISTFILE=~/.bash_history</span><br><span class=\"line\"><span class=\"comment\">#HISTFILE文件所能保存的最大行数</span></span><br><span class=\"line\">HISTFILESIZE=1000</span><br><span class=\"line\"><span class=\"comment\">#Shell 中记忆的最大历史命令数</span></span><br><span class=\"line\">HISTSIZE=1000</span><br><span class=\"line\"><span class=\"comment\">#剔除掉那些重复的命令、开头包含空格的命令、以及常用的简单命令等等</span></span><br><span class=\"line\">HISTCONTROL=<span class=\"string\">'erasedups:ignorespace'</span></span><br></pre></td></tr></table></figure></p>\n<p>Step3.针对于zsh进行历史变量记录设置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.zshrc</span><br><span class=\"line\">HISTFILE=~/.zsh_history</span><br><span class=\"line\">SAVEHIST=1000</span><br><span class=\"line\">HISTSIZE=1000</span><br><span class=\"line\"><span class=\"comment\"># 去掉重复的命令</span></span><br><span class=\"line\"><span class=\"built_in\">setopt</span> HIST_IGNORE_ALL_DUPS </span><br><span class=\"line\"><span class=\"comment\">#去掉开头具有空格的命令</span></span><br><span class=\"line\"><span class=\"built_in\">setopt</span> HIST_IGNORE_SPACE</span><br></pre></td></tr></table></figure></p>\n<p>补充说明:</p>\n<ul>\n<li>通常将这两个变量(<code>HISTFILESIZE/HISTSIZE</code>)设置的值保持一致，否则在 $HISTFILE 中保存的内容可能会被截断。<ul>\n<li>比如:在$HISTSIZE 设为 1000 的情况下，而 $HISTFILESIZE 却为 500。</li>\n<li>因为:历史命令数大于文件的行数，所以有部分历史命令不能保存到历史文件中。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"查看历史命令\"><a href=\"#查看历史命令\" class=\"headerlink\" title=\"查看历史命令\"></a>查看历史命令</h5><p>描述:Shell 本身提供了 history 这个内置命令来让我们随时查看所记录的历史命令;</p>\n<p><em>bash查看历史命令</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.数字后面带 * 号的行则说明已经被修改过</span></span><br><span class=\"line\">~$ <span class=\"built_in\">history</span> | less</span><br><span class=\"line\"><span class=\"comment\"># 3 cat .bashrc</span></span><br><span class=\"line\"><span class=\"comment\"># 4 cat .bash_profile</span></span><br><span class=\"line\"><span class=\"comment\"># 5* cat .bash_history</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.查看倒数的 5 个历史命令</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> 5</span><br></pre></td></tr></table></figure></p>\n<p><em>zsh查看历史命令</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.查看倒数几个命令</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.查看一段范围内的历史命令</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -10 -5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.们提供更多的历史命令细节，包括命令执行的日期和时间，以及每个命令持续运行的时间</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> -i -D</span><br><span class=\"line\"><span class=\"comment\"># 20  2020-05-08 16:52  0:00   history 5</span></span><br><span class=\"line\"><span class=\"comment\"># 21  2020-05-08 16:52  0:00   history -5</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>fc 命令</strong><br>描述:除了 history 之外，另一个用来查看历史命令列表的是 fc;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.默认修改最有一条命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.-l选项使用列举命令历史</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -l <span class=\"comment\"># 列出最后 16 条命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -l -5 <span class=\"comment\"># 列出倒数 5 条命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -l 20 30 <span class=\"comment\"># 列出编号 20 到 30 的命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -l 100 <span class=\"comment\"># 列出编号为 100 后的所有命令</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -l cat <span class=\"comment\"># 列出 cat 后的所有命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.-e 选项还能够编辑历史命令列表</span></span><br><span class=\"line\">$ <span class=\"built_in\">fc</span> -e vi 5 10</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"搜索历史命令\"><a href=\"#搜索历史命令\" class=\"headerlink\" title=\"搜索历史命令\"></a>搜索历史命令</h5><p>描述:过滤出需要的命令的几种方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.是将 history 与 grep 联用</span></span><br><span class=\"line\"><span class=\"built_in\">history</span> | grep <span class=\"string\">'xxx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2.按 Ctrl + r 组合键逆向搜索历史命令</span></span><br><span class=\"line\"><span class=\"comment\">#若是匹配成功，则显出结果。</span></span><br><span class=\"line\"><span class=\"comment\">#若是匹配失败，我们还可以按退格键删除字符，然后重新输入来继续搜索。</span></span><br><span class=\"line\">(reverse-i-search) ech: <span class=\"built_in\">echo</span> &gt; ~/.bash_history  <span class=\"comment\">#按下-&gt;右键</span></span><br><span class=\"line\">[root@vm-1575613390 tmp]$ <span class=\"built_in\">echo</span> &gt; ~/.bash_history</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"前后移动历史命令\"><a href=\"#前后移动历史命令\" class=\"headerlink\" title=\"前后移动历史命令\"></a>前后移动历史命令</h5><p>描述:我经常使用的另外两组快捷键是 Ctrl + p (<code>移到前一条命令</code>) 和 Ctrl + n (<code>移到后一条命令</code>)或者键盘上的上下键,bash与zsh都能很好的支持;</p>\n<h5 id=\"快速执行历史命令\"><a href=\"#快速执行历史命令\" class=\"headerlink\" title=\"快速执行历史命令\"></a>快速执行历史命令</h5><p>描述:既然我们把已经执行过的命令存储到 Shell 的历史文件中，那么自然想有一天能够再次用到它</p>\n<ul>\n<li><p>1.重复执行上一条命令采用<code>!!</code>,它被称为 bang bang;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.我们无需重新输入 htop 命令，只需按两下 !! 并敲回车即可</span></span><br><span class=\"line\">$ htop</span><br><span class=\"line\">$ !!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2.!! 经常与 sudo 联用，用来解决缺少权限的问题。例如：</span></span><br><span class=\"line\">$ sudo !!</span><br><span class=\"line\">$ sudo pacman -S figlet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.执行以某些字符打头的命令，Shell 将以逆序的方式搜索历史命令列表，一旦与给定的开头字符匹配到，便予以执行该条命令;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.例如利用 !foo 这种表示法允许我们执行以 foo 这三个字符打头的命令</span></span><br><span class=\"line\">$ !he</span><br><span class=\"line\">$ <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法2.如果不能确定所找到命令的完整内容，那么可以在其后追加 :p（修饰符），这样Shell 将打印出该命令并不会执行。</span></span><br><span class=\"line\">$ !grep:p</span><br><span class=\"line\">grep locat /var/<span class=\"built_in\">log</span>/dmesg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法3.快速执行历史命令中的第几条</span></span><br><span class=\"line\">$ <span class=\"built_in\">history</span> | grep <span class=\"string\">\"htop\"</span>  <span class=\"comment\"># 52 的一条</span></span><br><span class=\"line\">$ !52</span><br><span class=\"line\"><span class=\"comment\">#如果是负数就会执行命令中的倒数第二条，示例如下</span></span><br><span class=\"line\">$ vim first.c</span><br><span class=\"line\">$ gcc -o first first.c</span><br><span class=\"line\">$ !-2 <span class=\"comment\"># 再编辑</span></span><br><span class=\"line\">$ !-2 <span class=\"comment\"># 再编译</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"修改历史执行命令\"><a href=\"#修改历史执行命令\" class=\"headerlink\" title=\"修改历史执行命令\"></a>修改历史执行命令</h5><p>描述:平常在使用命令行时，我经常会遇到的情况是，要么不小心，要么手太快，总之命令没有输入正确就执行了；<br>此时我们可以采用Shell提供的简便方法进行快速更正与执行;</p>\n<p>例如，我在使用 grep 过滤日志时，不幸多输入了一个 o（原本是 loocat）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#原命令</span></span><br><span class=\"line\">$ grep loocat /var/<span class=\"built_in\">log</span>/dmesg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行 ˆo 即可将多余的 o 字符删除</span></span><br><span class=\"line\">[root@vm-1575613390 tmp]<span class=\"comment\"># grep loocat /var/log/dmesg</span></span><br><span class=\"line\">[root@vm-1575613390 tmp]<span class=\"comment\"># ^o   #执行 ˆo 将上一条命令中找到的第一个 o 字符删除，从而纠正了输错的命令</span></span><br><span class=\"line\">grep locat /var/<span class=\"built_in\">log</span>/dmesg      <span class=\"comment\">#Shell 在回显出正确的命令后立即执行了它</span></span><br><span class=\"line\">[    0.000000] NODE_DATA(0) allocated [mem 0x13ffd7000-0x13fffdfff]</span><br><span class=\"line\">[    0.000000] allocated 16777216 bytes of page_cgroup</span><br><span class=\"line\">[    0.748714] ftrace: allocating 29560 entries <span class=\"keyword\">in</span>  16 pages</span><br><span class=\"line\">[    1.702371] HugeTLB registered 1 GB page size, pre-allocated 0 pages</span><br><span class=\"line\">[    1.705874] HugeTLB registered 2 MB page size, pre-allocated 0 pages</span><br><span class=\"line\">[    2.601401] [TTM] Initializing pool allocator</span><br><span class=\"line\">[    2.601404] [TTM] Initializing DMA pool allocator</span><br></pre></td></tr></table></figure></p>\n<p>例如:我在查看 file1 这个文件的内容时错输成了 flie1：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat flie1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#以用 ˆliˆil 来将输错的 li 替换为 il。</span></span><br><span class=\"line\">$ ˆliˆil</span><br><span class=\"line\">$ cat file1</span><br></pre></td></tr></table></figure><br>即便在没有输错的情况下，ˆoldˆnew 也是很实用的,假如<code>我在查看 file1 后接着想查看 file4，那么只要执行 ˆ1ˆ4</code>;</p>\n<h5 id=\"全局替换\"><a href=\"#全局替换\" class=\"headerlink\" title=\"全局替换\"></a>全局替换</h5><p>描述:有时候我们想不只替换一处，而是把上一条命令中的每处内容都替换掉,此时我们可以使用<code>!:gs/old/new</code>, <code>: (冒号)</code> 后边的 gs 意为全局（g）<br>替换（s）<code>/old/new 则与 ˆoldˆnew 相似</code>;</p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ansible</span> nginx -a <span class=\"string\">'which nginx'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#bash方式</span></span><br><span class=\"line\">$ !:gs/nginx/haproxy</span><br><span class=\"line\">$ ansible haproxy -a <span class=\"string\">'which haproxy'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#zsh方式</span></span><br><span class=\"line\">$ ˆnginxˆhaproxyˆ:G</span><br><span class=\"line\">$ ansible haproxy -a <span class=\"string\">'which haproxy'</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"快速引用命令的参数-重点\"><a href=\"#快速引用命令的参数-重点\" class=\"headerlink\" title=\"快速引用命令的参数  (重点)\"></a>快速引用命令的参数  (重点)</h5><p>描述:我们即将执行的命令与之前的命令具有相同的参数，比如同样的文件名、路径名等等,此时我们可以采用下面的方法进行重复利用上次执行的参数值；</p>\n<p><em>基础示例:</em></p>\n<ul>\n<li><p>1.引用最后一位参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.最常用的是 !$,</span></span><br><span class=\"line\">mkdir /tmp/web/ </span><br><span class=\"line\"><span class=\"built_in\">cd</span> !$ &amp;&amp; <span class=\"built_in\">pwd</span>  <span class=\"comment\">#/tmp/web/ </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2.按 Alt + .快捷键来达到同样的目的，可以获取历史中的前几个命令的参数</span></span><br><span class=\"line\">[root@vm-1575613390 tmp]$ <span class=\"built_in\">pwd</span>  <span class=\"comment\">#ALT+.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式3.采用$_的方式</span></span><br><span class=\"line\">mkdir /tmp/web1/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$_</span> &amp;&amp; <span class=\"built_in\">pwd</span>  <span class=\"comment\">#/tmp/web1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.引用最开头的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.!ˆ 能够让我们引用上一条命令中最开头的参数</span></span><br><span class=\"line\">$ ls /usr/share/doc /usr/share/man</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> !^ &amp;&amp; <span class=\"built_in\">pwd</span>  <span class=\"comment\">#/usr/share/doc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2.组合键 Ctrl + Alt + y 可以实现同样的效果</span></span><br><span class=\"line\">[root@vm-1575613390 web1]$ /usr/share/doc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.引用所有参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.以使用 !*实现上一条命令的所有参数</span></span><br><span class=\"line\">$ ls src code</span><br><span class=\"line\"><span class=\"comment\">#cp 命令中的 !* 跟 src code 同样，它表示两个参数都要引用。</span></span><br><span class=\"line\">$ cp -r !*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.引用第 n 个参数<br>描述:对于引用上一条命令中的参数，我们甚至可以要求 Shell 精确到具体的第几个。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1.参数数组的index是从0开始的</span></span><br><span class=\"line\">touch foo.txt bar.txt baz.txt</span><br><span class=\"line\"> 0     1      2       3</span><br><span class=\"line\"><span class=\"comment\"># vim 命令中的 !:2 就相当于上一条命令中的 bar.txt 文本文件。</span></span><br><span class=\"line\">$ touch foo.txt bar.txt baz.txt</span><br><span class=\"line\">$ vim !:2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.引用从 m 到 n 的参数<br>描述:还有一种情况可能会遇到，即同时引用上一条命令的好几个参数,此时我们可以使用<code>!:m-n 表示法，m 为开始端，n 为结束端</code>;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.引用 touch 命令中的前两个参数。</span></span><br><span class=\"line\">$ touch foo.txt bar.txt baz.txt</span><br><span class=\"line\">$ nvim !:1-2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.引用从 n 到最后的参数<br>描述:通过 !:n* 这种表示让我们能够从上一条命令中引用从第 n 个到最后的参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.下面允许我将 hosts 和 hostname 同时打开进行编辑。</span></span><br><span class=\"line\">$ cat /etc/resolv.conf /etc/hosts /etc/hostname</span><br><span class=\"line\">$ nvim !:2*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.我们也可以引用历史列表中其它命令的参数</span></span><br><span class=\"line\"><span class=\"comment\">#引用以 hi 打头的命令的第 2 个参数</span></span><br><span class=\"line\">$ !hi:2</span><br><span class=\"line\"><span class=\"comment\">#将引用第 10 条命令的 2、3 两个参数。</span></span><br><span class=\"line\">$ !10:2-3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h5 id=\"快速引用参数的部分-重点\"><a href=\"#快速引用参数的部分-重点\" class=\"headerlink\" title=\"快速引用参数的部分 (重点)\"></a>快速引用参数的部分 (重点)</h5><p>描述:Shell比我们想象更为强大，利用 Shell 提供的历史展开模式修饰符，使我们得以快速引用参数中的部分内容。</p>\n<ul>\n<li><p>1.引用路径开头,助记技巧<code>将 :h 想成 head 的开头字符</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.在 !$（最后一位参数）的基础上添加了 :h</span></span><br><span class=\"line\"><span class=\"comment\">#此处的 :h 为修饰符，意味着截取路径的开头部分，正如 dirname 的效果一样</span></span><br><span class=\"line\"><span class=\"comment\">#引用该路径的开头部分 /usr/share//</span></span><br><span class=\"line\">$ ls /usr/share//truetype</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> !$:h &amp;&amp; <span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.引用路径结尾(值得学习),助记技巧<code>将 :t 想成 tail 的开头字符</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#通过 :t 修饰符，我们可以引用路径的结尾部分，其效果跟basename 类似。</span></span><br><span class=\"line\">$ wget http://nginx.org/download/nginx-1.15.8.tar.gz</span><br><span class=\"line\">$ ls -alh !$:t   <span class=\"comment\">#nginx-1.15.8.tar.gz</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.引用文件名,利用:r 修饰符来只引用文件名部分（这<br>将排除掉扩展名）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ unzip hello.zip </span><br><span class=\"line\">~$ <span class=\"built_in\">cd</span> !$:r <span class=\"comment\"># 将 hello.zip 去掉扩展名，只保留 hello 部分</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.将引用部分更改为大写或者小写(<code>zsh</code>特有bash是没有办法的)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1) 通过 :u 修饰符我们能够将所引用的部分更改为大写字母</span></span><br><span class=\"line\">[root@vm-1575613390]~<span class=\"comment\">#  echo histchars</span></span><br><span class=\"line\">histchars</span><br><span class=\"line\">[root@vm-1575613390]~<span class=\"comment\"># echo !$:u</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> HISTCHARS</span><br><span class=\"line\">HISTCHARS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2) 通过:l 则使我们能够将所引用的参数全部更改为小写字母。</span></span><br><span class=\"line\">[root@vm-1575613390]~<span class=\"comment\"># echo SAVEHIST</span></span><br><span class=\"line\">SAVEHIST</span><br><span class=\"line\">[root@vm-1575613390]~<span class=\"comment\">#  echo !$:l</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> savehist</span><br><span class=\"line\">savehist</span><br><span class=\"line\"></span><br><span class=\"line\">PS:</span><br><span class=\"line\">- 助记技巧，将 :u 想成 uppercase 的开头字符</span><br><span class=\"line\">- 助记技巧，将 :l 想成 lowercase 的开头字符</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>5.Shell 还支持将多个修饰符进行联用，在它们之间只需使用: (冒号) 分隔即可。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.我们先用 :t 引用了路径的结尾部分，然后又使用 :u 将其更改为了大写</span></span><br><span class=\"line\">字母。</span><br><span class=\"line\">~$ ls /usr/share/fonts/truetype</span><br><span class=\"line\">~$ <span class=\"built_in\">echo</span> !$:t:u</span><br><span class=\"line\">~$ <span class=\"built_in\">echo</span> TRUETYPE</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h5 id=\"命令修饰符总结\"><a href=\"#命令修饰符总结\" class=\"headerlink\" title=\"命令修饰符总结\"></a>命令修饰符总结</h5><p>描述:总结一下历史命令展开的模式，史展开模式包括以下三个部分：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. !! !foo !n：用来调用历史列表中的命令</span><br><span class=\"line\">2. $ ˆ * n m-n n*：引用命令参数的各个部分</span><br><span class=\"line\">3. h t r [`前三个重点`] u l：修饰符，对所引用的内容进行修改</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>模式的每个部分之间都用 :（冒号）进行分隔，即太慢可以进行组合使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#引用 ec 打头命令的最后一位参数，并只保留路径尾部</span></span><br><span class=\"line\">~$ !ec:$:t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过脱字符 ^ 来替换上一条命令中的 debian 为 ubuntu 然后执行相同的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:~/docke/alpine<span class=\"comment\"># docker run --rm -it -e TZ=Asia/Shanghai debian date</span></span><br><span class=\"line\">Thu Jan  2 11:38:56 CST 2020</span><br><span class=\"line\">root@ubuntu:~/docke/alpine<span class=\"comment\"># ^debian^ubuntu</span></span><br><span class=\"line\">docker run --rm -it -e TZ=Asia/Shanghai ubuntu date</span><br><span class=\"line\">Thu Jan  2 03:44:13 Asia 2020</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h4 id=\"0x03-命令行编辑\"><a href=\"#0x03-命令行编辑\" class=\"headerlink\" title=\"0x03 命令行编辑\"></a>0x03 命令行编辑</h4><p>我们在 <code>Vim、Emacs、Sublime、VS Code</code> 等熟悉的编辑器中编辑文本时,通常会有一种十分舒服的感觉;</p>\n<p>Shell 命令行也能像文本编辑器一样编辑命令使我们的行编辑效率大大提升,下面我们将要学习Emacs(<code>Linux默认方式</code>)与vi两种编辑模式，注意这里只是小试牛刀，由于本人喜欢使用vi所以专门做了一篇文章进行记录;</p>\n<h5 id=\"设置编辑模式\"><a href=\"#设置编辑模式\" class=\"headerlink\" title=\"设置编辑模式\"></a>设置编辑模式</h5><p>描述:bash 与 zsh 都提供了 Emacs 和 vi 两种编辑模式，我们可以利用下面的命令在两种编辑模式下进行选择;</p>\n<ul>\n<li><p>bash 方式:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#临时生效</span></span><br><span class=\"line\">~$ <span class=\"built_in\">set</span> -o vi</span><br><span class=\"line\">~$ <span class=\"built_in\">set</span> -o emacs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zsh 方式:</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#临时生效</span></span><br><span class=\"line\">~$ <span class=\"built_in\">bindkey</span> -e</span><br><span class=\"line\">~$ <span class=\"built_in\">bindkey</span> -v</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>为了永久保存设置，我们需要将 bash 的设置选项添加到<code>~/.bashrc</code> 配置文件。而 zsh 的设置选项则需添加到<code>~/.zshrc</code> 配置文件；</p>\n<h5 id=\"Emacs-编辑模式\"><a href=\"#Emacs-编辑模式\" class=\"headerlink\" title=\"Emacs 编辑模式\"></a>Emacs 编辑模式</h5><p>描述:该模式下主要是按字移动和删除以及替换 、按 “词” 移动和删除、按行移动和删除;</p>\n<p>Emacs 编辑模式的内容编辑范围主要包括下列 3种：</p>\n<ul>\n<li><ol>\n<li>字</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>“词”</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>行</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>字移动和删除以及替换</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">echo</span> WeiyiG`e`ek  , 假如此时的光标在e的地方;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1.命令行中的光标移动方法</span></span><br><span class=\"line\">- 按左方向键（←）和右方向键（→）来向左或往右移动一个字符</span><br><span class=\"line\">- Ctrl + b 左移动一个字符 和  Ctrl + f 右移动一个字符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.命令行中删除字符的方法</span></span><br><span class=\"line\">Backspace 退格键</span><br><span class=\"line\">Ctrl + d  来删除光标下的字符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.交换左边的两个字符顺序</span></span><br><span class=\"line\">Ctrl + t <span class=\"comment\">#将光标左边的两个字符交换顺序</span></span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">echo</span> sl</span><br><span class=\"line\">sl</span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">echo</span> ls</span><br></pre></td></tr></table></figure>\n<p>注意事项:在空的命令行按 Ctrl + d 将退出 Shell。</p>\n</li>\n<li><p>2 按 “词” 移动和删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)命令行默认分词符号查看</span></span><br><span class=\"line\"><span class=\"comment\">#通过变量 WORDCHARS 我们可以看到这类字符到底有哪些</span></span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">echo</span> <span class=\"variable\">$WORDCHARS</span>    <span class=\"comment\">#bash 空行</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># zsh 中对 “词” 的界定跟 bash 有所不同</span></span><br><span class=\"line\">~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$WORDCHARS</span></span><br><span class=\"line\">*?_-.[]~=/&amp;;!<span class=\"comment\">#$%ˆ()&#123;&#125;&lt;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2)命令行默认分词符号设置</span></span><br><span class=\"line\">:~$ WORDCHARS=    <span class=\"comment\">#将zsh判定词的行为与bash一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3) 按 “词” 移动和删除的操作例子：</span></span><br><span class=\"line\">$ grep <span class=\"string\">'figlet'</span> /var/<span class=\"built_in\">log</span>/pacman.log </span><br><span class=\"line\"></span><br><span class=\"line\">Alt + b 向左移动一个 “词”</span><br><span class=\"line\">Alt + f 往右移动一个 “词”</span><br><span class=\"line\">Alt + 退格键 删除光标左边的 “词”</span><br><span class=\"line\">Ctrl + w 同上</span><br><span class=\"line\">Alt + d 删除光标右边的 “词”</span><br><span class=\"line\">Ctrl + y 获取上次删除的内容</span><br><span class=\"line\">Alt + t 交换光标左边两个 “词” 的顺序</span><br><span class=\"line\"><span class=\"comment\">#zsh特有</span></span><br><span class=\"line\">Esc + c 将光标右边的 “词” 的开头字母变成大写</span><br><span class=\"line\">Esc + u 将光标右边的 “词” 全部更改为大写字母</span><br><span class=\"line\">Esc + l 将光标右边的 “词” 全部更改为小写字母</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.按行移动和删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + a 将光标移到行首（最左边）</span><br><span class=\"line\">Ctrl + e 将光标移到行尾（最右边）</span><br><span class=\"line\">Ctrl + k 从光标处往右删除至行尾</span><br><span class=\"line\">Ctrl + u 从光标处向左删除至行首</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.Emacs 编辑模式总结</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200509101249.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ul>\n<hr>\n<h5 id=\"vi-编辑模式\"><a href=\"#vi-编辑模式\" class=\"headerlink\" title=\"vi 编辑模式\"></a>vi 编辑模式</h5><p>描述：与 Emacs 编辑模式相比，vi 编辑模式为我们提供了更多的控制命令;</p>\n<ul>\n<li><p>移动命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#（1）vi 编辑模式中的移动命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> hello, this is a <span class=\"built_in\">command</span></span><br><span class=\"line\"><span class=\"comment\">#首先，按 Esc 键进入命令模式，此时光标位于 command 结尾的 d 上。</span></span><br><span class=\"line\">h 向左移动一个字符</span><br><span class=\"line\">l 往右移动一个字符</span><br><span class=\"line\">b 向左移动一个单词</span><br><span class=\"line\">w 往右移动一个单词</span><br><span class=\"line\">e 移到单词结尾</span><br><span class=\"line\">B、W、E 与 b、w、e 类似，按不同的单词定义进行移动</span><br><span class=\"line\">0 移到行首</span><br><span class=\"line\">ˆ 移到行首，但第一个字符为非空白字符</span><br><span class=\"line\">$ 移到行尾</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重复命令:每个移动命令之前可以跟一个数字，用来将该命令重复执行多次。<br>例如，3b 表示向左移动 3 个单词，5l 则表示往右移动 5 个字符。</p>\n</li>\n<li><p>添加文本:编辑可以从vi命令模式回到插入模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 在光标左边插入新的文本内容</span><br><span class=\"line\">a 在光标右边追加新的文本内容</span><br><span class=\"line\">I 在行开头插入新的文本内容</span><br><span class=\"line\">A 在行结尾追加新的文本内容</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除文本:跟移动命令一样，在上述删除命令之前也可以带一个数字，以便多次执行该命令。<br>例如:5x 将删除 5 个字符，而 3dw 将删除 3 个单词，这里 3 的顺序并不重要，d3w 仍然同样有效。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x 删除光标下的字符</span><br><span class=\"line\">X 删除光标左边的字符</span><br><span class=\"line\">dm m 为某个移动指令，如 db 删除光标左边的单词 ，dl则是删除光标右边的单词(值得学习)</span><br><span class=\"line\">D 从光标处删除到行尾</span><br><span class=\"line\">dd 删除整行内容</span><br></pre></td></tr></table></figure>\n<p>注意:通过删除命令删除的内容，Shell 并没有丢弃，而是将其保留在了删除缓冲器中,我们可以通过执行u命令来恢复这些删除的内容(可以多次使用)</p>\n</li>\n<li><p>替换文本:在删除该内容后再进入插入模式重新输入外，也可以使用 vi 编辑模式所提供的文本替换命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#先进入命令模式，按 cb 将 kode 删除后进入了插入模式，我们输入新的内容 code。再次按 Esc，接着按 4b 左移到 show，按 r 将s 替换成 S</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> talk is cheap. show me the kode.</span><br><span class=\"line\"></span><br><span class=\"line\">cm m 为某个移动命令，如 cw 将光标右边的单词删掉后进入插入模式</span><br><span class=\"line\">C 从光标处删除到行尾，并进入插入模式</span><br><span class=\"line\">cc 删除整行，并进入插入模式</span><br><span class=\"line\">r 替换光标下的字符</span><br><span class=\"line\">R 进入替换文本模式，直到按 Esc 结束</span><br><span class=\"line\">s 利用输入的字符来替换光标下的字符，直到按 Esc 结束</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索字符:令用于搜索命令行中的字符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#当跟 d 和 c 命令组合使用，还能够删除或更改从光标处到该字符的这一段文本。</span></span><br><span class=\"line\"><span class=\"comment\">#进入命令模式后，按 fp 光标移到了 p 上，按 th 移到了 h 左边的w。按 Fm 光标左移到 m 上。</span></span><br><span class=\"line\">:~$ <span class=\"built_in\">echo</span> A program <span class=\"built_in\">which</span> handles the interface</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">fc</span> 移动光标到 c 的下一处</span><br><span class=\"line\">Fc 与 f 相反方向搜索，移动光标到 c 的上一处</span><br><span class=\"line\">tc 移动光标到 c 左边的字符</span><br><span class=\"line\">Tc 移动光标到 c 右边的字符</span><br><span class=\"line\">; 重复上次的 f 或 F 命令</span><br><span class=\"line\">, 以相反的方向重复上次的 f 或 F 命令</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>vi 编辑模式总结:</strong><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200509102931.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<hr>\n<h4 id=\"0x04-必备锦囊\"><a href=\"#0x04-必备锦囊\" class=\"headerlink\" title=\"0x04 必备锦囊\"></a>0x04 必备锦囊</h4><h5 id=\"快速导航\"><a href=\"#快速导航\" class=\"headerlink\" title=\"快速导航\"></a>快速导航</h5><p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.回到用户主目录和指定用户家目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~ </span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~weiyigeek <span class=\"comment\">#来转到别的用户的主目</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.回到上次工作的目录(可以重复执行)</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> - </span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$OLDPWD</span>\"</span> &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.访问常用目录</span></span><br><span class=\"line\"><span class=\"comment\">#bash 和 zsh 两个都为我们提供了 $CDPATH 变量，它由 : (冒号) 分隔的路径列表组成(类似于$PATH)。</span></span><br><span class=\"line\">~$ CDPATH=:~:~/src:~/tmp/WeiyiGeek  <span class=\"comment\">#$CDPATH 路径列表中的目录为待导航的目标目录</span></span><br><span class=\"line\">的父目录</span><br><span class=\"line\"><span class=\"comment\">#假如我们打算转到 ~/tmp/web/iscsi 目录下的话，那么只要执行下列命令即可</span></span><br><span class=\"line\">[root@vm-1575613390 ~]$ mkdir /tmp/web/iscsi</span><br><span class=\"line\">[root@vm-1575613390 ~]$ CDPATH=:~:~/src:/tmp/web</span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">cd</span> iscsi &amp;&amp; <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/tmp/web/iscsi</span><br><span class=\"line\">/tmp/web/iscsi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.自动纠正错误:帮助我们自动纠正拼写错误，并导航到正确的目录</span></span><br><span class=\"line\"><span class=\"comment\">#开启 bash 的控制选项：shopt -s cdspell</span></span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">shopt</span> -s cdspell</span><br><span class=\"line\">[root@vm-1575613390 ~]$ <span class=\"built_in\">cd</span> /ect  <span class=\"comment\">#原本是想要导航到 /etc 目录，但是我们却错输成了 /ect , 但是任然可以正确的进入etc目录中;</span></span><br><span class=\"line\">/etc <span class=\"comment\">#如果cd 有两个参数则以第二个字符串替换它;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5.自动导航</span></span><br><span class=\"line\"><span class=\"comment\">#启用 autocd 选项：shopt -s autocd | setopt autocd</span></span><br><span class=\"line\"><span class=\"comment\">#现在假设我们想导航到 ~/prj 目录，省略 cd 命令代替执行：</span></span><br><span class=\"line\">~$ prj</span><br><span class=\"line\">~/prj$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/weiyigeek/prj</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#6.使用目录栈:两个最基本的目录栈命令是 pushd 和 popd。</span></span><br><span class=\"line\">* <span class=\"built_in\">pushd</span> 命令将一个目录添加到目录栈中(入栈)</span><br><span class=\"line\">* <span class=\"built_in\">popd</span> 命令则从目录栈中移除上次添加的目录(弹栈)</span><br><span class=\"line\">[root@vm-1575613390 tmp]$ ls</span><br><span class=\"line\">a  b</span><br><span class=\"line\">[root@vm-1575613390 tmp]$ <span class=\"built_in\">pushd</span> ./a/</span><br><span class=\"line\">/tmp/a /tmp</span><br><span class=\"line\">[root@vm-1575613390 a]$ <span class=\"built_in\">pushd</span> /etc/ssh/</span><br><span class=\"line\">/etc/ssh /tmp/a /tmp</span><br><span class=\"line\">[root@vm-1575613390 ssh]$ <span class=\"built_in\">popd</span></span><br><span class=\"line\">/tmp/a /tmp</span><br><span class=\"line\">[root@vm-1575613390 a]$ <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/tmp/a</span><br><span class=\"line\"><span class=\"comment\">#如果你在执行多次入栈与出栈后忘了目录栈中还有哪些条目的话，那么可以执行 dirs -v 命令来查看;</span></span><br><span class=\"line\"><span class=\"built_in\">dirs</span> -v</span><br><span class=\"line\"> 0  /tmp/a</span><br><span class=\"line\"> 1  /tmp</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"使用别名\"><a href=\"#使用别名\" class=\"headerlink\" title=\"使用别名\"></a>使用别名</h5><p>描述:我们使用alias命令来定义别名，比如一些发行版本中我们可以使用ll别名来显示<code>ls -lah --color=auto</code>所达到的效果;</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.alias别名此处是临时生效，如果想永久生效需要在profile 或 bashrc中加入;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> ls=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> sl=<span class=\"string\">'ls --color=auto'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.alias 命令还能用 -s 选项来定义后缀别名。</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> -s pdf=zathura</span><br><span class=\"line\"><span class=\"comment\">#通过执行 cheat_sheet_ssh_v4.pdf 来代替执行 zathuracheat_sheet_ssh_v4.pdf 命令</span></span><br><span class=\"line\">cheat_sheet_ssh_v4.pdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.查看别名</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> sd</span><br><span class=\"line\"><span class=\"built_in\">alias</span> sd=<span class=\"string\">'shutdown -h now'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.取消别名（永久和临时）</span></span><br><span class=\"line\"><span class=\"built_in\">unalias</span> sl</span><br><span class=\"line\">\\sl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.PS:别名中无法参数化</span></span><br><span class=\"line\"><span class=\"comment\">#你应当考虑使用的是函数。另一方面，别名可能覆盖真实的命令，从而误导你原本想要执行命令的意图。</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> -a ll</span><br><span class=\"line\">ll is aliased to `ls -l --color=auto<span class=\"string\">'</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h5 id=\"构造参数\"><a href=\"#构造参数\" class=\"headerlink\" title=\"{} 构造参数\"></a>{} 构造参数</h5><p>描述:针对多个参数条目执行操作的使用场景</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.(Shell 也支持通过 .. (两点) 来指定一个区间)与连用嵌套</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;1..9..2&#125;  <span class=\"comment\">#步进值</span></span><br><span class=\"line\">1 3 5 7 9</span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;1..9..-2&#125; <span class=\"comment\">#倒序罗列数字</span></span><br><span class=\"line\">9 7 5 3 1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;9..1..2&#125;  <span class=\"comment\">#效果同上</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;&#123;A..Z&#125;,&#123;a..z&#125;,&#123;0..9&#125;&#125; <span class=\"comment\"># &#123;&#125; (花括号) 结构不仅可以连用，而且能够嵌套</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.bash 和 zsh 都提供了逗号分隔的花括号列表</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;one,two,three&#125; <span class=\"comment\">#生成以下 3 个参数条目</span></span><br><span class=\"line\">one two three</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.批量创建文件或者目录</span></span><br><span class=\"line\">touch &#123;1..9&#125;.txt <span class=\"comment\">#创建1-9个txt文件;</span></span><br><span class=\"line\">mkdir &#123;a..z&#125;     <span class=\"comment\">##创建a-z名称的目录;</span></span><br><span class=\"line\">mkdir -p 2019/&#123;01..12&#125;/&#123;baby,photo&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.备份文件与来创建存档</span></span><br><span class=\"line\">cp file&#123;,.bak&#125;     <span class=\"comment\">#参数 file&#123;,.bak&#125; 展开后将变成 file -&gt;&gt; file.bak</span></span><br><span class=\"line\">tar cf docs&#123;.tar,&#125; <span class=\"comment\">#将 docs 目录存档为 docs.tar。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例4.通过生成的序列，将其与路径组合，在下载多个文件时尤其有用</span></span><br><span class=\"line\">~$ wget https://linuxtoy.org/img/&#123;1..5&#125;.png</span><br></pre></td></tr></table></figure>\n<h5 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.要求 Shell 在执行 grep 命令后直接将文件名传递给文本编辑器 (如 nvim)：</span></span><br><span class=\"line\">vim `grep -l error *.py`</span><br><span class=\"line\">vim $(grep -l error *.py)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在嵌套时，$() 看起来一目了然，而 `` (反引号) 则需要转义，其可读性较差。</span></span><br><span class=\"line\">~$ vim $(grep -l failed $(date +<span class=\"string\">'%Y%m%d'</span>).<span class=\"built_in\">log</span>)</span><br><span class=\"line\">~$ vim `grep -l failed \\`date +<span class=\"string\">'%Y%m%d'</span>\\`.<span class=\"built_in\">log</span>`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.查询后进行打开</span></span><br><span class=\"line\">grep -l ssh /etc/ssh/* | awk <span class=\"string\">'&#123;cmd=\"cat \" $1;system(cmd)&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.重复执行命令，利用 Shell 提供的 for 循环；</span></span><br><span class=\"line\">~$ <span class=\"built_in\">cd</span> /usr/share/figlet</span><br><span class=\"line\">~$ <span class=\"keyword\">for</span> font <span class=\"keyword\">in</span> *.tlf</span><br><span class=\"line\">&gt; <span class=\"keyword\">do</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"Font: <span class=\"variable\">$font</span>\"</span></span><br><span class=\"line\">&gt; figlet -f $(basename <span class=\"variable\">$font</span> .tlf) Linux</span><br><span class=\"line\">&gt; <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#单行形式</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> font <span class=\"keyword\">in</span> *.tlf; <span class=\"keyword\">do</span> figlet -f $(basename <span class=\"variable\">$font</span> .tlf) Linux; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"0x05-补充命令\"><a href=\"#0x05-补充命令\" class=\"headerlink\" title=\"0x05 补充命令\"></a>0x05 补充命令</h4><h5 id=\"cmatrix-命令\"><a href=\"#cmatrix-命令\" class=\"headerlink\" title=\"cmatrix 命令\"></a>cmatrix 命令</h5><p>描述:这是在黑客帝国中显示代码雨效果的命令;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install ncurses* gcc gcc-c++</span><br><span class=\"line\">tar xf cmatrix-1.2a.tar.gz</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cmatrix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#特殊按键不同的效果</span></span><br><span class=\"line\">a B b n</span><br><span class=\"line\">1~9</span><br><span class=\"line\">! @ <span class=\"comment\"># $</span></span><br></pre></td></tr></table></figure></p>\n<p><em>参数参考:</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a:异步滚动</span><br><span class=\"line\">-B:启用粗体字符</span><br><span class=\"line\">-b:所有粗体字符（覆盖-b）</span><br><span class=\"line\">-f:强制启用linux<span class=\"variable\">$term</span>类型</span><br><span class=\"line\">-l:linux模式（使用矩阵控制台字体）</span><br><span class=\"line\">-o:使用旧式滚动</span><br><span class=\"line\">-h:打印使用和退出</span><br><span class=\"line\">-n:无粗体字符（覆盖-b和-b，默认）</span><br><span class=\"line\">-s:“屏幕保护程序”模式，在第一次按键时退出</span><br><span class=\"line\">-x:窗口模式，如果您的xterm使用mtx.pcf，则使用</span><br><span class=\"line\">-v:打印版本信息并退出</span><br><span class=\"line\">-u:延迟（0-10，默认4）：屏幕更新延迟</span><br><span class=\"line\">-C[颜色]:将此颜色用于矩阵（默认为绿色）</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200502233257.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h5 id=\"shopt-命令\"><a href=\"#shopt-命令\" class=\"headerlink\" title=\"shopt 命令\"></a>shopt 命令</h5><p>描述:用于显示和设置shell中的行为选项，通过这些选项以增强shell易用性。<br>PS:若不带任何参数选项，则可以显示所有可以设置的shell操作选项。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$shopt</span></span><br><span class=\"line\"><span class=\"comment\">#shell操作选项</span></span><br><span class=\"line\">autocd          off  <span class=\"comment\">#对于目录可以忽略cd从而只输入目录名即可进入;</span></span><br><span class=\"line\">cdable_vars     off  <span class=\"comment\">#如果给cd内置命令的参数不是一个目录就假设它是一个变量名,变量的值是将要转换到的目录</span></span><br><span class=\"line\">cdspell         off  <span class=\"comment\">#目录名的较小拼写错误，检查的错误包括颠倒顺序的字符,遗漏的字符以及重复的字符,它会自动修改为正确路径</span></span><br><span class=\"line\">checkhash       off  <span class=\"comment\">#bash在试图执行一个命令前,先在哈希表中寻找,以确定命令是否存在.如果命令不存在,就执行正常的路径搜索</span></span><br><span class=\"line\">checkjobs       off</span><br><span class=\"line\">checkwinsize    off  <span class=\"comment\">#bash在每个命令后检查窗口大小,如果有必要,就更新LINES和COLUMNS的值</span></span><br><span class=\"line\">cmdhist         on   <span class=\"comment\">#bash试图将一个多行命令的所有行保存在同一个历史项中.这是的多行命令的重新编辑更方便(缺省on)</span></span><br><span class=\"line\">compat31        off</span><br><span class=\"line\">compat32        off</span><br><span class=\"line\">compat40        off</span><br><span class=\"line\">compat41        off</span><br><span class=\"line\">direxpand       off</span><br><span class=\"line\">dirspell        off</span><br><span class=\"line\">dotglob         off  <span class=\"comment\">#Bash在文件名扩展的结果中包括以点(.)开头的文件名</span></span><br><span class=\"line\">execfail        off  <span class=\"comment\">#如果一个非交互式shell不能执行指定给exec内置命令作为参数的文件它不会退出，如果exec失败一个交互式shell不会退出</span></span><br><span class=\"line\">expand_aliases  on   <span class=\"comment\">#别名被扩展(缺省on)</span></span><br><span class=\"line\">extdebug        off</span><br><span class=\"line\">extglob         on   <span class=\"comment\">#打开扩展的模式匹配特性(正常的表达式元字符来自Korn shell的文件名扩展)(缺省on)</span></span><br><span class=\"line\">extquote        on</span><br><span class=\"line\">failglob        off</span><br><span class=\"line\">force_fignore   on</span><br><span class=\"line\">globstar        off</span><br><span class=\"line\">gnu_errfmt      off</span><br><span class=\"line\">histappend      on   <span class=\"comment\">#如果readline正被使用,用户有机会重新编辑一个失败的历史替换</span></span><br><span class=\"line\">histreedit      off</span><br><span class=\"line\">histverify      off  <span class=\"comment\">#如果设置,且readline正被使用,历史替换的结果不会立即传递给shell解释器.而是将结果行装入readline编辑缓冲区中,允许进一步修改</span></span><br><span class=\"line\">hostcomplete    off  <span class=\"comment\"># 如果设置,且readline正被使用,当正在完成一个包含@的词时bash将试图执行主机名补全</span></span><br><span class=\"line\">huponexit       off</span><br><span class=\"line\">interactive_comments on <span class=\"comment\">#在一个交互式shell中.允许以#开头的词以及同一行中其他的字符被忽略.缺省为打开</span></span><br><span class=\"line\">lastpipe        off   </span><br><span class=\"line\">lithist         off <span class=\"comment\">#如果打开,且cmdhist选项也打开,多行命令讲用嵌入的换行符保存到历史中,而无需在可能的地方用分号来分隔</span></span><br><span class=\"line\">login_shell     on</span><br><span class=\"line\">mailwarn        off  <span class=\"comment\">#如果设置,且bash用来检查邮件的文件自从上次检查后已经被访问,将显示消息”The mail in mailfile has been read”</span></span><br><span class=\"line\">no_empty_cmd_completion off</span><br><span class=\"line\">nocaseglob      off  <span class=\"comment\">#如果设置,当执行文件名扩展时,bash在不区分大小写的方式下匹配文件名</span></span><br><span class=\"line\">nocasematch     off</span><br><span class=\"line\">nullglob        off  <span class=\"comment\">#如果设置,bash允许没有匹配任何文件的文件名模式扩展成一个空串,而不是他们本身</span></span><br><span class=\"line\">progcomp        on</span><br><span class=\"line\">promptvars      on   <span class=\"comment\">#如果设置,提示串在被扩展后再进行变量和参量扩展.缺省为打开</span></span><br><span class=\"line\">restricted_shell        off <span class=\"comment\">#如果shell在受限模式下启动就设置这个选项.该值不能被改变.当执行启动文件时不能复位该选项,允许启动文件发现shell是否受限</span></span><br><span class=\"line\">shift_verbose   off  <span class=\"comment\">#如果该选项设置,当移动计数超出位置参量个数时,shift内置命令将打印一个错误消息</span></span><br><span class=\"line\">sourcepath      on   <span class=\"comment\">#如果设置source内置命令使用PATH的值来寻找作为参数提供的文件的目录.缺省为打开</span></span><br><span class=\"line\">syslog_history  off</span><br><span class=\"line\">xpg_echo        off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数</span></span><br><span class=\"line\">-s 开启指定扩展命令</span><br><span class=\"line\">-u 关闭指定扩展命令</span><br><span class=\"line\">-p 列出所有可设置的选项.</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.启动关闭扩展 extglob </span></span><br><span class=\"line\"><span class=\"built_in\">shopt</span> -s extglob  <span class=\"comment\">#启动命令</span></span><br><span class=\"line\"><span class=\"built_in\">shopt</span> -u extglob  <span class=\"comment\">#关闭命令</span></span><br><span class=\"line\"><span class=\"comment\">#开启之后，以下5个模式匹配操作符将被识别(正则表达式)：</span></span><br><span class=\"line\">* ?(pattern-list) - 所给模式匹配0次或1次；</span><br><span class=\"line\">* *(pattern-list) - 所给模式匹配0次以上包括0次；</span><br><span class=\"line\">* +(pattern-list) - 所给模式匹配1次以上包括1次；</span><br><span class=\"line\">* @(pattern-list) - 所给模式仅仅匹配1次；</span><br><span class=\"line\">* !(pattern-list) - 不匹配括号内的所给模式。</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf !(*jpg)     <span class=\"comment\">#删除文件名不以jpg结尾的文件： </span></span><br><span class=\"line\">rm -rf *@(jpg|png) <span class=\"comment\">#删除文件名以jpg或png结尾的文件，此处@表示限定：</span></span><br><span class=\"line\">rm -rf file[1-3]   <span class=\"comment\">#删除当前目录下所有file开头的文件或目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.zsh 也支持 - (减号) 这种区间表示，不过需要启用 braceccl 选项。</span></span><br><span class=\"line\">~$ <span class=\"built_in\">setopt</span> braceccl</span><br><span class=\"line\">~$ <span class=\"built_in\">echo</span> &#123;A-Za-z&#125;</span><br><span class=\"line\">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class=\"line\">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"pushd-命令\"><a href=\"#pushd-命令\" class=\"headerlink\" title=\"pushd 命令\"></a>pushd 命令</h5><h5 id=\"popd-命令\"><a href=\"#popd-命令\" class=\"headerlink\" title=\"popd 命令\"></a>popd 命令</h5><p>描述:pushd和popd命令是操作目录栈,改变栈顶元素会切换目录;</p>\n<ul>\n<li>pushd命令:将元素加入到栈顶</li>\n<li>popd命令:将栈顶元素删除</li>\n</ul>\n<p>什么是目录栈的概念?</p>\n<blockquote>\n<p>存放一个或多个目录，栈中至少要有一个元素。栈顶元素永远是当前目录：使用cd命令切换目录会改变目录栈的栈顶元素，</p>\n</blockquote>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: <span class=\"built_in\">pushd</span> [-n] [+N | -N | dir]  </span><br><span class=\"line\"><span class=\"built_in\">pushd</span> +N  <span class=\"comment\"># 将栈内元素循环左移，直到将（从左边数）第N个元素移动到栈顶，由0开始计。</span></span><br><span class=\"line\"><span class=\"built_in\">pushd</span> -N  <span class=\"comment\"># 将栈内元素循环左移，直到将（从右边数）第N个元素移动到栈顶，由0开始计。</span></span><br><span class=\"line\"><span class=\"built_in\">pushd</span> -n dir <span class=\"comment\"># 将目录入栈，但不改变当前元素，即将目录插入栈中作为第二个元素。 注意-n参数要在目录之前。</span></span><br></pre></td></tr></table></figure></p>\n<p>实际示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.将路径或者元素加入栈中</span></span><br><span class=\"line\"><span class=\"built_in\">pushd</span> /var/<span class=\"built_in\">log</span>/journal/</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/journal /usr/bin /etc/apt /etc/ssh /</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.不加参数时，交换栈顶前两个元素</span></span><br><span class=\"line\">❯ <span class=\"built_in\">pushd</span></span><br><span class=\"line\">/usr/bin /var/<span class=\"built_in\">log</span>/journal /etc/apt /etc/ssh /</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.pushd 命令中的 + (加号) 用于从上往下计数,使用 - (减号) 来从下往上计数;</span></span><br><span class=\"line\">❯ <span class=\"built_in\">pushd</span> +1</span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/journal /etc/apt /etc/ssh / /usr/bin  <span class=\"comment\">#将栈顶得元素移动到栈底并进入第二参数目录中</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/journal </span><br><span class=\"line\">❯ <span class=\"built_in\">pushd</span> +1</span><br><span class=\"line\">/etc/apt /etc/ssh / /usr/bin /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">/etc/apt</span><br></pre></td></tr></table></figure></p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">popd</span> +N  <span class=\"comment\"># 删除栈中（从左边数）第N个元素，由0开始计。</span></span><br><span class=\"line\"><span class=\"built_in\">popd</span> -N  <span class=\"comment\"># 删除栈中（从右边数）第N个元素，由0开始计。</span></span><br><span class=\"line\">pop -n <span class=\"comment\"># 不改变当前目录（也就是不改变栈顶元素，操作除了栈顶外栈内其他元素）</span></span><br></pre></td></tr></table></figure></p>\n<p>实际示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.执行 popd -1 命令后从目录栈中移除了倒数第二个条目 </span></span><br><span class=\"line\">❯ <span class=\"built_in\">popd</span> -1</span><br><span class=\"line\">/etc/ssh /etc/apt /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">❯ <span class=\"built_in\">popd</span> -1</span><br><span class=\"line\">/etc/ssh /var/<span class=\"built_in\">log</span>/journal  <span class=\"comment\">#/etc/apt 右边正数第二个参数</span></span><br><span class=\"line\">/etc/ssh </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.弹栈不切换目录</span></span><br><span class=\"line\">/etc/ssh /var/<span class=\"built_in\">log</span>/journal</span><br><span class=\"line\">❯ <span class=\"built_in\">popd</span> -n</span><br><span class=\"line\">/etc/ssh</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"dirs-命令\"><a href=\"#dirs-命令\" class=\"headerlink\" title=\"dirs 命令\"></a>dirs 命令</h5><p>描述:查看现在目录栈元素;</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示当前目录栈元素</span></span><br><span class=\"line\"><span class=\"built_in\">dirs</span></span><br><span class=\"line\">/home /</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.按索引列出当前目录栈元素</span></span><br><span class=\"line\"><span class=\"built_in\">dirs</span> -v  </span><br><span class=\"line\">0 /home</span><br><span class=\"line\">1 /</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"SystemOperation","path":"api/categories/SystemOperation.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]}