{"title":"1.Nginx基础介绍与安装配置实践指南","slug":"系统运维/Application/Web/WebApp/Nginx/1.Nginx基础介绍与安装配置实践指南","date":"2019-09-01T05:34:30.000Z","updated":"2022-08-12T06:56:22.737Z","url":"2019/9-1-121.html","path":"api/articles/2019/9-1-121.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200329113934.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916161658.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190909102748.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916164742.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916162055.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916162004.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190906115445.png"],"content":"<p><strong>本章目录</strong></p>\n<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"1-Ngnix介绍\"><a href=\"#1-Ngnix介绍\" class=\"headerlink\" title=\"1.Ngnix介绍\"></a>1.Ngnix介绍</h4><p>官方描述:Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server;<br>描述：Nginx(读音”engine x”)是一个<code>高性能的HTTP负载均衡和反向代理服务器</code>，在2019.3.12被F5硬件负载均衡厂家以6.7亿美金收购了，主要是用于发布网站代码，提供网页信息服务的，用户通过浏览器可以实现页面的访问，也可以是一个IMAP/POP3/SMTP代理服务器；在高连接并发的情况下Nginx是Apache服务器不错的替代品,其特点是占有内存少，并发能力强（在同类型的网页服务器中表现较好），Nginx采用C进行编写，不论是系统资源开销还是CPU使用效率都比Perlbal要好很多；</p>\n<p><br></p>\n<p><strong>主要功能:</strong></p>\n<ul>\n<li>负载均衡服务器:用户每次访问都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况（nginx会给你分配服务器压力小的去访问）;</li>\n<li>HTTP代理服务器对外进行服务:通过第三方服务器访问内部服务器集群的内容，但是我们并不知道是哪一台服务器提供的内容;</li>\n<li>动态网页与静态网页资源相互分离以提高网站的整体性能;</li>\n</ul>\n<p><br></p>\n<p><strong>Nginx特点:</strong></p>\n<ul>\n<li>安装启用简单以及跨平台,配置文件非常简洁（还能够支持perl语法）, 并且Bugs非常少的服务器性能优秀稳定，能够在升级情况下不间断服务</li>\n<li>提供反向代理(代理转发功能)、负载均衡、WEB服务器(处理静态文件)和支持7层负载均衡和故障隔离等功能</li>\n<li>Nginx 采用C进行编写内存占有少,使用更少的资源，稳定性高等优势，并且依靠并发能力强，丰富的模块库以及友好灵活的配置而闻名(具有高性能、轻量级、内存消耗少，强大的负载均衡能力等优势。)</li>\n<li>由于它的内存占用少（一个worker进程只占用10-12M内存），启动极快，高并发能力强(5w/s)-相当于Apache WEB整体性能的5-10倍，在互联网项目中广泛应用。</li>\n<li>总结一句:<code>IO多路复用（多线程）， 轻量级 ， 功能模块少，代码模块化，并发处理能力强</code></li>\n</ul>\n<p><em>什么是IO多路复用（多线程）?</em></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200329113934.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p><strong>架构体系:</strong><br>动静分离是每个网站发展到一定规模之后必然的结果。</p>\n<ul>\n<li>静态网页一般是跟后端数据库不发生交互的网页，其网页内容很少更新或者几乎不更新，网页文件后缀命名通常是以<code>.htm、.html、.xml</code>结尾的。</li>\n<li>动态网页一般是跟后端数据库发生交互的网页，其网页内容经常更新或者随着后端数据库内容变化而更新，网页文件后缀命名通常是以<code>.asp、.jsp、.php</code>结尾的。</li>\n</ul>\n<p>静态请求则应当最好将其拆分并启用独立的域名，既便于管理的需要也便于今后能够快速支持CDN。<br>如果一台Nginx性能无法满足，则可以考虑<code>在Nginx前端添加LVS负载均衡</code>，由多台Nginx共同分担网站请求。</p>\n<p>新版Nginx目前已经支持直接读写Memcache，可以编译安装时候选择添加此类模块，从而节省了转交给PHP或者JPS等动态程序服务器处理时间，提高效率的同时，减小了动态服务器的负载。</p>\n<p>使用场景:(Nginx有点入口网关的味道)<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916161658.png\" alt=\"WeiyiGeek.技术架构\" title=\"\" class=\"\">\n                <p>WeiyiGeek.技术架构</p>\n            </figure></p>\n<p><br></p>\n<p><strong>补充:</strong><br>目前 Nginx 的主力竞争对手莫过于 Apache ，性能优秀稳定、配置简单以及跨平台，下面做了一个简单的对比帮助大家更好的理解 Nginx 的优势。</p>\n<ul>\n<li>常见的中间件服务:<code>httpd-apache基金会的产品,IIS-微软的产品,gws-google的产品</code>;</li>\n<li>Nginx 配置简洁, Apache 配置复杂</li>\n<li>Nginx 静态处理性能比 Apache 高 3倍以上，Apache 对 PHP 支持比较简单，Nginx 需要配合其他后端来使用 </li>\n<li>Apache 的组件比 Nginx 多</li>\n<li>核心的区别: <ul>\n<li>apache是同步多进程模型，一个连接对应一个进程; nginx是异步的，多个连接（万级别）可以对应一个进程 。</li>\n<li>nginx的优势是处理静态请求cpu内存使用率低; apache适合处理动态请求，所以现在一般前端用nginx作为反向代理抗住压力，apache作为后端处理动态请求。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"2-Nginx安装\"><a href=\"#2-Nginx安装\" class=\"headerlink\" title=\"2.Nginx安装\"></a>2.Nginx安装</h4><p>描述:基于线上CentOS Linux云服务器，构建一套Nginx WEB服务器平台，主要部署的方式有两种：<br><em>YUM二进制方式:</em></p>\n<ul>\n<li>部署方式相对比较简单、快捷、高效，可以自动校验软件包的正确性，可以自动解决软件包之间的依赖关系，可以自动安装软件服务并且设置为系统服务，不能自定义软件服务特定的功能和模块，安装之后的文件和目录相对比较分散，不便于后期的维护和管理。</li>\n</ul>\n<p><em>MAKE源码编译方式</em></p>\n<ul>\n<li>部署方式相对比较复杂、繁琐、低效，不能自动校验软件包的正确性，不能自动解决软件包之间的依赖关系，不能自动安装软件服务并且设置为系统服务，可以自定义软件服务特定的功能和模块，安装之后的文件和目录相对比较统一，便于后期的维护和管理。</li>\n</ul>\n<h5 id=\"2-0-源码安装\"><a href=\"#2-0-源码安装\" class=\"headerlink\" title=\"2.0 源码安装\"></a>2.0 源码安装</h5><p>我们利用Ngnix源码方式进行安装<br>安装环境：CentOS Linux release 7.6.1810 (Core) 3.10.0-957.5.1.el7.x86_64</p>\n<p><strong>2.1) 安装包以及依赖包下载</strong><br>Nginx下载地址：<a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a></p>\n<p>Q：Mainline version、Stable version、Legacy version的版本区别?<br>A: Nginx官网提供了三个类型的版本,</p>\n<ul>\n<li>Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版</li>\n<li>Stable version：最新稳定版，生产环境上建议使用的版本</li>\n<li>Legacy versions：遗留的老版本的稳定版</li>\n</ul>\n<p><br></p>\n<p><em>Nginx依赖包下载地址:</em></p>\n<ul>\n<li>1) gzip模块需要zlib库(<a href=\"http://www.zlib.net/\" target=\"_blank\" rel=\"noopener\">http://www.zlib.net/</a>)</li>\n<li>2) ssl功能需要openssl库(<a href=\"http://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">http://www.openssl.org/</a>)</li>\n<li>3) rewrite模块需要pcre库(<a href=\"http://www.pcre.org/\" target=\"_blank\" rel=\"noopener\">http://www.pcre.org/</a>)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx_packege</span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.16.1.tar.gz</span><br><span class=\"line\">wget http://prdownloads.sourceforge.net/libpng/zlib-1.2.11.tar.gz</span><br><span class=\"line\">wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz -O pcre.tar.gz</span><br><span class=\"line\">wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-fips-2.0.16.tar.gz</span><br><span class=\"line\">wget https://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2r.tar.gz (可选|全包)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>2.2) Nginx安装</strong><br>描述：因为Nginx是基于C语言开发的源代码程序，默认是不能被Linux操作系统直接使用的，需要借助C编译器将源代码文件编译生成二进制文件，所以需执行源代码软件包部署三个步骤。</p>\n<ul>\n<li>预编译<code>./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module</code><br>主要是检测Linux系统安装该软件所需的依赖环境、库文件，检测Linux系统是否存在GCC编译环境（C编译器），指定软件服务部署的路径，自定义软件服务特定的功能和模块，最终会产生Makefile文件。</li>\n<li>编译 make -j 4<br>主要是通过make编译工具，读取Makefile文件，调用Linux操作系统下GCC编译环境（C编译器），将软件包中的源代码文件编译生成二进制文件。<br>Makefile文件用途，主要是告知make编译工具，在编译源代码文件时从哪个源码文件开始至哪个源码结束编译&amp;记录依赖的信息。</li>\n<li>安装 make -j 4 install<br>主要是将第二步make编译产生的二进制文件，拷贝或者安装至Linux操作系统指定的安装目录：<code>--prefix=/usr/local/nginx/</code>。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">补充</span></span><br><span class=\"line\">mkdir -p /usr/local/&#123;nginx,zlib,pcre,openssl-fips&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Step1.安装前确认linux下这些库已经安装:</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum -y install perl gcc gcc-c++ net-tools</span></span><br><span class=\"line\">Package 4:perl-5.16.3-294.el7_6.x86_64 already installed and latest version</span><br><span class=\"line\">Package gcc-4.8.5-36.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package gcc-c++-4.8.5-36.el7.x86_64 already installed and latest version</span><br><span class=\"line\">Package net-tools-2.0-0.24.20131004git.el7.x86_64 already installed and latest version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Step2.安装openssl-fips 执行命令如下（可选-非必须）</span></span><br><span class=\"line\">OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用;</span><br><span class=\"line\">tar -zxf openssl-fips-2.0.16.tar.gz</span><br><span class=\"line\">./config --prefix=/usr/local/openssl-fips</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Step3.安装zlib-1.2.11.tar.gz</span></span><br><span class=\"line\">Zlib是提供资料压缩之用的函式库，当Tengine想启用GZIP压缩的时候就需要使用到Zlib（http://www.zlib.net/）</span><br><span class=\"line\">./configure --prefix=/usr/local/zlib/</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Step4.PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx rewrite依赖于PCRE库，所以在安装Tengine前一定要先安装PCRE，最新版本的PCRE可在官网（http://www.pcre.org/）获取。</span></span><br><span class=\"line\">./configure --prefix=/usr/local/pcre/</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Step5.详细nginx安装</span></span><br><span class=\"line\">cd /opt/package/</span><br><span class=\"line\">groupadd nginx;</span><br><span class=\"line\">useradd -M -g nginx -s /sbin/nologin nginx </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!with-pcre指定依赖包位置(是设置源码目录，而不是编译安装后的目录)!,注意下面得不同openssl</span></span><br><span class=\"line\">./configure --with-pcre=../pcre-8.42 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-fips-2.0.16 --prefix=/usr/local/nginx/ --user=root</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">或者采用</span></span><br><span class=\"line\">./configure \\u</span><br><span class=\"line\">\"--prefix=/usr/local/nginx\" \\</span><br><span class=\"line\">\"--with-http_stub_status_module\" \\</span><br><span class=\"line\">\"--with-pcre=../pcre-8.43\" \\</span><br><span class=\"line\">\"--with-zlib=../zlib-1.2.11\" \\</span><br><span class=\"line\">\"--with-openssl=../openssl-fips-2.0.16\" \\</span><br><span class=\"line\">\"--user=nginx\" \\</span><br><span class=\"line\">\"--group=nginx\" \\</span><br><span class=\"line\">\"--with-http_ssl_module\" \\</span><br><span class=\"line\">\"--with-cc-opt='-O2'\" </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#Configuration summary</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> + using PCRE library: ../pcre-8.42</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> + using OpenSSL library: ../openssl-fips-2.0.16</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> + using zlib library: ../zlib-1.2.11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx path prefix: <span class=\"string\">\"/etc/nginx\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx binary file: <span class=\"string\">\"/etc/nginx/sbin/nginx\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx modules path: <span class=\"string\">\"/etc/nginx/modules\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx configuration prefix: <span class=\"string\">\"/etc/nginx/conf\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx configuration file: <span class=\"string\">\"/etc/nginx/conf/nginx.conf\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx pid file: <span class=\"string\">\"/etc/nginx/logs/nginx.pid\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx error <span class=\"built_in\">log</span> file: <span class=\"string\">\"/etc/nginx/logs/error.log\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx http access <span class=\"built_in\">log</span> file: <span class=\"string\">\"/etc/nginx/logs/access.log\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx http client request body temporary files: <span class=\"string\">\"client_body_temp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx http proxy temporary files: <span class=\"string\">\"proxy_temp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx http fastcgi temporary files: <span class=\"string\">\"fastcgi_temp\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx http uwsgi temporary files: <span class=\"string\">\"uwsgi_temp\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190909102748.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p><strong>2.3) nginx验证与启动</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/web/sbin</span><br><span class=\"line\"><span class=\"comment\">#如下表示成功</span></span><br><span class=\"line\">$./nginx -t</span><br><span class=\"line\">nginx: the configuration file /opt/nginx/web/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /opt/nginx/web/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动与暂停</span></span><br><span class=\"line\">./nginx 启动</span><br><span class=\"line\">./nginx -s stop 停止</span><br><span class=\"line\">./nginx -s reload 修改配置后重新加载配置</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#监听是否正常监听</span></span><br><span class=\"line\">[root@izwz9biz2m4sd3bb3k38pgz sbin]<span class=\"comment\"># netstat -tlnp</span></span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address Foreign tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 11002/nginx: master</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-1-yum安装nginx\"><a href=\"#2-1-yum安装nginx\" class=\"headerlink\" title=\"2.1 yum安装nginx\"></a>2.1 yum安装nginx</h5><p>首先.安装Nginx采用yum或者apt,配置文件目录/etc/nginx/;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum -y install perl gcc gcc-c++ net-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#CentOS7</span></span><br><span class=\"line\">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt;END</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\">END</span><br><span class=\"line\"><span class=\"comment\">#默认情况下，用于稳定nginx的包库。如果你想使用nginx的主线包</span></span><br><span class=\"line\">$ sudo yum-config-manager --<span class=\"built_in\">enable</span> nginx-mainline</span><br><span class=\"line\">$ yum install -y nginx</span><br><span class=\"line\">$ apt-get install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">GPG-Key:573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62</span><br></pre></td></tr></table></figure></p>\n<p>参考连接:<a href=\"http://nginx.org/en/linux_packages.html#RHEL-CentOS\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p>\n<p>yum的方式安装Nginx的目录说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/nginx  </span><br><span class=\"line\">/etc/nginx/nginx.conf  <span class=\"comment\"># 主配置文件</span></span><br><span class=\"line\">/etc/nginx/fastcgi_params  <span class=\"comment\">#cgi相关配置以及、fastcgi配置</span></span><br><span class=\"line\">/etc/nginx/uwsgi_params</span><br><span class=\"line\">/etc/nginx/scgi_params</span><br><span class=\"line\">/etc/nginx/koi-utf   <span class=\"comment\">#编码转换映射转化文件</span></span><br><span class=\"line\">/etc/nginx/mime.types  <span class=\"comment\">#设置HTTP协议的Content-Type与扩展名对应的关系</span></span><br><span class=\"line\">/var/cache/nginx <span class=\"comment\">#缓存</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/nginx <span class=\"comment\">#日志</span></span><br><span class=\"line\">/etc/nginx/modules <span class=\"comment\">#模块目录</span></span><br><span class=\"line\">/etc/logrotate.d/nginx <span class=\"comment\"># 配置文件，nginx日志轮转，用于logratate服务的日志切割;</span></span><br><span class=\"line\">/usr/lib/systemd/system/nginx.service <span class=\"comment\">#用于配置出系统守护进程管理器管理方式</span></span><br><span class=\"line\">/usr/share/doc/nginx-xxx/  <span class=\"comment\">#nginx帮助手册</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"2-2-mac安装Nginx\"><a href=\"#2-2-mac安装Nginx\" class=\"headerlink\" title=\"2.2 mac安装Nginx\"></a>2.2 mac安装Nginx</h5><p>(1)安装nginx</p>\n<ul>\n<li>1-进到homebrew官网，然后复制命令，预安装需要的东西</li>\n<li>2-brew install nginx    安装nginx</li>\n<li>3-nginx -v  显示版本号</li>\n</ul>\n<p>(2)进入nginx cd /usr/local/etc/nginx 配置启动即可</p>\n<p><br></p>\n<h4 id=\"3-Nginx管理与工作模式\"><a href=\"#3-Nginx管理与工作模式\" class=\"headerlink\" title=\"3.Nginx管理与工作模式\"></a>3.Nginx管理与工作模式</h4><p><strong>Nginx常用命令</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop <span class=\"comment\">#快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\">#平稳关闭Nginx，保存相关信息，有安排的结束web服务。</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\">#每次修改完.conf文件就需要重启nginx。</span></span><br><span class=\"line\">nginx -s reopen <span class=\"comment\">#重新打开日志文件。</span></span><br><span class=\"line\">nginx -c filename <span class=\"comment\">#为 Nginx 指定一个配置文件，来代替缺省的。</span></span><br><span class=\"line\">nginx -t [filename] <span class=\"comment\">#不运行而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</span></span><br><span class=\"line\">nginx -tc /etc/nginx.conf <span class=\"comment\">#检查配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># 如果出现下面ok和successfull就代表正确了，其他的都不对</span></span><br><span class=\"line\"><span class=\"comment\"># nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok</span></span><br><span class=\"line\"><span class=\"comment\"># nginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful</span></span><br><span class=\"line\"></span><br><span class=\"line\">nginx -v <span class=\"comment\">#显示 nginx 的版本。</span></span><br><span class=\"line\">nginx -V <span class=\"comment\">#显示 nginx 的版本编译器版本和配置参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#重载nginx</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP`cat /usr/<span class=\"built_in\">local</span>/nginx/nginx.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定配置文件重启nginx服务</span></span><br><span class=\"line\">nginx -s reload -c /etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#软启动一下 Nginx</span></span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> -USR1 `cat master.nginx.pid`</span><br><span class=\"line\">$ sleep 1</span><br><span class=\"line\">$ gzip access.log.0    <span class=\"comment\"># do something with access.log.0</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Nginx的Master-Worker模式</strong><br>Nginx涉及Master进程和Worker进程,在Nginx启动后涉及了Socket服务进行监听;</p>\n<ul>\n<li>Master进程的作用：读取并验证配置文件nginx.conf；管理worker进程；</li>\n<li>Worker进程的作用：每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程;</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916164742.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h4 id=\"4-Nginx转发简单实例\"><a href=\"#4-Nginx转发简单实例\" class=\"headerlink\" title=\"4.Nginx转发简单实例\"></a>4.Nginx转发简单实例</h4><p>4.1 项目需求 httpd 服务 8080 端口(外网不能直接访问)，通过nginx进行转发到 80进行访问;<br>4.2 对于以上需求进行设置修改nginx得conf/nginx.conf我将列出修改得得值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keepalive_timeout 65;</span><br><span class=\"line\">#设定请求缓冲，start</span><br><span class=\"line\">client_header_buffer_size 1k;</span><br><span class=\"line\">large_client_header_buffers 4 4k;</span><br><span class=\"line\">#设定请求缓冲， end</span><br><span class=\"line\"></span><br><span class=\"line\">#设定提供服务的服务器，start</span><br><span class=\"line\">upstream localserver &#123;</span><br><span class=\"line\">  #weigth 表示权重，权值越大，分配几率越大</span><br><span class=\"line\">  #max_fails 当有max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查</span><br><span class=\"line\">  #fail_timeout 在以后的fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器</span><br><span class=\"line\">  server 127.0.0.1:8080 weight&#x3D;5 max_fails&#x3D;5 fail_timeout&#x3D;600s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name weiyigeek.top;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        #设置指定服务器得网站访问记录</span><br><span class=\"line\">        #access_log logs&#x2F;host.access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">        #location &#x2F; &#123;</span><br><span class=\"line\">         # root html&#x2F;index.html;</span><br><span class=\"line\">           # index index.html index.htm;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">        #规则1,代理内网网站</span><br><span class=\"line\">        location &#x2F; &#123;</span><br><span class=\"line\">            proxy_pass http:&#x2F;&#x2F;localserver;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #错误页设置</span><br><span class=\"line\">        error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class=\"line\">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #代理php应用程序服务器</span><br><span class=\"line\">        #proxy the PHP scripts to Apache listening on 127.0.0.1:8080</span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#重启即可</span><br><span class=\"line\">$ sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"5-Nginx配置实例\"><a href=\"#5-Nginx配置实例\" class=\"headerlink\" title=\"5.Nginx配置实例\"></a>5.Nginx配置实例</h4><h5 id=\"5-1-反向代理\"><a href=\"#5-1-反向代理\" class=\"headerlink\" title=\"5.1 反向代理\"></a>5.1 反向代理</h5><p>描述:反向代理是指以代理服务器来接受连接请求，然后将<code>请求转发</code>给内部网络上的服务器，并将从服务器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器,而且整个过程对于客户端而言是透明的。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916162055.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>简单来说就是<code>真实的服务器不能直接被外部网络访问</code>，所以需要一台代理服务器，而代理服务器能被外部网络访问的同时又跟真实服务器在同一个网络环境，或同一台服务器不同端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端 -(外围)- NGINX(代码服务器) --- 内网服务端</span><br></pre></td></tr></table></figure>\n<p>配置实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">  listen   80;   <span class=\"comment\">#nginx 服务端 请求端口</span></span><br><span class=\"line\">  server_name  weiyigeek.top;          </span><br><span class=\"line\">  client_max_body_size 1024M;</span><br><span class=\"line\">  location / &#123;   <span class=\"comment\">#匹配指向请求URL后的路径，可以多个</span></span><br><span class=\"line\">    proxy_pass http://weiyigeek.top:8080; </span><br><span class=\"line\">     <span class=\"comment\">#URL后缀不得以在端口后加个工程目录</span></span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"5-2-正向代理\"><a href=\"#5-2-正向代理\" class=\"headerlink\" title=\"5.2 正向代理\"></a>5.2 正向代理</h5><p>描述:正向代理意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后<code>由代理向原始服务器转交请求并将获得的内容返回给客户端</code>。</p>\n<p>简单的说类似于采用VPN来访问google:<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190916162004.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolver 114.114.114.114 8.8.8.8;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        resolver_timeout 5s;</span><br><span class=\"line\">        listen 81;</span><br><span class=\"line\">        access_log  e:wwwrootproxy.access.log;</span><br><span class=\"line\">        error_log   e:wwwrootproxy.error.log;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>注：负载均衡通常使用正向代理加upstream的方式</p>\n<p><br></p>\n<h5 id=\"5-3-负载均衡\"><a href=\"#5-3-负载均衡\" class=\"headerlink\" title=\"5.3 负载均衡\"></a>5.3 负载均衡</h5><p>描述：负载均衡也是Nginx常用的一个功能。简单而言就是当有2台或以上服务器时，根据规则随机的将请求分发到指定的服务器上处理，负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</p>\n<p>而Nginx目前支持自带3种负载均衡策略还有2种常用的第三方策略。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190906115445.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><strong>负载均衡调用中状态:</strong></p>\n<ul>\n<li>down : 当前server暂不参与负载均衡</li>\n<li>backup : 预留的备份服务器</li>\n<li>max_fails : 请求失败次数限制</li>\n<li>fail_timeout : 经过max_fails后服务暂停时间</li>\n<li>max_conns : 限制最大的连接数</li>\n</ul>\n<p>简单示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstrem weiyigeek &#123;</span><br><span class=\"line\">  server weiyigeek.top:8080 down;</span><br><span class=\"line\">  server weiyigeek.top:8081 backup;</span><br><span class=\"line\">  server weiyigeek.top:8082 max_fails=1 fail_timeout=10s max_conns=1024;</span><br><span class=\"line\">  server unix:/tmp/backend3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>调度算法:</strong></p>\n<ul>\n<li>轮询:<code>默认算法按时间顺序逐一分配到不同的后端服务器;</code></li>\n<li>加权轮询:<code>Weight值越大，分配到访问几率越高;</code></li>\n<li>ip_hash:<code>为每一个请求访问的IP的hash结果分配，可以将来自一个IP的固定访问一个后端服务器;</code></li>\n<li>url_hash:需要安装模块<code>安装访问的URL的hash结果来分配，这样每个URL定向到同一个后端服务器</code></li>\n<li>least_conn:<code>按照某台机器最少连接数的进行分配访问;</code></li>\n<li>hash关键数值: hash 自定义 KEY</li>\n</ul>\n<p><strong>方式1: 轮询</strong><br>RR（默认轮询）每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉能自动剔除。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream <span class=\"built_in\">test</span> &#123;</span><br><span class=\"line\">  server weiyigeek.top:8080;</span><br><span class=\"line\">  server weiyigeek.top:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen  81;  </span><br><span class=\"line\">  server_name  weiyigeek.top;                                 </span><br><span class=\"line\">  client_max_body_size 1024M;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    proxy_pass http://<span class=\"built_in\">test</span>;</span><br><span class=\"line\">    proxy_set_header Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>方式2：权重</strong><br>权重指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 例如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream <span class=\"built_in\">test</span> &#123;</span><br><span class=\"line\">  server weiyigeek.top:8081 weight=1;</span><br><span class=\"line\">  server weiyigeek.top:8080 weight=9;  <span class=\"comment\">#那么10次一般只会有1次会访问到8081，而有9次会访问到8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>方式3: ip_hash</strong><br>ip_hash 会话粘连, 上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 会话粘粘可以理解为用户持续访问一个后端机器</span></span><br><span class=\"line\">upstream <span class=\"built_in\">test</span> &#123;</span><br><span class=\"line\">  ip_hash;</span><br><span class=\"line\">  server weiyigeek.top:8080;</span><br><span class=\"line\">  server weiyigeek.top:8081;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>方式4：fair</strong><br>fair（第三方）按后端服务器的响应时间来分配请求，响应时间短的优先分配。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123; </span><br><span class=\"line\">  fair; </span><br><span class=\"line\">  server weiyigeek.top:8080;</span><br><span class=\"line\">  server weiyigeek.top:8081;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>方式5：url_hash</strong><br>url_hash（第三方）:按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。<br>在upstream中加入hash语句，<code>server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123; </span><br><span class=\"line\">  <span class=\"built_in\">hash</span> <span class=\"variable\">$request_uri</span>; </span><br><span class=\"line\">  hash_method crc32; </span><br><span class=\"line\">  server weiyigeek.top:8080;</span><br><span class=\"line\">  server weiyigeek.top:8081;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>方式6：url_hash</strong><br>描述: 将请求分配到连接数最少的服务上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream  dalaoyang-server &#123;</span><br><span class=\"line\">  least_conn;</span><br><span class=\"line\">  server    weiyigeek.top:10001;</span><br><span class=\"line\">  server    weiyigeek.top:10002;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上6种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式,<code>不过fair和url_hash需要安装第三方模块才能使用</code>.</p>\n<p><br></p>\n<h5 id=\"5-4-HTTP服务器\"><a href=\"#5-4-HTTP服务器\" class=\"headerlink\" title=\"5.4 HTTP服务器\"></a>5.4 HTTP服务器</h5><p>Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，首先看看Nginx做静态资源服务器;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80; </span><br><span class=\"line\">  server_name  weiyigeek.top;                                       </span><br><span class=\"line\">  client_max_body_size 1024M;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    root   e:wwwroot;</span><br><span class=\"line\">    index  index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>访问<code>http://weiyigeek.top</code>就会默认访问到E盘wwwroot目录下面的index.html，如果一个网站只是静态页面的话，那么就可以通过这种方式来实现部署。</p>\n<p><br></p>\n<h5 id=\"5-5-动静资源分离\"><a href=\"#5-5-动静资源分离\" class=\"headerlink\" title=\"5.5 动静资源分离\"></a>5.5 动静资源分离</h5><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以<code>根据静态资源的特点将其做缓存操作</code>，这就是网站静态化处理的核心思路;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream <span class=\"built_in\">test</span>&#123;  </span><br><span class=\"line\">  server weiyigeek.top:8080;  </span><br><span class=\"line\">  server weiyigeek.top:8081;  </span><br><span class=\"line\">&#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;  </span><br><span class=\"line\">  listen       80;  </span><br><span class=\"line\">  server_name  weiyigeek.top;  </span><br><span class=\"line\">  location / &#123;  </span><br><span class=\"line\">      root   e:wwwroot;  </span><br><span class=\"line\">      index  index.html;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 所有静态请求都由nginx处理，存放目录为html  </span></span><br><span class=\"line\">  location ~ .(gif|jpg|jpeg|png|bmp|swf|css|js)$ &#123;  </span><br><span class=\"line\">      root    e:wwwroot;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 所有动态请求都转发给tomcat处理  </span></span><br><span class=\"line\">  location ~ .(jsp|<span class=\"keyword\">do</span>)$ &#123;  </span><br><span class=\"line\">      proxy_pass  http://<span class=\"built_in\">test</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  error_page   500 502 503 504  /50x.html;  </span><br><span class=\"line\">  location = /50x.html &#123;  </span><br><span class=\"line\">      root   e:wwwroot;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>HTML以及图片和css以及js放到wwwroot目录下,而tomcat只负责处理jsp和请求，</p>\n<p>例如当我们后缀为gif的时候，Nginx默认会从wwwroot获取到当前请求的动态图文件返回，当然这里的静态文件跟Nginx是同一台服务器，我们也可以在另外一台服务器，然后通过反向代理和负载均衡配置过去就好了，只要搞清楚了最基本的流程，很多配置就很简单了</p>\n<p><br></p>\n<h5 id=\"5-6-请求转发案例\"><a href=\"#5-6-请求转发案例\" class=\"headerlink\" title=\"5.6 请求转发案例\"></a>5.6 请求转发案例</h5><p><strong>Nginx转发例子1</strong><br>1.案例需求<br>短信服务器列表三台，提供服务的地址如下:<a href=\"http://192.168.88.21/22/23:8091/smsserver/services/sendSms?wsdl\" target=\"_blank\" rel=\"noopener\">http://192.168.88.21/22/23:8091/smsserver/services/sendSms?wsdl</a><br>彩信服务器列表三台，提供服务的地址如下:<a href=\"http://192.168.88.21/22/23:8092/msserver/services/sendMms?wsdl\" target=\"_blank\" rel=\"noopener\">http://192.168.88.21/22/23:8092/msserver/services/sendMms?wsdl</a><br>假如Nginx安装在另一台单独机器上(公网IP为public_ip)，对外提供服务地址如下：<br><a href=\"http://public_ip:8090/[smsserver\" target=\"_blank\" rel=\"noopener\">http://public_ip:8090/[smsserver</a> | mmsserver]/services/sendSms?wsdl 短信发送服务 / 彩信发送服务</p>\n<p>2.对于以上需求配置 /opt/nginx/web/conf/nginx.conf 如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#user nobody; </span></span><br><span class=\"line\">worker_processes 1; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log; </span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log notice; </span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log info; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid logs/nginx.pid; </span></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123; </span><br><span class=\"line\">worker_connections 1024; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">http &#123; </span><br><span class=\"line\">include mime.types; </span><br><span class=\"line\">default_type application/octet-stream; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' </span></span><br><span class=\"line\"><span class=\"comment\"># '$status $body_bytes_sent \"$http_referer\" ' </span></span><br><span class=\"line\"><span class=\"comment\"># '\"$http_user_agent\" \"$http_x_forwarded_for\"'; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#access_log logs/access.log main; </span></span><br><span class=\"line\"></span><br><span class=\"line\">sendfile on; </span><br><span class=\"line\"><span class=\"comment\">#tcp_nopush on; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#keepalive_timeout 0; </span></span><br><span class=\"line\">keepalive_timeout 65; </span><br><span class=\"line\"><span class=\"comment\">#设定请求缓冲， start </span></span><br><span class=\"line\">client_header_buffer_size 1k; </span><br><span class=\"line\">large_client_header_buffers 4 4k; </span><br><span class=\"line\"><span class=\"comment\">#设定请求缓冲， end </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设定提供服务的服务器，start </span></span><br><span class=\"line\"><span class=\"comment\">#短信发送服务器 </span></span><br><span class=\"line\">upstream smsserver&#123; </span><br><span class=\"line\"><span class=\"comment\">#weigth 表示权重，权值越大，分配几率越大 </span></span><br><span class=\"line\"><span class=\"comment\">#max_fails 当有max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查 </span></span><br><span class=\"line\"><span class=\"comment\">#fail_timeout 在以后的fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器 </span></span><br><span class=\"line\">server 192.168.88.21:8091 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">server 192.168.88.22:8091 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">server 192.168.88.23:8091 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#彩信发送服务器 </span></span><br><span class=\"line\">upstream mmsserver&#123; </span><br><span class=\"line\"><span class=\"comment\">#weigth 表示权重，权值越大，分配几率越大 </span></span><br><span class=\"line\"><span class=\"comment\">#max_fails 当有max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查 </span></span><br><span class=\"line\"><span class=\"comment\">#fail_timeout 在以后的fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器 </span></span><br><span class=\"line\">server 192.168.88.21:8092 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">server 192.168.88.22:8092 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">server 192.168.88.23:8092 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定提供服务的服务器，end </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gzip on; </span></span><br><span class=\"line\"></span><br><span class=\"line\">server &#123; </span><br><span class=\"line\">listen 8090; </span><br><span class=\"line\">server_name weiyigeek.top; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， start </span></span><br><span class=\"line\"><span class=\"comment\">#规则采用最长匹配，/smsserver/*优先匹配/smsserver，/mmsserver/*优先匹配/mmsserver，/aaaaaaaa/*因为没有任何匹配，最后匹配到/ </span></span><br><span class=\"line\"><span class=\"comment\">#规则一 </span></span><br><span class=\"line\">location / &#123; </span><br><span class=\"line\">proxy_pass http://weiyigeek.top:80; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#规则二 </span></span><br><span class=\"line\">location /smsserver &#123; </span><br><span class=\"line\">proxy_pass http://smsserver; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#规则三 </span></span><br><span class=\"line\">location /mmsserver &#123; </span><br><span class=\"line\">proxy_pass http://mmsserver; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， end </span></span><br><span class=\"line\">error_page 500 502 503 504 /50x.html; </span><br><span class=\"line\">location = /50x.html &#123; </span><br><span class=\"line\">root html; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">server &#123; </span><br><span class=\"line\">listen 80; </span><br><span class=\"line\">server_name weiyigeek.top; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， start </span></span><br><span class=\"line\">location / &#123; </span><br><span class=\"line\"><span class=\"comment\">#定义服务器的默认网站根目录位置 </span></span><br><span class=\"line\">root /home/work/statichtml/index.html; </span><br><span class=\"line\"><span class=\"comment\">#定义首页索引文件的名称 </span></span><br><span class=\"line\"><span class=\"comment\">#index index.php index.html index.htm; </span></span><br><span class=\"line\"><span class=\"comment\">#请求转向orderServer定义的服务器列表 </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_pass http://server; </span></span><br><span class=\"line\"><span class=\"comment\">#以下是一些反向代理的配置可删除. </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_redirect off; </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_set_header Host $host; </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_set_header X-Real-IP $remote_addr; </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span></span><br><span class=\"line\"><span class=\"comment\">#允许客户端请求的最大单文件字节数 </span></span><br><span class=\"line\"><span class=\"comment\"># client_max_body_size 10m; </span></span><br><span class=\"line\"><span class=\"comment\">#缓冲区代理缓冲用户端请求的最大字节数， </span></span><br><span class=\"line\"><span class=\"comment\"># client_body_buffer_size 128k; </span></span><br><span class=\"line\"><span class=\"comment\">#nginx跟后端服务器连接超时时间(代理连接超时) </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_connect_timeout 90; </span></span><br><span class=\"line\"><span class=\"comment\">#后端服务器数据回传时间(代理发送超时) </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_send_timeout 90; </span></span><br><span class=\"line\"><span class=\"comment\">#连接成功后，后端服务器响应时间(代理接收超时) </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_read_timeout 90; </span></span><br><span class=\"line\"><span class=\"comment\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小 </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_buffer_size 4k; </span></span><br><span class=\"line\"><span class=\"comment\">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_buffers 4 32k; </span></span><br><span class=\"line\"><span class=\"comment\">#高负荷下缓冲大小（proxy_buffers*2） </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_busy_buffers_size 64k; </span></span><br><span class=\"line\"><span class=\"comment\">#设定缓存文件夹大小，大于这个值，将从upstream服务器传 </span></span><br><span class=\"line\"><span class=\"comment\"># proxy_temp_file_write_size 64k; </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， end </span></span><br><span class=\"line\">error_page 500 502 503 504 /50x.html; </span><br><span class=\"line\">location = /50x.html &#123; root html; &#125; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Nginx转发例子2-改进例子</strong></p>\n<p>上面例子有个问题是直接将我整个web根目录smsserver和mmsserver暴露到公网了，其实我的目的只是想暴露两个接口地址，优化如下：<br>1.案例需求<br>API接口服务器列表两台，提供服务的地址如下:<br>接口一：<a href=\"http://192.168.88.21/22:8082/myweb/interface/getData\" target=\"_blank\" rel=\"noopener\">http://192.168.88.21/22:8082/myweb/interface/getData</a><br>接口二：<a href=\"http://192.168.88.21/22:8082/myweb/interface/sendData\" target=\"_blank\" rel=\"noopener\">http://192.168.88.21/22:8082/myweb/interface/sendData</a><br>Nginx安装在另外一台单独机器上(公网IP为public_ip)，对外提供服务地址如下：<br><a href=\"http://public_ip:8081/myweb/interface/getData\" target=\"_blank\" rel=\"noopener\">http://public_ip:8081/myweb/interface/getData</a> 接口一<br><a href=\"http://public_ip:8081/myweb/interface/sendData\" target=\"_blank\" rel=\"noopener\">http://public_ip:8081/myweb/interface/sendData</a> 接口二</p>\n<p>2.对于以上需求，配置/opt/nginx/web/conf/nginx.conf 如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#user nobody; </span></span><br><span class=\"line\">worker_processes 1; </span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log; </span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log notice; </span></span><br><span class=\"line\"><span class=\"comment\">#error_log logs/error.log info; </span></span><br><span class=\"line\"><span class=\"comment\">#pid logs/nginx.pid; </span></span><br><span class=\"line\">events &#123; </span><br><span class=\"line\">worker_connections 1024; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">http &#123; </span><br><span class=\"line\">include mime.types; </span><br><span class=\"line\">default_type application/octet-stream; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' </span></span><br><span class=\"line\"><span class=\"comment\"># '$status $body_bytes_sent \"$http_referer\" ' </span></span><br><span class=\"line\"><span class=\"comment\"># '\"$http_user_agent\" \"$http_x_forwarded_for\"'; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#access_log logs/access.log main; </span></span><br><span class=\"line\"></span><br><span class=\"line\">sendfile on; </span><br><span class=\"line\"><span class=\"comment\">#tcp_nopush on; </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#keepalive_timeout 0; </span></span><br><span class=\"line\">keepalive_timeout 65; </span><br><span class=\"line\"><span class=\"comment\">#设定请求缓冲， start </span></span><br><span class=\"line\">client_header_buffer_size 1k; </span><br><span class=\"line\">large_client_header_buffers 4 4k; </span><br><span class=\"line\"><span class=\"comment\">#设定请求缓冲， end </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设定提供服务的服务器，start </span></span><br><span class=\"line\"><span class=\"comment\">#我的接口服务器，两台 </span></span><br><span class=\"line\">upstream myweb&#123; </span><br><span class=\"line\"><span class=\"comment\">#weigth 表示权重，权值越大，分配几率越大 </span></span><br><span class=\"line\"><span class=\"comment\">#max_fails 当有max_fails个请求失败，就表示后端的服务器不可用，默认为1，将其设置为0可以关闭检查 </span></span><br><span class=\"line\"><span class=\"comment\">#fail_timeout 在以后的fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器 </span></span><br><span class=\"line\">server 192.168.88.23:8082 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">server 192.168.88.24:8082 weight=5 max_fails=5 fail_timeout=600s; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定提供服务的服务器，end </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gzip on; </span></span><br><span class=\"line\"></span><br><span class=\"line\">server &#123; </span><br><span class=\"line\">listen 80; </span><br><span class=\"line\">server_name weiyigeek.top; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， start </span></span><br><span class=\"line\"><span class=\"comment\">#规则采用最长匹配，即长度最长优先匹配，最后不匹配的走/进行匹配 </span></span><br><span class=\"line\"><span class=\"comment\">#规则一 </span></span><br><span class=\"line\">location / &#123; </span><br><span class=\"line\">root html; </span><br><span class=\"line\">index index.html index.htm; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， end </span></span><br><span class=\"line\">error_page 500 502 503 504 /50x.html; </span><br><span class=\"line\">location = /50x.html &#123; </span><br><span class=\"line\">root html; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">server &#123; </span><br><span class=\"line\">listen 8081; </span><br><span class=\"line\">server_name weiyigeek.top; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， start </span></span><br><span class=\"line\"><span class=\"comment\">#规则采用最长匹配，即长度最长优先匹配，最后不匹配的走/进行匹配 </span></span><br><span class=\"line\"><span class=\"comment\">#规则一 </span></span><br><span class=\"line\">location / &#123; </span><br><span class=\"line\">root html; </span><br><span class=\"line\">index index.html index.htm; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#规则二，查询接口一 </span></span><br><span class=\"line\">location /myweb/interface/getData &#123; </span><br><span class=\"line\">proxy_pass http://myweb; </span><br><span class=\"line\"><span class=\"comment\">#转发请求的原IP地址，程序中通过request.getHeader(\"Proxy-Client-IP\")获得ip </span></span><br><span class=\"line\">proxy_set_header Host <span class=\"variable\">$host</span>; </span><br><span class=\"line\"><span class=\"comment\">#如果是有涉及redirect的服务，一定要加上端口8081，否则默认tomcat在redirect时候默认找80端口 </span></span><br><span class=\"line\"><span class=\"comment\">#proxy_set_header Host $host:8081; </span></span><br><span class=\"line\">proxy_set_header Proxy-Client-IP <span class=\"variable\">$remote_addr</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#规则三，查询接口二 </span></span><br><span class=\"line\">location /myweb/interface/sendData &#123; </span><br><span class=\"line\">proxy_pass http://myweb; </span><br><span class=\"line\"><span class=\"comment\">#转发请求的原IP地址，程序中通过request.getHeader(\"Proxy-Client-IP\")获得ip </span></span><br><span class=\"line\">proxy_set_header Host <span class=\"variable\">$host</span>; </span><br><span class=\"line\"><span class=\"comment\">#如果是有涉及redirect的服务，一定要加上端口8081，否则默认tomcat在redirect时候默认找80端口 </span></span><br><span class=\"line\"><span class=\"comment\">#proxy_set_header Host $host:8081; </span></span><br><span class=\"line\">proxy_set_header Proxy-Client-IP <span class=\"variable\">$remote_addr</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">#设定请求转发规则， end </span></span><br><span class=\"line\">error_page 500 502 503 504 /50x.html; </span><br><span class=\"line\">location = /50x.html &#123; </span><br><span class=\"line\">root html; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Nginx转发例子3-文件映射</strong></p>\n<p>修改/opt/nginx/nginx.conf/中第一行的运行用户改为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user root;</span><br><span class=\"line\">location /uploadfile &#123;</span><br><span class=\"line\">    root /opt/staticdata/;</span><br><span class=\"line\">    access_log /opt/nginx/logs/upload_access.log;</span><br><span class=\"line\">    proxy_store_access user:rw group:rw all:rw;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>访问<a href=\"http://ip:port/uploadfile/aa/bb/cc.jpg\">http://ip:port/uploadfile/aa/bb/cc.jpg</a> 相当于访问 /opt/staticdata/uploadfile/aa/bb/cc.jpg</p>\n<p><br></p>\n<p><strong>Nginx转发例子4-反向代理</strong><br><br><br>Step1.通过apt安装得Nginx修改配置文件：<br>cd /etc/nginx/conf.d &amp;&amp; vim <a href=\"http://www.google.com.hk.conf\" target=\"_blank\" rel=\"noopener\">www.google.com.hk.conf</a></p>\n<p><br></p>\n<p>Step2.然后写入这样的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_cache_path /data/nginx/cache/one levels=1:2 keys_zone=one:10m max_size=10g;</span><br><span class=\"line\">proxy_cache_key <span class=\"string\">\"<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>\"</span>;</span><br><span class=\"line\"><span class=\"comment\">#google 镜像站</span></span><br><span class=\"line\">upstream google &#123;</span><br><span class=\"line\"> server 74.125.224.80:80 max_fails=3;</span><br><span class=\"line\"> server 74.125.224.81:80 max_fails=3;</span><br><span class=\"line\"> server 74.125.224.82:80 max_fails=3;</span><br><span class=\"line\"> server 74.125.224.83:80 max_fails=3;</span><br><span class=\"line\"> server 74.125.224.84:80 max_fails=3;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.example.com;</span><br><span class=\"line\">    access_log /var/<span class=\"built_in\">log</span>/nginx/a.access.log;</span><br><span class=\"line\">    error_log /var/<span class=\"built_in\">log</span>/nginx/a.error.log;</span><br><span class=\"line\">    root html;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    rewrite ^(.*) http://www.example.com<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">                    proxy_cache one;</span><br><span class=\"line\">                    proxy_cache_valid 200 302 1h;</span><br><span class=\"line\">                    proxy_cache_valid 404 1m;</span><br><span class=\"line\">                    proxy_redirect http://www.google.com.hk/ ;</span><br><span class=\"line\">                    proxy_cookie_domain google.com.hk www.example.com;</span><br><span class=\"line\">                    proxy_pass http://google;</span><br><span class=\"line\">                    proxy_set_header Host <span class=\"string\">\"www.google.com.hk\"</span>;</span><br><span class=\"line\">                    proxy_set_header Accept-Encoding <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    proxy_set_header User-Agent <span class=\"variable\">$http_user_agent</span>;</span><br><span class=\"line\">                    proxy_set_header Accept-Language <span class=\"string\">\"zh-CN\"</span>;</span><br><span class=\"line\">                    proxy_set_header Cookie <span class=\"string\">\"NID=76=Len8rjrYIITd5At0fRh9v2eE4R4gPhQtYJ23gtZO70VZgTbmtr5HdM4AJw4j7UyG7cG9TI6w6ZpRp1zFhWjJASVc_yCDIEmvbkCrCdt8l-w0r7xGVgBc-IBaWGq5WRCT; expires=Sat, 20-Aug-2016 13:21:29 GMT;\"</span>;             </span><br><span class=\"line\">                    sub_filter www.google.com.hk www.example.com;</span><br><span class=\"line\">                    sub_filter_once off;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##解释##：</span></span><br><span class=\"line\">&lt;!-- 1.定义了个upstream google，放了5个谷歌的ip，而不是直接反代 www.google.com.hk ，是为了防止谷歌的验证码(谷歌为了防止恶意访问，在访问数量增加后会要求输入验证码)， proxy_pass http://google; 反向代理到upstream google，会随机把请求分配到那几个ip。那几个ip可以在自己的vps或服务器上使用nslookup www.google.com获取。。</span><br><span class=\"line\">2.设置了反向代理缓存，某些资源不用重复去请求谷歌获取，加快搜索速度。</span><br><span class=\"line\">3.proxy_redirect https://www.google.com/ /; 这行的作用是把谷歌服务器返回的302响应头里的域名替换成我们的，不然浏览器还是会直接请求www.google.com , 那样反代就失效了。</span><br><span class=\"line\">4.proxy_cookie_domain google.com www.example.com; 把cookie的作用域替换成我们的域名。</span><br><span class=\"line\">5.proxy_set_header Accept-Encoding “”; 防止谷歌返回压缩的内容，因为压缩的内容我们无法作域名替换。</span><br><span class=\"line\">6.proxy_set_header Accept-Language “zh-CN”;设置语言为中文。</span><br><span class=\"line\">7.proxy_set_header Cookie “”; 这行很关键，传固定的cookie给谷歌，是为了禁止即时搜索，因为开启即时搜索无法替换内容。还有设置为新窗口打开网站，这个符合我们打开链接的习惯。</span><br><span class=\"line\">8.sub_filter www.google.com www.example.com; 是把谷歌的域名替换成自己的，注意需要安装nginx的sub_filter模块。 --&gt;</span><br></pre></td></tr></table></figure>\n<p><br><br>Step3.修改配置文件后重新启动<br>$ service nginx start</p>\n<p><br></p>\n<h5 id=\"5-7-错误页面跳转设置\"><a href=\"#5-7-错误页面跳转设置\" class=\"headerlink\" title=\"5.7 错误页面跳转设置\"></a>5.7 错误页面跳转设置</h5><p>描述:：我Linux服务器上已经在tomcat上部署了一个项目，使用Nginx进行的代理，访问项目不存在的页面时，出现的是Nginx默认的404页面，现在我配置我自己写的404页面进行提示.</p>\n<ul>\n<li>第一种配置方式:网络地址跳转<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    <span class=\"comment\">#关键点</span></span><br><span class=\"line\">  proxy_intercept_errors on;</span><br><span class=\"line\">  ... 以下省略;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name  www.xxxxxxx.com;</span><br><span class=\"line\">         location / &#123;</span><br><span class=\"line\">            proxy_pass http://search-masteryee;</span><br><span class=\"line\">      proxy_set_header   REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">      proxy_set_header   Host <span class=\"variable\">$host</span>; </span><br><span class=\"line\">      proxy_set_header   X-Real-IP <span class=\"variable\">$remote_addr</span>; </span><br><span class=\"line\">      proxy_set_header   X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">      client_max_body_size    20m; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#关键点</span></span><br><span class=\"line\">        error_page  404  http://www.baidu.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>第二种配置方式:跳转本地地址<br>说明：我的404.html页面文件放在nginx安装目录下的html文件夹内;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    proxy_intercept_errors on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 8080;</span><br><span class=\"line\">        <span class=\"comment\">#charset utf-8;</span></span><br><span class=\"line\">        ....</span><br><span class=\"line\">        <span class=\"comment\">#绝对地址</span></span><br><span class=\"line\">        error_page  404 /404.html;</span><br><span class=\"line\">        location = /404.html &#123;</span><br><span class=\"line\">            <span class=\"comment\">#使用绝对地址跳转服务器/usr/local/nginx/html/404.html</span></span><br><span class=\"line\">            root  /usr/<span class=\"built_in\">local</span>/nginx/html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">#相对地址</span></span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">        location = /404.html &#123;</span><br><span class=\"line\">            <span class=\"comment\">#使用相对地址跳转nginx安装目录下的html/404.html</span></span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            <span class=\"comment\">#下面这种多了一个/ 反而不起作用</span></span><br><span class=\"line\">            <span class=\"comment\">#root   /html;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#配置多种返回码的多个错误页面，也可以同时配置多个错误码跳转一个页面，可以同时存在 </span></span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>第三种情况配置方式:tomcat未启动时<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    proxy_intercept_errors on;</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://search-masteryee;</span><br><span class=\"line\">      proxy_set_header REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">      proxy_set_header Host <span class=\"variable\">$host</span>; </span><br><span class=\"line\">      proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>; </span><br><span class=\"line\">      proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">      client_max_body_size 20m; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /404.html;</span><br><span class=\"line\">    error_page   404  /404.html;</span><br><span class=\"line\">        location = /404.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>第四种情况:proxy_intercept_errors配置地址多样<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        <span class=\"comment\">#可以放在http、server、location下面</span></span><br><span class=\"line\">        proxy_intercept_errors on;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_pass http://search-masteryee;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /404.html;</span><br><span class=\"line\">    error_page   404  /404.html;</span><br><span class=\"line\">        location = /404.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>总结:</strong></p>\n<ul>\n<li><code>proxy_intercept_errors on</code>:配置的错误页面表示的是当服务器返回的状态码为我们配置的状态码时才进行的页面跳转;</li>\n<li><code>fastcgi_intercept_errors on</code>:在代理的应用服务未启动错误时候进行错误页面的跳转;</li>\n</ul>\n<p><br></p>\n<h5 id=\"5-8-阻止特定URL访问\"><a href=\"#5-8-阻止特定URL访问\" class=\"headerlink\" title=\"5.8 阻止特定URL访问\"></a>5.8 阻止特定URL访问</h5><p>描述:常常采用的两种方式就是<code>location , $request_url</code>然后采用正则进行匹配; </p>\n<p>比如:<code>www.baidu.com/pan/beta/test1?fid=3</code><br><code>$request_uri</code> 代表是域名后路径与参数即是<code>/pan/beta/test1?fid=3</code>。如果只访问<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> 这时候<code>$request_uri</code>里也会有个/的。</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定文件阻止访问</span></span><br><span class=\"line\">location ~ /\\.ht &#123;</span><br><span class=\"line\">    deny  all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定参数阻止访问</span></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   html;</span><br><span class=\"line\">    index  index.php;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$request_uri</span> ~* <span class=\"string\">\"/\\?nsukey=\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 403 <span class=\"string\">\"I've recorded your ip Wait to check the water meter\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ \\.php$ &#123;</span><br><span class=\"line\">    root           html;</span><br><span class=\"line\">    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index  index.php;</span><br><span class=\"line\">    fastcgi_param  SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">    include        fastcgi_params;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$request_uri</span> ~* <span class=\"string\">\"/.+\\.php\\?nsukey=\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> 403 <span class=\"string\">\"I've recorded your ip Wait to check the water meter\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<hr>\n<h4 id=\"6-附录\"><a href=\"#6-附录\" class=\"headerlink\" title=\"6.附录\"></a>6.附录</h4><h5 id=\"6-1-自启动脚本\"><a href=\"#6-1-自启动脚本\" class=\"headerlink\" title=\"6.1 自启动脚本\"></a>6.1 自启动脚本</h5><pre><code class=\"bash\"><span class=\"meta\">#!/bin/sh</span>\n<span class=\"comment\"># nginx - this script starts and stops the nginx daemon</span>\n<span class=\"comment\"># chkconfig:   - 85 15</span>\n<span class=\"comment\"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server</span>\n<span class=\"comment\"># processname: nginx</span>\n<span class=\"comment\"># config:      /etc/nginx/nginx.conf</span>\n<span class=\"comment\"># config:      /usr/local/nginx/conf/nginx.conf</span>\n<span class=\"comment\"># config:      /etc/sysconfig/nginx</span>\n<span class=\"comment\"># pidfile:     /var/run/nginx/nginx.pid</span>\n<span class=\"comment\"># pidfile:     /usr/local/nginx/logs/nginx.pid</span>\n<span class=\"comment\"># Source function library.</span>\n. /etc/rc.d/init.d/<span class=\"built_in\">functions</span>\n<span class=\"comment\"># Source networking configuration.</span>\n. /etc/sysconfig/network\n<span class=\"comment\"># Check that networking is up.</span>\n[ <span class=\"string\">\"<span class=\"variable\">$NETWORKING</span>\"</span> = <span class=\"string\">\"no\"</span> ] &amp;&amp; <span class=\"built_in\">exit</span> 0\n<span class=\"comment\">#需要根据实际情况更改</span>\nnginx=<span class=\"string\">\"/usr/local/nginx/sbin/nginx\"</span>\nprog=$(basename <span class=\"variable\">$nginx</span>)\n<span class=\"comment\">#需要根据实际情况更改</span>\nNGINX_CONF_FILE=<span class=\"string\">\"/usr/local/nginx/conf/nginx.conf\"</span>\n[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\nlockfile=/var/lock/subsys/nginx\n<span class=\"function\"><span class=\"title\">make_dirs</span></span>() {\n   <span class=\"comment\"># make required directories</span>\n   user=`nginx -V 2&gt;&amp;1 | grep <span class=\"string\">\"configure arguments:\"</span> | sed <span class=\"string\">'s/[^*]*--user=\\([^ ]*\\).*/\\1/g'</span> -`\n   options=`<span class=\"variable\">$nginx</span> -V 2&gt;&amp;1 | grep <span class=\"string\">'configure arguments:'</span>`\n   <span class=\"keyword\">for</span> opt <span class=\"keyword\">in</span> <span class=\"variable\">$options</span>; <span class=\"keyword\">do</span>\n       <span class=\"keyword\">if</span> [ `<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | grep <span class=\"string\">'.*-temp-path'</span>` ]; <span class=\"keyword\">then</span>\n           value=`<span class=\"built_in\">echo</span> <span class=\"variable\">$opt</span> | cut -d <span class=\"string\">\"=\"</span> -f 2`\n           <span class=\"keyword\">if</span> [ ! -d <span class=\"string\">\"<span class=\"variable\">$value</span>\"</span> ]; <span class=\"keyword\">then</span>\n               <span class=\"comment\"># echo \"creating\" $value</span>\n               mkdir -p <span class=\"variable\">$value</span> &amp;&amp; chown -R <span class=\"variable\">$user</span> <span class=\"variable\">$value</span>\n           <span class=\"keyword\">fi</span>\n       <span class=\"keyword\">fi</span>\n   <span class=\"keyword\">done</span>\n}\n<span class=\"function\"><span class=\"title\">start</span></span>() {\n    [ -x <span class=\"variable\">$nginx</span> ] || <span class=\"built_in\">exit</span> 5\n    [ -f <span class=\"variable\">$NGINX_CONF_FILE</span> ] || <span class=\"built_in\">exit</span> 6\n    make_dirs\n    <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Starting <span class=\"variable\">$prog</span>: \"</span>\n    daemon <span class=\"variable\">$nginx</span> -c <span class=\"variable\">$NGINX_CONF_FILE</span>\n    retval=$?\n    <span class=\"built_in\">echo</span>\n    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; touch <span class=\"variable\">$lockfile</span>\n    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span>\n}\n<span class=\"function\"><span class=\"title\">stop</span></span>() {\n    <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Stopping <span class=\"variable\">$prog</span>: \"</span>\n    killproc <span class=\"variable\">$prog</span> -QUIT\n    retval=$?\n    <span class=\"built_in\">echo</span>\n    [ <span class=\"variable\">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class=\"variable\">$lockfile</span>\n    <span class=\"built_in\">return</span> <span class=\"variable\">$retval</span>\n}\n<span class=\"function\"><span class=\"title\">restart</span></span>() {\n    configtest || <span class=\"built_in\">return</span> $?\n    stop\n    sleep 1\n    start\n}\n<span class=\"function\"><span class=\"title\">reload</span></span>() {\n    configtest || <span class=\"built_in\">return</span> $?\n    <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Reloading <span class=\"variable\">$prog</span>: \"</span>\n    killproc <span class=\"variable\">$nginx</span> -HUP\n    RETVAL=$?\n    <span class=\"built_in\">echo</span>\n}\n<span class=\"function\"><span class=\"title\">force_reload</span></span>() {\n    restart\n}\n<span class=\"function\"><span class=\"title\">configtest</span></span>() {\n  <span class=\"variable\">$nginx</span> -t -c <span class=\"variable\">$NGINX_CONF_FILE</span>\n}\n<span class=\"function\"><span class=\"title\">rh_status</span></span>() {\n    status <span class=\"variable\">$prog</span>\n}\n<span class=\"function\"><span class=\"title\">rh_status_q</span></span>() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n<span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span>\n    start)\n        rh_status_q &amp;&amp; <span class=\"built_in\">exit</span> 0\n        <span class=\"variable\">$1</span>\n        ;;\n    stop)\n        rh_status_q || <span class=\"built_in\">exit</span> 0\n        <span class=\"variable\">$1</span>\n        ;;\n    restart|configtest)\n        <span class=\"variable\">$1</span>\n        ;;\n    reload)\n        rh_status_q || <span class=\"built_in\">exit</span> 7\n        <span class=\"variable\">$1</span>\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || <span class=\"built_in\">exit</span> 0\n            ;;\n    *)\n        <span class=\"built_in\">echo</span> $<span class=\"string\">\"Usage: <span class=\"variable\">$0</span> {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"</span>\n        <span class=\"built_in\">exit</span> 2\n<span class=\"keyword\">esac</span>\n</code></pre>\n<p><br></p>\n<h5 id=\"6-2-学习思考\"><a href=\"#6-2-学习思考\" class=\"headerlink\" title=\"6.2 学习思考\"></a>6.2 学习思考</h5><p><em>思考1：Nginx如何做到热部署？</em><br>描述:所谓热部署，就是配置文件nginx.conf修改后，不需要stop Nginx不需要中断请求，就能让配置文件生效<br>通过上文我们已经知道worker进程负责处理具体的请求，那么如果想达到热部署的效果，可以想象：</p>\n<ul>\n<li>方案一：修改配置文件nginx.conf后，主进程master负责推送给worker进程更新配置信息，worker进程收到信息后，更新进程内部的线程信息。</li>\n<li>方案二：修改配置文件nginx.conf后，重新生成新的worker进程，当然会以新的配置进行处理，而且新的请求都必须交给新的worker进程，至于老worker进程，等把那些以前的请求处理完毕kill掉即可。</li>\n</ul>\n<p><em>思考2：Nginx如何做到高并发下的高效处理？</em><br>描述:上文已经提及Nginx的worker进程个数与CPU绑定、worker进程内部包含一个线程高效回环处理请求，这的确有助于效率，但这是不够的。</p>\n<ul>\n<li>多线程Socket IO技术：BIO/NIO/AIO、异步/同步、阻塞/非阻塞…要同时处理那么多的请求，要知道有的请求需要发生IO，可能需要很长时间，如果等着它就会拖慢worker的处理速度。<br>Nginx采用了Linux的<code>epoll模型基于事件驱动机制</code>，它可以监控多个事件是否准备完毕，如果OK那么放入epoll队列中这个过程是异步的。worker只需要从epoll队列循环处理即可。</li>\n</ul>\n<p><em>思考3：Nginx挂了怎么办？</em><br>描述:Nginx既然作为入口网关，很重要，如果出现单点问题，显然是不可接受的。答案是：Keepalived+Nginx实现高可用。(可以参考另外一篇文章)</p>\n<ul>\n<li>第一: 请求不要直接打到Nginx上，应该先通过Keepalived（这就是所谓虚拟IP，VIP）</li>\n<li>第二: Keepalived应该能监控Nginx的生命状态（提供一个用户自定义的脚本，定期检查Nginx进程状态，进行权重变化,，从而实现Nginx故障切换）</li>\n</ul>\n","comments":true,"excerpt":"本章目录[TOC]","categories":[{"name":"基础入门","path":"api/categories/基础入门.json"},{"name":"运维实践","path":"api/categories/运维实践.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"Web服务","path":"api/tags/Web服务.json"}]}