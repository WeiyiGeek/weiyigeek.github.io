{"title":"1.Go编程快速入门学习","slug":"编程世界/Go/1.Go编程快速入门学习","date":"2020-04-23T03:16:58.000Z","updated":"2022-03-29T05:39:06.304Z","url":"2020/4-23-283.html","path":"api/articles/2020/4-23-283.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728174737.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728175356.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728215134.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728215431.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728220116.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728220435.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728221601.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729092601.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200423130326.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729170830.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729204731.png","https://www.liwenzhou.com/images/Go/00_config_VSCode/vscode21.gif","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730110147.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114115.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114238.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114531.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p><strong>为什么你应该学习Go语言？</strong></p>\n<blockquote>\n<p>世界上已经有太多太多的编程语言了，为什么又出来一个Go语言？<br>官方介绍: Go是一种开源编程语言，它使构建简单、可靠和高效的软件变得容易。<br>因为其编程语言的良好特性和Google公司强势推广以及以Go语言相关开源项目火爆, 比如 <code>etcd、kubernetes、Prometheus</code> 等项目, 其次是硬件性能提高则我们需要高性能的软件</p>\n</blockquote>\n<ul>\n<li>1.参考 Golang 编程语言排行榜 : <a href=\"https://www.tiobe.com/tiobe-index\" target=\"_blank\" rel=\"noopener\">https://www.tiobe.com/tiobe-index</a></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728174737.png\" alt=\"WeiyiGeek.2010-2021年Go编程趋势\" title=\"\" class=\"\">\n                <p>WeiyiGeek.2010-2021年Go编程趋势</p>\n            </figure>\n<ul>\n<li>2.硬件限制(摩尔定律)已然失效 </li>\n</ul>\n<blockquote>\n<p>摩尔定律：当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。 换言之，每一美元所能买到的电脑性能，将每隔18-24个月翻一倍以上。</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728175356.png\" alt=\"WeiyiGeek.1975-2015年处理器集体管数量\" title=\"\" class=\"\">\n                <p>WeiyiGeek.1975-2015年处理器集体管数量</p>\n            </figure>\n<p>从上面的图表可以看出，近十年单线程性能和处理器频率保持稳定。我们不能像之前一样把添加更多晶体管当成是解决方案，因为在较小规模上一些量子特性开始出现（如隧道效应），并且因为在同样小的空间里放置更多晶体管的代价非常昂贵，每1美元可以添加的晶体管数量开始下降。</p>\n<p>制造商开始从其他方面提高处理器的性能, 但这中解决方案也有其自身的局限性。因为成本原因我们不能无限制的为计算机添加内核，也无法无限制的添加缓存来提高性能，因为缓存越大，取值的性能越低。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 1.向处理器添加越来越多的内核，如四核和八核CPU。</span><br><span class=\"line\">* 2.发明了超线程技术。</span><br><span class=\"line\">* 3.为处理器添加了更多缓存以提高性能。</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 一旦我们没有办法在硬件上一直取得突破，我们只能提高软件的性能或者说我们需要高性能的软件。</p>\n<p>如上所述，硬件制造商正在为处理器添加越来越多的内核以提高性能。所有数据中心都在这些处理器上运行，更重要的是，今天的应用程序使用多个微服务来维护数据库连接，消息队列和维护缓存。因此，开发的软件和编程语言应该可以轻松地支持并发性，并且应该能够随着CPU核心数量的增加而可扩展。</p>\n<p><br></p>\n<p><strong>发展历史</strong><br>描述: 大多数现代编程语言（如Java，Python等）都来自90年代的单线程环境。虽然一些编程语言的框架在不断地提高多核资源使用效率，例如 Java 的 Netty 等，但仍然需要开发人员花费大量的时间和精力搞懂这些框架的运行原理后才能熟练掌握。</p>\n<ul>\n<li>Go 于 2007年9月由于<code>罗伯特·格瑞史莫、罗勃·派克及肯·汤普逊于开始设计，[3]稍后伊恩·兰斯·泰勒（Ian Lance Taylor）、拉斯·考克斯（Russ Cox）</code>加入项目。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728215134.png\" alt=\"WeiyiGeek.Go核心开发团队\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Go核心开发团队</p>\n            </figure>\n<ul>\n<li><p>Go 于 2009年11月正式宣布推出，版本1.0在2012年3月发布，之后Go广泛应用于Google的产品以及许多其他组织和开源项目。</p>\n</li>\n<li><p>Go 于 2009年11月10日由Google发布推出，成为开放源代码项目，支持Linux、macOS、Windows等操作系统。2005 年 AMD 速龙发布第一款民用级多核处理器，所以当时多核处理器已经上市。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728215431.png\" alt=\"WeiyiGeek.为现代软件工程而生的Go\" title=\"\" class=\"\">\n                <p>WeiyiGeek.为现代软件工程而生的Go</p>\n            </figure>\n<p>Tips : 在2016年，Go 被软件评价公司TIOBE选为<code>&quot;TIOBE 2016年最佳语言&quot;</code>。</p>\n<hr>\n<h3 id=\"What-什么是Go语言\"><a href=\"#What-什么是Go语言\" class=\"headerlink\" title=\"What,什么是Go语言?\"></a>What,什么是Go语言?</h3><p>描述:<code>Go（又称Golang[4]-Google-go-language）</code>是Google开发的一种<code>静态强类型</code>、<code>编译型</code>、<code>并发型</code>，并具有<code>垃圾回收功能、优良的并行设计</code>的编程语言, 其被誉为21世纪的C语言, 因为其Go的语法接近C语言，但对于变量的声明有所不同。</p>\n<p>Go的并行计算模型是<code>以东尼·霍尔</code>的通信顺序进程（CSP）为基础，采取类似模型的其他语言包括<code>Occam</code>和<code>Limbo</code>，Go也具有这个模型的特征，比如通道传输，通过<code>goroutine</code>和通道等并行构造可以建造线程池和管道等。</p>\n<ul>\n<li><p>(1) 与 <code>C++</code> 相比 Go 并不包括如<code>枚举、异常处理、继承、泛型、断言、虚函数</code>等功能，但增加了<code>切片(Slice) 型、并发、管道、垃圾回收功能、接口等</code>特性的语言级支持以及支持垃圾回收功能。</p>\n</li>\n<li><p>(2) 不同于 Java，Go原生提供了关联数组（也称为<code>哈希表（Hashes）</code>或<code>字典（Dictionaries）</code>）。 </p>\n</li>\n</ul>\n<p><br/></p>\n<p><strong>Goroutine 并行设计</strong><br>描述: </p>\n<p>透过Goroutine能够让程序以异步的方式运行，而不需要担心一个函数导致程序中断，因此Go也非常地适合网络服务。</p>\n<p>假设有个程序，里面有两个函数：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假設 loop 是一個會重複執行十次的迴圈函式。</span></span><br><span class=\"line\">  <span class=\"comment\">// 迴圈執行完畢才會往下執行。</span></span><br><span class=\"line\">  loop()</span><br><span class=\"line\">  <span class=\"comment\">// 執行另一個迴圈。</span></span><br><span class=\"line\">  loop()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如此就不需要等待该函数运行完后才能运行下一个函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 透過 `go`，我們可以把這個函式同步執行，</span></span><br><span class=\"line\">  <span class=\"comment\">// 如此一來這個函式就不會阻塞主程式的執行。</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> loop()</span><br><span class=\"line\">  <span class=\"comment\">// 執行另一個迴圈。</span></span><br><span class=\"line\">  loop()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>参考来源:</strong><br><em>Wiki 百科</em> : <a href=\"https://wiki.weiyigeek.top/w/index.php?search=go&amp;title=Special:%E6%90%9C%E7%B4%A2&amp;go=%E5%89%8D%E5%BE%80\" target=\"_blank\" rel=\"noopener\">https://wiki.weiyigeek.top/w/index.php?search=go&amp;title=Special:%E6%90%9C%E7%B4%A2&amp;go=%E5%89%8D%E5%BE%80</a><br><em>官方网站</em> :</p>\n<ul>\n<li><a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">https://golang.org/</a></li>\n<li><a href=\"https://golang.google.cn/\" target=\"_blank\" rel=\"noopener\">https://golang.google.cn/</a></li>\n</ul>\n<hr>\n<h3 id=\"Why-为啥要用Go语言\"><a href=\"#Why-为啥要用Go语言\" class=\"headerlink\" title=\"Why,为啥要用Go语言?\"></a>Why,为啥要用Go语言?</h3><p><strong>Go 语言有何特点:</strong></p>\n<ul>\n<li>0.Go语言语法简单易学、代码风格统一<code>(自动格式化)</code>、支持垃圾回收功能、执行性能好、是企业级编程语言。<blockquote>\n<p>Go 语言简单易学，学习曲线平缓，不需要像 C/C++ 语言动辄需要两到三年的学习期。<br>Go 语言的风格类似于C语言。其语法在C语言的基础上进行了大幅的简化，去掉了不需要的表达式括号，循环也只有 for 一种表示方法，就可以实现数值、键值等各种遍历。<br>Go 语言提供了一套格式化工具<code>go fmt</code>, 在开发环境或者编辑器在保存时，都会使用格式化工具进行修改代码的格式化，这样就保证了不同开发者提交的代码都是统一的格式。</p>\n</blockquote>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li><p>1.Go语言让你用写Python代码的开发效率编写C语言代码 (<code>编程范型: 编译型，可平行化，结构化，指令式</code>)。</p>\n</li>\n<li><p>2.Go语言从底层原生支持并发，无须第三方库、开发者的编程技巧和开发经验。</p>\n<blockquote>\n<p>Go语言的并发是基于 goroutine（<code>类似于线程，但并非线程</code>） 的。可以将 goroutine 理解为一种虚拟线程。Go 语言运行时会参与调度 goroutine，并将 goroutine 合理地分配到每个 CPU 中，最大限度地使用CPU性能。开启一个goroutine的消耗非常小（<code>大约2KB的内存</code>），你可以轻松创建数百万个goroutine。<br>goroutine的特点:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 具有可增长的分段堆栈。这意味着它们只在需要时才会使用更多内存。</span><br><span class=\"line\">* 启动时间比线程快。</span><br><span class=\"line\">* 原生支持利用channel安全地进行通信。</span><br><span class=\"line\">* 共享数据结构时无需使用互斥锁。</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>3.Go语言性能强悍，同<code>C,C++</code>一样Go语言也是编译型的语言，它直接将人类可读的代码编译成了处理器可以直接运行的二进制文件，执行效率更高，性能更好。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解释型语言：Shell 语言、Python 语言、PHP 语言</span><br><span class=\"line\">编译型语言：C 语言、C++ 语言、Go 语言</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728220116.png\" alt=\"WeiyiGeek.编译型的语言\" title=\"\" class=\"\">\n                <p>WeiyiGeek.编译型的语言</p>\n            </figure>\n<p>由下图可以看出，Go 语言在性能上更接近于 Java 语言，虽然在某些测试用例上不如经过多年优化的 Java 语言，但毕竟 Java 语言已经经历了多年的积累和优化。Go 语言在未来的版本中会通过不断的版本优化提高单核运行性能。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728220435.png\" alt=\"WeiyiGeek.常见编程语言运行性能比较\" title=\"\" class=\"\">\n                <p>WeiyiGeek.常见编程语言运行性能比较</p>\n            </figure>\n<p>数据来源：<a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/\" target=\"_blank\" rel=\"noopener\">https://benchmarksgame-team.pages.debian.net/benchmarksgame/</a></p>\n<p><br></p>\n<p><strong>Go 语言的缺陷</strong></p>\n<p>Tips : Go 2.0 版本将支持泛型，对于断言的存在，则持负面态度，同时也为自己不提供类型继承来辩护。</p>\n<hr>\n<h3 id=\"How-Go语言发展前景\"><a href=\"#How-Go语言发展前景\" class=\"headerlink\" title=\"How,Go语言发展前景?\"></a>How,Go语言发展前景?</h3><p>目前Go语言已经⼴泛应用于人工智能、云计算开发、容器虚拟化、⼤数据开发、数据分析及科学计算、运维开发、爬虫开发、游戏开发等领域。</p>\n<p>Go语言简单易学，天生支持并发，完美契合当下高并发的互联网生态，并且在多核并发上拥有原生的设计优势, 很多公司，特别是中国的互联网公司，即将或者已经完成了使用 Go 语言改造旧系统的过程。经过 Go 语言重构的系统能使用更少的硬件资源获得更高的并发和I/O吞吐表现。充分挖掘硬件设备的潜力也满足当前精细化运营的市场大环境。</p>\n<p>所以当下程序开发者应该抓住趋势，要学会做一个领跑者而不是跟随者。<br>国内Go语言的需求潜力巨大，目前无论是国内大厂还是新兴互联网公司基本上都会有Go语言的岗位需求。</p>\n<p><br></p>\n<p><strong>Go 在互联网企业应用以及使用它的公司：</strong></p>\n<ul>\n<li>Go在百度内部应用（百度流量入口BFE、自动驾驶、百度只能小程序、百度APP）</li>\n<li>Go在腾讯内部应用（蓝鲸运维平台、微服务框架TarsGo、云平台）</li>\n<li>Go在知乎内部应用（知乎全站重构）</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210728221601.png\" alt=\"WeiyiGeek.应用Go语言的公司\" title=\"\" class=\"\">\n                <p>WeiyiGeek.应用Go语言的公司</p>\n            </figure>\n<p>现在就开始你的Go语言学习之旅吧！人生苦短，let’s Go, 下面我们将进行Go开发环境安装实践。</p>\n<hr>\n<h2 id=\"0x01-Go语言开发环境搭建\"><a href=\"#0x01-Go语言开发环境搭建\" class=\"headerlink\" title=\"0x01 Go语言开发环境搭建\"></a>0x01 Go语言开发环境搭建</h2><p>描述: 本章节主要讲解安装Go语言及搭建Go语言开发环境。</p>\n<p>Tips : Go语言1.11版本之后，开启go mod模式之后就不再强制需要配置GOPATH了。<br>Tips : Go语言1.14版本之后,推荐使用go modules管理依赖，也不再需要把代码写在GOPATH目录下了，之前旧版本的教程戳这个链接。</p>\n<p><strong>下载地址:</strong><br>Go官网下载 : <a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">https://golang.org/dl/</a><br>Go官方镜像站（推荐）：<a href=\"https://golang.google.cn/dl/\" target=\"_blank\" rel=\"noopener\">https://golang.google.cn/dl/</a> &amp; <a href=\"https://studygolang.com/dl\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/dl</a></p>\n<p><br/></p>\n<h3 id=\"版本平台\"><a href=\"#版本平台\" class=\"headerlink\" title=\"版本平台\"></a>版本平台</h3><p>描述: Windows平台和Mac平台推荐下载可执行文件版，Linux平台下载压缩文件版。</p>\n<p>当前 2021年7月28日 22:43:15 最新版本为1.16.16版。</p>\n<ul>\n<li>Source: 源代码编译安装-<a href=\"https://dl.google.com/go/go1.16.6.src.tar.gz\" target=\"_blank\" rel=\"noopener\">https://dl.google.com/go/go1.16.6.src.tar.gz</a></li>\n<li>Binary: 二进制解压安装-<a href=\"https://dl.google.com/go/go1.16.6.linux-amd64.tar.gz\" target=\"_blank\" rel=\"noopener\">https://dl.google.com/go/go1.16.6.linux-amd64.tar.gz</a></li>\n</ul>\n<p>Tips ：由于时间的推移的1.16.6版本号可能并不是最新的，但总体来说安装教程是类似的，Go语言更新迭代比较快，推荐使用较新版本，体验最新特性。</p>\n<p><strong>Windows</strong><br>描述: 此安装实例以 64位 Win10 系统安装 <code>Go 1.14.1</code> 可执行文件版本为例, 双击下载好的文件，然后按照下图的步骤安装即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.将 D:\\Tools\\go 目录设置GOROOT环境变量 (CMD管理员运行)</span></span><br><span class=\"line\"><span class=\"comment\"># GOROOT 指向Go家目录第三方包的安装包路径</span></span><br><span class=\"line\">SETX GOROOT <span class=\"string\">\"D:\\Tools\\go\"</span> /M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.将Go项目开发路径一般指向src，例如此处 `D:\\Github\\GoProject`</span></span><br><span class=\"line\">SETX GOPATH <span class=\"string\">\"D:\\Github\\GoProject\"</span> /M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.需要将GOROOT和GOPATH变量添加至PATH环境变量</span></span><br><span class=\"line\">setx PATH <span class=\"string\">\"%GOROOT%\\n;%PATH%;\"</span> /M </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.在项目开发路径下创建bin/pkg/src目录</span></span><br><span class=\"line\">mkdir %GOPATH%/bin</span><br><span class=\"line\">mkdir %GOPATH%/pkg</span><br><span class=\"line\">mkdir %GOPATH%/src</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729092601.png\" alt=\"WeiyiGeek.Windows\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Windows</p>\n            </figure></p>\n<p><br></p>\n<p><strong>Linux</strong><br>如果不是要在Linux平台敲go代码就不需要在Linux平台安装Go，我们开发机上写好的go代码只需要跨平台编译（详见文章末尾的跨平台编译）好之后就可以拷贝到Linux服务器上运行了，这也是go程序跨平台易部署的优势。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.下载二进制源码包并将将下载的源码包解压至 /usr/local目录</span></span><br><span class=\"line\">wget https://dl.google.com/go/go1.16.6.linux-amd64.tar.gz</span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.16.6.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.将 /usr/local/go/bin 目录添加至PATH环境变量</span></span><br><span class=\"line\"><span class=\"comment\">#在/root/.profile进行添加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/usr/<span class=\"built_in\">local</span>/go  <span class=\"comment\"># 安装目录</span></span><br><span class=\"line\"><span class=\"comment\">#GOROOT 第三方包的安装包路径</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/go/      <span class=\"comment\"># 项目路径一般指向src</span></span><br><span class=\"line\"><span class=\"comment\">#需要BIN目录和GOPATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.验证是否安装成功, 可以打开终端窗口输入go version命令，查看安装的Go版本。</span></span><br><span class=\"line\">go env</span><br><span class=\"line\">go version go version go1.16.6 linux/amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.go语言程序编译运行</span></span><br><span class=\"line\">package main</span><br><span class=\"line\">import <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">func <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5.编译运行hello.go</span></span><br><span class=\"line\">go build hello.go</span><br><span class=\"line\">go run hello.go &amp;&amp; ./hello</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200423130326.png\" alt=\"WeiyiGeek.Go-Binary\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Go-Binary</p>\n            </figure></p>\n<p><br/></p>\n<h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3><p>描述: 由于本人习惯于使用Ubuntu作为开发环境，此处Go语言的学习环境以<code>Ubuntu 20.04 Desktop</code>版本为例进行。</p>\n<h4 id=\"1-Ubuntu桌面版\"><a href=\"#1-Ubuntu桌面版\" class=\"headerlink\" title=\"(1) Ubuntu桌面版\"></a>(1) Ubuntu桌面版</h4><ul>\n<li><p>Ubuntu 20.04 LTS Desktop 操作系统 : <a href=\"https://ubuntu.com/download/desktop\" target=\"_blank\" rel=\"noopener\">https://ubuntu.com/download/desktop</a> </p>\n</li>\n<li><p>Ubuntu 20.04 LTS Desktop 基本配置 : <a href=\"https://mp.weixin.qq.com/s/6IpAV5-Hdi-mpbH9XlTCOw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/6IpAV5-Hdi-mpbH9XlTCOw</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) xrdp 安装与配置 : https://mp.weixin.qq.com/s/JA04lJrQETDXP0N_mrthJg</span></span><br><span class=\"line\">  <span class=\"comment\"># xfce4 桌面</span></span><br><span class=\"line\">  <span class=\"comment\"># echo xfce4-session &gt; ~/.xsession</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) ZSH 命令行终端优化 ： https://mp.weixin.qq.com/s/8i0K2D-hp51U6UFOd25c2Q</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 中文输入法安装 : </span></span><br><span class=\"line\">  - https://pinyin.sogou.com/linux/help.php</span><br><span class=\"line\">  - https://srf.baidu.com/site/guanwang_linux/index.html</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Ubuntu 20.04 LTS Desktop 安装配置 Go 语言:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">vim /etc/profile.d/golang-env.sh</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/home/weiyigeek/app/program/go</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/weiyigeek/app/program/project/go</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:<span class=\"variable\">$&#123;GOROOT&#125;</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 bin,pkg,src</span></span><br><span class=\"line\">mkdir -vp <span class=\"variable\">$&#123;GOPATH&#125;</span>/&#123;bin,pkg,src&#125;</span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">'go'</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">'go/bin'</span>   <span class=\"comment\"># 用于存放编译后生成的可执行文件</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">'go/pkg'</span>   <span class=\"comment\"># 用于存放编译生成的归档文件</span></span><br><span class=\"line\">mkdir: 已创建目录 <span class=\"string\">'go/src'</span>   <span class=\"comment\"># 用于存储源码文件代理包以及自开发包</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重开Shell验证版本</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">go version</span><br><span class=\"line\">  <span class=\"comment\"># go version go1.16.6 linux/amd64</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>环境变量：</strong><br>描述: 利用 <code>go env</code> 命令查看相关go语言相关的环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GO111MODULE=<span class=\"string\">\"on\"</span></span><br><span class=\"line\">GOARCH=<span class=\"string\">\"amd64\"</span></span><br><span class=\"line\">GOBIN=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOCACHE=<span class=\"string\">\"/home/weiyigeek/.cache/go-build\"</span></span><br><span class=\"line\">GOENV=<span class=\"string\">\"/home/weiyigeek/.config/go/env\"</span></span><br><span class=\"line\">GOEXE=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOFLAGS=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOHOSTARCH=<span class=\"string\">\"amd64\"</span></span><br><span class=\"line\">GOHOSTOS=<span class=\"string\">\"linux\"</span></span><br><span class=\"line\">GOINSECURE=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOMODCACHE=<span class=\"string\">\"/home/weiyigeek/app/program/project/go/pkg/mod\"</span></span><br><span class=\"line\">GONOPROXY=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GONOSUMDB=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOOS=<span class=\"string\">\"linux\"</span></span><br><span class=\"line\">GOPATH=<span class=\"string\">\"/home/weiyigeek/app/program/project/go\"</span></span><br><span class=\"line\">GOPRIVATE=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOPROXY=<span class=\"string\">\"https://goproxy.cn,direct\"</span></span><br><span class=\"line\">GOROOT=<span class=\"string\">\"/home/weiyigeek/app/program/go\"</span></span><br><span class=\"line\">GOSUMDB=<span class=\"string\">\"sum.golang.org\"</span></span><br><span class=\"line\">GOTMPDIR=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOTOOLDIR=<span class=\"string\">\"/home/weiyigeek/app/program/go/pkg/tool/linux_amd64\"</span></span><br><span class=\"line\">GOVCS=<span class=\"string\">\"\"</span></span><br><span class=\"line\">GOVERSION=<span class=\"string\">\"go1.16.6\"</span></span><br><span class=\"line\">GCCGO=<span class=\"string\">\"gccgo\"</span></span><br><span class=\"line\">AR=<span class=\"string\">\"ar\"</span></span><br><span class=\"line\">CC=<span class=\"string\">\"gcc\"</span></span><br><span class=\"line\">CXX=<span class=\"string\">\"g++\"</span></span><br><span class=\"line\">CGO_ENABLED=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">GOMOD=<span class=\"string\">\"/dev/null\"</span></span><br><span class=\"line\">CGO_CFLAGS=<span class=\"string\">\"-g -O2\"</span></span><br><span class=\"line\">CGO_CPPFLAGS=<span class=\"string\">\"\"</span></span><br><span class=\"line\">CGO_CXXFLAGS=<span class=\"string\">\"-g -O2\"</span></span><br><span class=\"line\">CGO_FFLAGS=<span class=\"string\">\"-g -O2\"</span></span><br><span class=\"line\">CGO_LDFLAGS=<span class=\"string\">\"-g -O2\"</span></span><br><span class=\"line\">PKG_CONFIG=<span class=\"string\">\"pkg-config\"</span></span><br><span class=\"line\">GOGCCFLAGS=<span class=\"string\">\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build3886050940=/tmp/go-build -gno-record-gcc-switches\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>常用变量解析:</strong></p>\n<ul>\n<li>GOROOT : 指定安装Go语言开发包的解压路径。</li>\n<li><p>GOPATH : 指定外部Go语言代码开发工作区目录, 从<code>Go 1.8</code>版本开始Go开发包在安装完成后会为GOPATH设置一个默认目录，并且在<code>Go 1.14</code>及之后的版本中启用了<code>Go Module</code>模式之后，不一定非要将代码写到<code>GOPATH</code>目录下，所以也就不需要我们再自己配置GOPATH了使用默认的即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 在 Go 1.8 版本之前，GOPATH环境变量默认是空的。从 Go 1.8 版本开始，Go 开发包在安装完成后会为 GOPATH设置一个默认目录，参见下述。</span></span><br><span class=\"line\"><span class=\"comment\"># GOPATH在不同操作系统平台上的默认值</span></span><br><span class=\"line\">平台 \t   GOPATH默认值      举例</span><br><span class=\"line\">Windows %USERPROFILE%/go \tC:\\Users\\用户名\\go</span><br><span class=\"line\">Unix \t  <span class=\"variable\">$HOME</span>/go \t        /home/用户名/go</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 同时，我们将 GOROOT下的bin目录及GOPATH下的bin目录都添加到环境变量中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 配置环境变量之后需要重启你电脑上已经打开的终端。（例如cmd、VS Code里面的终端和其他编辑器的终端）。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GOPROXY : 指定代理Go语言从公共代理仓库中快速拉取您所需的依赖代码（建议 Go &gt; 1.13）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 1. goproxy.io 是全球最早的 Go modules 镜像代理服务之一, 采用 CDN 加速服务为开发者提供依赖下载, 该服务由一批热爱开源, 热爱 Go 语言的年轻人开发维护。</span></span><br><span class=\"line\"><span class=\"comment\"># - 2. goproxy.cn 中国最可靠的 Go 模块代理, 由七牛云 CDN 在全球范围内加速我们的服务。</span></span><br><span class=\"line\"><span class=\"comment\"># - 3. goproxy.baidu.com 百度Go Module代理仓库服务, 你可以利用该代理来避免DNS污染导致的模块拉取缓慢或失败的问题加速你的构建。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Go 1.13 及以上（推荐）</span></span><br><span class=\"line\">$ go env -w GO111MODULE=on</span><br><span class=\"line\">$ go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\">$ go env -w GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\">$ go env -w GOPROXY=https://goproxy.baidu.com/,direct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Bash (Linux or macOS)</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 GOPROXY 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=https://goproxy.io,direct</span><br><span class=\"line\"><span class=\"comment\"># 还可以设置不走 proxy 的私有仓库或组，多个用逗号相隔（可选）</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPRIVATE=git.mycompany.com,github.com/my/private</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PowerShell (Windows)</span></span><br><span class=\"line\"><span class=\"comment\"># 配置 GOPROXY 环境变量</span></span><br><span class=\"line\"><span class=\"variable\">$env</span>:GO111MODULE = <span class=\"string\">\"on\"</span></span><br><span class=\"line\"><span class=\"variable\">$env</span>:GOPROXY = <span class=\"string\">\"https://goproxy.io,direct\"</span></span><br><span class=\"line\"><span class=\"comment\"># 还可以设置不走 proxy 的私有仓库或组，多个用逗号相隔（可选）</span></span><br><span class=\"line\"><span class=\"variable\">$env</span>:GOPRIVATE = <span class=\"string\">\"git.mycompany.com,github.com/my/private\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h4 id=\"2-开发编辑器\"><a href=\"#2-开发编辑器\" class=\"headerlink\" title=\"(2) 开发编辑器\"></a>(2) 开发编辑器</h4><p>描述: Go采用的是UTF-8编码的文本文件存放源代码，理论上使用任何一款文本编辑器都可以做Go语言开发，这里推荐使用<code>VS Code</code>和<code>Goland</code>。</p>\n<ul>\n<li>VS Code 是微软开源的编辑器</li>\n<li>Goland  是jetbrains出品的付费IDE。</li>\n</ul>\n<p><strong>2.1 Visual Studio Code</strong><br>描述: VS Code全称Visual Studio Code，是微软公司开源的一款免费现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，支持 Win、Mac 以及 Linux平台。</p>\n<p>Tips : 虽然不如某些IDE功能强大，但是它添加Go扩展插件后已经足够胜任我们日常的Go开发, 并支持三大主流平台都支持，请根据自己的电脑平台选择对应的安装包。 </p>\n<p>VS Code 官方下载地址：<a href=\"https://code.visualstudio.com/Download\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/Download</a></p>\n<p><br/></p>\n<ul>\n<li>Step 1.在Ubuntu中安装deb格式的 <code>VS code</code> 开发软件。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https:<span class=\"comment\">//az764295.vo.msecnd.net/stable/c3f126316369cd610563c75b1b1725e0679adfb3/code_1.58.2-1626302803_amd64.deb</span></span><br><span class=\"line\">$ dpkg -i ode_1<span class=\"number\">.58</span><span class=\"number\">.2</span><span class=\"number\">-1626302803</span>_amd64.deb</span><br><span class=\"line\">$ code</span><br><span class=\"line\"><span class=\"number\">1.58</span><span class=\"number\">.2</span></span><br><span class=\"line\">c3f126316369cd610563c75b1b1725e0679adfb3</span><br><span class=\"line\">x64</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 2.VS Code 基础 Go 开发环境配置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 安装中文简体插件: </span></span><br><span class=\"line\">&gt; 点击左侧菜单栏最后一项管理扩展，在搜索框中输入 chinese ，选中结果列表第一项，点击install安装。</span><br><span class=\"line\">&gt; 安装完毕后右下角会提示重启 `VS Code`，重启之后你的`VS Code`就显示中文啦！ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 安装Go扩展:</span></span><br><span class=\"line\">&gt; 现在我们要为我们的`VS Code`编辑器安装Go扩展插件，让它支持Go语言开发,在搜索框中输入 chinese 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 安装Go语言开发工具包: </span></span><br><span class=\"line\">&gt; 在Go语言开发的时候为我们提供诸如代码提示、代码自动补全等功能。</span><br><span class=\"line\">&gt; 在此之前请先设置GOPROXY，打开终端执行以下命令: go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\">&gt; Windows平台按下`Ctrl+Shift+P`，Mac平台按`Command+Shift+P`，这个时候VS Code界面会弹出一个输入框，如下图： </span><br><span class=\"line\">&gt; 我们在这个输入框中输入 `go:install`，下面会自动搜索相关命令，我们选择 `Go:Install/Update Tools`这个命令，按下图选中并会回车执行该命令（或者使用鼠标点击该命令） </span><br><span class=\"line\">&gt; 在弹出的窗口选中所有，并点击“确定”按钮，进行安装。 </span><br><span class=\"line\"><span class=\"comment\"># Tools environment: GOPATH=/home/weiyigeek/app/program/project/go</span></span><br><span class=\"line\"><span class=\"comment\"># Installing 10 tools at /home/weiyigeek/app/program/project/go/bin in module mode.</span></span><br><span class=\"line\"><span class=\"comment\">#   gopkgs</span></span><br><span class=\"line\"><span class=\"comment\">#   go-outline</span></span><br><span class=\"line\"><span class=\"comment\">#   gotests</span></span><br><span class=\"line\"><span class=\"comment\">#   gomodifytags</span></span><br><span class=\"line\"><span class=\"comment\">#   impl</span></span><br><span class=\"line\"><span class=\"comment\">#   goplay</span></span><br><span class=\"line\"><span class=\"comment\">#   dlv</span></span><br><span class=\"line\"><span class=\"comment\">#   dlv-dap</span></span><br><span class=\"line\"><span class=\"comment\">#   staticcheck</span></span><br><span class=\"line\"><span class=\"comment\">#   gopls</span></span><br><span class=\"line\">&gt; 最终会在终端中显示 successful 则为安装成功。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729170830.png\" alt=\"WeiyiGeek.Go开发依赖软件\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Go开发依赖软件</p>\n            </figure>\n<ul>\n<li><p>Step 3.编辑器主题变更，依次点击设置-&gt;颜色主题，然后在弹出的窗口选择你喜欢的主题, 本人比较喜欢使用Dark 暗黑的主题。</p>\n</li>\n<li><p>Step 4.配置VSCode开启自动保存,依次点击 文件-&gt;首选项-&gt;设置，打开设置页面就能看到自动保存相关配置如下图，可以根据自己的喜好选择自动保存的方式： </p>\n</li>\n<li><p>Step 5.配置代码片段快捷键,还是按Ctrl/Command+Shift+P,按下图输入&gt;snippets，选择命令并执行, 然后在弹出的窗口点击选择go选项，然后弹出如下代码页面： </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用法：</span></span><br><span class=\"line\"><span class=\"string\">\"代码块主要名称\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"快捷键简写\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"这里是按快捷键插入的代码片段\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"这里放提示信息的描述\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例: 其中$0表示最终光标提留的位置。 举个例子，我这里创建了两个快捷方式，一个是输入pln就会在编辑器中插入fmt.Println()代码；输入plf，就会插入fmt.Printf(\"\")代码。</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"initcode\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"init\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"package main\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"import \\\"fmt\\\"\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"func main()&#123;\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"fmt.Println(<span class=\"variable\">$0</span>)\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"&#125;\"</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"快速插入一个简单的Go Main 示例代码块\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">\"println\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"pln\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body\"</span>:<span class=\"string\">\"fmt.Println(<span class=\"variable\">$0</span>)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Println,Line feed printing\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"string\">\"printf\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"ptf\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"fmt.Printf(\\\"<span class=\"variable\">$0</span>\\\")\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"printf,Normal printout\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"sprintf\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"sptf\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"body\"</span>: <span class=\"string\">\"fmt.Sprintf(\\\"<span class=\"variable\">$0</span>\\\")\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"将拼接的字符串返回给变接收量\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210729204731.png\" alt=\"WeiyiGeek.自动保存与代码片段快捷键\" title=\"\" class=\"\">\n                <p>WeiyiGeek.自动保存与代码片段快捷键</p>\n            </figure>\n</li>\n<li><p>Step 6.把上面的代码，按下图方式粘贴到配置文件中，保存并关闭配置文件即可。然后我们打开一个go文件，测试一下效果：</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://www.liwenzhou.com/images/Go/00_config_VSCode/vscode21.gif\" alt=\"WeiyiGeek.代码片段快捷键效果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.代码片段快捷键效果</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"Let-Go\"><a href=\"#Let-Go\" class=\"headerlink\" title=\"Let,Go\"></a>Let,Go</h3><p>描述: 此处是学习一门新语言的常规操作输出 Hello World , 现在我们来创建第一个Go项目 hello.go</p>\n<p><strong>初始化项目: go mod init</strong><br>描述: 使用go module模式新建项目时，我们需要通过<code>go mod init 项目名</code>命令对项目进行初始化，该命令会在项目根目录下生成go.mod文件。</p>\n<p>例如，我们使用hello作为我们第一个Go项目的名称，执行如下命令<code>go mod init hello</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># go.mod</span></span><br><span class=\"line\">module hello</span><br><span class=\"line\">go 1.16</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><p>描述: 接下来在该目录中创建一个helloWorld.go文件<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明 main 包表明当前是一个可执行程序</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入内置 fmt 包供内部函数使用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Main 函数程序入口主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 终端输出打印语句</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Hello World, Let's Go.\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    此处为多行注释</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"人生苦短现在，开启你的Go语言学习之旅吧。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Tips : 我们可以在<code>VScode</code>配置go项目的Debug调试模式便可以直接使用<code>快捷键F5</code>进行快速测试编写的程序。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730110147.png\" alt=\"WeiyiGeek.VScode调试Go程序\" title=\"\" class=\"\">\n                <p>WeiyiGeek.VScode调试Go程序</p>\n            </figure>\n<p>Tips : 我们知道作为编译型的语言Go与C语言一样需要编译然后再运行。</p>\n<p>Tips : Go 语言函数外的语句必须以关键字开头。</p>\n<p><br/></p>\n<p><strong>编译: go Build</strong><br>描述: <code>go build</code> 命令表示将源代码编译成可执行文件。</p>\n<p>在hello目录下执行<code>go build</code>(指定.go文件)或者在其他目录执行以下命令<code>go build helloworld</code>(项目需要在GOROOT路径的src目录之中),因为go编译器会去 GOPATH 的src目录下查找你要编译的hello项目<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 目录下执行</span></span><br><span class=\"line\">➜  Day01 <span class=\"built_in\">pwd</span></span><br><span class=\"line\">/home/weiyigeek/develop/github-project/Go/Day01</span><br><span class=\"line\">➜  Day01 go build</span><br><span class=\"line\">➜  Day01 ./Day01 </span><br><span class=\"line\">Hello World, Let Go.</span><br><span class=\"line\">人生苦短现在，开启你的Go语言学习之旅吧。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 指定main包所在的.go文件</span></span><br><span class=\"line\">➜  Day01 go build HelloWorld.go               </span><br><span class=\"line\">➜  Day01 ./HelloWorld </span><br><span class=\"line\">Hello World, Lets Go.</span><br><span class=\"line\">人生苦短现在，开启你的Go语言学习之旅吧。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 使用-o参数来指定编译后得到的可执行文件的名字</span></span><br><span class=\"line\">➜  Day01 go build -o ahelloworld.</span><br><span class=\"line\">➜  Day01 ./ahelloworld  </span><br><span class=\"line\">Hello World, Let<span class=\"string\">'s Go.</span></span><br><span class=\"line\"><span class=\"string\">人生苦短现在，开启你的Go语言学习之旅吧。</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 如上述编译得到的可执行文件会保存在执行编译命令的当前目录下会有 HelloWorld 可执行文件，如果是windows平台会在当前目录下找到HelloWorld.exe可执行文件。</p>\n<p><br></p>\n<p><strong>编译&amp;运行: go Run</strong><br>描述: 我们也可以直接执行程序，该命令本质上也是先编译再执行。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  Day01 <span class=\"keyword\">go</span> run HelloWorld.<span class=\"keyword\">go</span>          </span><br><span class=\"line\">Hello World, Let<span class=\"string\">'s Go.</span></span><br><span class=\"line\"><span class=\"string\">人生苦短现在，开启你的Go语言学习之旅吧。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>编译&amp;安装软件包&amp;依赖项: go Install</strong><br>描述: go install 表示安装的意思，它先编译源代码得到可执行文件，然后将可执行文件移动到GOPATH的bin目录下。因为我们的环境变量中配置了GOPATH下的bin目录，所以我们就可以在任意地方直接执行可执行文件了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  Day01 go install                <span class=\"comment\"># 生成 Day01 可执行文件</span></span><br><span class=\"line\">➜  Day01 go install HelloWorld.go  <span class=\"comment\"># 生成 HelloWorld 可执行文件</span></span><br><span class=\"line\">➜  Day01 ls <span class=\"variable\">$&#123;GOROOT&#125;</span>                                  </span><br><span class=\"line\">➜  Day01 ls <span class=\"variable\">$&#123;GOPATH&#125;</span>/bin/</span><br><span class=\"line\">  <span class=\"comment\"># Day01  dlv  dlv-dap  gomodifytags  go-outline  gopkgs  goplay  gopls  gotests  HelloWorld  impl  staticcheck</span></span><br><span class=\"line\">➜  Day01 /home/weiyigeek/app/program/project/go/bin/Day01</span><br><span class=\"line\">Hello World, Let<span class=\"string\">'s Go.</span></span><br><span class=\"line\"><span class=\"string\">人生苦短现在，开启你的Go语言学习之旅吧。</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>跨平台编译: CGO_ENABLED / GOOS / GOARCH</strong><br>描述: 默认我们go build的可执行文件都是当前操作系统可执行的文件，如果我想在windows下编译一个linux下可执行文件，那需要怎么做呢？</p>\n<p>只需要指定目标操作系统的平台和处理器架构即可，例如Windows平台cmd下按如下方式指定环境变量编译出的可以执行文件则可以在Linux 操作系统 amd64 处理器中执行,然后再执行go build命令，得到的就是能够在Linux平台运行的可执行文件了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET CGO_ENABLED=0  <span class=\"comment\"># 禁用CGO</span></span><br><span class=\"line\">SET GOOS=linux     <span class=\"comment\"># 目标平台是linux</span></span><br><span class=\"line\">SET GOARCH=amd64   <span class=\"comment\"># 目标处理器架构是amd64</span></span><br></pre></td></tr></table></figure><br>注意：如果你使用的是PowerShell终端，那么设置环境变量的语法为$ENV:CGO_ENABLED=0。</p>\n<p><br></p>\n<p>不同平台快速交叉编译:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 目标平台是linux</span></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</span><br><span class=\"line\"><span class=\"comment\"># 目标平台Windows</span></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br><span class=\"line\"><span class=\"comment\"># 目标平台Mac</span></span><br><span class=\"line\">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</span><br></pre></td></tr></table></figure></p>\n<p>简单实践: 在Liunx平台上编译出在<code>Windows</code>上运行的<code>helloWorld.exe</code>可执行文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux</span></span><br><span class=\"line\">➜  Day01 CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o Win-HelloWorld.exe</span><br><span class=\"line\">➜  Day01 ls                           </span><br><span class=\"line\">HelloWorld.go  Win-HelloWorld.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows: 拷贝后执行</span></span><br><span class=\"line\">PS D:\\Temp&gt; .\\Win-HelloWorld.exe</span><br><span class=\"line\">Hello World, Let<span class=\"string\">'s Go.</span></span><br><span class=\"line\"><span class=\"string\">人生苦短现在，开启你的Go语言学习之旅吧。</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 对比不同平台编译后的可执行文件大小。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  Day01 ls -la --ignore HelloWorld.go </span><br><span class=\"line\">-rwxrwxr-x 1 weiyigeek weiyigeek 1937799 7月  30 03:23 helloworld         <span class=\"comment\"># ~ 1.9 MB</span></span><br><span class=\"line\">-rwxrwxr-x 1 weiyigeek weiyigeek 2027936 7月  30 03:24 Mac-HelloWorld     <span class=\"comment\"># ~ 2.0 MB</span></span><br><span class=\"line\">-rwxrwxr-x 1 weiyigeek weiyigeek 2098688 7月  30 02:58 Win-HelloWorld.exe <span class=\"comment\"># ~ 2.1 MB</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"Http-Web-Server\"><a href=\"#Http-Web-Server\" class=\"headerlink\" title=\"Http Web Server\"></a>Http Web Server</h4><p>描述: 透过Go仅需几行代码就完成HTTP网页服务器的实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"io\"</span></span><br><span class=\"line\">  <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hello</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">  io.WriteString(w, <span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  http.HandleFunc(<span class=\"string\">\"/\"</span>, hello)</span><br><span class=\"line\">  http.ListenAndServe(<span class=\"string\">\":8000\"</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"Echo-类似命令程序\"><a href=\"#Echo-类似命令程序\" class=\"headerlink\" title=\"Echo 类似命令程序\"></a>Echo 类似命令程序</h4><p>描述: 用Go去实现一个像Unix中的Echo命令程序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> omitNewline = flag.Bool(<span class=\"string\">\"n\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"don't print final newline\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  Space   = <span class=\"string\">\" \"</span></span><br><span class=\"line\">  Newline = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  flag.Parse() <span class=\"comment\">// Scans the arg list and sets up flags</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> s <span class=\"keyword\">string</span> = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i = <span class=\"number\">0</span>; i &lt; flag.NArg(); i++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">          s += Space</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s += flag.Arg(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !*omitNewline &#123;</span><br><span class=\"line\">      s += Newline</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  os.Stdout.WriteString(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x02-Go-项目结构\"><a href=\"#0x02-Go-项目结构\" class=\"headerlink\" title=\"0x02 Go 项目结构\"></a>0x02 Go 项目结构</h2><p>在进行Go语言开发的时候，我们的代码总是会保存在<code>$GOPATH/src</code>目录下。在工程经过<code>go build、go install</code>或<code>go get</code>等指令后，会将下载的第三方包源代码文件放在 <code>$GOPATH/src</code> 目录下，产生的二进制可执行文件放在 <code>$GOPATH/bin</code>目录下，生成的中间缓存文件会被保存在 <code>$GOPATH/pkg</code> 下。</p>\n<p>Tips : 如果我们使用版本管理工具<code>（Version Control System，VCS。常用如Git/Svn）</code>来管理我们的项目代码时，我们只需要添加<code>$GOPATH/src</code>目录的源代码即可, bin 和 pkg 目录的内容无需版本控制。</p>\n<p><br/></p>\n<p>通常来讲<code>GOPATH</code>目标下文件目录组织架构的设置常常有以下三种:</p>\n<h3 id=\"1-适合个人开发者\"><a href=\"#1-适合个人开发者\" class=\"headerlink\" title=\"(1)适合个人开发者\"></a>(1)适合个人开发者</h3><p>描述: 我们知道源代码都是存放在GOPATH的src目录下，那我们可以按照下图来组织我们的代码。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114115.png\" alt=\"WeiyiGeek.适合个人开发者\" title=\"\" class=\"\">\n                <p>WeiyiGeek.适合个人开发者</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"2-适合企业开发场景\"><a href=\"#2-适合企业开发场景\" class=\"headerlink\" title=\"(2)适合企业开发场景\"></a>(2)适合企业开发场景</h3><p>描述: 此种目录结构设置更适合企业开发环境,以代码仓库为前缀并以公司内部组织架构为基准,其次是项目名称，最后是各个模块开发的名称。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114238.png\" alt=\"WeiyiGeek.适合企业开发场景\" title=\"\" class=\"\">\n                <p>WeiyiGeek.适合企业开发场景</p>\n            </figure></p>\n<p><br></p>\n<h3 id=\"3-目前流行的项目结构\"><a href=\"#3-目前流行的项目结构\" class=\"headerlink\" title=\"(3)目前流行的项目结构\"></a>(3)目前流行的项目结构</h3><p>描述: Go语言中也是通过包来组织代码文件，我们可以引用别人的包也可以发布自己的包，但是为了防止不同包的项目名冲突，我们通常使用顶级域名来作为包名的前缀，这样就不担心项目名冲突的问题了。</p>\n<p>因为不是每个个人开发者都拥有自己的顶级域名，所以目前流行的方式是使用个人的github用户名来区分不同的包。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210730114531.png\" alt=\"WeiyiGeek.目前流行的项目结构\" title=\"\" class=\"\">\n                <p>WeiyiGeek.目前流行的项目结构</p>\n            </figure>\n<ul>\n<li><p>举例说明: 张三和李四都有一个名叫studygo的项目，那么这两个包的路径就会是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import <span class=\"string\">\"github.com/zhangsan/studygo\"</span></span><br><span class=\"line\">import <span class=\"string\">\"github.com/lisi/studygo\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>举例说明: 同样如果我们需要从<code>githuab</code>上下载别人包的时候如：<code>go get github.com/jmoiron/sqlx</code>, 那么这个包会下载到我们本地GOPATH目录下的<code>src/github.com/jmoiron/sqlx</code>。</p>\n</li>\n</ul>\n<p>总结说明: 后续我们的开发学习示例基本按照第三种项目结构进行。</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}