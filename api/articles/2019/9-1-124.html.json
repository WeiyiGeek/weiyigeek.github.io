{"title":"2.Nginx进阶学习之最佳配置实践指南","slug":"系统运维/Application/Web/WebApp/Nginx/2.Nginx进阶学习之最佳配置实践指南","date":"2019-09-01T08:34:30.000Z","updated":"2023-03-15T09:34:15.898Z","url":"2019/9-1-124.html","path":"api/articles/2019/9-1-124.html.json","covers":["https://img.weiyigeek.top/2020/1/20200308181130.png","https://img.weiyigeek.top/2020/1/20200308180942.png","https://img.weiyigeek.top/2020/1/20200329121438.png","https://img.weiyigeek.top/2022/2/20220407170258.png"],"content":"<p><strong>本章目录</strong></p>\n<p>[TOC]</p>\n<a id=\"more\"></a>\n<p><strong>前置基础知识学习</strong></p>\n<ul>\n<li><p>1.Nginx基础介绍与安装配置实践指南 <a href=\"https://blog.weiyigeek.top/2019/9-1-121.html\">https://blog.weiyigeek.top/2019/9-1-121.html</a></p>\n</li>\n<li><p>2.Nginx进阶学习之最佳配置实践指南 <a href=\"https://blog.weiyigeek.top/2019/9-1-124.html\">https://blog.weiyigeek.top/2019/9-1-124.html</a></p>\n</li>\n<li><p>3.Nginx模块学习使用实践指南 <a href=\"https://blog.weiyigeek.top/2021/3-1-633.html\">https://blog.weiyigeek.top/2021/3-1-633.html</a></p>\n</li>\n<li><p>4.Nginx安全加固与性能调优最佳指南 <a href=\"https://blog.weiyigeek.top/2019/9-2-122.html\">https://blog.weiyigeek.top/2019/9-2-122.html</a></p>\n</li>\n<li><p>5.Nginx常遇问题入坑出坑整理 <a href=\"https://blog.weiyigeek.top/2020/9-2-622.html\">https://blog.weiyigeek.top/2020/9-2-622.html</a></p>\n</li>\n</ul>\n<h2 id=\"0x00-编译实践\"><a href=\"#0x00-编译实践\" class=\"headerlink\" title=\"0x00 编译实践\"></a>0x00 编译实践</h2><p>描述:在企业线上生产环境中推荐进行Nginx编译安装,可以按照业务侧重点进行相应 Nginx 编译参数配置，所以编译参数不是功能加的越多越好，应该尽可能少编译模块不用的最好不要加入，本小结将以最新的Nginx版本以及依赖版本进行编译演示。</p>\n<h3 id=\"Nginx-1-21-6-OpenSSL-1-1-1n\"><a href=\"#Nginx-1-21-6-OpenSSL-1-1-1n\" class=\"headerlink\" title=\"Nginx-1.21.6+OpenSSL-1.1.1n\"></a>Nginx-1.21.6+OpenSSL-1.1.1n</h3><p>最新源码构建安装整理，当前最新版本nginx-1.21.6，实践时间【2022年3月24日】<br>版本说明: pcre-8.45 、zlib-1.2.11、openssl-1.1.1n、nginx-1.21.6。</p>\n<p>官方安装参考地址: <a href=\"https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#downloading-the-sources\" target=\"_blank\" rel=\"noopener\">https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#downloading-the-sources</a></p>\n<p>步骤 01.在从源代码编译 NGINX Open Source 之前，您需要为其依赖项安装库：</p>\n<ul>\n<li><p>PCRE – 支持正则表达式，NGINX Core 和 Rewrite 模块需要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://pcre.org/</span></span><br><span class=\"line\"><span class=\"comment\"># https://sourceforge.net/projects/pcre/files/</span></span><br><span class=\"line\">wget -c https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.bz2</span><br><span class=\"line\">tar -jxf pcre-8.45.tar.bz2 &amp;&amp; <span class=\"built_in\">cd</span> pcre-8.45</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make  &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zlib – 支持标头压缩, NGINX Gzip 模块需要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http://www.zlib.net/</span></span><br><span class=\"line\">wget -c http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class=\"line\">tar -zxf zlib-1.2.11.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> zlib-1.2.11</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>OpenSSL – 支持 HTTPS 协议, NGINX SSL 模块和其他模块需要。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://www.openssl.org/source/</span></span><br><span class=\"line\">wget -c http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.1.1n.tar.gz</span><br><span class=\"line\">tar -zxf openssl-1.1.1n.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> openssl-1.1.1n</span><br><span class=\"line\">./config --prefix=/usr/<span class=\"built_in\">local</span>/openssl</span><br><span class=\"line\">make &amp;&amp; sudo make install</span><br><span class=\"line\"><span class=\"comment\"># lib 库加载到系统</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/usr/local/openssl/lib\"</span> &gt;&gt; /etc/ld.so.conf.d/libc.conf</span><br><span class=\"line\">ldconfig</span><br><span class=\"line\"><span class=\"comment\"># 可以看到当下系统的Openssl版本已经更新到最新</span></span><br><span class=\"line\"><span class=\"comment\"># root@weiyigeek-top:/usr/local/openssl/bin# openssl version</span></span><br><span class=\"line\"><span class=\"comment\"># OpenSSL 1.1.1n  15 Mar 2022</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>步骤 02.从 nginx.org 下载稳定版和主线版本的源代码文件，要下载并解压最新主线版本的源代码，请运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://nginx.org</span></span><br><span class=\"line\">sudo mkdir -vp /usr/<span class=\"built_in\">local</span>/nginx/module /usr/lib/nginx/modules /var/cache/nginx/&#123;client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp&#125; </span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.21.6.tar.gz</span><br><span class=\"line\">tar zxf nginx-1.21.6.tar.gz &amp;&amp; <span class=\"built_in\">cd</span> nginx-1.21.6</span><br><span class=\"line\">$ ./configure \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--with-pcre=../pcre-8.45 \\</span><br><span class=\"line\">--with-zlib=../zlib-1.2.11 \\</span><br><span class=\"line\">--with-openssl=../openssl-1.1.1n \\</span><br><span class=\"line\">--user=ubuntu --group=ubuntu \\</span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log \\</span><br><span class=\"line\">--lock-path=/var/run/nginx.lock \\</span><br><span class=\"line\">--modules-path=/usr/lib/nginx/modules \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\</span><br><span class=\"line\">--with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module \\</span><br><span class=\"line\">--with-threads --with-mail --with-mail_ssl_module \\</span><br><span class=\"line\">--with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module \\</span><br><span class=\"line\">--with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module \\</span><br><span class=\"line\">--with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module \\</span><br><span class=\"line\">--with-compat --with-file-aio \\</span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">'-Os -fomit-frame-pointer -g'</span> --with-ld-opt=-Wl,--as-needed,-O1,--sort-common</span><br><span class=\"line\"><span class=\"comment\"># &lt;!-- --add-dynamic-module=/usr/local/nginx/module --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips ：请注意 geoip_module 模块, 如果需要使用则需要提前安装好 GeoIP library，例如在Ubuntu系统上执行<code>apt-get install libgeoip-dev</code>如下命令。</p>\n<p>Tips : 请注意 通过yum或者apt安装的nginx，通常会将nginx的配置文件放在<code>/etc/nginx</code>，而手动编译构建的一般是在 /usr/local/nginx 目录中。</p>\n<p>步骤 03.执行<code>./configure</code>命令后的结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration summary</span><br><span class=\"line\">  + using threads</span><br><span class=\"line\">  + using PCRE library: ../pcre-8.45</span><br><span class=\"line\">  + using system OpenSSL library</span><br><span class=\"line\">  + using zlib library: ../zlib-1.2.11</span><br><span class=\"line\"></span><br><span class=\"line\">  nginx path prefix: <span class=\"string\">\"/usr/local/nginx\"</span></span><br><span class=\"line\">  nginx binary file: <span class=\"string\">\"/usr/sbin/nginx\"</span></span><br><span class=\"line\">  nginx modules path: <span class=\"string\">\"/usr/lib/nginx/modules\"</span></span><br><span class=\"line\">  nginx configuration prefix: <span class=\"string\">\"/usr/local/nginx\"</span></span><br><span class=\"line\">  nginx configuration file: <span class=\"string\">\"/usr/local/nginx/nginx.conf\"</span></span><br><span class=\"line\">  nginx pid file: <span class=\"string\">\"/usr/local/nginx/nginx.pid\"</span></span><br><span class=\"line\">  nginx error <span class=\"built_in\">log</span> file: <span class=\"string\">\"/var/log/nginx/error.log\"</span></span><br><span class=\"line\">  nginx http access <span class=\"built_in\">log</span> file: <span class=\"string\">\"/var/log/nginx/access.log\"</span></span><br><span class=\"line\">  nginx http client request body temporary files: <span class=\"string\">\"/var/cache/nginx/client_temp\"</span></span><br><span class=\"line\">  nginx http proxy temporary files: <span class=\"string\">\"/var/cache/nginx/proxy_temp\"</span></span><br><span class=\"line\">  nginx http fastcgi temporary files: <span class=\"string\">\"/var/cache/nginx/fastcgi_temp\"</span></span><br><span class=\"line\">  nginx http uwsgi temporary files: <span class=\"string\">\"/var/cache/nginx/uwsgi_temp\"</span></span><br><span class=\"line\">  nginx http scgi temporary files: <span class=\"string\">\"/var/cache/nginx/scgi_temp\"</span></span><br></pre></td></tr></table></figure></p>\n<p>步骤 04.执行构建安装后查看nginx版本以及构建参数等信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -V</span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">built by gcc 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04)</span><br><span class=\"line\">built with OpenSSL 1.1.1n  15 Mar 2022</span><br><span class=\"line\">TLS SNI support enabled</span><br><span class=\"line\">  configure arguments: --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-pcre=../pcre-8.45 --with-zlib=../zlib-1.2.11 --user=ubuntu --group=ubuntu --sbin-path=/usr/sbin/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --lock-path=/var/run/nginx.lock --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module --with-threads --with-mail --with-mail_ssl_module --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-compat --with-file-aio --with-cc-opt=<span class=\"string\">'-Os -fomit-frame-pointer -g'</span> --with-ld-opt=-Wl,--as-needed,-O1,--sort-common</span><br></pre></td></tr></table></figure></p>\n<p>步骤 05.执行<code>/usr/sbin/nginx</code>命令, 启用nginx服务并查看提供的服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看Nginx并发进程数</span></span><br><span class=\"line\">$ ps -ef | grep nginx | grep -v <span class=\"string\">\"grep\"</span> | wc -l</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Nginx编译-configure-参数一览\"><a href=\"#Nginx编译-configure-参数一览\" class=\"headerlink\" title=\"Nginx编译(configure) 参数一览\"></a>Nginx编译(configure) 参数一览</h3><p>描述: 我们可以执行<code>./configure --help</code>便可以查看编译相关参数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 常用选项 #</span></span><br><span class=\"line\">--prefix= <span class=\"comment\">#指向安装目录</span></span><br><span class=\"line\">--user= <span class=\"comment\">#指定程序运行时的非特权用户</span></span><br><span class=\"line\">--group= <span class=\"comment\">#指定程序运行时的非特权用户组</span></span><br><span class=\"line\">--with-perl= <span class=\"comment\">#设定perl库文件路径启用pcre库</span></span><br><span class=\"line\">--with-perl_modules_path= <span class=\"comment\">#设定perl模块路径</span></span><br><span class=\"line\">--with-pcre-opt= 在编译时为pcre库设置附加参数</span><br><span class=\"line\"></span><br><span class=\"line\">--with-zlib= <span class=\"comment\">#指向zlib库目录</span></span><br><span class=\"line\">--with-zlib-opt= <span class=\"comment\">#在编译时为zlib设置附加参数</span></span><br><span class=\"line\">--with-zlib-asm= <span class=\"comment\">#为指定的CPU使用zlib汇编源进行优化，CPU类型为pentium, pentiumpro</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-openssl= <span class=\"comment\">#指向openssl安装目录</span></span><br><span class=\"line\">--with-openssl-opt <span class=\"comment\">#在编译时为openssl设置附加参数</span></span><br><span class=\"line\">--with-http_ssl_module <span class=\"comment\">#启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-cc-opt= <span class=\"comment\">#设置C编译器参数将被添加到CFLAGS变量（PCRE库，需要指定–with-cc-opt=”-I /usr/local/include”，如果使用select()函数则需要同时增加文件描述符数量，可以通过–with-cc- opt=”-D FD_SETSIZE=2048”指定。）</span></span><br><span class=\"line\">--with-ld-opt= <span class=\"comment\">#设置连接文件参数链接系统库。（PCRE库，需要指定–with-ld-opt=”-L /usr/local/lib”。）</span></span><br><span class=\"line\">--with-cpu-opt= <span class=\"comment\">#指定编译的CPU，可用的值为: pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下面按需配置</span></span><br><span class=\"line\">--conf-path= <span class=\"comment\">#指向配置文件（nginx.conf）</span></span><br><span class=\"line\">--error-log-path= <span class=\"comment\">#指向错误日志目录</span></span><br><span class=\"line\">--pid-path= <span class=\"comment\">#指向pid文件（nginx.pid）</span></span><br><span class=\"line\">--sbin-path= <span class=\"comment\">#指向（执行）程序文件（nginx）</span></span><br><span class=\"line\">--lock-path= <span class=\"comment\">#指向lock文件（nginx.lock）（安装文件锁定，防止安装文件被别人利用，或自己误操作。）</span></span><br><span class=\"line\">--builddir= <span class=\"comment\">#指向编译目录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#模块添加</span></span><br><span class=\"line\">--with-rtsig_module <span class=\"comment\">#启用rtsig模块支持（实时信号）</span></span><br><span class=\"line\">--with-select_module <span class=\"comment\">#启用select模块支持（一种轮询模式,不推荐在高载环境下使用）禁用：–without-select_module</span></span><br><span class=\"line\">--with-poll_module <span class=\"comment\">#启用poll模块支持（功能与select相同，与select特性相同，为一种轮询模式,不推荐在高载环境下使用）</span></span><br><span class=\"line\">--with-file-aio <span class=\"comment\">#启用file aio支持（一种APL文件传输格式）</span></span><br><span class=\"line\">--with-ipv6 <span class=\"comment\">#启用ipv6支持</span></span><br><span class=\"line\">--with-http_realip_module <span class=\"comment\">#启用ngx_http_realip_module支持（这个模块允许从请求标头更改客户端的IP地址值，默认为关）</span></span><br><span class=\"line\">--with-http_addition_module <span class=\"comment\">#启用ngx_http_addition_module支持（作为一个输出过滤器，支持不完全缓冲，分部分响应请求）</span></span><br><span class=\"line\">--with-http_xslt_module <span class=\"comment\">#启用ngx_http_xslt_module支持（过滤转换XML请求）</span></span><br><span class=\"line\">--with-http_image_filter_module <span class=\"comment\">#启用ngx_http_image_filter_module支持（传输JPEG/GIF/PNG 图片的一个过滤器）（默认为不启用、gd库要用到）</span></span><br><span class=\"line\">--with-http_geoip_module <span class=\"comment\">#启用ngx_http_geoip_module支持（该模块创建基于与MaxMind GeoIP二进制文件相配的客户端IP地址的ngx_http_geoip_module变量）</span></span><br><span class=\"line\">--with-http_sub_module <span class=\"comment\">#启用ngx_http_sub_module支持（允许用一些其他文本替换nginx响应中的一些文本）</span></span><br><span class=\"line\">--with-http_dav_module <span class=\"comment\">#启用ngx_http_dav_module支持（增加PUT,DELETE,MKCOL：创建集合,COPY和MOVE方法）默认情况下为关闭，需编译开启</span></span><br><span class=\"line\">--with-http_flv_module <span class=\"comment\">#启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）</span></span><br><span class=\"line\">--with-http_gzip_static_module <span class=\"comment\">#启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）</span></span><br><span class=\"line\">--with-http_random_index_module <span class=\"comment\">#启用ngx_http_random_index_module支持（从目录中随机挑选一个目录索引）</span></span><br><span class=\"line\">--with-http_secure_link_module <span class=\"comment\">#启用ngx_http_secure_link_module支持（计算和检查要求所需的安全链接网址）</span></span><br><span class=\"line\">--with-http_degradation_module  <span class=\"comment\">#启用ngx_http_degradation_module支持（允许在内存不足的情况下返回204或444码）</span></span><br><span class=\"line\">--with-http_stub_status_module   <span class=\"comment\">#启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_charset_module <span class=\"comment\">#禁用ngx_http_charset_module支持（重新编码web页面，但只能是一个方向–服务器端到客户端，并且只有一个字节的编码可以被重新编码）</span></span><br><span class=\"line\">--without-http_gzip_module <span class=\"comment\">#禁用ngx_http_gzip_module支持（该模块同-with-http_gzip_static_module功能一样）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_ssi_module <span class=\"comment\">#禁用ngx_http_ssi_module支持（该模块提供了一个在输入端处理处理服务器包含文件（SSI）的过滤器，目前支持SSI命令的列表是不完整的）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_userid_module <span class=\"comment\">#禁用ngx_http_userid_module支持（该模块用来处理用来确定客户端后续请求的cookies）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_access_module <span class=\"comment\">#禁用ngx_http_access_module支持（该模块提供了一个简单的基于主机的访问控制。允许/拒绝基于ip地址）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_auth_basic_module <span class=\"comment\">#禁用ngx_http_auth_basic_module（该模块是可以使用用户名和密码基于http基本认证方法来保护你的站点或其部分内容）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_autoindex_module <span class=\"comment\">#禁用disable ngx_http_autoindex_module支持（该模块用于自动生成目录列表，只在ngx_http_index_module模块未找到索引文件时发出请求。）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_geo_module <span class=\"comment\">#禁用ngx_http_geo_module支持（创建一些变量，其值依赖于客户端的IP地址）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_map_module <span class=\"comment\">#禁用ngx_http_map_module支持（使用任意的键/值对设置配置变量）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_split_clients_module <span class=\"comment\">#禁用ngx_http_split_clients_module支持（该模块用来基于某些条件划分用户。条件如：ip地址、报头、cookies等等）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_referer_module <span class=\"comment\">#禁用disable ngx_http_referer_module支持（该模块用来过滤请求，拒绝报头中Referer值不正确的请求）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_rewrite_module <span class=\"comment\">#禁用ngx_http_rewrite_module支持（该模块允许使用正则表达式改变URI，并且根据变量来转向以及选择配置。如果在server级 别设置该选项，那么他们将在 location之前生效。如果在location还有更进一步的重写规则，location部分的规则依然会被执行。如果这个URI重写是因为 location部分的规则造成的，那么 location部分会再次被执行作为新的URI。 这个循环会执行10次，然后Nginx会返回一个500错误。）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_proxy_module <span class=\"comment\">#禁用ngx_http_proxy_module支持（有关代理服务器）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_fastcgi_module <span class=\"comment\">#禁用ngx_http_fastcgi_module支持（该模块允许Nginx 与FastCGI 进程交互，并通过传递参数来控制FastCGI 进程工作。 ）FastCGI一个常驻型的公共网关接口。</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_uwsgi_module <span class=\"comment\">#禁用ngx_http_uwsgi_module支持（该模块用来医用uwsgi协议，uWSGI服务器相关）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_scgi_module <span class=\"comment\">#禁用ngx_http_scgi_module支持（该模块用来启用SCGI协议支持，SCGI协议是CGI协议的替代。它是一种应用程序与HTTP服务接口标准。它有些像FastCGI但他的设计 更容易实现。）</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-http_memcached_module <span class=\"comment\">#禁用ngx_http_memcached_module支持（该模块用来提供简单的缓存，以提高系统效率）</span></span><br><span class=\"line\">-without-http_limit_zone_module <span class=\"comment\">#禁用ngx_http_limit_zone_module支持（该模块可以针对条件，进行会话的并发连接数控制）</span></span><br><span class=\"line\">--without-http_limit_req_module <span class=\"comment\">#禁用ngx_http_limit_req_module支持（该模块允许你对于一个地址进行请求数量的限制用一个给定的session或一个特定的事件）</span></span><br><span class=\"line\">--without-http_empty_gif_module <span class=\"comment\">#禁用ngx_http_empty_gif_module支持（该模块在内存中常驻了一个1*1的透明GIF图像，可以被非常快速的调用）</span></span><br><span class=\"line\">--without-http_browser_module <span class=\"comment\">#禁用ngx_http_browser_module支持（该模块用来创建依赖于请求报头的值。如果浏览器为modern ，则$modern_browser等于modern_browser_value指令分配的值；如 果浏览器为old，则$ancient_browser等于 ancient_browser_value指令分配的值；如果浏览器为 MSIE中的任意版本，则 $msie等于1）</span></span><br><span class=\"line\">--without-http_upstream_ip_hash_module <span class=\"comment\">#禁用ngx_http_upstream_ip_hash_module支持（该模块用于简单的负载均衡）</span></span><br><span class=\"line\">--with-http_perl_module <span class=\"comment\">#启用ngx_http_perl_module支持（该模块使nginx可以直接使用perl或通过ssi调用perl）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">--http-log-path=           <span class=\"comment\"># 设定access log路径</span></span><br><span class=\"line\">--http-client-body-temp-path= <span class=\"comment\"># 设定http客户端请求临时文件路径</span></span><br><span class=\"line\">--http-proxy-temp-path=    <span class=\"comment\"># 设定http代理临时文件路径</span></span><br><span class=\"line\">--http-fastcgi-temp-path=  <span class=\"comment\"># 设定http fastcgi临时文件路径</span></span><br><span class=\"line\">--http-uwsgi-temp-path=    <span class=\"comment\"># 设定http uwsgi临时文件路径</span></span><br><span class=\"line\">--http-scgi-temp-path=    <span class=\"comment\"># 设定http scgi临时文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">-without-http <span class=\"comment\"># 禁用http server功能</span></span><br><span class=\"line\">--without-http-cache <span class=\"comment\"># 禁用http cache功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-mail <span class=\"comment\">#启用POP3/IMAP4/SMTP代理模块支持</span></span><br><span class=\"line\">--with-mail_ssl_module 启用ngx_mail_ssl_module支持</span><br><span class=\"line\">--without-mail_pop3_module <span class=\"comment\">#禁用pop3协议（POP3即邮局协议的第3个版本,它是规定个人计算机如何连接到互联网上的邮件服务器进行收发邮件的协议。是因特网电子邮件的第一个离 线协议标 准,POP3协议允许用户从服务器上把邮件存储到本地主机上,同时根据客户端的操作删除或保存在邮件服务器上的邮件。POP3协议是TCP/IP协议族中 的一员，主要用于 支持使用客户端远程管理在服务器上的电子邮件）</span></span><br><span class=\"line\">--without-mail_imap_module <span class=\"comment\">#禁用imap协议（一种邮件获取协议。它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。IMAP协议运行在 TCP/IP协议之上， 使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。）</span></span><br><span class=\"line\">--without-mail_smtp_module <span class=\"comment\">#禁用smtp协议（SMTP即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP协议属于 TCP/IP协议族，它帮助每台计算机在发送或中转信件时找到下一个目的地。）</span></span><br><span class=\"line\">--with-google_perftools_module <span class=\"comment\">#启用ngx_google_perftools_module支持（调试用，剖析程序性能瓶颈）</span></span><br><span class=\"line\">--with-cpp_test_module <span class=\"comment\">#启用ngx_cpp_test_module支持</span></span><br><span class=\"line\"></span><br><span class=\"line\">--add-module= <span class=\"comment\">#启用外部模块支持</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-cc=  <span class=\"comment\"># 指向C编译器路径</span></span><br><span class=\"line\">--with-cpp= <span class=\"comment\"># 指向C预处理路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">--without-pcre <span class=\"comment\">#禁用pcre库</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-md5=     <span class=\"comment\"># 指向md5库文件目录（消息摘要算法第五版，用以提供消息的完整性保护）</span></span><br><span class=\"line\">--with-md5-opt= <span class=\"comment\"># 在编译时为md5库设置附加参数</span></span><br><span class=\"line\">--with-md5-asm  <span class=\"comment\"># 使用md5汇编源</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-sha1=     <span class=\"comment\"># 指向sha1库目录（数字签名算法，主要用于数字签名）</span></span><br><span class=\"line\">--with-sha1-opt= <span class=\"comment\"># 在编译时为sha1库设置附加参数</span></span><br><span class=\"line\">--with-sha1-asm  <span class=\"comment\"># 使用sha1汇编源</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-libatomic  <span class=\"comment\"># 为原子内存的更新操作的实现提供一个架构</span></span><br><span class=\"line\">--with-libatomic= <span class=\"comment\"># 指向libatomic_ops安装目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">--with-debug <span class=\"comment\"># 启用debug日志, \"调试日志\"默认是禁用的，因为它会引入比较大的运行时开销让 Nginx 服务器显著变慢。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Shell脚本一键部署虚拟主机(附上关键性脚本):<br>完整代码：<a href=\"https://github.com/weiyigeek/SecOpsDev/Application/Web/Nginx/nginxVirtualHost-v1.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/weiyigeek/SecOpsDev/Application/Web/Nginx/nginxVirtualHost-v1.sh</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#@Desc:Nginx多实例部署虚拟主机</span></span><br><span class=\"line\"><span class=\"comment\">#@Author:WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\">#@CreatTime:2020年3月8日 12点06分</span></span><br><span class=\"line\"><span class=\"comment\">#@Site:WeiyiGeek.top</span></span><br><span class=\"line\"><span class=\"comment\">#@Test_Linux: Linux weiyigeek 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class=\"line\"><span class=\"comment\">#@release:CentOS Linux release 7.4.1708 (Core)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Define nginx variable</span></span><br><span class=\"line\">NGX_VER=1.16.1</span><br><span class=\"line\">NGX_URI=<span class=\"string\">\"http://nginx.org/download/nginx-<span class=\"variable\">$&#123;NGX_VER&#125;</span>.tar.gz\"</span></span><br><span class=\"line\">NGX_SRC=<span class=\"string\">\"nginx-<span class=\"variable\">$&#123;NGX_VER&#125;</span>.tar.gz\"</span></span><br><span class=\"line\">NGX_NAME=<span class=\"variable\">$&#123;NGX_SRC%.tar.gz&#125;</span></span><br><span class=\"line\">NGX_DIR=<span class=\"string\">\"/usr/local/nginx/<span class=\"variable\">$&#123;NGX_VER&#125;</span>\"</span></span><br><span class=\"line\">NGX_ARGS=<span class=\"string\">\"--prefix=<span class=\"variable\">$&#123;NGX_DIR&#125;</span> --user=nginx --group=nginx --with-http_stub_status_module\"</span></span><br><span class=\"line\">NGX_SRCCODE=<span class=\"string\">\"<span class=\"variable\">$&#123;NGX_NAME&#125;</span>/src/core/nginx.h\"</span></span><br><span class=\"line\">NGX_VHDIR=<span class=\"string\">\"<span class=\"variable\">$&#123;NGX_DIR&#125;</span>/conf/domains\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Define 防火墙开放端口</span></span><br><span class=\"line\">FIREWALL_PORT=(80 8080)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## [Nginx INSTALL]</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">nginx_install</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m1.核查安装依赖....... \\e[0m\"</span></span><br><span class=\"line\">    CHECK_SOFT=$(rpm -qa | grep -cE <span class=\"string\">\"^gcc|^pcre|^zlib\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$CHECK_SOFT</span> -lt 2 ];<span class=\"keyword\">then</span> yum install -y gcc gcc-c++ pcre pcre-devel zlib-devel;<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m2.检查nginx源码包是否存在....... \\e[0m\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f <span class=\"variable\">$NGX_SRC</span> ];<span class=\"keyword\">then</span> wget -c <span class=\"variable\">$NGX_URI</span>;<span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$NGX_NAME</span> ];<span class=\"keyword\">then</span> tar -zxf <span class=\"variable\">$NGX_SRC</span>;<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m3.nginx安装陆军是否存在....... \\e[0m\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f <span class=\"variable\">$NGX_DIR</span>/sbin/nginx ];<span class=\"keyword\">then</span> mkdir -vp <span class=\"variable\">$NGX_DIR</span>;<span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m3.验证nginx用户是否存在不存在则建立低权限用户....... \\e[0m\"</span></span><br><span class=\"line\">    CHECK_USER=$(getent passwd | grep -wc nginx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$CHECK_USER</span> -eq 0 ];<span class=\"keyword\">then</span> useradd -s /sbin/nologin nginx -M; <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"安全设置:Nginx版本隐藏......\"</span></span><br><span class=\"line\">    sed -i <span class=\"string\">\"s/<span class=\"variable\">$NGX_VER</span>//g\"</span> <span class=\"variable\">$NGX_SRCCODE</span></span><br><span class=\"line\">    sed -i <span class=\"string\">'s/nginx\\//JWS/g'</span> <span class=\"variable\">$NGX_SRCCODE</span></span><br><span class=\"line\">    sed -i <span class=\"string\">'s/\"NGINX\"/\"JWS\"/g'</span> <span class=\"variable\">$NGX_SRCCODE</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m4.进行nginx预编译及其编译安装....... \\e[0m\"</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"variable\">$NGX_NAME</span> &amp;&amp; ./configure <span class=\"variable\">$NGX_ARGS</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -eq 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#进行2个线程并行编译(可以根据你处理器个数选择)</span></span><br><span class=\"line\">        make -j2 &amp;&amp; make -j2 install</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[31m#Error: 预编译失败!终止安装,请检查软件依赖! \\e[0m\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[31m#Error: 编译安装失败!终止安装 \\e[0m\"</span>;<span class=\"built_in\">exit</span>;<span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m Nginx 成功安装....... \\n安装目录:<span class=\"variable\">$&#123;NGX_DIR&#125;</span> \\n 正在启动Nginx....\\e[0m\"</span></span><br><span class=\"line\">    <span class=\"variable\">$NGX_DIR</span>/sbin/nginx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## [Nginx CONFIG]</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">nginx_vhost</span></span>()&#123;</span><br><span class=\"line\">    NGX_VHOSTS=<span class=\"variable\">$1</span></span><br><span class=\"line\">    firewall_config</span><br><span class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;NGX_DIR&#125;</span></span><br><span class=\"line\">    NGX_CNF=<span class=\"string\">\"<span class=\"variable\">$&#123;NGX_DIR&#125;</span>/conf/nginx.conf\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ ! -f <span class=\"variable\">$NGX_CONF</span> ];<span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Nginx-配置文件不存在请仔细检查!\"</span>;<span class=\"built_in\">exit</span>;<span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"comment\">#判断是否已经存在domains配置文件是则不同重新建立;</span></span><br><span class=\"line\">    grep <span class=\"string\">\"domains\"</span> <span class=\"variable\">$&#123;NGX_CNF&#125;</span> &gt;&gt;/dev/null 2&gt;&amp;1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#备份NGX配置文件</span></span><br><span class=\"line\">        cp <span class=\"variable\">$&#123;NGX_CNF&#125;</span>&#123;,_$(date +%F_%H%M%S).bak&#125;</span><br><span class=\"line\">    \tmkdir -vp <span class=\"variable\">$&#123;NGX_VHDIR&#125;</span></span><br><span class=\"line\">        sed -i <span class=\"string\">\"s/#user  nobody/user  nginx/g\"</span> <span class=\"variable\">$&#123;NGX_CNF&#125;</span></span><br><span class=\"line\">        sed -i <span class=\"string\">\"s/#gzip/gzip/g\"</span> <span class=\"variable\">$&#123;NGX_CNF&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#去除空行以及注释</span></span><br><span class=\"line\">      grep -vE <span class=\"string\">\"#|^$\"</span> <span class=\"variable\">$&#123;NGX_CNF&#125;</span> &gt; <span class=\"variable\">$&#123;NGX_CNF&#125;</span>.swp</span><br><span class=\"line\">        <span class=\"comment\">#重点删除server字符到文件末尾</span></span><br><span class=\"line\">      sed -i <span class=\"string\">'/server/,$d'</span> <span class=\"variable\">$&#123;NGX_CNF&#125;</span>.swp</span><br><span class=\"line\">        cp <span class=\"variable\">$&#123;NGX_CNF&#125;</span>.swp <span class=\"variable\">$&#123;NGX_CNF&#125;</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> -e <span class=\"string\">\"    include domains/*;\\n&#125;\"</span> &gt;&gt; <span class=\"variable\">$&#123;NGX_CNF&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    </span><br><span class=\"line\">cat&gt;<span class=\"variable\">$&#123;NGX_VHDIR&#125;</span>/<span class=\"variable\">$NGX_VHOSTS</span>.conf&lt;&lt;EOF</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  <span class=\"variable\">$NGX_VHOSTS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html/<span class=\"variable\">$NGX_VHOSTS</span>;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#Nginx 监控模块启用</span></span><br><span class=\"line\">    location /nginxStatus &#123;</span><br><span class=\"line\">        stub_status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m<span class=\"variable\">$NGX_VHOSTS</span> 网站目录建立之中.....\\e[0m\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$NGX_DIR</span>/html/<span class=\"variable\">$NGX_VHOSTS</span>/ ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    mkdir -vp <span class=\"variable\">$NGX_DIR</span>/html/<span class=\"variable\">$NGX_VHOSTS</span>/</span><br><span class=\"line\">cat&gt;<span class=\"variable\">$NGX_DIR</span>/html/<span class=\"variable\">$NGX_VHOSTS</span>/index.html&lt;&lt;EOF</span><br><span class=\"line\">&lt;h1&gt;<span class=\"variable\">$NGX_VHOSTS</span> Test Pages. &lt;/h1&gt;</span><br><span class=\"line\">&lt;p&gt;By WeiyiGeek.top &lt;/p&gt;</span><br><span class=\"line\">&lt;hr color=red&gt;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32mNginx配置文件验证中.....\\e[0m\"</span></span><br><span class=\"line\">    <span class=\"variable\">$NGX_DIR</span>/sbin/nginx -t</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[31mNginx配置文件有误，请处理错误后重启Nginx服务器：\\n <span class=\"variable\">$&#123;NGX_DIR&#125;</span>/sbin/nginx -s reload\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    cat <span class=\"variable\">$&#123;NGX_VHDIR&#125;</span>/<span class=\"variable\">$NGX_VHOSTS</span>.conf</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32mNginx重启之中.....\\e[0m\"</span></span><br><span class=\"line\">    <span class=\"variable\">$NGX_DIR</span>/sbin/nginx -s reload</span><br><span class=\"line\">    CHECK_STATUS=$(netstat -tlnp | grep -wc <span class=\"string\">\"nginx\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$CHECK_STATUS</span> -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[32m#Nginx 启动成功.... \\e[0m\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\e[31m#Nginx 启动失败.... \\e[0m\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>运行效果:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200308181130.png\" alt=\"WeiyiGeek.运行效果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.运行效果</p>\n            </figure></p>\n<p>测试效果:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200308180942.png\" alt=\"WeiyiGeek.测试效果\" title=\"\" class=\"\">\n                <p>WeiyiGeek.测试效果</p>\n            </figure></p>\n<hr>\n<h2 id=\"0x01-Nginx-配置最佳实践\"><a href=\"#0x01-Nginx-配置最佳实践\" class=\"headerlink\" title=\"0x01 Nginx 配置最佳实践\"></a>0x01 Nginx 配置最佳实践</h2><h3 id=\"Nginx-之-多配置文件配置\"><a href=\"#Nginx-之-多配置文件配置\" class=\"headerlink\" title=\"Nginx 之 多配置文件配置\"></a>Nginx 之 多配置文件配置</h3><p>描述: Nginx配置文件中支持包含多个配置文件，比如下面的虚拟主机的配置将使用，在程序加载运行时候首先会读取nginx.conf 的配置文件，然后再读取 <code>/etc/nginx/conf.d/</code>下面的配置文件;</p>\n<p>例如，我们需要在<code>/etc/nginx/nginx.conf</code>文件中,进行如下设置<code>include /etc/nginx/conf.d/*.conf;</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">  include conf.d/*.conf;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200329121438.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br/></p>\n<h3 id=\"Nginx-之-Server-侦听端口主机头配置浅析\"><a href=\"#Nginx-之-Server-侦听端口主机头配置浅析\" class=\"headerlink\" title=\"Nginx 之 Server 侦听端口主机头配置浅析\"></a>Nginx 之 Server 侦听端口主机头配置浅析</h3><p>描述:常规网站编译安装后运行只是单个网站访问，我们如何可以做到多网站同时运行到该Nginx服务器上,那我们便可使用Nginx提供的虚拟机主机方式, 使得一个服务端口可以访问不同的服务应用;</p>\n<p>常规有三种方式:</p>\n<ul>\n<li>1) 多端口</li>\n<li>2) 多IP</li>\n<li>3) 多域名:虚拟主机（VirtualHost）</li>\n</ul>\n<p><strong>环境准备:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/hosts&lt;&lt;END</span><br><span class=\"line\">127.0.0.1 v1.weiyigeek.top v2.weiyigeek.top</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p><strong>流程步骤:</strong></p>\n<ul>\n<li><p>1.修改移除Nginx.conf配置文件中的<code>Server {...}</code>包含的参数添加<code>include domains/*;</code>;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include       mime.types;</span><br><span class=\"line\">  default_type  application&#x2F;octet-stream;</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  keepalive_timeout  65;</span><br><span class=\"line\">  gzip  on;</span><br><span class=\"line\">  include domains&#x2F;*;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.在Nginx的Conf目录中建立一个domains目录(注意这里不要建立到上级目录之中，否则会出现nginx master进程已经启动但是无监听端口),进入该目录中建立虚拟主机v1.weiyigeek.top.conf文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen       80;</span><br><span class=\"line\">  server_name  v1.weiyigeek.top;  #关键点</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">    #关键点</span><br><span class=\"line\">    root   html&#x2F;v1.weiyigeek.top;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  #Nginx 监控模块启用</span><br><span class=\"line\">  location &#x2F;nginxStatus &#123;</span><br><span class=\"line\">      stub_status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class=\"line\">  location &#x3D; &#x2F;50x.html &#123;</span><br><span class=\"line\">      root   html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.在nginx安装目录中的html中建立一个与虚拟主机同名的文件夹(当然名字您可以任意取，但是必须和v1.weiyigeek.top.conf中指定路与的root一致)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@WeiyiGeek html]<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx/1.16.1/html</span><br><span class=\"line\">[root@WeiyiGeek html]<span class=\"comment\"># ls</span></span><br><span class=\"line\">50x.html  index.html  v1.weiyigeek.top  v2.weiyigeek.top</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<p><strong>配置示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 使用标准 HTTP 协议</span></span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  <span class=\"comment\"># 使用标准 HTTPS 协议</span></span><br><span class=\"line\">  listen 443 ssl;</span><br><span class=\"line\">  <span class=\"comment\"># 使用 http2 协议</span></span><br><span class=\"line\">  listen 443 ssl http2;</span><br><span class=\"line\">  <span class=\"comment\"># 使用IPV6地址监听80端口</span></span><br><span class=\"line\">  listen [::]:80;</span><br><span class=\"line\">  <span class=\"comment\"># 只使用IPV6地址监听80端口</span></span><br><span class=\"line\">  listen [::]:80 ipv6only=on;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 匹配指定域名访问</span></span><br><span class=\"line\">  server_name weiyigeek.top;</span><br><span class=\"line\">  <span class=\"comment\"># 匹配多域名访问</span></span><br><span class=\"line\">  server_name weiyigeek.top www.weiyigeek.top;</span><br><span class=\"line\">  <span class=\"comment\"># 匹配weiyigeek.top下所有子域名</span></span><br><span class=\"line\">  server_name *.weiyigeek.top;</span><br><span class=\"line\">  <span class=\"comment\"># 匹配所有的包含weiyigeek.top的顶级域名</span></span><br><span class=\"line\">  server_name weiyigeek.top.*;</span><br><span class=\"line\">  <span class=\"comment\"># 仅匹配IP地址访问</span></span><br><span class=\"line\">  server_name <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  server_name _;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 当网站设置支持http2以后可以从请求响应头中看到如下字段 <code>X-Firefox-Spdy:h2</code><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/2/20220407170258.png\" alt=\"WeiyiGeek.nginx-http/2\" title=\"\" class=\"\">\n                <p>WeiyiGeek.nginx-http/2</p>\n            </figure></p>\n<p><br/></p>\n<h3 id=\"Nginx-之-Location-规则配置浅析\"><a href=\"#Nginx-之-Location-规则配置浅析\" class=\"headerlink\" title=\"Nginx 之 Location 规则配置浅析\"></a>Nginx 之 Location 规则配置浅析</h3><p>描述: Location 语法规则：<code>location [=|~|~*|^~] /uri/ { … }</code></p>\n<ul>\n<li><code>=</code>: 表示精确匹配.</li>\n<li><code>/</code>: 表示通用匹配, 即任何请求都会匹配到。</li>\n<li><code>~</code>: 表示区分大小写的正则匹配.</li>\n<li><code>~*</code>: 表示不区分大小写的正则匹配.</li>\n<li><code>!~</code>,<code>!~*</code> : 分别标识为区分大小写不匹配及不区分大小写不匹配的正则</li>\n<li><code>^~</code>: 表示URL以某个常规字符串开头,可以理解为匹配url路径即可,值得注意的是Nginx不对URL做编码,例如会将请求为/static/20%/aa被<code>^~ /static/ /aa</code>规则匹配到。</li>\n</ul>\n<p>默认情况下 location 的匹配顺序为<code>精确匹配</code>(=) -&gt; <code>开头匹配</code>(^~) -&gt; <code>文件顺序中的正则匹配</code>(~*) -&gt; <code>通用匹配</code>(/), 当有匹配成功的URL则停止匹配。</p>\n<p>例如，有如下匹配规则:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location = / &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则A.精确匹配 / URL 下的操作。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location = /login &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则B.精确匹配 /login URL 下的操作。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ^~ /static/ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则C.正则匹配 /static/ URL 下的操作。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~ \\.(gif|jpg|png|svg|js|css)$ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则D，注意：是根据括号内的大小写进行匹配，括号内全是小写只匹配小写。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* \\.(gif|jpg|png|svg|js|css)$ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则D，注意：忽略大写来匹配静态资源后缀。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* \\.png$ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则E.匹配以.png或者.PNG结尾的静态资源。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location !~ \\.xhtml$ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则F.不匹配.xhtml为后缀的资源。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location !~* \\.xhtml$ &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则G.不匹配.xhtml或者.XHTML为后缀的资源。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">  <span class=\"comment\">#规则H.通用匹配，当上述匹配都不能匹配时，使用该规则。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>在实践过程中常见, 有如下几种匹配规则：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一个必选规则是直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，</span></span><br><span class=\"line\"><span class=\"comment\"># 这里可以是直接转发给后端应用服务器了，也可以是一个静态首页。</span></span><br><span class=\"line\">location = / &#123;</span><br><span class=\"line\">  root /usr/<span class=\"built_in\">local</span>/nginx/html</span><br><span class=\"line\">  proxy_pass http://tomcat:8080/index</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span></span><br><span class=\"line\"><span class=\"comment\"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></span><br><span class=\"line\">location ^~ /static/ &#123;                             <span class=\"comment\"># // 以xx开头</span></span><br><span class=\"line\">  root /webroot/static/;   <span class=\"comment\"># 注意,需要指定跟目录.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ &#123;     <span class=\"comment\"># // 以xx结尾</span></span><br><span class=\"line\">  root /webroot/res/;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></span><br><span class=\"line\"><span class=\"comment\">#非静态文件请求就默认是动态请求，自己根据实际把握</span></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">  proxy_pass http://tomcat:8080/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Nginx-之-规则判断表达式浅析\"><a href=\"#Nginx-之-规则判断表达式浅析\" class=\"headerlink\" title=\"Nginx 之 规则判断表达式浅析\"></a>Nginx 之 规则判断表达式浅析</h3><p>Nginx 常用判断表达式如下:</p>\n<ul>\n<li><code>-f和!-f</code>: 用来判断是否存在文件</li>\n<li><code>-d和!-d</code>:用来判断是否存在目录</li>\n<li><code>-e和!-e</code>:用来判断是否存在文件或目录</li>\n<li><code>-x和!-x</code>:用来判断文件是否可执行</li>\n<li>除此之外我们还可以使用上一小节的正则匹配符进行判断。</li>\n</ul>\n<p><br></p>\n<p>nginx 全局变量一览:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arg_PARAMETER      <span class=\"comment\"># 这个变量包含GET请求中，如果有变量PARAMETER时的值。</span></span><br><span class=\"line\">args               <span class=\"comment\"># 这个变量等于请求行中(GET请求)的参数，如：foo=123&amp;bar=blahblah;</span></span><br><span class=\"line\">binary_remote_addr <span class=\"comment\"># 二进制的客户地址。</span></span><br><span class=\"line\">body_bytes_sent    <span class=\"comment\"># 响应时送出的body字节数数量。即使连接中断，这个数据也是精确的。</span></span><br><span class=\"line\">content_length    <span class=\"comment\"># 请求头中的Content-length字段。</span></span><br><span class=\"line\">content_type      <span class=\"comment\"># 请求头中的Content-Type字段。</span></span><br><span class=\"line\">cookie_COOKIE     <span class=\"comment\"># cookie COOKIE变量的值</span></span><br><span class=\"line\">document_root     <span class=\"comment\"># 当前请求在root指令中指定的值。</span></span><br><span class=\"line\">document_uri      <span class=\"comment\"># 与uri相同。</span></span><br><span class=\"line\">host              <span class=\"comment\"># 请求主机头字段，否则为服务器名称。</span></span><br><span class=\"line\">hostname          <span class=\"comment\"># 设置为gethostname返回的机器主机名</span></span><br><span class=\"line\">http_HEADER       <span class=\"comment\"># 请求header头字段</span></span><br><span class=\"line\">is_args           <span class=\"comment\"># 如果有args参数，这个变量等于”?”，否则等于”\"，空值。</span></span><br><span class=\"line\">http_user_agent   <span class=\"comment\"># 客户端agent信息</span></span><br><span class=\"line\">http_cookie       <span class=\"comment\"># 客户端cookie信息</span></span><br><span class=\"line\">limit_rate        <span class=\"comment\"># 这个变量可以限制连接速率。</span></span><br><span class=\"line\">query_string      <span class=\"comment\"># 与args相同。</span></span><br><span class=\"line\">request_body_file  <span class=\"comment\">#客户端请求主体信息的临时文件名。</span></span><br><span class=\"line\">request_method    <span class=\"comment\">#客户端请求的动作，通常为GET或POST。</span></span><br><span class=\"line\">remote_addr          <span class=\"comment\">#客户端的IP地址。</span></span><br><span class=\"line\">remote_port          <span class=\"comment\">#客户端的端口。</span></span><br><span class=\"line\">remote_user          <span class=\"comment\">#已经经过Auth Basic Module验证的用户名。</span></span><br><span class=\"line\">request_completion <span class=\"comment\">#如果请求结束，设置为OK. 当请求未结束或如果该请求不是请求链串的最后一个时，为空(Empty)。</span></span><br><span class=\"line\">request_method    <span class=\"comment\">#GET或POST</span></span><br><span class=\"line\">request_filename  <span class=\"comment\">#当前请求的文件路径，由root或alias指令与URI请求生成。</span></span><br><span class=\"line\">request_uri          <span class=\"comment\">#包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。不能修改。</span></span><br><span class=\"line\">scheme                <span class=\"comment\">#HTTP方法（如http，https）。</span></span><br><span class=\"line\">server_protocol      <span class=\"comment\">#请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span></span><br><span class=\"line\">server_addr          <span class=\"comment\">#服务器地址，在完成一次系统调用后可以确定这个值。</span></span><br><span class=\"line\">server_name        <span class=\"comment\">#服务器名称。</span></span><br><span class=\"line\">server_port          <span class=\"comment\">#请求到达服务器的端口号。</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Nginx 解析URL用作判断的全局变量，例如，访问的URL为<code>http://weiyigeek.top:8080/test1/test2/test.php</code>.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$host</span>：weiyigeek.top</span><br><span class=\"line\"><span class=\"variable\">$server_port</span>：8080</span><br><span class=\"line\"><span class=\"variable\">$request_uri</span>：http://weiyigeek.top:8080/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_uri</span>：/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_root</span>：/data/nginx/html</span><br><span class=\"line\"><span class=\"variable\">$request_filename</span>：/data/html/test1/test2/test.php</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>简单示例:</strong></p>\n<ul>\n<li>1.判断请求的静态资源文件是否是存在的，如不存在则返回403.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~* \\.(js|css|jpg|jpeg|gif|png|swf)$ &#123;</span><br><span class=\"line\">  if (-f $request_filename) &#123; </span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>2.判断Nginx全局变量并进行跳转到指定页面。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"variable\">$host</span> !~* weiyigeek\\.top ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 301 https://space.bilibili.com/385802642;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>3.文件反盗链并设置过期时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~*^.+\\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ &#123;</span><br><span class=\"line\">  valid_referers none blocked *.weiyigeek.top localhost 127.0.0.1;</span><br><span class=\"line\">  if ($invalid_referer) &#123;</span><br><span class=\"line\">      rewrite ^&#x2F; https:&#x2F;&#x2F;weiyigeek.top&#x2F;wechat.html;</span><br><span class=\"line\">      return 412;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  root &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html</span><br><span class=\"line\">  access_log  off;</span><br><span class=\"line\">  expires 3d;</span><br><span class=\"line\">  break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.自定义变量判断跳转到指定页面.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 仅允许222.222.222.222或者内网的两个IP访问,其他IP都rewrite到停服页面</span><br><span class=\"line\">if ( $remote_addr &#x3D; 222.222.222.222)&#123;set $my_ip 1;&#125;</span><br><span class=\"line\">if ( $remote_addr &#x3D; 192.168.1.170 )&#123; set $my_ip 1;&#125;</span><br><span class=\"line\">if ( $remote_addr &#x3D; 192.168.1.169 )&#123; set $my_ip 1;&#125;</span><br><span class=\"line\">if ( $my_ip !&#x3D; 1) &#123;rewrite ^&#x2F;design&#x2F;(.*)\\.php$ &#x2F;weiyigeek.html?$1&amp;;&#125;  #将*.php转到tingfu.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: 此处以Nginx暴露给互联网, 所以利用 <code>$remote_addr</code> 变量获取访问者地址, 如果用了负载均衡的话此处应该是<code>$http_x_forwarded_for</code> 变量。</p>\n<p><br/></p>\n<h3 id=\"Nginx-之-Redirect重定向与ReWrite重写-配置浅析\"><a href=\"#Nginx-之-Redirect重定向与ReWrite重写-配置浅析\" class=\"headerlink\" title=\"Nginx 之 Redirect重定向与ReWrite重写 配置浅析\"></a>Nginx 之 Redirect重定向与ReWrite重写 配置浅析</h3><p><strong>Redirect（重定向）语法示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http 向 https 跳转 (永久)</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name weiyigeek.top www.weiyigeek.top;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 301 https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 向 https 跳转（临时）</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name weiyigeek.top www.weiyigeek.top;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 302 https://www.weiyigeek.top<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>ReWrite 重写语法示例</strong><br>rewrite 正则表达式以及其可用参数:</p>\n<ul>\n<li><code>last</code> : 本条重写规则匹配完成后，终止匹配后续重写规则，并重新发起请求继续匹配新的location URI规则；浏览器地址栏URL地址不变</li>\n<li><code>break</code> : 本条重写规则匹配完成后，终止匹配后续重写规则; 浏览器地址栏URL地址不变</li>\n<li><code>redirect</code> : 返回302临时重定向，浏览器地址会显示重写后的URL地址（爬虫不会收录）</li>\n<li><code>permanent</code> : 返回301永久重定向，浏览器地址会显示重写后的URL地址 （爬虫会收录）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http 向 https 跳转</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  server_name weiyigeek.top www.weiyigeek.top;</span><br><span class=\"line\">  <span class=\"comment\"># 判断请求host是否是 www.weiyigeek.top ,如果是 weiyigeek.top 则重写为 www.weiyigeek.top </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$http_host</span> !~ <span class=\"string\">\"^www\\.weiyigeek\\.top$\"</span> &#123;</span><br><span class=\"line\">    rewrite ^(.*) https://www.weiyigeek.top<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用重写规则防止盗链</span></span><br><span class=\"line\">location ~* \\.(gif|jpg|png|svg|css|js)$ &#123;</span><br><span class=\"line\">  valid_referers none blocked *.weiyigeek.top localhost 127.0.0.1 server_names ~\\.google\\. ~\\.baidu\\.;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$invalid_referer</span>) &#123;</span><br><span class=\"line\">    rewrite ^/ https://www.weiyigeek.top/403.jpg;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用重写功能可将网页中旧的访问目录重写到新的访问路径</span></span><br><span class=\"line\"><span class=\"comment\"># 例如, 如果访问https://blogwww.weiyigeek.top/2020/10/515.html 则将显示首页。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"variable\">$document_uri</span> ~* /([0-9]+)/([0-9]+)/([0-9]+)\\.html$) &#123;</span><br><span class=\"line\">  rewrite ^/ /index.html last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>温馨提示：301 与 302 状态码的不同区别。</p>\n<ul>\n<li>301 redirect: 301 代表永久性转移( <code>Permanently Moved</code> ) - 网站SEO推荐。</li>\n<li>302 redirect: 302 代表暂时性转移( <code>Temporarily Moved</code> )</li>\n</ul>\n<p><br/></p>\n<h3 id=\"Nginx-之-SSL-证书安全配置浅析\"><a href=\"#Nginx-之-SSL-证书安全配置浅析\" class=\"headerlink\" title=\"Nginx 之 SSL 证书安全配置浅析\"></a>Nginx 之 SSL 证书安全配置浅析</h3><p>描述: 通常为了保证网站数据在传输过程中不被窃取和篡改，我们需要为其配置SSL证书，而在Nginx中配置方法是非常的简单的，不过最重要的还是你要生成私钥以及证书申请文件csr向证书颁发机构生成网站证书。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Permanent Redirect for HTTP to HTTPS</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  listen [::]:80;</span><br><span class=\"line\">  server_name weiyigeek.top;</span><br><span class=\"line\">  return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 443 ssl http2;</span><br><span class=\"line\">  listen [::]:443 ssl http2;</span><br><span class=\"line\">  server_name weiyigeek.top;</span><br><span class=\"line\"></span><br><span class=\"line\">  # HSTS (ngx_http_headers_module is required) 应该只使用 HTTPS 而不是使用 HTTP 通信</span><br><span class=\"line\">  add_header Strict-Transport-Security &quot;max-age&#x3D;31536000;includeSubDomains;preload&quot; always;</span><br><span class=\"line\"></span><br><span class=\"line\">  # XXS-Protection</span><br><span class=\"line\">  add_header X-XSS-Protection &quot;1; mode&#x3D;block&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  # MIME 模拟探测</span><br><span class=\"line\">  add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Frame 安全控制</span><br><span class=\"line\">  add_header X-Frame-Options ALLOW-FROM music.163.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Spider Robots 爬取策略限制</span><br><span class=\"line\">  add_header X-Robots-Tag none;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 开启 SSL ，如果想http 与 https 公用一个配置则可以将其注释( the &quot;ssl&quot; directive is deprecated )</span><br><span class=\"line\">  # ssl on;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 配置证书链与证书密钥</span><br><span class=\"line\">  ssl_certificate      &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;fullchain.cer;</span><br><span class=\"line\">  ssl_certificate_key  &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;weiyigeek.top.key;</span><br><span class=\"line\"></span><br><span class=\"line\">  # ssl会话复用超时时间以及会话复用缓存大小</span><br><span class=\"line\">  ssl_session_timeout 1d;</span><br><span class=\"line\">  ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions</span><br><span class=\"line\"></span><br><span class=\"line\">  # 配置双证书时开启否则应该关闭</span><br><span class=\"line\">  ssl_session_tickets off;  </span><br><span class=\"line\"></span><br><span class=\"line\">  ## OCSP stapling</span><br><span class=\"line\">  ssl_stapling on;</span><br><span class=\"line\">  ssl_stapling_verify on;</span><br><span class=\"line\">  # 使用根 CA 和中间证书验证 OCSP 响应的信任链</span><br><span class=\"line\">  ssl_trusted_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;ca.cer;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 仅使用ECDH是不用配置ssl_dhparam的否则你应该为它配置上 </span><br><span class=\"line\">  # curl https:&#x2F;&#x2F;ssl-config.mozilla.org&#x2F;ffdhe2048.txt &gt; &#x2F;path&#x2F;to&#x2F;dhparam</span><br><span class=\"line\">  ssl_dhparam &#x2F;path&#x2F;to&#x2F;dhparam;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 兼容性较为通用的SSL协议与加密算法套件</span><br><span class=\"line\">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class=\"line\">  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;</span><br><span class=\"line\">  # 安全配置: ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class=\"line\">  # 证书常规握手加密算法方式共十八个，ECDHE、DHE、AES开头分别6个</span><br><span class=\"line\">  ; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:HIGH:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DES:!MD5:!RC4;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 为了兼容性推荐服务器自动选择要使用的算法套件</span><br><span class=\"line\">  ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">  # replace with the IP address of your resolver</span><br><span class=\"line\">  resolver 223.6.6.6 8.8.8.8 192.168.12.254;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充说明: 为Nginx服务器配置RSA与ECDSA双证书的两种方式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.首先是将两个证书链都加入 Nginx 的配置文件</span></span><br><span class=\"line\">ssl_certificate     example.com.rsa.crt;</span><br><span class=\"line\">ssl_certificate_key example.com.rsa.key;</span><br><span class=\"line\">ssl_certificate     example.com.ecdsa.crt;</span><br><span class=\"line\">ssl_certificate_key example.com.ecdsa.key;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.或者使用 CT 的话有两种方法，一个是将两个证书的 CT 信息放到同一目录，并做如下设置，Nginx CT 模块会自动在这个目录下查找相应证书的 CT 信息并发送验证：</span></span><br><span class=\"line\">ssl_ct on;</span><br><span class=\"line\">ssl_ct_static_scts /path/to/sct/dir;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 我们也可以单独配置每个证书的 CT 文件</span></span><br><span class=\"line\">ssl_ct on;</span><br><span class=\"line\">ssl_certificate example.com.rsa.crt;</span><br><span class=\"line\">ssl_certificate_key example.com.rsa.key;</span><br><span class=\"line\">ssl_ct_static_scts xample.com.rsa.scts;</span><br><span class=\"line\"> </span><br><span class=\"line\">ssl_certificate example.com.ecdsa.crt;</span><br><span class=\"line\">ssl_certificate_key example.com.ecdsa.key;</span><br><span class=\"line\">ssl_ct_static_scts example.com.ecdsa.scts;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Nginx-之-资源压缩配置浅析\"><a href=\"#Nginx-之-资源压缩配置浅析\" class=\"headerlink\" title=\"Nginx 之 资源压缩配置浅析\"></a>Nginx 之 资源压缩配置浅析</h3><p>描述: 为了降低服务器带宽压力以及优化响应速度, 通常我们需要在Nginx服务器配置中为其开启gzip压缩, </p>\n<p><strong>配置示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启gzip</span></span><br><span class=\"line\">gzip on;</span><br><span class=\"line\"><span class=\"comment\"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class=\"line\">gzip_min_length 2k;</span><br><span class=\"line\"><span class=\"comment\"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span></span><br><span class=\"line\">gzip_comp_level 2;</span><br><span class=\"line\"><span class=\"comment\"># 进行压缩的文件类型，javascript有多种形，其中的值可以在 mime.types 文件中找到。</span></span><br><span class=\"line\">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/opentype image/svg+xml;</span><br><span class=\"line\"><span class=\"comment\"># 建议在http header中添加Vary: Accept-Encoding支持</span></span><br><span class=\"line\">gzip_vary on;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"Nginx-之-静态资源expires缓存过期时间配置\"><a href=\"#Nginx-之-静态资源expires缓存过期时间配置\" class=\"headerlink\" title=\"Nginx 之 静态资源expires缓存过期时间配置\"></a>Nginx 之 静态资源expires缓存过期时间配置</h3><p>描述: 在 Nginx 配置 expires 指令可以起到控制页面缓存的作用, 配置静态资源的 expires 可以有效的减少客户端对服务器的请求，该配置项适用于: http、server 以及 location 块中。</p>\n<p><strong>expires（过期时间语法）语法示例</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 语法: &#96;expires [time|epoch|max|off]&#96;</span><br><span class=\"line\">* epoch：指定Expires的值为 1 January,1970,00:00:01 GMT</span><br><span class=\"line\">* max: 指定Expires的值为31 December2037 23:59:59GMT,&quot;Cache-Control&quot;的值为10年。</span><br><span class=\"line\">* -1：指定Expires的值为当前服务器时间-1s，即永远过期。</span><br><span class=\"line\">* off：不修改Expires和&quot;Cache-Control&quot;的值</span><br><span class=\"line\"></span><br><span class=\"line\"># location 块 ~ 使用正则匹配</span><br><span class=\"line\">location ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class=\"line\">  # 静态资源源路径必须配置否则,静态资源可能无法找到</span><br><span class=\"line\">  root &#x2F;var&#x2F;www&#x2F;img&#x2F;;</span><br><span class=\"line\">  # 禁用404错误日志</span><br><span class=\"line\">  log_not_found off;</span><br><span class=\"line\">  # 关闭access访问日志</span><br><span class=\"line\">  access_log off;</span><br><span class=\"line\">  # 静态资源过期时间</span><br><span class=\"line\">  expires 7d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>该指令控制HTTP应答中的”Expires”和”Cache-Control”Header头部信息, 例如在配置后expires指令请求 <code>https://blog.weiyigeek.top/img/avatar.jpg</code> URL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 304 Not Modified</span><br><span class=\"line\">Server: nginx</span><br><span class=\"line\">Date: Fri, 01 Apr 2022 09:19:09 GMT</span><br><span class=\"line\">Last-Modified: Wed, 30 Mar 2022 15:42:30 GMT</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">ETag: <span class=\"string\">\"62447a66-35db\"</span></span><br><span class=\"line\">Expires: Fri, 08 Apr 2022 09:19:09 GMT <span class=\"comment\"># 表示资源过期时间，由当前访问时间加上max-age指令值所得</span></span><br><span class=\"line\">Cache-Control: max-age=604800          <span class=\"comment\"># 使用max-age指令指定组件被缓存多久,负数表示no-cache,正数或零表示max-age=time</span></span><br><span class=\"line\">Access-Control-Allow-Origin: *.weiyigeek.top</span><br><span class=\"line\">Access-Control-Allow-Methods: GET,POST</span><br><span class=\"line\">Access-Control-Allow-Headers: DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>实践示例:</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 网页资源缓存</span><br><span class=\"line\">location ~* \\.(xml|html|htm)$ &#123;</span><br><span class=\"line\">  # 资源决绝对目录设置</span><br><span class=\"line\">  root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class=\"line\">  # 日志文件的相对路径或完整路径</span><br><span class=\"line\">  access_log &#x2F;path&#x2F;to&#x2F;file.log;</span><br><span class=\"line\">  # 开启日志记录</span><br><span class=\"line\">  access_log on;</span><br><span class=\"line\">  # 设置过期时间</span><br><span class=\"line\">  expires 24h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 样式、JS、图片资源缓存</span><br><span class=\"line\">location ~* \\.(css|js|ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class=\"line\">  root &#x2F;var&#x2F;www&#x2F;html&#x2F;res;</span><br><span class=\"line\">  # 禁用404错误日志</span><br><span class=\"line\">  log_not_found off;</span><br><span class=\"line\">  # 关闭日志</span><br><span class=\"line\">  access_log off;</span><br><span class=\"line\">  # 缓存时间7天</span><br><span class=\"line\">  expires 7d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 字体资源缓存</span><br><span class=\"line\">location ~* \\.(eot|ttf|otf|woff|woff2|svg)$ &#123;</span><br><span class=\"line\">  root &#x2F;var&#x2F;www&#x2F;html&#x2F;static;</span><br><span class=\"line\">  log_not_found off;</span><br><span class=\"line\">  access_log off;</span><br><span class=\"line\">  expires max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"Nginx-之-反向代理资源基本缓存配置\"><a href=\"#Nginx-之-反向代理资源基本缓存配置\" class=\"headerlink\" title=\"Nginx 之 反向代理资源基本缓存配置\"></a>Nginx 之 反向代理资源基本缓存配置</h3><p>描述: 在 Nginx 中往往我们会对指定站点进行反代(反向代理), 而在反代站点中存在动态资源与静态资源，我们可以使用下述指令开启简单的缓存配置。</p>\n<p>首先我们需要了解一下三种缓存类型:</p>\n<ul>\n<li>客户端缓存</li>\n<li>代理缓存(Proxy Cache)</li>\n<li>服务端缓存</li>\n</ul>\n<p>这里主要讲解Nginx作为代理服务器进行代理缓存的配置采用的参数以及示例:</p>\n<ul>\n<li><p>1.<code>proxy_cache</code>:定义用于缓存的共享内存区域。同一个区域可以用于多个地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \tproxy_cache zone | off;</span><br><span class=\"line\">Default: \tproxy_cache off;</span><br><span class=\"line\">Context: \thttp, server, location</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.<code>proxy_cache_path</code>:设置缓存的路径和其他参数缓存数据存储在文件中，缓存中的文件名是将MD5函数应用于缓存键的结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context: http</span><br><span class=\"line\">Syntax: proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，在下面的配置中level参数定义缓存的层次结构级别:从1到3，每个级别接受值1或2。</span></span><br><span class=\"line\">proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m; <span class=\"comment\">#10M = 10 * 8000 个密钥</span></span><br><span class=\"line\"><span class=\"comment\">#/data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.<code>proxy_cache_valid</code>:设置缓存过期时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \tproxy_cache_valid [code ...] time;</span><br><span class=\"line\">Context: \thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，为不同的响应代码设置缓存时间。</span></span><br><span class=\"line\">proxy_cache_valid 200 302 10m;</span><br><span class=\"line\">proxy_cache_valid 404      1m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#If only caching time is specified (指定)，也可以可以指定any参数来缓存任何响应:</span></span><br><span class=\"line\">proxy_cache_valid 5m;</span><br><span class=\"line\">proxy_cache_valid any      1m;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4.<code>proxy_cache_key</code>:设置缓存维度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \tproxy_cache_key string;</span><br><span class=\"line\">Default: \tproxy_cache_key <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">Context: \thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，定义用于缓存的键，</span></span><br><span class=\"line\">proxy_cache_key <span class=\"string\">\"<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span> <span class=\"variable\">$cookie_user</span>\"</span>;</span><br><span class=\"line\">proxy_cache_key <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>; <span class=\"comment\">#默认情况下指令也是字符串不用加上\"\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.<code>proxy_cache_purge</code>:定义将在何种条件下将请求视为缓存清除请求。如果字符串参数中至少有一个值不为空且不等于“0”，则删除具有相应缓存键的缓存项。通过返回204 (No Content)响应来指示操作成功的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \tproxy_cache_purge string ...;</span><br><span class=\"line\">Context: \thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example configuration: </span></span><br><span class=\"line\">map <span class=\"variable\">$request_method</span> <span class=\"variable\">$purge_method</span> &#123;</span><br><span class=\"line\">    PURGE   1;</span><br><span class=\"line\">    default 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.<code>proxy_no_cache</code>:指定不缓存的部分页面，可以与proxy_cache_bypass指令一起使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: \tproxy_no_cache string ...;</span><br><span class=\"line\">Context: \thttp, server, location</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果字符串参数中至少有一个值不为空且不等于“0”，则不会保存响应:</span></span><br><span class=\"line\">proxy_no_cache <span class=\"variable\">$cookie_nocache</span> <span class=\"variable\">$arg_nocache</span><span class=\"variable\">$arg_comment</span>;</span><br><span class=\"line\">proxy_no_cache <span class=\"variable\">$http_pragma</span>    <span class=\"variable\">$http_authorization</span>;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n</li>\n</ul>\n<p><strong>proxy_cache 相关指令集简述</strong><br>描述: 其中<code>proxy_cache_path指令</code>配置了缓存名称以及其存放地址、缓存大小等相关其它参数配置, 而<code>proxy_cache指令</code>配置是为了启用创建的mycache名称的缓存。</p>\n<ul>\n<li>proxy_no_cache : 该指令用于定义满足条件的响应不会被保存到缓存中,在条件字符串中至少有一个条件不为空或者0，符合这样条件的响应才不会被缓存, 其一般会配合<code>proxy_cache_bypass</code>共同使用；</li>\n<li>proxy_cache_bypass : 该指令用于定义哪些情况不从cache读取直接从backend获取资源配置同上。</li>\n<li>proxy_cache_key : 该指令给缓存数据定义一个键。</li>\n<li>proxy_cache_methods ：该指令用于设置缓存哪些HTTP方法,默认缓存HTTP GET/HEAD方法不缓存POST方法。</li>\n<li>proxy_cache_valid ：该指令用于设置不同响应码的缓存时间。</li>\n<li>proxy_cache_min_uses : 该指令用于设置缓存的最小使用次数,默认值为1</li>\n<li>proxy_cache_use_stale : 该指令开启(增强)容错能力，即使用缓存内容来响应客户端的请求</li>\n</ul>\n<p><br/></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.其中，cookie_nocache、arg_nocache...皆为变量，可以根据你访问的匹配策略来设置，其值只有2类，0和非0;</span></span><br><span class=\"line\"><span class=\"comment\"># 访问匹配策略, 如果在此链式配置中，只要有一个值不为 0 则不会cache。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$request_uri</span> ~ ^/(login|register|password\\/reset)/) &#123; <span class=\"built_in\">set</span> <span class=\"variable\">$cookie_nocache</span> 1; &#125;</span><br><span class=\"line\">proxy_no_cache <span class=\"variable\">$cookie_nocache</span>(0) <span class=\"variable\">$arg_nocache</span>(1) <span class=\"variable\">$arg_comment</span>(0)</span><br><span class=\"line\">proxy_no_cache <span class=\"variable\">$http_pragma</span> <span class=\"variable\">$http_authorization</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.默认情况下，该指令的值的字符串，给缓存数据定义一个键。</span></span><br><span class=\"line\">proxy_cache_key <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>; <span class=\"comment\"># 缺省</span></span><br><span class=\"line\">proxy_cache_key <span class=\"variable\">$scheme</span><span class=\"variable\">$proxy_host</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.缺省缓存GET HEAD请求。</span></span><br><span class=\"line\">proxy_cache_methods GET HEAD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.只对响应码为200，301，302的访问请求资源设置缓存时间，此外可以个性化定制。</span></span><br><span class=\"line\">proxy_cache_valid 200 302 10m; </span><br><span class=\"line\">proxy_cache_valid 301 1h; </span><br><span class=\"line\">proxy_cache_valid 404 1m; </span><br><span class=\"line\">proxy_cache_valid any 1m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.设置缓存的最小使用次数。</span></span><br><span class=\"line\">proxy_cache_min_uses 1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.当作为cache的NGINX收到源站返回error、timeout或者其他指定的5XX错误，并且在其缓存中有请求文件的陈旧版本，则会将这些陈旧版本的文件而不是错误信息发送给客户端。</span></span><br><span class=\"line\">proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;</span><br></pre></td></tr></table></figure></p>\n<p>实践配置: 多磁盘分割缓存，如果有多个硬盘则可以用来在多个硬盘之间分割缓存。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设每块硬盘挂载在相应的目录中：/mnt/disk1、/mnt/disk2、/mnt/disk3, 使用了3个独立的缓存，每个缓存专用一块硬盘，另外，3个独立的线程池也各自专用一块硬盘。</span></span><br><span class=\"line\">proxy_cache_path /mnt/disk1 levels=1:2 keys_zone=cache_1:256m max_size=1024G use_temp_path=off;</span><br><span class=\"line\">proxy_cache_path /mnt/disk2 levels=1:2 keys_zone=cache_2:256m max_size=1024G use_temp_path=off;</span><br><span class=\"line\">proxy_cache_path /mnt/disk3 levels=1:2 keys_zone=cache_3:256m max_size=1024G use_temp_path=off;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 缓存之间（其结果就是磁盘之间）的负载均衡使用 split_clients 模块</span></span><br><span class=\"line\">split_clients <span class=\"variable\">$request_uri</span> <span class=\"variable\">$disk</span> &#123;</span><br><span class=\"line\">  33.3%     1;</span><br><span class=\"line\">  33.3%     2;</span><br><span class=\"line\">  *         3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">  proxy_pass http://127.0.0.1:9090;</span><br><span class=\"line\">  proxy_cache_key <span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">  proxy_cache cache_<span class=\"variable\">$disk</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>实践示例:</strong></p>\n<ul>\n<li><p>示例1.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_cache_path &#x2F;path&#x2F;to&#x2F;cache levels&#x3D;1:2 keys_zone&#x3D;mycache:10m max_size&#x3D;10g inactive&#x3D;60m use_temp_path&#x3D;off;</span><br><span class=\"line\">upstream my_upstream &#123;</span><br><span class=\"line\">  server 192.168.1.20:8080 weight&#x3D;5 max_fails&#x3D;5 fail_timeout&#x3D;30s;</span><br><span class=\"line\">  server 192.168.1.10:8080 weight&#x3D;5 max_fails&#x3D;5 fail_timeout&#x3D;30s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">    proxy_cache mycache;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;my_upstream;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    proxy_cache_path /opt/app levels:1:2 keys_zone=weiyigeek_cache:10m max_size=10g inactive=60m use_temp_path=off; </span><br><span class=\"line\">    map <span class=\"variable\">$request_method</span> <span class=\"variable\">$purge_method</span> &#123;</span><br><span class=\"line\">      PURGE   1;</span><br><span class=\"line\">      default 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">          proxy_cache weiyigeek_cache;</span><br><span class=\"line\">          proxy_pass http://weiyigeek;</span><br><span class=\"line\">          proxy_cache_valid 200 304 12h;</span><br><span class=\"line\">          proxy_cache_valid any 10m;</span><br><span class=\"line\">          proxy_cache_key <span class=\"variable\">$host</span><span class=\"variable\">$uri</span><span class=\"variable\">$is_args</span><span class=\"variable\">$args</span>;</span><br><span class=\"line\">          proxy_cache_purge <span class=\"variable\">$purge_method</span>;</span><br><span class=\"line\">          add_header Nginx-Cache <span class=\"string\">\"<span class=\"variable\">$upstream_cache_status</span>\"</span>;</span><br><span class=\"line\">          proxy_net_upstream error timeout invalid_header http_500 http_502;</span><br><span class=\"line\">          include proxy_params;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: 在<code>proxy_cache_path</code>指令中的<code>use_temp_path=off</code>参数,表示会将临时文件保存在缓存数据的同一目录中,此举避免在更新缓存时,磁盘之间互相复制响应数据，减少磁盘IO压力。</p>\n<p><br/></p>\n<p><strong>补充说明:</strong><br>问: 如何清理指定缓存?<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 1.rm -rf 删除缓存目录内容</span><br><span class=\"line\">&gt; 2.第三方扩展模块ngx_cache_purge</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Nginx-之-黑白名单限制与请求限流\"><a href=\"#Nginx-之-黑白名单限制与请求限流\" class=\"headerlink\" title=\"Nginx 之 黑白名单限制与请求限流\"></a>Nginx 之 黑白名单限制与请求限流</h3><p>描述: 通常为了防止黑客攻击以及恶意爬虫爬取, 我们需要针对Nginx服务器配置黑白名单和限流措施。</p>\n<p><strong>黑白名单之deny 与 allow</strong><br>描述: 利用 include 指令添加黑白名单配置文件,该指令可以在<code>http, server, location, limit_except</code>语句块,例如:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 白名单</span></span><br><span class=\"line\">include whiteip.conf;</span><br><span class=\"line\"><span class=\"comment\"># allow 192.168.12.0/24; # 允许IP段</span></span><br><span class=\"line\"><span class=\"comment\"># allow 127.0.0.1;       # 允许单个IP</span></span><br><span class=\"line\"><span class=\"comment\"># allow all;             # 允许所有IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 黑名单</span></span><br><span class=\"line\">include blockip.conf;</span><br><span class=\"line\"><span class=\"comment\"># deny 127.0.0.1; # 屏蔽单个IP</span></span><br><span class=\"line\"><span class=\"comment\"># deny all; # 屏蔽所有IP</span></span><br></pre></td></tr></table></figure></p>\n<p>温馨提示: 当被屏蔽的 IP 再次访问我们的nginx服务器网页是,将会显示 403 页面。</p>\n<p><br/></p>\n<p><strong>访问限制之并发连接与请求速率</strong><br>描述: 我们可以分别利用Nginx提供的 limit_conn_zone 与 limit_req_zone 模块来限制每个IP的连接数以及请求数。<code>$binary_remote_addr</code> 是限制同一客户端ip地址(节约空间), 注意不是使用<code>$remote_addr</code>变量;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  <span class=\"comment\"># - limit_conn_zone：限制每个IP的并发连接数</span></span><br><span class=\"line\">  <span class=\"comment\"># 例如 blogweiyigeektop 是定义的一个会话区其用于记录会话状态信息。</span></span><br><span class=\"line\">  limit_conn_zone <span class=\"variable\">$binary_remote_addr</span> zone=blogweiyigeektop:10m;</span><br><span class=\"line\">  limit_conn_zone <span class=\"variable\">$server_name</span> zone=serverweiyigeektop:10m;</span><br><span class=\"line\">  limit_conn_log_level info;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># - limit_req_zone：限制每个IP的请求数</span></span><br><span class=\"line\">  limit_req_zone <span class=\"variable\">$binary_remote_addr</span> zone=weiyigeek_top:10m rate=1r/s;</span><br><span class=\"line\">  limit_req_zone <span class=\"variable\">$binary_remote_addr</span> <span class=\"variable\">$uri</span> zone=blog_weiyigeek_top:3m rate=1r/s; <span class=\"comment\"># $uri 表示同个ip 访问同个uri 才会进入限制</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 限连接数</span></span><br><span class=\"line\">    location  ^~ /download1/ &#123;  </span><br><span class=\"line\">      limit_conn serverweiyigeektop 1000; <span class=\"comment\"># 表示该服务提供的总连接数最大不超过1000，超过的请求会被拒绝</span></span><br><span class=\"line\">      limit_conn blogweiyigeektop 4;   <span class=\"comment\"># 表示对blogweiyigeektop空间中的每个IP的最大并发连接数为4</span></span><br><span class=\"line\">      limit_rate 200k;                 <span class=\"comment\"># 注意此处是对连接的限速不是对IP的限速</span></span><br><span class=\"line\">      <span class=\"built_in\">alias</span> /data/www.weiyigeek.top/download1/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 限请求速率</span></span><br><span class=\"line\">    location  ^~ /download2/ &#123;  </span><br><span class=\"line\">      <span class=\"comment\"># 允许超过频率限制的请求数不多于5个，无延迟表示请求超过频次时，可提供处理(burst + rate)个请求的能力，注意 nodelay 是要和 burst 配合使用的。</span></span><br><span class=\"line\">      limit_req zone=weiyigeek_top burst=5 nodelay; </span><br><span class=\"line\">      <span class=\"built_in\">alias</span> /data/blog.weiyigeek.top/download2/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>动态屏蔽恶意IP</strong><br>Step 1.从logs目录下日志文件中安装指定规则查找要屏蔽的IP执行如下命令<code>awk &#39;{print $1}&#39; access.log |sort |uniq -c|sort -n</code>即可，就可以统计出IP的访问次数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">68 218.76.35.4</span><br><span class=\"line\">73 42.192.96.35</span><br><span class=\"line\">94 139.155.14.45</span><br><span class=\"line\">221 223.202.212.140</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Step 2.自动化脚本简单实现访问请求次数多的IP将进行封禁，<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\">log_nginx=<span class=\"string\">\"/var/log/nginx\"</span>            \t<span class=\"comment\"># nginx日志文件</span></span><br><span class=\"line\">blockfile=<span class=\"string\">\"/usr/local/nginx/conf.d\"</span>     <span class=\"comment\"># ip黑名单存放目录</span></span><br><span class=\"line\">ip_tempfile=<span class=\"string\">\"/tmp/nginx/ip.txt\"</span>        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取出日志中符合条件的ip写入ip.txt，并过滤掉重复的</span></span><br><span class=\"line\">grep <span class=\"string\">\"/atom.xml\"</span> <span class=\"variable\">$log_nginx</span>/access.log | awk <span class=\"string\">'&#123;print $1&#125;'</span> | sort -rn |uniq -c |awk <span class=\"string\">'&#123;print $2&#125;'</span> &gt; /tmp/nginx/ip.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ip <span class=\"keyword\">in</span> `cat /home/shell/ip.txt`;<span class=\"keyword\">do</span></span><br><span class=\"line\">  result=$(grep <span class=\"variable\">$ip</span> <span class=\"variable\">$blockfile</span>/blockip.conf)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#判断ip是否已经被屏蔽</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$result</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">#分析ip请求的次数</span></span><br><span class=\"line\">  count=$(grep <span class=\"variable\">$ip</span> <span class=\"variable\">$log_nginx</span>/access.log|grep <span class=\"string\">\"app/user/getCode\"</span>|wc -l)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># 请求次数大于等于20次就进行屏蔽</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$count</span> -ge 20 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"deny <span class=\"variable\">$ip</span>;\"</span> &gt;&gt; <span class=\"variable\">$blockfile</span>/blockip.conf</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#重启nginx</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: 上述并不是一个非常好的方式，此种方式误杀明显，建议与请求限制联合使用，于此同时我们可以利用<code>Lua + redis</code>实现一个动态封禁与解封（这个后续在实现）。</p>\n<p><br></p>\n<p><strong>白名单与限制联合使用:</strong><br>描述: 如果 Nginx 前面有 lvs 或者 haproxy 之类的负载均衡或者反向代理，nginx 获取的都是来自负载均衡的连接或请求，此时是不应该限制负载均衡的连接和请求，这就需要 geo 和 map 模块设置白名单了；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geo <span class=\"variable\">$whiteiplist</span>  &#123;</span><br><span class=\"line\">  default 1;</span><br><span class=\"line\">  10.11.15.161 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">map <span class=\"variable\">$whiteiplist</span> <span class=\"variable\">$limit</span> &#123;</span><br><span class=\"line\">  1 <span class=\"variable\">$binary_remote_addr</span>;</span><br><span class=\"line\">  0 <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">limit_req_zone <span class=\"variable\">$limit</span> zone=one:10m rate=10r/s;</span><br><span class=\"line\">limit_conn_zone <span class=\"variable\">$limit</span> zone=addr:10m;</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"本章目录[TOC]","categories":[{"name":"进阶学习","path":"api/categories/进阶学习.json"},{"name":"运维实践","path":"api/categories/运维实践.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"Web服务","path":"api/tags/Web服务.json"}]}