{"title":"Git服务器端搭建","slug":"编程世界/开发必备/版本控制/GIT/Git服务器端搭建","date":"2019-07-22T11:35:30.000Z","updated":"2022-03-29T05:39:05.437Z","url":"2019/7-22-99.html","path":"api/articles/2019/7-22-99.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190717151853.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h4><p>虽然Github是比较好使用，但是也有它的不足比如传输速率上传拉取，私有仓库个数有限制，而且必须链接外部网络才能使用，所以GitHub 能提供极佳的服务但却有一些限制，尤其是你是单人或是一名 coding 爱好者。GitHub 其中之一的限制就是其中免费的服务没有提供代码私有托管业务；</p>\n<p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。<br>现在在大多数情况下，大多数高级 Linux 用户已经拥有自己的服务器，并且在这些服务器上方式 Git 就像“啤酒一样免费”（LCTT 译注：指免费软件）。<br>在学习git的时候我们也说了，git是分布式的版本管理系统，所以用户与用户之间也能进行拉取仓库，但是平常基本都是向git服务器提交代码，方便管理和维护;</p>\n<p><em>使用两种代码管理的方法：</em></p>\n<ul>\n<li>一种是运行一个纯 Git 服务器</li>\n<li>另一个是使用名为 GitLab[6] 的 GUI 工具</li>\n</ul>\n<hr>\n\n<h4 id=\"0x01-git的简单C-S\"><a href=\"#0x01-git的简单C-S\" class=\"headerlink\" title=\"0x01 git的简单C/S\"></a>0x01 git的简单C/S</h4><p>搭建Git服务器（简约类型）：远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。<br>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样通过几条简单的apt命令就可以完成安装。</p>\n<p>我们有一个远程服务器和一台本地服务器，现在我们需要使用这两台机器来工作。为了简单起见我们就分别叫它们为远程服务器R和本地服务器L。<br>实验环境：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#假设你已经有sudo权限的用户账号，下面正式开始安装。</span></span><br><span class=\"line\">R-Server: CentOS Linux release 7.6.1810 (Core) 3.10.0-957.12.2.el7.x86_64</span><br><span class=\"line\">L-Client:Linux WeiyiGeek 4.4.0-18362-Microsoft <span class=\"comment\">#1-Microsoft Mon Mar 18 12:02:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux （Ubuntu）</span></span><br></pre></td></tr></table></figure></p>\n<p><em>安装流程</em><br>Step1.R端与L端Centos7安装git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install git -y</span><br><span class=\"line\"><span class=\"comment\">#sudo apt-get install git-core  #ubuntu上可以指向</span></span><br></pre></td></tr></table></figure></p>\n<p>Step2.R端-创建一个git用户用来运行git服务并设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo useradd git</span><br><span class=\"line\">$passwd git</span><br><span class=\"line\">Changing password for user git.</span><br><span class=\"line\">New password:</span><br><span class=\"line\">Retype new password:</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure></p>\n<p>Step3.为了容易的访问服务器，我们设置一个免密 ssh 登录;首先在你本地电脑上创建一个 ssh 密钥(L端)：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</span></span><br><span class=\"line\">ssh-keygen -t rsa -p <span class=\"string\">\"passowrd\"</span>  <span class=\"comment\">#可以指定密匙登录的密码</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub | ssh git@remote-server <span class=\"string\">\"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#也可采用这样的方式：(推荐简单)</span></span><br><span class=\"line\"><span class=\"variable\">$ssh</span>-copy-id git@10.10.107.222</span><br><span class=\"line\"><span class=\"variable\">$ssh</span> <span class=\"string\">'git@10.10.107.222'</span></span><br><span class=\"line\">Last login: Wed Jul 17 15:07:32 2019  <span class=\"comment\">#密匙登录成功</span></span><br><span class=\"line\">[git@master ~]$</span><br></pre></td></tr></table></figure></p>\n<p>Step4.R端初始化Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。<br>假定是/opt/dev/sample.git/，在/srv目录下输入命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - git</span><br><span class=\"line\">mkdir ~/dev;<span class=\"built_in\">cd</span> ~/dev/</span><br><span class=\"line\">git init --bare sample.git  <span class=\"comment\">#初始化git仓库</span></span><br><span class=\"line\"><span class=\"comment\"># Initialized empty Git repository in /home/git/dev/sample.git/</span></span><br><span class=\"line\"><span class=\"comment\">#把owner改为git：</span></span><br><span class=\"line\">sudo chown -R git:git sample.git</span><br></pre></td></tr></table></figure></p>\n<p>Step5.禁用shell登录：出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br><span class=\"line\"><span class=\"comment\">#改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者采用命令进行指定</span></span><br><span class=\"line\"><span class=\"variable\">$usermod</span> -s /usr/bin/git-shell git</span><br><span class=\"line\"><span class=\"variable\">$grep</span> <span class=\"string\">\"git\"</span> /etc/passwd</span><br><span class=\"line\">git:x:1003:1003::/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><br>这样git用户可以正常通过ssh使用git但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>\n<p>Step6.克隆远程仓库,现在可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@server:~/dev/sample.git</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190717151853.png\" alt=\"WeiyiGeek.克隆仓库\" title=\"\" class=\"\">\n                <p>WeiyiGeek.克隆仓库</p>\n            </figure></p>\n<p>Step7.此时您可以建立文件进行git推送，其他机器也能进行git clone拉取项目;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu@WeiyiGeek:~/sample$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello World! git server\"</span> &gt; readme.md</span><br><span class=\"line\">ubuntu@WeiyiGeek:~/sample$ git add readme.md</span><br><span class=\"line\">ubuntu@WeiyiGeek:~/sample$ git commit -m <span class=\"string\">\"Hello World\"</span></span><br><span class=\"line\">[master (root-commit) e31c90a] Hello World</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 readme.md</span><br><span class=\"line\">ubuntu@WeiyiGeek:~/sample$ git push</span><br><span class=\"line\">Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (3/3), 235 bytes | 117.00 KiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To 10.10.107.222:~/dev/sample.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>使用案例2:（本地建立初始化仓库，再关联远程仓库）</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init sample</span><br><span class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/ubuntu/sample/.git/</span><br><span class=\"line\">drwxrwxrwx 1 ubuntu ubuntu 4096 Jul 17 15:51 .git/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加远程仓库</span></span><br><span class=\"line\">$ git remote add origin git@10.10.107.222:/home/git/dev/sample.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将远程仓库拉取下来与当前master分支合并</span></span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">remote: Counting objects: 3, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (3/3), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">From 10.10.107.222:/home/git/dev/sample</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时的config文件为</span></span><br><span class=\"line\">ubuntu@WeiyiGeek:~/sample$ cat .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        repositoryformatversion = 0</span><br><span class=\"line\">        filemode = <span class=\"literal\">true</span></span><br><span class=\"line\">        bare = <span class=\"literal\">false</span></span><br><span class=\"line\">        logallrefupdates = <span class=\"literal\">true</span></span><br><span class=\"line\">[remote <span class=\"string\">\"origin\"</span>]</span><br><span class=\"line\">        url = git@10.10.107.222:/home/git/dev/sample.git</span><br><span class=\"line\">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure></p>\n<p><em>项目总结：</em></p>\n<ul>\n<li>管理公钥: 可采用 Gitosis<ul>\n<li>如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。</li>\n</ul>\n</li>\n<li>管理权限：可采用 Gitolite<ul>\n<li>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。</li>\n<li>因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过因为Git支持钩子（hook），所以可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。</li>\n</ul>\n</li>\n<li>我们也可以使用 GUI 工具来管理本地计算机上的更改，则可以使用 GUI 工具，例如<code>QGit 或 GitK for Linux</code>。</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"应用安装","path":"api/categories/应用安装.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}