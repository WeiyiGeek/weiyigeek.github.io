{"title":"如何使用Skopeo做一个优雅的镜像搬运工","slug":"虚拟云容/云容器/Harbor/Skopeo如何优雅的做一个镜像搬运工","date":"2022-01-20T07:37:27.000Z","updated":"2023-01-31T02:29:10.471Z","url":"2022/1-20-584.html","path":"api/articles/2022/1-20-584.html.json","covers":["https://img.weiyigeek.top/2021/5/20220120200048.png","https://img.weiyigeek.top/2021/5/20220120204336.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-基础介绍\"><a href=\"#0x00-基础介绍\" class=\"headerlink\" title=\"0x00 基础介绍\"></a>0x00 基础介绍</h2><p>描述: 作为公司内部 PaaS toB 产品的打包发布人员，容器镜像对我们打工人而言就像是工地上的砖头 🧱，而我的一部分工作就是将这些砖头在各个仓库之间搬来搬去，最终将这些砖头打包放在产品的安装包中，形成一个完整的 PaaS 产品安装包。</p>\n<p><strong>Q: 在 PaaS (平台即服务)中的大家常说的ToB与ToC到底是什么?</strong></p>\n<blockquote>\n<p>ToC 面向普通用户服务, 主要是让用户体验感好，解决用户使用方面的问题记录，并返回给前后端开发。<br>ToB 是面向企业用户服务, 产品可用、其中最关键是让Boss使用Happly!</p>\n</blockquote>\n<p><strong>Q: 假如有如下场景，我们从dockerhub公共仓库中下载一个GB以上的镜像，到本地的私有仓库中，我想通常你会这样做先docker pull 到本地，然后使用docker tag更改为私有仓库地址加上镜像名称版本，最后再使用docker push上传镜像到私有仓库中，以供其它内网机器拉取并使用。虽然该方法是可行，但是如果有多个大于GB以上的镜像需要上传到私有仓库，每次都要先解压layer到本地，然后再压缩layer上传到私有仓库中，你能想象此过程花费的时间有多久吗? 对于我们运维工程师来说时间就是金钱，所以需想尽一切方法来节约时间成本，那有没有一种办法可以直接将 registry 上的 blob 复制到另一个 registry，中间过程不涉及对镜像 layer 的解压缩，这岂不美哉。</strong></p>\n<blockquote>\n<p>解决方案当然是存在的，如果你不想使用docker进行images镜像拉取上传，我们完成可以使用skope工具来完全替代 docker-cli 来搬运镜像，skopeo是一个命令行实用程序，可对容器映像和映像存储库执行各种操作。</p>\n</blockquote>\n<p><strong>什么是Skopeo?</strong><br>skopeo 使用 API​​ V2 Registry，例如 Docker Registry、Atomic Registry、私有Registry、本地目录和本地 OCI 镜像目录。skopeo 不需要运行守护进程，它可以执行的操作包括：</p>\n<ul>\n<li>通过各种存储机制复制镜像，例如，可以在不需要特权的情况下将镜像从一个Registry复制到另一个Registry</li>\n<li>检测远程镜像并查看其属性，包括其图层，无需将镜像拉到本地</li>\n<li>从镜像库中删除镜像</li>\n<li>当存储库需要时，skopeo 可以传递适当的凭据和证书进行身份验证</li>\n</ul>\n<p><strong>镜像存储特点</strong><br>根据 Robin 大佬在 《镜像仓库中镜像存储的原理解析》文章里得出的结论：</p>\n<ul>\n<li>通过 Registry API 获得的两个镜像仓库中相同镜像的 manifest 信息完全相同。</li>\n<li>两个镜像仓库中相同镜像的 manifest 信息的存储路径和内容完全相同。</li>\n<li>两个镜像仓库中相同镜像的 blob 信息的存储路径和内容完全相同</li>\n</ul>\n<p><strong>项目信息</strong><br>Github 官方地址: <a href=\"https://github.com/containers/skopeo\" target=\"_blank\" rel=\"noopener\">https://github.com/containers/skopeo</a><br>Gitee mirror: <a href=\"https://gitee.com/mirrors/skopeo\" target=\"_blank\" rel=\"noopener\">https://gitee.com/mirrors/skopeo</a></p>\n<p><br></p>\n<h2 id=\"0x01-安装编译\"><a href=\"#0x01-安装编译\" class=\"headerlink\" title=\"0x01 安装编译\"></a>0x01 安装编译</h2><p>描述: Skopeo 官方安装&amp;编译方式参考文档: <a href=\"https://github.com/containers/skopeo/blob/main/install.md\" target=\"_blank\" rel=\"noopener\">https://github.com/containers/skopeo/blob/main/install.md</a></p>\n<p>本节安装实践环境将在Ubuntu 20.04 LTS 以及 docker 20.10.12 中进行实践源码编译以及 apt 仓库源下载安装实践。</p>\n<h3 id=\"1-源码编译（静态）\"><a href=\"#1-源码编译（静态）\" class=\"headerlink\" title=\"1.源码编译（静态）\"></a>1.源码编译（静态）</h3><p>描述: 要构建 skopeo 二进制文件您至少需要 Go 1.12 版本以上, 其次构建 skopeo 有两种方法，即<code>在容器中</code>或者在本地环境中构建(安装环境较为复杂), 此处为了方便演示将采用容器方式进行编译构建。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.拉取skopeo源码到本地</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth=1 https://github.com/containers/skopeo.git  <span class=\"comment\"># https://github.com/containers/skopeo.git</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> skopeo</span><br><span class=\"line\">$ sed -i <span class=\"string\">'s#proxy.golang.org#https://goproxy.cn#g'</span> skopeo/Makefile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.下载镜像构建依赖</span></span><br><span class=\"line\">$ sudo apt-get install go-md2man  <span class=\"comment\"># 构建手册依赖于 go-md2man。</span></span><br><span class=\"line\">$ whereis go-md2man  <span class=\"comment\"># 获得本机中go-md2man路径。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.构建静态二进制文件</span></span><br><span class=\"line\">$ BUILD_IMAGE=<span class=\"string\">\"golang:latest\"</span></span><br><span class=\"line\">$ docker run --name skopeo-build -v <span class=\"variable\">$PWD</span>:/src -v /usr/bin/go-md2man:/go/bin/go-md2man -w /src -e CGO_ENABLED=0 -e GOPROXY=https://goproxy.cn,direct <span class=\"variable\">$&#123;BUILD_IMAGE&#125;</span> \\</span><br><span class=\"line\">sh -c <span class=\"string\">'make BUILDTAGS=containers_image_openpgp GO_DYN_FLAGS='</span></span><br><span class=\"line\">  <span class=\"comment\"># CGO_CFLAGS=\"\" CGO_LDFLAGS=\"\" GO111MODULE=on go build -mod=vendor  -ldflags '-X main.gitCommit=df4d82b960572c19e9333381a203c0ac475766d7 ' -gcflags \"\" -tags  \"containers_image_openpgp\" -o bin/skopeo ./cmd/skopeo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.运行编译生成的skopeo可执行文件</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ./bin <span class=\"comment\"># /opt/software/skopeo/bin</span></span><br><span class=\"line\">$ ./skopeo --<span class=\"built_in\">help</span></span><br><span class=\"line\">  <span class=\"comment\"># Various operations with container images and container image registries</span></span><br><span class=\"line\">  <span class=\"comment\"># .......</span></span><br><span class=\"line\">  <span class=\"comment\"># Use \"skopeo [command] --help\" for more information about a command.</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>构建关键参数解析:</strong></p>\n<ul>\n<li>CGO_ENABLED=0 : 设置该环境变量, 禁用 CGO 会导致 Go 在可能的情况下更喜欢静态连接库，而不是动态链接到系统库 (解决可以在Ubuntu或者其它linux发行版中执行编译后二进制文件)。</li>\n<li>GOPROXY=<a href=\"https://goproxy.cn,direct\" target=\"_blank\" rel=\"noopener\">https://goproxy.cn,direct</a> : Golong 依赖下载镜像站,加快go get依赖拉拉取。</li>\n<li>BUILDTAGS=containers_image_openpgp : 设置该make参数消除了对libgpgme 及其配套库的依赖, Skopeo 的一些特性依赖于非 Go 库，例如 libgpgme 和 libdevmapper。</li>\n<li>GO_DYN_FLAGS= : 清空该make参数 (否则会强制创建动态可执行文件)</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-分发包安装\"><a href=\"#2-分发包安装\" class=\"headerlink\" title=\"2.分发包安装\"></a>2.分发包安装</h3><p>描述: skopeo 可能已经打包在您的发行版中，此处以ubuntu 20.04为例进行安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.只支持 Ubuntu 20.10 and newer 发行版 </span></span><br><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install skopeo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.但 Kubic 项目为 Ubuntu 20.04 提供了软件包，我们可以通过如下方式在我们及其上进行安装。</span></span><br><span class=\"line\">. /etc/os-release</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_<span class=\"variable\">$&#123;VERSION_ID&#125;</span>/ /\"</span> | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list</span><br><span class=\"line\">curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_<span class=\"variable\">$&#123;VERSION_ID&#125;</span>/Release.key | sudo apt-key add -</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y upgrade</span><br><span class=\"line\">sudo apt-get -y install skopeo</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"3-容器安装运行\"><a href=\"#3-容器安装运行\" class=\"headerlink\" title=\"3.容器安装运行\"></a>3.容器安装运行</h3><p>Skopeo 容器镜像可在 quay.io/skopeo/stable:latest 获得, 例如我们采用podman命令进行如下操作:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">podman run docker://quay.io/skopeo/stable:latest copy --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"0x02-快速上手\"><a href=\"#0x02-快速上手\" class=\"headerlink\" title=\"0x02 快速上手\"></a>0x02 快速上手</h2><h3 id=\"1-命令浅析\"><a href=\"#1-命令浅析\" class=\"headerlink\" title=\"1.命令浅析\"></a>1.命令浅析</h3><p>描述: skopen 是操作各种容器映像和容器映像仓库的工具，其使用方法及其可用命令如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./skopeo --<span class=\"built_in\">help</span>    <span class=\"comment\"># 子命令可采用如下命令 skopeo [command] --help 命令</span></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  skopeo [flags]</span><br><span class=\"line\">  skopeo [<span class=\"built_in\">command</span>]</span><br><span class=\"line\">Available Commands: </span><br><span class=\"line\">  copy          <span class=\"comment\"># 复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像；</span></span><br><span class=\"line\">  delete        <span class=\"comment\"># 删除一个镜像 tag，可以是本地 docker 镜像或者 registry 上的镜像；</span></span><br><span class=\"line\">  <span class=\"built_in\">help</span>          <span class=\"comment\"># 帮助查看</span></span><br><span class=\"line\">  inspect       <span class=\"comment\"># 查看一个镜像的 manifest 或者 image config 详细信息；</span></span><br><span class=\"line\">  list-tags     <span class=\"comment\"># 列出存储库名称指定的镜像的tag</span></span><br><span class=\"line\">  login           <span class=\"comment\"># 登陆某个镜像仓库,类似于 docker login 命令</span></span><br><span class=\"line\">  <span class=\"built_in\">logout</span>          <span class=\"comment\"># 退出某个已认证的镜像仓库, 类似于 docker logout 命令</span></span><br><span class=\"line\">  manifest-digest <span class=\"comment\"># 计算文件的清单摘要是一个sha256sum 值</span></span><br><span class=\"line\">  standalone-sign   <span class=\"comment\"># 使用本地文件创建签名</span></span><br><span class=\"line\">  standalone-verify <span class=\"comment\"># 验证本地文件的签名</span></span><br><span class=\"line\">  sync              <span class=\"comment\"># 将一个或多个图像从一个位置同步到另一个位置 (该功能非常Nice)</span></span><br><span class=\"line\">Flags:</span><br><span class=\"line\">    --<span class=\"built_in\">command</span>-timeout duration   <span class=\"comment\"># 命令超时时间(单位秒)</span></span><br><span class=\"line\">    --debug                      <span class=\"comment\"># 启用debug模式</span></span><br><span class=\"line\">    --insecure-policy            <span class=\"comment\"># 在不进行任何策略检查的情况下运行该工具（如果没有配置 policy 的话需要加上该参数）</span></span><br><span class=\"line\">    --override-arch ARCH         <span class=\"comment\"># 处理镜像时覆盖客户端 CPU 体系架构，如在 amd64 的机器上用 skopeo 处理 arm64 的镜像</span></span><br><span class=\"line\">    --override-os OS             <span class=\"comment\"># 处理镜像时覆盖客户端 OS</span></span><br><span class=\"line\">    --override-variant VARIANT   <span class=\"comment\"># 处理镜像时使用VARIANT而不是运行架构变量</span></span><br><span class=\"line\">    --policy string              <span class=\"comment\"># 信任策略文件的路径 (为镜像配置安全策略情况下使用)</span></span><br><span class=\"line\">    --registries.d DIR           <span class=\"comment\"># 在目录中使用Registry配置文件（例如，用于容器签名存储）</span></span><br><span class=\"line\">    --tmpdir string              <span class=\"comment\"># 用于存储临时文件的目录</span></span><br><span class=\"line\">-h, --<span class=\"built_in\">help</span>                       <span class=\"built_in\">help</span> <span class=\"keyword\">for</span> skopeo </span><br><span class=\"line\">-v, --version                    Version <span class=\"keyword\">for</span> Skopeo</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Skopeo初体验\"><a href=\"#2-Skopeo初体验\" class=\"headerlink\" title=\"2.Skopeo初体验\"></a>2.Skopeo初体验</h3><p>描述: 在使用体验skopeo之前，我们需要了解一哈 Skopeo 可以在那些图像和存储库类型上执行镜像操作(官网文档走一波)：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Repository types</th>\n<th>Describe</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>containers-storage:docker-reference</code></td>\n<td>适用于后端是 Podman, CRI-O, Buildah 的情况</td>\n<td><code>containers-storage:</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>dir:path</code></td>\n<td>适用于将manifest, layer tarballs 和 signatures 存储为单独文件的现有本地目录路径的情况</td>\n<td><code>dir:/tmp/alpine:latest</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>docker://docker-reference</code></td>\n<td>适用于Registry中实现”Docker Registry HTTP API V2”的镜像的情况</td>\n<td><code>docker://harbor.weiyigeek.top/myblog:v2.8</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>docker-archive:path[:docker-reference]</code></td>\n<td>适用于采用<code>docker save</code>命令导出镜像以tar格式存储的文件的情况</td>\n<td><code>docker-archive:alpine.tar</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>docker-daemon:docker-reference</code></td>\n<td>适用于存储在 docker 守护进程内部存储中的图像的情况</td>\n<td><code>docker-daemon:alpine:latest</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>oci:path:tag</code></td>\n<td>适用于符合”Open Container Image Layout Specification”的目录中的图像标记</td>\n<td><code>oci:alpine:latest</code></td>\n</tr>\n</tbody>\n</table>\n<p>温馨提示: 同一个镜像存在的方式有可能不同，不同类型方式存储对镜像的 layer 处理的方式也不一样,。</p>\n<p><br></p>\n<p><strong>测试环境说明</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker 官方 hub 仓库 -&gt; docker.io             <span class=\"comment\"># 官网地址: https://hub.docker.com/</span></span><br><span class=\"line\">私有 Harbor 仓库     -&gt; harbor.weiyigeek.top</span><br><span class=\"line\">临时创建的本地仓库    -&gt; 192.168.12.111:5000   <span class=\"comment\"># 一梭子解决: docker run -d -p 5000:5000 --name registry -v /opt/data/registry:/var/lib/registry registry:2</span></span><br></pre></td></tr></table></figure></p>\n<p>说明: 上述仓库都是在Registry中支持Docker Registry HTTP API V2版本的。</p>\n<p><br></p>\n<h4 id=\"Skopeo-login-loout-远程仓库-Auth\"><a href=\"#Skopeo-login-loout-远程仓库-Auth\" class=\"headerlink\" title=\"Skopeo login/loout - 远程仓库 Auth\"></a>Skopeo login/loout - 远程仓库 Auth</h4><p>描述: 在使用 skopeo 前如果 src 或 dest 镜像是在 registry 仓库中的并且配置了非 public 的镜像需要相应的 auth 认证, 此时我们可以使用 <code>docker login</code> 或者 <code>skopeo login</code> 的方式登录到 registry 仓库，然后默认会在<code>~/.docker</code>目录下生成 registry 登录配置文件 config.json ,该文件里保存了登录需要的验证信息，skopeo 拿到该验证信息才有权限往 registry push 镜像。</p>\n<p><strong>登陆认证</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) skopeo login 登陆示例 (两种方式)</span></span><br><span class=\"line\">$ skopeo login -u WeiyiGeek -p testpassword harbor.weiyigeek.top</span><br><span class=\"line\">  <span class=\"comment\"># Login Succeeded!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) docker login 登陆示例</span></span><br><span class=\"line\">docker login -u WeiyiGeek docker.io</span><br><span class=\"line\">docker login -u WeiyiGeek harbor.weiyigeek.top</span><br><span class=\"line\">docker login -u anonymous -p anonymous 192.168.12.111:5000  <span class=\"comment\"># 实际上临时仓库没有配置认证, 账号密码随意即可。</span></span><br><span class=\"line\">  <span class=\"comment\"># WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span></span><br><span class=\"line\">  <span class=\"comment\"># WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span></span><br><span class=\"line\">  <span class=\"comment\"># Configure a credential helper to remove this warning. See</span></span><br><span class=\"line\">  <span class=\"comment\"># https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class=\"line\">  <span class=\"comment\"># Login Succeeded</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) docker login 生成的 registry 登录配置文件（base64编码安全性不多说）</span></span><br><span class=\"line\">cat ~/.docker/config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"auths\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"192.168.12.111:5000\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"YW5v*******Q==\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"harbor.weiyigeek.top\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"YWR*******LkA=\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"https://index.docker.io/v1/\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"d2Vp**************kyZA==\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>注销认证</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo <span class=\"built_in\">logout</span> myregistrydomain.com:5000</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>温馨提示:</strong> 如果企业自建harbor仓库(一般都会设置自签证书)或者其它私有仓库配置证书,为了防止出错建议进行以下操作(正式环境请根据需要进行配置)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 在 /etc/docker/daemon.json 中配置insecure-registries字段,表示允许不安全的仓库。</span></span><br><span class=\"line\"><span class=\"string\">\"insecure-registries\"</span>: [<span class=\"string\">\"harbor.weiyigeek.top\"</span>,<span class=\"string\">\"192.168.12.111:5000\"</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># (2) 从官方文档可知客户端要使用tls与Harbor通信使用的还是`自签证书`，那么必须建立一个目录：`/etc/docker/certs.d`</span></span><br><span class=\"line\"><span class=\"comment\"># 如果配置可能会出现 x509: certificate signed by unknown authority 错误提示。</span></span><br><span class=\"line\">mkdir -vp /etc/docker/certs.d/harbor.weiyigeek.top</span><br><span class=\"line\">cp -a /deployapp/harbor/harbor.pem  /etc/docker/certs.d/harbor.weiyigeek.top/harbor.crt</span><br></pre></td></tr></table></figure></p>\n<p><strong>温馨提示:</strong> 为了防止后续执行skopeo命令操作镜像时出错, 建议忽略policy策略和证书校验参数如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--insecure-policy \\</span><br><span class=\"line\">--src-tls-verify=<span class=\"literal\">false</span> \\ </span><br><span class=\"line\">--dest-tls-verify=<span class=\"literal\">false</span> \\</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Skopeo-inspect-检查存储库中的镜像\"><a href=\"#Skopeo-inspect-检查存储库中的镜像\" class=\"headerlink\" title=\"Skopeo inspect - 检查存储库中的镜像\"></a>Skopeo inspect - 检查存储库中的镜像</h4><p>描述: skopeo 能够检查容器Registry上的存储库并获取图像层。检查命令获取存储库的清单，它能够向您显示有关整个存储库或标签的类似 <code>docker inspect</code> 的 json 输出。与 docker inspect 相比,此工具可帮助您在拉取存储库或标签之前收集有用的信息(使用磁盘空间), 检查命令可以向您显示给定存储库可用的标签、映像具有的标签、映像的创建日期和操作系统等。</p>\n<p>支持传输的类型 : <code>containers-storage, dir, docker, docker-archive, docker-daemon, oci, oci-archive, ostree, tarball</code></p>\n<p>步骤 01.显示 busybox:latest 镜像的属性相关信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skopeo inspect docker://docker.io/busybox:latest</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"docker.io/library/busybox\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Digest\"</span>: <span class=\"string\">\"sha256:5acba83a746c7608ed544dc1533b87c737a0b0fb730301639a0179f9344b1678\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"RepoTags\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1-glibc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1-musl\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1-ubuntu\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1-uclibc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1.21-ubuntu\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"1.21.0-ubuntu\"</span>,</span><br><span class=\"line\">        .......          <span class=\"comment\"># 镜像历史tags</span></span><br><span class=\"line\">      <span class=\"string\">\"unstable-uclibc\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"Created\"</span>: <span class=\"string\">\"2021-12-30T19:19:41.006954958Z\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"DockerVersion\"</span>: <span class=\"string\">\"20.10.7\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Labels\"</span>: null,</span><br><span class=\"line\">  <span class=\"string\">\"Architecture\"</span>: <span class=\"string\">\"amd64\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Os\"</span>: <span class=\"string\">\"linux\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Layers\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sha256:5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"Env\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>步骤 02.显示 busybox:latest 镜像的容器配置相关信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo inspect --config docker://docker.io/busybox:latest  | jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2021-12-30T19:19:41.006954958Z\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"architecture\"</span>: <span class=\"string\">\"amd64\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"os\"</span>: <span class=\"string\">\"linux\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Env\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Cmd\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sh\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"rootfs\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"layers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"diff_ids\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sha256:01fd6df81c8ec7dd24bbbd72342671f41813f992999a3471b9d9cbc44ad88374\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"history\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2021-12-30T19:19:40.833034683Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop) ADD file:6db446a57cbd2b7f4cfde1f280177b458390ed5a6d1b54c6169522bc2c4d838e in / \"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2021-12-30T19:19:41.006954958Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop)  CMD [\\\"sh\\\"]\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"empty_layer\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>步骤 03.显示未经验证的图像 Digest（摘要）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo inspect --format <span class=\"string\">\"Name: &#123;&#123;.Name&#125;&#125; Digest: &#123;&#123;.Digest&#125;&#125;\"</span> docker://docker.io/busybox:latest</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Skopeo-copy-仓库镜像拷贝\"><a href=\"#Skopeo-copy-仓库镜像拷贝\" class=\"headerlink\" title=\"Skopeo copy - 仓库镜像拷贝\"></a>Skopeo copy - 仓库镜像拷贝</h4><p>描述: skopeo 可以在各种存储机制之间复制容器镜像，支持包括容器仓库(<code>The Quay, Docker Hub, OpenShift, GCR, ，Artifactory ...</code>)以及容器存储后端 (<code>Podman, CRI-O, Docker</code>) 等、本地目录、本地 OCI-layout 目录。</p>\n<p>例如，此处我从hub仓库复制<code>busybox:latest</code>镜像到私有harbot仓库中,在从私有harbot仓库中拷贝到本地指定目录中。</p>\n<p>步骤 01.从 regsitry A 到 registry B 复制 busybox:latest 镜像。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skopeo copy --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> --dest-authfile /root/.docker/config.json docker://docker.io/busybox:latest docker://harbor.weiyigeek.top/devops/busybox:latest</span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 5cc84ad355aa done</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying config beae173cca done</span></span><br><span class=\"line\">  <span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\">  <span class=\"comment\"># Storing signatures</span></span><br></pre></td></tr></table></figure><br>Tips: 由上述日志可以看到 skopeo 是直接从 registry 中 copy 镜像 layer 的 blob 文件，传输是镜像在 registry 中存储的原始格式。</p>\n<p><br/></p>\n<p>步骤 02.从 registry B 复制 busybox:latest 镜像到本地 busybox:latest 目录中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skopeo copy --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> docker://harbor.weiyigeek.top/devops/busybox:latest dir:busybox:latest</span><br><span class=\"line\"><span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\"><span class=\"comment\"># Copying blob 5cc84ad355aa done</span></span><br><span class=\"line\"><span class=\"comment\"># Copying config beae173cca done</span></span><br><span class=\"line\"><span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\"><span class=\"comment\"># Storing signatures</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls &amp;&amp; tree busybox\\:latest/</span><br><span class=\"line\">busybox:latest/</span><br><span class=\"line\">├── 5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa   <span class=\"comment\"># blob 块文件 -&gt; vnd.docker.image.rootfs.diff.tar.gzip</span></span><br><span class=\"line\">├── beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a   <span class=\"comment\"># 镜像配置信息文件 -&gt; vnd.docker.container.image.v1+json </span></span><br><span class=\"line\">├── manifest.json</span><br><span class=\"line\">└── version</span><br><span class=\"line\">0 directories, 4 files</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看镜像的 manifest 文件</span></span><br><span class=\"line\">cat busybox\\:latest/manifest.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"string\">\"schemaVersion\"</span>: 2,</span><br><span class=\"line\">   <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.container.image.v1+json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 1456,</span><br><span class=\"line\">      <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a\"</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"string\">\"layers\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"size\"</span>: 772788,</span><br><span class=\"line\">         <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据 manifest 文件查看镜像的 image config 文件 (存放镜像Build指令与镜像相关配置信息)</span></span><br><span class=\"line\">jq <span class=\"string\">'.'</span> busybox\\:latest/beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"architecture\"</span>: <span class=\"string\">\"amd64\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Hostname\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Domainname\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"User\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"AttachStdin\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"AttachStdout\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"AttachStderr\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Tty\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"OpenStdin\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"StdinOnce\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Env\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Cmd\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sh\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"Image\"</span>: <span class=\"string\">\"sha256:da658412c37aa24e561eb7e16c61bc82a9711340d8fb5cf1a8f39d8e96d7f723\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Volumes\"</span>: null,</span><br><span class=\"line\">    <span class=\"string\">\"WorkingDir\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Entrypoint\"</span>: null,</span><br><span class=\"line\">    <span class=\"string\">\"OnBuild\"</span>: null,</span><br><span class=\"line\">    <span class=\"string\">\"Labels\"</span>: null</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">........</span><br><span class=\"line\">  <span class=\"string\">\"history\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2021-12-30T19:19:40.833034683Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop) ADD file:6db446a57cbd2b7f4cfde1f280177b458390ed5a6d1b54c6169522bc2c4d838e in / \"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"created\"</span>: <span class=\"string\">\"2021-12-30T19:19:41.006954958Z\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"created_by\"</span>: <span class=\"string\">\"/bin/sh -c #(nop)  CMD [\\\"sh\\\"]\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"empty_layer\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"os\"</span>: <span class=\"string\">\"linux\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"rootfs\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"layers\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"diff_ids\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"sha256:01fd6df81c8ec7dd24bbbd72342671f41813f992999a3471b9d9cbc44ad88374\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br/></p>\n<p>步骤 03.将busybox:latest镜像从 registry B 复制到本地目录，并以 OCI 格式保存<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo copy --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> docker://harbor.weiyigeek.top/devops/busybox:latest oci:busybox-latest</span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 5cc84ad355aa done</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying config 48edd9298a done</span></span><br><span class=\"line\">  <span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\">  <span class=\"comment\"># Storing signatures</span></span><br><span class=\"line\"></span><br><span class=\"line\">tree -h busybox-latest/</span><br><span class=\"line\">  <span class=\"comment\"># busybox-latest/</span></span><br><span class=\"line\">  <span class=\"comment\"># ├── [4.0K]  blobs</span></span><br><span class=\"line\">  <span class=\"comment\"># │   └── [4.0K]  sha256</span></span><br><span class=\"line\">  <span class=\"comment\"># │       ├── [ 347]  1612e16ff3f6b0d09eefdc4e9d5c5c0624f63032743e016585b095b958778016</span></span><br><span class=\"line\">  <span class=\"comment\"># │       ├── [ 575]  48edd9298a25de2c97cd574a5523026f87576c6b7202330a2b60ce7d304ec307</span></span><br><span class=\"line\">  <span class=\"comment\"># │       └── [755K]  5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa  # Blob 块 -</span></span><br><span class=\"line\">  <span class=\"comment\"># ├── [ 186]  index.json</span></span><br><span class=\"line\">  <span class=\"comment\"># └── [  31]  oci-layout</span></span><br><span class=\"line\">  <span class=\"comment\"># 2 directories, 5 files</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 04.将 <code>alpine:3.13.1</code> 镜像从 docker 本地存储（ /var/lib/docker/image） push 到 registry B中(实际上替代 docker push 功能)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在  /var/lib/docker/ 目录中此处主要关心 image (主要存放镜像中layer层的元数据) 和 overlay2 (各层的具体信息)</span></span><br><span class=\"line\">docker images alpine:3.13.1</span><br><span class=\"line\">  <span class=\"comment\"># REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span></span><br><span class=\"line\">  <span class=\"comment\"># alpine       3.13.1    e50c909a8df2   11 months ago   5.61MB</span></span><br><span class=\"line\"></span><br><span class=\"line\">skopeo copy --insecure-policy --dest-tls-verify=<span class=\"literal\">false</span> --dest-authfile /root/.docker/config.json docker-daemon:alpine:3.13.1 docker://harbor.weiyigeek.top/devops/alpine:3.13.1</span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 1119ff37d4a9 done</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying config e50c909a8d done</span></span><br><span class=\"line\">  <span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\">  <span class=\"comment\"># Storing signatures</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220120200048.png\" alt=\"WeiyiGeek.harbor仓库中的alpine镜像\" title=\"\" class=\"\">\n                <p>WeiyiGeek.harbor仓库中的alpine镜像</p>\n            </figure>\n<p><br></p>\n<h4 id=\"Skopeo-sync-镜像同步命令\"><a href=\"#Skopeo-sync-镜像同步命令\" class=\"headerlink\" title=\"Skopeo sync - 镜像同步命令\"></a>Skopeo sync - 镜像同步命令</h4><p>描述: Skopeo sync可以在容器仓库和本地目录之间同步镜像，其功能类似于阿里云的 image-syncer (<a href=\"https://github.com/AliyunContainerService/image-syncer\" target=\"_blank\" rel=\"noopener\">https://github.com/AliyunContainerService/image-syncer</a>) 工具, 实际上其比 image-syncer 更强大、灵活性更强一些，废话不多说实践为王。</p>\n<p>skopeo sync 镜像同步文件示例:</p>\n<p>步骤 01.将仓库中所有busybox镜像版本同步到本地目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --src docker --dest dir harbor.weiyigeek.top/devops/busybox /tmp</span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Tag presence check                            imagename=harbor.weiyigeek.top/devops/busybox tagged=false</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Getting tags                                  image=harbor.weiyigeek.top/devops/busybox</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Copying image ref 1/1                         from=\"docker://harbor.weiyigeek.top/devops/busybox:latest\" to=\"dir:/tmp/busybox:latest\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 5cc84ad355aa done</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying config beae173cca done</span></span><br><span class=\"line\">  <span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\">  <span class=\"comment\"># Storing signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Synced 1 images from 1 sources</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ tree -h /tmp/busybox:latest</span><br><span class=\"line\">/tmp/busybox:latest</span><br><span class=\"line\">├── [755K]  5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa</span><br><span class=\"line\">├── [1.4K]  beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a</span><br><span class=\"line\">├── [ 527]  manifest.json</span><br><span class=\"line\">└── [  33]  version</span><br><span class=\"line\">0 directories, 4 files</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤 02.从本地目录<code>/tmp/</code>同步到 docker 的 hub 容器仓库中，此外我们可以通过浏览器看到 <code>weiyigeek</code> 用户下的 <code>busybox</code> 镜像 (<a href=\"https://hub.docker.com/u/weiyigeek)。\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/u/weiyigeek)。</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo sync --insecure-policy --dest-tls-verify=<span class=\"literal\">false</span> --src dir --dest docker /tmp weiyigeek</span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Copying image ref 1/1                         from=\"dir:/tmp/busybox:latest\" to=\"docker://weiyigeek/busybox:latest\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 5cc84ad355aa skipped: already exists</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying config beae173cca done</span></span><br><span class=\"line\">  <span class=\"comment\"># Writing manifest to image destination</span></span><br><span class=\"line\">  <span class=\"comment\"># Storing signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO[0021] Synced 1 images from 1 sources</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220120204336.png\" alt=\"WeiyiGeek.hub-docker\" title=\"\" class=\"\">\n                <p>WeiyiGeek.hub-docker</p>\n            </figure></p>\n<p><br></p>\n<p>步骤 03.从hub容器仓库中同步alpine-jenkins-jnlp:v2.285镜像到本地临时容器仓库中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> --src docker --dest docker weiyigeek/alpine-jenkins-jnlp:v2.285 192.168.12.111:5000/</span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Tag presence check imagename=\"weiyigeek/alpine-jenkins-jnlp:v2.285\" tagged=true</span></span><br><span class=\"line\">  <span class=\"comment\"># INFO[0000] Copying image ref 1/1 from=\"docker://weiyigeek/alpine-jenkins-jnlp:v2.285\" to=\"docker://192.168.12.111:5000/alpine-jenkins-jnlp:v2.285\"</span></span><br><span class=\"line\">  <span class=\"comment\"># Getting image source signatures</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 68517a8c32d3 [======&gt;-------------------------------] 45.0MiB / 255.7MiB</span></span><br><span class=\"line\">  <span class=\"comment\"># Copying blob 4c0d98bf9879 done</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤 04.以配置文件方式进行同步, 首先我们需要准备一个需要同步的资源清单。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># YAML 文件内容（用于 **--src yaml** 的源）</span></span><br><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span> &gt; skopeo-sync.yml</span><br><span class=\"line\">registry.example.com:</span><br><span class=\"line\">  images:</span><br><span class=\"line\">    busybox: []</span><br><span class=\"line\">    redis:</span><br><span class=\"line\">      - <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">      - <span class=\"string\">\"2.0\"</span></span><br><span class=\"line\">      - <span class=\"string\">\"sha256:111111\"</span></span><br><span class=\"line\">  images-by-tag-regex:</span><br><span class=\"line\">      nginx: ^1\\.13\\.[12]-alpine-perl$</span><br><span class=\"line\">  credentials:</span><br><span class=\"line\">      username: john</span><br><span class=\"line\">      password: this is a secret</span><br><span class=\"line\">  tls-verify: <span class=\"literal\">true</span></span><br><span class=\"line\">  cert-dir: /home/john/certs</span><br><span class=\"line\">quay.io:</span><br><span class=\"line\">  tls-verify: <span class=\"literal\">false</span></span><br><span class=\"line\">  images:</span><br><span class=\"line\">    coreos/etcd:</span><br><span class=\"line\">      - latest</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以yaml文件方式进行同步镜像到 my-registry.local.lan/repo/ 仓库中</span></span><br><span class=\"line\">$ skopeo sync --src yaml --dest docker skopeo-sync.yml my-registry.local.lan/repo/</span><br></pre></td></tr></table></figure></p>\n<p>skopeo-sync.yml 文件中镜像匹配复制镜像说明:</p>\n<ul>\n<li>registry.example.com/busybox : 所有版本的镜像.</li>\n<li>registry.example.com/redis : 标记为“1.0”和“2.0”的图像以及带有摘要的图像”sha256:0000000000000000000000000000000011111111111111111111111111111111”.</li>\n<li>registry.example.com/nginx : 图片标记为“1.13.1-alpine-perl”和“1.13.2-alpine-perl”.</li>\n<li>quay.io/coreos/etcd : 拉取最新版本的镜像。</li>\n</ul>\n<p><br></p>\n<h4 id=\"Skopeo-list-tags-仓库中镜像tag查看\"><a href=\"#Skopeo-list-tags-仓库中镜像tag查看\" class=\"headerlink\" title=\"Skopeo list-tags - 仓库中镜像tag查看\"></a>Skopeo list-tags - 仓库中镜像tag查看</h4><p>描述: 利用该命令我们可以列出 registry 上的某个镜像的所有 tag ，它是使用标准的 registry API 来获取镜像 tag。</p>\n<p>简单示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ skopeo list-tags docker://harbor.weiyigeek.top/devops/busybox:latest</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Skopeo-delete-删除仓库中镜像Tag\"><a href=\"#Skopeo-delete-删除仓库中镜像Tag\" class=\"headerlink\" title=\"Skopeo delete - 删除仓库中镜像Tag\"></a>Skopeo delete - 删除仓库中镜像Tag</h4><p>描述: 使用该命令我们可以删除镜像Tag,注意此处仅仅只是通过registry API 来删除镜像的 tag（即删除了 tag 对 manifests 文件的引用）并非真正将镜像删除掉，如果想要删除镜像的 layer 还是需要通过 registry GC 的方式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.利用skopeo delete</span></span><br><span class=\"line\">$ skopeo delete docker://harbor.weiyigeek.top/devops/busybox:latest --debug</span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Loading registries configuration \"/etc/containers/registries.conf\"</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Found credentials for harbor.weiyigeek.top in credential helper containers-auth.json in file /home/weiyigeek/.docker/config.json</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Using registries.d directory /etc/containers/registries.d for sigstore configuration</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000]  No signature storage configuration found for harbor.weiyigeek.top/devops/busybox:latest, using built-in default file:///home/weiyigeek/.local/share/containers/sigstore</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Looking for TLS certificates and private keys in /etc/docker/certs.d/harbor.weiyigeek.top</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000]  crt: /etc/docker/certs.d/harbor.weiyigeek.top/harbor.crt</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] GET https://harbor.weiyigeek.top/v2/</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Ping https://harbor.weiyigeek.top/v2/ status 401</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] GET https://harbor.weiyigeek.top/service/token?account=WeiyiGeek&amp;scope=repository%3Adevops%2Fbusybox%3A%2A&amp;service=harbor-registry</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] GET https://harbor.weiyigeek.top/v2/devops/busybox/manifests/latest</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] DELETE https://harbor.weiyigeek.top/v2/devops/busybox/manifests/sha256:62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee</span></span><br><span class=\"line\">  <span class=\"comment\"># DEBU[0000] Deleting /home/weiyigeek/.local/share/containers/sigstore/devops/busybox@sha256=62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee/signature-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.利用curl 命令进行registery进行删除Tag。</span></span><br><span class=\"line\">curl --header <span class=\"string\">\"Accept: application/vnd.docker.distribution.manifest.v2+json\"</span> -I -X GET http://192.168.12.111:5000/v2/busybox/manifests/latest</span><br><span class=\"line\">  <span class=\"comment\"># HTTP/1.1 200 OK</span></span><br><span class=\"line\">  <span class=\"comment\"># Content-Length: 527</span></span><br><span class=\"line\">  <span class=\"comment\"># Content-Type: application/vnd.docker.distribution.manifest.v2+json</span></span><br><span class=\"line\">  <span class=\"comment\"># Docker-Content-Digest: sha256:62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee</span></span><br><span class=\"line\">  <span class=\"comment\"># Docker-Distribution-Api-Version: registry/2.0</span></span><br><span class=\"line\">  <span class=\"comment\"># Etag: \"sha256:62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee\"</span></span><br><span class=\"line\">  <span class=\"comment\"># X-Content-Type-Options: nosniff</span></span><br><span class=\"line\">  <span class=\"comment\"># Date: Thu, 20 Jan 2022 13:18:28 GMT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一把梭织搞定</span></span><br><span class=\"line\">Docker-Content-Digest=$(curl -s --header <span class=\"string\">\"Accept: application/vnd.docker.distribution.manifest.v2+json\"</span> -I -X GET http://192.168.12.111:5000/v2/busybox/manifests/latest | grep <span class=\"string\">\"Docker-Content-Digest\"</span> | cut -d <span class=\"string\">' '</span> -f 2)</span><br><span class=\"line\">curl -I -X DELETE http://192.168.12.111:5000/v2/busybox/manifests/<span class=\"variable\">$&#123;Docker-Content-Digest&#125;</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"0x03-镜像同步最佳实践\"><a href=\"#0x03-镜像同步最佳实践\" class=\"headerlink\" title=\"0x03 镜像同步最佳实践\"></a>0x03 镜像同步最佳实践</h2><p>本章节，主要参考我前同事木子博客(<a href=\"https://blog.k8s.li/skopeo.html)。\" target=\"_blank\" rel=\"noopener\">https://blog.k8s.li/skopeo.html)。</a></p>\n<h3 id=\"1-指定文本中镜像同步\"><a href=\"#1-指定文本中镜像同步\" class=\"headerlink\" title=\"1.指定文本中镜像同步\"></a>1.指定文本中镜像同步</h3><p>假如,给你一个镜像列表 images-list.txt, 其格式如下, 我们可以直接采用shell脚本调用skopeo进行执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># images-list.txt</span></span><br><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span> &gt; images-list.txt</span><br><span class=\"line\">kubesphere/kube-apiserver:v1.20.6</span><br><span class=\"line\">kubesphere/kube-scheduler:v1.20.6</span><br><span class=\"line\">kubesphere/kube-proxy:v1.20.6</span><br><span class=\"line\">kubesphere/kube-controller-manager:v1.20.6</span><br><span class=\"line\">kubesphere/kube-apiserver:v1.19.8</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><strong>同步的shell脚本 skopeo-copy.sh</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">GREEN_COL=<span class=\"string\">\"\\\\033[32;1m\"</span></span><br><span class=\"line\">RED_COL=<span class=\"string\">\"\\\\033[1;31m\"</span></span><br><span class=\"line\">NORMAL_COL=<span class=\"string\">\"\\\\033[0;39m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">SOURCE_REGISTRY=<span class=\"variable\">$1</span></span><br><span class=\"line\">TARGET_REGISTRY=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># shell 变量赋值，当没有从命令行中传递值给SOURCE_REGISTRY和TARGET_REGISTRY变量时，便采用下述值进行覆盖。</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;IMAGES_LIST_FILE:=\"images-list.txt\"&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;TARGET_REGISTRY:=\"hub.k8s.li\"&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;SOURCE_REGISTRY:=\"docker.io\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">BLOBS_PATH=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\">REPO_PATH=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eo pipefail</span><br><span class=\"line\"></span><br><span class=\"line\">CURRENT_NUM=0</span><br><span class=\"line\">ALL_IMAGES=<span class=\"string\">\"<span class=\"variable\">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>\"</span></span><br><span class=\"line\">TOTAL_NUMS=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ALL_IMAGES&#125;</span>\"</span> | wc -l)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># shopeo 拷贝函数，注意其传递的参数，此处值得学习记录。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">skopeo_copy</span></span>() &#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> skopeo copy --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> \\</span><br><span class=\"line\"> --override-arch amd64 --override-os linux -q docker://<span class=\"variable\">$1</span> docker://<span class=\"variable\">$2</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$GREEN_COL</span> Progress: <span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>/<span class=\"variable\">$&#123;TOTAL_NUMS&#125;</span> sync <span class=\"variable\">$1</span> to <span class=\"variable\">$2</span> successful <span class=\"variable\">$NORMAL_COL</span>\"</span></span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$RED_COL</span> Progress: <span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>/<span class=\"variable\">$&#123;TOTAL_NUMS&#125;</span> sync <span class=\"variable\">$1</span> to <span class=\"variable\">$2</span> failed <span class=\"variable\">$NORMAL_COL</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"> <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用拷贝函数并记录当前执行序号。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;ALL_IMAGES&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\"> <span class=\"built_in\">let</span> CURRENT_NUM=<span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class=\"line\"> skopeo_copy <span class=\"variable\">$&#123;SOURCE_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;image&#125;</span> <span class=\"variable\">$&#123;TARGET_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;image&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>执行命令和结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash sync.sh docker.io localhost:5000</span><br><span class=\"line\">Progress: 1/143 sync docker.io/alpine:3.14 to localhost:5000/alpine:3.14 successful</span><br><span class=\"line\">Progress: 2/143 sync docker.io/busybox:1.31.1 to localhost:5000/busybox:1.31.1 successful</span><br><span class=\"line\">....</span><br><span class=\"line\">Progress: 142/143 sync docker.io/weaveworks/scope:1.13.0 to localhost:5000/weaveworks/scope:1.13.0 successful</span><br><span class=\"line\">Progress: 143/143 sync docker.io/wordpress:4.8-apache to localhost:5000/wordpress:4.8-apache successful</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-使用-registry-存储特性同步\"><a href=\"#2-使用-registry-存储特性同步\" class=\"headerlink\" title=\"2.使用 registry 存储特性同步\"></a>2.使用 registry 存储特性同步</h3><p>描述: 将镜像从 registry 中同步到本地目录，使用 registry 存储的特性，将本地目录中的镜像转换成 registry 存储的格式, 这样的好处就是可以去除一些 skopeo dir 中重复的 layers，减少镜像的总大小。</p>\n<p>convert-images.sh<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eo pipefail</span><br><span class=\"line\"></span><br><span class=\"line\">GREEN_COL=<span class=\"string\">\"\\\\033[32;1m\"</span></span><br><span class=\"line\">RED_COL=<span class=\"string\">\"\\\\033[1;31m\"</span></span><br><span class=\"line\">NORMAL_COL=<span class=\"string\">\"\\\\033[0;39m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 命令行参数</span></span><br><span class=\"line\">SOURCE_REGISTRY=<span class=\"variable\">$1</span></span><br><span class=\"line\">TARGET_REGISTRY=<span class=\"variable\">$2</span></span><br><span class=\"line\">IMAGES_DIR=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\">: <span class=\"variable\">$&#123;IMAGES_DIR:=\"images\"&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;IMAGES_LIST_FILE:=\"images-list.txt\"&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;SOURCE_REGISTRY:=\"docker.io\"&#125;</span></span><br><span class=\"line\">: <span class=\"variable\">$&#123;TARGET_REGISTRY:=\"hub.k8s.li\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hub.k8s.li 仓库服务器中的目录</span></span><br><span class=\"line\">BLOBS_PATH=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\">REPO_PATH=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 记录当前数和总镜像数</span></span><br><span class=\"line\">CURRENT_NUM=0</span><br><span class=\"line\">ALL_IMAGES=<span class=\"string\">\"<span class=\"variable\">$(sed -n '/#/d;s/:/:/p' $&#123;IMAGES_LIST_FILE&#125; | sort -u)</span>\"</span></span><br><span class=\"line\">TOTAL_NUMS=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;ALL_IMAGES&#125;</span>\"</span> | wc -l)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从远程仓库同步指定镜像到本地目录中。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">skopeo_sync</span></span>() &#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> \\</span><br><span class=\"line\"> --override-arch amd64 --override-os linux --src docker --dest dir <span class=\"variable\">$1</span> <span class=\"variable\">$2</span> &gt; /dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$GREEN_COL</span> Progress: <span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>/<span class=\"variable\">$&#123;TOTAL_NUMS&#125;</span> sync <span class=\"variable\">$1</span> to <span class=\"variable\">$2</span> successful <span class=\"variable\">$NORMAL_COL</span>\"</span></span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -e <span class=\"string\">\"<span class=\"variable\">$RED_COL</span> Progress: <span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>/<span class=\"variable\">$&#123;TOTAL_NUMS&#125;</span> sync <span class=\"variable\">$1</span> to <span class=\"variable\">$2</span> failed <span class=\"variable\">$NORMAL_COL</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span> 2</span><br><span class=\"line\"> <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">convert_images</span></span>() &#123;</span><br><span class=\"line\"> rm -rf <span class=\"variable\">$&#123;IMAGES_DIR&#125;</span>; mkdir -p <span class=\"variable\">$&#123;IMAGES_DIR&#125;</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;ALL_IMAGES&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> CURRENT_NUM=<span class=\"variable\">$&#123;CURRENT_NUM&#125;</span>+1</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 取 images-list.txt 文本中的每一行，并分隔存储。</span></span><br><span class=\"line\">  image_name=<span class=\"variable\">$&#123;image%%:*&#125;</span></span><br><span class=\"line\">  image_tag=<span class=\"variable\">$&#123;image##*:&#125;</span></span><br><span class=\"line\">  image_repo=<span class=\"variable\">$&#123;image%%/*&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 函数调用 从仓库同步镜像到本地images目录</span></span><br><span class=\"line\">  skopeo_sync <span class=\"variable\">$&#123;SOURCE_REGISTRY&#125;</span>/<span class=\"variable\">$&#123;image&#125;</span> <span class=\"variable\">$&#123;IMAGES_DIR&#125;</span>/<span class=\"variable\">$&#123;image_repo&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 在本地images目录中，取得get image manifest sha256sum 信息</span></span><br><span class=\"line\">  manifest=<span class=\"string\">\"<span class=\"variable\">$&#123;IMAGES_DIR&#125;</span>/<span class=\"variable\">$&#123;image&#125;</span>/manifest.json\"</span></span><br><span class=\"line\">  manifest_sha256=$(sha256sum <span class=\"variable\">$&#123;manifest&#125;</span> | awk <span class=\"string\">'&#123;print $1&#125;'</span>)      <span class=\"comment\"># 62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee</span></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;BLOBS_PATH&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256:0:2&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256&#125;</span> <span class=\"comment\"># docker/registry/v2/blobs/sha256/62/62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732dee</span></span><br><span class=\"line\">  ln -f <span class=\"variable\">$&#123;manifest&#125;</span> <span class=\"variable\">$&#123;BLOBS_PATH&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256:0:2&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/data  <span class=\"comment\">#  该 data 文件实际上是镜像的 manifest.json 文件。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># make image repositories dir</span></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/index/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># create image tag manifest link file</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/link  <span class=\"comment\"># sha256:62ffc2ed7554e4c6d360bce40bbcf196573dd27c4ce080641a2c59867e732deer</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/current/link</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/index/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/link</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># link image layers file to registry blobs dir</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> $(sed <span class=\"string\">'/v1Compatibility/d'</span> <span class=\"variable\">$&#123;manifest&#125;</span> | grep -Eo <span class=\"string\">\"\\b[a-f0-9]&#123;64&#125;\\b\"</span>); <span class=\"keyword\">do</span>  <span class=\"comment\"># 匹配 manifest.json 中\"digest\"两个不带sha256的值</span></span><br><span class=\"line\">    mkdir -p <span class=\"variable\">$&#123;BLOBS_PATH&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>                 <span class=\"comment\"># 5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa 、 beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a</span></span><br><span class=\"line\">    mkdir -p <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_layers/sha256/<span class=\"variable\">$&#123;layer&#125;</span>  <span class=\"comment\"># 5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa 、 beae173ccac6ad749f76713cf4440fe3d21d1043fe616dfbe30775815d1d0f6a</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;layer&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;REPO_PATH&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_layers/sha256/<span class=\"variable\">$&#123;layer&#125;</span>/link  <span class=\"comment\"># sha256:5cc84ad355aaa64f46ea9c7bbcc319a9d808ab15088a27209c9e70ef86e5a2aa</span></span><br><span class=\"line\">    ln -f <span class=\"variable\">$&#123;IMAGES_DIR&#125;</span>/<span class=\"variable\">$&#123;image&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span> <span class=\"variable\">$&#123;BLOBS_PATH&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data     <span class=\"comment\"># 复制images目录中 \"application/vnd.docker.container.image.v1+json\" 容器配置 config 与 多个 \"application/vnd.docker.image.rootfs.diff.tar.gzip\" layer </span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"> <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">convert_images</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>install.sh : 使用这个脚本将 registry 存储中的镜像转换成 skopeo dir 的方式，然后再将镜像同步到 registry 中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">REGISTRY_DOMAIN=<span class=\"string\">\"harbor.k8s.li\"</span></span><br><span class=\"line\">REGISTRY_PATH=<span class=\"string\">\"/var/lib/registry\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到 registry 存储主目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;REGISTRY_PATH&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">gen_skopeo_dir</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"comment\"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class=\"line\">    BLOB_DIR=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\">    REPO_DIR=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义生成 skopeo 目录</span></span><br><span class=\"line\">    SKOPEO_DIR=<span class=\"string\">\"docker/skopeo\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> $(find <span class=\"variable\">$&#123;REPO_DIR&#125;</span> -<span class=\"built_in\">type</span> d -name <span class=\"string\">\"current\"</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class=\"line\">        name=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;image&#125;</span> | awk -F <span class=\"string\">'/'</span> <span class=\"string\">'&#123;print $5\"/\"$6\":\"$9&#125;'</span>)</span><br><span class=\"line\">        link=$(cat <span class=\"variable\">$&#123;image&#125;</span>/link | sed <span class=\"string\">'s/sha256://'</span>)</span><br><span class=\"line\">        mfs=<span class=\"string\">\"<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;link:0:2&#125;</span>/<span class=\"variable\">$&#123;link&#125;</span>/data\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建镜像的硬链接需要的目录</span></span><br><span class=\"line\">        mkdir -p <span class=\"string\">\"<span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class=\"line\">        ln <span class=\"variable\">$&#123;mfs&#125;</span> <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>/manifest.json</span><br><span class=\"line\">        <span class=\"comment\"># 使用正则匹配出所有的 sha256 值，然后排序去重</span></span><br><span class=\"line\">        layers=$(grep -Eo <span class=\"string\">\"\\b[a-f0-9]&#123;64&#125;\\b\"</span> <span class=\"variable\">$&#123;mfs&#125;</span> | sort -n | uniq)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;layers&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"comment\"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class=\"line\">            ln <span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">sync_image</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> project <span class=\"keyword\">in</span> $(ls <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">        skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> \\</span><br><span class=\"line\">        --src dir --dest docker <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;project&#125;</span> <span class=\"variable\">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class=\"variable\">$&#123;project&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gen_skopeo_dir</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: 此种方式是有些复杂对于大镜像的复制是推荐的, 而对于一些小镜像且显得多余。</p>\n<p><br></p>\n<h3 id=\"3-从-registry-存储中-select-出镜像进行同步\"><a href=\"#3-从-registry-存储中-select-出镜像进行同步\" class=\"headerlink\" title=\"3.从 registry 存储中 select 出镜像进行同步\"></a>3.从 registry 存储中 select 出镜像进行同步</h3><p>描述: 先将镜像同步到一个 registry 中，再将镜像从 registry 存储中捞出来，该 registry 可以当作一个镜像存储的池子，我们使用 Linux 中硬链接的特性将镜像”复制”一份出来，然后再打一个 tar 包, 这样做的好处就是每次打包镜像的时候都能复用历史的镜像数据，而且性能极快。</p>\n<p>步骤 01.先将镜像同步到一个固定的 registry 中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash skopeo-copy.sh docker.io localhost:5000</span><br></pre></td></tr></table></figure></p>\n<p>步骤 02.使用该脚本将镜像从 registry 存储中捞出来<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eo pipefail</span><br><span class=\"line\"><span class=\"comment\"># 命令行变量</span></span><br><span class=\"line\">IMAGES_LIST=<span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">REGISTRY_PATH=<span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">OUTPUT_DIR=<span class=\"string\">\"<span class=\"variable\">$3</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Registry 仓库数据目录</span></span><br><span class=\"line\">BLOB_DIR=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\">REPO_DIR=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断输出目录是否存在如不存在则移除。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  rm -rf <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> $(find <span class=\"variable\">$&#123;IMAGES_LIST&#125;</span> -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.list\"</span> | xargs grep -Ev <span class=\"string\">'^#|^/'</span> | grep <span class=\"string\">':'</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 镜像名称和Tag</span></span><br><span class=\"line\">  image_name=<span class=\"variable\">$&#123;image%%:*&#125;</span></span><br><span class=\"line\">  image_tag=<span class=\"variable\">$&#123;image##*:&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># link 路径获取</span></span><br><span class=\"line\">  tag_link=<span class=\"variable\">$&#123;REGISTRY_PATH&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/current/link</span><br><span class=\"line\">  manifest_sha256=$(sed <span class=\"string\">'s/sha256://'</span> <span class=\"variable\">$&#123;tag_link&#125;</span>)</span><br><span class=\"line\">  manifest=<span class=\"variable\">$&#123;REGISTRY_PATH&#125;</span>/<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256:0:2&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/data</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256:0:2&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 强制硬链接到指定目录</span></span><br><span class=\"line\">  ln -f <span class=\"variable\">$&#123;manifest&#125;</span> <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256:0:2&#125;</span>/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/data</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># make image repositories dir</span></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/&#123;_uploads,_layers,_manifests&#125;</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span></span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/&#123;current,index/sha256&#125;</span><br><span class=\"line\">  mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/index/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># create image tag manifest link file  </span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/current/link</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/revisions/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/link</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;manifest_sha256&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_manifests/tags/<span class=\"variable\">$&#123;image_tag&#125;</span>/index/sha256/<span class=\"variable\">$&#123;manifest_sha256&#125;</span>/link</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 强制创建 /docker/registry/v2/blobs/ 各 layer data 文件到指定目录之中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> $(sed <span class=\"string\">'/v1Compatibility/d'</span> <span class=\"variable\">$&#123;manifest&#125;</span> | grep -Eo <span class=\"string\">'\\b[a-f0-9]&#123;64&#125;\\b'</span> | sort -u); <span class=\"keyword\">do</span></span><br><span class=\"line\">      mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span></span><br><span class=\"line\">      mkdir -p <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_layers/sha256/<span class=\"variable\">$&#123;layer&#125;</span></span><br><span class=\"line\">      ln -f <span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> -n <span class=\"string\">\"sha256:<span class=\"variable\">$&#123;layer&#125;</span>\"</span> &gt; <span class=\"variable\">$&#123;OUTPUT_DIR&#125;</span>/<span class=\"variable\">$&#123;REPO_DIR&#125;</span>/<span class=\"variable\">$&#123;image_name&#125;</span>/_layers/sha256/<span class=\"variable\">$&#123;layer&#125;</span>/link</span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"kubernetes","path":"api/categories/kubernetes.json"},{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Harbor","path":"api/tags/Harbor.json"},{"name":"Skopeo","path":"api/tags/Skopeo.json"}]}