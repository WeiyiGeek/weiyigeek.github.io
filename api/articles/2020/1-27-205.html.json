{"title":"Linux操作系统异常报错问题与实践解决方法","slug":"系统运维/Linux/运维实践/异常排错/Linux操作系统异常报错问题与实践解决方法","date":"2020-01-27T05:34:30.000Z","updated":"2023-01-31T02:29:09.225Z","url":"2020/1-27-205.html","path":"api/articles/2020/1-27-205.html.json","covers":["https://img.weiyigeek.top/2020/1/20200122142247.png","http://s3.51cto.com/wyfs02/M01/5B/62/wKiom1UHmdTxWdHAAADsLgF1AbI735.jpg","https://img.weiyigeek.top/2021/5/20211124130551.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h4><p>描述:本文章主要针对于本人日常运维所遇到的一些性能问题并进行总结解决思路流程;</p>\n<p>无论是 CPU 使用率，还是平均负载，都只是反映系统健康状态的度量指标，而不是问题的根因;</p>\n<p>因此它们的价值主要体现在两个方面：</p>\n<ul>\n<li>一是综合反映当前系统的健康程度，结合监控告警产品，实现快速响应；</li>\n<li>二是初步定位问题方向，缩小排查范围，降低故障恢复时间。</li>\n</ul>\n<p>比如当 CPU iowait 高时，应优先排查磁盘 I/O；当 CPU steal 高时，就优先排查宿主机状态。</p>\n<hr><br><br>#### 0x01 Linux信息收集<br>描述:当我们对异常系统进行处理，必须先进行主机基础信息的收集，以防出错后可以更快的恢复或者求助;<br><br><br>CentOS系列:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"系统版本:<span class=\"variable\">$(cat /etc/redhat-release)</span>\"</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"内核信息:<span class=\"variable\">$(uname -a)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"SeLinux values 设置情况:<span class=\"variable\">$(getenforce)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"用户信息:\\n<span class=\"variable\">$(getent passwd)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"密码信息:\\n<span class=\"variable\">$(getent shadow)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"网络信息:\\n<span class=\"variable\">$(ip addr show)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"CPU信息:<span class=\"variable\">$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"物理CPU数:<span class=\"variable\">$(cat /proc/cpuinfo |grep 'physical id'|sort |uniq|wc -l)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"逻辑CPU数:<span class=\"variable\">$(cat /proc/cpuinfo |grep \"processor\"|wc -l)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"CPU核心数:<span class=\"variable\">$(cat cat /proc/cpuinfo |grep \"cores\"|uniq)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"CPU综合信息:\\n<span class=\"variable\">$(lscpu)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"磁盘UUID信息:\\n<span class=\"variable\">$(blkid)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"磁盘信息:\\n<span class=\"variable\">$(fdisk -l | egrep '/dev|Disk')</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"磁盘分区信息:\\n<span class=\"variable\">$(lsblk)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"磁盘空间信息:\\n<span class=\"variable\">$(df -h)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"挂载信息:\\n<span class=\"variable\">$(mount -l)</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"挂载配置文件:\\n<span class=\"variable\">$(cat /etc/fstab | egrep -v '#|^$')</span>\"</span></span><br></pre></td></tr></table></figure><br><br><br><br>CPU:通过下面的脚本来打印出当前机器的socket，core和thread的数量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Simple print cpu topology</span></span><br><span class=\"line\"><span class=\"comment\"># Author: kodango</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> get_nr_processor()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grep <span class=\"string\">'^processor'</span> /proc/cpuinfo | wc -l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> get_nr_socket()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grep <span class=\"string\">'physical id'</span> /proc/cpuinfo | awk -F: <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">            print $2 | \"sort -un\"&#125;'</span> | wc -l</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> get_nr_siblings()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grep <span class=\"string\">'siblings'</span> /proc/cpuinfo | awk -F: <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">            print $2 | \"sort -un\"&#125;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> get_nr_cores_of_socket()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    grep <span class=\"string\">'cpu cores'</span> /proc/cpuinfo | awk -F: <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">            print $2 | \"sort -un\"&#125;'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'===== CPU Topology Table ====='</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'+--------------+---------+-----------+'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'| Processor ID | Core ID | Socket ID |'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'+--------------+---------+-----------+'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span> <span class=\"string\">'| %-12s | %-7s | %-9s |\\n'</span> <span class=\"variable\">$p_id</span> <span class=\"variable\">$c_id</span> <span class=\"variable\">$s_id</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">'+--------------+---------+-----------+'</span></span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | grep -q <span class=\"string\">\"^processor\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">        p_id=`<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | awk -F: <span class=\"string\">'&#123;print $2&#125;'</span> | tr -d <span class=\"string\">' '</span>`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | grep -q <span class=\"string\">\"^core id\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">        c_id=`<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | awk -F: <span class=\"string\">'&#123;print $2&#125;'</span> | tr -d <span class=\"string\">' '</span>`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | grep -q <span class=\"string\">\"^physical id\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">        s_id=`<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span> | awk -F: <span class=\"string\">'&#123;print $2&#125;'</span> | tr -d <span class=\"string\">' '</span>`</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt; /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk -F: <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">    if ($1 ~ /processor/) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        gsub(/ /,\"\",$2);</span></span><br><span class=\"line\"><span class=\"string\">        p_id=$2;</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else if ($1 ~ /physical id/)&#123;</span></span><br><span class=\"line\"><span class=\"string\">        gsub(/ /,\"\",$2);</span></span><br><span class=\"line\"><span class=\"string\">        s_id=$2;</span></span><br><span class=\"line\"><span class=\"string\">        arr[s_id]=arr[s_id] \" \" p_id</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">END&#123;</span></span><br><span class=\"line\"><span class=\"string\">    for (i in arr)</span></span><br><span class=\"line\"><span class=\"string\">        printf \"Socket %s:%s\\n\", i, arr[i];</span></span><br><span class=\"line\"><span class=\"string\">&#125;'</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'===== CPU Info Summary ====='</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"></span><br><span class=\"line\">nr_processor=`get_nr_processor`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Logical processors: <span class=\"variable\">$nr_processor</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">nr_socket=`get_nr_socket`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Physical socket: <span class=\"variable\">$nr_socket</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">nr_siblings=`get_nr_siblings`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Siblings in one socket: <span class=\"variable\">$nr_siblings</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">nr_cores=`get_nr_cores_of_socket`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Cores in one socket: <span class=\"variable\">$nr_cores</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> nr_cores*=nr_socket</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Cores in total: <span class=\"variable\">$nr_cores</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$nr_cores</span>\"</span> = <span class=\"string\">\"<span class=\"variable\">$nr_processor</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hyper-Threading: off\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Hyper-Threading: on\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'===== END ====='</span></span><br></pre></td></tr></table></figure><br><br><br></hr>\n\n<h4 id=\"0x02-异常解决\"><a href=\"#0x02-异常解决\" class=\"headerlink\" title=\"0x02 异常解决\"></a>0x02 异常解决</h4><p>如何排查用户态 CPU 使用率高？</p>\n<p><strong>问题1.业务服务器 CPU 占用负载高问题</strong><br>用户态 CPU 使用率反映了应用程序的繁忙程度，通常与我们自己写的代码息息相关。因此，当你在做应用发布、配置变更或性能优化时，如果想定位消耗 CPU 最多的 Java 代码，可以遵循如下思路：</p>\n<p>排查思路:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.定位高负载进程 pid 通过观察load average，以及负载评判标准确认服务器是否存在负载较高的情况；</span></span><br><span class=\"line\"><span class=\"variable\">$top</span> -n 1</span><br><span class=\"line\"><span class=\"comment\">#2.找到相关负载进程的子线程PID</span></span><br><span class=\"line\"><span class=\"variable\">$top</span> -Hp [PID]</span><br><span class=\"line\"><span class=\"comment\">#3.将线程PID转换为 16进制，为后面查找 jstack 日志做准备</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"0x%x\"</span> [PID]  <span class=\"comment\">#比如0x431</span></span><br><span class=\"line\"><span class=\"comment\">#4.jstack日志异常查询</span></span><br><span class=\"line\">jstack 1040|vim +/0x431 -</span><br><span class=\"line\"><span class=\"comment\">#5.定位具体的异常业务使用 pwdx 命令根据 pid 找到业务进程路径</span></span><br><span class=\"line\">pwdx [PID]</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200122142247.png\" alt=\"WeiyiGeek.CPU占用率高\" title=\"\" class=\"\">\n                <p>WeiyiGeek.CPU占用率高</p>\n            </figure></p>\n<h4 id=\"关于centos启动报错：Failed-to-start-Crash-recovery-kernel-arming的解决方案\"><a href=\"#关于centos启动报错：Failed-to-start-Crash-recovery-kernel-arming的解决方案\" class=\"headerlink\" title=\"关于centos启动报错：Failed to start Crash recovery kernel arming的解决方案\"></a>关于centos启动报错：Failed to start Crash recovery kernel arming的解决方案</h4><p>在VMware中安装了centos，重启时报错：Failed to start Crash recovery kernel arming</p>\n<p>本质是kdump服务启动失败</p>\n<p>先来说一下，什么是kdump</p>\n<p>Kdump是一个内核崩溃转储机制，在系统崩溃的时候，Kdump将捕获系统信息，这对于针对崩溃的原因非常有帮助。注意，Kdump需要预留一部分系统内存，而且这部分内存对于其他用户是不可用的。</p>\n<p>启动失败的原因</p>\n<p>查看 /etc/grub.conf 文件，发现crashkernel=auto，问题就出在这儿：</p>\n<p>注：centos7 后为：vi /etc/grub2.cfg<br>注：centos7 后uefi为：vi /etc/grub2-uefi.cfg </p>\n<p>系统对crashkernel=auto的定义为：</p>\n<p>如果系统的内存 &lt;= 8 GB 对kdump kernel不会保留任何内容；也就是说，crashkernel=auto 等</p>\n<p>于关掉了机器上的kdump功能；<br>如果系统的内存&gt; 8 GB 但是&lt;= 16 GB，crashkernel=auto会保留256M，等同于crashkernel=256M；<br>如果系统内存&gt; 16GB，crashkernel=auto会保留512M，等同于crashkernel=512M。</p>\n<p>安装虚拟机时，给虚拟机设置的内存为1G，所以说系统关掉了kdump功能，造成了kdump服务启动失败。</p>\n<p>找到了原因，重新给crashkernel设置参数即可：</p>\n<p>在 kdump 的配置中，往往困惑于 crashkernel 的设置。“crashkernel=X@Y”，X 应该多大？ Y</p>\n<p>又应该设在哪里呢？实际我们可以完全省略“@Y”这一部分，这样，kernel 会为我们自动选择</p>\n<p>一个起始地址。而对于 X 的大小，般对 i386/x86_64 的系统， 设为 128M 即可；对于 powerpc</p>\n<p>的系统，则要设为 256M。</p>\n<p>将crashkernel=auto 改为crashkernel=128M 后保存，如果还不能解决问题，改为256m试试<br><figure class=\"image-box\">\n                <img src=\"http://s3.51cto.com/wyfs02/M01/5B/62/wKiom1UHmdTxWdHAAADsLgF1AbI735.jpg\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure><br>重新启动系统，kdump服务启动成功。</p>\n<h3 id=\"Ubuntu-宕机之Failure-File-system-check-of-the-root-filesystem-failed错误。\"><a href=\"#Ubuntu-宕机之Failure-File-system-check-of-the-root-filesystem-failed错误。\" class=\"headerlink\" title=\"Ubuntu 宕机之Failure:File system check of the root filesystem failed错误。\"></a>Ubuntu 宕机之<code>Failure:File system check of the root filesystem failed</code>错误。</h3><p>描述: Linux宕机后重启系统开机报<code>Failure:File system check of the root filesystem failed</code>，由于公司测试的ESXi因为意外断电重启后发现Ubuntu进行入了initramfs模式。<br>问题原因: 联系上下文可发现服务器意外宕机导致虚拟机磁盘出了问题，所以我们需要修复一个文件系统。<br>解决办法: 所以可以通过 fsck 命令来解决，具体为 fsck 加上途中小红框标出的部分。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fsck -yf /dev/mappeer/slave3–vg-root</span><br><span class=\"line\">ctrl+d</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211124130551.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"异常排查","path":"api/categories/异常排查.json"},{"name":"SystemOperation","path":"api/categories/SystemOperation.json"}],"tags":[{"name":"Linux","path":"api/tags/Linux.json"}]}