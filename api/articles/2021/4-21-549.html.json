{"title":"PS常用.NET类型记录和使用命令","slug":"编程世界/Powershell/Cmdlet/编程脚本类命令/PS常用.NET框架类库记录和使用命令","date":"2021-04-21T07:36:30.000Z","updated":"2021-06-09T09:19:32.280Z","url":"2021/4-21-549.html","path":"api/articles/2021/4-21-549.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<p> Powershell调用静态方法<br><a href=\"https://www.cnblogs.com/micro-chen/p/5941659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/micro-chen/p/5941659.html</a></p>\n<p>在PowerShell中是否有类似于 IsNullOrEmpty 的内置函数，用于检查字符串是否为空或空<br>PS C:\\Users\\WeiyiGeek&gt; [string]::IsNullOrEmpty(“ss”)<br>False</p>\n<h3 id=\"DateTime-类\"><a href=\"#DateTime-类\" class=\"headerlink\" title=\"[DateTime]类\"></a>[DateTime]类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#时间加减</span><br><span class=\"line\">PS D:\\&gt; [DateTime]&quot;2019-11-28 15:16:20&quot; - ([DateTime]::Now)</span><br><span class=\"line\">Days              : 0</span><br><span class=\"line\">Hours             : 23</span><br><span class=\"line\">Minutes           : 59</span><br><span class=\"line\">Seconds           : 37</span><br><span class=\"line\">Milliseconds      : 373</span><br><span class=\"line\">Ticks             : 863773731705</span><br><span class=\"line\">TotalDays         : 0.999738115399305</span><br><span class=\"line\">TotalHours        : 23.9937147695833</span><br><span class=\"line\">TotalMinutes      : 1439.622886175</span><br><span class=\"line\">TotalSeconds      : 86377.3731705</span><br><span class=\"line\">TotalMilliseconds : 86377373.1705</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#时间累加</span><br><span class=\"line\">([DateTime]::Now).AddHours(1)</span><br><span class=\"line\">2019年11月27日 16:15:33</span><br><span class=\"line\"></span><br><span class=\"line\">#将一个字符串转换成DateTime类</span><br><span class=\"line\">[System.DateTime]::Parse(&quot;2012-10-13 23:42:55&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#打印1988到2000年的所有闰年</span><br><span class=\"line\">for($year&#x3D;1988;$year -le 2000;$year++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if( [System.DateTime]::IsLeapYear($year) )&#123;</span><br><span class=\"line\">      Write-Output $year</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[System.IO.DriveInfo]::GetDrives() | Format-Table</span><br><span class=\"line\">Name DriveType DriveFormat IsReady AvailableFreeSpace TotalFreeSpace    TotalSize RootDirectory VolumeLabel</span><br><span class=\"line\">---- --------- ----------- ------- ------------------ --------------    --------- ------------- -----------</span><br><span class=\"line\">C:\\      Fixed NTFS           True        23552114688    23552114688 160457101312 C:\\           OS</span><br></pre></td></tr></table></figure>\n<hr>\n\n<h3 id=\"Math-类\"><a href=\"#Math-类\" class=\"headerlink\" title=\"[Math] 类\"></a>[Math] 类</h3><p>描述: 这是.NET中的一个数学类里面定义很多实用的静态方法，其类路径是<code>System.Math</code>;<br>参考路径: <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.math?view=net-5.0\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/api/system.math?view=net-5.0</a></p>\n<p><strong>可用静态方法列表:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字段</span></span><br><span class=\"line\">E\t   <span class=\"comment\">#表示自然对数的底，它由常数 e 指定。</span></span><br><span class=\"line\">PI\t <span class=\"comment\">#表示圆的周长与其直径的比值，由常数 π 指定。</span></span><br><span class=\"line\">Tau\t <span class=\"comment\">#表示一转中的弧度数，由常量 τ 指定。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方法</span></span><br><span class=\"line\">Abs(Decimal)\t</span><br><span class=\"line\">返回 Decimal 数字的绝对值。</span><br><span class=\"line\">Abs(Double)\t</span><br><span class=\"line\">返回双精度浮点数字的绝对值。</span><br><span class=\"line\">Abs(Int16)\t</span><br><span class=\"line\">返回 16 位有符号整数的绝对值。</span><br><span class=\"line\">Abs(Int32)\t</span><br><span class=\"line\">返回 32 位有符号整数的绝对值。</span><br><span class=\"line\">Abs(Int64)\t</span><br><span class=\"line\">返回 64 位有符号整数的绝对值。</span><br><span class=\"line\">Abs(SByte)\t</span><br><span class=\"line\">返回 8 位有符号整数的绝对值。</span><br><span class=\"line\">Abs(Single)\t</span><br><span class=\"line\">返回单精度浮点数字的绝对值。</span><br><span class=\"line\">Acos(Double)\t</span><br><span class=\"line\">返回余弦值为指定数字的角度。</span><br><span class=\"line\">Acosh(Double)\t</span><br><span class=\"line\">返回双曲余弦值为指定数字的角度。</span><br><span class=\"line\">Asin(Double)\t</span><br><span class=\"line\">返回正弦值为指定数字的角度。</span><br><span class=\"line\">Asinh(Double)\t</span><br><span class=\"line\">返回双曲正弦值为指定数字的角度。</span><br><span class=\"line\">Atan(Double)\t</span><br><span class=\"line\">返回正切值为指定数字的角度。</span><br><span class=\"line\">Atan2(Double, Double)\t</span><br><span class=\"line\">返回正切值为两个指定数字的商的角度。</span><br><span class=\"line\">Atanh(Double)\t</span><br><span class=\"line\">返回双曲正切值为指定数字的角度。</span><br><span class=\"line\">BigMul(Int32, Int32)\t</span><br><span class=\"line\">生成两个 32 位数字的完整乘积。</span><br><span class=\"line\">BigMul(Int64, Int64, Int64)\t</span><br><span class=\"line\">生成两个 64 位数的完整乘积。</span><br><span class=\"line\">BigMul(UInt64, UInt64, UInt64)\t</span><br><span class=\"line\">生成两个无符号 64 位数的完整乘积。</span><br><span class=\"line\">BitDecrement(Double)\t</span><br><span class=\"line\">返回小于 x 的下一个最小值。</span><br><span class=\"line\">BitIncrement(Double)\t</span><br><span class=\"line\">返回大于 x 的下一个最大值。</span><br><span class=\"line\">Cbrt(Double)\t</span><br><span class=\"line\">返回指定数字的立方根。</span><br><span class=\"line\">Ceiling(Decimal)\t</span><br><span class=\"line\">返回大于或等于指定的十进制数的最小整数值。</span><br><span class=\"line\">Ceiling(Double)\t</span><br><span class=\"line\">返回大于或等于指定的双精度浮点数的最小整数值。</span><br><span class=\"line\">Clamp(Byte, Byte, Byte)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Decimal, Decimal, Decimal)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Double, Double, Double)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Int16, Int16, Int16)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Int32, Int32, Int32)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Int64, Int64, Int64)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(SByte, SByte, SByte)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(Single, Single, Single)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(UInt16, UInt16, UInt16)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(UInt32, UInt32, UInt32)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">Clamp(UInt64, UInt64, UInt64)\t</span><br><span class=\"line\">返回限制在 min 和 max 范围内（含首尾）的 value。</span><br><span class=\"line\">CopySign(Double, Double)\t</span><br><span class=\"line\">返回一个值，它具有 x 的大小和 y 的符号。</span><br><span class=\"line\">Cos(Double)\t</span><br><span class=\"line\">返回指定角度的余弦值。</span><br><span class=\"line\">Cosh(Double)\t</span><br><span class=\"line\">返回指定角度的双曲余弦值。</span><br><span class=\"line\">DivRem(Int32, Int32, Int32)\t</span><br><span class=\"line\">计算两个 32 位有符号整数的商，并通过输出参数返回余数。</span><br><span class=\"line\">DivRem(Int64, Int64, Int64)\t</span><br><span class=\"line\">计算两个 64 位有符号整数的商，并通过输出参数返回余数。</span><br><span class=\"line\">Exp(Double)\t</span><br><span class=\"line\">返回 e 的指定次幂。</span><br><span class=\"line\">Floor(Decimal)\t</span><br><span class=\"line\">返回小于或等于指定小数的最大整数值。</span><br><span class=\"line\">Floor(Double)\t</span><br><span class=\"line\">返回小于或等于指定双精度浮点数的最大整数值。</span><br><span class=\"line\">FusedMultiplyAdd(Double, Double, Double)\t</span><br><span class=\"line\">返回 (x * y) + z，舍入为一个三元运算。</span><br><span class=\"line\">IEEERemainder(Double, Double)\t</span><br><span class=\"line\">返回一指定数字被另一指定数字相除的余数。</span><br><span class=\"line\">ILogB(Double)\t</span><br><span class=\"line\">返回指定数字以 2 为底的整数对数。</span><br><span class=\"line\">Log(Double)\t</span><br><span class=\"line\">返回指定数字的自然对数（底为 e）。</span><br><span class=\"line\">Log(Double, Double)\t</span><br><span class=\"line\">返回指定数字在使用指定底时的对数。</span><br><span class=\"line\">Log10(Double)\t</span><br><span class=\"line\">返回指定数字以 10 为底的对数。</span><br><span class=\"line\">Log2(Double)\t</span><br><span class=\"line\">返回指定数字以 2 为底的对数。</span><br><span class=\"line\">Max(Byte, Byte)\t</span><br><span class=\"line\">返回两个 8 位无符号整数中较大的一个。</span><br><span class=\"line\">Max(Decimal, Decimal)\t</span><br><span class=\"line\">返回两个十进制数中较大的一个。</span><br><span class=\"line\">Max(Double, Double)\t</span><br><span class=\"line\">返回两个双精度浮点数字中较大的一个。</span><br><span class=\"line\">Max(Int16, Int16)\t</span><br><span class=\"line\">返回两个 16 位有符号的整数中较大的一个。</span><br><span class=\"line\">Max(Int32, Int32)\t</span><br><span class=\"line\">返回两个 32 位有符号的整数中较大的一个。</span><br><span class=\"line\">Max(Int64, Int64)\t</span><br><span class=\"line\">返回两个 64 位有符号的整数中较大的一个。</span><br><span class=\"line\">Max(SByte, SByte)\t</span><br><span class=\"line\">返回两个 8 位有符号的整数中较大的一个。</span><br><span class=\"line\">Max(Single, Single)\t</span><br><span class=\"line\">返回两个单精度浮点数字中较大的一个。</span><br><span class=\"line\">Max(UInt16, UInt16)\t</span><br><span class=\"line\">返回两个 16 位无符号整数中较大的一个。</span><br><span class=\"line\">Max(UInt32, UInt32)\t</span><br><span class=\"line\">返回两个 32 位无符号整数中较大的一个。</span><br><span class=\"line\">Max(UInt64, UInt64)\t</span><br><span class=\"line\">返回两个 64 位无符号整数中较大的一个。</span><br><span class=\"line\">MaxMagnitude(Double, Double)\t</span><br><span class=\"line\">返回两个双精度浮点数字中的较大值。</span><br><span class=\"line\">Min(Byte, Byte)\t</span><br><span class=\"line\">返回两个 8 位无符号整数中较小的一个。</span><br><span class=\"line\">Min(Decimal, Decimal)\t</span><br><span class=\"line\">返回两个十进制数中较小的一个。</span><br><span class=\"line\">Min(Double, Double)\t</span><br><span class=\"line\">返回两个双精度浮点数字中较小的一个。</span><br><span class=\"line\">Min(Int16, Int16)\t</span><br><span class=\"line\">返回两个 16 位有符号整数中较小的一个。</span><br><span class=\"line\">Min(Int32, Int32)\t</span><br><span class=\"line\">返回两个 32 位有符号整数中较小的一个。</span><br><span class=\"line\">Min(Int64, Int64)\t</span><br><span class=\"line\">返回两个 64 位有符号整数中较小的一个。</span><br><span class=\"line\">Min(SByte, SByte)\t</span><br><span class=\"line\">返回两个 8 位有符号整数中较小的一个。</span><br><span class=\"line\">Min(Single, Single)\t</span><br><span class=\"line\">返回两个单精度浮点数字中较小的一个。</span><br><span class=\"line\">Min(UInt16, UInt16)\t</span><br><span class=\"line\">返回两个 16 位无符号整数中较小的一个。</span><br><span class=\"line\">Min(UInt32, UInt32)\t</span><br><span class=\"line\">返回两个 32 位无符号整数中较小的一个。</span><br><span class=\"line\">Min(UInt64, UInt64)\t</span><br><span class=\"line\">返回两个 64 位无符号整数中较小的一个。</span><br><span class=\"line\">MinMagnitude(Double, Double)\t</span><br><span class=\"line\">返回两个双精度浮点数字中的较小值。</span><br><span class=\"line\">Pow(Double, Double)\t</span><br><span class=\"line\">返回指定数字的指定次幂。</span><br><span class=\"line\">Round(Decimal)\t</span><br><span class=\"line\">将小数值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</span><br><span class=\"line\">Round(Decimal, Int32)\t</span><br><span class=\"line\">将小数值舍入到指定数量的小数位，并将中点值舍入到最接近的偶数。</span><br><span class=\"line\">Round(Decimal, Int32, MidpointRounding)\t</span><br><span class=\"line\">将小数值舍入到指定数量的小数位，并为中点值使用指定的舍入规则。</span><br><span class=\"line\">Round(Decimal, MidpointRounding)\t</span><br><span class=\"line\">将小数值舍入到最接近的整数，并为中点值使用指定的舍入规则。</span><br><span class=\"line\">Round(Double)\t</span><br><span class=\"line\">将双精度浮点值舍入到最接近的整数值，并将中点值舍入到最接近的偶数。</span><br><span class=\"line\">Round(Double, Int32)\t</span><br><span class=\"line\">将双精度浮点值舍入到指定数量的小数位，并将中点值舍入到最接近的偶数。</span><br><span class=\"line\">Round(Double, Int32, MidpointRounding)\t</span><br><span class=\"line\">将双精度浮点值舍入到指定数量的小数位，并为中点值使用指定的舍入规则。</span><br><span class=\"line\">Round(Double, MidpointRounding)\t</span><br><span class=\"line\">将双精度浮点值舍入到最接近的整数，并为中点值使用指定的舍入约定。</span><br><span class=\"line\">ScaleB(Double, Int32)\t</span><br><span class=\"line\">返回有效计算的 x * 2^n。</span><br><span class=\"line\">Sign(Decimal)\t</span><br><span class=\"line\">返回表示十进制数符号的整数。</span><br><span class=\"line\">Sign(Double)\t</span><br><span class=\"line\">返回一个整数，该整数表示双精度浮点数字的符号。</span><br><span class=\"line\">Sign(Int16)\t</span><br><span class=\"line\">返回表示 16 位带符号整数的整数。</span><br><span class=\"line\">Sign(Int32)\t</span><br><span class=\"line\">返回表示 32 位带符号整数的整数。</span><br><span class=\"line\">Sign(Int64)\t</span><br><span class=\"line\">返回一个整数，该整数指示 64 位带符号整数的符号。</span><br><span class=\"line\">Sign(SByte)\t</span><br><span class=\"line\">返回一个整数，该整数指示 8 位带符号整数的符号。</span><br><span class=\"line\">Sign(Single)\t</span><br><span class=\"line\">返回一个整数，该整数表示单精度浮点数字的符号。</span><br><span class=\"line\">Sin(Double)\t</span><br><span class=\"line\">返回指定角度的正弦值。</span><br><span class=\"line\">Sinh(Double)\t</span><br><span class=\"line\">返回指定角度的双曲正弦值。</span><br><span class=\"line\">Sqrt(Double)\t</span><br><span class=\"line\">返回指定数字的平方根。</span><br><span class=\"line\">Tan(Double)\t</span><br><span class=\"line\">返回指定角度的正切值。</span><br><span class=\"line\">Tanh(Double)\t</span><br><span class=\"line\">返回指定角度的双曲正切值。</span><br><span class=\"line\">Truncate(Decimal)\t</span><br><span class=\"line\">计算一个数字的整数部分。</span><br><span class=\"line\">Truncate(Double)\t</span><br><span class=\"line\">计算指定双精度浮点数的整数部分。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.简单使用求绝对值，三角函数，</span></span><br><span class=\"line\">[Math]::PI <span class=\"comment\"># 3.14159265358979</span></span><br><span class=\"line\">[Math]::Abs(-10.89)  <span class=\"comment\"># 10.89</span></span><br><span class=\"line\">[Math]::Sin([Math]::PI/2)  <span class=\"comment\"># 1</span></span><br><span class=\"line\">[Math]::Pow(2, 10) <span class=\"comment\"># 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 四舍五入取整,向上、向下取整</span></span><br><span class=\"line\">[Math]::Round(<span class=\"string\">\"3.495\"</span>)  <span class=\"comment\"># 3</span></span><br><span class=\"line\">[Math]::Round(<span class=\"string\">\"3.595\"</span>)  <span class=\"comment\"># 4</span></span><br><span class=\"line\">[Math]::Round(<span class=\"string\">\"3.5956485\"</span>,3)  <span class=\"comment\"># 3.596  (指定小数点后的几位)</span></span><br><span class=\"line\">[Math]::Ceiling(<span class=\"string\">\"3.199999\"</span>) <span class=\"comment\"># 4</span></span><br><span class=\"line\">[Math]::floor(<span class=\"string\">\"3.999999\"</span>)   <span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># - 计算一个数字的整数部分。</span></span><br><span class=\"line\">[Math]::Truncate(2012.7765) <span class=\"comment\"># 2012</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h3 id=\"NET-类\"><a href=\"#NET-类\" class=\"headerlink\" title=\"[NET] 类\"></a>[NET] 类</h3><p>描述:.NET支持成千上万的类型，有了这些类型可以做许多事情，幸运的是Powershell恰好支持这些类型。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.例如使用System.Net.IPAddress类将字符串IP地址转换成一个IPAddress实例</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek\\Desktop&gt;  [Net.IPAddress]<span class=\"string\">'10.3.129.71'</span></span><br><span class=\"line\">Address            : 1199637258</span><br><span class=\"line\">AddressFamily      : InterNetwork</span><br><span class=\"line\">ScopeId            :</span><br><span class=\"line\">IsIPv6Multicast    : False</span><br><span class=\"line\">IsIPv6LinkLocal    : False</span><br><span class=\"line\">IsIPv6SiteLocal    : False</span><br><span class=\"line\">IsIPv6Teredo       : False</span><br><span class=\"line\">IsIPv4MappedToIPv6 : False</span><br><span class=\"line\">IPAddressToString  : 10.3.129.71</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.根据IP地址查看主机名，8.8.8.8是谷歌的免费DNS服务器</span></span><br><span class=\"line\">PS &gt; [system.Net.Dns]::GetHostByAddress(<span class=\"string\">'8.8.8.8'</span>) | fl</span><br><span class=\"line\">HostName    : google-public-dns-a.google.com</span><br><span class=\"line\">Aliases     : &#123;&#125;</span><br><span class=\"line\">AddressList : &#123;8.8.8.8&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"AppDomain-类\"><a href=\"#AppDomain-类\" class=\"headerlink\" title=\"[AppDomain] 类\"></a>[AppDomain] 类</h3><p>.NET中的类型定义在不同的程序集中，首先得知道当前程序已经加载了那些程序集;<br>AppDomain类可以完成这个需求，因为它有一个静态成员CurrentDomain，CurrentDomain中有一个GetAssemblies()方法。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; [AppDomain]::CurrentDomain</span><br><span class=\"line\"></span><br><span class=\"line\">PS &gt; [AppDomain]::CurrentDomain.GetAssemblies()</span><br><span class=\"line\">GAC    Version        Location</span><br><span class=\"line\">---    -------        --------</span><br><span class=\"line\">True   v4.0.30319     C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscorlib.dll</span><br><span class=\"line\">搜索指定类型</span><br><span class=\"line\">查询每个程序集中的方法可是使用GetExportedTypes() 方法。因为许多程序集中包含了大量的方法，在搜索时最好指定关键字。下面的代码演示如何查找包含”environment”关键字的类型。</span><br><span class=\"line\">PS &gt; [AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object &#123; <span class=\"variable\">$_</span>.GetExportedTypes() &#125; | Where-Object &#123; <span class=\"variable\">$_</span> -like <span class=\"variable\">$searchtext</span> &#125; | ForEach-Object &#123; <span class=\"variable\">$_</span>.FullName &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">搜索方法</span><br><span class=\"line\">下面的例子演示如何根据指定关键字”Address”,搜索方法。</span><br><span class=\"line\">[AppDomain]::CurrentDomain.GetAssemblies() | ForEach-Object &#123; <span class=\"variable\">$_</span>.GetExportedTypes() &#125; | ForEach-Object &#123; <span class=\"variable\">$_</span>.getmembers() &#125; | Where-Object &#123; <span class=\"variable\">$_</span>.isStatic&#125; | Where-Object &#123; <span class=\"variable\">$_</span> -like <span class=\"variable\">$searchtext</span> &#125; | ForEach-Object &#123; <span class=\"string\">\"[&#123;0&#125;]::&#123;1&#125; --&gt; &#123;2&#125;\"</span> -f  <span class=\"variable\">$_</span>.declaringtype, <span class=\"variable\">$_</span>.toString().SubString(<span class=\"variable\">$_</span>.toString().IndexOf(<span class=\"string\">\" \"</span>)+1), <span class=\"variable\">$_</span>.ReturnType &#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Environment-类\"><a href=\"#Environment-类\" class=\"headerlink\" title=\"[Environment] 类\"></a>[Environment] 类</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看以下System.Environment类的所有静态方法。</span><br><span class=\"line\">[Environment] | Get-Member -Static</span><br><span class=\"line\">PS &gt; [Environment]::UserDomainName <span class=\"comment\">#当前登录域</span></span><br><span class=\"line\">MyHome</span><br><span class=\"line\">PS &gt; [Environment]::UserName <span class=\"comment\">#当前用户名</span></span><br><span class=\"line\">xiaoming</span><br><span class=\"line\">PS &gt; [Environment]::MachineName <span class=\"comment\">#当前机器名</span></span><br><span class=\"line\">LocalHost</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.根据类型创建实例</span></span><br><span class=\"line\"><span class=\"variable\">$LocalName</span>=<span class=\"string\">\"c:\\PS\\Index.php\"</span></span><br><span class=\"line\"><span class=\"variable\">$DownUrlFile</span>=<span class=\"string\">\"https://weiyigeek.com/Index.php\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!-Path <span class=\"variable\">$LocalName</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable\">$webClient</span>=New-Object Net.WebClient;<span class=\"variable\">$webClient</span>.DownloadFile(<span class=\"variable\">$DownUrlFile</span>,<span class=\"variable\">$LocalName</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(-Path <span class=\"variable\">$LocalName</span>)&#123;</span><br><span class=\"line\">    Write-Ouput <span class=\"string\">\"下载完成\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.一句话搞定</span></span><br><span class=\"line\">(New-Object Net.WebClient).DownloadFile(<span class=\"variable\">$DownUrlFile</span>,<span class=\"variable\">$LocalName</span>)</span><br></pre></td></tr></table></figure>\n<p>$dllByte=[System.IO.File]::ReadAllBytes(‘D:\\Code\\mosser\\PStips.NET —dll’)<br>[System.AppDomain]::CurrentDomain.Load($dllByte)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新版的.NET 中有动态类型，不能直接通过GetExportedTypes()调用，把它屏蔽掉就行了</span><br><span class=\"line\"></span><br><span class=\"line\">[AppDomain]::CurrentDomain.GetAssemblies() |</span><br><span class=\"line\">Where-Object &#123; -not <span class=\"variable\">$_</span>.IsDynamic &#125; |</span><br><span class=\"line\">ForEach-Object &#123;<span class=\"variable\">$_</span>.GetExportedTypes() &#125; | </span><br><span class=\"line\">Where-Object &#123; <span class=\"variable\">$_</span> -like <span class=\"string\">'*environment*'</span> &#125; | </span><br><span class=\"line\">ForEach-Object &#123; <span class=\"variable\">$_</span>.FullName &#125;</span><br></pre></td></tr></table></figure>\n<p>描述:</p>\n<p>统计指定目录下的文件数量<br>[System.IO.Directory]::GetFiles(“D:\\Work\\Data\\Photo\\gzkz-2019\\1950”, ‘*’, ‘AllDirectories’).Count</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Powershell","path":"api/tags/Powershell.json"}]}