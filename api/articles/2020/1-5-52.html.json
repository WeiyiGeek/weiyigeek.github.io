{"title":"MySQL基础SQL编程学习1","slug":"数据存储/SQL/基础SQL编程学习1","date":"2020-01-05T13:34:33.000Z","updated":"2022-03-29T05:39:06.311Z","url":"2020/1-5-52.html","path":"api/articles/2020/1-5-52.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200105145912.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200105162813.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106112411.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106120522.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106125905.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106130438.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106151032.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106152136.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106155811.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106155407.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106161551.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106162408.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106164019.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106170526.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106171430.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106173014.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106214521.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200109145121.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200109145928.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h4><p>什么是 SQL语言？<br>答：SQL指结构化查询语言，全称是 <code>Structured Query Language</code>，是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。它是用于访问和处理数据库的标准的计算机语言。</p>\n<p>SQL 能做什么？</p>\n<ul>\n<li>SQL 面向数据库执行查询</li>\n<li>SQL 可从数据库取回数据</li>\n<li>SQL 可在数据库中插入新的记录</li>\n<li>SQL 可更新数据库中的数据</li>\n<li>SQL 可从数据库删除记录</li>\n<li>SQL 可创建新数据库</li>\n<li>SQL 可在数据库中创建新表</li>\n<li>SQL 可在数据库中<code>创建存储过程</code></li>\n<li>SQL 可在数据库中<code>创建视图</code></li>\n<li>SQL 可以<code>设置表、存储过程和视图的权限</code></li>\n</ul>\n<p>MySQL是属于<code>关系型数据库 RDBMS</code>中的数据存储在被称为表的数据库对象中，表是相关的数据项的集合，它由<code>列cols和行rows</code>组成。</p>\n<p>什么是 RDBMS ?<br>答：指关系型数据库管理系统，全称 Relational Database Management System;RDBMS 是 SQL 的基础同样也是所有现代数据库系统的基础，比如 <code>MSSQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access</code>。</p>\n<p>如何学习SQL和查看命令帮助?<br>答:linux中采用man,help与info命令，在mysql中是help建议在学习的时候多采用帮助文档；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"built_in\">help</span> contents</span><br><span class=\"line\">   Account Management</span><br><span class=\"line\">   Administration</span><br><span class=\"line\">   ...</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"built_in\">help</span> Account Management</span><br><span class=\"line\">   CREATE USER</span><br><span class=\"line\">   DROP USER</span><br><span class=\"line\">   GRANT</span><br><span class=\"line\">   RENAME USER</span><br><span class=\"line\">   REVOKE</span><br><span class=\"line\">   SET PASSWORD</span><br></pre></td></tr></table></figure></p>\n<p>注释：除了 SQL 标准之外，大部分 SQL 数据库程序都拥有它们自己的专有扩展，比如MySQL 与 Oracle 之间扩展模块是有所不同的！</p>\n<hr>\n\n<h4 id=\"0x01-学习环境\"><a href=\"#0x01-学习环境\" class=\"headerlink\" title=\"0x01 学习环境\"></a>0x01 学习环境</h4><p>学习SQL环境快速安装：</p>\n<ul>\n<li>系统:CentOS7</li>\n<li>容器:Docker , Docker-Compose</li>\n<li>数据库版本: MySQL 8.0</li>\n<li>数据库管理: Adminer 简单数据库管理</li>\n<li>镜像来源:<a href=\"https://hub.docker.com/_/mysql\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/_/mysql</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装Docker-ce (注意安装前删除老版本)</span></span><br><span class=\"line\">yum install -y docker-ce python3</span><br><span class=\"line\">pip3 install pip --upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装Docker-compose</span></span><br><span class=\"line\">pip install docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证运行docker-compose.yml配置文件</span></span><br><span class=\"line\">docker-compose config</span><br><span class=\"line\">docker-compose up -d  <span class=\"comment\">#后台运行</span></span><br></pre></td></tr></table></figure>\n<p><em>docker-compose.yml</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Use root/example as user/password credentials 默认MySQL版本是8.x</span></span><br><span class=\"line\">version: <span class=\"string\">'3.1'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  db:</span><br><span class=\"line\">    image: mysql</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: --default-authentication-plugin=mysql_native_password</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: example</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3308:3306</span><br><span class=\"line\">  db5:</span><br><span class=\"line\">    image: mysql:5.7.28</span><br><span class=\"line\">    container_name: mysql5</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: --default-authentication-plugin=mysql_native_password</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      MYSQL_ROOT_PASSWORD: example</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3305:3306</span><br><span class=\"line\">  adminer:</span><br><span class=\"line\">    image: adminer</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8080:8080</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200105145912.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>运行和查询<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#手动运行容器</span></span><br><span class=\"line\">$ docker run --name mysql-test -e MYSQL_ROOT_PASSWORD=my-secret-pw --default-authentication-plugin=mysql_native_password -d mysql:tag</span><br><span class=\"line\">$ docker run -it --network some-network --rm mysql mysql -hsome-mysql -uexample-user -p <span class=\"comment\">#对Docker网络中的MySQL进行连接</span></span><br><span class=\"line\">$ docker run -it --rm mysql mysql -hsome.mysql.host -usome-mysql-user -p  <span class=\"comment\">#连接其他MySQL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用自定义MySQL配置文件</span></span><br><span class=\"line\">$ docker run --name some-mysql -v /my/custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\">$ docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在主机系统的适当卷上创建一个数据目录，例如/my/own/datadir。</span></span><br><span class=\"line\">$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试查询</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"><span class=\"comment\"># CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES</span></span><br><span class=\"line\"><span class=\"comment\"># 4ba28666e63f        adminer             \"entrypoint.sh doc...\"   45 hours ago        Up 44 hours         0.0.0.0:9080-&gt;8080/tcp              data_adminer_1</span></span><br><span class=\"line\"><span class=\"comment\"># 2172955ddedc        mysql               \"docker-entrypoint...\"   45 hours ago        Up 44 hours         33060/tcp, 0.0.0.0:9001-&gt;3306/tcp   data_db_1</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"0x02-SQL基础\"><a href=\"#0x02-SQL基础\" class=\"headerlink\" title=\"0x02 SQL基础\"></a>0x02 SQL基础</h4><p><strong>SQL标准语句</strong></p>\n<ul>\n<li>1.建议在每一句SQL后加上一个分号(<code>在数据库系统中分隔每条 SQL 语句的标准方法,这样在对服务器的相同请求中执行一条以上的 SQL 语句</code>),因为某些数据库系统要求在每条 SQL 语句的末端使用分号。</li>\n<li>2.SQL 对大小写不敏感<code>SELECT 与 select 是相同的</code>；</li>\n<li>3.SQL 数据库备份文件中及其交互命令行中的注释是<code>/* 注释案例 */ 和 --注释案例</code>；</li>\n</ul>\n<p>常见的SQL语句:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//0.CRUD (创建/查询/更新/删除)</span><br><span class=\"line\">//1.数据定义语言 - DDL </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span>|<span class=\"keyword\">TABLE</span>|<span class=\"keyword\">INDEX</span>|<span class=\"keyword\">USER</span>|<span class=\"keyword\">VIEW</span>  - 创建新数据库 / 创建新表 /  创建索引（搜索键）/ 创建用户 / 创建视图</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span>|<span class=\"keyword\">TABLE</span>|<span class=\"keyword\">INDEX</span>|<span class=\"keyword\">USER</span> - 修改数据库 / 变更（改变）数据库表 / 修改索引 / 更改用户</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span>|<span class=\"keyword\">TABLE</span>|<span class=\"keyword\">INDEX</span>|<span class=\"keyword\">USER</span> - 删除数据库 / 删除表 / 删除索引 / 删除用户</span><br><span class=\"line\"><span class=\"keyword\">RENAME</span> <span class=\"keyword\">DATABASE</span>|<span class=\"keyword\">TABLE</span>|<span class=\"keyword\">USER</span>  - 重命名数据库和数据表 / 重命名用户</span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> - 清空表数据</span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"number\">2.</span> 数据查询语言- DQL(查询)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> - 从数据库中提取数据 </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> 字句</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> 字句</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"number\">3.</span>数据操作语言 - DML(增删改)</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> - 更新数据库中的数据</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> - 从数据库中删除数据</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> - 向数据库中插入新数据</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"number\">4.</span>数据控制语言 - DCL(权限)</span><br><span class=\"line\"><span class=\"keyword\">GRANT</span> - 设置数据库表rw权限设置（访问、安全权限）</span><br><span class=\"line\"><span class=\"keyword\">REVOKE</span> - 取消数据库表rw权限设置</span><br><span class=\"line\">IF...ELSE</span><br><span class=\"line\"><span class=\"keyword\">WHILE</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">TRANSACTION</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"number\">5.</span>事务处理语言 - TPL</span><br><span class=\"line\"><span class=\"keyword\">COMMIT</span> - 事务提交</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> - 事务回滚</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>SQL分类</strong><br>SQL语言大致分为以下几类:</p>\n<ol>\n<li><p>数据定义语言（DDL）:用于创建、修改、和删除数据库内的数据结构(<code>create drop alter(修改) rename</code>);</p>\n</li>\n<li><p>数据查询语言（DQL）: 从数据库中的一个或多个表中查询数据(SELECT)条件包 <code>WHERE (条件) ，ORDER BY (排序) ，having , Group By (分组), limit(限制显示)</code></p>\n</li>\n<li><p>数据操作语言（DML）:增删修改数据库中的数据，包括<code>插入(INSERT)、更新(UPDATE)和删除(DELETE)</code>;</p>\n</li>\n<li><p>数据控制语言（DCL）:用于对数据库的访问权限进行控制，如1.给用户授予访问权限（GRANT）;2.取消用户访问权限（REVOKE）</p>\n</li>\n<li><p>指针控制语言（CCL）: <code>CURSOR Control Language</code> 语句<code>DECLARE CURSOR</code> ， <code>FETCH INITO</code> 和 <code>update where current</code> 用于对一个或多个表单独行操作；</p>\n</li>\n<li><p>事务处理语言（TPL）: 能够确保被DML语句影响的表的所有行得到及时更新，TPL语句包括<code>BEGIN ，TRANSACTION ，COMMIT(提交) ，ROLLBACK(回滚)</code>等等;</p>\n</li>\n</ol>\n<p>补充学习:</p>\n<ul>\n<li>1.大多数数据库软件系统都允许使用编程函数在结果集中进行导航，比如：<code>Move-To-First-Record、Get-Record-Content、Move-To-Next-Record</code> 等等。</li>\n</ul>\n<hr>\n\n<h4 id=\"0x03-SQL语句\"><a href=\"#0x03-SQL语句\" class=\"headerlink\" title=\"0x03 SQL语句\"></a>0x03 SQL语句</h4><h5 id=\"SELECT-语句\"><a href=\"#SELECT-语句\" class=\"headerlink\" title=\"SELECT 语句\"></a>SELECT 语句</h5><p>描述:SELECT 语句用于从数据库中选取数据,可以加上条件或者语句参数进行过滤显示数据; SQL 查询的五种子句<code>where(条件查询)、having（筛选）、group by（分组）、order by（排序 ASC | DESC）、limit（限制结果数）</code>;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SQL SELECT 语法 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> [<span class=\"keyword\">DISTINCT</span>] column_name,column_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* DISTINCT 语句用于返回唯一不同的值，在表中一个列可能会包含多个重复值仅仅列出不同的值 */</span></span><br><span class=\"line\"><span class=\"comment\">/* WHERE 子句用于提取那些满足指定标准的记录。*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> 字段名 <span class=\"keyword\">FROM</span> 表名 <span class=\"keyword\">WHERE</span> 查询条件;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name [<span class=\"keyword\">LIKE</span>|REGEXP] pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* BETWEEN AND (在之间的值) 字句在此之间的值*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 字段名 <span class=\"keyword\">FROM</span> 表名 <span class=\"keyword\">WHERE</span> 字段名 <span class=\"keyword\">BETWEEN</span> 初始值 <span class=\"keyword\">AND</span> 终止值;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。（注意这里无WHERE）*/</span></span><br><span class=\"line\"><span class=\"comment\">/* DESC 降序 , ASC 升序（默认），即 desc 或者 asc 只对它紧跟着的第一个列名有效其他不受影响，仍然是默认的升序*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name,column_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name1 <span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>,column_name2 <span class=\"keyword\">ASC</span>|<span class=\"keyword\">DESC</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SQL limit 子句，查询前n条/后n条记录（分页常用） */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 字段 <span class=\"keyword\">FROM</span> 表名 <span class=\"keyword\">WHERE</span> 查询条件 <span class=\"keyword\">LIMIT</span> 起始,结束</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SQL 多表查询 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> 数据库.表,mysql.user <span class=\"keyword\">FROM</span> 数据库,mysql <span class=\"keyword\">WHERE</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GROUP BY 语法 */</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* HAVING 语法筛选分组后的各组数据*/</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span>;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>WHERE 子句中的运算符:</p>\n<ul>\n<li>(1) 比较运算符:= &gt; &lt; &gt;= ,&lt;=, !=,<code>&lt;&gt; 表示（不等于）</code>, BETWEEN(在某个范围内), LIKE(搜索某种模式), IN(指定针对某个列的多个可能值)，IS(是否赛某列的值)</li>\n<li>(2) 逻辑运算: <code>(优先级排列), not (满足不包含该条件的值) , and, or</code></li>\n</ul>\n<p>NOT与谓词进行组合条件的查询：</p>\n<ul>\n<li>(1) NOT BERWEEN…AND…对介于起始值和终止值间的数据时行查询可改成&lt;起始值AND&gt;终止值</li>\n<li>(2) IS NOT NULL 对非空值进行查询</li>\n<li>(3) NOT IN 该式根据使用的关键字是包含在列表内还是排除在列表外，指定表达式的搜索，搜索表达式可以是常量或列名，而列名可以是一组常量，但更多情况下是子查询</li>\n<li>(4) NOT LIKE 匹配显示不满足条件的行</li>\n<li>(5) NOT REGEXP 不显示正则表达式匹配的行</li>\n</ul>\n<p>NULL 值判断</p>\n<ul>\n<li>(1) IS NULL 对空值进行查询</li>\n<li>(2) IS NOT NULL 对非空值进行查询</li>\n</ul>\n<p><br></p>\n<p>基础示例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">names</span> utf8;  <span class=\"comment\">/*命令用于设置使用的字符集（如果在配置文件中设置了Server或者Client端的字符集则不需要指定）*/</span>   </span><br><span class=\"line\"><span class=\"comment\">-- 查询用户数据库.表</span></span><br><span class=\"line\">mysql&gt; select user,host from mysql.user;</span><br><span class=\"line\">mysql&gt; select id,name,country from websites;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 重复去掉 distinct： 从 \"Websites\" 表的 \"country\" 列中选取唯一不同的值，也就是去掉 \"country\" 列重复值</span></span><br><span class=\"line\">mysql&gt; select distinct country from websites;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 比较运算符</span></span><br><span class=\"line\">mysql&gt; SELECT * FROM websites WHERE country=\"CN\";  </span><br><span class=\"line\">mysql&gt; SELECT * FROM websites WHERE id=1; /* SQL 可以直接输入 数字 表示数值**/</span><br><span class=\"line\">mysql&gt; SELECT * FROM websites WHERE id &lt;&gt; 1; /*显示不包括id=1的数据;*/</span><br><span class=\"line\">mysql&gt; SELECT * FROM websites WHERE id&gt;=2 and country != \"CN\"; /**采用逻辑运算符和比较运算符连用*/   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不带比较运算符的 WHERE 子句</span></span><br><span class=\"line\">mysql&gt; SELECT host FROM mysql.user WHERE 0; /*则会返回一个空集，因为每一行记录 WHERE 都返回 false。*/</span><br><span class=\"line\">mysql&gt; SELECT host FROM mysql.user WHERE 1; /*返回MySQL表中host字段,因为每一行记录 WHERE 都返回 true。*/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 空值判断is null：打印编写满足列某值的某行是,如果不满足则返回该标字段及其字段的值为NULL;)</span></span><br><span class=\"line\">mysql&gt; SELECT * FROM information_schema.FILES WHERE CHECKSUM IS NULL </span><br><span class=\"line\">mysql&gt; SELECT * FROM information_schema.FILES WHERE CHECKSUM IS NOT NULL  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 条件语句between.and. ：查询 emp 表中 SAL 列中大于等于 1500 的小于 3000 的值</span></span><br><span class=\"line\">mysql&gt; SELECT * FROM  emp WHERE sal between 1500 and 3000;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 运算符 In (包含运算). 查询 EMP 表 SAL 列中等于 5000，3000，1500 的值。</span></span><br><span class=\"line\">mysql&gt;  SELECT * FROM  emp WHERE sal in (5000,3000,1500); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模糊查询Like：查询 EMP 表中 Ename 列中有 M 的值，M 为要查询内容中的模糊信息。</span></span><br><span class=\"line\">mysql&gt; SELECT * FROM emp WHERE ename like 'Java%';</span><br><span class=\"line\">mysql&gt; SELECT * FROM tb_stu WHERE name like'%程序_';</span><br><span class=\"line\">mysql&gt; SELECT * FROM tb_stu WHERE name like'%PHP%';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 模糊查询REGEXP：使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式查询匹配的模糊信息。</span></span><br><span class=\"line\">mysql&gt; SELECT host,user FROM user WHERE user REGEXP  '[^root]'</span><br><span class=\"line\">mysql&gt; SELECT host,user FROM user WHERE user REGEXP  '^root'</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 联合使用() 比较 条件 逻辑 运算符</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> websites <span class=\"keyword\">WHERE</span> alexa &gt; <span class=\"number\">15</span> <span class=\"keyword\">AND</span> (country=<span class=\"string\">'CN'</span> <span class=\"keyword\">OR</span> country=<span class=\"string\">'USA'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> websites <span class=\"keyword\">WHERE</span> (alexa &gt; <span class=\"number\">15</span> <span class=\"keyword\">and</span> alexa % <span class=\"number\">2</span> != <span class=\"number\">0</span>) <span class=\"keyword\">AND</span> (country=<span class=\"string\">'CN'</span> <span class=\"keyword\">OR</span> country=<span class=\"string\">'USA'</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 排序语句 ORDER BY:多列排序的时候，先按照第一个column name排序，在按照第二个column name排序；</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_name <span class=\"keyword\">WHERE</span> address &lt;&gt; <span class=\"string\">''</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">addtime</span> <span class=\"keyword\">desc</span>, <span class=\"keyword\">id</span> <span class=\"keyword\">asc</span>;  <span class=\"comment\">/**查询不为空的数据*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示行数 limit语句：查询前n条/后n条记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Host,<span class=\"keyword\">User</span>,password_last_changed <span class=\"keyword\">FROM</span> mysql.user <span class=\"keyword\">WHERE</span> <span class=\"number\">1</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">3</span>; <span class=\"comment\">--前三条</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Host,<span class=\"keyword\">User</span>,password_last_changed <span class=\"keyword\">FROM</span> mysql.user <span class=\"keyword\">WHERE</span> <span class=\"number\">1</span> <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> HOST <span class=\"keyword\">DESC</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">3</span>; <span class=\"comment\">--后三条</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 子查询也叫内部查询如select avg(score) from studentscore就是子查询</span></span><br><span class=\"line\"><span class=\"comment\">--  查询学生成绩表里分数低于平均成绩的学生姓名和成绩，并根据分数降序排列</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span>,score <span class=\"keyword\">form</span> studentscore <span class=\"keyword\">where</span> score &lt; (<span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(score) <span class=\"keyword\">from</span> studentscore) <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> score <span class=\"keyword\">DESC</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200105162813.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p><strong>多表查询</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> student;</span><br><span class=\"line\"><span class=\"keyword\">USE</span> student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span>(</span><br><span class=\"line\">     xh <span class=\"built_in\">int</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> auto_increment  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键学号'</span>,</span><br><span class=\"line\">     xm  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">62</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'姓名'</span>,</span><br><span class=\"line\">     nj  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'班级'</span>,</span><br><span class=\"line\">     age  <span class=\"built_in\">INT</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'年龄'</span>,</span><br><span class=\"line\">     zy  <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">256</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'专业'</span>,</span><br><span class=\"line\">     PRIMARY <span class=\"keyword\">KEY</span>(xh)</span><br><span class=\"line\">)<span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span> = utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user_kc`</span>(</span><br><span class=\"line\">  <span class=\"string\">`xh`</span> <span class=\"built_in\">int</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键学号'</span>,</span><br><span class=\"line\">  <span class=\"string\">`kcm`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">256</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'课程名'</span>,</span><br><span class=\"line\">  <span class=\"string\">`grade`</span> <span class=\"built_in\">float</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'成绩'</span> <span class=\"comment\">-- 注意最后一个字段没有','</span></span><br><span class=\"line\">)<span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span> = utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span> <span class=\"keyword\">VALUES</span> (<span class=\"number\">1001</span>,<span class=\"string\">'张晓华'</span>,<span class=\"string\">'2014级'</span>,<span class=\"number\">19</span>,<span class=\"string\">'计算机技术'</span>), (<span class=\"number\">1002</span>,<span class=\"string\">'则新华'</span>,<span class=\"string\">'2015级'</span>,<span class=\"number\">39</span>,<span class=\"string\">'计算机技术'</span>), (<span class=\"number\">1003</span>,<span class=\"string\">'线程华'</span>,<span class=\"string\">'2015级'</span>,<span class=\"number\">19</span>,<span class=\"string\">'网络工程技术'</span>),(<span class=\"number\">1004</span>,<span class=\"string\">'台时华'</span>,<span class=\"string\">'2016级'</span>,<span class=\"number\">19</span>,<span class=\"string\">'网络工程技术'</span>),(<span class=\"number\">1005</span>,<span class=\"string\">'爱是'</span>,<span class=\"string\">'2013级'</span>,<span class=\"number\">19</span>,<span class=\"string\">'物联网工程'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> user_kc <span class=\"keyword\">VALUES</span> (<span class=\"number\">1002</span>,<span class=\"string\">\"Python编程\"</span>,<span class=\"number\">79.1</span>),(<span class=\"number\">1001</span>,<span class=\"string\">\"JAVA编程\"</span>,<span class=\"number\">89.5</span>),(<span class=\"number\">1003</span>,<span class=\"string\">\"LINUX编程\"</span>,<span class=\"number\">69.5</span>),(<span class=\"number\">1002</span>,<span class=\"string\">\"Mysql数据库编程\"</span>,<span class=\"number\">69.9</span>),(<span class=\"number\">1005</span>,<span class=\"string\">\"网络编程\"</span>,<span class=\"number\">79.5</span>),(<span class=\"number\">1004</span>,<span class=\"string\">\"前端HTML5\"</span>,<span class=\"number\">79.5</span>),(<span class=\"number\">1002</span>,<span class=\"string\">\"Python编程\"</span>,<span class=\"number\">79.5</span>),(<span class=\"number\">1004</span>,<span class=\"string\">\"C语言之精华\"</span>,<span class=\"number\">59.5</span>);</span><br></pre></td></tr></table></figure>\n<p>基础示例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 联表查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> user.xh,user.xm,user.nj,user_kc.kcm,user_kc.grade </span><br><span class=\"line\"><span class=\"keyword\">FROM</span>  <span class=\"keyword\">user</span>,user_kc </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> user.xh=user_kc.xh;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106112411.png\" alt=\"WeiyiGeek.联表查询\" title=\"\" class=\"\">\n                <p>WeiyiGeek.联表查询</p>\n            </figure>\n<p><br></p>\n<p><strong>函数使用</strong></p>\n<ul>\n<li>user() ：当前用户</li>\n<li>now() ：当前时间</li>\n</ul>\n<p>基础示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>();</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">root@212.17.8.29\t2020-01-06 03:28:45</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>注意事项:</p>\n<ul>\n<li>注:SQL语句中的DISTINCT必须与WHERE子句联合使用，否则输出的信息不会有变化且字段不能用*代替;</li>\n<li>注:SQL语句中的BETWEEN .. AND …条件语句，下限在前，上限在后，查询的范围包涵有上下限的值。</li>\n<li>注:SQL语句中文本与数值字段，使用单引号来环绕文本值（大部分数据库系统也接受双引号），数值是不需要加上单双引号，但是注意字段类型的影响;</li>\n<li>注:WHERE 子句并不一定带比较运算符，当不带运算符时会执行一个隐式转换 WHERE 0|1。当 0 时转化为  false，1 转化为 true。</li>\n<li>注:我们可以把比较运算符，逻辑运算符，以及条件运算符，加上括号()来组成复杂的表达式。</li>\n<li>注:对字段进行排序时若不指定排序方式，则默认为ASC升序；对查询信息进行多条件排序是为了共同限制记录的输出，一般情况下，由于不是单一条件限制，所以在输出效果上有一些差别。</li>\n<li>注:在对数据库中的日期字段进行查询筛选的时候，注意不同数据库对日期型数据存在差异；</li>\n<li>注:在使用REGEXP子句后后面的正则匹配需要采用’ ‘进行包含;</li>\n</ul>\n<BR>\n\n<h5 id=\"INSERT-语句\"><a href=\"#INSERT-语句\" class=\"headerlink\" title=\"INSERT 语句\"></a>INSERT 语句</h5><p>描述:INSERT INTO 语句用于向表中插入新记录。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- INSERT INTO 语句可以有两种编写形式。</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.无需指定要插入数据的列名，只需提供被插入的值即可(需要注意他是按照字段顺序进行插入的)：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1,value2,value3,...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.需要指定列名及被插入的值：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (value1,value2,value3,...);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3. 将旧表中的数据灌入新表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">table</span> 新表名 <span class=\"keyword\">LIKE</span> book; <span class=\"comment\">-- 复制表结构，含有主键等信息的完整表结构;</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 新表 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 旧表；</span><br></pre></td></tr></table></figure>\n<p>基础示例:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 向 \"Websites\" 表中插入一个新行。</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Websites (<span class=\"keyword\">name</span>, <span class=\"keyword\">url</span>, alexa, country)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'百度'</span>,<span class=\"string\">'https://www.baidu.com/'</span>,<span class=\"string\">'4'</span>,<span class=\"string\">'CN'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 为了数据库优化更好我们建议将添加的字符进行拼接然后再一起写入数据库中：</span></span><br><span class=\"line\">mysql&gt; INSERT INTO sb_user(name,pass) VALUES ('test','test'),('admin','admin');</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 旧表数据灌入新表之中（但是此种方法新表必须存在）</span></span><br><span class=\"line\">mysql&gt; create table newUser like user;</span><br><span class=\"line\">mysql&gt; desc newUser;</span><br><span class=\"line\">+<span class=\"comment\">-------------+--------------+------+-----+----------+-------+</span></span><br><span class=\"line\">| Field       | Type         | Null | Key | Default  | Extra |</span><br><span class=\"line\">+<span class=\"comment\">-------------+--------------+------+-----+----------+-------+</span></span><br><span class=\"line\">| id          | int(5)       | NO   |     | 10086    |       |</span><br><span class=\"line\">| name        | char(128)    | NO   |     | undefine |       |</span><br><span class=\"line\">| sex         | int(1)       | YES  |     | 0        |       |</span><br><span class=\"line\">| qq_id       | int(10)      | YES  |     | NULL     |       |</span><br><span class=\"line\">| addr        | varchar(256) | YES  |     | NULL     |       |</span><br><span class=\"line\">| description | varchar(512) | YES  |     | NULL     |       |</span><br><span class=\"line\">+<span class=\"comment\">-------------+--------------+------+-----+----------+-------+</span></span><br><span class=\"line\">mysql&gt; INSERT INTO newUser SELECT * FROM user;</span><br><span class=\"line\">mysql&gt; SELECT * FROM newUser;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106120522.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>注意事项:</p>\n<ul>\n<li>注:在ID或者其他字段设置自增长的时候可以不用向id插入数值，因为id 列是自动更新的，表中的每条记录都有一个唯一的数字。</li>\n<li>注:insert into  select 和select into  from 的区别（MySQL 数据库不支持，Mssql支持），前则要求行表scorebak 必须存在，后者要求表scorebak 不存在；</li>\n</ul>\n<p><br></p>\n<h5 id=\"UPDATE-语句\"><a href=\"#UPDATE-语句\" class=\"headerlink\" title=\"UPDATE 语句\"></a>UPDATE 语句</h5><p>描述:UPDATE 语句用于更新表中已存在的记录。</p>\n<p>语法:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1=value1,column2=value2,...</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> some_column=some_value;</span><br></pre></td></tr></table></figure>\n<p>基础示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 假设我们要把 \"菜鸟教程\" 的 alexa 排名更新为 5000，country 改为 USA。</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> websites <span class=\"keyword\">SET</span> alexa = <span class=\"string\">'5000'</span>, country = <span class=\"string\">'CN'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> = <span class=\"string\">\"菜鸟教程\"</span>;  <span class=\"comment\">/* WHERE 语句很重要 */</span></span><br></pre></td></tr></table></figure>\n<p>补充说明:</p>\n<p>1.在 MySQL 中可以通过设置 sql_safe_updates 这个自带的参数来解决，当该参数开启的情况下，你必须在update 语句后携带 where 条件，否则就会报错。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE 'sql_safe_updates';  -- 值得(注意)</span><br><span class=\"line\">Variable_name\tValue</span><br><span class=\"line\">sql_safe_updates OFF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--  表示开启该参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> sql_safe_updates=<span class=\"keyword\">ON</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> sql_safe_updates=<span class=\"number\">1</span>;  </span><br><span class=\"line\"><span class=\"comment\">-- 开启后必须在更新语句后加入Where条件,否则在进行删除时候会产生错误;</span></span><br><span class=\"line\">ERROR 1175 (HY000): You are using safe <span class=\"keyword\">update</span> <span class=\"keyword\">mode</span> <span class=\"keyword\">and</span> you tried <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> a <span class=\"keyword\">table</span> <span class=\"keyword\">without</span> a <span class=\"keyword\">WHERE</span> that uses a <span class=\"keyword\">KEY</span> <span class=\"keyword\">column</span></span><br></pre></td></tr></table></figure>\n<p>注意事项:</p>\n<ul>\n<li>注:WHERE 子句规定哪条记录或者哪些记录需要更新,WHERE 子句规定哪条记录或者哪些记录需要更新;</li>\n</ul>\n<p><br/></p>\n<h5 id=\"DELETE-语句\"><a href=\"#DELETE-语句\" class=\"headerlink\" title=\"DELETE 语句\"></a>DELETE 语句</h5><p>描述:DELETE 语句用于删除表中的行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name</span><br><span class=\"line\">WHERE some_column&#x3D;some_value;</span><br></pre></td></tr></table></figure>\n<p>基础数据:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 假设我们要从 \"Websites\" 表中删除网站名为 \"ORACLE\" 且国家为 USA 的网站 。</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> websites <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span>=<span class=\"string\">'oracle'</span> <span class=\"keyword\">and</span> country=<span class=\"string\">'USA'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除所有数据但是表结构、属性、索引将保持不变：</span></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name;</span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> * <span class=\"keyword\">FROM</span> table_name;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106125905.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>补充说明:<br>1.SQL关于删除的三个语句：<code>DROP、TRUNCATE、 DELETE</code>的区别:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除表: drop table 表名;</span><br><span class=\"line\">清空表数据: delete from 表名;</span><br><span class=\"line\">清空表数据: truncate table 表名;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1.删除表test并释放空间，将test删除的一干二净。</span></span><br><span class=\"line\">DROP table <span class=\"built_in\">test</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.删除表test里的内容并释放空间，但不删除表的定义，表的结构还在。</span></span><br><span class=\"line\">TRUNCATE <span class=\"built_in\">test</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.删除整个表:仅删除表test内的所有内容，保留表的定义，不释放空间。</span></span><br><span class=\"line\">DELETE FROM <span class=\"built_in\">test</span> 或者 DELETE * FROM <span class=\"built_in\">test</span> ; @</span><br><span class=\"line\"><span class=\"comment\">#删除指定数据:删除表test中年龄等于30的且国家为US的数据</span></span><br><span class=\"line\">DELETE FROM <span class=\"built_in\">test</span> WHERE age=30 AND country=<span class=\"string\">'US'</span>;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106130438.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>2.什么时候使用DROP?什么时候使用DELETE?<br>答：对于结构删除，如数据库删除、表删除、索引删除等当使用DROP，而对于数据的删除，和事务有关, 或者想触发 trigger则用DELETE，想保留表而将所有数据删除和事务无关用 truncate 即可，如果是整理表内部的碎片,<code>可以用 truncate 跟上 reuse stroage</code>再重新导入/插入数据；;</p>\n<p>3.总结</p>\n<ul>\n<li><p>1.truncate和delete 只删除数据不会影响表结构，drop语句删除表的结构被依赖的约束(constrain), 触发器(trigger), 索引(index)，依赖于该表的存储过程/函数将保留, 但是变为 invalid 状态。</p>\n</li>\n<li><p>2.delete语句是DML改操作会放到rollback segment中事务提交后才生效（如果有与之对应的触发器执行时候将被触发），而truncate和drop是DDL操作会立即生效，源数据不妨到rollback segment中既不能回滚也不能触发trigger；</p>\n</li>\n<li><p>3.delete 语句不影响表所占用的 extent, 高水线(high watermark)保持原位置不动，drop 语句将表所占用的空间全部释放，truncate 语句缺省情况下见空间释放到 minextents 个 extent, 除非使用 reuse storage， truncate会将高水线复位(回到最开始)。</p>\n</li>\n<li><p>4.速度：<code>drop &gt; truncate &gt; delete</code> ，安全性: 小心使用 drop 和 truncate, 尤其没有备份的时候否则哭都来不及。</p>\n</li>\n<li><p>5.不带where参数的delete语句是删除mysql表中所有内容，delete的效果有点像将mysql表中所有记录一条一条删除到删完，而使用truncate table也可以清空mysql表中所有内容，相当于保留mysql表的结构，重新创建了这个表，所有的状态都相当于新表。</p>\n</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li><strong>注</strong>:与update语句一样，WHERE 子句规定哪条记录或者哪些记录需要删除;如果您省略了WHERE子句，所有的记录都将被删除！ </li>\n<li>注:在效率上truncate比delete快，但truncate删除后不记录mysql日志不可以恢复数据;</li>\n</ul>\n<hr>\n\n<h4 id=\"0x04-SQL进阶\"><a href=\"#0x04-SQL进阶\" class=\"headerlink\" title=\"0x04 SQL进阶\"></a>0x04 SQL进阶</h4><p>描述:SQL语句联合使用的其他子语句，是相当的重要的；</p>\n<h5 id=\"TOP-子句\"><a href=\"#TOP-子句\" class=\"headerlink\" title=\"TOP 子句\"></a>TOP 子句</h5><p>描述:SELECT TOP 子句用于规定要返回的记录的数目，它对于拥有数千条记录的大型表来说，是非常有用的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- #SQL Server / MS Access 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> TOP <span class=\"built_in\">number</span>|<span class=\"keyword\">percent</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- #MySQL 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">LIMIT</span> <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- #Oracle 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">ROWNUM</span> &lt;= <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure>\n<p>基础示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从 websites 表中选取前面百分之 50 的记录(MSSQL)：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> TOP <span class=\"number\">50</span> <span class=\"keyword\">PERCENT</span> * <span class=\"keyword\">FROM</span> Websites;</span><br><span class=\"line\"><span class=\"keyword\">select</span> top <span class=\"number\">5</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"comment\">--前5行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> top <span class=\"number\">5</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> <span class=\"keyword\">desc</span>  <span class=\"comment\">--后5行 desc 表示降序排列 asc 表示升序</span></span><br></pre></td></tr></table></figure>\n<p>注意事项:</p>\n<ul>\n<li>注:并非所有的数据库系统都支持 SELECT TOP 语句。 MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。</li>\n</ul>\n<p><br></p>\n<h5 id=\"LIKE-和-REGEXP-子句\"><a href=\"#LIKE-和-REGEXP-子句\" class=\"headerlink\" title=\"LIKE 和 REGEXP 子句\"></a>LIKE 和 REGEXP 子句</h5><p>基础语法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式 *&#x2F;</span><br><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name [LIKE|REGEXP] pattern;</span><br></pre></td></tr></table></figure></p>\n<p>LIKE 模糊查询通配符说明:  <code>% 表示多个字值，_ 下划线表示一个字符</code>;</p>\n<p>REGEXP 模糊查询通配符说明:<code>&#39;[abc]&#39;字符列中的任何单一字符，[!abc]或者[^abc]不在字符列中的任何单一字符</code>；</p>\n<ul>\n<li>M% : 为能配符，正则表达式，表示的意思为模糊查询信息为 M 开头的。</li>\n<li>%M% : 表示查询包含M的所有内容。</li>\n<li>%M_ : 表示查询以M在倒数第二位的所有内容。</li>\n<li><code>&#39;^[a-zA-Z0-9]&#39;</code>:表示查询以a-z或者A-Z以及0-9开头的内容；</li>\n</ul>\n<p>基础示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- LIKE子句的模糊查询</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">LIKE</span>  <span class=\"string\">'%ro%'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- REGEXP子句显示user字段以root开头的行（注意引号包含表达式）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> host,<span class=\"keyword\">user</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span> REGEXP  <span class=\"string\">'^root'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106151032.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h5 id=\"IN-子句\"><a href=\"#IN-子句\" class=\"headerlink\" title=\"IN 子句\"></a>IN 子句</h5><p>描述:IN 操作符允许您在 WHERE 子句中规定多个值。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL IN 语法（以 , 号分割）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">IN</span> (value1,value2,...);</span><br></pre></td></tr></table></figure>\n<p>IN 与 = 的异同说明?</p>\n<ul>\n<li>相同点：均在WHERE中使用作为筛选条件之一、均是等于的含义；</li>\n<li>不同点：IN可以规定多个值，等于规定一个值；</li>\n</ul>\n<p>基础示例:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- in 与 = 的转换</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Websites <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> <span class=\"keyword\">in</span> (<span class=\"string\">'Google'</span>,<span class=\"string\">'Baidu'</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Websites <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'Google'</span> <span class=\"keyword\">or</span> <span class=\"keyword\">name</span>=<span class=\"string\">'Baidu'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 注意数值和字符串对查询的结果没有影响</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> xh <span class=\"keyword\">in</span> (<span class=\"number\">1001</span>,<span class=\"string\">'1003'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106152136.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h5 id=\"BETWEEN-操作符\"><a href=\"#BETWEEN-操作符\" class=\"headerlink\" title=\"BETWEEN 操作符\"></a>BETWEEN 操作符</h5><p>描述:BETWEEN 操作符用于选取介于两个值之间的数据范围内的值(<code>值可以是数值，文本或者日期</code>)。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL BETWEEN 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">BETWEEN</span> value1 <span class=\"keyword\">AND</span> value2;</span><br></pre></td></tr></table></figure>\n<p>基础演示:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL 语句选取 alexa 介于 1 和 20 之间的所有网站：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> alexa <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">20</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 如需显示不在上面实例范围内的网站，请使用 NOT BETWEEN：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> alexa <span class=\"keyword\">NOT</span> <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">20</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选取 alexa 介于 1 和 20 之间但 country 不为 USA 和 IND 的所有网站(注意ADD子句)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> (alexa <span class=\"keyword\">BETWEEN</span> <span class=\"number\">1</span> <span class=\"keyword\">AND</span> <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">AND</span> country <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"string\">'USA'</span>, <span class=\"string\">'IND'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选取 name 以介于 'A' 和 'H' 之间字母开始的所有网站(带有文本值的 BETWEEN 操作符)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'A'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'H'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SQL 语句选取 date 介于 '2016-05-10' 和 '2016-05-14' 之间的所有访问记录：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> access_log</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"built_in\">date</span> <span class=\"keyword\">BETWEEN</span> <span class=\"string\">'2016-05-10'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'2016-05-14'</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- MySQL用户的修改时间范围</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">User</span>,password_last_changed <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> password_last_changed </span><br><span class=\"line\"><span class=\"keyword\">BETWEEN</span> <span class=\"string\">'\t2020-01-03 09:22:32'</span> <span class=\"keyword\">AND</span> <span class=\"string\">'\t2020-01-03 09:22:38'</span>;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106155811.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>注意事项:</p>\n<ul>\n<li>注意在不同的数据库中，BETWEEN 操作符会产生不同的结果！<ul>\n<li>某些数据库中BETWEEN 选取介于两个值之间（<code>但不包括两个测试值的字段 ，且包括两个测试值的字段，且包括第一个测试值但不包括最后一个测试值的字段</code>）</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<h5 id=\"AS-别名\"><a href=\"#AS-别名\" class=\"headerlink\" title=\"AS 别名\"></a>AS 别名</h5><p>描述:通过使用 SQL，可以为表名称或列名称指定别名(创建别名是为了让列名称的可读性更强)。<br>在下面的情况下使用别名很有用：</p>\n<ul>\n<li>在查询中涉及超过一个表</li>\n<li>在查询中使用了函数</li>\n<li>列名称很长或者可读性差</li>\n<li>需要把两个列或者多个列结合在一起</li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列的 SQL 别名语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name <span class=\"keyword\">AS</span> alias_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表的 SQL 别名语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name <span class=\"keyword\">AS</span> alias_name;</span><br></pre></td></tr></table></figure></p>\n<p>基础演示:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 字段别名的示例</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xh <span class=\"keyword\">AS</span> <span class=\"string\">'学号'</span>,kcm <span class=\"keyword\">AS</span> <span class=\"string\">'课程'</span>, grade <span class=\"keyword\">AS</span> <span class=\"string\">'成绩'</span> </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_kc</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> grade &gt; <span class=\"number\">70</span>;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106155407.png\" alt=\"WeiyiGeek.AS别名字段\" title=\"\" class=\"\">\n                <p>WeiyiGeek.AS别名字段</p>\n            </figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表的别名实例</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> u.xh,u.xm,kc.kcm,kc.grade </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">AS</span> u,user_kc <span class=\"keyword\">AS</span> kc </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> kc.xh = u.xh </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> kc.xh;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106161551.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 字段拼接（这里采用CONCAT函数后面会深入讲解）</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>( <span class=\"string\">'学号:'</span>, u.xh , <span class=\"string\">'姓名:'</span>, u.xm) <span class=\"keyword\">AS</span> <span class=\"string\">'基础信息'</span>,<span class=\"keyword\">CONCAT</span>( <span class=\"string\">'课程:'</span>, kc.kcm , <span class=\"string\">'成绩:'</span>, kc.grade) <span class=\"keyword\">AS</span> <span class=\"string\">'成绩信息'</span>,</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">AS</span> u,user_kc <span class=\"keyword\">AS</span> kc </span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> kc.xh = u.xh <span class=\"keyword\">AND</span> kc.kcm = <span class=\"string\">'Python编程'</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> xh</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106162408.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h5 id=\"JOIN-连接\"><a href=\"#JOIN-连接\" class=\"headerlink\" title=\"JOIN 连接\"></a>JOIN 连接</h5><p>描述:SQL join 用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。。<br>下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。</p>\n<ul>\n<li>1.A : 属于集合A的所有的元素的集合</li>\n<li><p>2.CuB U A :属于集合A的元素同时满足不属于集合B的元素</p>\n</li>\n<li><p>3.交集：以属于A且属于B的元素为元素的集合称为A与B的交（集），记作A∩B（或B∩A），读作“A交B”（或“B交A”），即 <code>A∩B={x|x∈A,且x∈B}</code></p>\n</li>\n<li><p>4.并集：以属于A或属于B的元素为元素的集合称为A与B的并（集），记作AUB（或BUA）读作“A并B”（或“B并A”），即<code>A∪B={x|x∈A,或x∈B}</code>。</p>\n</li>\n<li><p>5.补集：属于全集U不属于集合A的元素组成的集合称为集合A的补集，记作CuA，即CuA={x|x∈U,且x不属于A},Cu(A∩B)</p>\n</li>\n<li><p>6.B :属于集合B的所有的元素的集合</p>\n</li>\n<li>7.CuA U B : 属于集合B的元素同时满足不属于集合A的元素</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106164019.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p>不同的 SQL JOIN 分类:</p>\n<ul>\n<li>INNER JOIN (内连接)：如果表中有至少一个匹配，则返回行</li>\n<li>OUTER JOIN (外连接):</li>\n<li>LEFT JOIN(左连接)：即使右表中没有匹配，也从左表返回所有的行</li>\n<li>RIGHT JOIN(右连接)：即使左表中没有匹配，也从右表返回所有的行</li>\n<li>FULL JOIN(全连接)：只要其中一个表中存在匹配，则返回行</li>\n</ul>\n<p><br></p>\n<p><strong>INNER JOIN（内连接-笛卡尔积）</strong><br>描述:SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行,在表中存在至少一个匹配时返回行。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在表中存在至少一个匹配时返回行。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 或:(INNER JOIN 与 JOIN 是相同的)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 显示满足ON条件的行，否则以左边基准表 + user_kc 每一条</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> u.xh,u.xm,kc.kcm,kc.grade </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">AS</span> u </span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> user_kc <span class=\"keyword\">AS</span> kc <span class=\"keyword\">ON</span> u.xh = kc.xh </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> u.xh</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106170526.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p><strong>LEFT JOIN 关键字</strong><br>描述:LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p>\n<p>SQL LEFT JOIN 语法<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br><span class=\"line\"></span><br><span class=\"line\">或：</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></p>\n<p>基础实例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- LEFT JOIN 关键字演示</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span> <span class=\"keyword\">VALUES</span> (<span class=\"number\">1006</span>,<span class=\"string\">'WeiyiGeek'</span>,<span class=\"string\">'2019'</span>,<span class=\"number\">21</span>,<span class=\"string\">'网络安全工程'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> u.xh,u.xm,kc.kcm,kc.grade </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">AS</span> u </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> user_kc <span class=\"keyword\">AS</span> kc <span class=\"keyword\">ON</span> u.xh = kc.xh </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> u.xh</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106171430.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<p><strong>RIGHT JOIN 关键字</strong><br>描述:RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。实际就是与LEFT相似只不过是左边关联不上的为NULL</p>\n<p>SQL RIGHT JOIN 语法:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 或</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 这次将user_kc作为左表,而user作为右表</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> u.xh,u.xm,kc.kcm,kc.grade </span><br><span class=\"line\"><span class=\"keyword\">FROM</span> user_kc <span class=\"keyword\">AS</span> kc                     <span class=\"comment\">-- 注意此处与上面是不同的</span></span><br><span class=\"line\"><span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">user</span> <span class=\"keyword\">AS</span> u <span class=\"keyword\">ON</span> u.xh = kc.xh </span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> u.xh</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106173014.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<p><strong>FULL OUTER JOIN 关键字</strong><br>描述:FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行 它结合了 LEFT JOIN 和 RIGHT JOIN 的结果<code>即 A 并 B</code>。</p>\n<p>FULL OUTER JOIN 语法:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">FULL</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> table2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#MySQL中不支持 FULL OUTER JOIN，你可以在 SQL Server 测试以下实例。</span></span><br><span class=\"line\">SELECT Websites.name, access_log.count, access_log.date</span><br><span class=\"line\">FROM Websites</span><br><span class=\"line\">FULL OUTER JOIN access_log</span><br><span class=\"line\">ON Websites.id=access_log.site_id</span><br><span class=\"line\">ORDER BY access_log.count DESC;</span><br></pre></td></tr></table></figure></p>\n<p>总结:</p>\n<ul>\n<li>1.首先连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。左连接与右连接的左右指的是以两张表中的哪一张为基准它们都是外连接。</li>\n<li>2.外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配,两个没有空值的表进行左连接，<code>左表是基准表</code>，左表的所有行都出现在结果中，<code>右表则可能因为无法与基准表匹配而出现是空值的字段</code>。</li>\n<li>3.JOIN 分类得到的结果数：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inner join &lt;= min(left join, right join)</span><br><span class=\"line\">full join &gt;= max(left join, right join)</span><br><span class=\"line\">当 inner join &lt; min(left join, right join) 时  full join &gt; max(left join, right join)</span><br></pre></td></tr></table></figure></li>\n<li>4.在使用 join 时，on 和 where 条件的区别如下:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- on 条件是在生成临时表时使用的条件，它不管 on 中的条件是否为真都会返回左边表中的记录。</span><br><span class=\"line\">- <span class=\"built_in\">where</span> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 left join 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</span><br></pre></td></tr></table></figure></li>\n<li>5.MySQL中不支持 FULL OUTER JOIN，你可以在 SQL Server 测试以下实例。</li>\n</ul>\n<BR>\n\n<h5 id=\"UNION-操作符\"><a href=\"#UNION-操作符\" class=\"headerlink\" title=\"UNION 操作符\"></a>UNION 操作符</h5><p>描述:SQL UNION 操作符合并两个或多个 SELECT 语句的结果。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL UNION 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s) <span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s) <span class=\"keyword\">FROM</span> table2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">---SQL UNION ALL 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s) <span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span> <span class=\"comment\">-- 默认地UNION 操作符选取不同的值。如果允许重复的值请使用 UNION ALL。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s) <span class=\"keyword\">FROM</span> table2;</span><br></pre></td></tr></table></figure>\n<p>基础实例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从 \"Websites\" 和 \"apps\" 表中选取所有不同的country（只有不同的值）：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> country <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> country <span class=\"keyword\">FROM</span> apps</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> country; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 使用 UNION ALL 从 \"Websites\" 和 \"apps\" 表中选取所有的中国(CN)的数据（也有重复的值）：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> country, <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> country=<span class=\"string\">'CN'</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> country, app_name <span class=\"keyword\">FROM</span> apps</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> country=<span class=\"string\">'CN'</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> country; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- union 与 union all 在于前者可以剔除重复的字段的行，后者则是显示所有不管是否重复</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xh,<span class=\"string\">'#'</span>,xm <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xh,kcm,<span class=\"string\">'-'</span> <span class=\"keyword\">FROM</span> user_kc</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> xh</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200106214521.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>注意事项：</p>\n<ul>\n<li>注:UNION 内部的每个 SELECT 语句必须拥有相同数量的列</li>\n<li>注:列也必须拥有相似的数据类型，同时每个 SELECT 语句中的列的顺序必须相同。</li>\n<li>注:UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</li>\n</ul>\n<p><br></p>\n<h5 id=\"GROUP-BY-语句\"><a href=\"#GROUP-BY-语句\" class=\"headerlink\" title=\"GROUP BY 语句\"></a>GROUP BY 语句</h5><p>描述：GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组。</p>\n<p>基础语法:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL GROUP BY 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n<p>基础应用:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 统计 access_log 各个 site_id 的访问量</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> site_id, <span class=\"keyword\">SUM</span>(counts) <span class=\"keyword\">AS</span> nums <span class=\"keyword\">FROM</span> access_log <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> site_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SQL GROUP BY 多表连接统计有记录的网站的记录数量：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Websites.name,<span class=\"keyword\">COUNT</span>(access_log.aid) <span class=\"keyword\">AS</span> nums <span class=\"keyword\">FROM</span> access_log</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Websites  <span class=\"comment\">-- 关键点-表字段结合</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> access_log.site_id=Websites.id</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Websites.name; <span class=\"comment\">-- 关键点</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 基础实例</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Aggregate.NAME,<span class=\"keyword\">COUNT</span>(Persons.ID) <span class=\"keyword\">AS</span> <span class=\"string\">'NUMS'</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">Aggregate</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> Aggregate.ID = Persons.ID</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Aggregate.NAME;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Aggregate.NAME,<span class=\"keyword\">COUNT</span>(Persons.ID) <span class=\"keyword\">AS</span> <span class=\"string\">'NUMS'</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">Aggregate</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> Aggregate.NAME = Persons.LastName</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Aggregate.NAME;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200109145121.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n<h5 id=\"HAVING-语句\"><a href=\"#HAVING-语句\" class=\"headerlink\" title=\"HAVING 语句\"></a>HAVING 语句</h5><p>描述:HAVING 子句可以让我们筛选分组后的各组数据; 在 SQL 中增加 HAVING 子句原因是 <code>WHERE 关键字无法与聚合函数一起使用</code>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL HAVING 语法</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name, aggregate_function(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> column_name <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> aggregate_function(column_name) <span class=\"keyword\">operator</span> <span class=\"keyword\">value</span>;</span><br></pre></td></tr></table></figure>\n<p>基础示例：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查找总访问量大于 200 的网站，并且 alexa 排名小于 200。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Websites.name, <span class=\"keyword\">SUM</span>(access_log.count) <span class=\"keyword\">AS</span> nums <span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> access_log</span><br><span class=\"line\"><span class=\"keyword\">ON</span> Websites.id=access_log.site_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> Websites.alexa &lt; <span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Websites.name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"keyword\">SUM</span>(access_log.count) &gt; <span class=\"number\">200</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 过滤掉分组结果为NULL的rows</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Aggregate.NAME,<span class=\"keyword\">COUNT</span>(Persons.ID) <span class=\"keyword\">AS</span> <span class=\"string\">'NUMS'</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Persons </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> <span class=\"keyword\">Aggregate</span></span><br><span class=\"line\"><span class=\"keyword\">ON</span> Aggregate.NAME = Persons.LastName</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> Aggregate.NAME</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> Aggregate.NAME <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200109145928.png\" alt=\"WeiyiGeek.HAVING\" title=\"\" class=\"\">\n                <p>WeiyiGeek.HAVING</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"SELECT-INTO-语句\"><a href=\"#SELECT-INTO-语句\" class=\"headerlink\" title=\"SELECT INTO 语句\"></a>SELECT INTO 语句</h5><p>描述:SELECT INTO 语句从一个表复制数据，然后把数据插入到另一个新表中,但是需要<code>注意 MySQL 数据库不支持 SELECT ... INTO 语句，但支持 INSERT INTO ... SELECT</code> , 当然你可以使用以下语句来拷贝表结构及数据(后面讲解CREATE会讲)：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 新表</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 旧表</span><br></pre></td></tr></table></figure></p>\n<p>SELECT INTO 语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 复制所有的列插入到新表中：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> newtable [<span class=\"keyword\">IN</span> externaldb]</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 只复制希望的列插入到新表中：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> newtable [<span class=\"keyword\">IN</span> externaldb]</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1;</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建 Websites 的备份复件,只复制中国的网站插入到新表中：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> WebsitesBackup2016</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Websites;</span><br><span class=\"line\">WHERE country='CN';</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 复制多个表中的数据插入到新表中：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> WebsitesBackup2016</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Websites</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> access_log</span><br><span class=\"line\"><span class=\"keyword\">ON</span> Websites.id=access_log.site_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- SELECT INTO 语句可用于通过另一种模式创建一个新的空表。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> *</span><br><span class=\"line\"><span class=\"keyword\">INTO</span> newtable</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"number\">1</span>=<span class=\"number\">0</span>;  <span class=\"comment\">-- 只需要添加促使查询没有数据返回的 WHERE 子句即可</span></span><br></pre></td></tr></table></figure></p>\n<p>注意事项:</p>\n<ul>\n<li>注:新表将会使用 SELECT 语句中定义的列名称和类型进行创建。但是可以使用 AS 子句来应用新名称。</li>\n</ul>\n<p><br></p>\n<h5 id=\"INSERT-INTO-SELECT-语句\"><a href=\"#INSERT-INTO-SELECT-语句\" class=\"headerlink\" title=\"INSERT INTO SELECT 语句\"></a>INSERT INTO SELECT 语句</h5><p>描述:INSERT INTO SELECT 语句从一个表复制数据，目标表中任何已存在的行都不会受影响。然后把数据插入到一个<code>已存在的表中</code>(非常注意不同于SELECT INTO语句转存的表必须存在，而且字段类型一致)。</p>\n<p>SQL INSERT INTO SELECT 语法：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 从一个表中复制所有的列插入到另一个已存在的表中：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table2</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> table1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 只复制希望的列插入到另一个已存在的表中：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table2 (column_name(s))</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> column_name(s)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> table1;</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 复制 \"apps\" 中的数据插入到 \"Websites\" 中：</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Websites (<span class=\"keyword\">name</span>, country)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> app_name, country <span class=\"keyword\">FROM</span> apps;</span><br></pre></td></tr></table></figure></p>\n<p>select into from 和 insert into select 两则的区别？</p>\n<ul>\n<li>相同点都是用来复制表，不同点前者MySQL数据库不支持，而后者语句语法支持 以及 复制的时候是否要目标表存在；</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li>注:<code>select into [newTable] from</code> ：要求目标表不存在，因为在插入时会自动创建；将查询出来的数据整理到一张新表中保存，表结构与查询结构一致。</li>\n<li>注:<code>insert into [newTable]  select from</code>：要求目标表存在，为已经存在的表批量添加新数据。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 即，查询出来结果---&gt;复制一张同结构的空表---&gt;将数据拷贝进去。</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> *（查询出来的结果） <span class=\"keyword\">into</span> newtable（新的表名）<span class=\"keyword\">form</span> <span class=\"keyword\">where</span> （后续条件）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 即，指定一张想要插入数据的表格(注意建立的表的字段结构)---&gt;对数据进行加工筛选---&gt;填入一张准备好的表格。</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span>  (已准备好的表) <span class=\"keyword\">select</span> *（或者取用自己想要的结构）frome 表名 <span class=\"keyword\">where</span> 各种条件</span><br></pre></td></tr></table></figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Database","path":"api/categories/Database.json"}],"tags":[{"name":"MySQL","path":"api/tags/MySQL.json"}]}