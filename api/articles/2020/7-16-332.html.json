{"title":"Flask扩展使用笔记","slug":"编程世界/Python/Web开发/Flask/扩展进阶/Flask扩展使用笔记","date":"2020-07-16T12:34:30.000Z","updated":"2022-08-10T00:22:12.233Z","url":"2020/7-16-332.html","path":"api/articles/2020/7-16-332.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200916230105.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201022222358.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"Flask-Script-扩展\"><a href=\"#Flask-Script-扩展\" class=\"headerlink\" title=\"Flask-Script 扩展\"></a>Flask-Script 扩展</h4><p>描述: 他是可以支持FLASK命令行参数的</p>\n<p>使用流程:使用app创建manager对象并且启动Manager对象;</p>\n<h4 id=\"Flask-Buleprint-扩展\"><a href=\"#Flask-Buleprint-扩展\" class=\"headerlink\" title=\"Flask-Buleprint 扩展\"></a>Flask-Buleprint 扩展</h4><p>描述: 可以扩展路由</p>\n<p><br/></p>\n<h4 id=\"Flask-Migrate-扩展\"><a href=\"#Flask-Migrate-扩展\" class=\"headerlink\" title=\"Flask-Migrate 扩展\"></a>Flask-Migrate 扩展</h4><p>描述:该扩展实现数据库字段模型迁移</p>\n<ul>\n<li>在Flask中像Django中一样进行模型迁移，初始化使用app 和 db 进行初始化，同时也可以使用懒加载方法</li>\n</ul>\n<p>初始化需要app和数据库(SQLAlchemy)需要配置Flask-script扩展 使用在manager添加一个管理指令，manager.add_command(‘db’,MigrateCommand)</p>\n<p>调用:<br>python xx.py db {command}</p>\n<p>依托于SQLAlchemy进行数据库迁移,Flask从入门到精通之使用Flask-Migrate实现数据库迁移</p>\n<ul>\n<li><p>在开发程序的过程中，你会发现有时需要修改数据库模型，而且修改之后还需要更新数据库。仅当数据库表不存在时，Flask-SQLAlchemy 才会根据模型进行创建。因此，更新表的唯一方式就是先删除旧表，不过这样做会丢失数据库中的所有数据。更新表的更好方法是使用数据库迁移框架。源码版本控制工具可以跟踪源码文件的变化，类似地，数据库迁移框架能跟踪数据库模式的变化，然后增量式的把变化应用到数据库中。</p>\n</li>\n<li><p>SQLAlchemy 的主力开发人员编写了一个迁移框架，称为Alembic（<a href=\"https://alembic.readthedocs.org/en/latest/index.html）。除了直接使用Alembic\" target=\"_blank\" rel=\"noopener\">https://alembic.readthedocs.org/en/latest/index.html）。除了直接使用Alembic</a> 之外，Flask 程序还可使用Flask-Migrate（<a href=\"http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对Alembic\" target=\"_blank\" rel=\"noopener\">http://flask-migrate.readthedocs.org/en/latest/）扩展。这个扩展对Alembic</a> 做了轻量级包装，并集成到Flask-Script 中，所有操作都通过Flask-Script 命令完成。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\setup.py db -?</span><br><span class=\"line\">usage: Perform database migrations</span><br><span class=\"line\">Perform database migrations</span><br><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;init,revision,migrate,edit,merge,upgrade,downgrade,show,<span class=\"built_in\">history</span>,heads,branches,current,stamp&#125;</span><br><span class=\"line\">    init                Creates a new migration repository</span><br><span class=\"line\">    revision            Create a new revision file.</span><br><span class=\"line\">    migrate             Alias <span class=\"keyword\">for</span> <span class=\"string\">'revision --autogenerate'</span></span><br><span class=\"line\">    edit                Edit current revision.</span><br><span class=\"line\">    merge               Merge two revisions together. Creates a new migration</span><br><span class=\"line\">                        file</span><br><span class=\"line\">    upgrade             Upgrade to a later version</span><br><span class=\"line\">    downgrade           Revert to a previous version</span><br><span class=\"line\">    show                Show the revision denoted by the given symbol.</span><br><span class=\"line\">    <span class=\"built_in\">history</span>             List changeset scripts <span class=\"keyword\">in</span> chronological order.</span><br><span class=\"line\">    heads               Show current available heads <span class=\"keyword\">in</span> the script directory</span><br><span class=\"line\">    branches            Show current branch points</span><br><span class=\"line\">    current             Display the current revision <span class=\"keyword\">for</span> each database.</span><br><span class=\"line\">    stamp               <span class=\"string\">'stamp'</span> the revision table with the given revision;dont run any migrations</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:</span><br><span class=\"line\">  -?, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">python .\\setup.py db init</span><br><span class=\"line\">Creating directory E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\versions ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\alembic.ini ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\env.py ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\README ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\script.py.mako ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'E:\\\\githubProject\\\\Study-Promgram\\\\Python3\\\\Flask\\\\Day2\\\\migrations\\\\alembic.ini'</span> before proceeding.   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 迁移</span></span><br><span class=\"line\">python .\\setup.py db migrate</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added table <span class=\"string\">'member'</span></span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2\\migrations\\versions\\03e14bc22cd7_.py ...  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day2&gt; python .\\setup.py db upgrade</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade  -&gt; 03e14bc22cd7, empty message</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added column <span class=\"string\">'member.age'</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3\\migrations\\versions\\881b583153df_.py ...  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db upgrade</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 849e0b98a81c -&gt; 881b583153df, empty message</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看标识版本</span></span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db downgrade --tag <span class=\"string\">\"Revert previous version\"</span>       </span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade 881b583153df -&gt; 849e0b98a81c, empty message</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"Flask-Session-扩展\"><a href=\"#Flask-Session-扩展\" class=\"headerlink\" title=\"Flask-Session 扩展\"></a>Flask-Session 扩展</h4><p>描述:其实现了将服务器端生成session数据存储在指定的关系型、菲关系、磁盘文件中并将对应的key的HASH存储在网页的Cookie中;</p>\n<p>关系型数据库关系越复杂性能越低，非关系型数据库由于采用key-value形式没有级联所以效率高(通过hash表确定Key);</p>\n<p>flask-session环境安装<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-session</span><br><span class=\"line\">pip install redis</span><br></pre></td></tr></table></figure></p>\n<p>例如.存储在redis之中cookie是以hash为key,其反序列化字符串为内容;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 网页中响应的cookie</span></span><br><span class=\"line\">session=b2af4f33-09b2-4fe4-8cec-fcefe6af2d54; Expires=Sat, 17-Oct-2020 08:34:56 GMT; Secure; HttpOnly; Path=/</span><br><span class=\"line\"><span class=\"comment\"># (2) Redis中b2af4f33-09b2-4fe4-8cec-fcefe6af2d54哈希存储内容 (注意前缀)</span></span><br><span class=\"line\">&gt; get developb2af4f33-09b2-4fe4-8cec-fcefe6af2d54</span><br><span class=\"line\">�&#125;q(X</span><br><span class=\"line\">_permanentq�XnameqXWeiyiGeek-RedisqXusernameqX唯一极客qu.</span><br><span class=\"line\">&gt; ttl developb2af4f33-09b2-4fe4-8cec-fcefe6af2d54</span><br><span class=\"line\">2678272</span><br></pre></td></tr></table></figure></p>\n<p>采用Redis进行存储session的app.config的常规配置:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_TYPE'</span>]  = <span class=\"string\">'redis'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_REDIS'</span>]  = Redis(host=<span class=\"string\">'10.10.172.10'</span>, password=<span class=\"string\">'0000'</span>,db=<span class=\"number\">1</span>)</span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_KEY_PREFIX'</span>]  = <span class=\"string\">\"develop:\"</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_USER_SIGNER'</span>]  = <span class=\"literal\">True</span>    <span class=\"comment\"># 会话用户签名者加入salt与客户端的hmac</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_COOKIE_SECURE'</span>]  = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> session</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_session <span class=\"keyword\">import</span> Session</span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_TYPE'</span>] = <span class=\"string\">'redis'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SESSION_REDIS'</span>] = Redis(host=<span class=\"string\">'192.168.100.10'</span>, password=<span class=\"string\">'000000'</span>,db=<span class=\"number\">3</span>)</span><br><span class=\"line\">Session(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/index1')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ret = session.items()</span><br><span class=\"line\">    print(ret)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'index1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/index2')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    session.update(&#123;<span class=\"string\">'a'</span>:<span class=\"number\">123</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'index2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/1/20200916230105.png\" alt=\"WeiyiGeek.db3\" title=\"\" class=\"\">\n                <p>WeiyiGeek.db3</p>\n            </figure>\n<p><br></p>\n<h4 id=\"Flask-Bootstrap-扩展\"><a href=\"#Flask-Bootstrap-扩展\" class=\"headerlink\" title=\"Flask-Bootstrap 扩展\"></a>Flask-Bootstrap 扩展</h4><p>描述: 将Bootstrap3集成到Flask中我们可以以block的形式进行继承扩充, 并且带有分页、兼容IE等等视图标签函数</p>\n<p>参考地址: <a href=\"https://flask-bootstrap-zh.readthedocs.io/zh/latest/basic-usage.html#id2\" target=\"_blank\" rel=\"noopener\">https://flask-bootstrap-zh.readthedocs.io/zh/latest/basic-usage.html#id2</a><br>项目地址：<a href=\"https://github.com/mbr/flask-bootstrap/\" target=\"_blank\" rel=\"noopener\">https://github.com/mbr/flask-bootstrap/</a></p>\n<p>安装使用:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始前第一步是导入和加载扩展</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_bootstrap <span class=\"keyword\">import</span> Bootstrap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_app</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  app = Flask(__name__)</span><br><span class=\"line\">  Bootstrap(app)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> app</span><br></pre></td></tr></table></figure></p>\n<p>示例程序:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;%- extends <span class=\"string\">\"bootstrap/base.html\"</span> %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;# 网页标题设置带有默认标题 #&#125;</span><br><span class=\"line\">&#123;% block title %&#125;Sample App <span class=\"keyword\">for</span> Flask-Bootstrap&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;# 在做这些工作的同时，我们还支持对旧浏览器的修复,采用宏函数进行实现 #&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">import</span> <span class=\"string\">\"bootstrap/fixes.html\"</span> <span class=\"keyword\">as</span> fixes %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block head %&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">super</span>()&#125;&#125;</span><br><span class=\"line\">&#123;#- Docs: http://pythonhosted.org/Flask-Bootstrap/macros.html#fixes</span><br><span class=\"line\">   The sample application already contains the required static files. #&#125;</span><br><span class=\"line\">&#123;&#123;fixes.ie8()&#125;&#125;</span><br><span class=\"line\">&#123;%- endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;# Adding our own CSS files is also done here. Check the documentation at</span><br><span class=\"line\">   http:<span class=\"comment\">//pythonhosted.org/Flask-Bootstrap/basic-usage.html#available-blocks</span></span><br><span class=\"line\">   for an overview. #&#125;</span><br><span class=\"line\">&#123;% block styles -%&#125;</span><br><span class=\"line\">    &#123;&#123;super()&#125;&#125;  &#123;# do not forget to call super or Bootstrap's own stylesheets</span><br><span class=\"line\">                    will disappear! #&#125;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span></span><br><span class=\"line\">          href=<span class=\"string\">\"&#123;&#123;url_for('static', filename='sample-app.css')&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;# Finally, round things out with navigation #&#125;</span><br><span class=\"line\">&#123;% block navbar %&#125;</span><br><span class=\"line\">  &#123;&#123;nav.frontend_top.render()&#125;&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"Flask-Debugtoolbar-扩展\"><a href=\"#Flask-Debugtoolbar-扩展\" class=\"headerlink\" title=\"Flask-Debugtoolbar 扩展\"></a>Flask-Debugtoolbar 扩展</h4><p>描述:Flask开发帮助工具插件<code>Flask-Debugtoolbar</code>它是从Django中借鉴的样式基本一致；</p>\n<p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install Flask-Debugtoolbar</span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Day3\\App\\ext.py</span></span><br><span class=\"line\">import DebugToolbarExtension</span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在第三方插件初始化的时候加载</span></span><br><span class=\"line\">def init_ext(app):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  DebugToolbarExtension(app)      <span class=\"comment\"># 在ext.py中进行初始化</span></span><br></pre></td></tr></table></figure></p>\n<p>![WeiyiGeek.DebugToolbar蓝图�<a href=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimageraw/masterek/blogimage/2020/1/20201011220828.png\" target=\"_blank\" rel=\"noopener\">https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimageraw/masterek/blogimage/2020/1/20201011220828.png</a>)</p>\n<p><strong>入坑与出坑:</strong><br>问题1.ValueError: path is on mount ‘c:’, start on mount ‘D:’<br>问题描述: 使用Flask-DebugToolbar包后，报错win10 Flask-DebugToolbar ValueError: path is on mount ‘c:’, start on mount ‘D:’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">\"D:\\Program Files (x86)\\Python37-32\\lib\\ntpath.py\"</span>, line 562, <span class=\"keyword\">in</span> relpath</span><br><span class=\"line\">  [Open an interactive python shell <span class=\"keyword\">in</span> this frame] path_drive, start_drive))</span><br></pre></td></tr></table></figure><br>问题原因: 有些包从C盘导人到了项目之中,可以通过<code>print(sys.path)</code>查看系统中Python环境目录<code>C:\\Users\\WEIYIG~1\\AppData\\Roaming\\Python\\Python37\\site-packages</code><br>解决办法: </p>\n<ul>\n<li>1.暂停项目</li>\n<li>2.删除C盘中的site-packages模块使得不从C盘导包<code>C:\\Users\\WEIYIG~1\\AppData\\Roaming\\Python\\Python37\\site-packages</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del /Q /S C:\\Users\\WEIYIG~1\\AppData\\Roaming\\Python\\Python37\\site-packages\\*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Flask-caching-扩展\"><a href=\"#Flask-caching-扩展\" class=\"headerlink\" title=\"Flask-caching 扩展\"></a>Flask-caching 扩展</h4><p>官网: <a href=\"https://pythonhosted.org/Flask-Caching/\" target=\"_blank\" rel=\"noopener\">https://pythonhosted.org/Flask-Caching/</a></p>\n<p><strong>Q: 什么是Flask-caching扩展? 它有何作用?</strong></p>\n<blockquote>\n<p>答: Flask-caching是Flask的一个扩展为各种后端添加缓存支持到任何Flask应用程序。除了通过统一的API提供对所有werkzeug支持的缓存后端的支持外，还可以通过子类化来开发自己的缓存后端;<br>简单的说它是用于后端数据缓存的例如redis的数据缓存;</p>\n</blockquote>\n<p>扩展安装:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\">$ easy_install Flask-Caching</span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\">$ pip install Flask-Caching</span><br></pre></td></tr></table></figure></p>\n<p>基础配置:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_caching <span class=\"keyword\">import</span> Cache</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">cache = Cache(app, config=&#123;<span class=\"string\">'CACHE_TYPE'</span>: <span class=\"string\">'simple'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用后初始化懒加载的方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_ext</span><span class=\"params\">(app)</span>:</span></span><br><span class=\"line\">  .....</span><br><span class=\"line\">  cache.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------------------------------ # </span></span><br><span class=\"line\"><span class=\"comment\"># 还可以提供备用的配置：</span></span><br><span class=\"line\"><span class=\"comment\">#: Method A: During instantiation of class</span></span><br><span class=\"line\">cache = Cache(config=&#123;<span class=\"string\">'CACHE_TYPE'</span>: <span class=\"string\">'simple'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#: Method B: During init_app call</span></span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\">cache.init_app(app, config=&#123;<span class=\"string\">'CACHE_TYPE'</span>: <span class=\"string\">'simple'</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>简单使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cache 缓存设置在视图@router装饰与函数定义之间;</span></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">@cache.cached(timeout=50)</span><br><span class=\"line\">def index():</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">'Cached for 50s'</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>缓存配置参数</strong></p>\n<ul>\n<li>CACHE_TYPE ：指定要使用的缓存对象的类型。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 内置缓存类型</span></span><br><span class=\"line\">null: NullCache (default)</span><br><span class=\"line\">simple: SimpleCache  - 常用</span><br><span class=\"line\">filesystem: FileSystemCache</span><br><span class=\"line\">redis: RedisCache (Werkzeug &gt;= 0.7 and redis required) - 常用</span><br><span class=\"line\">uwsgi: UWSGICache (Werkzeug &gt;= 0.12 and uwsgi required)</span><br><span class=\"line\">memcached: MemcachedCache (pylibmc or memcache required)</span><br><span class=\"line\">gaememcached: GAEMemcachedCache</span><br><span class=\"line\">saslmemcached: SASLMemcachedCache (pylibmc required)</span><br><span class=\"line\">spreadsaslmemcached: SpreadSASLMemcachedCache (pylibmc required)</span><br></pre></td></tr></table></figure></li>\n<li>CACHE_NO_NULL_WARNING : 在使用缓存类型为“null”时沉默警告消息。</li>\n</ul>\n<ul>\n<li>CACHE_ARGS : 可选列表，用于在缓存类实例化期间解包和传递。</li>\n<li>CACHE_OPTIONS : 在缓存类实例化期间传递的可选字典。</li>\n<li>CACHE_DEFAULT_TIMEOUT : 如果没有指定超时时使用的默认超时（）时间单位是秒。</li>\n<li><p>CACHE_KEY_PREFIX : 在所有键之前添加的前缀, 这使得对不同的应用程序使用相同的memcached服务器成为可能</p>\n</li>\n<li><p>CACHE_UWSGI_NAME：要连接的uwsgi缓存实例的名称，例如: mycache@localhost:3031</p>\n</li>\n<li><p>CACHE_MEMCACHED_SERVERS : 仅用于MemcachedCache服务器地址的列表或元组。</p>\n</li>\n<li>CACHE_MEMCACHED_USERNAME : 仅用于MemcachedCache的用户</li>\n<li><p>CACHE_MEMCACHED_PASSWORD : 仅用于MemcachedCache的密码</p>\n</li>\n<li><p>CACHE_REDIS_HOST :    A Redis server host. Used only for RedisCache.</p>\n</li>\n<li>CACHE_REDIS_PORT :    A Redis server port. Default is 6379. Used only for RedisCache.</li>\n<li>CACHE_REDIS_PASSWORD :    A Redis password for server. Used only for RedisCache.</li>\n<li>CACHE_REDIS_DB :    A Redis db (zero-based number index). Default is 0. Used only for RedisCache.</li>\n<li>CACHE_REDIS_URL :    Used only for RedisCache.  URL to connect to Redis server. Example <code>redis://user:password@localhost:6379/2.</code> </li>\n<li>CACHE_DIR : 仅用于FileSystemCache。</li>\n</ul>\n<p><br></p>\n<p><strong>常用API方法</strong><br>这个类是用来控制缓存对象:<code>class flask_caching.Cache(app=None, with_jinja2_ext=True, config=None)</code></p>\n<ul>\n<li>init_app 方法: init_app(app, config=None)应用程序对象初始化缓存</li>\n<li>cached 方法 : cached(timeout=None, key_prefix=’view/%s’, unless=None, forced_update=None, query_string=False)</li>\n<li>get 方法 : get(*args, **kwargs)</li>\n<li>get_many 方法 : get_many(*args, **kwargs)</li>\n</ul>\n<ul>\n<li>add 方法 : add(*args, **kwargs) Proxy function for internal cache object.</li>\n<li>set 方法 : set(*args, **kwargs) Proxy function for internal cache object.</li>\n<li>set_many 方法 : set_many(*args, **kwargs) Proxy function for internal cache object.</li>\n</ul>\n<ul>\n<li>clear 方法 : 清空缓存</li>\n<li>delete 方法 : delete(*args, **kwargs) 删除指定key缓存;</li>\n<li>delete_many 方法 : delete_many(*args, **kwargs) 内部缓存对象的代理函数。</li>\n<li>delete_memoized 方法 : delete_memoized(f, *args, **kwargs)</li>\n</ul>\n<p><br></p>\n<p><strong>使用案例</strong></p>\n<ul>\n<li>1.临时缓存删除与清空<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.删除指定键</span></span><br><span class=\"line\"><span class=\"comment\"># 如果提供的键，你可以很容易生成模板片段密钥，并从模板上下文之外将其删除：</span></span><br><span class=\"line\">from flask_caching import make_template_fragment_key</span><br><span class=\"line\">key = make_template_fragment_key(<span class=\"string\">\"key1\"</span>, vary_on=[<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"key3\"</span>])</span><br><span class=\"line\">cache.delete(key)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.清空应用程序缓存</span></span><br><span class=\"line\">from flask_caching import Cache</span><br><span class=\"line\">....</span><br><span class=\"line\">cache = Cache()</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    cache.init_app(app, config=&#123;<span class=\"string\">'CACHE_TYPE'</span>: <span class=\"string\">'simple'</span>&#125;)</span><br><span class=\"line\">    with app.app_context(): </span><br><span class=\"line\">        cache.clear()   <span class=\"comment\"># 关键函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注意事项:一些后端实现不支持完全清除缓存。此外如果你没有使用键前缀，一些实现(例如Redis)将刷新整个数据库。确保没有在缓存数据库中存储任何其他数据。</p>\n<ul>\n<li>2.将数据查询到的结果进行缓存并在一段内不会失效;<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意需要进行导包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> App.ext <span class=\"keyword\">import</span> cache</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> and_,or_,not_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/logicalcache/')</span></span><br><span class=\"line\"><span class=\"meta\">@cache.cached(timeout=50)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_locgical_cache</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  print(<span class=\"string\">\"首次进入将被缓存....\"</span>)</span><br><span class=\"line\">  fdog = FDog.query.filter(not_(or_(FDog.id.__eq__(<span class=\"number\">12</span>),FDog.comment.contains(<span class=\"string\">'12'</span>),FDog.fid.__eq__(<span class=\"number\">99</span>))))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> render_template(<span class=\"string\">'cache.html'</span>,title=<span class=\"string\">\"Flash-cache 与 逻辑运算符实践!\"</span>, result=fdog)</span><br></pre></td></tr></table></figure>\n执行结果:<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2020/2/20201022222358.png\" alt=\"WeiyiGeek.flask-cache\" title=\"\" class=\"\">\n                <p>WeiyiGeek.flask-cache</p>\n            </figure></li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Python3","path":"api/categories/Python3.json"},{"name":"Web开发","path":"api/categories/Web开发.json"}],"tags":[{"name":"Flask","path":"api/tags/Flask.json"},{"name":"Flask-扩展模块","path":"api/tags/Flask-扩展模块.json"}]}