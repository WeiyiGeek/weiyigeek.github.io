{"title":"Python3内置函数表.md","slug":"编程世界/Python/模块函数/Python3内置函数","date":"2019-03-20T12:34:33.000Z","updated":"2022-03-29T05:39:06.297Z","url":"2019/3-20-341.html","path":"api/articles/2019/3-20-341.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031818.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031819.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031820.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031821.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031822.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031825.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031826.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-Python内置常用函数\"><a href=\"#0x00-Python内置常用函数\" class=\"headerlink\" title=\"0x00 Python内置常用函数\"></a>0x00 Python内置常用函数</h4><p><strong>Q：如何查看内置函数与方法？</strong><br>A：dir(<strong>builtins</strong>) 或者 dir(模块)，以help查询具体方法的说明<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> builtins</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dir(builtins)</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'ArithmeticError'</span>, <span class=\"string\">'AssertionError'</span>, <span class=\"string\">'AttributeError'</span>, <span class=\"string\">'BaseException'</span>, <span class=\"string\">'BlockingIOError'</span>, <span class=\"string\">'BrokenPipeError'</span>, <span class=\"string\">'BufferError'</span>, <span class=\"string\">'BytesWarning'</span>, <span class=\"string\">'ChildProcessError'</span>, <span class=\"string\">'ConnectionAbortedError'</span>, <span class=\"string\">'ConnectionError'</span>, <span class=\"string\">'ConnectionRefusedError'</span>, <span class=\"string\">'ConnectionResetError'</span>, <span class=\"string\">'DeprecationWarning'</span>, <span class=\"string\">'EOFError'</span>, <span class=\"string\">'Ellipsis'</span>, <span class=\"string\">'EnvironmentError'</span>, <span class=\"string\">'Exception'</span>, <span class=\"string\">'False'</span>, <span class=\"string\">'FileExistsError'</span>, <span class=\"string\">'FileNotFoundError'</span>, <span class=\"string\">'FloatingPointError'</span>, <span class=\"string\">'FutureWarning'</span>, <span class=\"string\">'GeneratorExit'</span>, <span class=\"string\">'IOError'</span>, <span class=\"string\">'ImportError'</span>, <span class=\"string\">'ImportWarning'</span>, <span class=\"string\">'IndentationError'</span>, <span class=\"string\">'IndexError'</span>, <span class=\"string\">'InterruptedError'</span>, <span class=\"string\">'IsADirectoryError'</span>, <span class=\"string\">'KeyError'</span>, <span class=\"string\">'KeyboardInterrupt'</span>, <span class=\"string\">'LookupError'</span>, <span class=\"string\">'MemoryError'</span>, <span class=\"string\">'NameError'</span>, <span class=\"string\">'None'</span>, <span class=\"string\">'NotADirectoryError'</span>, <span class=\"string\">'NotImplemented'</span>, <span class=\"string\">'NotImplementedError'</span>, <span class=\"string\">'OSError'</span>, <span class=\"string\">'OverflowError'</span>, <span class=\"string\">'PendingDeprecationWarning'</span>, <span class=\"string\">'PermissionError'</span>, <span class=\"string\">'ProcessLookupError'</span>, <span class=\"string\">'RecursionError'</span>, <span class=\"string\">'ReferenceError'</span>, <span class=\"string\">'ResourceWarning'</span>, <span class=\"string\">'RuntimeError'</span>, <span class=\"string\">'RuntimeWarning'</span>, <span class=\"string\">'StopAsyncIteration'</span>, <span class=\"string\">'StopIteration'</span>, <span class=\"string\">'SyntaxError'</span>, <span class=\"string\">'SyntaxWarning'</span>, <span class=\"string\">'SystemError'</span>, <span class=\"string\">'SystemExit'</span>, <span class=\"string\">'TabError'</span>, <span class=\"string\">'TimeoutError'</span>, <span class=\"string\">'True'</span>, <span class=\"string\">'TypeError'</span>, <span class=\"string\">'UnboundLocalError'</span>,</span><br><span class=\"line\"><span class=\"string\">'UnicodeDecodeError'</span>, <span class=\"string\">'UnicodeEncodeError'</span>, <span class=\"string\">'UnicodeError'</span>, <span class=\"string\">'UnicodeTranslateError'</span>, <span class=\"string\">'UnicodeWarning'</span>, <span class=\"string\">'UserWarning'</span>, <span class=\"string\">'ValueError'</span>, <span class=\"string\">'Warning'</span>, <span class=\"string\">'WindowsError'</span>, <span class=\"string\">'ZeroDivisionError'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'__build_class__'</span>, <span class=\"string\">'__debug__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__import__'</span>, <span class=\"string\">'__loader__'</span>, <span class=\"string\">'__name__'</span>, <span class=\"string\">'__package__'</span>, <span class=\"string\">'__spec__'</span>,]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#内置函数</span></span><br><span class=\"line\">[<span class=\"string\">'abs'</span>, <span class=\"string\">'all'</span>, <span class=\"string\">'any'</span>, <span class=\"string\">'ascii'</span>, <span class=\"string\">'bin'</span>, <span class=\"string\">'bool'</span>, <span class=\"string\">'bytearray'</span>, <span class=\"string\">'bytes'</span>, <span class=\"string\">'callable'</span>, <span class=\"string\">'chr'</span>, <span class=\"string\">'classmethod'</span>, <span class=\"string\">'compile'</span>, <span class=\"string\">'complex'</span>, <span class=\"string\">'copyright'</span>, <span class=\"string\">'credits'</span>, <span class=\"string\">'delattr'</span>, <span class=\"string\">'dict'</span>, <span class=\"string\">'dir'</span>, <span class=\"string\">'divmod'</span>, <span class=\"string\">'enumerate'</span>, <span class=\"string\">'eval'</span>, <span class=\"string\">'exec'</span>, <span class=\"string\">'exit'</span>, <span class=\"string\">'filter'</span>, <span class=\"string\">'float'</span>, <span class=\"string\">'format'</span>, <span class=\"string\">'frozenset'</span>, <span class=\"string\">'getattr'</span>, <span class=\"string\">'globals'</span>, <span class=\"string\">'hasattr'</span>, <span class=\"string\">'hash'</span>, <span class=\"string\">'help'</span>, <span class=\"string\">'hex'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'input'</span>, <span class=\"string\">'int'</span>, <span class=\"string\">'isinstance'</span>, <span class=\"string\">'issubclass'</span>, <span class=\"string\">'iter'</span>, <span class=\"string\">'len'</span>, <span class=\"string\">'license'</span>, <span class=\"string\">'list'</span>, <span class=\"string\">'locals'</span>, <span class=\"string\">'map'</span>, <span class=\"string\">'max'</span>, <span class=\"string\">'memoryview'</span>, <span class=\"string\">'min'</span>, <span class=\"string\">'next'</span>, <span class=\"string\">'object'</span>, <span class=\"string\">'oct'</span>, <span class=\"string\">'open'</span>, <span class=\"string\">'ord'</span>, <span class=\"string\">'pow'</span>, <span class=\"string\">'print'</span>, <span class=\"string\">'property'</span>, <span class=\"string\">'quit'</span>, <span class=\"string\">'range'</span>, <span class=\"string\">'repr'</span>, <span class=\"string\">'reversed'</span>, <span class=\"string\">'round'</span>, <span class=\"string\">'set'</span>, <span class=\"string\">'setattr'</span>, <span class=\"string\">'slice'</span>, <span class=\"string\">'sorted'</span>, <span class=\"string\">'staticmethod'</span>, <span class=\"string\">'str'</span>, <span class=\"string\">'sum'</span>, <span class=\"string\">'super'</span>, <span class=\"string\">'tuple'</span>, <span class=\"string\">'type'</span>, <span class=\"string\">'vars'</span>, <span class=\"string\">'zip'</span>]</span><br></pre></td></tr></table></figure><br>(1)input(提示字符串)       //函数可以用来输入值到返回到变量之中是个字符类型.<br>(2)type(变量)             //函数可以用来查询变量所指的对象类型.<br>(3)isinstance(变量,类型)  //函数可以用来查询变量是否是该类型,判断对象 a 是否为 类 A 的实例对象.<br>(4)assert 表达式           //断言当这个关键字后面的条件为假的时候，程序自动崩溃并抛出AssertionError异常，常常用在程序置入检查点上。<br>(5)range(start,stop,step) //生成一个从start参数值到stop参数的值结束的数字序列。<br>(6)id(变量)               //函数用于获取对象内存地址。<br>(7)sorted(iterator)      //返回排序的列表功能与list.sort()相似<br>(8)reversed()            //是一个对象并且返回反序排序的列表功能<br>(9)enumerate()           //返回的是一个对象， 转换成列表并把索引值变成元组插入其中<br>(10)zip(a, b)            //返回的是一个对象，使用list 返回各个由参数的序列组成的元组(tuple)<br>(11)map(fun,iterator)    //根据提供的函数对指定序列做映射,返回包含每次函数返回值的新列表；<br>(12)filter(fun,iterator) //用于过滤序列过滤掉不符合条件的元素，返回一个迭代器对象返回为true的值;<br>(13)bin(intnumber)       //整形转换成2进制形式 010101<br>(14)locals()             //显示出当前局部变量符号表<br>(15)issubclass(class,classinfo(元组)）  #判断一个类是否为另一个类的子类<br>     isinstance(object, classinfo       #判断是否是实例化对象 如果第一个参数不是对象则返回False，第二个参数不是类或者由类对象组合成得元组，会抛出一个TypeError异常；<br>(16)hasattr(obj,name)  #判断实例化对象里面是否存在该属性<br>(17)getattr(obj,name,[‘找不到属性的时候提示’])   #获取类属性信息,找到则返回该值/否则返回该msg提示<br>(18)setattr(obj,name,value)    #设置类对象属性的值,如果存在则覆盖/不存在则建立该属性<br>(19)selattr(obj,name)     #删除对象中属性<br>(20)property(fget=None,fset=None,fdel=None,doc=None) #利用属性来设置属性,设置定义好的属性其参数就是写好的方法(允许编程人员轻松、有效地管理属性访问)</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/use/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#内置函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#1.(input) / print</span></span><br><span class=\"line\">value = input(<span class=\"string\">\"请输入一串字符或者数值:\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"输入的值为 ：\"</span>,value,<span class=\"string\">\" | 类型：\"</span>,type(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.(type)</span></span><br><span class=\"line\">a = <span class=\"string\">'520'</span> </span><br><span class=\"line\">print(type(a))    <span class=\"comment\">#&lt;class 'str'&gt;</span></span><br><span class=\"line\">print(type(<span class=\"number\">5.2</span>))  <span class=\"comment\">#&lt;class 'float'&gt;</span></span><br><span class=\"line\">print(type(<span class=\"literal\">True</span>))  <span class=\"comment\">#&lt;class 'bool'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.isinstance(类型值,类型) =&gt;类型值能匹配上类型则为True,否则False</span></span><br><span class=\"line\">print(isinstance(a,str))</span><br><span class=\"line\">print(isinstance(<span class=\"number\">12</span>,int))</span><br><span class=\"line\">print(isinstance(<span class=\"number\">12.5</span>,float))</span><br><span class=\"line\">print(isinstance(<span class=\"literal\">True</span>,bool))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.assert 断言的使用</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">3</span> &gt; <span class=\"number\">4</span>       //程序为假就<span class=\"keyword\">assert</span>报错</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;pyshell#51&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">3</span> &gt; <span class=\"number\">4</span></span><br><span class=\"line\">    AssertionError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5.range()-BIF函数生成序列</span></span><br><span class=\"line\">print(list(range(<span class=\"number\">5</span>)))  <span class=\"comment\">#[0, 1, 2, 3, 4]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):      //默认是从<span class=\"number\">0</span>开始不包含<span class=\"number\">10</span></span><br><span class=\"line\">  print(i,end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#0 1 2 3 4 5 6 7 8 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#6.sorted 排序功能 / 7.reversed</span></span><br><span class=\"line\">sorted([<span class=\"number\">23</span>,<span class=\"number\">56</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">96</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>])   <span class=\"comment\"># [2, 12, 14, 16, 23, 56, 96]</span></span><br><span class=\"line\">list(reversed([<span class=\"number\">23</span>,<span class=\"number\">56</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">96</span>,<span class=\"number\">12</span>,<span class=\"number\">14</span>]))   <span class=\"comment\">#reversed 返回的是一个对象, 再用reversed转换成列表显示反序  [14, 12, 96, 16, 2, 56, 23]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#8.enumerate  </span></span><br><span class=\"line\">list(enumerate([<span class=\"number\">23</span>, <span class=\"number\">56</span>, <span class=\"number\">2</span>, <span class=\"number\">16</span>, <span class=\"number\">96</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>])) <span class=\"comment\">#进行枚举，返回对象然后经过list返回一个（ 索引+数值）的列表元组 //[(0, 23), (1, 56), (2, 2), (3, 16), (4, 96), (5, 12), (6, 14)]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index,line <span class=\"keyword\">in</span> enumerate(f): <span class=\"comment\"># 还可以将打开的文件进行获取index 与 每一行的值 （当文件较大的时候推荐使用）</span></span><br><span class=\"line\">    print(index,line)  <span class=\"comment\"># 0 #!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#9.zip 列表对应</span></span><br><span class=\"line\">list(zip([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]))    <span class=\"comment\">#//a与b的列表是一一对应的[(1, 4), (2, 5), (3, 6)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#10.map 映射功能 注意：强大的map()后边是可以接受多个序列作为参数的。</span></span><br><span class=\"line\">map(<span class=\"keyword\">lambda</span> x: x ** <span class=\"number\">2</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])   <span class=\"comment\">#使用 lambda 匿名函数与map映射 [1, 4, 9, 16, 25]</span></span><br><span class=\"line\">list(map(<span class=\"keyword\">lambda</span> x, y : [x, y], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>]))  <span class=\"comment\">#打包形式是列表而不是元组</span></span><br><span class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>]]  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#11.filte 过滤出1~100中平方根是整数的数 #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class=\"line\">print(list(filter(<span class=\"keyword\">lambda</span> x: math.sqrt(x) % <span class=\"number\">1</span> == <span class=\"number\">0</span>,range(<span class=\"number\">100</span>))))  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#13.bin 二进制转换</span></span><br><span class=\"line\">bin(<span class=\"number\">255</span>)  <span class=\"comment\">#'0b11111111'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#14.locals</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>locals()</span><br><span class=\"line\">&#123;'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': &#123;&#125;, '__builtins__': &lt;module 'builtins' (built-in)&gt;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#15.issubclass()  类的内置函数.START</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t1</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t2</span><span class=\"params\">(t1)</span>:</span></span><br><span class=\"line\">  noneValue = <span class=\"literal\">None</span>  <span class=\"comment\">#为空值,相当于C中的null</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,x=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    self.x = x</span><br><span class=\"line\"></span><br><span class=\"line\">print(issubclass(t2,t1))  <span class=\"comment\">#t2 是 t1 的子类为真</span></span><br><span class=\"line\">test = t2(<span class=\"number\">1024</span>)</span><br><span class=\"line\">print(isinstance(test,t1))  <span class=\"comment\">#为真的实例化对象test是t1实例化对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#16.hasattr 注意对象属性是要传入字符串</span></span><br><span class=\"line\">print(hasattr(test,<span class=\"string\">'x'</span>))  <span class=\"comment\">#‘x’是test对象的属性 返回 True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#17.getattr 获取对象属性值</span></span><br><span class=\"line\">print(getattr(test,<span class=\"string\">'x'</span>))   <span class=\"comment\">#1024</span></span><br><span class=\"line\">print(getattr(test,<span class=\"string\">'e'</span>,<span class=\"string\">'实例化对象中没有 e 属性'</span>)) <span class=\"comment\">#有实例化对象中没有 e 属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#18.setattr  设置对象属性值</span></span><br><span class=\"line\">setattr(test,e,<span class=\"string\">'Hello world'</span>)</span><br><span class=\"line\">print(getattr(test,<span class=\"string\">'e'</span>,<span class=\"string\">'实例化对象中没有 e 属性'</span>)) <span class=\"comment\">#hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#19.delattr 删除对象属性</span></span><br><span class=\"line\">delattr(test,<span class=\"string\">'e'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#20.property() 利用属性设置属性（将方法再次进行封装调用,无论里面方法名怎么改,接口始终是不变得）！important</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">getSize</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,size = <span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsize</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.size</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setsize</span><span class=\"params\">(self,value)</span>:</span></span><br><span class=\"line\">        self.size = value</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delsize</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> self.size</span><br><span class=\"line\">    </span><br><span class=\"line\">    x = property(getsize,setsize,delsize,<span class=\"string\">\"I'm the 'x' property.\"</span>) <span class=\"comment\">#包含该类建立得一些方法 (此时x是一个属性)</span></span><br><span class=\"line\"></span><br><span class=\"line\">demo = getSize(<span class=\"number\">1024</span>) <span class=\"comment\">#实例化对象</span></span><br><span class=\"line\">print(demo.x)  <span class=\"comment\">#利用属性获取方法返回值  1024</span></span><br><span class=\"line\">demo.x = <span class=\"number\">2048</span>  <span class=\"comment\">#利用属性设置方法值</span></span><br><span class=\"line\">print(demo.x)  <span class=\"comment\">#获取值   2048</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> demo.x     <span class=\"comment\">#删除值</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031818.png\" alt=\"Python内置函数案例\" title=\"\" class=\"\">\n                <p>Python内置函数案例</p>\n            </figure></p>\n<p><br></p>\n<p><strong>Q：isinstance 和 type 的区别在于？</strong><br>A：type()不会认为子类是一种父类类型，isinstance()会认为子类是一种父类类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; class A:</span><br><span class=\"line\">...     pass</span><br><span class=\"line\">&gt;&gt;&gt; class B(A):   #B 是 A 的子类</span><br><span class=\"line\">...     pass</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(A(), A)  #True</span><br><span class=\"line\">&gt;&gt;&gt; type(A()) &#x3D;&#x3D; A      #True</span><br><span class=\"line\">&gt;&gt;&gt; isinstance(B(), A)  #True</span><br><span class=\"line\">&gt;&gt;&gt; type(B()) &#x3D;&#x3D; A      #False</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"0x01-Python字符串内建函数\"><a href=\"#0x01-Python字符串内建函数\" class=\"headerlink\" title=\"0x01 Python字符串内建函数\"></a>0x01 Python字符串内建函数</h4><p>(1) capitalize()  将字符串的第一个字符转换为大写.</p>\n<p>(2) swapcase()  将字符串中大写转换为小写，小写转换为大写.</p>\n<p>(3) lower() 转换字符串中所有大写字符为小写.<br>    upper() 转换字符串中的小写字母为大写.</p>\n<p>(4) title() 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写.</p>\n<p>(5) max(str) 返回字符串 str 中最大的字母.<br>    min(str) 返回字符串 str 中最小的字母.<br>    len(string) 返回字符串长度.</p>\n<p>(6) center(width, fillchar) 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</p>\n<p>(7) zfill (width) 返回长度为 width 的字符串，原字符串右对齐，前面填充0<br>    ljust(width[, fillchar]) 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。<br>    rjust(width,[, fillchar]) 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</p>\n<p>(8) count(str, beg= 0,end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</p>\n<p>(9) find(str, beg=0 end=len(string))<br>检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1<br>    rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找.</p>\n<p>(10) index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在字符串中会报一个异常.<br>     rindex( str, beg=0, end=len(string)) 类似于 index()，不过是从右边开始.</p>\n<p>(11)bytes.decode(encoding=”utf-8”, errors=”strict”)<br>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。<br>   encode(encoding=’UTF-8’,errors=’strict’)<br>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</p>\n<p>(12) startswith(substr, beg=0,end=len(string))<br>检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False，如果beg 和 end 指定值，则在指定范围内检查。<br>    endswith(suffix, beg=0, end=len(string))<br>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</p>\n<p>(13) lstrip() 截掉字符串左边的空格或指定字符。<br>     rstrip() 删除字符串字符串末尾的空格.<br>     strip([chars]) 在字符串上执行 lstrip()和 rstrip()<br>(14) expandtabs(tabsize=8) 把字符串 string中的tab符号转为空格，tab 符号默认的空格数是  8 </p>\n<p>(15) join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</p>\n<p>(16) replace(old, new [, max])  #把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</p>\n<p>(17) split(str=””, num=string.count(str)) num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</p>\n<p>(18) splitlines([keepends]) 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</p>\n<p>(19) maketrans() 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。<br>     translate(table, deletechars=””) 使用创建的字符映射表，将字符串中的字符进行转换；根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 中</p>\n<p>(20) partition(sep) #以字符进行分割成为元组类型</p>\n<p>(21) format() #字符串格式化( 关键字参数key 和 未知参数{0} {1}) replacement 字段</p>\n<p><strong>返回boolean类型:</strong><br>(20)isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False.<br>(21)isalpha() 如果字符串至少有一个字符并且所有字符都是字母则返回True, 否则返回 False<br>(22)isdigit() 如果字符串只包含数字则返回 True 否则返回 False..<br>(22)islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False<br>(23)isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False<br>(24)isspace() 如果字符串中只包含空白，则返回 True，否则返回 False.<br>(25)istitle()   如果字符串中所有的单词拼写首字母是否为大写，且其他字母为小写则返回 True，否则返回 False.<br>(26)isupper()  如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False<br>(27)isdecimal() #检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#字符串内置方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">string = <span class=\"string\">\"thisisdemo\"</span></span><br><span class=\"line\">print(string.capitalize())    <span class=\"comment\">#首字母大写 Thisisdemo</span></span><br><span class=\"line\">print(string.center(<span class=\"number\">30</span>,<span class=\"string\">'-'</span>))  <span class=\"comment\">#将指定字符居中,将剩下的使用-填充 Thisisdemo</span></span><br><span class=\"line\">print(string.count(<span class=\"string\">'i'</span>))      <span class=\"comment\">#字符在字符串出现的次数 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">\"Python编程语言\"</span></span><br><span class=\"line\">str_gbk = str.encode(<span class=\"string\">\"GBK\"</span>)</span><br><span class=\"line\">print(str)   <span class=\"comment\">#字符编码</span></span><br><span class=\"line\">print(<span class=\"string\">\"UTF-8 编码：\"</span>,str.encode(<span class=\"string\">\"UTF-8\"</span>))  <span class=\"comment\"># UTF-8 编码： b'Python\\xe7\\xbc\\x96\\xe7\\xa8\\x8b\\xe8\\xaf\\xad\\xe8\\xa8\\x80'</span></span><br><span class=\"line\">print(<span class=\"string\">\"GBK 编码：\"</span>, str_gbk )  <span class=\"comment\">#GBK 编码： b'Python\\xb1\\xe0\\xb3\\xcc\\xd3\\xef\\xd1\\xd4'</span></span><br><span class=\"line\">print(str_gbk.decode(<span class=\"string\">'GBK'</span>,<span class=\"string\">'strict'</span>))     <span class=\"comment\">#字符解码 Python编程语言</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str.endswith(<span class=\"string\">'言'</span>))  <span class=\"comment\">#判断是否以它结尾返回 True</span></span><br><span class=\"line\">print(str.find(<span class=\"string\">'thon'</span>))  <span class=\"comment\">#检测 str 是否包含在字符串中如果包含返回开始的索引值 2</span></span><br><span class=\"line\">print(str.rfind(<span class=\"string\">'thon'</span>))  <span class=\"comment\">#同上只不过是从右开始查找 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"1234578\"</span>.isdigit()) <span class=\"comment\">#检测字符串是不是都是数字 true</span></span><br><span class=\"line\">print(string.islower())   <span class=\"comment\">#如果字符串中包含至少一个区分大小写的字符</span></span><br><span class=\"line\">str = <span class=\"string\">\"This is String Example...Wow!!!\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (str.title())   <span class=\"comment\">#将字符串所有的单词拼写首字母为大写 This Is String Example...Wow!!!</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (str.istitle())  <span class=\"comment\">#所有的单词拼写首字母是否为大写</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"ABC\"</span>.lower())  <span class=\"comment\">#将大写转换成小写  abc</span></span><br><span class=\"line\">print(<span class=\"string\">\"abc\"</span>.upper())  <span class=\"comment\">#将小写转换成大写  ABC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建字符映射的转换表</span></span><br><span class=\"line\">intab = <span class=\"string\">\"aeiou\"</span></span><br><span class=\"line\">outtab = <span class=\"string\">\"12345\"</span></span><br><span class=\"line\">trantab = str.maketrans(intab,outtab)</span><br><span class=\"line\">str = <span class=\"string\">\"this is string example....wow!!!\"</span>  <span class=\"comment\">#th3s 3s str3ng 2x1mpl2....w4w!!!</span></span><br><span class=\"line\">print(str.translate(trantab))  <span class=\"comment\">#将str字符串的存在的字符采用映射表来替代 比如 i -&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.maketrans(<span class=\"string\">'s'</span>,<span class=\"string\">'S'</span>)     <span class=\"comment\"># &#123;115: 83&#125; 返回Ascii码</span></span><br><span class=\"line\">str.maketrans(<span class=\"string\">'A'</span>,<span class=\"string\">'a'</span>)    <span class=\"comment\"># &#123;65: 97&#125;   返回Ascill码</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str.replace(<span class=\"string\">'this'</span>,<span class=\"string\">'demo'</span>))  <span class=\"comment\">#字符串替换</span></span><br><span class=\"line\">print(<span class=\"string\">\" this is a string \"</span>.strip())  <span class=\"comment\">#清空两边的空格 还有lstrip() / rstrip()</span></span><br><span class=\"line\">print(<span class=\"string\">'-'</span>.join(<span class=\"string\">\"this\"</span>))  <span class=\"comment\">#将序列中的元素以指定的字符连接生成一个新的字符串 t-h-i-s</span></span><br><span class=\"line\">print(str.split(<span class=\"string\">\" \"</span>)) <span class=\"comment\">#字符分割返回列表 ['this', 'is', 'string', 'example....wow!!!']</span></span><br><span class=\"line\">print(<span class=\"string\">\"this\"</span>.zfill(<span class=\"number\">10</span>)) <span class=\"comment\">#原字符串右对齐，前面填充0  000000this</span></span><br><span class=\"line\">print(<span class=\"string\">\"t \\r his \\n is \\n\"</span>.splitlines())  <span class=\"comment\">#按照 ('\\r', '\\r\\n', \\n') 进行分割字符串 返回列表 ['t ', ' his ', ' is ']</span></span><br><span class=\"line\">test = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>I love you baby</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>vercy</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\">... </span>add string\"\"\"</span></span><br><span class=\"line\">test.splitlines() <span class=\"comment\">#['', 'I love you baby', 'vercy', 'add string']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'Xiao\\tJia\\tYu\\tPython'</span>.expandtabs(tabsize=<span class=\"number\">2</span>)  <span class=\"comment\"># 把字tab符号转为空格  'Xiao  Jia Yu  Python'</span></span><br><span class=\"line\"><span class=\"string\">'I test you'</span>.partition(<span class=\"string\">'t'</span>)                    <span class=\"comment\"># 分割成元组 ('I ', 't', 'est you')</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"&#123;0&#125; love &#123;1&#125; &#123;2&#125;\"</span>.format(<span class=\"string\">\"I\"</span>,<span class=\"string\">\"fishc\"</span>,<span class=\"string\">\"com\"</span>)         <span class=\"comment\">#  //位置参数  'I love fishc com'</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;a&#125; love &#123;b&#125; &#123;c&#125;\"</span>.format(a=<span class=\"string\">\"I\"</span>,b=<span class=\"string\">\"fishc\"</span>,c=<span class=\"string\">\"com\"</span>)   <span class=\"comment\">#  //关键字参数 'I love fishc com'</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;0&#125; love &#123;b&#125; &#123;c&#125;\"</span>.format(<span class=\"string\">\"I\"</span>,b=<span class=\"string\">\"fishc\"</span>,c=<span class=\"string\">\"com\"</span>)      <span class=\"comment\">#//混合使用 #也可以将两则混合使用，但关键字参数必须在未知参数后 </span></span><br><span class=\"line\"><span class=\"string\">\"&#123;&#123;123123213&#125;&#125;\"</span>.format(<span class=\"string\">\"不打印\"</span>)                      <span class=\"comment\">#//'&#123;123123213&#125;' 字符串转义</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031819.png\" alt=\"Python字符串案例\" title=\"\" class=\"\">\n                <p>Python字符串案例</p>\n            </figure>\n<hr>\n\n\n<h4 id=\"0x02-Python列表内建函数\"><a href=\"#0x02-Python列表内建函数\" class=\"headerlink\" title=\"0x02 Python列表内建函数\"></a>0x02 Python列表内建函数</h4><p>(1) len(list) 列表元素个数<br>    max(list) 返回列表元素最大值<br>    min(list) 返回列表元素最小值<br>    list(seq) 将元组转换为列表</p>\n<p>Python包含以下方法:<br>(2)list.append(obj)  在列表末尾添加新的对象<br>(3)list.count(obj) 统计某个元素在列表中出现的次数<br>(4)list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）<br>(5)list.index(obj) 从列表中找出某个值第一个匹配项的索引位置<br>(6)list.insert(index, obj) 将对象插入列表<br>(7)list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值<br>(8)list.remove(obj) 移除列表中某个值的第一个匹配项<br>(9)list.reverse() 反向列表中元素，重新排序<br>(10)list.sort( key=None, reverse=False 正排序 /TRUE 反排序) 对原列表进行排序<br>(11)list.clear() 清空列表，清空列表,留下一个Empty的列表<br>(12)list.copy() 复制列表</p>\n<p>代码案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">#功能：获取列表内置方法</span></span><br><span class=\"line\">dir(list)  <span class=\"comment\">#查看内置方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">member = [<span class=\"string\">'list1'</span>,<span class=\"string\">'list2'</span>,<span class=\"string\">'list3'</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"列表长度：\"</span>,len(member))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表是一个大杂缸可以进行比较 可以进行一些 常用操作符</span></span><br><span class=\"line\">list1 = [<span class=\"number\">123</span>]</span><br><span class=\"line\">list2 = [<span class=\"number\">234</span>]</span><br><span class=\"line\">print(list1 &gt; list2) <span class=\"comment\">#进行逻辑判断</span></span><br><span class=\"line\">list3 = [<span class=\"number\">234</span>]</span><br><span class=\"line\">print((list1 &lt; list2) <span class=\"keyword\">and</span> (list2 == list3))  <span class=\"comment\">#进行逻辑判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表添加方法</span></span><br><span class=\"line\">member.insert(<span class=\"number\">0</span>,<span class=\"string\">'0insert'</span>) <span class=\"comment\">#头部插入    //member是对象,append()是对象的一个方法</span></span><br><span class=\"line\">member.insert(<span class=\"number\">2</span>,<span class=\"string\">'2insert'</span>) <span class=\"comment\">#指定位置插入</span></span><br><span class=\"line\">member.extend([<span class=\"string\">'list3'</span>,<span class=\"string\">'list4'</span>]) <span class=\"comment\">#从新建立的一个列表中添加到另外一个列表中，所以extend()中的数据必须是列表.</span></span><br><span class=\"line\">member.append([<span class=\"string\">'4apped1'</span>,<span class=\"string\">'4apped2'</span>]) <span class=\"comment\">#尾部插入列表</span></span><br><span class=\"line\">print(member)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#列表删除元素</span></span><br><span class=\"line\">member.remove(<span class=\"string\">'2insert'</span>) <span class=\"comment\">#不需要知道位置,只需要知道list中的元素数据</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> member[<span class=\"number\">0</span>] <span class=\"comment\">#加上列表的索引就删除该索引上的元素,加上列表对象就删除该列表.</span></span><br><span class=\"line\">print(member.pop()) <span class=\"comment\">#列表利用栈这个数据结构进行存储,因此有了pop()方法进行弹栈,默认从列表中取出最后一个元素给你</span></span><br><span class=\"line\">member.pop(<span class=\"number\">2</span>)  <span class=\"comment\">#还可以加入索引值，进行弹栈 </span></span><br><span class=\"line\">print(member,end=<span class=\"string\">\"\\n\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(member.count(<span class=\"string\">'list3'</span>)) <span class=\"comment\">#统计元素出现次数</span></span><br><span class=\"line\">print(member.index(<span class=\"string\">'list2'</span>)) <span class=\"comment\">#元素索引,根据元素来搜索索引下标</span></span><br><span class=\"line\"></span><br><span class=\"line\">member.reverse()  <span class=\"comment\">#列表重新排序</span></span><br><span class=\"line\">print(member,end=<span class=\"string\">\"\\n\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#采用sort按照指定的方式进行排序</span></span><br><span class=\"line\"><span class=\"comment\">#sort(func[指定排序的算法],key[与算法搭配的关键字])  =&gt; 默认算法归并排序</span></span><br><span class=\"line\">list1 = [<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">58</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">list1.sort()</span><br><span class=\"line\">print(list1)</span><br><span class=\"line\">list1.sort(reverse=<span class=\"literal\">True</span>)  <span class=\"comment\">#或者直接采用reverse=True  =&gt; 列表中的元素必须是同一类型</span></span><br><span class=\"line\">print(list1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#清空与复制列表</span></span><br><span class=\"line\">list2 = member.copy()</span><br><span class=\"line\">print(list2) <span class=\"comment\">#复制列表</span></span><br><span class=\"line\">list2.clear() <span class=\"comment\">#清空列表返回 []</span></span><br><span class=\"line\">print(list2)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031820.png\" alt=\"Python列表案例\" title=\"\" class=\"\">\n                <p>Python列表案例</p>\n            </figure></p>\n<p><em>补充： Python 拷贝对象（深拷贝deepcopy与浅拷贝copy）</em></p>\n<ol>\n<li>copy.copy 浅拷贝 只拷贝父对象，不会拷贝对象的内部的子对象。</li>\n<li>copy.deepcopy 深拷贝 拷贝对象及其子对象</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*-coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]] <span class=\"comment\">#原始对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = a <span class=\"comment\">#赋值，传对象的引用</span></span><br><span class=\"line\">c = copy.copy(a) <span class=\"comment\">#对象拷贝，浅拷贝</span></span><br><span class=\"line\">d = copy.deepcopy(a) <span class=\"comment\">#对象拷贝，深拷贝</span></span><br><span class=\"line\"> </span><br><span class=\"line\">a.append(<span class=\"number\">5</span>) <span class=\"comment\">#修改对象a</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>].append(<span class=\"string\">'c'</span>) <span class=\"comment\">#修改对象a中的['a', 'b']数组对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'a = '</span>, a</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'b = '</span>, b</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'c = '</span>, c</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'d = '</span>, d</span><br><span class=\"line\">输出结果：</span><br><span class=\"line\">a =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">b =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], <span class=\"number\">5</span>]</span><br><span class=\"line\">c =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]]  <span class=\"comment\">#浅拷贝 追加不会修改/但是可以修改</span></span><br><span class=\"line\">d =  [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]]       <span class=\"comment\">#深拷贝</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"0x03-Python集合内建函数\"><a href=\"#0x03-Python集合内建函数\" class=\"headerlink\" title=\"0x03 Python集合内建函数\"></a>0x03 Python集合内建函数</h4><p>(1) add()    为集合添加元素<br>    update()    给集合添加元素<br>(2) clear()    移除集合中的所有元素(清空set())<br>(10) pop()    随机移除元素<br>(11) remove()    移除指定元素 ,如果 s 中不存在 obj，将引发异常<br>(6) discard()    删除集合中指定的元素  ,如果 s 中不存在 obj，也没事儿^_^<br>(3) copy()    拷贝一个集合</p>\n<p>(4) s.union(t)      |返回两个集合的并集 ,    s | t     合并操作：s “或” t 中的元素<br>(5) s.difference(t)    返回多个集合的差集,      s - t  在 s 中存在,在 t 中不存在的元素<br>    s.difference_update()    移除集合中的元素，该元素在指定的集合也存在。     s -= t<br>(7) intersection()    返回集合的交集       s &amp; t<br>    intersection_update()    删除集合中的元素，该元素在指定的集合中不存在。s &amp;= t |s 中仅包括 s 和 t 中共有的成员<br>(12) symmetric_difference()    返回两个集合中不重复的元素集合,异集；     s ^ t<br>     symmetric_difference_update()    移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。 s ^= t</p>\n<p>(8) isdisjoint()    判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。<br>(9) s.issubset(t)    判断指定集合是否为该方法参数集合的子集。   #  s &lt;= t , s 中所有的元素都是 t 的成员<br>    s.issuperset(t)    判断该方法的参数集合是否为指定集合的子集 #  s &gt;= t t 中所有的元素都是 s 的成员<br>(13) fronzeset() 冻结一个集合，时期不能进行添加与修改。</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：集合内置函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">set1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">set2 = &#123;<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">set1.add(<span class=\"number\">8</span>)  <span class=\"comment\">#添加集合元素</span></span><br><span class=\"line\">print(<span class=\"string\">\"添加元素：\"</span>,set1)  <span class=\"comment\">#添加元素： &#123;1, 2, 3, 5, 6, 7, 8&#125;</span></span><br><span class=\"line\">set1.update(set2)  <span class=\"comment\">#可以直接添加集合到 目标集合中</span></span><br><span class=\"line\">print(<span class=\"string\">\"update：\"</span>,set1)  <span class=\"comment\">#update： &#123;1, 2, 3, 5, 6, 7, 8, 9, 10, 11&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set1 = set2.copy()  <span class=\"comment\">#拷贝集合</span></span><br><span class=\"line\">print(<span class=\"string\">\"拷贝：\"</span>,set1)    <span class=\"comment\">#拷贝： &#123;9, 10, 11, 7&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"pop 移除:\"</span>,set2.pop())  <span class=\"comment\">#随机移除元素  pop 移除: 9</span></span><br><span class=\"line\">set2.remove(<span class=\"number\">11</span>)  <span class=\"comment\">#移除指定元素,元素不存在报错</span></span><br><span class=\"line\">set2.discard(<span class=\"number\">10</span>)  <span class=\"comment\">#移除指定元素，元素不存在不报错</span></span><br><span class=\"line\">print(<span class=\"string\">\"remove：\"</span>,set2)  <span class=\"comment\">#remove： &#123;7&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">set2.clear()  <span class=\"comment\">#清空集合</span></span><br><span class=\"line\">print(<span class=\"string\">\"清空：\"</span>,set2)    <span class=\"comment\">#清空： set()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#差集</span></span><br><span class=\"line\">x = &#123;<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>, <span class=\"string\">\"cherry\"</span>&#125;</span><br><span class=\"line\">y = &#123;<span class=\"string\">\"google\"</span>, <span class=\"string\">\"microsoft\"</span>, <span class=\"string\">\"apple\"</span>&#125;</span><br><span class=\"line\">z = x.difference(y)  <span class=\"comment\">#即返回的集合元素包含在第一个集合中，但不包含在第二个集合(方法的参数)中。</span></span><br><span class=\"line\">print(z)  <span class=\"comment\">#&#123;'cherry', 'banana'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.difference_update(y)  <span class=\"comment\">#移除两个集合都包含的元素（直接在集合里面修改）</span></span><br><span class=\"line\">print(<span class=\"string\">\"差集\"</span>,x)  <span class=\"comment\">#差集 &#123;'cherry', 'banana'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#交集</span></span><br><span class=\"line\">x = &#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\">y = &#123;<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>&#125;</span><br><span class=\"line\">z = x.intersection(y)</span><br><span class=\"line\">print(<span class=\"string\">\"交集\"</span>,z)   <span class=\"comment\">#交集 &#123;1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#并集</span></span><br><span class=\"line\">z = x.union(y)</span><br><span class=\"line\">print(<span class=\"string\">\"并集：\"</span>,z) <span class=\"comment\">#并集： &#123;1, 2, 4, 6, 7&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#亦或集（两个集合中都不存在的集合）</span></span><br><span class=\"line\">z = x.symmetric_difference(y)</span><br><span class=\"line\">print(<span class=\"string\">\"异集：\"</span>,z)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断是否为子集</span></span><br><span class=\"line\">print(&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;.issubset(&#123;<span class=\"string\">\"f\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"a\"</span>&#125;)) <span class=\"comment\">#判断集合 x 的所有元素是否都包含在集合 y 中</span></span><br><span class=\"line\">print(&#123;<span class=\"string\">\"f\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"a\"</span>&#125;.issuperset(&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;))<span class=\"comment\">#判断集合 y 的所有元素是否都包含在集合 x 中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断两个集合是否包含相同的元素</span></span><br><span class=\"line\">print(<span class=\"string\">\"集合相同与否：\"</span>,x.isdisjoint(y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#冻结集合（不能被添加也不能被修改）</span></span><br><span class=\"line\">num = frozenset([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])  <span class=\"comment\">#frozenset(&#123;1, 2, 3, 4&#125;) &lt;class 'frozenset'&gt;</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031821.png\" alt=\"Python集合案例\" title=\"\" class=\"\">\n                <p>Python集合案例</p>\n            </figure></p>\n<hr>\n\n<h4 id=\"0x04-Python字典内建函数\"><a href=\"#0x04-Python字典内建函数\" class=\"headerlink\" title=\"0x04 Python字典内建函数\"></a>0x04 Python字典内建函数</h4><p>(1) str(dict)  输出字典，以可打印的字符串表示。<br>(2) radiansdict.fromkeys(seq[, value])  创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值<br>(3) radiansdict.copy() 返回一个字典的浅复制<br>(4) radiansdict.get(key, default=None)  返回指定键的值，如果值不在字典中返回default值<br>(5) radiansdict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br>(6) radiansdict.clear()  删除字典内所有元素<br>(7) radiansdict.keys()      返回一个迭代器，可以使用 list() 来转换为列表<br>(8) radiansdict.values()  返回一个迭代器，可以使用 list() 来转换为列表<br>(9) radiansdict.items()    以列表返回可遍历的(键, 值) 元组数组<br>(10) radiansdict.update(dict2)   把字典dict2的键/值对更新到dict里,就是添加key/value<br>(12) pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。<br>     key值必须给出 , 否则返回default值。<br>(13) popitem()  随机返回并删除字典中的一对键和值(一般删除末尾对)。<br>(11) key in dict    如果键在字典dict里返回true，否则返回false</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能：字典内置函数</span></span><br><span class=\"line\">dict1 = &#123;<span class=\"string\">\"one\"</span>:<span class=\"string\">'weiyigeek'</span>,<span class=\"string\">\"two\"</span>:<span class=\"string\">\"tterdst\"</span>&#125;</span><br><span class=\"line\">dict2 =dict.fromkeys((<span class=\"string\">'name'</span>,<span class=\"string\">'age'</span>),<span class=\"string\">'weiyigeek'</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"字典：\"</span>,str(dict1),<span class=\"string\">\"类型:\"</span>,type(dict1))</span><br><span class=\"line\">print(<span class=\"string\">\"建立字典：\"</span>,str(dict2))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"姓名：\"</span>,dict1.get(<span class=\"string\">'one'</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"未知：\"</span>,dict1.setdefault(<span class=\"string\">'three'</span>,<span class=\"string\">\"ValueNULL\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"Key :\"</span>,list(dict1.keys()))</span><br><span class=\"line\">print(<span class=\"string\">\"Value :\"</span>,list(dict1.values()))</span><br><span class=\"line\">print(<span class=\"string\">\"dict :\"</span>,dict1.items()) <span class=\"comment\">#dict_items([('one', 'weiyigeek'), ('two', 'tterdst'), ('three', 'ValueNULL')])</span></span><br><span class=\"line\"></span><br><span class=\"line\">dict1.update(&#123;<span class=\"string\">'four'</span>:<span class=\"string\">'update'</span>&#125;) <span class=\"comment\">#添加键值对</span></span><br><span class=\"line\">print(<span class=\"string\">\"添加键值对：\"</span>,dict1) <span class=\"comment\">#&#123;'one': 'weiyigeek', 'two': 'tterdst', 'three': 'ValueNULL', 'four': 'update'&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"pop('one') :\"</span>,dict1.pop(<span class=\"string\">'one'</span>))  <span class=\"comment\">#删除指定key与值并返回值 weiyigeek</span></span><br><span class=\"line\">print(<span class=\"string\">\"popitem() :\"</span>,dict1.popitem())  <span class=\"comment\">#删除末尾key ('four', 'update')</span></span><br><span class=\"line\"></span><br><span class=\"line\">dict2.clear()</span><br><span class=\"line\">print(<span class=\"string\">\"清空字典：\"</span>,dict2)  <span class=\"comment\">#清空字典： &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成员运算符</span></span><br><span class=\"line\">print(<span class=\"string\">\"判断键是不是在字典中：\"</span>,<span class=\"string\">'two'</span> <span class=\"keyword\">in</span> dict1)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031822.png\" alt=\"Python字典案例\" title=\"\" class=\"\">\n                <p>Python字典案例</p>\n            </figure></p>\n<h4 id=\"0x05-Python文件系统函数\"><a href=\"#0x05-Python文件系统函数\" class=\"headerlink\" title=\"0x05 Python文件系统函数\"></a>0x05 Python文件系统函数</h4><p>(0) open(file,mode,encoding) #打开文件名称模式格式，以及编码，返回一个f文件对象<br>    open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)<br>(1)  f.close()  #关闭文件<br>(2)  f.read([size=-1])       #从文件读取size个字符，当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回 ;<br>(3)  f.readline([size=-1]) #从文件中读取并返回一行（包括行结束符），如果有size有定义则返回size个字符<br>(4) f.writelines(seq)   #向文件写入一个序列字符串列表seq，如果需要换行则要自己加入每行的换行符。<br>(5) f.write(str) 将字符串str写入文件<br>(6) f.seek(offset, from)   #在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节<br>(7) f.tell() #返回当前在文件中的位置<br>(8) f.truncate([size=file.tell()])  #方法用于截断文件并返回截断的字节长度,默认是截取到文件指针当前位置(9) file.flush()  #刷新文件内部缓冲(同时清空缓冲区)，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入,无返回值。<br>(10) file.fileno()  #返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。<br>(11) file.next()   #返回文件下一行。<br>(12) file.isatty()  #如果文件连接到一个终端设备返回 True，否则返回 False。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文件打开模式</span></span><br><span class=\"line\"><span class=\"string\">'r'</span>\t以只读方式打开文件（默认）</span><br><span class=\"line\"><span class=\"string\">'w'</span>\t以写入的方式打开文件，会覆盖已存在的文件</span><br><span class=\"line\"><span class=\"string\">'x'</span>\t如果文件已经存在，使用此模式打开将引发异常</span><br><span class=\"line\"><span class=\"string\">'a'</span>\t以写入模式打开，如果文件存在，则在末尾追加写入</span><br><span class=\"line\"><span class=\"string\">'b'</span>\t以二进制模式打开文件</span><br><span class=\"line\"><span class=\"string\">'t'</span>\t以文本模式打开（默认）</span><br><span class=\"line\"><span class=\"string\">'+'</span>\t可读写模式（可添加到其他模式中使用）</span><br><span class=\"line\"><span class=\"string\">'U'</span>\t通用换行符支持</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031825.png\" alt=\"open函数mode属性参数\" title=\"\" class=\"\">\n                <p>open函数mode属性参数</p>\n            </figure>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：文件系统</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件读取</span></span><br><span class=\"line\">file = open(<span class=\"string\">'.//python.txt'</span>,mode=<span class=\"string\">'r+'</span>,encoding=<span class=\"string\">'utf-8'</span>)  </span><br><span class=\"line\">print(file)  <span class=\"comment\">#指针对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回一个列表,文件指针指向末尾.</span></span><br><span class=\"line\">print(file.readlines())  </span><br><span class=\"line\">print(<span class=\"string\">\"文件指针位置：\"</span>,file.tell())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改文件指针指向初始位置</span></span><br><span class=\"line\">file.seek(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"文件读取\"</span>,file.read())  <span class=\"comment\">#文件读取</span></span><br><span class=\"line\">file.seek(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"读取行: %s\"</span> % (file.readlines()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用于截断文件并返回截断的字节长度,从第10个字节以后的内容全部删除了</span></span><br><span class=\"line\">file.seek(<span class=\"number\">10</span>)</span><br><span class=\"line\">file.truncate()  <span class=\"comment\">#默认截取当前指针位置</span></span><br><span class=\"line\">file.seek(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"读取行: %s\"</span> % (file.readlines()))</span><br><span class=\"line\">file.close()  <span class=\"comment\">#关闭文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f = open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>)    <span class=\"comment\">#写入文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"文件描述符为: \"</span>, f.fileno()) <span class=\"comment\">#文件描述符为:  3</span></span><br><span class=\"line\"></span><br><span class=\"line\">f.write(<span class=\"string\">\"这是一个文件写入,为了不乱码需要指定utf-8编码\"</span>)</span><br><span class=\"line\">f.writelines(<span class=\"string\">\"文件写如一行字符串\"</span>)</span><br><span class=\"line\">f.flush()   <span class=\"comment\">#将缓存区的数据写入文件/并清空缓存区（进行选择性写入）</span></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031826.png\" alt=\"文件系统实例\" title=\"\" class=\"\">\n                <p>文件系统实例</p>\n            </figure></p>\n<h4 id=\"0x06-Python魔术方法总结\"><a href=\"#0x06-Python魔术方法总结\" class=\"headerlink\" title=\"0x06 Python魔术方法总结\"></a>0x06 Python魔术方法总结</h4><p>Python 的魔术方法非常强大，然而随之而来的则是责任;对象天生拥有一些神奇的方法，它们总被 <em>双下划线所包围</em> ，他们是面向对象的 Python 的一切;<br>如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。</p>\n<p><strong>(1)基本的魔法方法：</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__new__(cls[, ...]) </span><br><span class=\"line\"><span class=\"number\">1.</span>  __new__ 是在一个对象实例化的时候所调用的第一个方法</span><br><span class=\"line\"><span class=\"number\">2.</span> 它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法</span><br><span class=\"line\"><span class=\"number\">3.</span> __new__ 决定是否要使用该 __init__ 方法，因为 __new__ 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 __new__ 没有返回实例对象，则 __init__ 不会被调用</span><br><span class=\"line\"><span class=\"number\">4.</span> __new__ 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</span><br><span class=\"line\">__init__(self[, ...]) \t构造器，当一个实例被创建的时候调用的初始化方法</span><br><span class=\"line\">__del__(self)\t析构器，当一个实例被销毁的时候调用的方法</span><br><span class=\"line\">__call__(self[, args...]) \t允许一个类的实例像函数一样被调用：x(a, b) 调用 x.__call__(a, b)</span><br><span class=\"line\">__len__(self)\t定义当被 len() 调用时的行为</span><br><span class=\"line\">__repr__(self)\t定义当被 repr() 调用时的行为</span><br><span class=\"line\">__str__(self)\t定义当被 str() 调用时的行为</span><br><span class=\"line\">__bytes__(self)\t定义当被 bytes() 调用时的行为</span><br><span class=\"line\">__hash__(self)\t定义当被 hash() 调用时的行为</span><br><span class=\"line\">__bool__(self)\t定义当被 bool() 调用时的行为，应该返回 <span class=\"literal\">True</span> 或 <span class=\"literal\">False</span></span><br><span class=\"line\">__format__(self, format_spec)\t定义当被 format() 调用时的行为</span><br><span class=\"line\">__bases__(self)   <span class=\"comment\">#补充，显示其基类</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>(2) 有关属性</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__getattr__(self, name)\t定义当用户试图获取一个不存在的属性时的行为</span><br><span class=\"line\">__getattribute__(self, name)\t定义当该类的属性被访问时的行为</span><br><span class=\"line\">__setattr__(self, name, value)\t定义当一个属性被设置时的行为</span><br><span class=\"line\">__delattr__(self, name)\t定义当一个属性被删除时的行为</span><br><span class=\"line\">__dir__(self)\t定义当 dir() 被调用时的行为</span><br><span class=\"line\">__get__(self, instance, owner)\t定义当描述符的值被取得时的行为</span><br><span class=\"line\">__set__(self, instance, value)\t定义当描述符的值被改变时的行为</span><br><span class=\"line\">__delete__(self, instance)\t定义当描述符的值被删除时的行为</span><br></pre></td></tr></table></figure></p>\n<p><strong>(3) 比较操作符</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__lt__(self, other)\t定义小于号的行为：x &lt; y 调用 x.__lt__(y)</span><br><span class=\"line\">__le__(self, other)\t定义小于等于号的行为：x &lt;= y 调用 x.__le__(y)</span><br><span class=\"line\">__eq__(self, other)\t定义等于号的行为：x == y 调用 x.__eq__(y)</span><br><span class=\"line\">__ne__(self, other)\t定义不等号的行为：x != y 调用 x.__ne__(y)</span><br><span class=\"line\">__gt__(self, other)\t定义大于号的行为：x &gt; y 调用 x.__gt__(y)</span><br><span class=\"line\">__ge__(self, other)\t定义大于等于号的行为：x &gt;= y 调用 x.__ge__(y)</span><br></pre></td></tr></table></figure></p>\n<p><strong>(4) 算数运算符</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__add__(self, other)\t定义加法的行为：+</span><br><span class=\"line\">__sub__(self, other)\t定义减法的行为：-</span><br><span class=\"line\">__mul__(self, other)\t定义乘法的行为：*</span><br><span class=\"line\">__truediv__(self, other)\t定义真除法的行为：/</span><br><span class=\"line\">__floordiv__(self, other)\t定义整数除法的行为：//</span><br><span class=\"line\">__mod__(self, other)\t定义取模算法的行为：%</span><br><span class=\"line\">__divmod__(self, other)\t定义当被 divmod() 调用时的行为，返回值是一个元组(a//b,a%b)</span><br><span class=\"line\">__pow__(self, other[, modulo]) \t定义当被 power() 调用或 ** 运算时的行为</span><br><span class=\"line\">__lshift__(self, other)\t定义按位左移位的行为：&lt;&lt;</span><br><span class=\"line\">__rshift__(self, other)\t定义按位右移位的行为：&gt;&gt;</span><br><span class=\"line\">__and__(self, other)\t定义按位与操作的行为：&amp;</span><br><span class=\"line\">__xor__(self, other)\t定义按位异或操作的行为：^</span><br><span class=\"line\">__or__(self, other)\t定义按位或操作的行为：|</span><br></pre></td></tr></table></figure></p>\n<p><strong>(5) 反运算</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__radd__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rsub__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rmul__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rtruediv__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rfloordiv__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rmod__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rdivmod__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rpow__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rlshift__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rrshift__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rand__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__rxor__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br><span class=\"line\">__ror__(self, other)\t（与上方相同，当左操作数不支持相应的操作时被调用）</span><br></pre></td></tr></table></figure></p>\n<p><strong>(5)增量赋值运算</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__iadd__(self, other)\t定义赋值加法的行为：+=</span><br><span class=\"line\">__isub__(self, other)\t定义赋值减法的行为：-=</span><br><span class=\"line\">__imul__(self, other)\t定义赋值乘法的行为：*=</span><br><span class=\"line\">__itruediv__(self, other)\t定义赋值真除法的行为：/=</span><br><span class=\"line\">__ifloordiv__(self, other)\t定义赋值整数除法的行为：//=</span><br><span class=\"line\">__imod__(self, other)\t定义赋值取模算法的行为：%=</span><br><span class=\"line\">__ipow__(self, other[, modulo])\t定义赋值幂运算的行为：**=</span><br><span class=\"line\">__ilshift__(self, other)\t定义赋值按位左移位的行为：&lt;&lt;=</span><br><span class=\"line\">__irshift__(self, other)\t定义赋值按位右移位的行为：&gt;&gt;=</span><br><span class=\"line\">__iand__(self, other)\t定义赋值按位与操作的行为：&amp;=</span><br><span class=\"line\">__ixor__(self, other)\t定义赋值按位异或操作的行为：^=</span><br><span class=\"line\">__ior__(self, other)\t定义赋值按位或操作的行为：|=</span><br></pre></td></tr></table></figure></p>\n<p><strong>(6)一元操作符</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__pos__(self)\t定义正号的行为：+x</span><br><span class=\"line\">__neg__(self)\t定义负号的行为：-x</span><br><span class=\"line\">__abs__(self)\t定义当被 abs() 调用时的行为</span><br><span class=\"line\">__invert__(self)\t定义按位求反的行为：~x</span><br></pre></td></tr></table></figure></p>\n<p><strong>(7)类型转换</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__complex__(self)\t定义当被 complex() 调用时的行为（需要返回恰当的值）</span><br><span class=\"line\">__int__(self)\t定义当被 int() 调用时的行为（需要返回恰当的值）</span><br><span class=\"line\">__float__(self)\t定义当被 float() 调用时的行为（需要返回恰当的值）</span><br><span class=\"line\">__round__(self[, n])\t定义当被 round() 调用时的行为（需要返回恰当的值）</span><br><span class=\"line\">__index__(self)</span><br><span class=\"line\"><span class=\"number\">1.</span> 当对象是被应用在切片表达式中时，实现整形强制转换</span><br><span class=\"line\"><span class=\"number\">2.</span> 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 __index__</span><br><span class=\"line\"><span class=\"number\">3.</span> 如果 __index__ 被定义，则 __int__ 也需要被定义，且返回相同的值</span><br></pre></td></tr></table></figure></p>\n<p><strong>(8)上下文管理（with 语句）</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__enter__(self)</span><br><span class=\"line\"><span class=\"number\">1.</span> 定义当使用 <span class=\"keyword\">with</span> 语句时的初始化行为</span><br><span class=\"line\"><span class=\"number\">2.</span> __enter__ 的返回值被 <span class=\"keyword\">with</span> 语句的目标或者 <span class=\"keyword\">as</span> 后的名字绑定</span><br><span class=\"line\"><span class=\"number\">3.</span> </span><br><span class=\"line\">__exit__(self, exc_type, exc_value, traceback)</span><br><span class=\"line\"><span class=\"number\">1.</span> 定义当一个代码块被执行或者终止后上下文管理器应该做什么</span><br><span class=\"line\"><span class=\"number\">2.</span> 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</span><br></pre></td></tr></table></figure></p>\n<p><strong>(9)容器类型</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__len__(self)\t （返回容器中元素的个数 - 前面有讲解）</span><br><span class=\"line\">__getitem__(self, key)\t定义获取容器中指定元素的行为，相当于 self[key]</span><br><span class=\"line\">__setitem__(self, key, value)\t定义设置容器中指定元素的行为，相当于 self[key] = value</span><br><span class=\"line\">__delitem__(self, key)\t定义删除容器中指定元素的行为，相当于 <span class=\"keyword\">del</span> self[key]</span><br><span class=\"line\">__iter__(self)\t定义当迭代容器中的元素的行为</span><br><span class=\"line\">__reversed__(self)\t定义当被 reversed() 调用时的行为</span><br><span class=\"line\">__contains__(self, item)\t定义当使用成员测试运算符（<span class=\"keyword\">in</span> 或 <span class=\"keyword\">not</span> <span class=\"keyword\">in</span>）时的行为</span><br></pre></td></tr></table></figure></p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t1</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">t1print</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'t1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t2</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">t2print</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'t2'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t3</span><span class=\"params\">(t1,t2)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(t3.__bases__)  <span class=\"comment\"># 显示其基类信息 (&lt;class '__main__.t1'&gt;, &lt;class '__main__.t2'&gt;)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"0x07-Python标准异常总结\"><a href=\"#0x07-Python标准异常总结\" class=\"headerlink\" title=\"0x07 Python标准异常总结\"></a>0x07 Python标准异常总结</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl + D  <span class=\"comment\">#EOFError</span></span><br><span class=\"line\">Ctrl + C  <span class=\"comment\">#KeyboardInterrupt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### Python标准异常总结 ###############</span></span><br><span class=\"line\">AssertionError\t断言语句（<span class=\"keyword\">assert</span>）失败</span><br><span class=\"line\">AttributeError\t尝试访问未知的对象属性</span><br><span class=\"line\">EOFError\t用户输入文件末尾标志EOF（Ctrl+d）</span><br><span class=\"line\">FloatingPointError\t浮点计算错误</span><br><span class=\"line\">GeneratorExit\tgenerator.close()方法被调用的时候</span><br><span class=\"line\">ImportError\t导入模块失败的时候</span><br><span class=\"line\">IndexError\t索引超出序列的范围</span><br><span class=\"line\">KeyError\t字典中查找一个不存在的关键字</span><br><span class=\"line\">KeyboardInterrupt\t用户输入中断键（Ctrl+c）</span><br><span class=\"line\">MemoryError\t内存溢出（可通过删除对象释放内存）</span><br><span class=\"line\">NameError\t尝试访问一个不存在的变量</span><br><span class=\"line\">NotImplementedError\t尚未实现的方法</span><br><span class=\"line\">OSError\t操作系统产生的异常（例如打开一个不存在的文件）</span><br><span class=\"line\">OverflowError\t数值运算超出最大限制</span><br><span class=\"line\">ReferenceError\t弱引用（weak reference）试图访问一个已经被垃圾回收机制回收了的对象</span><br><span class=\"line\">RuntimeError\t一般的运行时错误</span><br><span class=\"line\">StopIteration\t迭代器没有更多的值</span><br><span class=\"line\">SyntaxError\tPython的语法错误</span><br><span class=\"line\">IndentationError \t缩进错误</span><br><span class=\"line\">TabError\tTab和空格混合使用</span><br><span class=\"line\">SystemError\tPython编译器系统错误</span><br><span class=\"line\">SystemExit\tPython编译器进程被关闭</span><br><span class=\"line\">TypeError\t不同类型间的无效操作</span><br><span class=\"line\">UnboundLocalError\t访问一个未初始化的本地变量（NameError的子类）</span><br><span class=\"line\">UnicodeError\tUnicode相关的错误（ValueError的子类）</span><br><span class=\"line\">UnicodeEncodeError\tUnicode编码时的错误（UnicodeError的子类）</span><br><span class=\"line\">UnicodeDecodeError\tUnicode解码时的错误（UnicodeError的子类）</span><br><span class=\"line\">UnicodeTranslateError\tUnicode转换时的错误（UnicodeError的子类）</span><br><span class=\"line\">ValueError\t传入无效的参数</span><br><span class=\"line\">ZeroDivisionError\t除数为零</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#以下是 Python 内置异常类的层次结构：</span></span><br><span class=\"line\">BaseException</span><br><span class=\"line\">+-- SystemExit</span><br><span class=\"line\">+-- KeyboardInterrupt</span><br><span class=\"line\">+-- GeneratorExit</span><br><span class=\"line\">+-- Exception</span><br><span class=\"line\">      +-- StopIteration</span><br><span class=\"line\">      +-- ArithmeticError</span><br><span class=\"line\">      |    +-- FloatingPointError</span><br><span class=\"line\">      |    +-- OverflowError</span><br><span class=\"line\">      |    +-- ZeroDivisionError</span><br><span class=\"line\">      +-- AssertionError</span><br><span class=\"line\">      +-- AttributeError</span><br><span class=\"line\">      +-- BufferError</span><br><span class=\"line\">      +-- EOFError</span><br><span class=\"line\">      +-- ImportError</span><br><span class=\"line\">      +-- LookupError</span><br><span class=\"line\">      |    +-- IndexError</span><br><span class=\"line\">      |    +-- KeyError</span><br><span class=\"line\">      +-- MemoryError</span><br><span class=\"line\">      +-- NameError</span><br><span class=\"line\">      |    +-- UnboundLocalError</span><br><span class=\"line\">      +-- OSError</span><br><span class=\"line\">      |    +-- BlockingIOError</span><br><span class=\"line\">      |    +-- ChildProcessError</span><br><span class=\"line\">      |    +-- ConnectionError</span><br><span class=\"line\">      |    |    +-- BrokenPipeError</span><br><span class=\"line\">      |    |    +-- ConnectionAbortedError</span><br><span class=\"line\">      |    |    +-- ConnectionRefusedError</span><br><span class=\"line\">      |    |    +-- ConnectionResetError</span><br><span class=\"line\">      |    +-- FileExistsError</span><br><span class=\"line\">      |    +-- FileNotFoundError</span><br><span class=\"line\">      |    +-- InterruptedError</span><br><span class=\"line\">      |    +-- IsADirectoryError</span><br><span class=\"line\">      |    +-- NotADirectoryError</span><br><span class=\"line\">      |    +-- PermissionError</span><br><span class=\"line\">      |    +-- ProcessLookupError</span><br><span class=\"line\">      |    +-- TimeoutError</span><br><span class=\"line\">      +-- ReferenceError</span><br><span class=\"line\">      +-- RuntimeError</span><br><span class=\"line\">      |    +-- NotImplementedError</span><br><span class=\"line\">      +-- SyntaxError</span><br><span class=\"line\">      |    +-- IndentationError</span><br><span class=\"line\">      |         +-- TabError</span><br><span class=\"line\">      +-- SystemError</span><br><span class=\"line\">      +-- TypeError</span><br><span class=\"line\">      +-- ValueError</span><br><span class=\"line\">      |    +-- UnicodeError</span><br><span class=\"line\">      |         +-- UnicodeDecodeError</span><br><span class=\"line\">      |         +-- UnicodeEncodeError</span><br><span class=\"line\">      |         +-- UnicodeTranslateError</span><br><span class=\"line\">      +-- Warning</span><br><span class=\"line\">           +-- DeprecationWarning</span><br><span class=\"line\">           +-- PendingDeprecationWarning</span><br><span class=\"line\">           +-- RuntimeWarning</span><br><span class=\"line\">           +-- SyntaxWarning</span><br><span class=\"line\">           +-- UserWarning</span><br><span class=\"line\">           +-- FutureWarning</span><br><span class=\"line\">           +-- ImportWarning</span><br><span class=\"line\">           +-- UnicodeWarning</span><br><span class=\"line\">           +-- BytesWarning</span><br><span class=\"line\">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"}]}