{"title":"9.Go编程快速入门学习","slug":"编程世界/Go/9.Go编程快速入门学习","date":"2020-04-24T03:16:58.000Z","updated":"2023-01-31T02:29:10.672Z","url":"2020/4-24-598.html","path":"api/articles/2020/4-24-598.html.json","covers":["https://img.weiyigeek.top/2021/5/20211125111332.png","https://img.weiyigeek.top/2021/5/20211126144053.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-Go语言基础之Unit-单元-测试\"><a href=\"#0x00-Go语言基础之Unit-单元-测试\" class=\"headerlink\" title=\"0x00 Go语言基础之Unit(单元)测试\"></a>0x00 Go语言基础之Unit(单元)测试</h2><p>描述: 日常开发中, 测试是不能缺少的. 通常国内的程序员都不太关注单元测试这一部分, 俗话说不写测试的开发不是好程序猿，我认为每一位开发者都应该了解 <code>TDD（Test Driven Development-测试驱动开发）</code>，所以本章将主要介绍下在Go语言中如何做<code>单元测试</code>和<code>基准测试</code>。</p>\n<p>Tips: 编写测试代码和编写普通的Go代码过程是类似的，并不需要学习新的语法、规则或工具(<code>再次体现Go语言的优秀</code>)。</p>\n<p>不过在介绍之前，我们先介绍一个Go语言的标准库为我们提供的单元测试与基准测试的辅助工具，有一个叫做 testing 的测试框架, 可以用于单元测试和性能测试，它是和<code>go test</code>命令一起使用的，它是一个按照一定约定和组织的测试代码的驱动程序。</p>\n<p>非常注意、非常注意在包目录内，所有以<code>_test.go</code>为后缀名的源代码文件都是<code>go test</code>测试的一部分，不会被<code>go build</code>编译到最终的可执行文件中。</p>\n<p>在<code>*_test.go</code>文件中有三种类型的函数，单元测试函数、基准测试函数和示例函数。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>格式</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>测试函数</td>\n<td>函数名前缀为Test</td>\n<td>测试程序的一些逻辑行为是否正确</td>\n</tr>\n<tr>\n<td>基准函数</td>\n<td>函数名前缀为Benchmark</td>\n<td>测试函数的性能</td>\n</tr>\n<tr>\n<td>示例函数</td>\n<td>函数名前缀为Example</td>\n<td>为文档提供示例文档</td>\n</tr>\n</tbody>\n</table>\n<p>Tips : <code>go test</code> 命令会遍历所有的<code>*_test.go</code>文件中符合上述命名规则的函数，然后生成一个临时的main包用于调用相应的测试函数，然后构建并运行、报告测试结果，最后清理测试中生成的临时文件。</p>\n<h3 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1.单元测试\"></a>1.单元测试</h3><p>描述: 类似于细胞是构成我们身体的基本单位，一个软件程序也是由很多单元组件构成的，单元组件可以是函数、结构体、方法和最终用户可能依赖的任意东西，总之我们需要确保这些组件是能够正常运行的。</p>\n<p>即: 单元测试是一些利用各种方法<code>测试单元组件的程序</code>，它会<code>将结果与预期输出进行比较</code>。</p>\n<p>单元测试有得又叫测试函数，每个测试函数必须导入<code>testing</code>包，其语法格式如下所示: <code>func TestName(t *testing.T){Code Test()}</code>;</p>\n<p>其中 <code>参数t</code> 用于报告测试失败和附加的日志信息 , <code>testing.T</code> 的拥有的方法如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Error</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Errorf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Fail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">FailNow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Failed</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Fatal</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Fatalf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Log</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Logf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Name</span><span class=\"params\">()</span> <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(t *T)</span> <span class=\"title\">Parallel</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(t *T)</span> <span class=\"title\">Run</span><span class=\"params\">(name <span class=\"keyword\">string</span>, f <span class=\"keyword\">func</span>(t *T)</span>) <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Skip</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">SkipNow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Skipf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(c *T)</span> <span class=\"title\">Skipped</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # 1.测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAdd</span><span class=\"params\">(t *testing.T)</span></span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSum</span><span class=\"params\">(t *testing.T)</span></span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestLog</span><span class=\"params\">(t *testing.T)</span></span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 2.例如,我们测试一个数的绝对值是否与我们设置定值一致，如果测试不一致则输出t.Errorf()方法中的自定义错误信息。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAbs</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  got := Abs(<span class=\"number\">-1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> got != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    t.Errorf(<span class=\"string\">\"Abs(-1) = %d; want 1\"</span>, got)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"1-1-测试函数\"><a href=\"#1-1-测试函数\" class=\"headerlink\" title=\"1.1 测试函数\"></a>1.1 测试函数</h4><p>说了前面说了这么多我们不如实践一把。</p>\n<p><strong>示例1.简单的测试函数示例</strong><br>首先,我们定义一个split的包，包中定义了一个Split函数，具体实现如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 06unit/splitstring/splitstr.go</span></span><br><span class=\"line\"><span class=\"comment\">// # 自定义实现切割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> splitstring</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 1.Split 切割自定义实现函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Split</span><span class=\"params\">(str <span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>)</span> []<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret []<span class=\"keyword\">string</span></span><br><span class=\"line\">  index := strings.Index(str, sep)</span><br><span class=\"line\">  seplen := <span class=\"built_in\">len</span>(sep)</span><br><span class=\"line\">  <span class=\"comment\">// 2.sep 在字符串索引中大于等于0时证明有字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    splitstr := str[:index]</span><br><span class=\"line\">    <span class=\"comment\">// 3.过滤分割字符前空以及后空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> splitstr != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      ret = <span class=\"built_in\">append</span>(ret, splitstr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.解决sep为多个字符的情况。</span></span><br><span class=\"line\">    str = str[index+seplen:]</span><br><span class=\"line\">    index = strings.Index(str, sep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 5.将最后的字符也放入ret数组中,并返回给调用者</span></span><br><span class=\"line\">  ret = <span class=\"built_in\">append</span>(ret, str)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其次,在<code>06unit/splitstring</code>目录下创建一个<code>split_test.go</code>的文件,它实现了我们的单元测试。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # 06unit/splitstring/split_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> splitstring</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 1.注意测试的函数格式采用驼峰命名法,且首字母必须大写，其次是必须接收一个`*testing.T`类型参数.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test1Split</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  ret := Split(<span class=\"string\">\"abcadeafg\"</span>, <span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  want := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"bc\"</span>, <span class=\"string\">\"de\"</span>, <span class=\"string\">\"fg\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 利用反射进行比较不能直接比较的变量(此时是直接比较两个数组)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !reflect.DeepEqual(ret, want) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试用例失败提醒</span></span><br><span class=\"line\">    t.Errorf(<span class=\"string\">\"Want: %v But Got:%v \\n\"</span>, want, ret)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test2Split</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  ret := Split(<span class=\"string\">\"abcadeafg\"</span>, <span class=\"string\">\"ad\"</span>)</span><br><span class=\"line\">  want := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"eag\"</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !reflect.DeepEqual(ret, want) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 测试用例失败提醒</span></span><br><span class=\"line\">    t.Errorf(<span class=\"string\">\"Want: %v But Got:%v \\n\"</span>, want, ret)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  splitstring ls</span><br><span class=\"line\">splitstr.<span class=\"keyword\">go</span>  split_test.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # -v 指定一个目录将该目录下_test.go中设置的单元测试函数进行执行。</span></span><br><span class=\"line\">➜  splitstring <span class=\"keyword\">go</span> test -v .</span><br><span class=\"line\">=== RUN   Test1Split</span><br><span class=\"line\">--- PASS: Test1Split (<span class=\"number\">0.00s</span>) <span class=\"comment\">// 查看测试函数名称和运行时间</span></span><br><span class=\"line\">=== RUN   Test2Split</span><br><span class=\"line\">    split_test.<span class=\"keyword\">go</span>:<span class=\"number\">24</span>: Want: [abc eag] But Got:[abc eafg]   <span class=\"comment\">// 可以清除的看到 Test2Split 测试用例没有成功</span></span><br><span class=\"line\">--- FAIL: Test2Split (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">FAIL</span><br><span class=\"line\">FAIL    weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/splitstring  <span class=\"number\">0.002s</span>  <span class=\"comment\">// 全部测试函数执行运行时间</span></span><br><span class=\"line\">FAIL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # -run 指定一个想要执行的单元测试函数，例如此处是 Test1Split(t *testing.T)   </span></span><br><span class=\"line\">➜  splitstring <span class=\"keyword\">go</span> test -v -run=Test1Split</span><br><span class=\"line\">=== RUN   Test1Split</span><br><span class=\"line\">--- PASS: Test1Split (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/splitstring  <span class=\"number\">0.003s</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips: 非常注意，当我们修改了我们的代码之后不要仅仅执行那些失败的测试函数，我们应该完整的运行所有的测试，保证不会因为修改代码而引入了新的问题。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  splitstring <span class=\"keyword\">go</span> test -v .              </span><br><span class=\"line\">=== RUN   Test1Split</span><br><span class=\"line\">--- PASS: Test1Split (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">=== RUN   Test2Split</span><br><span class=\"line\">--- PASS: Test2Split (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/splitstring  <span class=\"number\">0.003s</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"1-2-测试组\"><a href=\"#1-2-测试组\" class=\"headerlink\" title=\"1.2 测试组\"></a>1.2 测试组</h4><p>描述: 此时,假如我们还想测试一下<code>split函数</code>对中文字符串的支持，此时我们可以再编写一个TestChineseSplit测试函数，但是我们也可以使用如下更友好的一种方式来添加更多的测试用例。那就是使用测试组。</p>\n<p><strong>测试组示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> splitstring</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 组测试 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGroupSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个测试用例类型</span></span><br><span class=\"line\">  <span class=\"keyword\">type</span> testCase <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    str  <span class=\"keyword\">string</span></span><br><span class=\"line\">    sep  <span class=\"keyword\">string</span></span><br><span class=\"line\">    want []<span class=\"keyword\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个存储测试用例的切片</span></span><br><span class=\"line\">  testGroup := []testCase&#123;</span><br><span class=\"line\">    testCase&#123;<span class=\"string\">\"abceafgh\"</span>, <span class=\"string\">\"a\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"bce\"</span>, <span class=\"string\">\"fgh\"</span>&#125;&#125;,</span><br><span class=\"line\">    testCase&#123;<span class=\"string\">\"a:b:c\"</span>, <span class=\"string\">\":\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">    &#123;str: <span class=\"string\">\"abcdef\"</span>, sep: <span class=\"string\">\"cd\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"ab\"</span>, <span class=\"string\">\"ef\"</span>&#125;&#125;,</span><br><span class=\"line\">    &#123;str: <span class=\"string\">\"WeiyiGeek切割唯一极客\"</span>, sep: <span class=\"string\">\"切割\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"唯一极客!\"</span>&#125;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历切片，逐一执行测试用例</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, tc := <span class=\"keyword\">range</span> testGroup &#123;</span><br><span class=\"line\">    got := Split(tc.str, tc.sep)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !reflect.DeepEqual(got, tc.want) &#123;</span><br><span class=\"line\">      t.Fatalf(<span class=\"string\">\"index %v,Want=%v not equal got=%v \\n\"</span>, index+<span class=\"number\">1</span>, tc.want, got)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  grouptest ls</span><br><span class=\"line\">  split_group_test.<span class=\"keyword\">go</span>  splitstr.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下述说第四的一个单元测试有问题,此时你可以看到返回的 [唯一极客] 与我们预定义的 [唯一极客] 是不一致的！</span></span><br><span class=\"line\"><span class=\"comment\">// 此种情况下十分推荐使用%#v的格式化方式。</span></span><br><span class=\"line\">➜  grouptest <span class=\"keyword\">go</span> test -v .</span><br><span class=\"line\">  === RUN   TestGroupSplit</span><br><span class=\"line\">      split_group_test.<span class=\"keyword\">go</span>:<span class=\"number\">31</span>: index <span class=\"number\">4</span>,Want=[WeiyiGeek 唯一极客!] not equal got=[WeiyiGeek 唯一极客] </span><br><span class=\"line\">  --- FAIL: TestGroupSplit (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">  FAIL</span><br><span class=\"line\">  FAIL    weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/grouptest    <span class=\"number\">0.002s</span></span><br><span class=\"line\">  FAIL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面我们修改测试用例错误提示的部分，此时可以看到单元测试全部通过。</span></span><br><span class=\"line\">➜  grouptest <span class=\"keyword\">go</span> test -v .</span><br><span class=\"line\">  === RUN   TestGroupSplit</span><br><span class=\"line\">  --- PASS: TestGroupSplit (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">  PASS</span><br><span class=\"line\">  ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/grouptest    <span class=\"number\">0.002s</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"1-3-子测试\"><a href=\"#1-3-子测试\" class=\"headerlink\" title=\"1.3 子测试\"></a>1.3 子测试</h4><p>描述: 当测试用例较多时,我们采用上面的方式不能一眼看出具体是那些测试用例失败了，此时我们可以为每个测试案例加上名称, 当然更好的方式还是今天的主人公<code>子测试</code>。</p>\n<p>子测试 是在Go 1.7+新增特性，我们可以按照如下方法使用<code>t.Run</code>来执行子测试：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 06unit/subtest/split_sub_test.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> subtest</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 子测试 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestChildSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.同样定义一个subTestCase</span></span><br><span class=\"line\">  <span class=\"keyword\">type</span> subTestCase <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    str, sep <span class=\"keyword\">string</span></span><br><span class=\"line\">    want     []<span class=\"keyword\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 2.声明定义一个Map类型的testGroup变量</span></span><br><span class=\"line\">  testGroup := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]subTestCase&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Subtest_1\"</span>: &#123;<span class=\"string\">\"abceafgh\"</span>, <span class=\"string\">\"a\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"bce\"</span>, <span class=\"string\">\"fgh\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Subtest_2\"</span>: &#123;<span class=\"string\">\"a:b:c\"</span>, <span class=\"string\">\":\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Subtest_3\"</span>: &#123;<span class=\"string\">\"abcdef\"</span>, <span class=\"string\">\"cd\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"ab\"</span>, <span class=\"string\">\"ef\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Subtest_4\"</span>: &#123;<span class=\"string\">\"WeiyiGeek切割唯一极客\"</span>, <span class=\"string\">\"切割\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"唯一极客\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"Subtest_5\"</span>: &#123;<span class=\"string\">\"http://www.weiyigeek.top\"</span>, <span class=\"string\">\"//\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"http:\"</span>, <span class=\"string\">\"www.weiyigeek.top\"</span>&#125;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 3.遍历测试组,逐一执行测试用例</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> testGroup &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"测试名称: \"</span>, k)</span><br><span class=\"line\">    <span class=\"comment\">// 4.然后使用t.Run()执行子测试</span></span><br><span class=\"line\">    t.Run(k, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">      got := Split(v.str, v.sep)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !reflect.DeepEqual(got, v.want) &#123;</span><br><span class=\"line\">        t.Fatalf(<span class=\"string\">\"index %v,Want=%v not equal got=%v \\n\"</span>, k, v.want, got)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  subtest ls</span><br><span class=\"line\">splitstr.<span class=\"keyword\">go</span>  split_sub_test.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 测试目录下的全部单元测试的子测试</span></span><br><span class=\"line\">➜  subtest <span class=\"keyword\">go</span> test -v .</span><br><span class=\"line\">=== RUN   TestChildSplit</span><br><span class=\"line\">测试名称:  Subtest_1</span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_1</span><br><span class=\"line\">测试名称:  Subtest_2</span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_2</span><br><span class=\"line\">测试名称:  Subtest_3</span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_3</span><br><span class=\"line\">测试名称:  Subtest_4</span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_4</span><br><span class=\"line\">测试名称:  Subtest_5</span><br><span class=\"line\"><span class=\"comment\">// # 可以发现我们期望的www3.weiyigeek.top与Split函数实际返回的www.weiyigeek.top是不相同的。</span></span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_5  </span><br><span class=\"line\">    split_sub_test.<span class=\"keyword\">go</span>:<span class=\"number\">32</span>: index Subtest_5,Want=[http: www3.weiyigeek.top] not equal got=[http: www.weiyigeek.top] </span><br><span class=\"line\">--- FAIL: TestChildSplit (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">    --- PASS: TestChildSplit/Subtest_1 (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">    --- PASS: TestChildSplit/Subtest_2 (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">    --- PASS: TestChildSplit/Subtest_3 (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">    --- PASS: TestChildSplit/Subtest_4 (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">    --- FAIL: TestChildSplit/Subtest_5 (<span class=\"number\">0.00s</span>)</span><br><span class=\"line\">FAIL</span><br><span class=\"line\">FAIL    weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/subtest      <span class=\"number\">0.003s</span></span><br><span class=\"line\">FAIL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 修正期望值后通过 `-run=RegExp` 来指定运行的测试用例, 还可以通过/来指定要运行的子测试用例,例如</span></span><br><span class=\"line\">➜  subtest <span class=\"keyword\">go</span> test -v -run=TestChildSplit/Subtest_5          </span><br><span class=\"line\">=== RUN   TestChildSplit</span><br><span class=\"line\">测试名称:  Subtest_1</span><br><span class=\"line\">测试名称:  Subtest_2</span><br><span class=\"line\">测试名称:  Subtest_3</span><br><span class=\"line\">测试名称:  Subtest_4</span><br><span class=\"line\">测试名称:  Subtest_5</span><br><span class=\"line\">=== RUN   TestChildSplit/Subtest_5</span><br><span class=\"line\">--- PASS: TestChildSplit (<span class=\"number\">0.00s</span>)   </span><br><span class=\"line\">    --- PASS: TestChildSplit/Subtest_5 (<span class=\"number\">0.00s</span>)  <span class=\"comment\">// 子测试通过</span></span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/subtest      <span class=\"number\">0.002s</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"1-4-测试覆盖率\"><a href=\"#1-4-测试覆盖率\" class=\"headerlink\" title=\"1.4 测试覆盖率\"></a>1.4 测试覆盖率</h4><p>描述: Go语言还为开发者们提供内置功能来检查你的代码覆盖率(<code>代码被测试套件覆盖的百分比</code>), 通过使用<code>go test -cover</code>来查看测试覆盖率以及<code>go tool conver</code>来生成HTML格式表示测试覆盖率。</p>\n<p>Tips: 通常我们使用的都是语句的覆盖率，也就是在测试中至少被运行一次的代码占总代码的比例。</p>\n<p>例如,此时我们使用<code>1.1</code>单元测试中的示例进行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  splitstring  go <span class=\"built_in\">test</span> -cover </span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 100.0% of statements</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/splitstring  0.002s</span><br></pre></td></tr></table></figure></p>\n<p>此外，Go还提供了一个额外的<code>-coverprofile</code>参数，用来将覆盖率相关的记录信息输出到一个文件。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  splitstring go <span class=\"built_in\">test</span> -cover -coverprofile=cover.out -v .</span><br><span class=\"line\">=== RUN   Test1Split</span><br><span class=\"line\">--- PASS: Test1Split (0.00s)</span><br><span class=\"line\">=== RUN   Test2Split</span><br><span class=\"line\">--- PASS: Test2Split (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 100.0% of statements</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/splitstring  0.002s  coverage: 100.0% of statements</span><br></pre></td></tr></table></figure><br>上面的命令会将覆盖率相关的信息输出到当前文件夹下面的<code>cover.out</code>文件中</p>\n<p>最后,我们执行<code>go tool cover -html=cover.out</code>，使用cover工具来处理生成的记录信息，该命令会打开本地的浏览器窗口生成一个HTML报告。 </p>\n<p><img src=\"https://img.weiyigeek.top/2021/5/20211125111332.png\" alt=\"WeiyiGeek.代码覆盖率HTML报告\"></p>\n<p>图中每个用<code>绿色标记</code>的语句块表示<code>被覆盖</code>了，而<code>红色</code>的表示<code>没有被覆盖</code>。</p>\n<p><br></p>\n<h3 id=\"2-基准测试\"><a href=\"#2-基准测试\" class=\"headerlink\" title=\"2.基准测试\"></a>2.基准测试</h3><p><strong>Q: 什么是基准测试?</strong></p>\n<blockquote>\n<p>答: 在一定的工作负载之下检测程序性能的一种方法.</p>\n</blockquote>\n<p>基准测试的基本语法格式如下： <code>func BenchmarkName(b *testing.B){ code test... }</code></p>\n<p>基准测试以<code>Benchmark</code>为前缀，需要一个<code>*testing.B</code>类型的参数b，基准测试必须要执行<code>b.N</code>次，这样的测试才有对照性，<code>b.N</code>的值是系统根据实际情况去调整的，从而保证测试的稳定性。</p>\n<p>基准测试<code>testing.B</code>类型拥有的方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (c *B) Error(args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Errorf(format string, args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Fail()</span><br><span class=\"line\">func (c *B) FailNow()</span><br><span class=\"line\">func (c *B) Failed() bool</span><br><span class=\"line\">func (c *B) Fatal(args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Fatalf(format string, args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Log(args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Logf(format string, args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Name() string</span><br><span class=\"line\">func (b *B) ReportAllocs()</span><br><span class=\"line\">func (b *B) ResetTimer()</span><br><span class=\"line\">func (b *B) Run(name string, f func(b *B)) bool</span><br><span class=\"line\">func (b *B) RunParallel(body func(*PB))</span><br><span class=\"line\">func (b *B) SetBytes(n int64)</span><br><span class=\"line\">func (b *B) SetParallelism(p int)</span><br><span class=\"line\">func (c *B) Skip(args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) SkipNow()</span><br><span class=\"line\">func (c *B) Skipf(format string, args ...interface&#123;&#125;)</span><br><span class=\"line\">func (c *B) Skipped() bool</span><br><span class=\"line\">func (b *B) StartTimer()</span><br><span class=\"line\">func (b *B) StopTimer()</span><br></pre></td></tr></table></figure>\n<p>简单示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func BenchmarkHello(b *testing.B) &#123;</span><br><span class=\"line\">  for i :&#x3D; 0; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    fmt.Sprintf(&quot;hello&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>Tips: 默认情况下，每个基准测试至少运行1秒。如果在Benchmark函数返回时没有到1秒，则b.N的值会按 <code>1,2,5,10,20,50，…</code> 增加，并且函数再次运行。</p>\n<p><br/></p>\n<h4 id=\"2-1-基准测试用例\"><a href=\"#2-1-基准测试用例\" class=\"headerlink\" title=\"2.1 基准测试用例\"></a>2.1 基准测试用例</h4><p>描述: 此处，我们利用斐波那契函数来进行基准测试。</p>\n<p>斐波那契函数:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/packeage/myself/fibonacci.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> myself</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> number == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> || number == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci(number<span class=\"number\">-1</span>) + Fibonacci(number<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们在<code>benchmarktest</code>包中编写基准测试代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/studygo/Day08/06unit/benchmarktest/benchmark_test.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> benchmarktest</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">  custom <span class=\"string\">\"weiyigeek.top/packeage/myself\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFibonacci</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// fmt.Printf(\"Fibonacci(%d) = %d\\n\", 10, custom.Fibonacci(10))</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    custom.Fibonacci(<span class=\"number\">10</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 值得注意的是基准测试并不会默认执行,</span></span><br><span class=\"line\">➜  benchmarktest go <span class=\"built_in\">test</span> .</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/benchmarktest        0.002s [no tests to run]</span><br><span class=\"line\"><span class=\"comment\"># 需要增加`-bench`参数，所以我们通过执行`go test -bench=基准方法名称`命令执行基准测试</span></span><br><span class=\"line\"><span class=\"comment\"># --run=none 避免运行普通的测试函数, 因为一般不可能有函数名匹配 none</span></span><br><span class=\"line\">➜  06unit go <span class=\"built_in\">test</span> -v -bench=BenchmarkFibonacci --run=none ./benchmarktest</span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/06unit/benchmarktest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkFibonacci</span><br><span class=\"line\">BenchmarkFibonacci-4     4495600               257.8 ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/benchmarktest        1.434s</span><br></pre></td></tr></table></figure>\n<p>由上面的结果可知, <code>BenchmarkFibonacci-4</code>表示对Fibonacci函数进行基准测试，而数字4表示<code>GOMAXPROCS</code>的值，这个对于并发基准测试很重要。</p>\n<p>然后是<code>4495600和257.8 ns/op</code>表示一共调用了<code>4495600</code>次且每次平均调用Fibonacci函数耗时<code>257.8ns（纳秒）</code></p>\n<p><br/></p>\n<p>补充说明,我们还可以为基准测试添加<code>-benchmem</code>参数，来获得内存分配的统计数据,此时为了更好的观察，我们将Fibonacci()函数换做前面的Split()函数进行基准测试分析。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package benchmarktest</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">  &quot;testing&quot;</span><br><span class=\"line\">  custom &quot;weiyigeek.top&#x2F;packeage&#x2F;myself&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func BenchmarkSplit(b *testing.B) &#123;</span><br><span class=\"line\">  for i :&#x3D; 0; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    custom.Split(&quot;http:&#x2F;&#x2F;www.weiyigeek.top&quot;, &quot;.&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 06unit go <span class=\"built_in\">test</span> -v -bench=BenchmarkSplit -benchmem --run=none ./benchmarktest </span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/06unit/benchmarktest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkSplit</span><br><span class=\"line\">BenchmarkSplit-4         4342447               259.3 ns/op           112 B/op          3 allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/benchmarktest        1.413s</span><br></pre></td></tr></table></figure>\n<p>其中, <code>112 B/op</code>表示每次操作内存分配了112字节，<code>3 allocs/op</code>则表示每次操作进行了3次内存分配, 其次是执行了4342447次，平均每次耗费259.3ns。</p>\n<p>上面发生了三次内存分配,我还可以优化我们的Split()函数，此处我们使用make函数将result初始化为一个容量足够大的切片，而不再像之前一样通过调用append函数来追加。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/packeage/myself/splitstr.go</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义实现切割字符串</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> myself</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 1.Split 切割自定义实现函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Split</span><span class=\"params\">(str <span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>)</span> <span class=\"params\">(result []<span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 2.提前使用make函数将result初始化为一个容量足够大的切片。</span></span><br><span class=\"line\">  result = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>, strings.Count(str, sep)+<span class=\"number\">1</span>)</span><br><span class=\"line\">  index := strings.Index(str, sep)</span><br><span class=\"line\">  <span class=\"comment\">// 3.sep 在字符串索引中大于-1时证明有字符串。</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index &gt; <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    splitstr := str[:index]</span><br><span class=\"line\">    <span class=\"comment\">// 4.过滤分割字符前空以及后空。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> splitstr != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">      result = <span class=\"built_in\">append</span>(result, str[:index])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5.再次获取分割后的字符串。</span></span><br><span class=\"line\">    str = str[index+<span class=\"built_in\">len</span>(sep):]</span><br><span class=\"line\">    index = strings.Index(str, sep)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 6.将最后的字符也放入ret数组中。</span></span><br><span class=\"line\">  result = <span class=\"built_in\">append</span>(result, str)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优化完毕后，我们再次执行基准测试命令，查看上面改动后会带来多大的性能提升。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 06unit go <span class=\"built_in\">test</span> -v -bench=BenchmarkSplit -benchmem --run=none ./benchmarktest </span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/06unit/benchmarktest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkSplit</span><br><span class=\"line\">BenchmarkSplit-4         8726422               121.1 ns/op            48 B/op          1 allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/benchmarktest        1.201s</span><br></pre></td></tr></table></figure>\n<p>可以看到上面这个优化, 可以看到 allocs 内存分配次数降到了1，并且每次操作内存分配的字节数也从<code>112</code>降到了<code>48</code>B/op, 基准测试执行的总次数在增加而平均每次执行的时间在减少，可以看到就是优化这么一个小小的点就可以带来性能的提升，所以在一些大程序中基准测试则显示的尤为重要。</p>\n<p><br></p>\n<h4 id=\"2-2-性能比较用例\"><a href=\"#2-2-性能比较用例\" class=\"headerlink\" title=\"2.2 性能比较用例\"></a>2.2 性能比较用例</h4><p>描述: 上面的基准测试只能得到给定操作的绝对耗时，但是在很多性能问题是发生在两个不同操作之间的相对耗时，比如同一个函数处理1000个元素的耗时与处理1万甚至100万个元素的耗时的差别是多少？再或者对于同一个任务究竟使用哪种算法性能最佳？</p>\n<p>我们通常需要对两个不同算法的实现使用相同的输入来进行基准比较测试。</p>\n<p><code>性能比较函数</code>通常是一个带有参数的函数，被多个不同的Benchmark函数传入不同的值来调用, 其语法格式如下</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">benchmark</span><span class=\"params\">(b *testing.B, size <span class=\"keyword\">int</span>)</span></span>&#123;<span class=\"comment\">/* ... */</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Benchmark10</span><span class=\"params\">(b *testing.B)</span></span>&#123; benchmark(b, <span class=\"number\">10</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Benchmark100</span><span class=\"params\">(b *testing.B)</span></span>&#123; benchmark(b, <span class=\"number\">100</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Benchmark1000</span><span class=\"params\">(b *testing.B)</span></span>&#123; benchmark(b, <span class=\"number\">1000</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>此处我们还是采用上面编写的<code>斐波那契函数</code>，进行在计算不同值的情况下的性能比较函数，此处我们修改编写一下基准测试比较函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> performmancetest</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">  custom <span class=\"string\">\"weiyigeek.top/packeage/myself\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 注意此处调用的函数名称是小写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">benchmarkFibonacci</span><span class=\"params\">(b *testing.B, num <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">    custom.Fibonacci(num)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 基准测试的函数名仍然是以Benchmark_开头</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib1</span><span class=\"params\">(b *testing.B)</span></span>  &#123; benchmarkFibonacci(b, <span class=\"number\">1</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib2</span><span class=\"params\">(b *testing.B)</span></span>  &#123; benchmarkFibonacci(b, <span class=\"number\">2</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib3</span><span class=\"params\">(b *testing.B)</span></span>  &#123; benchmarkFibonacci(b, <span class=\"number\">3</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib10</span><span class=\"params\">(b *testing.B)</span></span> &#123; benchmarkFibonacci(b, <span class=\"number\">10</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib20</span><span class=\"params\">(b *testing.B)</span></span> &#123; benchmarkFibonacci(b, <span class=\"number\">20</span>) &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkFib40</span><span class=\"params\">(b *testing.B)</span></span> &#123; benchmarkFibonacci(b, <span class=\"number\">40</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  performancetest go test -v -bench&#x3D;. -benchmem --run&#x3D;none               t    </span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top&#x2F;studygo&#x2F;Day08&#x2F;06unit&#x2F;performancetest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkFib1</span><br><span class=\"line\">BenchmarkFib1-4         486133974                2.413 ns&#x2F;op           0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkFib2</span><br><span class=\"line\">BenchmarkFib2-4         342832730                3.470 ns&#x2F;op           0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkFib3</span><br><span class=\"line\">BenchmarkFib3-4         159815354                7.474 ns&#x2F;op           0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkFib10</span><br><span class=\"line\">BenchmarkFib10-4         4603944               253.9 ns&#x2F;op             0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkFib20</span><br><span class=\"line\">BenchmarkFib20-4           37526             31440 ns&#x2F;op               0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">BenchmarkFib40</span><br><span class=\"line\">BenchmarkFib40-4               3         477559446 ns&#x2F;op               0 B&#x2F;op          0 allocs&#x2F;op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top&#x2F;studygo&#x2F;Day08&#x2F;06unit&#x2F;performancetest      10.741s</span><br></pre></td></tr></table></figure>\n<p>从上面的结果可以看出,斐波那契值越小其执行次数越多,平均执行时间就越小,而随着测试数据的增大，平均执行时间变得越来越大，于此同时总执行次数也变少了。</p>\n<p>当然我们可以指定基准测试函数，并且可以使用<code>-benchtime</code>标志增加最小基准时间，以产生更准确的结果，例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此处基准测试时间为20s</span></span><br><span class=\"line\">➜  performancetest go <span class=\"built_in\">test</span> -v -bench=BenchmarkFib40 -benchmem --run=none -benchtime=20s</span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/06unit/performancetest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz</span><br><span class=\"line\">BenchmarkFib40</span><br><span class=\"line\">BenchmarkFib40-4              48         474603992 ns/op               0 B/op          0 allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/performancetest      23.277s</span><br></pre></td></tr></table></figure>\n<p>补充说明: 使用性能比较函数做测试的时候一个容易犯的错误就是把<code>b.N</code>作为输入的大小，例如以下两个例子都是错误的示范</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 错误示范1.会一致执行下去，除非有退出条件，但是通常情况下不会这样去做。</span><br><span class=\"line\">func BenchmarkFibWrong(b *testing.B) &#123;</span><br><span class=\"line\">  for n :&#x3D; 0; n &lt; b.N; n++ &#123;</span><br><span class=\"line\">    Fib(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 错误示范2</span><br><span class=\"line\">func BenchmarkFibWrong2(b *testing.B) &#123;</span><br><span class=\"line\">  Fib(b.N)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"2-3-并行测试用例\"><a href=\"#2-3-并行测试用例\" class=\"headerlink\" title=\"2.3 并行测试用例\"></a>2.3 并行测试用例</h4><p>描述: 有时可能你需要测试一个任务在并行时执行的性能结果,而 <code>func (b *B) RunParallel(body func(*PB))</code>会以并行的方式执行给定的基准测试。</p>\n<p><code>RunParallel</code>会创建出多个<code>goroutine</code>，并将<code>b.N</code>分配给这些<code>goroutine</code>执行， 其中<code>goroutine</code>数量的默认值为<code>GOMAXPROCS</code>。</p>\n<p>如果想要增加非CPU受限（non-CPU-bound）基准测试的并行性， 那么可以在<code>RunParallel</code>之前调用<code>b.SetParallelism()</code> 。另外一种方式 <code>RunParallel</code>通常会与<code>-cpu</code>标志一同使用来指定使用的CPU数据。</p>\n<p>如果你想在正式测试函数性能前,除去配置预加载所占耗时，则我们可以采用<code>b.ResetTimer()</code>来重置计数器，它会忽略在它之前代码块执行的时间，并且也不会输出到报告之中。</p>\n<p><br/></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> goroutinetest</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  custom <span class=\"string\">\"weiyigeek.top/packeage/myself\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkSplitParaller</span><span class=\"params\">(b *testing.B)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设需要做一些耗时的无关操作</span></span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 增加非CPU受限（non-CPU-bound）基准测试的并行性，即设置使用的CPU数</span></span><br><span class=\"line\">  b.SetParallelism(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 重置计时器</span></span><br><span class=\"line\">  b.ResetTimer()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//以并行的方式，执行给定的基准测试。</span></span><br><span class=\"line\">  b.RunParallel(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pb *testing.PB)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pb.Next() &#123;</span><br><span class=\"line\">      custom.Split(<span class=\"string\">\"http://blog.weiyigeek.top\"</span>, <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.并行测试与时间重置测试</span></span><br><span class=\"line\">➜  goroutinetest <span class=\"keyword\">go</span> test -bench=. -v -benchmem</span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5<span class=\"number\">-3570</span> CPU @ <span class=\"number\">3.40</span>GHz</span><br><span class=\"line\">BenchmarkSplitParaller</span><br><span class=\"line\">BenchmarkSplitParaller<span class=\"number\">-4</span>        <span class=\"number\">34091397</span>                <span class=\"number\">31.58</span> ns/op           <span class=\"number\">48</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest        <span class=\"number\">26.130s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.注释 time.Sleep(5 * time.Second) 和 \tb.ResetTimer() 后的结果</span></span><br><span class=\"line\">➜  goroutinetest <span class=\"keyword\">go</span> test -bench=. -v          </span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5<span class=\"number\">-3570</span> CPU @ <span class=\"number\">3.40</span>GHz</span><br><span class=\"line\">BenchmarkSplitParaller</span><br><span class=\"line\">BenchmarkSplitParaller<span class=\"number\">-4</span>        <span class=\"number\">35342922</span>                <span class=\"number\">32.61</span> ns/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest        <span class=\"number\">1.955s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.再注释 b.SetParallelism(2) 此时利用 -cpu 参数指定两个CPU进行结果查看</span></span><br><span class=\"line\">➜  goroutinetest <span class=\"keyword\">go</span> test -bench=. -v -cpu <span class=\"number\">2</span> --benchmem </span><br><span class=\"line\">goos: linux</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">pkg: weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i5<span class=\"number\">-3570</span> CPU @ <span class=\"number\">3.40</span>GHz</span><br><span class=\"line\">BenchmarkSplitParaller</span><br><span class=\"line\">BenchmarkSplitParaller<span class=\"number\">-2</span>        <span class=\"number\">21463302</span>                <span class=\"number\">54.96</span> ns/op           <span class=\"number\">48</span> B/op          <span class=\"number\">1</span> allocs/op</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/<span class=\"number\">06</span>unit/goroutinetest        <span class=\"number\">2.253s</span></span><br></pre></td></tr></table></figure></p>\n<p>由上面的结果分析可知利用<code>b.SetParallelism(2)</code>比采用<code>-cpu 2</code>参数指定CPU的数量效率更高,每秒可以<code>执行的次数35342922</code>明显<code>大于-cpu参数执行的结果(21463302)</code>，并且重置时间 <code>b.ResetTimer()</code> 效果还是比较明显的。</p>\n<p><br/></p>\n<h3 id=\"3-设置拆卸测试\"><a href=\"#3-设置拆卸测试\" class=\"headerlink\" title=\"3.设置拆卸测试\"></a>3.设置拆卸测试</h3><p>描述: 有时测试程序需要在测试之前<code>进行额外的设置（setup）</code>或在测试之后<code>进行拆卸（teardown）</code>。</p>\n<h4 id=\"3-1-TestMain-用例\"><a href=\"#3-1-TestMain-用例\" class=\"headerlink\" title=\"3.1 TestMain 用例\"></a>3.1 TestMain 用例</h4><p>例如: 通过在<code>*_test.go</code>文件中定义<code>TestMain</code>函数来可以在测试之前进行额外的设置（setup）或在测试之后进行拆卸（teardown）操作。</p>\n<p>如果测试文件包含函数: <code>func TestMain(m *testing.M)</code> 那么生成的测试会先调用 TestMain(m)，其运行在主goroutine中, 可以在调用 m.Run 前后做任何设置（setup）和拆卸（teardown）,<code>【非常注意】退出测试的时候应该使用 m.Run 的返回值作为参数调用 os.Exit</code>。</p>\n<p>使用TestMain来设置Setup和TearDown的示例如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> setupteardown</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"flag\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// M是传递给TestMain函数以运行实际测试的类型。</span></span><br><span class=\"line\"><span class=\"comment\">// 执行第一步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMain</span><span class=\"params\">(m *testing.M)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name <span class=\"keyword\">string</span></span><br><span class=\"line\">  flag.StringVar(&amp;name, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">  flag.Parse()                                             <span class=\"comment\">// 如果 TestMain 使用了 flags 此处应该加上解析</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"## Step1.write setup code here...TestMain\"</span>) <span class=\"comment\">// 测试之前的做一些设置工作</span></span><br><span class=\"line\">  ret := m.Run()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"## Step4.write teardown code here...\"</span>, ret) <span class=\"comment\">// 测试之后做一些拆卸工作</span></span><br><span class=\"line\">  os.Exit(ret)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行第二步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestUser</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Step2.write setup code here...【TestUser】\"</span>) <span class=\"comment\">// 测试TestUser函数定义执行</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"正在测试执行第二步: 开始测试子测试函数\"</span>)</span><br><span class=\"line\">  t.Run(<span class=\"string\">\"调用 testFunc 中\"</span>, testFunc) <span class=\"comment\">// 调用测试TestEnd函数，注意第一个字符串参数如有空格将会被下划线替代。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">testFunc</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"这时测试的testFunc的函数，名称为testFunc\"</span>)</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second) <span class=\"comment\">// 延迟五秒钟，看效果</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行第三步</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestEnd</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"# Step3.write setup code here...【TestEnd】\"</span>) <span class=\"comment\">// 测试TestEnd函数定义执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  setupteardown go <span class=\"built_in\">test</span> -v</span><br><span class=\"line\"><span class=\"comment\">## Step1.write setup code here...TestMain   # 关键点 m.Run() 之前的代码块</span></span><br><span class=\"line\">=== RUN   TestUser</span><br><span class=\"line\"><span class=\"comment\"># Step2.write setup code here...【TestUser】</span></span><br><span class=\"line\">正在测试执行第二步: 开始测试子测试函数</span><br><span class=\"line\">=== RUN   TestUser/调用_testFunc_中</span><br><span class=\"line\">这时测试的testFunc的函数，名称为testFunc</span><br><span class=\"line\">--- PASS: TestUser (5.00s)  <span class=\"comment\"># 可以看到延迟的5s</span></span><br><span class=\"line\">    --- PASS: TestUser/调用_testFunc_中 (5.00s)</span><br><span class=\"line\">=== RUN   TestEnd</span><br><span class=\"line\"><span class=\"comment\"># Step3.write setup code here...【TestEnd】</span></span><br><span class=\"line\">--- PASS: TestEnd (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\"><span class=\"comment\">## Step4.write teardown code here... 0                       # 关键点 m.Run() 之后的代码块</span></span><br><span class=\"line\">ok weiyigeek.top/studygo/Day08/06unit/setupteardown  5.007s  <span class=\"comment\">#</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 注意的是在调用 TestMain 时, flag.Parse并没有被调用。所以如果TestMain 依赖于command-line标志 (包括 testing 包的标记), 则应该显示的调用flag.Parse。</p>\n<p>Tips : 测试包中的 <em>testing.T 与 </em>testing.M 之间区别是前者是普通测试包,而可以在测试函数执行之前做一些其他操作。</p>\n<p><br></p>\n<h4 id=\"3-2-子测试集设置拆卸\"><a href=\"#3-2-子测试集设置拆卸\" class=\"headerlink\" title=\"3.2 子测试集设置拆卸\"></a>3.2 子测试集设置拆卸</h4><p>描述: 有时候我们可能需要为每个测试集设置Setup与Teardown，也有可能需要为每个子测试设置<code>Setup</code>与<code>Teardown</code>。</p>\n<p>下面我们定义两个函数工具函数以及单元组测试代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> childsetupteardown</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">  <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">  custom <span class=\"string\">\"weiyigeek.top/packeage/myself\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.测试集的Setup与Teardown</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupTestCase</span><span class=\"params\">(t *testing.T)</span> <span class=\"title\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  t.Log(<span class=\"string\">\"[测试集] 之前的 setup.....\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    t.Log(<span class=\"string\">\"[测试集] 之后的 teardown.....\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.子测试的Setup与Teardown</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setupSubTest</span><span class=\"params\">(t *testing.T)</span> <span class=\"title\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  t.Log(<span class=\"string\">\"#[子测试集] 之前的 setup-------\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    t.Log(<span class=\"string\">\"#[子测试集] 之后的 teardown--------\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.单元测试函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> test <span class=\"keyword\">struct</span> &#123; <span class=\"comment\">// 3.1 定义test结构体</span></span><br><span class=\"line\">    input <span class=\"keyword\">string</span></span><br><span class=\"line\">    sep   <span class=\"keyword\">string</span></span><br><span class=\"line\">    want  []<span class=\"keyword\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tests := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]test&#123; <span class=\"comment\">// 3.2 测试用例使用map存储实例化</span></span><br><span class=\"line\">    <span class=\"string\">\"simple\"</span>:      &#123;input: <span class=\"string\">\"a:b:c\"</span>, sep: <span class=\"string\">\":\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"wrong sep\"</span>:   &#123;input: <span class=\"string\">\"a:b:c\"</span>, sep: <span class=\"string\">\",\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a:b:c\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"more sep\"</span>:    &#123;input: <span class=\"string\">\"abcd\"</span>, sep: <span class=\"string\">\"bc\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>&#125;&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"leading sep\"</span>: &#123;input: <span class=\"string\">\"博客.blog.weiyigeek.top\"</span>, sep: <span class=\"string\">\".\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"博客\"</span>, <span class=\"string\">\"blog\"</span>, <span class=\"string\">\"weiyigeek\"</span>, <span class=\"string\">\"top\"</span>&#125;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  teardownTestCase := setupTestCase(t) <span class=\"comment\">// 3.3 测试之前执行setup操作  【关键点】</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> teardownTestCase(t)            <span class=\"comment\">// 3.4 测试之后执行testdoen操作 【关键点】</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.5 循环遍历子测试</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, tc := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">    t.Run(name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123; <span class=\"comment\">// 3.6 使用t.Run()执行子测试</span></span><br><span class=\"line\">      teardownSubTest := setupSubTest(t)    <span class=\"comment\">// 3.7 子测试之前执行setup操作 【关键点】</span></span><br><span class=\"line\">      <span class=\"keyword\">defer</span> teardownSubTest(t)              <span class=\"comment\">// 3.8 测试之后执行testdoen操作【关键点】</span></span><br><span class=\"line\">      got := custom.Split(tc.input, tc.sep) <span class=\"comment\">// 3.9 字符串分割返回结果</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> !reflect.DeepEqual(got, tc.want) &#123; <span class=\"comment\">// 3.10 利用反射函数判断两个数组</span></span><br><span class=\"line\">        t.Errorf(<span class=\"string\">\"expected:%#v, got:%#v\"</span>, tc.want, got)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  childsetupteardown  go <span class=\"built_in\">test</span> -v          </span><br><span class=\"line\">=== RUN   TestSplit</span><br><span class=\"line\">    st_child_test.go:12: [测试集] 之前的 setup.....</span><br><span class=\"line\">=== RUN   TestSplit/simple</span><br><span class=\"line\">    st_child_test.go:20: <span class=\"comment\">#[子测试集] 之前的 setup-------</span></span><br><span class=\"line\">    st_child_test.go:22: <span class=\"comment\">#[子测试集] 之后的 teardown--------</span></span><br><span class=\"line\">=== RUN   TestSplit/wrong_sep</span><br><span class=\"line\">    st_child_test.go:20: <span class=\"comment\">#[子测试集] 之前的 setup-------</span></span><br><span class=\"line\">    st_child_test.go:22: <span class=\"comment\">#[子测试集] 之后的 teardown--------</span></span><br><span class=\"line\">=== RUN   TestSplit/more_sep</span><br><span class=\"line\">    st_child_test.go:20: <span class=\"comment\">#[子测试集] 之前的 setup-------</span></span><br><span class=\"line\">    st_child_test.go:22: <span class=\"comment\">#[子测试集] 之后的 teardown--------</span></span><br><span class=\"line\">=== RUN   TestSplit/leading_sep</span><br><span class=\"line\">    st_child_test.go:20: <span class=\"comment\">#[子测试集] 之前的 setup-------</span></span><br><span class=\"line\">    st_child_test.go:22: <span class=\"comment\">#[子测试集] 之后的 teardown--------</span></span><br><span class=\"line\">=== CONT  TestSplit</span><br><span class=\"line\">    st_child_test.go:14: [测试集] 之后的 teardown.....</span><br><span class=\"line\">--- PASS: TestSplit (0.00s)</span><br><span class=\"line\">    --- PASS: TestSplit/simple (0.00s)</span><br><span class=\"line\">    --- PASS: TestSplit/wrong_sep (0.00s)</span><br><span class=\"line\">    --- PASS: TestSplit/more_sep (0.00s)</span><br><span class=\"line\">    --- PASS: TestSplit/leading_sep (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/childsetupteardown   0.007s</span><br></pre></td></tr></table></figure></p>\n<p>从上面的结果可以看出 Setup 与 Teardown 在单元测试中的描述, 我们可以利用其特性预加载数据，并采用上面的<code>b.ResetTimer()</code> 来重置性能耗时。</p>\n<p><br/></p>\n<h3 id=\"4-示例生成函数\"><a href=\"#4-示例生成函数\" class=\"headerlink\" title=\"4.示例生成函数\"></a>4.示例生成函数</h3><h4 id=\"4-1-基础说明\"><a href=\"#4-1-基础说明\" class=\"headerlink\" title=\"4.1 基础说明\"></a>4.1 基础说明</h4><p>描述: <code>go test</code>特殊对待的第三种函数就是示例函数，它们的函数名以<code>Example</code>为前缀，注意 <code>它们既没有参数也没有返回值。</code>。</p>\n<p><strong>环境准备:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置 golang.org 代理</span></span><br><span class=\"line\">➜ <span class=\"built_in\">export</span> GOPROXY=https://goproxy.io</span><br><span class=\"line\">➜ <span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"comment\">#  此命令会访问官网下载godoc以及相关依赖包</span></span><br><span class=\"line\">➜ go get golang.org/x/tools/cmd/godoc</span><br><span class=\"line\">  go: downloading golang.org/x/tools v0.1.7</span><br><span class=\"line\">  go: downloading github.com/yuin/goldmark v1.4.0</span><br><span class=\"line\">  go: downloading golang.org/x/net v0.0.0-20210805182204-aaa1db679c0d</span><br><span class=\"line\">  go get: added golang.org/x/tools v0.1.7</span><br><span class=\"line\"><span class=\"comment\"># 项目拉取下载路径说明</span></span><br><span class=\"line\">➜  go <span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/pkg/mod/golang.org/x/</span><br><span class=\"line\">➜  x <span class=\"built_in\">pwd</span></span><br><span class=\"line\">  /home/weiyigeek/app/program/project/go/pkg/mod/golang.org/x</span><br><span class=\"line\"><span class=\"comment\"># 项目构建生成godoc</span></span><br><span class=\"line\">➜ go build golang.org/x/tools/cmd/godoc</span><br><span class=\"line\"><span class=\"comment\"># 验证环境安装 (此时他会将你go.mod项目的下所有除_test.go文件的有备注的包进行显示)</span></span><br><span class=\"line\"><span class=\"comment\"># 运行 godoc 将会自动生成API文档</span></span><br><span class=\"line\"><span class=\"comment\"># http://localhost:6060/pkg/</span></span><br><span class=\"line\">➜ /home/weiyigeek/app/program/project/go/bin/godoc</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20211126144053.png\" alt=\"WeiyiGeek.godoc显示项目文档\" title=\"\" class=\"\">\n                <p>WeiyiGeek.godoc显示项目文档</p>\n            </figure></p>\n<p><br></p>\n<p><strong>语法说明:</strong></p>\n<ul>\n<li><p>文件必须放在当前包下</p>\n</li>\n<li><p>文件名以 <code>example</code> 开头, <code>_</code> 连接, <code>test</code> 结尾, 如: <code>example_xxx_test.go</code>    </p>\n</li>\n<li><p>包名是建议是 <code>当前包名</code> +  <code>_test</code> , 如:  <code>strings_test</code>    </p>\n</li>\n<li><p>函数名称的格式  <code>func Example[FuncName][_tag]()</code>    </p>\n</li>\n<li><p>函数注释会展示在页面上</p>\n</li>\n<li><p>函数结尾加上 <code>// Output:</code> 注释, 说明函数返回的值    </p>\n</li>\n</ul>\n<p><br></p>\n<p>Example示例其语法标准格式如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件必须放在 example_test 包目录下, 名字必须为 example_xxx_test.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Package example_test 为 example 包的示例 </span></span><br><span class=\"line\"><span class=\"keyword\">package</span> exampletest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此注释将会被展示在页面上 </span></span><br><span class=\"line\"><span class=\"comment\">// 此函数将被展示在OverView区域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExampleName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Hello OverView\"</span>) </span><br><span class=\"line\">  <span class=\"comment\">// Output:</span></span><br><span class=\"line\">  <span class=\"comment\">// Hello OverView</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExampleName_test</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Hello Test\"</span>) </span><br><span class=\"line\">  <span class=\"comment\">// Output:</span></span><br><span class=\"line\">  <span class=\"comment\">// Hello Test</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 通常情况下<code>包名_test.go</code>与<code>example_test.go</code>或者<code>example_包名_test.go</code>都在同一个包下。</p>\n<p><br/></p>\n<p>为你的代码编写示例代码有如下三个用处：</p>\n<ul>\n<li>1.示例函数能够作为文档直接使用，例如基于web的godoc中能把示例函数与对应的函数或包相关联。</li>\n<li>2.示例函数只要包含了<code>//Output</code>也是可以通过go test运行的可执行测试，例如:<code>// Output: &lt;换行符&gt;// Hello OverView</code></li>\n<li>3.示例函数提供了可以直接运行的示例代码，可以直接在<code>golang.org</code>的<code>godoc文档服务器上</code>使用<code>Go Playground</code>运行示例代码。</li>\n</ul>\n<p><br/></p>\n<h4 id=\"4-2-示例演示\"><a href=\"#4-2-示例演示\" class=\"headerlink\" title=\"4.2 示例演示\"></a>4.2 示例演示</h4><p>例如: 下面我们分别在上面编写的 <code>Split()</code> 与 <code>Fibinacci()</code> 函数为例，生成其使用帮助文档。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Package exampletest 包文档生成示例</span></span><br><span class=\"line\"><span class=\"comment\">//----- example_test.go -----</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> exampletest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  custom <span class=\"string\">\"weiyigeek.top/packeage/myself\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此注释将会被展示在页面上</span></span><br><span class=\"line\"><span class=\"comment\">// 此函数将被展示在OverView区域</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Hello OverView\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Output:</span></span><br><span class=\"line\">  <span class=\"comment\">// Hello OverView</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此函数将被展示在OverView区域, 并展示noOutput标签</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example_noOutput</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Hello OverView\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// (Output: ) 非必须, 存在时将会展示输出结果, 此处不存在则不会在go test -v 结果集中输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此函数将被展示在Function区域</span></span><br><span class=\"line\"><span class=\"comment\">// ExampleSplit 字符串分割函数使用说明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example_funSplit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  res1 := custom.Split(<span class=\"string\">\"www.weiyigeek.top\"</span>, <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  res2 := custom.Split(<span class=\"string\">\"blog.weiyigeek.top\"</span>, <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">  fmt.Println(res1)</span><br><span class=\"line\">  fmt.Println(res2)</span><br><span class=\"line\">  <span class=\"comment\">// Output:</span></span><br><span class=\"line\">  <span class=\"comment\">// [www weiyigeek top]</span></span><br><span class=\"line\">  <span class=\"comment\">// [blog weiyigeek top]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此函数将被展示在Function区域</span></span><br><span class=\"line\"><span class=\"comment\">// ExampleFibonacci 斐波那契数列生成说明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Example_funFibonacci</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fib := custom.Fibonacci(<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(fib)</span><br><span class=\"line\">  <span class=\"comment\">// Output:</span></span><br><span class=\"line\">  <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  example_test go <span class=\"built_in\">test</span> -v</span><br><span class=\"line\">=== RUN   Example</span><br><span class=\"line\">--- PASS: Example (0.00s)</span><br><span class=\"line\">=== RUN   Example_funSplit</span><br><span class=\"line\">--- PASS: Example_funSplit (0.00s)</span><br><span class=\"line\">=== RUN   Example_funFibonacci</span><br><span class=\"line\">--- PASS: Example_funFibonacci (0.00s)</span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      weiyigeek.top/studygo/Day08/06unit/example_test 0.003s</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}