{"title":"Python3脚本编程常用.md","slug":"编程世界/Python/Python3脚本编程常用","date":"2019-04-16T12:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/4-16-328.html","path":"api/articles/2019/4-16-328.html.json","covers":["https://img.weiyigeek.top/2019/20190416172357.png","https://img.weiyigeek.top/2019/20190416173411.png"],"content":"<p>[TOC]<br><a id=\"more\"></a></p>\n<h4 id=\"0x00-Python命令行参数\"><a href=\"#0x00-Python命令行参数\" class=\"headerlink\" title=\"0x00 Python命令行参数\"></a>0x00 Python命令行参数</h4><p>实现命令行参数输入得几种方法：</p>\n<ul>\n<li>sys模块中的argv</li>\n<li>getopt 模块中</li>\n</ul>\n<h5 id=\"sys-argv\"><a href=\"#sys-argv\" class=\"headerlink\" title=\"sys.argv\"></a>sys.argv</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">#功能：实现脚本编程cmd参数输入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法1 sys 模块方式#</span></span><br><span class=\"line\">print(<span class=\"string\">'参数个数为'</span>,len(sys.argv),<span class=\"string\">'个参数'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'列表参数列表'</span>,str(sys.argv),<span class=\"string\">\"\\n计算结果：\"</span>,end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">add = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> sys.argv:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value == sys.argv[<span class=\"number\">0</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        add += int(value)</span><br><span class=\"line\"></span><br><span class=\"line\">print(add)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">   <span class=\"comment\">#值得学习之处</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      argv1 = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">      argv2 = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">   <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">      print(<span class=\"string\">\"[*] Error:\"</span>+str(e))</span><br><span class=\"line\">      sys.exit()</span><br><span class=\"line\">      </span><br><span class=\"line\">   main(sys.argv[<span class=\"number\">1</span>:]) <span class=\"comment\">#向main函数传递参数</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190416172357.png\" alt=\"WeiyiGeek.sys.argv\" title=\"\" class=\"\">\n                <p>WeiyiGeek.sys.argv</p>\n            </figure>\n<hr>\n\n<h5 id=\"getopt\"><a href=\"#getopt\" class=\"headerlink\" title=\"getopt\"></a>getopt</h5><p>Python 提供了 getopt 模块来获取命令行参数（指定参数名称）<br>getopt 模块是专门处理命令行参数的模块,用于获取命令行选项和参数,也就是sys.argv,命令行选项使得程序的参数更加灵活,支持短选项模式（-）和长选项模式（–）。</p>\n<p>语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getopt.getopt(args, options[, long_options])  <span class=\"comment\">#cmd参数的绑定</span></span><br><span class=\"line\">getopt.gnu_getopt </span><br><span class=\"line\">getopt.GetoptError  <span class=\"comment\">#抛出的异常(在没有找到参数列表，或选项的需要的参数为空时会触发该异常)</span></span><br><span class=\"line\"></span><br><span class=\"line\">- args: 要解析的命令行参数列表。</span><br><span class=\"line\">- options: 以字符串的格式定义，options后的冒号(:)表示该选项必须有附加的参数，不带冒号表示该选项不附加参数。</span><br><span class=\"line\">- long_options: 以列表的格式定义，long_options 后的等号(=)表示如果设置该选项，必须有附加的参数，否则就不附加参数。</span><br><span class=\"line\">- 该方法返回值由两个元素组成: 第一个是 (option, value) 元组的列表。 第二个是参数列表包含那些没有<span class=\"string\">'-'</span>或<span class=\"string\">'--'</span>的参数。</span><br></pre></td></tr></table></figure></p>\n<p>案例：假定我们创建这样一个脚本，可以通过命令行向脚本文件传递两个文件名，同时我们通过另外一个选项查看脚本的使用。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  文件命令行参数说明</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, getopt</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(argv)</span>:</span></span><br><span class=\"line\">   inputfile = <span class=\"string\">''</span></span><br><span class=\"line\">   outputfile = <span class=\"string\">''</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span>:</span><br><span class=\"line\">      opts, args = getopt.getopt(argv,<span class=\"string\">\"hi:o:\"</span>,[<span class=\"string\">'help'</span>,<span class=\"string\">\"ifile=\"</span>,<span class=\"string\">\"ofile=\"</span>])  <span class=\"comment\">#注意属性(参数属于绑定的属性), 返回参数一个列表</span></span><br><span class=\"line\">   <span class=\"keyword\">except</span> getopt.GetoptError:</span><br><span class=\"line\">      <span class=\"keyword\">print</span> (<span class=\"string\">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class=\"line\">      sys.exit(<span class=\"number\">2</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> opt, arg <span class=\"keyword\">in</span> opts:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> opt == <span class=\"string\">'-h'</span> <span class=\"keyword\">or</span> opt == <span class=\"string\">'--help'</span>:</span><br><span class=\"line\">         <span class=\"keyword\">print</span> (<span class=\"string\">'test.py -i &lt;inputfile&gt; -o &lt;outputfile&gt;'</span>)</span><br><span class=\"line\">         sys.exit()</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> opt <span class=\"keyword\">in</span> (<span class=\"string\">\"-i\"</span>, <span class=\"string\">\"--ifile\"</span>):</span><br><span class=\"line\">         inputfile = arg</span><br><span class=\"line\">      <span class=\"keyword\">elif</span> opt <span class=\"keyword\">in</span> (<span class=\"string\">\"-o\"</span>, <span class=\"string\">\"--ofile\"</span>):</span><br><span class=\"line\">         outputfile = arg</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">'输入的文件为：'</span>, inputfile)  <span class=\"comment\">#进行赋值</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">'输出的文件为：'</span>, outputfile)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">   main(sys.argv[<span class=\"number\">1</span>:]) <span class=\"comment\">#这也是关键点 (排除脚本文件本身)</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190416173411.png\" alt=\"WeiyiGeek.getopt\" title=\"\" class=\"\">\n                <p>WeiyiGeek.getopt</p>\n            </figure></p>\n<hr>\n\n<h5 id=\"argparse-ArgumentParser\"><a href=\"#argparse-ArgumentParser\" class=\"headerlink\" title=\"argparse.ArgumentParser\"></a>argparse.ArgumentParser</h5><p>描述：argparse模块用于命令行选项、参数和子命令的解析器</p>\n<p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建解析器,ArgumentParser对象将保存将命令行转换成Python数据类型所需的所有信息。</span></span><br><span class=\"line\">parser = argparse.ArgumentParser(description=<span class=\"string\">'Process some integers.'</span>,prog=<span class=\"string\">'TestArgumentDemo'</span>)</span><br><span class=\"line\">- prog ：程序名称(默认:sys.argv[0])</span><br><span class=\"line\">- usage : 描述程序使用情况的字符串(默认值:生成的fromarguments添加到解析器中)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义如何解析单个命令行参数</span></span><br><span class=\"line\">ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, <span class=\"built_in\">type</span>][, choices][, required][, <span class=\"built_in\">help</span>][, metavar][, dest])</span><br><span class=\"line\"><span class=\"comment\">#参数解析：</span></span><br><span class=\"line\">- name ：指定参数名称或选项字符串列表如:<span class=\"string\">'-i'</span>,<span class=\"string\">'--ip'</span></span><br><span class=\"line\">- action : 在命令行中遇到此参数时要采取的基本操作类型</span><br><span class=\"line\">   - <span class=\"string\">'store'</span>-它只存储参数的值 Namespace(foo=<span class=\"string\">'1'</span>)</span><br><span class=\"line\">   - <span class=\"string\">'store_const'</span>-它存储由const参数名称指定的常量值,const=42 Namespace(foo=42)</span><br><span class=\"line\">   - <span class=\"string\">'store_true'</span> and <span class=\"string\">'store_false'</span> - 是<span class=\"string\">'store_const'</span>的特殊情况，用于分别存储True和<span class=\"literal\">false</span>值, Namespace(foo=True, bar=False, baz=True)</span><br><span class=\"line\">   - <span class=\"string\">'append'</span>-它存储一个列表，并将每个参数值附加到列表中。 Namespace(foo=[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>])</span><br><span class=\"line\">   - <span class=\"string\">'append_const'</span>-它存储一个列表，并将每个参数值(常量值)附加到列表中,Namespace(types=[&lt;class <span class=\"string\">'str'</span>&gt;, &lt;class <span class=\"string\">'int'</span>&gt;])</span><br><span class=\"line\">   - <span class=\"string\">'count'</span> —计算关键字参数出现的次数。</span><br><span class=\"line\">   - version—调用中使用version=关键字参数，并在调用时打印版本信息并退出,action=<span class=\"string\">'version'</span>, version=<span class=\"string\">'%(prog)s 2.0如PROG 2.0 , %(prog)是在ArgumentParser，进行订定义prog='</span>PROG</span><br><span class=\"line\">- nargs : 应该使用的命令行参数的数量(指定参数命令行之后的输入参数个数)</span><br><span class=\"line\">   - nargs=2 指定参数后跟定的输入参数个数</span><br><span class=\"line\">   - nargs=argparse.REMAINDER 所有剩余的命令行参数都被收集到一个列表中</span><br><span class=\"line\">- const : 一些const和nargs选择所需的常量。</span><br><span class=\"line\">- default : 缺省值</span><br><span class=\"line\">- <span class=\"built_in\">type</span> : 应将命令行参数转换为的类型,str / int / <span class=\"built_in\">float</span></span><br><span class=\"line\">   - <span class=\"built_in\">type</span>=argparse.FileType(<span class=\"string\">'r'</span>) / <span class=\"built_in\">type</span>=argparse.FileType(<span class=\"string\">'w'</span>) 与nargs连用时候是允许可选的输入和输出文件</span><br><span class=\"line\">- dest : 要添加到由parse_args()返回的对象中的属性的名称。</span><br><span class=\"line\">- metavar ：使用消息中参数的名称，当ArgumentParser生成帮助消息时，它需要某种方法来引用每个期望的参数。</span><br><span class=\"line\">   - 默认情况下，ArgumentParser对象使用destvalue作为每个对象的“名称”。</span><br><span class=\"line\">   - 默认情况下，对于位置参数操作，dest值直接使用，对于可选参数操作，dest值大写。</span><br><span class=\"line\">- choices : 选项——参数允许值的容器。</span><br><span class=\"line\">   - 应该从一组受限制的值中选择一些命令行参数，choices=[<span class=\"string\">'rock'</span>, <span class=\"string\">'paper'</span>, <span class=\"string\">'scissors'</span>]),choices=range(1, 4))</span><br><span class=\"line\">- required : 是否可以省略命令行选项(仅限选项/必须还是非必须)。</span><br><span class=\"line\">   - True / False</span><br><span class=\"line\">- <span class=\"built_in\">help</span> ：命令参数一个简短的描述</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：了解ArgumentParser与使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">import argparse</span><br><span class=\"line\">import os,sys</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">\"\"</span><span class=\"string\">\"\\</span></span><br><span class=\"line\"><span class=\"string\">        实现指定输入参数来来输入的值进行解析</span></span><br><span class=\"line\"><span class=\"string\">        采用Argparse模块中的ArgumentParser方法进行实例化</span></span><br><span class=\"line\"><span class=\"string\">        \"</span><span class=\"string\">\"\"</span>,prog=<span class=\"string\">'TestArgumentDemo'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-i'</span>,<span class=\"string\">'--ip'</span>,dest=<span class=\"string\">\"ip\"</span>,<span class=\"built_in\">type</span>=str,<span class=\"built_in\">help</span>=<span class=\"string\">\"\"</span><span class=\"string\">\"请输入一个IP地址如:192.168.1.1\"</span><span class=\"string\">\"\"</span>,required=True)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-u'</span>,<span class=\"string\">'--user'</span>,dest=<span class=\"string\">\"User\"</span>,<span class=\"built_in\">type</span>=str,<span class=\"built_in\">help</span>=<span class=\"string\">\"指定连接的服务的用户名称\"</span>,required=True)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-p'</span>,<span class=\"string\">'--pass'</span>,dest=<span class=\"string\">\"Pass\"</span>,<span class=\"built_in\">type</span>=str,<span class=\"built_in\">help</span>=<span class=\"string\">\"指定连接服务的用户密码\"</span>,required=True)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-P'</span>,<span class=\"string\">'--port'</span>,dest=<span class=\"string\">\"Port\"</span>,<span class=\"built_in\">type</span>=str,<span class=\"built_in\">help</span>=<span class=\"string\">\"指定服务的端口默认：25\"</span>,required=False,default=<span class=\"string\">'25'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-v'</span>,<span class=\"string\">'--version'</span>,action=<span class=\"string\">\"version\"</span>, version=<span class=\"string\">'%(prog)s 1.0'</span>)  <span class=\"comment\">#argument.py 1.0</span></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-n'</span>,<span class=\"string\">'--number'</span>,dest=<span class=\"string\">\"Trynum\"</span>,choices=[1,2,3,4],<span class=\"built_in\">help</span>=<span class=\"string\">\"失败重试次数\"</span>,default=2,<span class=\"built_in\">type</span>=int)  <span class=\"comment\">#argument.py 1.0</span></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-m'</span>,<span class=\"string\">'--mutil'</span>,dest=<span class=\"string\">\"Mutil\"</span>,nargs=2,<span class=\"built_in\">help</span>=<span class=\"string\">\"指定2个守护进程PID值\"</span>,required=True)  <span class=\"comment\">#nargs=argparse.REMAINDER  多个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">#位置参数：直接读取文件包或者写入</span></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'infile'</span>,nargs=<span class=\"string\">'?'</span>,<span class=\"built_in\">type</span>=argparse.FileType(<span class=\"string\">'r'</span>),default=sys.stdin)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'outfile'</span>,nargs=<span class=\"string\">'?'</span>,<span class=\"built_in\">type</span>=argparse.FileType(<span class=\"string\">'w+'</span>),default=sys.stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#可使用metavar指定替代名称，当ArgumentParser生成帮助消息时，</span></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'--bar'</span>,metavar=[<span class=\"string\">'XXX'</span>,<span class=\"string\">'YYYY'</span>]) <span class=\"comment\">#它需要某种方法来引用每个期望的参数。</span></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'demo'</span>,metavar=[<span class=\"string\">'AAA'</span>,<span class=\"string\">'bbb'</span>])  <span class=\"comment\">#位置参数提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">    args = parser.parse_args()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"参数类型：\"</span>,<span class=\"built_in\">type</span>(args),<span class=\"string\">\"\\n参数解析对象：\"</span>,args)</span><br><span class=\"line\">    ip = args.ip</span><br><span class=\"line\">    username = args.User</span><br><span class=\"line\">    password = args.Pass</span><br><span class=\"line\">    port = int(args.Port) <span class=\"comment\">#由于参数指定的类型是str所以这里转成int</span></span><br><span class=\"line\">    trynum = args.Trynum  <span class=\"comment\">#TestArgumentDemo: error: argument -n/--number: invalid choice: 5 (choose from 1, 2, 3, 4)</span></span><br><span class=\"line\">    mutil = args.Mutil</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"IP地址：\"</span>,ip)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"用户名：\"</span>,username)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"密码：\"</span>,password)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"端口：\"</span>,port)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"重试次数：\"</span>,trynum)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"指定参数名称及多个参数：\"</span>,mutil)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"文件读取：\"</span>,end = <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> args.infile:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(each)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"文件写入：\"</span>,args.outfile)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Matavar期望参数： Bar = \"</span>,args.bar,<span class=\"string\">\"   Demo = \"</span>,args.demo)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"版本信息：\"</span>,end=<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">    os.system(<span class=\"string\">'argument.py -v'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure></p>\n<p>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$argument</span>.py -h</span><br><span class=\"line\">usage: TestArgumentDemo [-h] -i IP -u USER -p PASS [-P PORT] [-v]</span><br><span class=\"line\">                        [-n &#123;1,2,3,4&#125;] -m MUTIL MUTIL [--bar [<span class=\"string\">'XXX'</span>, <span class=\"string\">'YYYY'</span>]]</span><br><span class=\"line\">                        [infile] [outfile] [<span class=\"string\">'AAA'</span>, <span class=\"string\">'bbb'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">实现指定输入参数来来输入的值进行解析 采用Argparse模块中的ArgumentParser方法进行实例化</span><br><span class=\"line\"></span><br><span class=\"line\">positional arguments: 位置参数</span><br><span class=\"line\">  infile</span><br><span class=\"line\">  outfile</span><br><span class=\"line\">  [<span class=\"string\">'AAA'</span>, <span class=\"string\">'bbb'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">optional arguments:  选项参数</span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -i IP, --ip IP        请输入一个IP地址如:192.168.1.1</span><br><span class=\"line\">  -u USER, --user USER  指定连接的服务的用户名称</span><br><span class=\"line\">  -p PASS, --pass PASS  指定连接服务的用户密码</span><br><span class=\"line\">  -P PORT, --port PORT  指定服务的端口默认：25</span><br><span class=\"line\">  -v, --version         show program<span class=\"string\">'s version number and exit</span></span><br><span class=\"line\"><span class=\"string\">  -n &#123;1,2,3,4&#125;, --number &#123;1,2,3,4&#125;</span></span><br><span class=\"line\"><span class=\"string\">                        失败重试次数</span></span><br><span class=\"line\"><span class=\"string\">  -m MUTIL MUTIL, --mutil MUTIL MUTIL</span></span><br><span class=\"line\"><span class=\"string\">                        指定2个守护进程PID值</span></span><br><span class=\"line\"><span class=\"string\">  --bar ['</span>XXX<span class=\"string\">', '</span>YYYY<span class=\"string\">']</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">$argument.py -i 192.168.1.1 -u root -p 123456 -P2222 -m 1024 2048 1.txt 2.txt AAAA --bar YYYY</span></span><br><span class=\"line\"><span class=\"string\">参数类型： &lt;class '</span>argparse.Namespace<span class=\"string\">'&gt;</span></span><br><span class=\"line\"><span class=\"string\">参数解析对象： Namespace(Mutil=['</span>1024<span class=\"string\">', '</span>2048<span class=\"string\">'], Pass='</span>123456<span class=\"string\">', Port='</span>2222<span class=\"string\">', Try</span></span><br><span class=\"line\"><span class=\"string\">num=2, User='</span>root<span class=\"string\">', bar='</span>YYYY<span class=\"string\">', demo='</span>AAAA<span class=\"string\">', infile=&lt;_io.TextIOWrapper name='</span>1.t</span><br><span class=\"line\">xt<span class=\"string\">' mode='</span>r<span class=\"string\">' encoding='</span>cp936<span class=\"string\">'&gt;, ip='</span>192.168.1.1<span class=\"string\">', outfile=&lt;_io.TextIOWrapper nam</span></span><br><span class=\"line\"><span class=\"string\">e='</span>2.txt<span class=\"string\">' mode='</span>w+<span class=\"string\">' encoding='</span>cp936<span class=\"string\">'&gt;)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： 192.168.1.1</span></span><br><span class=\"line\"><span class=\"string\">用户名： root</span></span><br><span class=\"line\"><span class=\"string\">密码： 123456</span></span><br><span class=\"line\"><span class=\"string\">端口： 2222</span></span><br><span class=\"line\"><span class=\"string\">重试次数： 2</span></span><br><span class=\"line\"><span class=\"string\">指定参数名称及多个参数： ['</span>1024<span class=\"string\">', '</span>2048<span class=\"string\">']</span></span><br><span class=\"line\"><span class=\"string\">文件读取： Whoami - 文本内容</span></span><br><span class=\"line\"><span class=\"string\">文件写入： &lt;_io.TextIOWrapper name='</span>2.txt<span class=\"string\">' mode='</span>w+<span class=\"string\">' encoding='</span>cp936<span class=\"string\">'&gt;</span></span><br><span class=\"line\"><span class=\"string\">Matavar期望参数： Bar =  YYYY    Demo =  AAAA</span></span><br><span class=\"line\"><span class=\"string\">版本信息：TestArgumentDemo 1.0</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]<br>","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"}]}