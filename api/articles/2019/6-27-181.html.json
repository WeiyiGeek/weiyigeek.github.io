{"title":"Shell脚本之常用Linux命令使用介绍","slug":"系统运维/Linux/常用命令/脚本常用类命令/Shell脚本之常用Linux命令使用介绍","date":"2019-06-27T13:37:30.000Z","updated":"2022-08-26T10:41:43.290Z","url":"2019/6-27-181.html","path":"api/articles/2019/6-27-181.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629232606.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629233234.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629234049.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-Linux-内置\"><a href=\"#0x01-Linux-内置\" class=\"headerlink\" title=\"0x01 Linux 内置\"></a>0x01 Linux 内置</h2><h3 id=\"xargs-命令-重要\"><a href=\"#xargs-命令-重要\" class=\"headerlink\" title=\"xargs 命令 (重要)\"></a>xargs 命令 (重要)</h3><p>描述：xargs（英文全拼： eXtended ARGuments）是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</p>\n<p>其读取输入数据重新格式化后输出,<code>它擅长将标准输入数据转换成命令行参数,而且能够处理管道或者stdin并将其转换成特定命令的命令参数</code>,也可以将单行或多行文本输入转换为其他格式,例如多行变单行以及单行变多行;</p>\n<p>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</p>\n<p>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。</p>\n<p>xargs 默认命令是echo 意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。</p>\n<p>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令，</p>\n<p>Tips: 关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令</p>\n<p><br/></p>\n<p><strong>语法选项：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somecommand |xargs -item  <span class=\"built_in\">command</span></span><br><span class=\"line\"></span><br><span class=\"line\">-0 ：<span class=\"comment\">#将\\0作为定界符。</span></span><br><span class=\"line\">-a ：<span class=\"comment\">#指定一个xargs脚本文件</span></span><br><span class=\"line\">-n &lt;数字&gt;: <span class=\"comment\">#指定每行显示多少列; </span></span><br><span class=\"line\">-d <span class=\"string\">'定界字符'</span>: <span class=\"comment\">#指定一个定界符注意必须是单字符;</span></span><br><span class=\"line\">-I : <span class=\"comment\">#指定一个替换字符串&#123;&#125;,这个字符串再xargs扩展时会被替换掉,当-I与xargx联合使用的时候每一个参数命令都会被执行一次，类似于find的-ok/-exec选项</span></span><br><span class=\"line\">-i,-I  <span class=\"comment\"># 这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 &#123;&#125;，可以用 &#123;&#125; 代替。</span></span><br><span class=\"line\">-L num <span class=\"comment\"># 从标准输入一次读取 num 行送给 command 命令。</span></span><br><span class=\"line\">-n, --max-args=MAX-ARGS   <span class=\"comment\"># 每个命令最多使用MAX-ARGS参数行</span></span><br><span class=\"line\">-P, --max-procs=MAX-PROCS <span class=\"comment\"># 一次运行最多的max-procs进程</span></span><br><span class=\"line\">-p, --interactive         <span class=\"comment\"># 运行命令前提示</span></span><br><span class=\"line\">-s, --max-chars=MAX-CHARS    <span class=\"comment\"># 最多将命令限制为MAX-CHARS</span></span><br><span class=\"line\">-x, --<span class=\"built_in\">exit</span>   <span class=\"comment\">#如果超过大小(参见-s)，则退出。</span></span><br><span class=\"line\">-t <span class=\"comment\"># 表示先打印命令，然后再执行。</span></span><br><span class=\"line\">-r no-run-if-empty <span class=\"comment\"># 当xargs的输入为空的时候则停止xargs，不用再去执行了。</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义一个测试文件,内有多行文本数据：</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> test.txt</span><br><span class=\"line\">a b c d e f </span><br><span class=\"line\">g h i j k l </span><br><span class=\"line\">m n o p q r </span><br><span class=\"line\">s t u v w x y z</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.多行输入单行输出和指定行输出</span></span><br><span class=\"line\">cat test.txt | xargs </span><br><span class=\"line\"><span class=\"comment\"># a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class=\"line\">cat test.txt | xargs -n3   <span class=\"comment\">#每行显示3个参数</span></span><br><span class=\"line\"><span class=\"comment\"># a b c </span></span><br><span class=\"line\"><span class=\"comment\"># d e f</span></span><br><span class=\"line\"><span class=\"comment\"># g h i </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.指定一个定界符进行分割</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"nameXnameXnameXname\"</span> | xargs -dX </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"nameXnameXnameXname\"</span> | xargs -dX -n2  <span class=\"comment\">#结合n使用</span></span><br><span class=\"line\">name name </span><br><span class=\"line\">name name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"testp-testp-wwwp-www\"</span> | xargs -d <span class=\"string\">'p'</span></span><br><span class=\"line\"><span class=\"comment\"># test -test -www -www</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3查找所有不可修改的文件 (对于入侵监测的时候可使用)</span></span><br><span class=\"line\">find . | xargs -I file lsattr -a file 2&gt;/dev/null | grep <span class=\"string\">'^----i'</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629232606.png\" alt=\"WeiyiGeek.示例1\" title=\"\" class=\"\">\n                <p>WeiyiGeek.示例1</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例3.读取stdin将格式化后的参数传递给命令</span></span><br><span class=\"line\"><span class=\"comment\">#假设一个命令为 sk.sh 和一个保存参数的文件arg.txt：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*  <span class=\"comment\">#sk.sh命令内容,打印出所有参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#arg.txt文件内容：</span></span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以利用这个来更改ip文本以及脚本参数的传入</span></span><br><span class=\"line\">cat arg.txt | xargs -I &#123;&#125; ./sk.sh -p &#123;&#125; -l </span><br><span class=\"line\">cat arg.txt | xargs -I &#123;&#125; <span class=\"built_in\">echo</span> $* <span class=\"string\">\"-p123\"</span> &#123;&#125;<span class=\"string\">\"- l123\"</span></span><br><span class=\"line\">-p aaa -l </span><br><span class=\"line\">-p bbb -l </span><br><span class=\"line\">-p ccc -l</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629233234.png\" alt=\"WeiyiGeek.-I于xargs\" title=\"\" class=\"\">\n                <p>WeiyiGeek.-I于xargs</p>\n            </figure>\n<p><br/></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例4. 复制所有图片文件到 /data/images 目录下：</span></span><br><span class=\"line\">ls *.png *.jpg *.gif | xargs -n1 -I &#123;&#125; cp &#123;&#125; /data/images</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.xargs结合find使用 ，ls -i 排除显示指定的文件</span></span><br><span class=\"line\"><span class=\"comment\">#用rm 删除太多的文件时候,可能得到一个错误信息：/bin/rm Argument list too long. 用xargs去避免这个问题：</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.log\"</span> -print0 | xargs -n1 --null   <span class=\"comment\">#换行或者空格分割以-n1有关系</span></span><br><span class=\"line\"><span class=\"comment\"># ./tuned/tuned.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./audit/audit.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./anaconda/anaconda.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./anaconda/X.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./anaconda/program.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.log\"</span> -print0 | xargs -0 -n3</span><br><span class=\"line\"><span class=\"comment\"># ./tuned/tuned.log ./audit/audit.log ./anaconda/anaconda.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./anaconda/X.log ./anaconda/program.log ./anaconda/packaging.log</span></span><br><span class=\"line\"><span class=\"comment\"># ./anaconda/storage.log ./anaconda/ifcfg.log ./anaconda/ks-script-ECgRju.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.log\"</span> -print0 | xargs -0 rm -f <span class=\"comment\">#每个参数都回执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例6.统计文件信息</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.php\"</span> -print0 | xargs -0 wc -l <span class=\"comment\">#统计一个源代码目录中所有php文件的行数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例7.查找所有的jpg 文件,并且压缩它们</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.jpg\"</span> -<span class=\"built_in\">print</span> | xargs tar -czvf images.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例7.其他补充使用</span></span><br><span class=\"line\">cat url-list.txt | xargs wget -c <span class=\"comment\">#假如你有一个文件包含了很多你希望下载的URL,你能够使用xargs下载所有链接</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190629234049.png\" alt=\"WeiyiGeek.xargs使用\" title=\"\" class=\"\">\n                <p>WeiyiGeek.xargs使用</p>\n            </figure>\n<p><br/></p>\n<p><strong>示例8.xargs替换字符串来更改ip文本：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">XARGX替换url.txt front/back字符</span><br><span class=\"line\">cat url.txt | xargs -I &#123;&#125; <span class=\"built_in\">echo</span> $* <span class=\"string\">\"Url:\"</span>&#123;&#125;<span class=\"string\">\"/admin/web.jsp\"</span>  <span class=\"comment\">#method 1</span></span><br><span class=\"line\">awk <span class=\"string\">'&#123;print \"Url:\"$1\"/admin/web.jsp\"&#125;'</span> url.txt</span><br><span class=\"line\"><span class=\"comment\"># Url:http://192.168.2.2:8080/admin/web.jsp</span></span><br><span class=\"line\"><span class=\"comment\"># Url:http://192.168.2.1:8081/admin/web.jsp</span></span><br><span class=\"line\"><span class=\"comment\"># Url:http://192.168.1.101:80/admin/web.jsp</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>示例9.xargs脚本并发执行命令</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">thread_num=256</span><br><span class=\"line\">ls | xargs -n 1 -I &#123;&#125; -P <span class=\"variable\">$&#123;thread_num&#125;</span> sh -c <span class=\"string\">\"/usr/binfs_upload_file /etcfs/client.conf &#123;&#125;\"</span></span><br><span class=\"line\">ls -I <span class=\"string\">'*.yml'</span> | xargs -I &#123;&#125; rm -rf &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"mapfile-命令-用于从标准输入或文件描述符读取行并赋值到数组\"><a href=\"#mapfile-命令-用于从标准输入或文件描述符读取行并赋值到数组\" class=\"headerlink\" title=\"mapfile 命令 - 用于从标准输入或文件描述符读取行并赋值到数组\"></a>mapfile 命令 - 用于从标准输入或文件描述符读取行并赋值到数组</h3><p>描述: 该命令主要用于将标准输入中的行读取到索引数组变量中, MAPFILE 变量是默认数组。</p>\n<p><strong>语法参数</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mapfile</span>: <span class=\"built_in\">mapfile</span> [-d delim] [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]</span><br><span class=\"line\">  </span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -d delim  Use DELIM to terminate lines, instead of newline</span><br><span class=\"line\">  -n count  从标准输入中获取最多count行，如果count为零那么获取全部</span><br><span class=\"line\">  -O origin 从数组下标为origin的位置开始赋值，默认的下标为0</span><br><span class=\"line\">  -s count  跳过对前count行的读取</span><br><span class=\"line\">  -t        从每行读取中删除一个尾随的 DELIM（默认换行）</span><br><span class=\"line\">  -u fd     Read lines from file descriptor FD instead of the standard input</span><br><span class=\"line\">  -C callback       Evaluate CALLBACK each time QUANTUM lines are <span class=\"built_in\">read</span>.每次读取量子线时计算回调</span><br><span class=\"line\">  -c quantum        Specify the number of lines <span class=\"built_in\">read</span> between each call to CALLBACK.指定每次回调调用之间读取的行数</span><br><span class=\"line\"></span><br><span class=\"line\">Arguments:</span><br><span class=\"line\">  ARRAY     Array variable name to use <span class=\"keyword\">for</span> file data</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>实践使用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.将磁盘分区信息以数组的方式赋予DFH变量。</span></span><br><span class=\"line\"><span class=\"comment\"># /           80%   97G   74G</span></span><br><span class=\"line\"><span class=\"comment\"># /boot       23%  976M  206M</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -t DFH &lt; &lt;(df -h -x zfs -x squashfs -x tmpfs -x devtmpfs -x overlay --output=target,pcent,size,used | tail -n+2)</span><br><span class=\"line\">~$ <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;DFH[1]&#125;</span></span><br><span class=\"line\">/boot 23% 976M 206M</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.先创建一个示例用的文件alpha.log，每行一个小写字母共26行：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;a..z&#125; | tr <span class=\"string\">\" \"</span> <span class=\"string\">\"\\n\"</span> &gt; alpha.log</span><br><span class=\"line\"><span class=\"comment\"># 如不指定变量则存储到默认的MAPFILE数组中。</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> &lt; alpha.log </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;MAPFILE[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定变量VAR_ARRAY值进行接收。</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> VAR_ARRAY &lt; alpha.log </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.从标准输入中获取最多3行数据</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -n 3 VAR_ARRAY &lt; alpha.log &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># a b c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.跳过对前3行的读取,即从下标为3的开始读取</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -s 3 VAR_ARRAY &lt; alpha.log &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.从数组下标为4的位置开始赋值(注意区别)</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -O 4 -d <span class=\"string\">'\\n'</span> VAR_ARRAY &lt; alpha.log  &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"comment\"># a b c a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -O 2 VAR_ARRAY &lt; alpha.log  &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># a a b c d e f g h i j k l m n o p q r s t u v w x y z z z</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -O 26 VAR_ARRAY &lt; alpha.log  &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;VAR_ARRAY[@]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># a b c d e f g h i j k l m n o p q r s t u v w x y a a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.每读取3行就执行一次echo，并且我们还可以将多个操作组合起来作为一个回调程序。</span></span><br><span class=\"line\"><span class=\"built_in\">mapfile</span> -t -c 3 -C <span class=\"string\">\"echo\"</span> VAR_ARRAY &lt; alpha.log</span><br><span class=\"line\">2 c</span><br><span class=\"line\">5 f</span><br><span class=\"line\">8 i</span><br><span class=\"line\">11 l</span><br><span class=\"line\">14 o</span><br><span class=\"line\">17 r</span><br><span class=\"line\">20 u</span><br><span class=\"line\">23 x</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x01-外置扩展\"><a href=\"#0x01-外置扩展\" class=\"headerlink\" title=\"0x01 外置扩展\"></a>0x01 外置扩展</h2><h3 id=\"dos2unix-命令-将DOS格式的文本文件转换成UNIX格式的\"><a href=\"#dos2unix-命令-将DOS格式的文本文件转换成UNIX格式的\" class=\"headerlink\" title=\"dos2unix 命令 - 将DOS格式的文本文件转换成UNIX格式的\"></a>dos2unix 命令 - 将DOS格式的文本文件转换成UNIX格式的</h3><p>描述: 用来将DOS格式的文本文件转换成UNIX格式的（DOS/MAC to UNIX text file format converter）。</p>\n<ul>\n<li>DOS下的文本文件是以\\r\\n作为断行标志的，表示成十六进制就是0D 0A。</li>\n<li>Unix下的文本文件是以\\n作为断行标志的，表示成十六进制就是0A。</li>\n</ul>\n<p>DOS格式的文本文件在Linux底下，用较低版本的vi打开时行尾会显示^M，而且很多命令都无法很好的处理这种格式的文件，而Unix格式的文本文件在Windows下用Notepad打开时会拼在一起显示。因此产生了两种格式文件相互转换的需求，对应的将UNIX格式文本文件转成成DOS格式的是unix2dos命令。</p>\n<p><strong>安装</strong><br>系统默认不带该命令，我们需要从软件仓库中进行下载使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">apt install -y dos2unix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\">yum install -y dos2unix</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>语法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dos2unix [-hkqV] [-c convmode] [-o file ...] [-n infile outfile ...]</span><br></pre></td></tr></table></figure><br>选项解析:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -k：保持输出文件的日期不变 </span><br><span class=\"line\">2. -q：安静模式，不提示任何警告信息</span><br><span class=\"line\">3. -V：查看版本</span><br><span class=\"line\">4. -c：转换模式，模式有：ASCII, 7bit, ISO, Mac, 默认是：ASCII</span><br><span class=\"line\">5. -o：写入到源文件</span><br><span class=\"line\">6. -n：写入到新文件</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>使用示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.最简单的用法就是dos2unix直接跟上文件名。</span></span><br><span class=\"line\">dos2unix file1.sh file2.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.如果一次转换多个文件，把这些文件名直接跟在dos2unix之后（注：也可以加上-o参数，也可以不加，效果一样）</span></span><br><span class=\"line\">dos2unix file1 file2 file3 </span><br><span class=\"line\">dos2unix -o file1 file2 file3 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.如果想把转换的结果保存在别的文件，而源文件不变，则可以使用-n参数。</span></span><br><span class=\"line\">dos2unix -n oldfile newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.如果要保持文件时间戳不变，加上-k参数</span></span><br><span class=\"line\">dos2unix -k file</span><br><span class=\"line\">dos2unix -k file1 file2 file3</span><br><span class=\"line\">dos2unix -k -o file1 file2 file3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.递归替换目录中的所有文件，例如批量替换为linux或者dos文件格式：</span></span><br><span class=\"line\">sudo find public/components/ -name <span class=\"string\">\"*.py\"</span> | xargs dos2unix  <span class=\"comment\"># linux 格式</span></span><br><span class=\"line\">sudo find public/components/ -name <span class=\"string\">\"*.py\"</span> | xargs unix2dos  <span class=\"comment\"># dos 格式</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"shell","path":"api/tags/shell.json"}]}