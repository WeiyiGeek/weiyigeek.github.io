{"title":"n1.Go语言之三方扩展学习记录","slug":"编程世界/Go/Package/n1.Go语言之三方扩展学习记录","date":"2020-04-23T03:16:58.000Z","updated":"2022-03-11T03:46:55.054Z","url":"2020/4-23-611.html","path":"api/articles/2020/4-23-611.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"序列化-amp-数据交换\"><a href=\"#序列化-amp-数据交换\" class=\"headerlink\" title=\"序列化&amp;数据交换\"></a>序列化&amp;数据交换</h2><p>本文主要介绍二进制协议gob及msgpack的基本使用。</p>\n<p>最近在写一个gin框架的session服务时遇到了一个问题，Go语言中的json包在序列化空接口存放的数字类型（整型、浮点型等）都序列化成float64类型。</p>\n<p>我们构造一个结构体如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> s struct &#123;</span><br><span class=\"line\">  data map[string]interface&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>json序列化的问题</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">jsonDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s1 = s&#123;</span><br><span class=\"line\">    data: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">8</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s1.data[<span class=\"string\">\"count\"</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">  ret, err := json.Marshal(s1.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"marshal failed\"</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%#v\\n\"</span>, <span class=\"keyword\">string</span>(ret))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> s2 = s&#123;</span><br><span class=\"line\">    data: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">8</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  err = json.Unmarshal(ret, &amp;s2.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"unmarshal failed\"</span>, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(s2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s2.data &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"value:%v, type:%T\\n\"</span>, v, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&#123;\\&quot;count\\&quot;:1&#125;&quot;</span><br><span class=\"line\">&#123;map[count:1]&#125;</span><br><span class=\"line\">value:1, type:float64</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gob序列化示例\"><a href=\"#gob序列化示例\" class=\"headerlink\" title=\"gob序列化示例\"></a>gob序列化示例</h3><p>标准库gob是golang提供的“私有”的编解码方式，它的效率会比json，xml等更高，特别适合在Go语言程序间传递数据。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gobDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s1 = s&#123;</span><br><span class=\"line\">    data: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">8</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  s1.data[<span class=\"string\">\"count\"</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// encode</span></span><br><span class=\"line\">  buf := <span class=\"built_in\">new</span>(bytes.Buffer)</span><br><span class=\"line\">  enc := gob.NewEncoder(buf)</span><br><span class=\"line\">  err := enc.Encode(s1.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"gob encode failed, err:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b := buf.Bytes()</span><br><span class=\"line\">  fmt.Println(b)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> s2 = s&#123;</span><br><span class=\"line\">    data: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">8</span>),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// decode</span></span><br><span class=\"line\">  dec := gob.NewDecoder(bytes.NewBuffer(b))</span><br><span class=\"line\">  err = dec.Decode(&amp;s2.data)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"gob decode failed, err\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(s2.data)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s2.data &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"value:%v, type:%T\\n\"</span>, v, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"msgpack\"><a href=\"#msgpack\" class=\"headerlink\" title=\"msgpack\"></a>msgpack</h3><p>MessagePack是一种高效的二进制序列化格式。它允许你在多种语言(如JSON)之间交换数据。但它更快更小。<br>安装<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/vmihailenco/msgpack</span><br></pre></td></tr></table></figure></p>\n<p>示例<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"github.com/vmihailenco/msgpack\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// msgpack demo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name   <span class=\"keyword\">string</span></span><br><span class=\"line\">  Age    <span class=\"keyword\">int</span></span><br><span class=\"line\">  Gender <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  p1 := Person&#123;</span><br><span class=\"line\">    Name:   <span class=\"string\">\"沙河娜扎\"</span>,</span><br><span class=\"line\">    Age:    <span class=\"number\">18</span>,</span><br><span class=\"line\">    Gender: <span class=\"string\">\"男\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// marshal</span></span><br><span class=\"line\">  b, err := msgpack.Marshal(p1)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"msgpack marshal failed,err:%v\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// unmarshal</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p2 Person</span><br><span class=\"line\">  err = msgpack.Unmarshal(b, &amp;p2)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"msgpack unmarshal failed,err:%v\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"p2:%#v\\n\"</span>, p2) <span class=\"comment\">// p2:main.Person&#123;Name:\"沙河娜扎\", Age:18, Gender:\"男\"&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}