{"title":"shell脚本编程之路3","slug":"系统运维/Linux/Shell编程/shell脚本编程之路3","date":"2019-06-28T11:35:30.000Z","updated":"2023-01-31T02:29:10.385Z","url":"2019/6-28-134.html","path":"api/articles/2019/6-28-134.html.json","covers":["https://img.weiyigeek.top/2019/20190708151545.png","https://img.weiyigeek.top/2019/20190708151730.png","https://img.weiyigeek.top/2019/20190708152149.png","https://img.weiyigeek.top/2019/20190708153216.png","https://img.weiyigeek.top/2019/20190708165354.png","https://img.weiyigeek.top/2019/20190708170920.png","https://img.weiyigeek.top/2019/20190708172122.png","https://img.weiyigeek.top/2019/20190708174009.png","https://img.weiyigeek.top/2019/20190708173818.png","https://img.weiyigeek.top/2019/20190709153530.png","https://img.weiyigeek.top/2019/20190709155019.png","https://img.weiyigeek.top/2019/20190709161527.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x07-shell编程选择分支\"><a href=\"#0x07-shell编程选择分支\" class=\"headerlink\" title=\"0x07 shell编程选择分支\"></a>0x07 shell编程选择分支</h4><p>描述：我们学过的每一种高级编程语言,都在存在流程/分支选择/循环等结构,同样shell编程中也有这是与windows上的bat编程不一样的点;<code>shell选择分支嵌套建议不超过三层</code>,为了执行的效率和其他人容易读懂;</p>\n<h5 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h5><p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支,Shell中有三种 if … else 语句表示结构：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.单分支语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ...;<span class=\"keyword\">then</span> ... <span class=\"keyword\">fi</span> 语句；</span><br><span class=\"line\"><span class=\"keyword\">if</span> ...;<span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">fi</span> 语句；</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.双分支语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ...;<span class=\"keyword\">then</span> ...  <span class=\"keyword\">elif</span> ...;<span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">fi</span> 语句</span><br></pre></td></tr></table></figure></p>\n<p><strong>(1)单分支语句</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.语法结构 if......fi语句</span></span><br><span class=\"line\"><span class=\"comment\">#如果 expression 返回 true，then 后边的语句将会被执行；如果返回 false，不会执行任何语句。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ expression ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span> <span class=\"comment\">#最后必须以 fi 来结尾闭合 if，fi 就是 if 倒过来拼写，后面也会遇见。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#即</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [表达式];<span class=\"keyword\">then</span></span><br><span class=\"line\">    语句</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.语法结构  if ... else ... fi 语句</span></span><br><span class=\"line\"><span class=\"comment\"># 如果 expression 返回 true，那么 then 后边的语句将会被执行；否则，执行 else 后边的语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ expression ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression is not <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708151545.png\" alt=\"WeiyiGeek.if..fi\" title=\"\" class=\"\">\n                <p>WeiyiGeek.if..fi</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708151730.png\" alt=\"WeiyiGeek.if..else..fi\" title=\"\" class=\"\">\n                <p>WeiyiGeek.if..else..fi</p>\n            </figure>\n<p><br></p>\n<p><strong>(3)多分支语句</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#3.语法结构  if ... elif ...else... fi 语句</span></span><br><span class=\"line\"><span class=\"comment\">#可以对多个条件进行判断，注意的是每个条件表达式后面都有一个then，语法为： </span></span><br><span class=\"line\"><span class=\"comment\">#依次判断，为真则结束判断，为Fasle则继续向下判断.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ expression 1 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression 1 is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ expression 2 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression 2 is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ expression 3 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> expression 3 is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> no expression is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，那么不执行任何语句</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708152149.png\" alt=\"WeiyiGeek.if..elif\" title=\"\" class=\"\">\n                <p>WeiyiGeek.if..elif</p>\n            </figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"Please INput A:\"</span> a</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"Please INput B:\"</span> b</span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"Please INput C:\"</span> c\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n\\e[1;32m  ##示例1.单分支语句 \\e[0m\"</span></span><br><span class=\"line\"><span class=\"comment\">#注意：条件表达式要放在方括号之间，并且要有空格，例如 [$a==$b] 是错误的，必须写成 [ $a == $b ]</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span>     <span class=\"comment\">#注意[ 里面的关系运算符要用空格隔开 ]</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"a is equal to b!!\"</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> != <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">\"a is not equal to b!!\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#if语句也可以写成一行，以命令的方式来运行，像这样： </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[2*3] -eq $[1+5]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"string\">'The two numbers are equal!'</span>; <span class=\"keyword\">fi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n##示例2.单分支语句\"</span></span><br><span class=\"line\"><span class=\"comment\">#判断从标准输入的变量b和c的值是否相等</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$c</span> == <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a is equal to b!!\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"a is not equal to b!!\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#判断iptables是否在运行，如果已经在运行提示信息，如果没有开启它。</span></span><br><span class=\"line\">service iptables status &amp;&gt; /dev/null</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -eq 0 ];</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"iptables service is running\"</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    service iptables restart</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n##示例3.多分支语句\"</span> </span><br><span class=\"line\"><span class=\"comment\">#注意elif使用中没一个条件后都有一个then关键字;</span></span><br><span class=\"line\">a=10;b=20</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> == <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"a is equal to b\"</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -gt <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span>  <span class=\"comment\"># &gt;</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"a is greater than b\"</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> [ <span class=\"variable\">$a</span> -lt <span class=\"variable\">$b</span> ];<span class=\"keyword\">then</span> <span class=\"comment\"># &lt;</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"a is less than b\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       <span class=\"built_in\">echo</span> <span class=\"string\">\"None of the condition met\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708153216.png\" alt=\"WeiyiGeek.if示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.if示例</p>\n            </figure></p>\n<p>if…else 语句也经常与 test 命令或者 [  ] 结合使用如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></span><br><span class=\"line\"><span class=\"comment\">#if与test命令和[]以及[[]]联合使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.test</span></span><br><span class=\"line\">num1=$[2*3];num2=$[1+5]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> $[num1] -eq $[num2]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'The two numbers are equal!'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'The two numbers are not equal!'</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#The two numbers are equal!</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.[]</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">\"测试输入：\"</span> number</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -z <span class=\"string\">\"<span class=\"variable\">$number</span>\"</span> -a <span class=\"string\">\"<span class=\"variable\">$number</span>\"</span> == <span class=\"string\">\"1024\"</span> ];<span class=\"keyword\">then</span>  <span class=\"comment\">#注意这里变量外面的双引号（非常重要）</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"输出正确：1024\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"您不满足条件！\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#输出正确：1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.[[]]</span></span><br><span class=\"line\">a=$(env|grep <span class=\"string\">\"USER\"</span>|cut -d <span class=\"string\">\"=\"</span> -f2)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> == <span class=\"string\">\"root\"</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Current User is Root\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [[ ! -z <span class=\"variable\">$a</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Current User is <span class=\"variable\">$&#123;a&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#Current User is ubuntu</span></span><br></pre></td></tr></table></figure></p>\n<p>高级示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bi/bash</span></span><br><span class=\"line\"><span class=\"comment\">#示例1.判断分区得使用率,建议if中表达式使用括号围起来</span></span><br><span class=\"line\">rate=$(df -h | grep <span class=\"string\">\"rootfs\"</span> | awk <span class=\"string\">'&#123;print $5&#125;'</span> | cut -d <span class=\"string\">\"%\"</span> -f1)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">test</span> <span class=\"variable\">$rate</span> -ge 10 );<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Warning /dev/sda1 is full <span class=\"variable\">$&#123;rate&#125;</span>\"</span>  </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/sda1 is more free<span class=\"variable\">$&#123;rate&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#Warning /dev/sda1 is full 19</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.判断一个是不是一个目录,变量必须采用\"\"进行包含</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -t 30 -p <span class=\"string\">\"请输入一个文件路径或者目录路径：\"</span> fdpath</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">test</span> -f <span class=\"string\">\"<span class=\"variable\">$fdpath</span>\"</span>);<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"它是一个文件，路径是：<span class=\"variable\">$fdpath</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> (<span class=\"built_in\">test</span> -d <span class=\"string\">\"<span class=\"variable\">$fdpath</span>\"</span>);<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"它是一个目录，路径是：<span class=\"variable\">$fdpath</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"既不是目录也不是文件！\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#它是一个文件，路径是：/tmp/test.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.判断apache服务得shell脚本名字不能有httpd关键字</span></span><br><span class=\"line\"><span class=\"built_in\">test</span>=$(ps aux | grep httpd | grep -v httpd) <span class=\"comment\">#截取http进程并且排除该项命令</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -n <span class=\"string\">\"<span class=\"variable\">$test</span>\"</span> ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\">#在不为空的情况下执行 -z : 是不是为零（是则真）</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span>  <span class=\"string\">\"<span class=\"variable\">$(date)</span> httpd is ok!\"</span> &gt;&gt; /tmp/httpslogs.logs</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"comment\">#否则重新启动httpd</span></span><br><span class=\"line\">    /etc/rc.d/init.d/httpd stop &amp;&gt; /dev/null</span><br><span class=\"line\">    /etc/rc.d/init.d/httpd start &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$(date)</span> restart httpd !!\"</span> &gt;&gt; /tmp/httpderror.logs</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708165354.png\" alt=\"WeiyiGeek.if常规运算\" title=\"\" class=\"\">\n                <p>WeiyiGeek.if常规运算</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"case-语句\"><a href=\"#case-语句\" class=\"headerlink\" title=\"case 语句\"></a>case 语句</h5><p>描述：case … esac 与其他语言中的 switch … case 语句类似，也是一种多分支选择结构。<br>case 语句匹配一个值或一个模式，如果匹配成功，执行相匹配的命令。</p>\n<p>语句格式语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> var值 <span class=\"keyword\">in</span></span><br><span class=\"line\"><span class=\"string\">\"值1\"</span>)</span><br><span class=\"line\">    command1 <span class=\"comment\">#如果等于值1则执行</span></span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"string\">\"值2\"</span>)</span><br><span class=\"line\">    command1 </span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    command1 <span class=\"comment\">#如果变量值都不是以上值,则执行此程序;</span></span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\">``` </span><br><span class=\"line\"><span class=\"keyword\">case</span>工作方式如上所示：取值后面必须为关键字 <span class=\"keyword\">in</span>，每一模式必须以右括号结束。取值可以为`变量或常数`，匹配发现取值符合某一模式后，其间所有命令`开始执行直至 ;;` ,取值将检测匹配的每一个模式：一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。</span><br><span class=\"line\">- 如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令</span><br><span class=\"line\">- ;; 与其他语言中的 <span class=\"built_in\">break</span> 类似，意思是跳到整个 <span class=\"keyword\">case</span> 语句的最后</span><br><span class=\"line\"></span><br><span class=\"line\">![WeiyiGeek.case语句](https://img.weiyigeek.top/2019/20190708170556.png)</span><br><span class=\"line\"></span><br><span class=\"line\">实际案例：</span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#示例1. 下面的脚本提示输入1到4，与每一种模式进行匹配</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Input a number between 1 to 4'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Your number is:\\c'</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> aNum</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        1)  <span class=\"built_in\">echo</span> <span class=\"string\">'You select 1'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        2)  <span class=\"built_in\">echo</span> <span class=\"string\">'You select 2'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        3)  <span class=\"built_in\">echo</span> <span class=\"string\">'You select 3'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        4)  <span class=\"built_in\">echo</span> <span class=\"string\">'You select 4'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *)  <span class=\"built_in\">echo</span> <span class=\"string\">'You do not select a number between 1 to 4'</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2：比较新颖的思路</span></span><br><span class=\"line\">option=<span class=\"string\">\"<span class=\"variable\">$&#123;1&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$&#123;option&#125;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">       -f|-F) </span><br><span class=\"line\">        FILE=<span class=\"string\">\"<span class=\"variable\">$&#123;2&#125;</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"File name is <span class=\"variable\">$FILE</span>\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">       -d|-D) </span><br><span class=\"line\">        DIR=<span class=\"string\">\"<span class=\"variable\">$&#123;2&#125;</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Dir name is <span class=\"variable\">$DIR</span>\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        <span class=\"comment\">#还可以这样</span></span><br><span class=\"line\">        [yY]|[yY][eE][sS])</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"YES\"</span>   </span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        [nN]|[nN][oO]</span><br><span class=\"line\">        echov <span class=\"string\">\"NO\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">       *) </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"`basename <span class=\"variable\">$&#123;0&#125;</span>`:usage: [-f file] | [-d directory]\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1 <span class=\"comment\"># Command to come out of the program with status 1</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708170920.png\" alt=\"WeiyiGeek.case语句示例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.case语句示例</p>\n            </figure>\n<p><em>注意事项:</em></p>\n<ul>\n<li>expression 和方括号([ ])之间必须有空格，否则会有语法错误</li>\n<li>可以使用三种方式让while循环读文件,但是并不建议采用while而是通过awk可以更快;<hr>\n\n</li>\n</ul>\n<h4 id=\"0x08-shell编程循环退出\"><a href=\"#0x08-shell编程循环退出\" class=\"headerlink\" title=\"0x08 shell编程循环退出\"></a>0x08 shell编程循环退出</h4><h5 id=\"for-语句\"><a href=\"#for-语句\" class=\"headerlink\" title=\"for 语句\"></a>for 语句</h5><p>描述：与其他编程语言类似，Shell支持for循环列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔，每循环一次，就将列表中的下一个值赋给变量。</p>\n<p>for语句语法格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##方法1：##</span></span><br><span class=\"line\"><span class=\"comment\">#in 列表是可选的，如果不用它 for 循环使用命令行的位置参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> 变量 <span class=\"keyword\">in</span> 取值列表;<span class=\"keyword\">do</span></span><br><span class=\"line\">    command1</span><br><span class=\"line\">    command2</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    commandN</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##方法2##</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((初始值;循环条件;变量控制))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   commond</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708172122.png\" alt=\"WeiyiGeek.for语句\" title=\"\" class=\"\">\n                <p>WeiyiGeek.for语句</p>\n            </figure></p>\n<p>for循环中用seq产生循环次数，加上C语言形式的for循环语句;<br>对于固定次数的循环，可以通过seq命令来实现，就不需要变量的自增了，这里的C语言for循环风格是挺熟悉的吧。</p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#示例1.循环示例</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> 1 2 3;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"（1）The value is: <span class=\"variable\">$loop</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> $(seq 0 2);<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"（2）The value is: <span class=\"variable\">$loop</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;0..2&#125; <span class=\"comment\">#输出&#123;1..2&#125;列表里面的数字，等同于seq 1 2</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果：</span></span><br><span class=\"line\">（1）The value is: 1</span><br><span class=\"line\">（1）The value is: 2</span><br><span class=\"line\">（1）The value is: 3</span><br><span class=\"line\">（2）The value is: 0</span><br><span class=\"line\">（2）The value is: 1</span><br><span class=\"line\">（2）The value is: 2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.对目录中的文件做for循环 </span></span><br><span class=\"line\"><span class=\"comment\">#如果只引用当前工作目录中的文件（例如如果输入for x in *），则产生的文件列表将没有路径信息的前缀(可以不用basename)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> /var/<span class=\"built_in\">log</span>/*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\">#这个$x获得的是绝对路径文件名，可以使用basename可执行程序来除去前面的路径信息</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> $(basename <span class=\"variable\">$x</span>) is a file living <span class=\"keyword\">in</span> /var/<span class=\"built_in\">log</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 执行结果：</span></span><br><span class=\"line\">  <span class=\"comment\"># alternatives.log is a file living in /var/log</span></span><br><span class=\"line\">  <span class=\"comment\"># apt is a file living in /var/log</span></span><br><span class=\"line\">  <span class=\"comment\"># btmp is a file living in /var/log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批量压缩有特点格式的日志文件:</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(ls info-20210427.log.&#123;0..5&#125;);<span class=\"keyword\">do</span> tar -zcvf <span class=\"variable\">$&#123;i&#125;</span>.tar.gz <span class=\"variable\">$&#123;i&#125;</span>;<span class=\"keyword\">done</span></span><br><span class=\"line\">rm -rf info-20210427.log.&#123;0..5&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3.批量解压包 </span></span><br><span class=\"line\">ls *.tar.gz &gt;&gt; gz.log 2&gt;/dev/null</span><br><span class=\"line\">ls *.tgz &gt;&gt; gz.log 2&gt;/dev/null</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"正在解压缩 : Wait,Please!!\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(cat gz.log)  <span class=\"comment\">#【这里值得学习在写脚本的时候非常有用】</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">      tar -zxf <span class=\"variable\">$i</span> &amp;&gt; /dev/null</span><br><span class=\"line\">    <span class=\"keyword\">done</span></span><br><span class=\"line\">rm -rf gz.log</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例4.利用计算1到100相加</span></span><br><span class=\"line\">sum=0</span><br><span class=\"line\"><span class=\"keyword\">for</span>((i=0;i&lt;=100;i++))</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    sum=$[ <span class=\"variable\">$sum</span> + <span class=\"variable\">$i</span> ]</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"一到一百相加得:<span class=\"variable\">$sum</span>\"</span> <span class=\"comment\">#5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例5.快速时间同步</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;78..83&#125;;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$i</span> -\"</span>;ssh -p 20211 root@192.168.1.<span class=\"variable\">$&#123;i&#125;</span> <span class=\"string\">'ntpdate 192.168.10.254 &amp;&amp; date'</span>;<span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例6.切割文件中自定字符并根据所切割的列进行排序去重，然后将得到的结果进行创建目录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> $(cut -d <span class=\"string\">\" \"</span> -f 3 copy.sh  | cut -d <span class=\"string\">\"/\"</span> -f 4 | sort | uniq );<span class=\"keyword\">do</span>  mkdir -vp <span class=\"variable\">$&#123;dir&#125;</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p><em>高级shell编程：</em><br>passwd默认是要用终端作为标准输入,加上–stdin表示可以用任意文件做标准输入<br>于是这里用管道作为标准输入,且直接传人密码，不用重复输入.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 批量建立用户</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123@4@56wn | /usr/bin/passwd <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 123@4@56wn | /usr/bin/passwd --stdin <span class=\"built_in\">test</span> </span><br><span class=\"line\"><span class=\"comment\"># --stdin 将echo输出得值接收赋予 test 用户   </span></span><br><span class=\"line\">--stdin 从标准输入读取令牌(只有根用户才能进行此操作)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708174009.png\" alt=\"WeiyiGeek.建立用户\" title=\"\" class=\"\">\n                <p>WeiyiGeek.建立用户</p>\n            </figure></p>\n<p><em>同样我们可以批量删除用户</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># less /etc/passwd | grep \"/bin/bash\" | grep -v root | cut -d \":\" -f1 </span></span><br><span class=\"line\">Srcweb</span><br><span class=\"line\">postgres</span><br><span class=\"line\">mysql</span><br><span class=\"line\">git</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190708173818.png\" alt=\"WeiyiGeek.删除用户\" title=\"\" class=\"\">\n                <p>WeiyiGeek.删除用户</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"while-语句\"><a href=\"#while-语句\" class=\"headerlink\" title=\"while 语句\"></a>while 语句</h5><p>描述：while 循环用于<code>不断执行一系列命令（为真执行）</code>，也用于从输入文件中读取数据；命令通常为测试条件。</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ 条件表达式]    <span class=\"comment\">#条件成立会一直执行</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   Statement(s) to be executed <span class=\"keyword\">if</span> <span class=\"built_in\">command</span> is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709153530.png\" alt=\"WeiyiGeek.while语句\" title=\"\" class=\"\">\n                <p>WeiyiGeek.while语句</p>\n            </figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.基本的while循环，测试条件是：</span></span><br><span class=\"line\"><span class=\"comment\">#如果COUNTER小于5，那么返回 true，COUNTER从0开始，每次循环处理时，COUNTER加1。运行上述脚本返回数字1到5然后终止</span></span><br><span class=\"line\">COUNTER=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$COUNTER</span> -lt 5 ]]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> $((COUNTER++)) &gt; /dev/null    <span class=\"comment\"># 相当于在循环内自加-在i++</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"<span class=\"variable\">$COUNTER</span>  \"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\">#执行结果</span></span><br><span class=\"line\">1  2  3  4  5 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.从1加到100的while计算方式.</span></span><br><span class=\"line\">i=1;s=0</span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$i</span> -le 100 ]];<span class=\"keyword\">do</span></span><br><span class=\"line\">    s=$(( <span class=\"variable\">$s</span>+<span class=\"variable\">$i</span> ))  <span class=\"comment\">#变量赋值不用带$+变量</span></span><br><span class=\"line\">    i=$(( <span class=\"variable\">$i</span>+1 ))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1+2+...+10 sum is: <span class=\"variable\">$&#123;s&#125;</span>\"</span> <span class=\"comment\">#1+2+...+10 sum is: 5050</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.while循环可用于读取键盘信息,思路毕竟新新颖.</span></span><br><span class=\"line\"><span class=\"comment\">#下面的例子中，输入信息被设置为变量FILM，按&lt;Ctrl-D&gt;结束循环</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'type &lt;CTRL-D&gt; to terminate'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">'enter your most liked film: '</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> FILM</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Yeah! great film the <span class=\"variable\">$FILM</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例4.批量转换png后缀的图片为webp图片。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> /tmp/*.png; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;i/.png/.webp&#125;</span>\"</span>; cwebp -q 80 <span class=\"variable\">$&#123;i&#125;</span> -o <span class=\"variable\">$&#123;i/.png/.webp&#125;</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\">/tmp/wechat-search.png</span><br><span class=\"line\">/tmp/wechat-search.webp</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709155019.png\" alt=\"WeiyiGeek.while循环监听输入\" title=\"\" class=\"\">\n                <p>WeiyiGeek.while循环监听输入</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"until-语句\"><a href=\"#until-语句\" class=\"headerlink\" title=\"until 语句\"></a>until 语句</h5><p>描述：until 循环用于<code>不断执行一系列命令（为真停止）</code>，也用于从输入文件中读取数据；命令通常为测试条件。<br>Tips:一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。</p>\n<ul>\n<li>until 循环执行一系列命令直至条件为 true 时停止。</li>\n<li>until 循环与 while 循环在处理方式上刚好相反。</li>\n</ul>\n<p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环</span></span><br><span class=\"line\">until [ 表达式 ] </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   Statement(s) to be executed until <span class=\"built_in\">command</span> is <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例1:使用 until 命令输出 0 ~ 9 的数字： </span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">a=0</span><br><span class=\"line\">until [ ! <span class=\"variable\">$a</span> -lt 10 ]  <span class=\"comment\"># a小于10取反-&gt;a大于10为假，则执行</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></span><br><span class=\"line\">   a=`expr <span class=\"variable\">$a</span> + 1`</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2. 从1加到100的until计算方式.</span></span><br><span class=\"line\">i=1;s=0</span><br><span class=\"line\">until [[ <span class=\"variable\">$i</span> -gt 100 ]];<span class=\"keyword\">do</span></span><br><span class=\"line\">    s=$(( <span class=\"variable\">$s</span>+<span class=\"variable\">$i</span> ))</span><br><span class=\"line\">    i=$(( <span class=\"variable\">$i</span>+1 ))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"The sum is: <span class=\"variable\">$&#123;s&#125;</span>\"</span> <span class=\"comment\">#The sum is: 5050</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，像大多数编程语言一样，Shell也使用 break 和 continue 来跳出循环。<br><br></p>\n<h5 id=\"break语句\"><a href=\"#break语句\" class=\"headerlink\" title=\"break语句\"></a>break语句</h5><p>描述：在for、while、until等循环语句中，用于跳出当前所在的循环体，执行循环体之后的语句。 </p>\n<p>基础语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1：</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ express ]];<span class=\"keyword\">do</span></span><br><span class=\"line\">    commands</span><br><span class=\"line\">    <span class=\"comment\">#通常在循环体中与条件语句一起使用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ express ];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2. 在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。</span></span><br><span class=\"line\"><span class=\"comment\">#例如： 表示跳出第 n 层循环</span></span><br><span class=\"line\"><span class=\"built_in\">break</span> n</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.脚本进入死循环直至用户输入数字大于5要跳出这个循环，返回到shell提示符下，就要使用break命令。 </span></span><br><span class=\"line\"><span class=\"keyword\">while</span> : <span class=\"comment\">#死循环  (注意这里的 : 也是一条命令，无论怎么样返回都为真且exit状态为0)</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Input a number between 1 to 5: \"</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> aNum</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"Your number is <span class=\"variable\">$aNum</span>!\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"You do not select a number between 1 to 5, game is over!\"</span></span><br><span class=\"line\">            <span class=\"built_in\">break</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.嵌套循环的例子，如果 var1 等于 2，并且 var2 等于 0，就跳出2层循环： </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var1 <span class=\"keyword\">in</span> 1 2 3</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> var2 <span class=\"keyword\">in</span> 0 5</span><br><span class=\"line\">   <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> [ <span class=\"variable\">$var1</span> -eq 2 -a <span class=\"variable\">$var2</span> -eq 0 ]  <span class=\"comment\">#当var1=2 与 var=0时跳出循环</span></span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">         <span class=\"built_in\">break</span> 2</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var1</span> <span class=\"variable\">$var2</span>\"</span></span><br><span class=\"line\">      <span class=\"keyword\">fi</span></span><br><span class=\"line\">   <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#运行结果</span></span><br><span class=\"line\">1 0 </span><br><span class=\"line\">1 5</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709161527.png\" alt=\"WeiyiGeek.示例1\" title=\"\" class=\"\">\n                <p>WeiyiGeek.示例1</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"continue-语句\"><a href=\"#continue-语句\" class=\"headerlink\" title=\"continue 语句\"></a>continue 语句</h5><p>描述：在for、while、until等循环语句中，<code>用于跳过循环体内余下的语句</code>，重新判断条件以便执行下一次循环; 同样continue 后面也可以跟一个数字，表示跳出第几层循环继续下一次循环。</p>\n<p>语法示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    commands</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ express ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">#跳出当前循环,重新进入下一次循环（与break一样通常与条件语句一起使用）</span></span><br><span class=\"line\">        <span class=\"built_in\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    commands</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.当输入的数字是1~5则退出while循环,否则继续执行 *) 中的命令并且永远也不会输出 Game is over</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Input a number between 1 to 5: \"</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> aNum</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$aNum</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        1|2|3|4|5) <span class=\"built_in\">echo</span> <span class=\"string\">\"Your number is <span class=\"variable\">$aNum</span>!\"</span></span><br><span class=\"line\">           <span class=\"built_in\">break</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">echo</span> <span class=\"string\">\"You do not select a number between 1 to 5!\"</span></span><br><span class=\"line\">            <span class=\"built_in\">continue</span></span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">\"Game is over!\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句echo “Game is over!”  # 永远不会被执行</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Shell","path":"api/tags/Shell.json"}]}