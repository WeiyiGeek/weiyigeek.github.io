{"title":"PS常用命令之脚本编程常用命令","slug":"编程世界/Powershell/Cmdlet/编程脚本类命令/PS常用命令之脚本编程常用命令","date":"2019-12-21T07:36:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/12-21-321.html","path":"api/articles/2019/12-21-321.html.json","covers":["https://img.weiyigeek.top/2021/1/20210402115922.png","https://img.weiyigeek.top/2019/1/20191129155734.png","https://img.weiyigeek.top/2021/1/20210402154921.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-标准输入输出\"><a href=\"#0x00-标准输入输出\" class=\"headerlink\" title=\"0x00 标准输入输出\"></a>0x00 标准输入输出</h2><h3 id=\"Write\"><a href=\"#Write\" class=\"headerlink\" title=\"Write-*\"></a>Write-*</h3><p><strong>模块常用cmdlet命令:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Command write-* -CommandType Cmdlet | Select-Object -Property Name,Version</span><br><span class=\"line\">Name              Version</span><br><span class=\"line\">----              -------</span><br><span class=\"line\">Write-Debug       3.1.0.0</span><br><span class=\"line\">Write-Error       3.1.0.0</span><br><span class=\"line\">Write-Host        3.1.0.0</span><br><span class=\"line\">Write-Output      3.1.0.0</span><br><span class=\"line\">Write-Progress    3.1.0.0</span><br><span class=\"line\">Write-Verbose     3.1.0.0</span><br><span class=\"line\">Write-Warning     3.1.0.0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"1-Write-Debug-命令-发送调试信息，并且显示错误信息\"><a href=\"#1-Write-Debug-命令-发送调试信息，并且显示错误信息\" class=\"headerlink\" title=\"1.Write-Debug 命令 - 发送调试信息，并且显示错误信息;\"></a>1.Write-Debug 命令 - 发送调试信息，并且显示错误信息;</h4><p>Write-Debug 示例 (建议实用的方法:$host.UI.WriteDebugLine())<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; Write-Debug -Message <span class=\"string\">\"Hello 2012 !\"</span> <span class=\"comment\">#首次执行没有任何输出这和$DebugPreference配置有关，</span></span><br><span class=\"line\"><span class=\"comment\">#因为$DebugPreference的默认值为：SilentlyContinue。</span></span><br><span class=\"line\">PS &gt; [System.Enum]::GetNames([System.Management.Automation.ActionPreference])</span><br><span class=\"line\">SilentlyContinue  <span class=\"comment\"># 继续</span></span><br><span class=\"line\">Stop     <span class=\"comment\"># 终止</span></span><br><span class=\"line\">Continue <span class=\"comment\"># 继续</span></span><br><span class=\"line\">Inquire  <span class=\"comment\"># 查询</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$DebugPreference</span>=<span class=\"string\">\"stop\"</span>  </span><br><span class=\"line\">PS &gt; Write-Debug <span class=\"string\">\"Hello 2012\"</span></span><br><span class=\"line\">调试: Hello 2012</span><br><span class=\"line\">Write-Debug : 已停止执行命令，因为首选项变量“DebugPreference”或通用参数被设置为 Stop。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"2-Write-Host-命令-自定义定制输出\"><a href=\"#2-Write-Host-命令-自定义定制输出\" class=\"headerlink\" title=\"2.Write-Host 命令 - 自定义定制输出\"></a>2.Write-Host 命令 - 自定义定制输出</h4><p>描述:您可以通过把ForegroundColor参数指定文本的颜色，你可以通过使用BACKGROUNDCOLOR参数中指定的背景色<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write-Host</span><br><span class=\"line\">     [[-Object] &lt;Object&gt;]</span><br><span class=\"line\">     [-NoNewline]</span><br><span class=\"line\">     [-Separator &lt;Object&gt;]</span><br><span class=\"line\">     [-ForegroundColor &lt;ConsoleColor&gt;]</span><br><span class=\"line\">     [-BackgroundColor &lt;ConsoleColor&gt;]</span><br><span class=\"line\">     [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Write-Host 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; Write-Host <span class=\"string\">\"Input\"</span></span><br><span class=\"line\">Input</span><br><span class=\"line\">PS &gt; Write-Host <span class=\"string\">\"no newline test \"</span> -NoNewline  <span class=\"comment\">#写到控制台不增加新线</span></span><br><span class=\"line\">PS &gt; Write-Host (2,4,6,8,10,12) -Separator <span class=\"string\">\", -&gt; \"</span> -ForegroundColor DarkGreen -BackgroundColor White  <span class=\"comment\">#写有不同的文字和背景颜色</span></span><br><span class=\"line\">2, -&gt; 4, -&gt; 6, -&gt; 8, -&gt; 10, -&gt; 12</span><br><span class=\"line\">PS &gt; Write-host <span class=\"string\">\"Script Running now , please waiting it..\"</span> -ForegroundColor Green</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"3-Write-Output-命令-发送指定对象在管道中的下一个命令。\"><a href=\"#3-Write-Output-命令-发送指定对象在管道中的下一个命令。\" class=\"headerlink\" title=\"3.Write-Output 命令 - 发送指定对象在管道中的下一个命令。\"></a>3.Write-Output 命令 - 发送指定对象在管道中的下一个命令。</h4><p>描述: 如果命令为最后一个命令在管道中，对象显示在控制台中。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write-Output</span><br><span class=\"line\">     [-InputObject] &lt;PSObject[]&gt;</span><br><span class=\"line\">     [-NoEnumerate]</span><br><span class=\"line\">     [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Write-output 示例</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; Write-Output &quot;Input&quot; | Get-Member</span><br><span class=\"line\">Input</span><br><span class=\"line\">TypeName:System.String</span><br><span class=\"line\"># Name             MemberType            Definition</span><br><span class=\"line\"># ----             ----------            ----------</span><br><span class=\"line\"># Clone            Method                System.Object Clone(), System.Object ICloneable.Clone()</span><br><span class=\"line\"># CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB), int IComparab...</span><br><span class=\"line\"># Contains         Method                bool Contains(string value)</span><br><span class=\"line\"># CopyTo           Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int co... E</span><br><span class=\"line\">PS &gt; (Write-Output &quot;Input&quot;).startsWith(&quot;I&quot;) #验证第一位开始的字符</span><br><span class=\"line\">True </span><br><span class=\"line\">PS &gt; (Write-Output &quot;Input&quot;).startsWith(&quot;k&quot;)</span><br><span class=\"line\">False</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"4-Write-Warning-命令-写一条警告信息\"><a href=\"#4-Write-Warning-命令-写一条警告信息\" class=\"headerlink\" title=\"4.Write-Warning 命令 - 写一条警告信息\"></a>4.Write-Warning 命令 - 写一条警告信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write-Warning [-Message] &lt;System.String&gt; [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure>\n<p><strong>Write-Warning 基础示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt;  Write-Warning <span class=\"string\">\"This is only a test warning.\"</span>  </span><br><span class=\"line\">PS &gt; <span class=\"string\">\"This is only a test warning.\"</span> | Write-Warning <span class=\"comment\"># 警告: This is only a test warning. # 黄色输出</span></span><br><span class=\"line\"><span class=\"comment\"># 设置$WarningPreference变量并写入警告</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$WarningPreference</span></span><br><span class=\"line\">Continue</span><br><span class=\"line\">PS&gt; Write-Warning <span class=\"string\">\"This is only a test warning.\"</span></span><br><span class=\"line\">This is only a <span class=\"built_in\">test</span> warning.</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$WarningPreference</span> = <span class=\"string\">\"SilentlyContinue\"</span></span><br><span class=\"line\">PS&gt; Write-Warning <span class=\"string\">\"This is only a test warning.\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$WarningPreference</span> = <span class=\"string\">\"Stop\"</span></span><br><span class=\"line\">PS&gt; Write-Warning <span class=\"string\">\"This is only a test warning.\"</span></span><br><span class=\"line\"><span class=\"comment\"># WARNING: This is only a test message.</span></span><br><span class=\"line\"><span class=\"comment\"># Write-Warning : Command execution stopped because the shell variable \"WarningPreference\" is set to Stop. </span></span><br><span class=\"line\"><span class=\"comment\"># At line:1 char:14</span></span><br><span class=\"line\"><span class=\"comment\"># + Write-Warning &lt;&lt;&lt;&lt;  \"This is only a test message.\"</span></span><br><span class=\"line\">PS&gt; Write-Warning <span class=\"string\">\"This is only a test warning.\"</span> -WarningAction Inquire  <span class=\"comment\"># 设置WarningAction参数并写入警告</span></span><br><span class=\"line\"><span class=\"comment\"># 确认</span></span><br><span class=\"line\"><span class=\"comment\"># 是否继续执行此操作?</span></span><br><span class=\"line\"><span class=\"comment\"># [Y] 是(Y)  [A] 全是(A)  [H] 终止命令(H)  [S] 暂停(S)  [?] 帮助 (默认值为“Y”): Y</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"5-Write-Error-命令-将对象写入错误流。\"><a href=\"#5-Write-Error-命令-将对象写入错误流。\" class=\"headerlink\" title=\"5.Write-Error 命令 - 将对象写入错误流。\"></a>5.Write-Error 命令 - 将对象写入错误流。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write-Error [[-Message] &lt;System.String&gt;] [-Category &#123;NotSpecified | OpenError | CloseError | DeviceError | DeadlockDetected</span><br><span class=\"line\">    | InvalidArgument | InvalidData | InvalidOperation | InvalidResult | InvalidType | MetadataError | NotImplemented | NotIns</span><br><span class=\"line\">   talled | ObjectNotFound | OperationStopped | OperationTimeout | SyntaxError | ParserError | PermissionDenied | ResourceBusy</span><br><span class=\"line\">    | ResourceExists | ResourceUnavailable | ReadError | WriteError | FromStdErr | SecurityError | ProtocolError | ConnectionE</span><br><span class=\"line\">   rror | AuthenticationError | LimitsExceeded | QuotaExceeded | NotEnabled&#125;] [-CategoryActivity &lt;System.String&gt;] [-CategoryRe</span><br><span class=\"line\">   ason &lt;System.String&gt;] [-CategoryTargetName &lt;System.String&gt;] [-CategoryTargetType &lt;System.String&gt;] [-ErrorId &lt;System.String&gt;</span><br><span class=\"line\">   ] [-RecommendedAction &lt;System.String&gt;] [-TargetObject &lt;System.Object&gt;] [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure>\n<p><strong>Write-Error 基础示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.错误信息提示并停止默认</span></span><br><span class=\"line\">Write-Error -Message <span class=\"string\">\"[Error] - 错误提示信息\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.使用异常对象写入错误</span></span><br><span class=\"line\"><span class=\"variable\">$E</span> = [System.Exception]@&#123;Source=<span class=\"string\">\"Get-ParameterNames.ps1\"</span>;HelpLink=<span class=\"string\">\"https://go.microsoft.com/fwlink/?LinkID=113425\"</span>&#125;</span><br><span class=\"line\">Write-Error -Exception <span class=\"variable\">$E</span> -Message <span class=\"string\">\"Files not found. The <span class=\"variable\">$Files</span> location does not contain any XML files.\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"6-Write-Progress-命令-在PowerShell命令窗口中显示进度条。\"><a href=\"#6-Write-Progress-命令-在PowerShell命令窗口中显示进度条。\" class=\"headerlink\" title=\"6.Write-Progress 命令 - 在PowerShell命令窗口中显示进度条。\"></a>6.Write-Progress 命令 - 在PowerShell命令窗口中显示进度条。</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">Write-Progress [-Activity] &lt;System.String&gt; [[-Status] &lt;System.String&gt;] [[-Id] &lt;System.Int32&gt;] [-Completed] [-CurrentOperation &lt;System.String&gt;] [-ParentId &lt;System.Int32&gt;] [-PercentComplete &lt;System.Int32&gt;] [-SecondsRemaining &lt;System.Int32&gt;] [-SourceId &lt;System.Int32&gt;] [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure>\n<p><strong>Write-Progress 命令示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example 1: Display the progress of a For loop </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = 1; <span class=\"variable\">$i</span> -le 100; <span class=\"variable\">$i</span>++ )</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">     <span class=\"comment\"># This command displays the progress of a For loop that counts from 1 to 100.</span></span><br><span class=\"line\">     Start-Sleep 1</span><br><span class=\"line\">     Write-Progress -Activity <span class=\"string\">\"Search in Progress\"</span> -Status <span class=\"string\">\"<span class=\"variable\">$i</span>% Complete:\"</span> -PercentComplete <span class=\"variable\">$i</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2: Display the progress of nested For loops </span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"variable\">$I</span> = 1; <span class=\"variable\">$I</span> -lt 101; <span class=\"variable\">$I</span>++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     Write-Progress -Activity Updating -Status <span class=\"string\">'Progress-&gt;'</span> -PercentComplete <span class=\"variable\">$I</span> -CurrentOperation OuterLoop</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"variable\">$j</span> = 1; <span class=\"variable\">$j</span> -lt 101; <span class=\"variable\">$j</span>++ )</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          Write-Progress -Id 1 -Activity Updating -Status <span class=\"string\">'Progress'</span> -PercentComplete <span class=\"variable\">$j</span> -CurrentOperation InnerLoop</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 3: Display the progress while searching for a string</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Get EventLog获取系统日志中的事件，并将它们存储在$events变量中。</span></span><br><span class=\"line\"><span class=\"variable\">$Events</span> = Get-EventLog -LogName system</span><br><span class=\"line\"><span class=\"comment\"># Pipe the events to the ForEach-Object cmdlet.</span></span><br><span class=\"line\"><span class=\"variable\">$Events</span> | ForEach-Object -Begin &#123;</span><br><span class=\"line\">     <span class=\"comment\"># In the Begin block, use Clear-Host to clear the screen.</span></span><br><span class=\"line\">     Clear-Host</span><br><span class=\"line\">     <span class=\"comment\"># Set the $i counter variable to zero.</span></span><br><span class=\"line\">     <span class=\"variable\">$i</span> = 0</span><br><span class=\"line\">     <span class=\"comment\"># Set the $out variable to a empty string.</span></span><br><span class=\"line\">     <span class=\"variable\">$out</span> = <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125; -Process &#123;</span><br><span class=\"line\">     <span class=\"comment\"># In the Process script block search the message property of each incoming object for \"bios\".</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"variable\">$_</span>.message -like <span class=\"string\">\"*bios*\"</span>)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"comment\"># Append the matching message to the out variable.</span></span><br><span class=\"line\">          <span class=\"variable\">$out</span>=<span class=\"variable\">$out</span> + <span class=\"variable\">$_</span>.Message</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\"># Increment the $i counter variable which is used to create the progress bar.</span></span><br><span class=\"line\">     <span class=\"variable\">$i</span> = <span class=\"variable\">$i</span>+1</span><br><span class=\"line\">     <span class=\"comment\"># Use Write-Progress to output a progress bar.</span></span><br><span class=\"line\">     <span class=\"comment\"># The Activity and Status parameters create the first and second lines of the progress bar heading, respectively.</span></span><br><span class=\"line\">     Write-Progress -Activity <span class=\"string\">\"Searching Events\"</span> -Status <span class=\"string\">\"Progress:\"</span> -PercentComplete (<span class=\"variable\">$i</span>/<span class=\"variable\">$Events</span>.count*100)</span><br><span class=\"line\">&#125; -End &#123;</span><br><span class=\"line\">     <span class=\"comment\"># Display the matching messages using the out variable.</span></span><br><span class=\"line\">     <span class=\"variable\">$out</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 4: Display progress for each level of a nested process</span></span><br><span class=\"line\">foreach ( <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> 1..10 ) &#123;</span><br><span class=\"line\">  Write-Progress -Id 0 <span class=\"string\">\"Step <span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\">  foreach ( <span class=\"variable\">$j</span> <span class=\"keyword\">in</span> 1..10 ) &#123;</span><br><span class=\"line\">    Write-Progress -Id 1 -ParentId 0 <span class=\"string\">\"Step <span class=\"variable\">$i</span> - Substep <span class=\"variable\">$j</span>\"</span></span><br><span class=\"line\">    foreach ( <span class=\"variable\">$k</span> <span class=\"keyword\">in</span> 1..10 ) &#123;</span><br><span class=\"line\">       Write-Progress -Id 2  -ParentId 1 <span class=\"string\">\"Step <span class=\"variable\">$i</span> - Substep <span class=\"variable\">$j</span> - iteration <span class=\"variable\">$k</span>\"</span>; start-sleep -m 150</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/1/20210402115922.png\" alt=\"WeiyiGeek.Write-Progress\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Write-Progress</p>\n            </figure>\n<p><br></p>\n<h4 id=\"7-Write-Information-命令-指定PowerShell如何处理命令的信息流数据。\"><a href=\"#7-Write-Information-命令-指定PowerShell如何处理命令的信息流数据。\" class=\"headerlink\" title=\"7.Write-Information 命令  - 指定PowerShell如何处理命令的信息流数据。\"></a>7.Write-Information 命令  - 指定PowerShell如何处理命令的信息流数据。</h4><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Write-Information [-MessageData] &lt;System.Object&gt; [[-Tags] &lt;System.String[]&gt;] [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example 1: Write information for Get- results </span></span><br><span class=\"line\">Write-Information -MessageData <span class=\"string\">\"Got your features!\"</span> -InformationAction Continue</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; Write-Information -MessageData <span class=\"string\">\"Got your features!\"</span> 6&gt; 2.txt</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; cat .\\2.txt</span><br><span class=\"line\">Got your features!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2: Write information and tag it -----------</span></span><br><span class=\"line\"><span class=\"variable\">$message</span> = <span class=\"string\">\"To filter your results for PowerShell, pipe your results to the Where-Object cmdlet.\"</span></span><br><span class=\"line\">Get-WindowsFeature -Name p*</span><br><span class=\"line\">Write-Information -MessageData <span class=\"variable\">$message</span> -Tags <span class=\"string\">\"Instructions\"</span> -InformationAction Continue</span><br><span class=\"line\">  <span class=\"comment\"># Display Name                                            Name                       Install State</span></span><br><span class=\"line\">  <span class=\"comment\"># ------------                                            ----                       -------------</span></span><br><span class=\"line\">  <span class=\"comment\"># [ ] Print and Document Services                         Print-Services                 Available</span></span><br><span class=\"line\">  <span class=\"comment\">#     [ ] Print Server                                    Print-Server                   Available</span></span><br><span class=\"line\">  <span class=\"comment\">#     [ ] Distributed Scan Server                         Print-Scan-Server              Available</span></span><br><span class=\"line\">  <span class=\"comment\">#     [ ] Internet Printing                               Print-Internet                 Available</span></span><br><span class=\"line\">  <span class=\"comment\">#     [ ] LPD Service                                     Print-LPD-Service              Available</span></span><br><span class=\"line\">  <span class=\"comment\"># [ ] Peer Name Resolution Protocol                       PNRP                           Available</span></span><br><span class=\"line\">  <span class=\"comment\"># [X] Windows PowerShell                                  PowerShellRoot                 Installed</span></span><br><span class=\"line\">  <span class=\"comment\">#     [X] Windows PowerShell 5.0                          PowerShell                     Installed</span></span><br><span class=\"line\">  <span class=\"comment\">#     [ ] Windows PowerShell 2.0 Engine                   PowerShell-V2                    Removed</span></span><br><span class=\"line\">  <span class=\"comment\">#     [X] Windows PowerShell ISE                          PowerShell-ISE                 Installed</span></span><br><span class=\"line\">  <span class=\"comment\"># To filter your results for PowerShell, pipe your results to the Where-Object cmdlet.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 3: Write information to a file ------------</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> Test-Info</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Get-Process P*</span><br><span class=\"line\">    Write-Information <span class=\"string\">\"Here you go\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Test-Info 6&gt; Info.txt</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; Get-Content .\\Info.txt</span><br><span class=\"line\">Here you go</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>其它方式补充输出：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$host</span>.UI.WriteDebugLine(<span class=\"string\">\"Debug\"</span>)     <span class=\"comment\">#调试: Debug</span></span><br><span class=\"line\"><span class=\"variable\">$host</span>.UI.WriteErrorLine(<span class=\"string\">\"Error\"</span>)     <span class=\"comment\">#Error</span></span><br><span class=\"line\"><span class=\"variable\">$host</span>.UI.WriteVerboseLine(<span class=\"string\">\"Verbose\"</span>) <span class=\"comment\">#详细信息: Verbose</span></span><br><span class=\"line\"><span class=\"variable\">$host</span>.UI.WriteWarningLine(<span class=\"string\">\"Warning\"</span>) <span class=\"comment\">#警告: Warning</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20191129155734.png\" alt=\"WeiyiGeek.Write\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Write</p>\n            </figure>\n<hr>\n<h2 id=\"0x01-管道与文件输入输出\"><a href=\"#0x01-管道与文件输入输出\" class=\"headerlink\" title=\"0x01 管道与文件输入输出\"></a>0x01 管道与文件输入输出</h2><h3 id=\"Out\"><a href=\"#Out\" class=\"headerlink\" title=\"Out-*\"></a>Out-*</h3><p><strong>基础 cmdlet 一览：</strong></p>\n<ul>\n<li>Out-File: 将输出发送到文件。</li>\n<li>Out-Host: 管道输出内容类似于linux中的more命令,会将对象转换成为字符串还可以控制管道的版式;</li>\n<li>Out-Default: 将输出发送到默认的格式化程序和默认的输出 cmdlet。默认输出格式会将对象转换成为字符串</li>\n<li>Out-Null: 删除输出，不将其发送到控制台。相当于 /dev/null</li>\n<li>Out-Printer: 将输出发送到打印机(进行打印)。</li>\n<li>Out-String: 将对象作为一列字符串发送到主机。</li>\n<li>Out-GridView: 将输出发送到单独窗口中的交互表。</li>\n</ul>\n<p><br></p>\n<h4 id=\"1-Out-File-命令-将管道输出的内容存储到文件\"><a href=\"#1-Out-File-命令-将管道输出的内容存储到文件\" class=\"headerlink\" title=\"1.Out-File 命令 - 将管道输出的内容存储到文件\"></a>1.Out-File 命令 - 将管道输出的内容存储到文件</h4><p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">Out-File [-FilePath] &lt;System.String&gt; [[-Encoding] &#123;ASCII | BigEndianUnicode | Default | OEM | String | Unicode | Unknown | UTF7 | UTF8 | UTF32&#125;] [-Append] [-Force] [-InputObject &lt;System.Management.Automation.PSObject&gt;] [-NoClobber] [-NoNewline] [-Width &lt;System.Int32&gt;] [-Confirm] [-WhatIf] [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Out-File 示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example 1: Send output and create a file</span></span><br><span class=\"line\">dir | Out-File .\\ls.html</span><br><span class=\"line\">Get-Process | Out-File -FilePath .\\Process.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2:防止覆盖现有文件</span></span><br><span class=\"line\">Get-Process | Out-File -FilePath .\\Process.txt -NoClobber</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 3: 以ASCII格式将输出发送到文件</span></span><br><span class=\"line\"><span class=\"variable\">$Procs</span> = Get-Process</span><br><span class=\"line\">Out-File -FilePath .\\Process.txt -InputObject <span class=\"variable\">$Procs</span> -Encoding ASCII -Width 50</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 4: 使用提供程序并将输出发送到文件</span></span><br><span class=\"line\">PS&gt; Set-Location -Path Alias:   <span class=\"comment\"># 设置到本地路径为别名</span></span><br><span class=\"line\">PS&gt; Get-Location</span><br><span class=\"line\">  <span class=\"comment\"># Path</span></span><br><span class=\"line\">  <span class=\"comment\"># ----</span></span><br><span class=\"line\">  <span class=\"comment\"># Alias:\\</span></span><br><span class=\"line\">PS&gt; Get-ChildItem | Out-File -FilePath C:\\TestDir\\AliasNames.txt  <span class=\"comment\"># 此处Get-ChildItem获取的应该是别名相关信息。</span></span><br><span class=\"line\">PS&gt; Get-Content -Path C:\\TestDir\\AliasNames.txt</span><br><span class=\"line\">  <span class=\"comment\"># CommandType     Name</span></span><br><span class=\"line\">  <span class=\"comment\"># -----------     ----</span></span><br><span class=\"line\">  <span class=\"comment\"># Alias           % -&gt; ForEach-Object</span></span><br><span class=\"line\">Set-Location -Path <span class=\"variable\">$home</span>  <span class=\"comment\"># 还原本地路径为家目录</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"2-Out-Host-命令-将管道中的内容输出到终端之中并进行分页预览\"><a href=\"#2-Out-Host-命令-将管道中的内容输出到终端之中并进行分页预览\" class=\"headerlink\" title=\"2.Out-Host 命令 - 将管道中的内容输出到终端之中并进行分页预览\"></a>2.Out-Host 命令 - 将管道中的内容输出到终端之中并进行分页预览</h4><p>描述: 该Out-Hostcmdlet将输出发送到PowerShell主机进行显示。</p>\n<p><strong>基础语法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out-Host</span><br><span class=\"line\">   [-Paging]</span><br><span class=\"line\">   [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">   [&lt;CommonParameters&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Paging参数一次显示一页数据。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Out-Host 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.一次显示一页输出</span></span><br><span class=\"line\">PS &gt; <span class=\"built_in\">pwd</span>; Get-Service | Out-Host -paging </span><br><span class=\"line\">PS &gt; dir | Out-Host -paging </span><br><span class=\"line\">&lt;SPACE&gt; 下一页；&lt;CR&gt; 下一行；Q 退出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.使用变量作为输入</span></span><br><span class=\"line\"><span class=\"comment\"># Out-Host使用InputObject参数指定$io变量并显示历史记录。</span></span><br><span class=\"line\"><span class=\"variable\">$io</span> = Get-History   <span class=\"comment\"># 与 Linux中的history命令相似</span></span><br><span class=\"line\">Out-Host -InputObject <span class=\"variable\">$io</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"3-Out-String-命令-将输入对象转换为字符串\"><a href=\"#3-Out-String-命令-将输入对象转换为字符串\" class=\"headerlink\" title=\"3.Out-String 命令 - 将输入对象转换为字符串\"></a>3.Out-String 命令 - 将输入对象转换为字符串</h4><p>描述:默认情况下会Out-String 累积字符串并将其作为单个字符串返回，但是您可以使用Stream 参数直接指示一次Out-String返回一行，也可以创建字符串数组。当对象操作不太方便时，可以使用此cmdlet像在传统shell中一样搜索和操作字符串输出。</p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out-String</span><br><span class=\"line\">  `[-Stream]`</span><br><span class=\"line\">  [-Width &lt;Int32&gt;]</span><br><span class=\"line\">  [-NoNewline ]</span><br><span class=\"line\">  [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Out-String 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.取当前区域性并将数据转换为字符串</span></span><br><span class=\"line\">PS &gt; ipconfig | Out-String</span><br><span class=\"line\"><span class=\"comment\"># 宽度参数被设置为每行256个字符以防止截断。</span></span><br><span class=\"line\">PS &gt; Out-String -InputObject (ls) -Width 256</span><br><span class=\"line\">  <span class=\"comment\"># 目录: </span></span><br><span class=\"line\">  <span class=\"comment\"># Mode                LastWriteTime         Length Name</span></span><br><span class=\"line\">  <span class=\"comment\"># ----                -------------         ------ ----</span></span><br><span class=\"line\">  <span class=\"comment\"># d-----        2019/7/26      8:45                .android</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; @&#123;TestKey = (<span class=\"string\">'x'</span> * 200)&#125; | Out-String</span><br><span class=\"line\">  <span class=\"comment\"># Name                           Value</span></span><br><span class=\"line\">  <span class=\"comment\"># ----                           -----</span></span><br><span class=\"line\">  <span class=\"comment\"># TestKey                        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; @&#123;TestKey = (<span class=\"string\">'x'</span> * 200)&#125; | Out-String -Width 250</span><br><span class=\"line\">  <span class=\"comment\"># Name                           Value</span></span><br><span class=\"line\">  <span class=\"comment\"># ----                           -----</span></span><br><span class=\"line\">  <span class=\"comment\"># TestKey                        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class=\"line\">  <span class=\"comment\"># xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class=\"line\">  <span class=\"comment\"># xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.将对象数据转换为字符串</span></span><br><span class=\"line\"><span class=\"variable\">$C</span> = Get-Culture | Select-Object -Property *</span><br><span class=\"line\">Out-String -InputObject <span class=\"variable\">$C</span> -Width 100</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.要查看Out-String数组，请将输出存储到变量，然后使用数组索引查看元素。</span></span><br><span class=\"line\"><span class=\"variable\">$str</span> = Out-String -InputObject <span class=\"variable\">$C</span> -Width 100</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.使用对象和使用字符串之间的区别</span></span><br><span class=\"line\"><span class=\"comment\"># Out-String 使用 Stream 参数 将每个对象转换为字符串，而不是将所有对象串联为单个字符串</span></span><br><span class=\"line\">Get-Alias | Out-String -Stream | Select-String -Pattern <span class=\"string\">\"gcm\"</span></span><br><span class=\"line\">Alias           gcm -&gt; Get-Command</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"4-Out-Printer-命令-将输出发送到打印机\"><a href=\"#4-Out-Printer-命令-将输出发送到打印机\" class=\"headerlink\" title=\"4.Out-Printer 命令 - 将输出发送到打印机\"></a>4.Out-Printer 命令 - 将输出发送到打印机</h4><p>描述: 该Out-Printercmdlet将输出发送到默认打印机或另一台打印机（如果已指定）。</p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out-Printer</span><br><span class=\"line\">  [[-Name] &lt;String&gt;]</span><br><span class=\"line\">  [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>Out-Printer 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.将当前目录的内容发送到默认打印机上</span></span><br><span class=\"line\">dir | Out-Printer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.Get-Content获取readme.txt当前目录中文件的内容Out-Printer并将其通过管道传输到 ，然后将其发送到默认打印机。</span></span><br><span class=\"line\">Get-Content -Path ./readme.txt | Out-Printer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.本示例将打印Hello, World到Server01上的Prt-6B彩色打印机。</span></span><br><span class=\"line\"><span class=\"string\">\"Hello, World\"</span> | Out-Printer -Name <span class=\"string\">\"\\\\Server01\\Prt-6B Color\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.本示例将输出的完整版本的“帮助”主题Get-CimInstance打印到默认打印机</span></span><br><span class=\"line\"><span class=\"variable\">$H</span> = Get-Help -Full Get-CimInstance</span><br><span class=\"line\">Out-Printer -InputObject <span class=\"variable\">$H</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"5-Out-Null-命令-隐藏输出而不是将其发送到管道下或显示\"><a href=\"#5-Out-Null-命令-隐藏输出而不是将其发送到管道下或显示\" class=\"headerlink\" title=\"5.Out-Null 命令 - 隐藏输出而不是将其发送到管道下或显示\"></a>5.Out-Null 命令 - 隐藏输出而不是将其发送到管道下或显示</h4><p>基础描述: 所述外空小命令将其输出发送到NULL，实际上从管道中取出，并防止所述输出在屏幕上显示。<br>基础语法: <code>Out-Null [-InputObject &lt;PSObject&gt;] [&lt;CommonParameters&gt;]</code></p>\n<p>Tips : 类似于Linux上执行的数据回收站,<code>例如 echo &quot;我是被销毁的数据&quot; &gt; /dev/null &amp;&amp; cat /dev/null</code></p>\n<p><strong>Out-Null 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.命令Out-Null 或 &gt;$null 吸收输出(删除)结果。</span></span><br><span class=\"line\">dir | Out-Null  </span><br><span class=\"line\">dir &gt; <span class=\"variable\">$null</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"6-Out-Default-命令-将输出发送到默认格式化程序和默认输出cmdlet\"><a href=\"#6-Out-Default-命令-将输出发送到默认格式化程序和默认输出cmdlet\" class=\"headerlink\" title=\"6.Out-Default 命令 - 将输出发送到默认格式化程序和默认输出cmdlet\"></a>6.Out-Default 命令 - 将输出发送到默认格式化程序和默认输出cmdlet</h4><p>描述: PowerShell会自动添加Out-Default到每个管道的末尾,它决定如何格式化和输出对象流。</p>\n<ul>\n<li>1.如果对象流是字符串流，请Out-Default 直接将Out-Host它们通过管道传递给主机，以调用主机提供的相应API。</li>\n<li>2.如果对象流不包含字符串，请Out-Default检查对象以确定要执行的操作。</li>\n<li>3.如果注册的视图是表格视图，Out-Default则将对象流式传输到Format-Table | Out-Host。Format-Table 将对象转换为格式化记录流（由视图定义中的数据驱动），Out-Host并将格式化记录转换为主机接口上的调用。</li>\n</ul>\n<p><strong>基础语法</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out-Default</span><br><span class=\"line\">   [-Transcript]</span><br><span class=\"line\">   [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">   [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>Out-Default 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; ls | Out-Default</span><br><span class=\"line\">PS &gt; &amp; &#123; <span class=\"built_in\">pwd</span>;Get-Service&#125; | Out-Default</span><br><span class=\"line\"><span class=\"comment\"># Status      : Running</span></span><br><span class=\"line\"><span class=\"comment\"># Name        : XLServicePlatform</span></span><br><span class=\"line\"><span class=\"comment\"># DisplayName : 迅雷下载基础服务（用于快速申请磁盘空间及接管浏览器下载请求）</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"7-Out-GridView-将输出发送到单独窗口中的交互表。\"><a href=\"#7-Out-GridView-将输出发送到单独窗口中的交互表。\" class=\"headerlink\" title=\"7.Out-GridView - 将输出发送到单独窗口中的交互表。\"></a>7.Out-GridView - 将输出发送到单独窗口中的交互表。</h4><p>描述: 该 Out-GridView (别名 ogv) cmdlet将命令的输出发送到网格视图窗口(<code>注意需要界面</code>)，在该窗口中输出显示在交互式表中。</p>\n<p>您可以使用表的以下功能来检查数据：</p>\n<ul>\n<li>隐藏，显示和重新排序列</li>\n<li>排序行</li>\n<li>快速筛选</li>\n<li>添加条件过滤器</li>\n<li>复制和粘贴</li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Out-GridView</span><br><span class=\"line\">   [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">   [-Title &lt;String&gt;]</span><br><span class=\"line\">   [-PassThru] | [-OutputMode &lt;OutputModeOption&gt;] | [-Wait]</span><br><span class=\"line\">   [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>Out-GridView 示例</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.将过程输出到网格视图(方便进行排序过滤)</span></span><br><span class=\"line\">Get-Process | Out-GridView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.使用变量将过程输出到网格视图</span></span><br><span class=\"line\"><span class=\"variable\">$P</span> = Get-Process</span><br><span class=\"line\"><span class=\"variable\">$P</span> | Out-GridView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3.在网格视图中显示选定的属性</span></span><br><span class=\"line\">Get-Process | Select-Object -Property Name, WorkingSet, PeakWorkingSet |</span><br><span class=\"line\">  Sort-Object -Property WorkingSet -Descending | Out-GridView</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例4：将输出保存到变量，然后输出网格视图</span></span><br><span class=\"line\">(<span class=\"variable\">$A</span> = Get-ChildItem -Path <span class=\"variable\">$PSHOME</span> -Recurse) | Out-GridView -Title <span class=\"string\">\"Filder Item\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例5：通过`Out-GridView`传递多个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 的PassThru参数Out-GridView使您可以沿管道发送多个项目。该的PASSThru参数等同于使用多的价值输出outputmode 参数。</span></span><br><span class=\"line\">Get-Process | Out-GridView -PassThru | Export-Csv -Path .\\ProcessLog.csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例6：创建Windows到`Out-GridView`的快捷方式</span></span><br><span class=\"line\">pwsh -Command <span class=\"string\">\"Get-Service | Out-GridView -Wait\"</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/1/20210402154921.png\" alt=\"WeiyiGeek.GridView\" title=\"\" class=\"\">\n                <p>WeiyiGeek.GridView</p>\n            </figure>\n<hr>\n<h2 id=\"0x02-格式化转换输出\"><a href=\"#0x02-格式化转换输出\" class=\"headerlink\" title=\"0x02 格式化转换输出\"></a>0x02 格式化转换输出</h2><h3 id=\"Format\"><a href=\"#Format\" class=\"headerlink\" title=\"Format-*\"></a>Format-*</h3><p>描述:可以将管道中的对象进行格式化后字符后进行输出展示,采用<code>Get-Command -Verb format</code>的命令，查看所有以Format打头的命令;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get-Command -Verb format | <span class=\"built_in\">where</span> &#123;<span class=\"variable\">$_</span>.Source -eq <span class=\"string\">\"Microsoft.PowerShell.Utility\"</span> &#125;</span><br><span class=\"line\">CommandType     Name                                               Version    Source</span><br><span class=\"line\">-----------     ----                                               -------    ------</span><br><span class=\"line\">Function        Format-Hex                                         3.1.0.0    Microsoft.PowerShell.Utility</span><br><span class=\"line\">Cmdlet          Format-Custom                                      3.1.0.0    Microsoft.PowerShell.Utility</span><br><span class=\"line\">Cmdlet          Format-List                                        3.1.0.0    Microsoft.PowerShell.Utility</span><br><span class=\"line\">Cmdlet          Format-Table                                       3.1.0.0    Microsoft.PowerShell.Utility</span><br><span class=\"line\">Cmdlet          Format-Wide                                        3.1.0.0    Microsoft.PowerShell.Utility</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Format-List-命令-将输出的格式设置为属性列表，其中每个属性均各占一行显示。\"><a href=\"#Format-List-命令-将输出的格式设置为属性列表，其中每个属性均各占一行显示。\" class=\"headerlink\" title=\"Format-List 命令 - 将输出的格式设置为属性列表，其中每个属性均各占一行显示。\"></a>Format-List 命令 - 将输出的格式设置为属性列表，其中每个属性均各占一行显示。</h4><p>描述: 对于任何一个对象都可以使用<code>Format-List *</code>查看它所有的属性和方法。</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对于任何一个对象都可以使用Format-List * , 查看它所有的属性和方法。</span></span><br><span class=\"line\">Format-List</span><br><span class=\"line\">  [[-Property] &lt;Object[]&gt;]</span><br><span class=\"line\">  [-GroupBy &lt;Object&gt;]</span><br><span class=\"line\">  [-View &lt;string&gt;]</span><br><span class=\"line\">  [-ShowError][-DisplayError]</span><br><span class=\"line\">  [-Force]</span><br><span class=\"line\">  [-Expand &lt;string&gt;]</span><br><span class=\"line\">  [-InputObject &lt;psobject&gt;]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.Format-List基础案例</span></span><br><span class=\"line\">PS &gt; Get-process | Format-List</span><br><span class=\"line\"><span class=\"comment\"># Id      : 3108</span></span><br><span class=\"line\"><span class=\"comment\"># Handles : 196</span></span><br><span class=\"line\"><span class=\"comment\"># CPU     : </span></span><br><span class=\"line\"><span class=\"comment\"># SI      : 0</span></span><br><span class=\"line\"><span class=\"comment\"># Name    : wsctrl</span></span><br><span class=\"line\">PS &gt; Get-process | Format-List -Property Name</span><br><span class=\"line\"><span class=\"comment\"># Name    : wsctrl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.以列表的形式查看对象它所有的属性和方法并以分页的形式输出。</span></span><br><span class=\"line\">PS &gt; ls | Format-List * | Out-Host -Paging</span><br><span class=\"line\"><span class=\"comment\"># PSPath            : Microsoft.PowerShell.Core\\FileSystem::\\.android</span></span><br><span class=\"line\"><span class=\"comment\"># PSParentPath      : Microsoft.PowerShell.Core\\FileSystem::</span></span><br><span class=\"line\"><span class=\"comment\"># PSChildName       : .android</span></span><br><span class=\"line\"><span class=\"comment\"># PSDrive           : C</span></span><br><span class=\"line\"><span class=\"comment\"># PSProvider        : Microsoft.PowerShell.Core\\FileSystem</span></span><br><span class=\"line\"><span class=\"comment\"># PSIsContainer     : True</span></span><br><span class=\"line\"><span class=\"comment\"># Mode              : d-----</span></span><br><span class=\"line\"><span class=\"comment\"># BaseName          : .android</span></span><br><span class=\"line\"><span class=\"comment\"># Target            : &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># LinkType          :</span></span><br><span class=\"line\"><span class=\"comment\"># Name              : .android</span></span><br><span class=\"line\"><span class=\"comment\"># FullName          : \\.android</span></span><br><span class=\"line\"><span class=\"comment\"># Parent            : WeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># Exists            : True</span></span><br><span class=\"line\"><span class=\"comment\"># Root              : C:\\</span></span><br><span class=\"line\"><span class=\"comment\"># Extension         : .android</span></span><br><span class=\"line\"><span class=\"comment\"># CreationTime      : 2019/7/26 8:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># CreationTimeUtc   : 2019/7/26 0:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># LastAccessTime    : 2019/7/26 8:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># LastAccessTimeUtc : 2019/7/26 0:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># LastWriteTime     : 2019/7/26 8:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># LastWriteTimeUtc  : 2019/7/26 0:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># Attributes        : Directory</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;SPACE&gt; 下一页；&lt;CR&gt; 下一行；Q 退出</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Format-Table-命令-将输出的格式设置为表。\"><a href=\"#Format-Table-命令-将输出的格式设置为表。\" class=\"headerlink\" title=\"Format-Table 命令 - 将输出的格式设置为表。\"></a>Format-Table 命令 - 将输出的格式设置为表。</h4><p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Format-Table</span><br><span class=\"line\">  [-AutoSize]</span><br><span class=\"line\">  [-RepeatHeader]</span><br><span class=\"line\">  [-HideTableHeaders]</span><br><span class=\"line\">  [-Wrap]</span><br><span class=\"line\">  [[-Property] &lt;Object[]&gt;]</span><br><span class=\"line\">  [-GroupBy &lt;Object&gt;]</span><br><span class=\"line\">  [-View &lt;String&gt;]</span><br><span class=\"line\">  [-ShowError]</span><br><span class=\"line\">  [-DisplayError]</span><br><span class=\"line\">  [-Force]</span><br><span class=\"line\">  [-Expand &lt;String&gt;]</span><br><span class=\"line\">  [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>基础实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.显示指定的属性</span></span><br><span class=\"line\">PS &gt; Get-process | Format-Table -Property Handle,Name -AutoSize</span><br><span class=\"line\"><span class=\"comment\"># Handle Name                                                 </span></span><br><span class=\"line\"><span class=\"comment\"># ------ ----    </span></span><br><span class=\"line\"><span class=\"comment\"># 5544   ApplicationFrameHost   </span></span><br><span class=\"line\">PS &gt; ls | Format-Table Name,Length,LastWriteTime</span><br><span class=\"line\"><span class=\"comment\"># 查看当前以i打头的进程，并显示进程的名字和其它以”pe”打头，以”64″结尾的进程。</span></span><br><span class=\"line\">PS &gt; Get-Process i* | Format-Table Name,pe*64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.因为属性和属性的内容太多可能不会显示完全，可以使用文本换行参数</span></span><br><span class=\"line\">PS &gt; ls | Format-Table *  </span><br><span class=\"line\"><span class=\"comment\"># 换行显示并且通过-AutoSize参数对列的宽带进行优化，会将属性值的最大宽带作为每一列的宽度</span></span><br><span class=\"line\">PS &gt; ls | Format-Table * -Wrap  -AutoSize </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.脚本块作为属性</span></span><br><span class=\"line\"><span class=\"comment\"># 在Powershell中文件的Length默认以byte作为单位如果你象让它输出时以KB显示</span></span><br><span class=\"line\">PS &gt; ls | Format-Table Name,&#123; [int](<span class=\"variable\">$_</span>.Length/1kb) &#125; -Wrap  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.修改列标题</span></span><br><span class=\"line\"><span class=\"comment\"># 方式1.可以使用Lable设置显示列头为KB而不是[int]($_.Length/1kb)</span></span><br><span class=\"line\">PS &gt; ls | Format-Table Name,@&#123; Expression=&#123;[int](<span class=\"variable\">$_</span>.Length/1kb)&#125;;Label=<span class=\"string\">\"Kb\"</span>&#125; -Wrap </span><br><span class=\"line\"><span class=\"comment\"># Name                 KB</span></span><br><span class=\"line\"><span class=\"comment\"># ----                ----------------------</span></span><br><span class=\"line\"><span class=\"comment\"># .gitconfig                               0</span></span><br><span class=\"line\"><span class=\"comment\"># .viminfo                                 8</span></span><br><span class=\"line\"><span class=\"comment\"># .vimrc                                  11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$column1</span> = @&#123;expression=<span class=\"string\">\"Name\"</span>; width=30;label=<span class=\"string\">\"filename\"</span>; alignment=<span class=\"string\">\"left\"</span>&#125;</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$column2</span> = @&#123;expression=<span class=\"string\">\"LastWriteTime\"</span>; width=40;label=<span class=\"string\">\"last modification\"</span>; alignment=<span class=\"string\">\"right\"</span>&#125;  </span><br><span class=\"line\">PS &gt; ls | Format-Table <span class=\"variable\">$column1</span>, <span class=\"variable\">$column2</span></span><br><span class=\"line\"><span class=\"comment\"># filename          last modification</span></span><br><span class=\"line\"><span class=\"comment\"># --------          -----------------</span></span><br><span class=\"line\"><span class=\"comment\"># .android          2019/7/26 8:45:03</span></span><br><span class=\"line\"><span class=\"comment\"># .config           2019/8/19 17:27:45</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.GroupBy的参数完成分组统计</span></span><br><span class=\"line\">ls | Sort-Object Extension, Name | Format-Table -groupBy Extension</span><br><span class=\"line\"><span class=\"comment\"># 目录: C:Powershell</span></span><br><span class=\"line\"><span class=\"comment\"># Mode                LastWriteTime     Length Name</span></span><br><span class=\"line\"><span class=\"comment\"># ----                -------------     ------ ----</span></span><br><span class=\"line\"><span class=\"comment\"># -a---        2011/11/24     20:26      12060 alias</span></span><br><span class=\"line\"><span class=\"comment\"># .......</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Format-Wide-命令-将对象的格式设置为只能显示每个对象的一个属性的宽表\"><a href=\"#Format-Wide-命令-将对象的格式设置为只能显示每个对象的一个属性的宽表\" class=\"headerlink\" title=\"Format-Wide 命令 - 将对象的格式设置为只能显示每个对象的一个属性的宽表\"></a>Format-Wide 命令 - 将对象的格式设置为只能显示每个对象的一个属性的宽表</h4><p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example 1: 格式化当前目录中的文件名</span></span><br><span class=\"line\">Get-ChildItem | Format-Wide -Column 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2: 设置注册表项名称的格式</span></span><br><span class=\"line\">Get-ChildItem HKCU:\\software\\microsoft | Format-Wide -Property pschildname -AutoSize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 3: 格式错误疑难解答</span></span><br><span class=\"line\">PS /&gt; Get-Date | Format-Wide &#123; <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span> &#125; -DisplayError</span><br><span class=\"line\"><span class=\"comment\">#ERR</span></span><br><span class=\"line\">PS /&gt; Get-Date | Format-Wide &#123; <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span> &#125; -ShowError</span><br><span class=\"line\"><span class=\"comment\"># Failed to evaluate expression \" $_ / $null \".</span></span><br><span class=\"line\"><span class=\"comment\"># + CategoryInfo          : InvalidArgument: (12/21/2018 8:18:01 AM:PSObject) [], RuntimeException</span></span><br><span class=\"line\"><span class=\"comment\"># + FullyQualifiedErrorId : PSPropertyExpressionError</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Format-Custom-命令-使用自定义视图来设置输出的格式\"><a href=\"#Format-Custom-命令-使用自定义视图来设置输出的格式\" class=\"headerlink\" title=\"Format-Custom 命令 - 使用自定义视图来设置输出的格式\"></a>Format-Custom 命令 - 使用自定义视图来设置输出的格式</h4><p>描述: 在格式-定制小命令格式化为以交替的视图定义的命令的输出</p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">Format-Custom</span><br><span class=\"line\">  [[-Property] &lt;Object[]&gt;]</span><br><span class=\"line\">  [-Depth &lt;Int32&gt;]</span><br><span class=\"line\">  [-GroupBy &lt;Object&gt;]</span><br><span class=\"line\">  [-View &lt;String&gt;]</span><br><span class=\"line\">  [-ShowError] <span class=\"comment\">#通过管道发送错误</span></span><br><span class=\"line\">  [-DisplayError]</span><br><span class=\"line\">  [-Force]</span><br><span class=\"line\">  [-Expand &lt;String&gt;]</span><br><span class=\"line\">  [-InputObject &lt;PSObject&gt;]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.默认输入与Format-Custom比较案例</span></span><br><span class=\"line\">Get-Process Winlogon</span><br><span class=\"line\"><span class=\"comment\"># Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName</span></span><br><span class=\"line\"><span class=\"comment\"># -------  ------    -----      -----     ------     --  -- -----------</span></span><br><span class=\"line\"><span class=\"comment\">#     272      12     2900      12024               932   1 winlogon</span></span><br><span class=\"line\">PS D:\\&gt; Get-Process Winlogon | Format-Custom</span><br><span class=\"line\">class Process</span><br><span class=\"line\"><span class=\"comment\"># &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   Id = 932</span></span><br><span class=\"line\"><span class=\"comment\">#   Handles = 272</span></span><br><span class=\"line\"><span class=\"comment\">#   CPU =</span></span><br><span class=\"line\"><span class=\"comment\">#   SI = 1</span></span><br><span class=\"line\"><span class=\"comment\">#   Name = winlogon</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 1: 使用自定义视图格式化输出</span></span><br><span class=\"line\"><span class=\"comment\"># 此命令将有关“Start-Transcript”cmdlet的信息格式化为MyView视图定义的格式，MyView视图是用户创建的自定义视图。</span></span><br><span class=\"line\">Get-Command Start-Transcript | Format-Custom -View MyView</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2: 使用默认视图格式化输出</span></span><br><span class=\"line\"><span class=\"comment\"># 此命令在另一个自定义视图中格式化有关Winlogon进程的信息。</span></span><br><span class=\"line\">Get-Process Winlogon | Format-Custom</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 3: 格式错误疑难解答</span></span><br><span class=\"line\">PC /&gt; Get-Date | Format-Custom DayOfWeek,&#123; <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span> &#125; -DisplayError</span><br><span class=\"line\">class DateTime &#123;</span><br><span class=\"line\">  DayOfWeek = Friday</span><br><span class=\"line\">    <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span>  = <span class=\"comment\">#ERR</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PC /&gt; Get-Date | Format-Custom DayOfWeek,&#123; <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span> &#125; -ShowError</span><br><span class=\"line\">class DateTime &#123;</span><br><span class=\"line\">  DayOfWeek = Friday</span><br><span class=\"line\">    <span class=\"variable\">$_</span> / <span class=\"variable\">$null</span>  =</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># Failed to evaluate expression \" $_ / $null \".</span></span><br><span class=\"line\"><span class=\"comment\"># + CategoryInfo          : InvalidArgument: (12/21/2018 8:01:04 AM:PSObject) [], RuntimeException</span></span><br><span class=\"line\"><span class=\"comment\"># + FullyQualifiedErrorId : PSPropertyExpressionError</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Format-Hex-命令-显示一个文件或其他输入十六进制\"><a href=\"#Format-Hex-命令-显示一个文件或其他输入十六进制\" class=\"headerlink\" title=\"Format-Hex 命令 - 显示一个文件或其他输入十六进制\"></a>Format-Hex 命令 - 显示一个文件或其他输入十六进制</h4><p><strong>基础实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">Format-Hex</span><br><span class=\"line\">  -InputObject &lt;System.Object&gt;</span><br><span class=\"line\">  [-Encoding &#123;ASCII | BigEndianUnicode | Unicode | UTF7 | UTF8 | UTF32&#125;]</span><br><span class=\"line\">  [-Count &lt;long&gt;]</span><br><span class=\"line\">  [-Offset &lt;long&gt;]</span><br><span class=\"line\">  [-Raw]</span><br><span class=\"line\">  [&lt;CommonParameters&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Format-Hex -LiteralPath &lt;System.String[]&gt; [&lt;CommonParameters&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Format-Hex [-Path] &lt;System.String[]&gt; [&lt;CommonParameters&gt;]</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.Format-Hex 将文字或者文件转换成为十六进制数据</span></span><br><span class=\"line\">PS&gt; <span class=\"string\">'WeiyiGeek'</span> | Format-Hex</span><br><span class=\"line\"><span class=\"comment\">#00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F</span></span><br><span class=\"line\"><span class=\"comment\">#00000000   57 65 69 79 69 47 65 65 6B     WeiyiGeek  </span></span><br><span class=\"line\"></span><br><span class=\"line\">PS&gt; Format-Hex -Path .\\File.t7f</span><br><span class=\"line\"><span class=\"comment\"># Path: C:\\Test\\File.t7f</span></span><br><span class=\"line\"><span class=\"comment\"># 00000000   25 50 44 46 2D 31 2E 35 0D 0A 25 B5 B5 B5 B5 0D  %PDF-1.5..%????.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.显示原始十六进制输出</span></span><br><span class=\"line\">PS&gt; 1,2,3,1000 | Format-Hex</span><br><span class=\"line\">Path: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F</span><br><span class=\"line\">00000000   01 02 03 E8 03                                   ...è.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.注意输出的不同。Raw参数将数字显示为4字节值，与Int32类型相同。</span></span><br><span class=\"line\">PS&gt; 1,2,3,1000 | Format-Hex -Raw</span><br><span class=\"line\">Path: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F</span><br><span class=\"line\">00000000   01 00 00 00 02 00 00 00 03 00 00 00 E8 03 00 00  ............è...</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Powershell","path":"api/tags/Powershell.json"}]}