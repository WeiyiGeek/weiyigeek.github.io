{"title":"Shell正则表达式一览表","slug":"编程世界/RegularExpression/Shell正则表达式","date":"2019-08-08T07:36:30.000Z","updated":"2023-01-31T02:29:10.670Z","url":"2019/8-8-350.html","path":"api/articles/2019/8-8-350.html.json","covers":["https://img.weiyigeek.top/2019/1/20190808154647.png","https://img.weiyigeek.top/2019/1/20190808171600.png","https://img.weiyigeek.top/2019/1/20190808172117.png","https://img.weiyigeek.top/2019/1/20190808173037.png","https://img.weiyigeek.top/2019/1/20190808174029.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>Shell正则表达式：使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串，Linux上的一些编辑器就支持<br>例如：<code>vi, grep, awk ,sed,expr</code>等等工具，因为她们有支持正规表示法，所以这些工具就可以使用正规表示法的特殊字符来进行字符串的处理;</p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>不同的软件在使用上有不同的差异:命令不一样但大部分是相同得.</li>\n<li>语系对正则表达式的影响： 由于不同语系的编码数据不同，所以造成不同语系的数据选取结果有所差异。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#以英文大小写为例，zh_CN.big5 及 C 这两种语系差异如下：</span></span><br><span class=\"line\">LANG=C 时： 0 1 2 3 4....ABCDE...Zabcde...z  <span class=\"comment\">#在使用正则表达式[A-Z]时， LANG=C 的情况下，找到的仅仅是大写字符 ABCD..Z。</span></span><br><span class=\"line\">LANG=zh_CN 时：0 1 2 3 4...aAbBcCdD.....zZ  <span class=\"comment\">#而在 LANG=zh_CN 情况下，会选取到 AbBcCdD.....zZ 字符</span></span><br></pre></td></tr></table></figure>\n因此在使用正则表达式时要特别留意语系，由于我们<code>一般使用的兼容与 POSIX 的标准</code>，因此使用 C 语系；</li>\n</ul>\n<p><em>Shell中的正则表达式组成：</em></p>\n<ul>\n<li>字符类 : 特殊字符POSIX类</li>\n<li>特殊符号类 : 元字符</li>\n<li>数量限定符</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190808154647.png\" alt=\"WeiyiGeek.Linux-reg-grep脑图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Linux-reg-grep脑图</p>\n            </figure>\n<hr>\n\n<h4 id=\"Shell正则表达式详解\"><a href=\"#Shell正则表达式详解\" class=\"headerlink\" title=\"Shell正则表达式详解\"></a>Shell正则表达式详解</h4><h5 id=\"特殊符号类\"><a href=\"#特殊符号类\" class=\"headerlink\" title=\"特殊符号类\"></a>特殊符号类</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元字符  描述</span><br><span class=\"line\">\\ 将下一个字符标记符、或一个向后引用、或一个八进制转义符</span><br><span class=\"line\">[]\t匹配[ abc ]中任意一个字符</span><br><span class=\"line\">-\t在[ ]括号里使用，表示字符范围</span><br><span class=\"line\">^ 匹配输入字符串的开始位置，可以在[]和（）外和内使用^[abc]表示以什么开头，而在[^abc]表示除此之外</span><br><span class=\"line\">$ 匹配输入字符串的结束位置，^$ 匹配空行</span><br><span class=\"line\">|\t将两个匹配条件进行逻辑“或”（Or）运算。</span><br></pre></td></tr></table></figure>\n<p>实际案例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.即相当于多种编程语言中都有的\"转义字符\"的概念。</span></span><br><span class=\"line\"><span class=\"comment\">#\"\\\\n\"匹配\\n  \"\\n\"匹配换行符  序列\"\\\\\" 匹配\"\\\" 而\"\\(\"则匹配\"(\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1564362@qq.com\"</span> | grep -oE <span class=\"string\">\"^[0-9]&#123;5,13&#125;@qq\\.com\"</span> --color  <span class=\"comment\">#也可以用\"\"</span></span><br><span class=\"line\">1564362@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.匹配行首 ^ [] ()</span></span><br><span class=\"line\"><span class=\"comment\">#如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span> | grep -oE <span class=\"string\">'^hello'</span> </span><br><span class=\"line\">hello</span><br><span class=\"line\"><span class=\"comment\">#匹配手首行字母不对数字与字母产生效果</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC bcd456BCD\"</span> | grep -oE <span class=\"string\">'^[ab]'</span></span><br><span class=\"line\">a</span><br><span class=\"line\"><span class=\"comment\">#匹配括号里面的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC bcd456BCD\"</span> | grep -E <span class=\"string\">'^(abc)'</span></span><br><span class=\"line\">abc</span><br><span class=\"line\"><span class=\"comment\">#除此abc之外的全部字符</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC bcd456BCD\"</span> | grep -E <span class=\"string\">'[^abc]'</span></span><br><span class=\"line\">123ABC d456BCD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"plain 123 test\"</span> | grep -E <span class=\"string\">'[^a-z]'</span></span><br><span class=\"line\">123</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC\"</span> | grep -E <span class=\"string\">'[A-Z]'</span></span><br><span class=\"line\">ABC</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC bcd456BCD\"</span> | grep -oE <span class=\"string\">'[ab]'</span>  <span class=\"comment\">#有a或者b</span></span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">b</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"abc123ABC acd456BCD\"</span> | grep -E <span class=\"string\">'a[bc]'</span>   <span class=\"comment\">#ab或者ac</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.匹配行尾 $</span></span><br><span class=\"line\">grep -n <span class=\"string\">'^$'</span> regular_express.txt  <span class=\"comment\">#查找空行 (常用)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span> | grep -E <span class=\"string\">'world$'</span>    <span class=\"comment\">#如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。</span></span><br><span class=\"line\">world</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.例如正则表达式(him|her) 匹配\"it belongs to him\"和\"it belongs to her\"，但是不能匹配\"it belongs to them.\"。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello helloe hellaa\"</span> | grep -oE <span class=\"string\">'hel(lo|loe)'</span>    <span class=\"comment\">#并列两个表达式 ^h|^H</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">helloe</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如“z|food”能匹配“z”或“food”，“(z|f)ood”则匹配“zood”或“food”</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"zood food \"</span> | grep -oE <span class=\"string\">'z|food'</span></span><br><span class=\"line\">z</span><br><span class=\"line\">food</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"zood food \"</span> | grep -oE <span class=\"string\">'(z|f)ood'</span></span><br><span class=\"line\">zood</span><br><span class=\"line\">food</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项</em>:</p>\n<ul>\n<li>这个元字符不是所有的软件都支持的</li>\n</ul>\n<p><br></p>\n<h5 id=\"数量限定符\"><a href=\"#数量限定符\" class=\"headerlink\" title=\"数量限定符\"></a>数量限定符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.点 匹配除“\\r\\n”之外的任何单个字符</span><br><span class=\"line\">* 匹配前面的子表达式任意次 (1-n)</span><br><span class=\"line\">+ 匹配前面的子表达式一次或多次(大于等于1次）(1-n)</span><br><span class=\"line\">?\t匹配前面的子表达式零次或一次  (0-1)</span><br><span class=\"line\"><span class=\"comment\">#当该字符紧跟在任何一个其他限制符（*,+,?，&#123;n&#125;，&#123;n,&#125;，&#123;n,m&#125;）后面时，匹配模式是非贪婪的非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;n&#125; n是一个非负整数，匹配确定的n次</span><br><span class=\"line\">&#123;n,&#125; n是一个非负整数，至少匹配n次</span><br><span class=\"line\">&#123;,m&#125;\tn是一个非负整数，至多匹配m次</span><br><span class=\"line\">&#123;n,m&#125; m和n均为非负整数，其中n&lt;=m,最少匹配n次且最多匹配m次。</span><br><span class=\"line\">&#123;i&#125; &#123;i,j&#125;\t匹配指定数目的字符，这些字符是在它之前的表达式定义的</span><br></pre></td></tr></table></figure>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># * = &#123;0,&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -E <span class=\"string\">'*o'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -oE <span class=\"string\">'o*'</span>   <span class=\"comment\">#zo*能匹配“z”，“zo”以及“zoo” , * 等价于&#123;0,&#125;</span></span><br><span class=\"line\">oooo </span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -oE <span class=\"string\">'lo*'</span>   <span class=\"comment\">#特殊点对比</span></span><br><span class=\"line\">l</span><br><span class=\"line\">loooo</span><br><span class=\"line\">l</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -oE <span class=\"string\">'l|o*'</span>  <span class=\"comment\">#特殊点 匹配l或者o零次或者一次</span></span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">oooo</span><br><span class=\"line\">o</span><br><span class=\"line\">l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># + = &#123;1,&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -E <span class=\"string\">'lo+'</span>  <span class=\"comment\">#“zo+”能匹配“zo”以及“zoo”，但不能匹配“z” , + 等价于&#123;1,&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -oE <span class=\"string\">'lo+'</span> </span><br><span class=\"line\">loooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ? = &#123;0,1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"helloooo world\"</span> | grep -oE <span class=\"string\">'lo?'</span>  <span class=\"comment\"># “do(es)?” 可以匹配“do”或“does”中的“do” , ? 等价于&#123;0,1&#125; - 理解这个就可以理解上面的grep -oE 'lo*'</span></span><br><span class=\"line\">l</span><br><span class=\"line\">lo</span><br><span class=\"line\">l</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"does doee\"</span> | grep -E <span class=\"string\">'do(es)?'</span>   <span class=\"comment\"># 匹配括号中的字符0次或者一次</span></span><br><span class=\"line\">does doee</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># . = &#123;1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#匹配除“\\r\\n”之外的任何单个字符，要匹配包括“\\r\\n”在内的任何字符，请使用像“[\\s\\S]”的模式。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n\\rloo\\n\\r\"</span> | grep -oE <span class=\"string\">\"lo.\"</span>  <span class=\"comment\">#loo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\n\\rloo\\n\\r\"</span> | grep -oE <span class=\"string\">\"o.\"</span>   <span class=\"comment\">#oo</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --------------- 分割线--------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如“o&#123;2&#125;”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o，或者o&#123;n&#125;，n的倍数个o</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooes\"</span> | grep -E <span class=\"string\">'o&#123;2&#125;'</span>    <span class=\"comment\">#匹配2次o,或者2的倍数个o</span></span><br><span class=\"line\">oo</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooes\"</span> | grep -oE <span class=\"string\">'o&#123;1&#125;'</span>     <span class=\"comment\">#匹配1次o,或者全部o 特殊</span></span><br><span class=\"line\">o</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fooooood\"</span> | grep -oE <span class=\"string\">'fo&#123;3&#125;'</span></span><br><span class=\"line\">fooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，“o&#123;2,&#125;”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooooes\"</span> | grep -oE <span class=\"string\">'o&#123;1,&#125;'</span>   <span class=\"comment\">#“o&#123;1,&#125;”等价于“o+” ，“o&#123;0,&#125;”则等价于“o*”</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooooes\"</span> | grep -oE <span class=\"string\">'o&#123;0,&#125;'</span></span><br><span class=\"line\">oooo</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fooooood\"</span> | grep -oE <span class=\"string\">'fo&#123;3,&#125;'</span></span><br><span class=\"line\">foooooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，“o&#123;,0&#125;”不能匹配“Bob”中的“o”，“o&#123;,n&#125;”能匹配“foooood”中的所有o</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooooes\"</span> | grep -E <span class=\"string\">'o&#123;,1&#125;'</span>   <span class=\"comment\">#至少匹配1次或者多次</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooooes\"</span> | grep -E <span class=\"string\">'o&#123;,2&#125;'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"dooooo1osadasdoes\"</span> | grep -E <span class=\"string\">\"o&#123;,0&#125;\"</span>  <span class=\"comment\">#就是不匹配o</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fooooood\"</span> | grep -oE <span class=\"string\">'fo&#123;,3&#125;'</span></span><br><span class=\"line\">fooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#例如，“fo&#123;1,3&#125;”将匹配“fooooood”中的前三个o ,“o&#123;0,1&#125;”等价于“o?”</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fooooood\"</span> | grep -oE <span class=\"string\">'fo&#123;1,3&#125;'</span>  <span class=\"comment\">#请注意在逗号和两个数之间不能有空格</span></span><br><span class=\"line\">fooo</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"fooooooooooooood\"</span> | grep -oE <span class=\"string\">'o&#123;1,3&#125;'</span> <span class=\"comment\">#匹配1~3次</span></span><br><span class=\"line\">ooo</span><br><span class=\"line\">ooo</span><br><span class=\"line\">ooo</span><br><span class=\"line\">ooo</span><br><span class=\"line\">oo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#正则表达式A[0-9]&#123;3&#125; 能够匹配字符\"A\"后面跟着正好3个数字字符的串，A123、A348等，但是不匹配A1234</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"A342 A3333 A666 A7894 \"</span> | grep -oE <span class=\"string\">'A[0-9]&#123;3&#125;\\ '</span></span><br><span class=\"line\">A342</span><br><span class=\"line\">A666</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#正则表达式[0-9]&#123;4,6&#125; 匹配连续的任意4个、5个或者6个数字</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"A342 A3333 A666 A7894 A12345 \"</span> | grep -oE <span class=\"string\">'A[0-9]&#123;4,5&#125;\\&gt;'</span>  <span class=\"comment\">#匹配词（word）的结束</span></span><br><span class=\"line\">A3333</span><br><span class=\"line\">A7894</span><br><span class=\"line\">A12345</span><br></pre></td></tr></table></figure></p>\n<p>贪婪模式和非贪婪模式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如，对于字符串“loooo”，“lo?”将匹配单个“lo”，而“o+”将匹配所有“o”。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"loooo\"</span> | grep -oE <span class=\"string\">\"lo+\"</span>  <span class=\"comment\">#loooo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"loooo\"</span> | grep -oE <span class=\"string\">\"lo?\"</span>  <span class=\"comment\">#lo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"loooo helloooo\"</span> | grep -oE <span class=\"string\">\"lo+?\"</span></span><br><span class=\"line\">loooo</span><br><span class=\"line\">l</span><br><span class=\"line\">loooo</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>在 {,} 数量限定符中里面’,’两边不能有空格</li>\n</ul>\n<p><br></p>\n<h5 id=\"位置限定符\"><a href=\"#位置限定符\" class=\"headerlink\" title=\"位置限定符\"></a>位置限定符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* \\&lt; \t匹配词（word）的开始（\\&lt;）</span><br><span class=\"line\">* \\&gt;\t匹配词（word）的结束（\\&gt;）</span><br><span class=\"line\">* \\b\t匹配单词开头和结尾置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）</span><br><span class=\"line\">* \\B\t匹配非单词开头和结尾位置</span><br></pre></td></tr></table></figure>\n<p>基础案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># \\&lt;  \\&gt;</span></span><br><span class=\"line\">例如正则表达式\\&lt;the\\&gt;能够匹配字符串<span class=\"string\">\"for the wise\"</span>中的<span class=\"string\">\"the\"</span>，但是不能匹配字符串<span class=\"string\">\"otherwise\"</span>中的<span class=\"string\">\"the\"</span>。</span><br><span class=\"line\">注意：这个元字符不是所有的软件都支持的。</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"plain 123 test\"</span> | grep -oE <span class=\"string\">'\\&lt;pl'</span> <span class=\"comment\">#pl</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"plain 123 test\"</span> | grep -oE <span class=\"string\">'st\\&gt;'</span> <span class=\"comment\">#st</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># \\b</span></span><br><span class=\"line\">例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”，或者匹配单词开头与结尾</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># echo \"never verb\" | grep -E 'er\\b'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami iss\"</span> | grep -oE <span class=\"string\">'\\bis'</span>      <span class=\"comment\">#匹配头</span></span><br><span class=\"line\">is</span><br><span class=\"line\">is</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami iss\"</span> | grep -oE <span class=\"string\">'is\\b'</span>      <span class=\"comment\">#匹配尾 </span></span><br><span class=\"line\">is</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami iss\"</span> | grep -oE <span class=\"string\">'\\bis\\b'</span>    <span class=\"comment\">#匹配头尾 </span></span><br><span class=\"line\">is</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># \\B</span></span><br><span class=\"line\">例如，“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”，或者匹配非单词开头与结尾</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"verb never\"</span> | grep -E <span class=\"string\">'er\\B'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami issisis\"</span> | grep -E <span class=\"string\">'\\Bis'</span>    <span class=\"comment\">#非开头位置字符is</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami issisis\"</span> | grep -E <span class=\"string\">'is\\B'</span>    <span class=\"comment\">#非结尾位置字符is</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"computer is whoami issisis\"</span> | grep -E <span class=\"string\">'\\Bis\\B'</span>  <span class=\"comment\">#非开头结尾位置字符is</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190808171600.png\" alt=\"WeiyiGeek.非开头和结尾\" title=\"\" class=\"\">\n                <p>WeiyiGeek.非开头和结尾</p>\n            </figure></p>\n<p>匹配位置常用正则表达式：<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190808172117.png\" alt=\"WeiyiGeek.匹配位置\" title=\"\" class=\"\">\n                <p>WeiyiGeek.匹配位置</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数字与非数字 类匹配</span></span><br><span class=\"line\">\\d\t匹配一个数字字符</span><br><span class=\"line\">\\D\t匹配一个非数字字符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字母与非字母 类匹配,类似但不等价于“[A-Za-z0-9_]”，这里的\"单词\"字符使用Unicode字符集</span></span><br><span class=\"line\">\\w\t匹配包括下划线的任何单词字符</span><br><span class=\"line\">\\W\t匹配任何非单词字符</span><br><span class=\"line\"></span><br><span class=\"line\">\\f\t匹配一个换页符 ： 00001100 14 12 0C FF (NP form feed, new page)  换页键</span><br><span class=\"line\">\\n\t匹配一个换行符 ：00001010  12  10  0A   LF (NL line feed, new line)  换行键</span><br><span class=\"line\">\\r\t匹配一个回车符 ：00001101  15  13  0D   CR (carriage <span class=\"built_in\">return</span>)   回车键</span><br><span class=\"line\">\\s\t匹配任何不可见字符，包括空格、制表符、换页符等价于[ \\f\\n\\r\\t\\v]。</span><br><span class=\"line\"></span><br><span class=\"line\">\\S\t匹配任何可见字符 等价于[^ \\f\\n\\r\\t\\v]</span><br><span class=\"line\"></span><br><span class=\"line\">\\t\t匹配一个水平制表符 ： 00001001  11  9  9  HT (horizontal tab)  水平制表符</span><br><span class=\"line\">\\v\t匹配一个垂直制表符 ： 00001011  13  11  0B   VT (vertical tab)  垂直制表符</span><br><span class=\"line\">\\cx\t匹配由x指明的控制字符</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"特殊元字符\"><a href=\"#特殊元字符\" class=\"headerlink\" title=\"特殊元字符\"></a>特殊元字符</h5><p>描述：POSIX类是一个特殊的元字符类集<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#grep 工具预定义（#define） 采用形式 [[:特殊符号:]]\t</span></span><br><span class=\"line\"></span><br><span class=\"line\">[:alnum:]\t代表英文大小写字母及数字</span><br><span class=\"line\">[:alpha:]\t代表英文大小写字母</span><br><span class=\"line\">[:lower:]\t代表小写字母</span><br><span class=\"line\">[:upper:]\t代表大写字母</span><br><span class=\"line\">[:digit:]\t代表数字（Dec默认十进制）</span><br><span class=\"line\">[:xdigit:] 代表16 进位的数字类型</span><br><span class=\"line\">[:punct:]\t代表标点符号</span><br><span class=\"line\">[:graph:]\t代表空白字符以外的其他</span><br><span class=\"line\">[:blank:]\t代表空格和 tab 键</span><br><span class=\"line\">[:<span class=\"built_in\">print</span>:]\t可以被打印出来的任何字符</span><br><span class=\"line\">[:cntrl:]\t键盘上的控制按键，如 CR,LF,TAB,DEL</span><br><span class=\"line\">[:space:]\t任何会产生空白的字符如空格，tab,CR 等</span><br></pre></td></tr></table></figure></p>\n<p>任意建立一个文本并编辑或者以原有的文本做实验皆可<br>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cat &gt; regular_express.txt&lt;&lt;END</span></span><br><span class=\"line\"><span class=\"string\">\"Open Source\"</span> is a good mechanism to develop programs.</span><br><span class=\"line\">apple is my favorite food.Football game is not use feet only.</span><br><span class=\"line\">this dress doesn<span class=\"string\">'t fit me.However, this dress is about $ 3183 dollars.</span></span><br><span class=\"line\"><span class=\"string\">GNU is free air not free beer.Her hair is very beauty.I can'</span>t finish the <span class=\"built_in\">test</span>.</span><br><span class=\"line\">Oh! The soup taste good.motorcycle is cheap than car.This window is clear.</span><br><span class=\"line\">the symbol <span class=\"string\">'*'</span> is represented as start.Oh!My god!The gd software is a library <span class=\"keyword\">for</span> drafting programs.</span><br><span class=\"line\">You are the best is mean you are the no. 1.</span><br><span class=\"line\">The world &lt;Happy&gt; is the same with <span class=\"string\">\"glad\"</span>.</span><br><span class=\"line\">I like dog.google is the best tools <span class=\"keyword\">for</span> search keyword.</span><br><span class=\"line\">goooooogle yes!g</span><br><span class=\"line\">o! go! Let<span class=\"string\">'s go.</span></span><br><span class=\"line\"><span class=\"string\"># I am VBird</span></span><br><span class=\"line\"><span class=\"string\">END</span></span><br></pre></td></tr></table></figure></p>\n<p>示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查找小写字母：</span></span><br><span class=\"line\">grep -n -E <span class=\"string\">'[[:lower:]]'</span> regular_express.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查找数字</span></span><br><span class=\"line\">grep -n -E <span class=\"string\">'[[:digit:]]'</span> regular_express.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#匹配数字和字母</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"verb123never\"</span> | grep -oE <span class=\"string\">'[[:digit:]]'</span></span><br><span class=\"line\">123</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"verb123never\"</span> | grep -oE <span class=\"string\">'[[:alpha:]]'</span> </span><br><span class=\"line\">verb123never</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190808173037.png\" alt=\"WeiyiGeek.lower\" title=\"\" class=\"\">\n                <p>WeiyiGeek.lower</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"特殊符号之分组\"><a href=\"#特殊符号之分组\" class=\"headerlink\" title=\"特殊符号之分组\"></a>特殊符号之分组</h5><p>分组：正则表达式中的分组又称为子表达式，就是把一个正则表达式的全部或部分当做一个整体进行处理，分成一个或多个组<br>其中分组是使用“（）”表示的，进行分组之后“（）”里面的内容就会被当成一个整体来处理，将正则表达式得一部分用括号括起来组成一个单元,可以对整个单元使用数量限定符；</p>\n<p>分组常用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* \\( \\)\t将 \\( 和 \\) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。</span><br></pre></td></tr></table></figure></p>\n<p>分组可以分为<code>捕获组</code>和<code>非捕获组.</code></p>\n<ul>\n<li>捕获组：可以通过从左到右通过其括号对其进行编号，至于后向引用其实就是对匹配组的一种快捷指令<ul>\n<li>用法在0x02会介绍需要注意的是组零永远代表的是整个正则式,通过这样命名保存了匹配分组的匹配的序列,捕获的子序列就可以通过后向引用在表达式中使用了，也可以从匹配器中检索<br>非捕获组：以 (?) 开头的组是纯的非捕获组，它不捕获文本 ，也不针对组合计进行计数</li>\n<li>就是说如果小括号中以?号开头，那么这个分组就不会捕获文本，当然也不会有组的编号，因此也不存在Back 引用</li>\n</ul>\n</li>\n</ul>\n<p>基础案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#echo \"192.168.200.255\" | grep -E '^([0-9]&#123;1,3&#125;\\.)&#123;3&#125;[0-9]&#123;1,3&#125;$</span></span><br><span class=\"line\">192.168.200.255</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>向后引用</strong><br>描述：当一个正则表达式被分组后，每个组将会自动的分配一个组号用于代表该组的表达式，<br>其中，组号的编制规则为：从左到右、以分组的左括号“(”为标志，第一个分组的组号为1，第二个分组的组号为2，以此类推。</p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#匹配“javajava”</span></span><br><span class=\"line\">1）仅仅使用分组实现：(Java)(java)</span><br><span class=\"line\">2）使用后向引用的方法：(java)\\1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javajava\"</span> | grep -oE <span class=\"string\">\"(java)\"</span>  <span class=\"comment\">#对比两种情况</span></span><br><span class=\"line\">java</span><br><span class=\"line\">java</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"javajava\"</span> | grep -oE <span class=\"string\">\"(java)\\1\"</span></span><br><span class=\"line\">javajava</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对比(\\w)\\1和(\\w)(\\w)的区别</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190808174029.png\" alt=\"WeiyiGeek.区别\" title=\"\" class=\"\">\n                <p>WeiyiGeek.区别</p>\n            </figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#\\num  对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"jaava javee\"</span> | grep -oE <span class=\"string\">\"(.)\\1\"</span></span><br><span class=\"line\">aa</span><br><span class=\"line\">ee</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\\nm</span></span><br><span class=\"line\">如果\\nm之前至少有nm个获得子表达式，则nm为向后引用 </span><br><span class=\"line\">如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用</span><br><span class=\"line\"><span class=\"built_in\">echo</span> qwqwqwqwjq | grep -oE <span class=\"string\">\"(qw)\\1jq\"</span>   <span class=\"comment\">#注意特殊点</span></span><br><span class=\"line\">qwqwjq</span><br></pre></td></tr></table></figure>\n<hr>\n\n<h4 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h4><p><strong>过滤空白和注释行</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#特殊应用实例：查看/etc/ssh/sshd_config 文档</span></span><br><span class=\"line\"><span class=\"string\">'^$'</span> : 过滤掉空白行</span><br><span class=\"line\"><span class=\"string\">'^#'</span> ：过滤掉注释行（以<span class=\"comment\">#号开头）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例：-n显示上一次的行数，-v表示反向匹配显示</span></span><br><span class=\"line\">grep -nv <span class=\"string\">'^$'</span> /etc/ssh/sshd_config | grep -nv <span class=\"string\">'^#'</span></span><br><span class=\"line\">1:1:<span class=\"comment\">#   $OpenBSD: sshd_config,v 1.100 2016/08/15 12:32:04 naddy Exp $</span></span><br><span class=\"line\">2:3:<span class=\"comment\"># This is the sshd server system-wide configuration file.  See</span></span><br><span class=\"line\">3:4:<span class=\"comment\"># sshd_config(5) for more information.</span></span><br><span class=\"line\">4:6:<span class=\"comment\"># This sshd was compiled with PATH=/usr/local/bin:/usr/bin</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"RegularExpression","path":"api/tags/RegularExpression.json"},{"name":"Shell","path":"api/tags/Shell.json"}]}