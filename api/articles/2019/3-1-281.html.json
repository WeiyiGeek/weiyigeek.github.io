{"title":"常规笔试算法总结.md","slug":"编程世界/DataAlgorithm/常规笔试算法总结","date":"2019-03-01T05:34:30.000Z","updated":"2020-10-10T02:37:47.513Z","url":"2019/3-1-281.html","path":"api/articles/2019/3-1-281.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<p>栈（Stack）类，用于模拟一种具有后进先出（LIFO）特性的数据结构</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：模拟Stack（栈）- 后进先出(LIFO)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,start = [])</span>:</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> start:</span><br><span class=\"line\">            self.push(i)  <span class=\"comment\">#压栈</span></span><br><span class=\"line\">    <span class=\"comment\">#判断当前栈是否为空（返回 True 或 False）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEmpty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> self.stack</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#往栈的顶部压入一个数据项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self,obj)</span>:</span></span><br><span class=\"line\">        self.stack.append(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#从栈顶弹出一个数据项（并在栈中删除）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.stack:</span><br><span class=\"line\">            print(<span class=\"string\">'警告, Stack 已空！'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.stack.pop()  <span class=\"comment\">#弹栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#显示当前栈顶的一个数据项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.stack:</span><br><span class=\"line\">            print(<span class=\"string\">'警告, Stack 已空！'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>]  <span class=\"comment\">#显示栈顶</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#显示当前栈底的一个数据项</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bottom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.stack:</span><br><span class=\"line\">            print(<span class=\"string\">'警告, Stack 已空！'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">demo = Stack([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">print(demo.top(),demo.bottom())  <span class=\"comment\">#显示栈顶/栈底</span></span><br></pre></td></tr></table></figure>\n<p>栈和队列数据结构</p>\n<ul>\n<li>栈<ul>\n<li>先进后出 </li>\n</ul>\n</li>\n<li>队列<ul>\n<li>先进先出</li>\n</ul>\n</li>\n</ul>\n<p>你还能复述出“迭代”的概念吗？</p>\n<p>所谓迭代，是重复反馈过程的活动，其目的通常是为了接近并到达所需的目标或结果。每一次对过程的重复被称为一次“迭代”，而每一次迭代得到的结果会被用来作为下一次迭代的初始值。</p>\n<p>为什么这么说呢？不要忘了，递归的实现可以是函数自个儿调用自个儿，每次函数的调用都需要进行压栈、弹栈、保存和恢复寄存器的栈操作，所以在这上边是非常消耗时间和空间的。</p>\n<p>另外，如果递归一旦忘记了返回，或者错误的设置了返回条件，那么执行这样的递归代码就会变成一个无底洞：只进不出！所以在写递归代码的时候，千万要记住口诀：递归递归，归去来兮！出来混，总有一天是要还的！<br>递归必须满足哪两个基本条件？<br>答：<br>一、函数调用自身<br>二、设置了正确的返回条件</p>\n<ol>\n<li>请聊一聊递归的优缺点（无需官方陈词，想到什么写什么就可以）</li>\n</ol>\n<p>答：</p>\n<p>优点：</p>\n<p>1）递归的基本思想是把规模大的问题转变成规模小的问题组合，从而简化问题的解决难度（例如汉诺塔游戏）。</p>\n<p>2）有些问题使用递归使得代码简洁易懂（例如你可以很容易的写出前中后序的二叉树遍历的递归算法，但如果要写出相应的非递归算法就不是初学者可以做到的了。）</p>\n<p>缺点：</p>\n<p>1）由于递归的原理是函数调用自个儿，所以一旦大量的调用函数本身空间和时间消耗是“奢侈的”（当然法拉利也奢侈，但还是很多人趋之若鹜）。</p>\n<p>2）初学者很容易错误的设置了返回条件，导致递归代码无休止调用，最终栈溢出，程序崩溃。</p>\n<h4 id=\"1-计算闰年与平年\"><a href=\"#1-计算闰年与平年\" class=\"headerlink\" title=\"1.计算闰年与平年\"></a>1.计算闰年与平年</h4><p>定义闰年的原理:能被4整除但不能被100整除,或者能被400整除都是闰年。<br><!-- more --><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//############# python ###############</span></span><br><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">year = input(<span class=\"string\">\"请输入一个年份：\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> year.<span class=\"built_in\">isdigit</span>():</span><br><span class=\"line\">    year = input(<span class=\"string\">\"输入错误请重新输入年份：\"</span>)</span><br><span class=\"line\">year = <span class=\"keyword\">int</span>(year)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (year % <span class=\"number\">400</span> == <span class=\"number\">0</span>):</span><br><span class=\"line\">    print(year,<span class=\"string\">\" 年是闰年！\"</span>)  # 注意不同类型 的不能进行 + 拼接</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (year % <span class=\"number\">100</span> != <span class=\"number\">0</span>):</span><br><span class=\"line\">        print(year,<span class=\"string\">\" 年是闰年！\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(year,<span class=\"string\">\" 年是平年！\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-水仙花数\"><a href=\"#2-水仙花数\" class=\"headerlink\" title=\"2.水仙花数\"></a>2.水仙花数</h4><p>如果一个 3 位数等于其各位数字的立方和，则称这个数为水仙花数。例如：153 = 1^3 + 5^3 + 3^3，因此 153 就是一个水仙花数;<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############# python ###############</span></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">1000</span>):</span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    temp = i</span><br><span class=\"line\">    <span class=\"keyword\">while</span> temp:</span><br><span class=\"line\">        sum = sum + (temp%<span class=\"number\">10</span>) ** <span class=\"number\">3</span></span><br><span class=\"line\">        temp //= <span class=\"number\">10</span>         <span class=\"comment\"># 注意这里要使用地板除哦~ （即 从最低取开始取值）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> sum == i:</span><br><span class=\"line\">        print(i)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"欧几里德算法\"><a href=\"#欧几里德算法\" class=\"headerlink\" title=\"欧几里德算法\"></a>欧几里德算法</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">#辗转相除法（欧几里德算法|计算大数效率高）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式1：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        temp = x % y</span><br><span class=\"line\">        <span class=\"keyword\">if</span> temp == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> y</span><br><span class=\"line\">        x, y = y, temp</span><br><span class=\"line\">temp = input(<span class=\"string\">\"输入除数与被除数利用,分割如( 319,377 ):\"</span>)</span><br><span class=\"line\">temp = temp.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">x = int(temp[<span class=\"number\">0</span>])</span><br><span class=\"line\">y = int(temp[<span class=\"number\">1</span>])</span><br><span class=\"line\">print(<span class=\"string\">\"%d 与 %d 的最大公约数：\"</span> %(x,y),gcd(x,y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2：递归求出最大公约数（比较耗费资源）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> y:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gcd(y, x % y)  <span class=\"comment\">#精辟呀</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##############计算结果###############</span></span><br><span class=\"line\"><span class=\"comment\"># 输入除数与被除数利用,分割如( 112,145 ):112,106</span></span><br><span class=\"line\"><span class=\"comment\"># 112 与 106 的最大公约数： 2</span></span><br></pre></td></tr></table></figure>\n<p>编码</p>\n<ol start=\"13\">\n<li>编写一个将十进制转换为二进制的函数，要求采用“除2取余”（脑补链接）的方式，结果与调用bin()一样返回字符串形式。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Dec2Bin</span><span class=\"params\">(dec)</span>:</span>  </span><br><span class=\"line\">    temp = []</span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> dec:          <span class=\"comment\">#如当desc 10</span></span><br><span class=\"line\">        quo = dec % <span class=\"number\">2</span></span><br><span class=\"line\">        dec = dec // <span class=\"number\">2</span></span><br><span class=\"line\">        temp.append(quo)  <span class=\"comment\"># [0,0,0,1]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> temp:</span><br><span class=\"line\">        result += str(temp.pop()) <span class=\"comment\">#pop是弹栈 1000 (默认是弹出列表得最后一个元素)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">print(Dec2Bin(<span class=\"number\">62</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n\n<h4 id=\"4-约瑟夫环\"><a href=\"#4-约瑟夫环\" class=\"headerlink\" title=\"4.约瑟夫环\"></a>4.约瑟夫环</h4><p>描述: 将多个人排出一个圆圈并且为每一个人的所站进行编号,当那个人的编号是3的倍数的时候将被剔除,直至剩下最后一人;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo9_ArrayList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.约瑟夫环</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"幸运人的编号 : \"</span> + getLuckly(<span class=\"number\">8</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * getLuckly : 实现约瑟夫环算法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> i : 人数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> Integer</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">getLuckly</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;(); <span class=\"comment\">//创建存储1到num的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num = <span class=\"number\">1</span>; num &lt;= i; num ++)&#123; <span class=\"comment\">//注意位置号从1开始到i结束</span></span><br><span class=\"line\">      list.add(num); <span class=\"comment\">//将每一个人进行标位置号</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>; <span class=\"comment\">// 计算器如果是3的倍数的人将被剔除</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>; list.size() != <span class=\"number\">1</span>; num++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(num == list.size())&#123;</span><br><span class=\"line\">        num = <span class=\"number\">0</span>;  <span class=\"comment\">//如果当索引值等于列表总的个数的时候,重置为0进行下一轮比较剔除</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(count % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        list.remove(num--); <span class=\"comment\">//非常注意这里因为ArrayList删除列表元素后，后面的元素会向前补齐(索引这里需要要索引移动回到删除的位置)</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list.get(<span class=\"number\">0</span>); <span class=\"comment\">//最后只剩下1人打印其的位置号</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//幸运人的编号 : 7</span></span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"算法编程","path":"api/categories/算法编程.json"},{"name":"DataAlgorithm","path":"api/categories/DataAlgorithm.json"}],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}