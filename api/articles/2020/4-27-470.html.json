{"title":"3-Kubernetes入门之Ubuntu安装部署集群","slug":"虚拟云容/云容器/Kubernetes/3-Kubernetes入门之Ubuntu安装部署集群","date":"2020-04-27T10:37:47.000Z","updated":"2023-01-31T02:29:10.471Z","url":"2020/4-27-470.html","path":"api/articles/2020/4-27-470.html.json","covers":["https://img.weiyigeek.top/2020/2/20201107003214.png"],"content":"<p>[toc]</p>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>描述: 为了更好的学习kubernetes以及对照其在不同操作系统之下使用的性能以及差异进行学习扩容，下面将使用Ubuntu进行K8s集群的安装；</p>\n<p>说明: 在上一章之中我们采用 <code>CentOS7 + KUbernetes 1.18.x</code>版本进行了安装演示，本章将使用<code>Ubuntu 20.04 + Kubernetes 1.19.x版本 + IPVS + Ansible</code>等组合工具进行安装演示;</p>\n<p>PS : 虽然K8s 1.20版本宣布将在1.24版本之后将不再维护dockershim，意味着K8s将不直接支持Docker，不过大家不必过于担心。</p>\n<ul>\n<li>一是在1.24版本之前我们仍然可以使用Docker，</li>\n<li>二是dockershim肯定会有人接盘，我们同样可以使用Docker，当前【2022年4月18日 09:46:03】现已可以使用containerd替代ockershim</li>\n<li>三是docker制作的镜像仍然可以在其他Runtime环境中使用，所以大家不必过于恐慌。</li>\n</ul>\n<p>Tips : 经过测试发现本文方法在 docker(19.03.15 - 19.x) 以及 kubernetes(v1.19.10) 构建集群是没有任何问题的。</p>\n<hr>\n<h2 id=\"0x01-基础环境准备\"><a href=\"#0x01-基础环境准备\" class=\"headerlink\" title=\"0x01 基础环境准备\"></a>0x01 基础环境准备</h2><p>描述: 有了<code>2-Kubernetes入门之CentOS安装部署集群.md</code>的基础进行对照在Ubuntu下安装K8s的不同</p>\n<h3 id=\"1-环境说明\"><a href=\"#1-环境说明\" class=\"headerlink\" title=\"1.环境说明\"></a>1.环境说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此处是在VMware进行实际的</span></span><br><span class=\"line\">Ubuntu 20.04 TLS =&gt; 5.4.0-56-generic <span class=\"comment\"># 多台 Ubuntu 20.04 TLS 物理机或者虚拟机(安装流程请自行百度)此处已做基础安全加固(脚本参考)</span></span><br><span class=\"line\">kubernetes 1.19.6</span><br><span class=\"line\">  - kubectl 1.19.6</span><br><span class=\"line\">  - kubeadm 1.19.6</span><br><span class=\"line\">  - kubelet 1.19.6</span><br><span class=\"line\">Docker: 19.03.14</span><br><span class=\"line\"><span class=\"comment\"># Master 节点中一台机器安装</span></span><br><span class=\"line\">Ansible 2.9.6 </span><br><span class=\"line\"><span class=\"comment\"># 假设您所有节点都以做安全加固(SSH端口修改为20211)</span></span><br></pre></td></tr></table></figure>\n<p>主机说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Master</span></span><br><span class=\"line\">weiyigek-107 </span><br><span class=\"line\">weiyigek-108</span><br><span class=\"line\">weiyigek-109</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># worker</span></span><br><span class=\"line\">weiyigek-223</span><br><span class=\"line\">weiyigek-224</span><br><span class=\"line\">weiyigek-225</span><br><span class=\"line\">weiyigek-226</span><br></pre></td></tr></table></figure></p>\n<p>K8s 安装环境基础要求:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 每台机器 2 GB 或更多的 RAM (如果少于这个数字将会影响您应用的运行内存)</span><br><span class=\"line\">* 每台机器 2 CPU 核或更多</span><br><span class=\"line\">* 集群中的所有机器的网络彼此均能相互连接(公网和内网都可以)</span><br><span class=\"line\">* 保证机器主机名/网卡UUID和IP地址以及Mac地址唯一</span><br></pre></td></tr></table></figure></p>\n<p>PS : 注意Master与Node在一致的情况下进行下列安装(我们已做过安全加固)可能安装过程中，读者实践部署的时候有一定的出入(一般是依赖的软件未安装);</p>\n<p><br></p>\n<h3 id=\"2-环境操作\"><a href=\"#2-环境操作\" class=\"headerlink\" title=\"2.环境操作\"></a>2.环境操作</h3><p>Tips 注意: 所有主机都需要按照以下操作流程</p>\n<ul>\n<li><p>Step 1.各Master与工作节点的机器名称及其设置;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *- IP 地址修改 -* &amp; *- 主机 名称修改 -*</span></span><br><span class=\"line\">mkdir ~/init/</span><br><span class=\"line\">tee ~/init/network.sh &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">CURRENT_IP=$(hostname -I | cut -f 1 -d <span class=\"string\">\" \"</span>)</span><br><span class=\"line\">GATEWAY=$(hostname -I | cut -f 1,2,3 -d <span class=\"string\">\".\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$#</span> -lt 3 ]];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> IP Gateway Hostname\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"IP:<span class=\"variable\">$&#123;1&#125;</span> # GATEWAY:<span class=\"variable\">$&#123;2&#125;</span> # HOSTNAME:<span class=\"variable\">$&#123;3&#125;</span>\"</span></span><br><span class=\"line\">sudo sed -i <span class=\"string\">\"s#<span class=\"variable\">$&#123;CURRENT_IP&#125;</span>#<span class=\"variable\">$&#123;1&#125;</span>#g\"</span> /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">sudo sed -i <span class=\"string\">\"s#<span class=\"variable\">$&#123;GATEWAY&#125;</span>.1#<span class=\"variable\">$&#123;2&#125;</span>#g\"</span> /etc/netplan/00-installer-config.yaml</span><br><span class=\"line\">sudo hostnamectl <span class=\"built_in\">set</span>-hostname <span class=\"variable\">$&#123;3&#125;</span> </span><br><span class=\"line\">sudo netplan apply</span><br><span class=\"line\">EOF</span><br><span class=\"line\">chmod +x ~/init/network.sh </span><br><span class=\"line\">sudo ~/init/network.sh 192.168.1.107 192.168.1.1 weiyigeek-107</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.安装依赖软件以及关闭停用不需要使用的软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 卸载系统中自带的 snapd 软件 </span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl stop snapd snapd.socket </span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt autoremove --purge -y snapd </span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt install -y linux-modules-extra-5.4.0-52-generic linux-headers-5.4.0-52</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 关闭自启和停止不用的软件  (Ubuntu server 20.04 最小安装不存在)</span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl stop postfix</span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl disable postfix</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Step 3.各Master与工作节点的机器系统时间的同步与时区设置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置系统时区为中国/上海</span></span><br><span class=\"line\">sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class=\"line\">sudo timedatectl <span class=\"built_in\">set</span>-timezone Asia/Shanghai</span><br><span class=\"line\">sudo bash -c <span class=\"string\">\"echo 'Asia/Shanghai' &gt; /etc/timezone\"</span></span><br><span class=\"line\">sudo ntpdate ntp1.aliyun.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前的 UTC 时间写入硬件时钟</span></span><br><span class=\"line\">sudo timedatectl <span class=\"built_in\">set</span>-local-rtc 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启依赖于系统时间的服务</span></span><br><span class=\"line\">sudo systemctl restart rsyslog.service cron.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统时间</span></span><br><span class=\"line\">date -R</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 4.虚拟内存swap分区关闭<br>Q: 什么安装K8s需要关闭SWAP虚拟内存?<blockquote>\n<p>答: 由于Kubeadm在进行K8s安装init初始化时候会检测系统中是否存在swap如果存在会在安装时候有一个警告，尽管您可以利用ingore来忽略它但是确实对性能有一定的影响；<br>例如有可能我们创建的Pod运行在虚拟内存上面与运行在物理内存中Pod不管是RW效率都比较低;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a &amp;&amp; sudo sed -i <span class=\"string\">'/ swap / s/^\\(.*\\)$/#\\1/g'</span> /etc/fstab &amp;&amp; free  <span class=\"comment\"># CentOS</span></span><br><span class=\"line\">sudo swapoff -a &amp;&amp; sudo sed -i <span class=\"string\">'s/^\\/swap.img\\(.*\\)$/#\\/swap.img \\1/g'</span> /etc/fstab &amp;&amp; free  <span class=\"comment\">#Ubuntu</span></span><br><span class=\"line\"><span class=\"comment\"># 不同点: Ubuntu 没有 CentOS 中的 selinux 所以无需关闭</span></span><br><span class=\"line\"><span class=\"comment\"># setenforce 0 &amp;&amp; sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config </span></span><br><span class=\"line\"><span class=\"comment\"># root@weiyigeek-107:~# free</span></span><br><span class=\"line\"><span class=\"comment\">#               total        used        free      shared  buff/cache   available</span></span><br><span class=\"line\"><span class=\"comment\"># Mem:        8151900      223192     7684708         880      244000     7674408</span></span><br><span class=\"line\"><span class=\"comment\"># Swap:       4194300           0     4194300</span></span><br><span class=\"line\"><span class=\"comment\"># root@weiyigeek-107:~# swapoff -a &amp;&amp; sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab</span></span><br><span class=\"line\"><span class=\"comment\"># root@weiyigeek-107:~# free</span></span><br><span class=\"line\"><span class=\"comment\">#               total        used        free      shared  buff/cache   available</span></span><br><span class=\"line\"><span class=\"comment\"># Mem:        8151900      223312     7684356         880      244232     7674256</span></span><br><span class=\"line\"><span class=\"comment\"># Swap:             0           0           0</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 5.为了能在 kube-proxy 开启并使用 ipvs 我们需要加载以下模块(所有节点执行);<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 安装 ipvs 以及 负载均衡相关依赖</span></span><br><span class=\"line\">sudo apt -y install ipvsadm ipset sysstat conntrack </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) ipvs 内核模块手动加载（所有节点配置）</span></span><br><span class=\"line\">mkdir ~/k8s-init/</span><br><span class=\"line\">tee ~/k8s-init/ipvs.modules &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">modprobe -- ip_vs</span><br><span class=\"line\">modprobe -- ip_vs_lc</span><br><span class=\"line\">modprobe -- ip_vs_lblc</span><br><span class=\"line\">modprobe -- ip_vs_lblcr</span><br><span class=\"line\">modprobe -- ip_vs_rr</span><br><span class=\"line\">modprobe -- ip_vs_wrr</span><br><span class=\"line\">modprobe -- ip_vs_sh</span><br><span class=\"line\">modprobe -- ip_vs_dh</span><br><span class=\"line\">modprobe -- ip_vs_fo</span><br><span class=\"line\">modprobe -- ip_vs_nq</span><br><span class=\"line\">modprobe -- ip_vs_sed</span><br><span class=\"line\">modprobe -- ip_vs_ftp</span><br><span class=\"line\">modprobe -- ip_tables</span><br><span class=\"line\">modprobe -- ip_set</span><br><span class=\"line\">modprobe -- ipt_set</span><br><span class=\"line\">modprobe -- ipt_rpfilter</span><br><span class=\"line\">modprobe -- ipt_REJECT</span><br><span class=\"line\">modprobe -- ipip</span><br><span class=\"line\">modprobe -- xt_set</span><br><span class=\"line\">modprobe -- br_netfilter</span><br><span class=\"line\">modprobe -- nf_conntrack</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 加载内核配置（临时|永久）注意管理员执行</span></span><br><span class=\"line\">chmod 755 ~/k8s-init/ipvs.modules &amp;&amp; sudo bash ~/k8s-init/ipvs.modules</span><br><span class=\"line\">sudo cp ~/k8s-init/ipvs.modules /etc/profile.d/ipvs.modules.sh</span><br><span class=\"line\">lsmod | grep -e ip_vs -e nf_conntrack</span><br><span class=\"line\"><span class=\"comment\"># ip_vs_ftp              16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_sed              16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_nq               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_fo               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_dh               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_sh               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_wrr              16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_rr               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_lblcr            16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_lblc             16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs_lc               16384  0</span></span><br><span class=\"line\"><span class=\"comment\"># ip_vs                 155648  22 ip_vs_rr,ip_vs_dh,ip_vs_lblcr,ip_vs_sh,ip_vs_fo,ip_vs_nq,ip_vs_lblc,ip_vs_wrr,ip_vs_lc,ip_vs_sed,ip_vs_ftp</span></span><br><span class=\"line\"><span class=\"comment\"># nf_nat                 40960  3 iptable_nat,xt_MASQUERADE,ip_vs_ftp</span></span><br><span class=\"line\"><span class=\"comment\"># nf_conntrack          139264  5 xt_conntrack,nf_nat,nf_conntrack_netlink,xt_MASQUERADE,ip_vs</span></span><br><span class=\"line\"><span class=\"comment\"># nf_defrag_ipv6         24576  2 nf_conntrack,ip_vs</span></span><br><span class=\"line\"><span class=\"comment\"># libcrc32c              16384  5 nf_conntrack,nf_nat,btrfs,raid456,ip_vs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 下面的方式 Ubuntu 不能正确执行）</span></span><br><span class=\"line\"><span class=\"comment\"># ls /etc/modules-load.d/</span></span><br><span class=\"line\"><span class=\"comment\"># sudo systemctl enable --now systemd-modules-load.service</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS : kube-proxy 是开启使用IPVS的前提条件必须正常安装;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 6.集群各主机节点内核Kernel参数的调整( Kubernetes 安装前的必须进行该内核参数优化&amp;配置)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.Kernel 参数调整</span></span><br><span class=\"line\">mkdir ~/k8s-init/</span><br><span class=\"line\">cat &gt; ~/k8s-init/kubernetes-sysctl.conf &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"comment\"># iptables 网桥模式开启</span></span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables=1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁用 ipv6 协议</span></span><br><span class=\"line\">net.ipv6.conf.all.disable_ipv6=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用ipv4转发</span></span><br><span class=\"line\">net.ipv4.ip_forward=1 </span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.tcp_tw_recycle=0 #Ubuntu 没有参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁止使用 swap 空间，只有当系统 OOM 时才允许使用它</span></span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\"><span class=\"comment\"># 不检查物理内存是否够用</span></span><br><span class=\"line\">vm.overcommit_memory=1</span><br><span class=\"line\"><span class=\"comment\"># 不启 OOM</span></span><br><span class=\"line\">vm.panic_on_oom=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件系统通知数(根据内存大小和空间大小配置)</span></span><br><span class=\"line\">fs.inotify.max_user_instances=8192</span><br><span class=\"line\">fs.inotify.max_user_watches=1048576</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件件打开句柄数</span></span><br><span class=\"line\">fs.file-max=52706963</span><br><span class=\"line\">fs.nr_open=52706963</span><br><span class=\"line\">net.netfilter.nf_conntrack_max=2310720</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tcp keepalive 相关参数配置</span></span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 600</span><br><span class=\"line\">net.ipv4.tcp_keepalive_probes = 3</span><br><span class=\"line\">net.ipv4.tcp_keepalive_intvl =15</span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 36000</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\">net.ipv4.tcp_max_orphans = 327680</span><br><span class=\"line\">net.ipv4.tcp_orphan_retries = 3</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 16384</span><br><span class=\"line\"><span class=\"comment\"># net.ipv4.ip_conntrack_max = 65536 # Ubuntu 没有参数</span></span><br><span class=\"line\">net.ipv4.tcp_timestamps = 0</span><br><span class=\"line\">net.core.somaxconn = 32768</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo cp ~/k8s-init/kubernetes-sysctl.conf  /etc/sysctl.d/99-kubernetes.conf</span><br><span class=\"line\">sudo sysctl -p /etc/sysctl.d/99-kubernetes.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.nftables 模式切换</span></span><br><span class=\"line\"><span class=\"comment\"># 在 Linux 中 nftables 当前可以作为内核 iptables 子系统的替代品,该工具可以充当兼容性层其行为类似于 iptables 但实际上是在配置 nftables。</span></span><br><span class=\"line\">$ apt list | grep <span class=\"string\">\"nftables/focal\"</span></span><br><span class=\"line\"><span class=\"comment\"># nftables/focal 0.9.3-2 amd64</span></span><br><span class=\"line\"><span class=\"comment\"># python3-nftables/focal 0.9.3-2 amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># iptables 旧模式切换 (nftables 后端与当前的 kubeadm 软件包不兼容, 它会导致重复防火墙规则并破坏 kube-proxy, 所则需要把 iptables 工具切换到“旧版”模式来避免这些问题)</span></span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> iptables /usr/sbin/iptables-legacy</span><br><span class=\"line\">sudo update-alternatives --<span class=\"built_in\">set</span> ip6tables /usr/sbin/ip6tables-legacy</span><br><span class=\"line\"><span class=\"comment\"># sudo update-alternatives --set arptables /usr/sbin/arptables-legacy  # PS: # Ubuntu 20.04 TLS 无该模块</span></span><br><span class=\"line\"><span class=\"comment\"># sudo update-alternatives --set ebtables /usr/sbin/ebtables-legacy    # PS: # Ubuntu 20.04 TLS 无该模块</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 7.主机名称设置与hosts文件添加<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主机名称 以及 其他节点node主机绑定</span></span><br><span class=\"line\"><span class=\"comment\"># hostnamectl set-hostname weiyigeek-107</span></span><br><span class=\"line\">sudo tee -a /etc/hosts &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"comment\"># dev &amp; test  - master</span></span><br><span class=\"line\">192.168.1.107 weiyigeek-107</span><br><span class=\"line\">192.168.1.108 weiyigeek-108</span><br><span class=\"line\">192.168.1.109 weiyigeek-109</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dev &amp; test  - work</span></span><br><span class=\"line\">192.168.1.223 weiyigeek-223</span><br><span class=\"line\">192.168.1.224 weiyigeek-224</span><br><span class=\"line\">192.168.1.225 weiyigeek-225</span><br><span class=\"line\">192.168.1.226 weiyigeek-226</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubernetes-vip (如果不是高可用集群，该IP为Master01的IP)</span></span><br><span class=\"line\">192.168.1.110 weiyigeek-lb-vip.k8s</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 8.设置 rsyslogd 和 systemd journald 记录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -pv /var/<span class=\"built_in\">log</span>/journal/ /etc/systemd/journald.conf.d/</span><br><span class=\"line\">sudo tee /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[Journal]</span><br><span class=\"line\"><span class=\"comment\"># 持久化保存到磁盘</span></span><br><span class=\"line\">Storage=persistent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩历史日志</span></span><br><span class=\"line\">Compress=yes</span><br><span class=\"line\"></span><br><span class=\"line\">SyncIntervalSec=5m</span><br><span class=\"line\">RateLimitInterval=30s</span><br><span class=\"line\">RateLimitBurst=1000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大占用空间 10G</span></span><br><span class=\"line\">SystemMaxUse=10G</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 单日志文件最大 100M</span></span><br><span class=\"line\">SystemMaxFileSize=100M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志保存时间 2 周</span></span><br><span class=\"line\">MaxRetentionSec=2week</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不将日志转发到syslog</span></span><br><span class=\"line\">ForwardToSyslog=no</span><br><span class=\"line\">EOF</span><br><span class=\"line\">cp /etc/systemd/journald.conf.d/99-prophet.conf ~/k8s-init/journald-99-prophet.conf</span><br><span class=\"line\">sudo systemctl restart systemd-journald</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Step 9.在各个主机中安装 docker软件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.卸载旧版本 </span></span><br><span class=\"line\">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.更新apt包索引并安装包以允许apt在HTTPS上使用存储库</span></span><br><span class=\"line\">sudo apt-get install -y \\</span><br><span class=\"line\">  apt-transport-https \\</span><br><span class=\"line\">  ca-certificates \\</span><br><span class=\"line\">  curl \\</span><br><span class=\"line\">  gnupg-agent \\</span><br><span class=\"line\">  software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.添加Docker官方GPG密钥 # -fsSL</span></span><br><span class=\"line\">curl https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.通过搜索指纹的最后8个字符进行密钥验证</span></span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.设置稳定存储库</span></span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">  <span class=\"string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"variable\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">  stable\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.Install Docker Engine 默认最新版本</span></span><br><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">sudo apt-get install -y docker-ce=5:19.03.15~3-0~ubuntu-focal docker-ce-cli=5:19.03.15~3-0~ubuntu-focal containerd.io</span><br><span class=\"line\"><span class=\"comment\"># 7.安装特定版本的Docker引擎，请在repo中列出可用的版本</span></span><br><span class=\"line\"><span class=\"comment\"># $apt-cache madison docker-ce</span></span><br><span class=\"line\"><span class=\"comment\"># docker-ce | 5:20.10.2~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\"># docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\"># 使用第二列中的版本字符串安装特定的版本，例如:5:18.09.1~3-0~ubuntu-xenial。</span></span><br><span class=\"line\"><span class=\"comment\"># $sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#8.将当前用户加入docker用户组然后重新登陆当前用户使得低权限用户</span></span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$&#123;USER&#125;</span> docker</span><br><span class=\"line\">sudo gpasswd -a weiyigeek docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#9.加速器建立</span></span><br><span class=\"line\">mkdir -vp /etc/docker/</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://xlx9erfu.mirror.aliyuncs.com\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"exec-opts\"</span>: [<span class=\"string\">\"native.cgroupdriver=systemd\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"log-driver\"</span>: <span class=\"string\">\"json-file\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log-opts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"max-size\"</span>: <span class=\"string\">\"100m\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"live-restore\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"dns\"</span>: [<span class=\"string\">\"192.168.12.254\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"insecure-registries\"</span>: [<span class=\"string\">\"harbor.weiyigeek.top\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># PS : 私有仓库配置 insecure_registries</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 9.自启与启动</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now docker </span><br><span class=\"line\">sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 10.退出登陆生效</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Step 10.先在 <code>WeiyiGeek-107</code> 机器中下载 kubernetes 集群相关的软件包并准备安装;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) gpg 签名下载导入</span></span><br><span class=\"line\">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class=\"line\"><span class=\"comment\"># (2) Kubernetes 安装源</span></span><br><span class=\"line\">cat &lt;&lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list </span><br><span class=\"line\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 软件包索引更新以及只下载依赖包不安装kubernetes(注意此处建议采用指定版本下载 )</span></span><br><span class=\"line\">apt-cache madison kubelet kubeadm kubectl <span class=\"comment\"># 查看可用的 kubernetes 版本 最新 1.20.1</span></span><br><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt -d install kubelet kubeadm kubectl</span><br><span class=\"line\"></span><br><span class=\"line\">kubelet --version</span><br><span class=\"line\"><span class=\"comment\"># Kubernetes v1.20.1</span></span><br><span class=\"line\">kubeadm version</span><br><span class=\"line\"><span class=\"comment\"># kubeadm version: &amp;version.Info&#123;Major:\"1\", Minor:\"20\", GitVersion:\"v1.20.1\", GitCommit:\"c4d752765b3bbac2237bf87cf0b1c2e307844666\", GitTreeState:\"clean\", BuildDate:\"2020-12-18T12:07:13Z\", GoVersion:\"go1.15.5\", Compiler:\"gc\", Platform:\"linux/amd64\"&#125;</span></span><br><span class=\"line\">kubectl version</span><br><span class=\"line\"><span class=\"comment\"># Client Version: version.Info&#123;Major:\"1\", Minor:\"20\", GitVersion:\"v1.20.1\", GitCommit:\"c4d752765b3bbac2237bf87cf0b1c2e307844666\", GitTreeState:\"clean\", BuildDate:\"2020-12-18T12:09:25Z\", GoVersion:\"go1.15.5\", Compiler:\"gc\", Platform:\"linux/amd64\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以指定版本下载(ls /var/cache/apt/archives/  # 缓存目录) </span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt -d install kubelet=1.19.10-00  kubeadm=1.19.10-00 kubectl=1.19.10-00</span></span><br><span class=\"line\"><span class=\"comment\"># 如果只是下载deb相关包以供离线安装可以使用以下方式安装</span></span><br><span class=\"line\">sudo dpkg -i k8s-1.19.3/*.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) systemd 守护进程重启</span></span><br><span class=\"line\">sudo systemctl daemon-reload  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) Kubelet是以POD的方式运行在容器之中，所以需要设置开机自启</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now kubelet.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 重启 docker</span></span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li>Step 11.关机此时克隆此Master机器为两台新的虚拟机机器;<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 按照上面的清单设置主机名称以及IP地址</span></span><br><span class=\"line\">./network.sh 192.168.1.108 192.168.1.1 weiyigeek-108</span><br><span class=\"line\">./network.sh 192.168.1.109 192.168.1.1 weiyigeek-109</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h2 id=\"0x02-单实例K8s集群部署-v1-20-1\"><a href=\"#0x02-单实例K8s集群部署-v1-20-1\" class=\"headerlink\" title=\"0x02 单实例K8s集群部署(v1.20.1)\"></a>0x02 单实例K8s集群部署(v1.20.1)</h2><h3 id=\"1-Master-节点初始化\"><a href=\"#1-Master-节点初始化\" class=\"headerlink\" title=\"1.Master 节点初始化\"></a>1.Master 节点初始化</h3><ul>\n<li>Step 1.单实例 Master 节点初始化以及集群资源清单配置(注意在前面的环境之下)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 在 WeiyiGeek-107 Master 节点上运行 `kubeadm config print init-defaults` 查看初始化参数</span></span><br><span class=\"line\"><span class=\"comment\"># 方式1.简单命令</span></span><br><span class=\"line\">kubeadm init --kubernetes-version=1.20.1 --apiserver-advertise-address=192.168.1.201 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.2.0.0/16 --pod-network-cidr=10.3.0.0/16</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式2.yaml方式由于此处没做高可以用则APISERVER指向集群的Master节点即weiyigeek-107机器</span></span><br><span class=\"line\">K8SVERSION=1.20.1</span><br><span class=\"line\">k8SIMAGEREP=<span class=\"string\">\"registry.cn-hangzhou.aliyuncs.com/google_containers\"</span></span><br><span class=\"line\">APISERVER_IP=192.168.1.107</span><br><span class=\"line\">APISERVER_NAME=weiyigeek.k8s</span><br><span class=\"line\">APISERVER_PORT=6443</span><br><span class=\"line\">SERVICE_SUBNET=10.244.0.0/16  <span class=\"comment\"># Flannel 网络插件默认网段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意点Token的格式</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; ~/k8s-init/kubeadm-init-config.yaml</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: 123456.httpweiyigeektop</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\"><span class=\"comment\"># API Server 地址与端口</span></span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: <span class=\"variable\">$&#123;APISERVER_IP&#125;</span></span><br><span class=\"line\">  bindPort: <span class=\"variable\">$&#123;APISERVER_PORT&#125;</span></span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: ubuntu</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  <span class=\"built_in\">local</span>:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: <span class=\"variable\">$&#123;k8SIMAGEREP&#125;</span></span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v<span class=\"variable\">$&#123;K8SVERSION&#125;</span></span><br><span class=\"line\">controlPlaneEndpoint: <span class=\"string\">\"<span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>:<span class=\"variable\">$&#123;APISERVER_PORT&#125;</span>\"</span></span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">  podSubnet: <span class=\"variable\">$&#123;SERVICE_SUBNET&#125;</span></span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1    </span><br><span class=\"line\">kind: KubeProxyConfiguration    </span><br><span class=\"line\">featureGates:      </span><br><span class=\"line\">  SupportIPVSProxyMode: <span class=\"literal\">true</span>    </span><br><span class=\"line\">mode: ipvs</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>k8s 集群创建初始命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kubeadm init --upload-certs --config=/home/weiyigeek/k8s-init/kubeadm-init-config.yaml -v 5 | tee kubeadm_init.log</span><br><span class=\"line\"><span class=\"comment\"># W1104 21:29:36.119447  198575 configset.go:348] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span></span><br><span class=\"line\"><span class=\"comment\"># [init] Using Kubernetes version: v1.20.1</span></span><br><span class=\"line\"><span class=\"comment\"># [preflight] Running pre-flight checks</span></span><br><span class=\"line\"><span class=\"comment\"># [preflight] Pulling images required for setting up a Kubernetes cluster</span></span><br><span class=\"line\"><span class=\"comment\"># [preflight] This might take a minute or two, depending on the speed of your internet connection</span></span><br><span class=\"line\"><span class=\"comment\"># [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Using certificateDir folder \"/etc/kubernetes/pki\"</span></span><br><span class=\"line\"><span class=\"comment\"># .....</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet-finalize] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [addons] Applied essential addon: CoreDNS</span></span><br><span class=\"line\"><span class=\"comment\"># [addons] Applied essential addon: kube-proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Kubernetes control-plane has initialized successfully!  # 表示控制化平面初始化成功</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-集群管理\"><a href=\"#2-集群管理\" class=\"headerlink\" title=\"2.集群管理\"></a>2.集群管理</h3><p>描述: 集群管理配置控制平面<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 要开始使用集群，您需要以普通用户的身份运行在 Master 节点 执行以下命令:</span></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">grep <span class=\"string\">\"KUBECONFIG\"</span> ~/.profile || <span class=\"built_in\">echo</span> <span class=\"string\">\"export KUBECONFIG=~/.kube/config\"</span> &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"3-集群网络插件安装\"><a href=\"#3-集群网络插件安装\" class=\"headerlink\" title=\"3.集群网络插件安装\"></a>3.集群网络插件安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署集群 pod 网络可以选择 flannel </span></span><br><span class=\"line\"><span class=\"comment\"># Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:</span></span><br><span class=\"line\"><span class=\"comment\">#   https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br><span class=\"line\"><span class=\"comment\"># 例如 安装 flannel 网络插件</span></span><br><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class=\"line\">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class=\"line\">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class=\"line\">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class=\"line\">serviceaccount/flannel created</span><br><span class=\"line\">configmap/kube-flannel-cfg created</span><br><span class=\"line\">daemonset.apps/kube-flannel-ds created</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"4-工作节点加入\"><a href=\"#4-工作节点加入\" class=\"headerlink\" title=\"4.工作节点加入\"></a>4.工作节点加入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 你现在可以以root身份加入任意数量的控制平面节点，在每个节点上运行以下命令:</span></span><br><span class=\"line\">  kubeadm join weiyigeek.k8s:6443 --token 123456.httpweiyigeektop \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:95e1bb846a09a4523be6c1ee6d3860eec1dcfdd16200efec5177ff25a1de49a6 \\</span><br><span class=\"line\">    --control-plane --certificate-key e05180fc473a8b89e4616412dac61b95cf02808fe1a27f9f72c2be921acc63f8</span><br><span class=\"line\">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span><br><span class=\"line\">As a safeguard, uploaded-certs will be deleted <span class=\"keyword\">in</span> two hours; If necessary, you can use</span><br><span class=\"line\"><span class=\"string\">\"kubeadm init phase upload-certs --upload-certs\"</span> to reload certs afterward.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 你可以加入任意数量的worker节点，在每个worker节点上以root用户运行如下命令:</span></span><br><span class=\"line\">sudo kubeadm join weiyigeek.k8s:6443 --token 123456.httpweiyigeektop --discovery-token-ca-cert-hash sha256:95e1bb846a09a4523be6c1ee6d3860eec1dcfdd16200efec5177ff25a1de49a6</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> weiyigeek:</span><br><span class=\"line\">[preflight] Reading configuration from the cluster...</span><br><span class=\"line\">[preflight] FYI: You can look at this config file with <span class=\"string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet configuration to file <span class=\"string\">\"/var/lib/kubelet/config.yaml\"</span></span><br><span class=\"line\">[kubelet-start] Writing kubelet environment file with flags to file <span class=\"string\">\"/var/lib/kubelet/kubeadm-flags.env\"</span></span><br><span class=\"line\">[kubelet-start] Starting the kubelet</span><br><span class=\"line\">[kubelet-start] Waiting <span class=\"keyword\">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This node has joined the cluster:  # 表示该节点已经加入到集群中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"4-Token-失效重生成\"><a href=\"#4-Token-失效重生成\" class=\"headerlink\" title=\"4.Token 失效重生成\"></a>4.Token 失效重生成</h3><ul>\n<li>Step 1.如果超过24小时 token 失效需要重新生成<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1) Token 生成</span></span><br><span class=\"line\">kubeadm token create</span><br><span class=\"line\"><span class=\"comment\"># 2q41vx.w73xe9nrlqdujawu     ##此处是新token</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2) 获取CA（证书）公钥哈希值</span></span><br><span class=\"line\">openssl x509 -pubkey -<span class=\"keyword\">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class=\"string\">'s/^ .* //'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3) kubernetes 证书目录</span></span><br><span class=\"line\">$ ls /etc/kubernetes/pki</span><br><span class=\"line\">apiserver.crt              apiserver-etcd-client.key  apiserver-kubelet-client.crt  ca.crt  etcd                front-proxy-ca.key      front-proxy-client.key  sa.pub</span><br><span class=\"line\">apiserver-etcd-client.crt  apiserver.key              apiserver-kubelet-client.key  ca.key  front-proxy-ca.crt  front-proxy-client.crt  sa.key</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<h3 id=\"5-节点重置\"><a href=\"#5-节点重置\" class=\"headerlink\" title=\"5.节点重置\"></a>5.节点重置</h3><ul>\n<li>Step 1.当 Kuberneters 集群需要清理重构建需或者节点脱离集群时可以按照以下操作进行:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># - Master 工作负载移除指定集群 例如删除 weiyigeek-223 weiyigeek-222 工作节点</span></span><br><span class=\"line\">kubectl cordon weiyigeek-223 weiyigeek-222 </span><br><span class=\"line\">kubectl delete node weiyigeek-223 weiyigeek-222 </span><br><span class=\"line\"><span class=\"comment\"># 采用 ipvs 进行负载的时候需要清理`ipvsadm --clear`</span></span><br><span class=\"line\">sudo kubeadm reset</span><br><span class=\"line\">sudo rm -rf /etc/cni/net.d/*</span><br><span class=\"line\">sudo rm -rf /etc/kubernetes/pki/*</span><br><span class=\"line\">sudo rm -rf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - Node 工作节点移除k8s集群</span></span><br><span class=\"line\">sudo kubeadm reset</span><br><span class=\"line\">sudo rm -rf /etc/cni/net.d/*</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<p><em>补充说明</em>: 如果是在单master节点设置使用 calico 为 k8s 的CNI网络插件时<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">K8SVERSION=1.20.1</span><br><span class=\"line\">APISERVER_IP=192.168.1.107</span><br><span class=\"line\">APISERVER_NAME=k8s.weiyigeek.top</span><br><span class=\"line\">APISERVER_PORT=6443</span><br><span class=\"line\">SERVICE_SUBNET=10.99.0.0/16</span><br><span class=\"line\">POD_SUBNET=10.100.0.1/16</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;APISERVER_IP&#125;</span> <span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>\"</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化配置(建议各个组件的版本与k8s的版本一致)</span></span><br><span class=\"line\">rm -f ./kubeadm-config.yaml</span><br><span class=\"line\">cat &lt;&lt;EOF &gt; ./kubeadm-config.yaml</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v<span class=\"variable\">$&#123;K8SVERSION&#125;</span></span><br><span class=\"line\">imageRepository: mirrorgcrio</span><br><span class=\"line\"><span class=\"comment\">#imageRepository: registry.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"comment\">#imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"comment\">#imageRepository: gcr.azk8s.cn/google_containers</span></span><br><span class=\"line\">controlPlaneEndpoint: <span class=\"string\">\"<span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>:<span class=\"variable\">$&#123;APISERVER_PORT&#125;</span>\"</span></span><br><span class=\"line\">networking:</span><br><span class=\"line\">  serviceSubnet: <span class=\"string\">\"<span class=\"variable\">$&#123;SERVICE_SUBNET&#125;</span>\"</span></span><br><span class=\"line\">  podSubnet: <span class=\"string\">\"<span class=\"variable\">$&#123;POD_SUBNET&#125;</span>\"</span></span><br><span class=\"line\">  dnsDomain: <span class=\"string\">\"cluster.local\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kubeadm init 根据您服务器网速的情况，您需要等候 3 - 10 分钟</span></span><br><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x03-高可用K8s集群部署-v1-19-6\"><a href=\"#0x03-高可用K8s集群部署-v1-19-6\" class=\"headerlink\" title=\"0x03 高可用K8s集群部署(v1.19.6)\"></a>0x03 高可用K8s集群部署(v1.19.6)</h2><h3 id=\"Step-1-高可用组件安装所有Master节点通过apt安装HAProxy和KeepAlived\"><a href=\"#Step-1-高可用组件安装所有Master节点通过apt安装HAProxy和KeepAlived\" class=\"headerlink\" title=\"Step 1.高可用组件安装所有Master节点通过apt安装HAProxy和KeepAlived\"></a>Step 1.高可用组件安装所有Master节点通过apt安装HAProxy和KeepAlived</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PS: 此时只下载不安装(方便传到没有网络的master节点上)</span></span><br><span class=\"line\">sudo apt -d install keepalived haproxy</span><br><span class=\"line\"><span class=\"comment\"># ~/k8s-init$ scp -P 20211 /home/weiyigeek/k8s-init/High-Availability/* weiyigeek@192.168.1.108:~/k8s-init/</span></span><br><span class=\"line\"><span class=\"comment\"># ~/k8s-init$ scp -P 20211 /home/weiyigeek/k8s-init/High-Availability/* weiyigeek@192.168.1.109:~/k8s-init/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过 dpkg 命令 安装 上一步下载的 deb包</span></span><br><span class=\"line\">/var/cache/apt/archives$ dpkg -i *.deb</span><br><span class=\"line\"><span class=\"comment\"># ~/k8s-init$ ssh -p20211 weiyigeek@192.168.1.108 \"sudo -S dpkg -i ~/k8s-init/*.deb\"</span></span><br><span class=\"line\"><span class=\"comment\"># ~/k8s-init$ ssh -p20211 weiyigeek@192.168.1.109 \"sudo -S dpkg -i ~/k8s-init/*.deb\"</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Step-2-所有Master节点配置HAProxy\"><a href=\"#Step-2-所有Master节点配置HAProxy\" class=\"headerlink\" title=\"Step 2.所有Master节点配置HAProxy\"></a>Step 2.所有Master节点配置HAProxy</h3><p>PS : 详细配置参考HAProxy文档，所有Master节点的HAProxy配置相同<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Ubuntu haproxy 配置文件目录</span></span><br><span class=\"line\"><span class=\"variable\">$ls</span> /etc/haproxy/</span><br><span class=\"line\">errors/      haproxy.cfg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> vim /etc/haproxy/haproxy.cfg</span><br><span class=\"line\">global</span><br><span class=\"line\">  <span class=\"built_in\">log</span> /dev/<span class=\"built_in\">log</span>    local0</span><br><span class=\"line\">  <span class=\"built_in\">log</span> /dev/<span class=\"built_in\">log</span>    local1 notice</span><br><span class=\"line\">  chroot /var/lib/haproxy</span><br><span class=\"line\">  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners</span><br><span class=\"line\">  stats timeout 30s</span><br><span class=\"line\">  user haproxy</span><br><span class=\"line\">  group haproxy</span><br><span class=\"line\">  daemon</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Default SSL material locations</span></span><br><span class=\"line\">  ca-base /etc/ssl/certs</span><br><span class=\"line\">  crt-base /etc/ssl/private</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># See: https://ssl-config.mozilla.org/#server=haproxy&amp;server-version=2.0.3&amp;config=intermediate</span></span><br><span class=\"line\">  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384</span><br><span class=\"line\">  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256</span><br><span class=\"line\">  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets</span><br><span class=\"line\"></span><br><span class=\"line\">defaults</span><br><span class=\"line\">  <span class=\"built_in\">log</span>     global</span><br><span class=\"line\">  mode    http</span><br><span class=\"line\">  option  httplog</span><br><span class=\"line\">  option  dontlognull</span><br><span class=\"line\">  timeout connect 5000</span><br><span class=\"line\">  timeout client  50000</span><br><span class=\"line\">  timeout server  50000</span><br><span class=\"line\">  errorfile 400 /etc/haproxy/errors/400.http</span><br><span class=\"line\">  errorfile 403 /etc/haproxy/errors/403.http</span><br><span class=\"line\">  errorfile 408 /etc/haproxy/errors/408.http</span><br><span class=\"line\">  errorfile 500 /etc/haproxy/errors/500.http</span><br><span class=\"line\">  errorfile 502 /etc/haproxy/errors/502.http</span><br><span class=\"line\">  errorfile 503 /etc/haproxy/errors/503.http</span><br><span class=\"line\">  errorfile 504 /etc/haproxy/errors/504.http</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意: 16443 为VIP的Apiserver-控制平面端口</span></span><br><span class=\"line\">frontend k8s-master</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> 0.0.0.0:16443</span><br><span class=\"line\">  <span class=\"built_in\">bind</span> 127.0.0.1:16443</span><br><span class=\"line\">  mode tcp</span><br><span class=\"line\">  option tcplog</span><br><span class=\"line\">  tcp-request inspect-delay 5s</span><br><span class=\"line\">  default_backend k8s-master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意: Master 节点的默认apiserver是6443端口</span></span><br><span class=\"line\">backend k8s-master</span><br><span class=\"line\">  mode tcp</span><br><span class=\"line\">  option tcplog</span><br><span class=\"line\">  option tcp-check</span><br><span class=\"line\">  balance roundrobin</span><br><span class=\"line\">  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class=\"line\">  server weiyigeek-107 192.168.1.107:6443  check</span><br><span class=\"line\">  server weiyigeek-108 192.168.1.108:6443  check</span><br><span class=\"line\">  server weiyigeek-109 192.168.1.109:6443  check</span><br></pre></td></tr></table></figure></p>\n<p>所有Master节点配置KeepAlived，配置不一样，<code>注意区分注意每个节点的IP和网卡（interface参数）</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -vp /etc/keepalived</span><br><span class=\"line\"><span class=\"comment\"># weiyigeek-107 Master 1</span></span><br><span class=\"line\">sudo tee /etc/keepalived/keepalived.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id LVS_DEVEL</span><br><span class=\"line\">script_user root</span><br><span class=\"line\">  enable_script_security</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_script chk_apiserver &#123;</span><br><span class=\"line\">  script <span class=\"string\">\"/etc/keepalived/check_apiserver.sh\"</span></span><br><span class=\"line\">  interval 5</span><br><span class=\"line\">  weight -5</span><br><span class=\"line\">  fall 2  </span><br><span class=\"line\">  rise 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state MASTER</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    mcast_src_ip 192.168.1.107</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 101</span><br><span class=\"line\">    advert_int 2</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">      auth_type PASS</span><br><span class=\"line\">      auth_pass K8SHA_KA_AUTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">      192.168.1.110</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">#    track_script &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#       chk_apiserver</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># weiyigeek-108 Master 2 =&gt; Backup</span></span><br><span class=\"line\">sudo tee /etc/keepalived/keepalived.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id LVS_DEVEL</span><br><span class=\"line\">script_user root</span><br><span class=\"line\">  enable_script_security</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_script chk_apiserver &#123;</span><br><span class=\"line\">  script <span class=\"string\">\"/etc/keepalived/check_apiserver.sh\"</span></span><br><span class=\"line\">  interval 5</span><br><span class=\"line\">  weight -5</span><br><span class=\"line\">  fall 2  </span><br><span class=\"line\">  rise 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    mcast_src_ip 192.168.1.108</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 101</span><br><span class=\"line\">    advert_int 2</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">      auth_type PASS</span><br><span class=\"line\">      auth_pass K8SHA_KA_AUTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">      192.168.1.110</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">#    track_script &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#       chk_apiserver</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># weiyigeek-108 Master 3 =&gt; Backup</span></span><br><span class=\"line\">sudo tee /etc/keepalived/keepalived.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">! Configuration File <span class=\"keyword\">for</span> keepalived</span><br><span class=\"line\">global_defs &#123;</span><br><span class=\"line\">  router_id LVS_DEVEL</span><br><span class=\"line\">script_user root</span><br><span class=\"line\">  enable_script_security</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_script chk_apiserver &#123;</span><br><span class=\"line\">  script <span class=\"string\">\"/etc/keepalived/check_apiserver.sh\"</span></span><br><span class=\"line\">  interval 5</span><br><span class=\"line\">  weight -5</span><br><span class=\"line\">  fall 2  </span><br><span class=\"line\">  rise 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vrrp_instance VI_1 &#123;</span><br><span class=\"line\">    state BACKUP</span><br><span class=\"line\">    interface ens160</span><br><span class=\"line\">    mcast_src_ip 192.168.1.109</span><br><span class=\"line\">    virtual_router_id 51</span><br><span class=\"line\">    priority 101</span><br><span class=\"line\">    advert_int 2</span><br><span class=\"line\">    authentication &#123;</span><br><span class=\"line\">      auth_type PASS</span><br><span class=\"line\">      auth_pass K8SHA_KA_AUTH</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    virtual_ipaddress &#123;</span><br><span class=\"line\">      192.168.1.110</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">#    track_script &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#       chk_apiserver</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Step-3-配置KeepAlived健康检查文件\"><a href=\"#Step-3-配置KeepAlived健康检查文件\" class=\"headerlink\" title=\"Step 3.配置KeepAlived健康检查文件\"></a>Step 3.配置KeepAlived健康检查文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tee /etc/keepalived/check_apiserver.sh &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">err=0</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> $(seq 1 3)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  check_code=$(pgrep haproxy)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [[ <span class=\"variable\">$check_code</span> == <span class=\"string\">\"\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    err=$(expr <span class=\"variable\">$err</span> + 1)</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">    <span class=\"built_in\">continue</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    err=0</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$err</span> != <span class=\"string\">\"0\"</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"systemctl stop keepalived\"</span></span><br><span class=\"line\">  /usr/bin/systemctl stop keepalived</span><br><span class=\"line\">  <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span> 0</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo chmod +x /etc/keepalived/check_apiserver.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份高可用相关配置文件</span></span><br><span class=\"line\">mkdir ~/k8s-init/haproxy &amp;&amp; cp /etc/haproxy/haproxy.cfg ~/k8s-init/haproxy </span><br><span class=\"line\">mkdir ~/k8s-init/keepalived &amp;&amp; cp /etc/keepalived/keepalived.conf /etc/keepalived/check_apiserver.sh ~/k8s-init/keepalived</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Step-4-启动haproxy和keepalived以及测试VIP\"><a href=\"#Step-4-启动haproxy和keepalived以及测试VIP\" class=\"headerlink\" title=\"Step 4.启动haproxy和keepalived以及测试VIP\"></a>Step 4.启动haproxy和keepalived以及测试VIP</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自启动并立即启动</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now haproxy</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now keepalived</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># VIP 漂移测试</span></span><br><span class=\"line\">~$ ps aux | grep <span class=\"string\">\"haproxy\"</span></span><br><span class=\"line\">root         892  0.0  0.1  15600  9236 ?        Ss   10:39   0:00 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock</span><br><span class=\"line\">haproxy      893  0.0  0.0 531724  3480 ?        Sl   10:39   0:02 /usr/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock</span><br><span class=\"line\"></span><br><span class=\"line\">weiyigeek-107:$ ip addr</span><br><span class=\"line\">2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:50:56:8a:e8:db brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.1.107/24 brd 192.168.1.255 scope global ens160</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet 192.168.1.110/32 scope global ens160  <span class=\"comment\"># 可以看见该VIP在weiyigeek-107</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\"></span><br><span class=\"line\">weiyigeek-107:~$ systemctl stop keepalived.service  <span class=\"comment\"># 现在 weiyigeek-107 停止 keepalived.service</span></span><br><span class=\"line\">weiyigeek-107:~$ ip addr | grep <span class=\"string\">\"192.168.1.110\"</span>    <span class=\"comment\"># 此时会发现 weiyigeek-107 已经不存在该VIP了</span></span><br><span class=\"line\">weiyigeek-107:~$ ssh -p20211 weiyigeek@192.168.1.109 <span class=\"string\">\"ip addr | grep '192.168.1.110'\"</span> <span class=\"comment\"># 会发现漂移到weiyigeek-109的master节点的机器上</span></span><br><span class=\"line\">  inet 192.168.1.110/32 scope global ens160</span><br><span class=\"line\">weiyigeek-107:~$ ping 192.168.1.110               <span class=\"comment\"># ping 通信正常</span></span><br><span class=\"line\"><span class=\"comment\"># PING 192.168.1.110 (192.168.1.110) 56(84) bytes of data.</span></span><br><span class=\"line\"><span class=\"comment\"># 64 bytes from 192.168.1.110: icmp_seq=1 ttl=64 time=0.218 ms</span></span><br></pre></td></tr></table></figure>\n<p>PS : 至此基于Haproxy与keepalive实现的高可用已经OK了;</p>\n<p><br></p>\n<h3 id=\"Step-5-集群安装其它指定版本\"><a href=\"#Step-5-集群安装其它指定版本\" class=\"headerlink\" title=\"Step 5.集群安装其它指定版本\"></a>Step 5.集群安装其它指定版本</h3><p>PS : 在基础环境的安装中我们采用了 <code>docker 1.20.x 以及 kubernetes 1.20.x</code>考虑到 k8s 在 1.23.x 版本之后将会丢弃docker而使用其它的CRI-O, 此处为了集群环境的稳定性将原本docker以及kubernetes版本删除，分别安装1.19.x版本;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 停止服务</span></span><br><span class=\"line\">sudo systemctl stop docker.service kubelet.service docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) docker 容器卸载 &amp;&amp; K8s 卸载</span></span><br><span class=\"line\">sudo apt-get remove docker-ce docker-ce-cli containerd.io kubectl kubeadm kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 查看 docker 以及 k8s 版本</span></span><br><span class=\"line\">sudo apt-cache madison docker-ce docker-ce-cli kubelet</span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -d install docker-ce=5:19.03.14~3-0~ubuntu-focal docker-ce-cli=5:19.03.14~3-0~ubuntu-focal containerd.io  # Download complete and in download only mode</span></span><br><span class=\"line\"><span class=\"comment\"># sudo dpkg -i /var/cache/apt/archives/*.deb</span></span><br><span class=\"line\">sudo apt-get install docker-ce=5:19.03.14~3-0~ubuntu-focal docker-ce-cli=5:19.03.14~3-0~ubuntu-focal containerd.io -y</span><br><span class=\"line\">sudo apt install kubelet=1.19.6-00 kubeadm=1.19.6-00 kubectl=1.19.6-00 -y</span><br><span class=\"line\">$ kubeadm version</span><br><span class=\"line\"><span class=\"comment\"># kubeadm version: &amp;version.Info&#123;Major:\"1\", Minor:\"19\", GitVersion:\"v1.19.6\", GitCommit:\"1e11e4a2108024935ecfcb2912226cedeafd99df\", GitTreeState:\"clean\", BuildDate:\"2020-10-14T12:47:53Z\", GoVersion:\"go1.15.2\", Compiler:\"gc\", Platform:\"linux/amd64\"&#125;</span></span><br><span class=\"line\">$ kubelet --version</span><br><span class=\"line\"><span class=\"comment\"># Kubernetes v1.19.6</span></span><br><span class=\"line\">$ kubectl version</span><br><span class=\"line\"><span class=\"comment\"># Client Version: version.Info&#123;Major:\"1\", Minor:\"19\", GitVersion:\"v1.19.6\", GitCommit:\"1e11e4a2108024935ecfcb2912226cedeafd99df\", GitTreeState:\"clean\", BuildDate:\"2020-10-14T12:50:19Z\", GoVersion:\"go1.15.2\", Compiler:\"gc\", Platform:\"linux/amd64\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 自启并启动服务</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now docker </span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br><span class=\"line\">sudo systemctl restart docker kubelet</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Step-6-集群初始化的yaml文件\"><a href=\"#Step-6-集群初始化的yaml文件\" class=\"headerlink\" title=\"Step 6.集群初始化的yaml文件\"></a>Step 6.集群初始化的yaml文件</h3><p>描述: kubeadm 可以打印出初始化以及节点加入的配置模板;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 初始化</span></span><br><span class=\"line\">$ kubeadm config <span class=\"built_in\">print</span> init-defaults</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: abcdef.0123456789abcdef</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 1.2.3.4</span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: ubuntu</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  <span class=\"built_in\">local</span>:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: k8s.gcr.io</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v1.19.0</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 节点加入</span></span><br><span class=\"line\">$ kubeadm config <span class=\"built_in\">print</span> join-defaults</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">caCertPath: /etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">discovery:</span><br><span class=\"line\">  bootstrapToken:</span><br><span class=\"line\">    apiServerEndpoint: kube-apiserver:6443</span><br><span class=\"line\">    token: abcdef.0123456789abcdef</span><br><span class=\"line\">    unsafeSkipCAVerification: <span class=\"literal\">true</span></span><br><span class=\"line\">  timeout: 5m0s</span><br><span class=\"line\">  tlsBootstrapToken: abcdef.0123456789abcdef</span><br><span class=\"line\">kind: JoinConfiguration</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: ubuntu</span><br><span class=\"line\">  taints: null</span><br></pre></td></tr></table></figure></p>\n<p>K8s 集群初始化配置文件(<code>~/k8s-init/kubeadm-init-config.yaml</code>)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 注意 : Token的格式以及Pod子网的网段 (Calico)和ipvs的支持</span></span><br><span class=\"line\">K8SVERSION=1.19.6</span><br><span class=\"line\">k8SIMAGEREP=<span class=\"string\">\"registry.cn-hangzhou.aliyuncs.com/google_containers\"</span></span><br><span class=\"line\">APISERVER_NAME=weiyigeek-lb-vip.k8s</span><br><span class=\"line\">APISERVER_IP=192.168.1.110</span><br><span class=\"line\">APISERVER_PORT=16443</span><br><span class=\"line\">LOCALAPIVERVER_NAME=weiyigeek-107</span><br><span class=\"line\">LOCALAPISERVER_IP=192.168.1.107</span><br><span class=\"line\">LOCALAPISERVER_PORT=6443</span><br><span class=\"line\">SERVICE_SUBNET=172.16.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; ~/k8s-init/kubeadm-init-config.yaml</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">bootstrapTokens:</span><br><span class=\"line\">- groups:</span><br><span class=\"line\">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class=\"line\">  token: 20w21w.httpweiyigeektop</span><br><span class=\"line\">  ttl: 24h0m0s</span><br><span class=\"line\">  usages:</span><br><span class=\"line\">  - signing</span><br><span class=\"line\">  - authentication</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: <span class=\"variable\">$&#123;LOCALAPISERVER_IP&#125;</span></span><br><span class=\"line\">  bindPort: <span class=\"variable\">$&#123;LOCALAPISERVER_PORT&#125;</span></span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  name: <span class=\"variable\">$&#123;LOCALAPIVERVER_NAME&#125;</span></span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">---</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - <span class=\"variable\">$&#123;APISERVER_IP&#125;</span></span><br><span class=\"line\">  timeoutForControlPlane: 4m0s</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">controllerManager: &#123;&#125;</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  <span class=\"built_in\">local</span>:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\">imageRepository: <span class=\"variable\">$&#123;k8SIMAGEREP&#125;</span></span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">kubernetesVersion: v<span class=\"variable\">$&#123;K8SVERSION&#125;</span></span><br><span class=\"line\">controlPlaneEndpoint: <span class=\"variable\">$&#123;APISERVER_NAME&#125;</span>:<span class=\"variable\">$&#123;APISERVER_PORT&#125;</span></span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br><span class=\"line\">  podSubnet: <span class=\"variable\">$&#123;SERVICE_SUBNET&#125;</span></span><br><span class=\"line\">scheduler: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1    </span><br><span class=\"line\">kind: KubeProxyConfiguration    </span><br><span class=\"line\">featureGates:      </span><br><span class=\"line\">  SupportIPVSProxyMode: <span class=\"literal\">true</span>    </span><br><span class=\"line\">mode: ipvs</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 初始化Master节点控制平面以及Worker加入的参数生成(# 根据您服务器网速的情况，您需要等候 3 - 10 分钟建议采用下面备注中的操作)</span></span><br><span class=\"line\">sudo kubeadm init --config=/home/weiyigeek/k8s-init/kubeadm-init-config.yaml --upload-certs | tee kubeadm_init.log</span><br><span class=\"line\"><span class=\"comment\"># [certs] Using certificateDir folder \"/etc/kubernetes/pki\"</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"ca\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"apiserver\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] apiserver serving cert is signed for DNS names [weiyigeek-107 weiyigeek-lb-vip.k8s kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.107 192.168.1.110]</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"apiserver-kubelet-client\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"front-proxy-ca\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"front-proxy-client\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"etcd/ca\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"etcd/server\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] etcd/server serving cert is signed for DNS names [weiyigeek-107 localhost] and IPs [192.168.1.107 127.0.0.1 ::1]</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"etcd/peer\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] etcd/peer serving cert is signed for DNS names [weiyigeek-107 localhost] and IPs [192.168.1.107 127.0.0.1 ::1]</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"etcd/healthcheck-client\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"apiserver-etcd-client\" certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [certs] Generating \"sa\" key and public key</span></span><br><span class=\"line\"><span class=\"comment\"># [kubeconfig] Using kubeconfig folder \"/etc/kubernetes\"</span></span><br><span class=\"line\"><span class=\"comment\"># [endpoint] WARNING: port specified in controlPlaneEndpoint overrides bindPort in the controlplane address</span></span><br><span class=\"line\"><span class=\"comment\"># [kubeconfig] Writing \"admin.conf\" kubeconfig file</span></span><br><span class=\"line\"><span class=\"comment\"># [endpoint] WARNING: port specified in controlPlaneEndpoint overrides bindPort in the controlplane address</span></span><br><span class=\"line\"><span class=\"comment\"># [kubeconfig] Writing \"kubelet.conf\" kubeconfig file</span></span><br><span class=\"line\"><span class=\"comment\"># [endpoint] WARNING: port specified in controlPlaneEndpoint overrides bindPort in the controlplane address</span></span><br><span class=\"line\"><span class=\"comment\"># [kubeconfig] Writing \"controller-manager.conf\" kubeconfig file</span></span><br><span class=\"line\"><span class=\"comment\"># [endpoint] WARNING: port specified in controlPlaneEndpoint overrides bindPort in the controlplane address</span></span><br><span class=\"line\"><span class=\"comment\"># [kubeconfig] Writing \"scheduler.conf\" kubeconfig file</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet-start] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet-start] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet-start] Starting the kubelet</span></span><br><span class=\"line\"><span class=\"comment\"># [control-plane] Using manifest folder \"/etc/kubernetes/manifests\"</span></span><br><span class=\"line\"><span class=\"comment\"># [control-plane] Creating static Pod manifest for \"kube-apiserver\"</span></span><br><span class=\"line\"><span class=\"comment\"># [control-plane] Creating static Pod manifest for \"kube-controller-manager\"</span></span><br><span class=\"line\"><span class=\"comment\"># [control-plane] Creating static Pod manifest for \"kube-scheduler\"</span></span><br><span class=\"line\"><span class=\"comment\"># [etcd] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\"</span></span><br><span class=\"line\"><span class=\"comment\"># [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\". This can take up to 4m0s</span></span><br><span class=\"line\"><span class=\"comment\"># [apiclient] All control plane components are healthy after 21.750931 seconds</span></span><br><span class=\"line\"><span class=\"comment\"># [upload-config] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet] Creating a ConfigMap \"kubelet-config-1.19\" in namespace kube-system with the configuration for the kubelets in the cluster</span></span><br><span class=\"line\"><span class=\"comment\"># [upload-certs] Storing the certificates in Secret \"kubeadm-certs\" in the \"kube-system\" Namespace</span></span><br><span class=\"line\"><span class=\"comment\"># [upload-certs] Using certificate key:</span></span><br><span class=\"line\"><span class=\"comment\"># bb5b2f0b287d35e179ef4efawwww9f61a38f62343a9b06fc143e3b</span></span><br><span class=\"line\"><span class=\"comment\"># [mark-control-plane] Marking the node weiyigeek-107 as control-plane by adding the label \"node-role.kubernetes.io/master=''\"</span></span><br><span class=\"line\"><span class=\"comment\"># [mark-control-plane] Marking the node weiyigeek-107 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] Using token: 2021wq.httpweiyigeektop</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span></span><br><span class=\"line\"><span class=\"comment\"># [bootstrap-token] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace</span></span><br><span class=\"line\"><span class=\"comment\"># [kubelet-finalize] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key</span></span><br><span class=\"line\"><span class=\"comment\"># [addons] Applied essential addon: CoreDNS</span></span><br><span class=\"line\"><span class=\"comment\"># [endpoint] WARNING: port specified in controlPlaneEndpoint overrides bindPort in the controlplane address</span></span><br><span class=\"line\"><span class=\"comment\"># [addons] Applied essential addon: kube-proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br></pre></td></tr></table></figure></p>\n<p>PS : 将该yaml文件复制到其他master节点，之后所有Master节点提前下载镜像，可以节省初始化时间：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.配置文件上传到其他master节点</span></span><br><span class=\"line\">scp -P 20211 /home/weiyigeek/k8s-init/kubeadm-init-config.yaml weiyigeek@192.168.1.108:~/k8s-init/kubeadm-init-config.yaml</span><br><span class=\"line\">kubeadm config images pull --config /home/weiyigeek/k8s-init/kubeadm-init-config.yaml</span><br><span class=\"line\"><span class=\"comment\"># W0111 11:24:15.905316    5481 configset.go:348] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.19.6</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.19.6</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.19.6</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.19.6</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.13-0</span></span><br><span class=\"line\"><span class=\"comment\"># [config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.7.0</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Step-7-Kubernetes-集群访问配置\"><a href=\"#Step-7-Kubernetes-集群访问配置\" class=\"headerlink\" title=\"Step 7.Kubernetes 集群访问配置\"></a>Step 7.Kubernetes 集群访问配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 普通用户对集群访问配置文件设置</span></span><br><span class=\"line\">mkdir -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 自动运行设置 KUBECONFIG 环境以及k8s命令自动补齐</span></span><br><span class=\"line\">grep <span class=\"string\">\"export KUBECONFIG\"</span> ~/.profile | <span class=\"built_in\">echo</span> <span class=\"string\">\"export KUBECONFIG=<span class=\"variable\">$HOME</span>/.kube/config\"</span> &gt;&gt; ~/.profile</span><br><span class=\"line\">tee -a ~/.profile &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubectl completion bash)</span><br><span class=\"line\"><span class=\"built_in\">source</span> &lt;(kubeadm completion bash)</span><br><span class=\"line\"><span class=\"comment\"># source &lt;(kubelet completion bash)</span></span><br><span class=\"line\"><span class=\"comment\"># source &lt;(helm completion bash)</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 查看节点状态和kube-system命名空间内Pod状态</span></span><br><span class=\"line\">~$ kubectl get node</span><br><span class=\"line\"><span class=\"comment\"># NAME       STATUS     ROLES    AGE   VERSION</span></span><br><span class=\"line\"><span class=\"comment\"># weiyigeek-107   NotReady   master   45m   v1.19.6   # 此处NotReady 是由于我们的calico网络插件未配置好</span></span><br><span class=\"line\">~$ kubectl get pod -n kube-system</span><br><span class=\"line\"><span class=\"comment\"># NAME                               READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\"><span class=\"comment\"># coredns-6c76c8bb89-6cl4d           0/1     Pending   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># coredns-6c76c8bb89-xzkms           0/1     Pending   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># etcd-weiyigeek-107                      1/1     Running   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># kube-apiserver-weiyigeek-107            1/1     Running   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># kube-controller-manager-weiyigeek-107   1/1     Running   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># kube-proxy-l7bp6                   1/1     Running   0          45m</span></span><br><span class=\"line\"><span class=\"comment\"># kube-scheduler-weiyigeek-107            1/1     Running   0          45m</span></span><br></pre></td></tr></table></figure>\n<p>PS : 当没有安装第三方的 <code>flannel或者calico网络插件</code> 时候，通过kubectl get node 查看到节点状态是 NotReady ，当安装完成扁平化网络插件后, 如果没有其它意外则显示Ready</p>\n<p><br></p>\n<h3 id=\"Step-8-现在应该将pod网络部署到集群-此处选用calico网络插件而非使用flannel插件\"><a href=\"#Step-8-现在应该将pod网络部署到集群-此处选用calico网络插件而非使用flannel插件\" class=\"headerlink\" title=\"Step 8.现在应该将pod网络部署到集群,此处选用calico网络插件而非使用flannel插件\"></a>Step 8.现在应该将pod网络部署到集群,此处选用calico网络插件而非使用flannel插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:</span></span><br><span class=\"line\"><span class=\"comment\"># https://kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 calico 网络插件(此处安装最新的v3.17.1版本不采用kuboard脚本)</span></span><br><span class=\"line\"><span class=\"comment\"># 参考文档 https://docs.projectcalico.org/v3.13/getting-started/kubernetes/self-managed-onprem/onpremises</span></span><br><span class=\"line\"><span class=\"comment\"># wget https://kuboard.cn/install-script/calico/calico-3.13.1.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># kubectl apply -f calico-3.13.1.yaml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) Install Calico with Kubernetes API datastore, 50 nodes or less</span></span><br><span class=\"line\"><span class=\"comment\"># curl https://docs.projectcalico.org/manifests/calico.yaml -O</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) Install Calico with etcd datastore (使用etcd数据存储安装Calico) </span></span><br><span class=\"line\">curl https://docs.projectcalico.org/manifests/calico-etcd.yaml -O</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calico-etcd 网络与etc集群连接修改(此处指定pod子网地址)</span></span><br><span class=\"line\">ETCD_CA=`cat /etc/kubernetes/pki/etcd/ca.crt | base64 | tr -d <span class=\"string\">'\\n'</span>`</span><br><span class=\"line\">ETCD_CERT=`cat /etc/kubernetes/pki/etcd/server.crt | base64 | tr -d <span class=\"string\">'\\n'</span>`</span><br><span class=\"line\">ETCD_KEY=`sudo cat /etc/kubernetes/pki/etcd/server.key | base64 | tr -d <span class=\"string\">'\\n'</span>`</span><br><span class=\"line\">POD_SUBNET=`sudo cat /etc/kubernetes/manifests/kube-controller-manager.yaml | grep cluster-cidr= | awk -F= <span class=\"string\">'&#123;print $NF&#125;'</span>`</span><br><span class=\"line\">sed -i <span class=\"string\">\"s@# etcd-key: null@etcd-key: <span class=\"variable\">$&#123;ETCD_KEY&#125;</span>@g; s@# etcd-cert: null@etcd-cert: <span class=\"variable\">$&#123;ETCD_CERT&#125;</span>@g; s@# etcd-ca: null@etcd-ca: <span class=\"variable\">$&#123;ETCD_CA&#125;</span>@g\"</span> calico-etcd.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">'s#etcd_ca: \"\"#etcd_ca: \"/calico-secrets/etcd-ca\"#g; s#etcd_cert: \"\"#etcd_cert: \"/calico-secrets/etcd-cert\"#g; s#etcd_key: \"\" #etcd_key: \"/calico-secrets/etcd-key\" #g'</span> calico-etcd.yaml</span><br><span class=\"line\">sed -i <span class=\"string\">'s#etcd_endpoints: \"http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;\"#etcd_endpoints: \"https://192.168.12.107:2379,https://192.168.12.108:2379,https://192.168.12.109:2379\"#g'</span> calico-etcd.yaml</span><br><span class=\"line\">sed -i <span class=\"string\">'s@# - name: CALICO_IPV4POOL_CIDR@- name: CALICO_IPV4POOL_CIDR@g; s@#   value: \"192.168.0.0/16\"@  value: '</span><span class=\"string\">\"<span class=\"variable\">$&#123;POD_SUBNET&#125;</span>\"</span><span class=\"string\">'@g'</span> calico-etcd.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 部署到集群中</span></span><br><span class=\"line\">kubectl apply -f calico-etcd.yaml</span><br><span class=\"line\"><span class=\"comment\"># secret/calico-etcd-secrets created</span></span><br><span class=\"line\"><span class=\"comment\"># configmap/calico-config created</span></span><br><span class=\"line\"><span class=\"comment\"># clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span></span><br><span class=\"line\"><span class=\"comment\"># clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span></span><br><span class=\"line\"><span class=\"comment\"># clusterrole.rbac.authorization.k8s.io/calico-node created</span></span><br><span class=\"line\"><span class=\"comment\"># clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span></span><br><span class=\"line\"><span class=\"comment\"># daemonset.apps/calico-node created</span></span><br><span class=\"line\"><span class=\"comment\"># serviceaccount/calico-node created</span></span><br><span class=\"line\"><span class=\"comment\"># deployment.apps/calico-kube-controllers created</span></span><br><span class=\"line\"><span class=\"comment\"># serviceaccount/calico-kube-controllers created</span></span><br><span class=\"line\"><span class=\"comment\"># poddisruptionbudget.policy/calico-kube-controllers created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (4) 只在 master 节点执行</span></span><br><span class=\"line\"><span class=\"comment\"># 执行如下命令，等待 3-10 分钟，直到所有的容器组处于 Running 状态</span></span><br><span class=\"line\">watch kubectl get pod -n kube-system -o wide</span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"---等待容器组构建完成---\"</span> &amp;&amp; sleep 180</span><br><span class=\"line\">kubectl get nodes -o wide       <span class=\"comment\"># 查看 master 节点初始化结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (5) 各节点网卡地址已经未设置的POD子网地址</span></span><br><span class=\"line\">~$ route</span><br><span class=\"line\"><span class=\"comment\"># Kernel IP routing table</span></span><br><span class=\"line\"><span class=\"comment\"># Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span></span><br><span class=\"line\"><span class=\"comment\"># default         _gateway        0.0.0.0         UG    0      0        0 ens160</span></span><br><span class=\"line\"><span class=\"comment\"># default         _gateway        0.0.0.0         UG    0      0        0 ens160</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.0.192    0.0.0.0         255.255.255.192 U     0      0        0 *</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.0.193    0.0.0.0         255.255.255.255 UH    0      0        0 calib6c39f0a1d5</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.0.194    0.0.0.0         255.255.255.255 UH    0      0        0 calic77cbbaf4da</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.24.192   weiyigeek-223        255.255.255.192 UG    0      0        0 tunl0</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.100.64   weiyigeek-224        255.255.255.192 UG    0      0        0 tunl0</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.135.192  weiyigeek-108        255.255.255.192 UG    0      0        0 tunl0</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.182.192  weiyigeek-226        255.255.255.192 UG    0      0        0 tunl0</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.183.64   weiyigeek-225        255.255.255.192 UG    0      0        0 tunl0</span></span><br><span class=\"line\"><span class=\"comment\"># 172.16.243.64   weiyigeek-109        255.255.255.192 UG    0      0        0 tunl0</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Step-9-高可用Master初始化，将其他master节点加入集群控制平面\"><a href=\"#Step-9-高可用Master初始化，将其他master节点加入集群控制平面\" class=\"headerlink\" title=\"Step 9.高可用Master初始化，将其他master节点加入集群控制平面\"></a>Step 9.高可用Master初始化，将其他master节点加入集群控制平面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo kubeadm join weiyigeek-lb-vip.k8s:16443 --token 20w21w.httpweiyigeektop \\</span><br><span class=\"line\">  --discovery-token-ca-cert-hash sha256:7ea900ef214c98aef6d7daf1380320d0a43f666f2d4b6b7469077bd51790118e \\</span><br><span class=\"line\">  --control-plane --certificate-key 8327482265975b7a60f3549222f1093353ecaa148a3404cd10c605d4111566fc</span><br><span class=\"line\"></span><br><span class=\"line\">PS : 作为安全措施，上传的证书将在两小时内被删除; 如果需要您可以使用下面的命令重新加载证书。</span><br><span class=\"line\"><span class=\"string\">\"kubeadm init phase upload-certs --upload-certs\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Token </span></span><br><span class=\"line\">~/k8s-init$ kubectl get secret</span><br><span class=\"line\">  <span class=\"comment\"># NAME                  TYPE                                  DATA   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># default-token-xzcbz   kubernetes.io/service-account-token   3      17m</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Step-10-工作节点或者负载加入到集群中\"><a href=\"#Step-10-工作节点或者负载加入到集群中\" class=\"headerlink\" title=\"Step 10.工作节点或者负载加入到集群中\"></a>Step 10.工作节点或者负载加入到集群中</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 为了便于工作节点快速接入到集群中，我们先把master中的镜像导入到工作节点</span></span><br><span class=\"line\">docker save -o v1.19.6.tar $(docker images | grep -v TAG | cut -d <span class=\"string\">' '</span> -f1)  <span class=\"comment\"># 导出</span></span><br><span class=\"line\">docker load -i v1.19.6.tar   <span class=\"comment\"># 加载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 然后你可以加入任意数量的worker节点，在每个worker节点上以root用户运行如下命令:</span></span><br><span class=\"line\">sudo kubeadm join weiyigeek-lb-vip.k8s:16443 --token 20w21w.httpweiyigeektop \\</span><br><span class=\"line\">  --discovery-token-ca-cert-hash sha256:7ea900ef214c98aef6d7daf1380320d0a43f666f2d4b6b7469077bd51790118e</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"Step-11-集群状态查看-amp-镜像查看\"><a href=\"#Step-11-集群状态查看-amp-镜像查看\" class=\"headerlink\" title=\"Step 11.集群状态查看 &amp; 镜像查看\"></a>Step 11.集群状态查看 &amp; 镜像查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) Master 集群状态</span></span><br><span class=\"line\">weiyigeek-107:~$ kubectl get node -o wide</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE    VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class=\"line\">weiyigeek-107   Ready    master   25m    v1.19.6   192.168.1.107   &lt;none&gt;        Ubuntu 20.04.1 LTS   5.4.0-60-generic   docker://19.3.14</span><br><span class=\"line\">weiyigeek-108   Ready    master   15m    v1.19.6   192.168.1.108   &lt;none&gt;        Ubuntu 20.04.1 LTS   5.4.0-60-generic   docker://19.3.14</span><br><span class=\"line\">weiyigeek-109   Ready    master   100s   v1.19.6   192.168.1.109   &lt;none&gt;        Ubuntu 20.04.1 LTS   5.4.0-60-generic   docker://19.3.14</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) K8s 集群 SVC 信息查看</span></span><br><span class=\"line\">~$ kubectl get svc -o wide</span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class=\"line\">kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   32m   &lt;none&gt;</span><br><span class=\"line\">~$ kubectl get svc -o wide -n kube-system</span><br><span class=\"line\">NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE   SELECTOR</span><br><span class=\"line\">kube-dns   ClusterIP   10.96.0.10   &lt;none&gt;        53/UDP,53/TCP,9153/TCP   31m   k8s-app=kube-dns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 为了可以节省资源将其余两台Master节点关闭污点</span></span><br><span class=\"line\">kubectl taint node weiyigeek-108 node-role.kubernetes.io/master=:NoSchedule-</span><br><span class=\"line\">kubectl taint node weiyigeek-109 node-role.kubernetes.io/master=:NoSchedule-</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x04-高可用集群使用初体验\"><a href=\"#0x04-高可用集群使用初体验\" class=\"headerlink\" title=\"0x04 高可用集群使用初体验\"></a>0x04 高可用集群使用初体验</h2><p>描述: 简单对nginx应用从镜像打包到部署到k8s集群中使用流程进行演示</p>\n<ul>\n<li>Step 1.编写dockerfile和相关脚本<br>$ cat dockerfile<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">LABEL maintainer=<span class=\"string\">\"Nginx Test Demo , Authorr: weiyigeek, Version: 2.2\"</span></span><br><span class=\"line\">ENV PATH /usr/<span class=\"built_in\">local</span>/nginx/sbin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">ENV IMAGE_VERSION 2.2</span><br><span class=\"line\">COPY ./host.sh /</span><br><span class=\"line\">RUN chmod a+x /host.sh</span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"/host.sh\"</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>$ cat host.sh<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Hostname: <span class=\"variable\">$HOSTNAME</span>\"</span> &gt; /usr/share/nginx/html/host.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Image Version: <span class=\"variable\">$IMAGE_VERSION</span>\"</span> &gt;&gt; /usr/share/nginx/html/host.html</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Nginx Version: <span class=\"variable\">$NGINX_VERSION</span>\"</span> &gt;&gt; /usr/share/nginx/html/host.html</span><br><span class=\"line\">sh -c <span class=\"string\">\"nginx -g 'daemon off;'\"</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Step 2.镜像构建 &amp; 上传到私有得Harbor仓库:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t harbor.weiyigeek.top/<span class=\"built_in\">test</span>/nginx:v2.2 .</span><br><span class=\"line\">$ docker images | grep <span class=\"string\">\"v2.2\"</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor.weiyigeek.top/test/nginx                                  v2.2                b8a212b2bc88        10 hours ago        133MB</span></span><br><span class=\"line\">$ docker push harbor.weiyigeek.top/<span class=\"built_in\">test</span>/nginx:v2.2</span><br><span class=\"line\">  <span class=\"comment\"># The push refers to repository [harbor.weiyigeek.top/test/nginx]</span></span><br><span class=\"line\">  <span class=\"comment\"># v2.2: digest: sha256:4c49fc25d52e5331146699ff605561f59fb326505074c0474a3ce4898f0fcb02 size: 1776</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Step 3.部署镜像 &amp; 查看:</li>\n</ul>\n<p><strong>方式1</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.不推荐(配置标签以及标签选择需要添加参数，比较麻烦)</span></span><br><span class=\"line\">$ kubectl run nginx-deployment --image=harbor.weiyigeek.top/<span class=\"built_in\">test</span>/nginx:v2.2 --port=80</span><br><span class=\"line\">  <span class=\"comment\"># pod/nginx-deployment created</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME               READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment   1/1     Running   0          108s   10.244.1.2   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用podSubnet进行查看</span></span><br><span class=\"line\">weiyigeek@ubuntu:~$ curl http://10.244.1.2/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: nginx-deployment</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: 2.2</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>方式2</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; nginx-deployment.yaml &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">apiVersion: apps/v1\t<span class=\"comment\">#与k8s集群版本有关，使用 kubectl api-versions 即可查看当前集群支持的版本</span></span><br><span class=\"line\">kind: Deployment   \t<span class=\"comment\">#该配置的类型，我们使用的是 Deployment</span></span><br><span class=\"line\">metadata:\t          <span class=\"comment\">#译名为元数据，即 Deployment 的一些基本属性和信息</span></span><br><span class=\"line\">  name: nginx-deployment\t<span class=\"comment\">#Deployment 的名称</span></span><br><span class=\"line\">  namespace: default </span><br><span class=\"line\">  labels:\t      <span class=\"comment\">#标签可以灵活定位一个或多个资源，其中key和value均可自定义，可以定义多组，目前不需要理解</span></span><br><span class=\"line\">    app: nginx\t<span class=\"comment\">#为该Deployment设置key为app，value为nginx的标签</span></span><br><span class=\"line\">spec:\t          <span class=\"comment\">#这是关于该Deployment的描述，可以理解为你期待该Deployment在k8s中如何使用</span></span><br><span class=\"line\">  replicas: 1  \t<span class=\"comment\">#使用该Deployment创建一个应用程序实例</span></span><br><span class=\"line\">  selector:\t    <span class=\"comment\">#标签选择器，与上面的标签共同作用，目前不需要理解</span></span><br><span class=\"line\">    matchLabels: <span class=\"comment\">#选择包含标签app:nginx的资源</span></span><br><span class=\"line\">      app: nginx</span><br><span class=\"line\">  template:\t     <span class=\"comment\">#这是选择或创建的Pod的模板</span></span><br><span class=\"line\">    metadata:\t   <span class=\"comment\">#Pod的元数据</span></span><br><span class=\"line\">      labels:    <span class=\"comment\">#Pod的标签，上面的selector即选择包含标签app:nginx的Pod</span></span><br><span class=\"line\">        app: nginx</span><br><span class=\"line\">    spec:\t        <span class=\"comment\">#期望Pod实现的功能(即在pod中部署)</span></span><br><span class=\"line\">      containers:\t<span class=\"comment\">#生成container，与docker中的container是同一种</span></span><br><span class=\"line\">      - name: nginx\t<span class=\"comment\">#container的名称</span></span><br><span class=\"line\">        image: harbor.weiyigeek.top/<span class=\"built_in\">test</span>/nginx:v2.2 \t<span class=\"comment\">#使用镜像nginx最新版本创建container，该container默认80端口可访问</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/nginx-deployment created</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployment</span><br><span class=\"line\">  <span class=\"comment\"># NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment   1/1     1            1           87s</span></span><br><span class=\"line\">  <span class=\"comment\"># weiyigeek@ubuntu:~/nginx$ kubectl get pod</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-flmsf   1/1     Running   0          92s</span></span><br><span class=\"line\">  <span class=\"comment\"># weiyigeek@ubuntu:~/nginx$ kubectl get pod -o wide</span></span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-flmsf   1/1     Running   0          99s   10.244.1.4   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">~/nginx$ curl http://10.244.1.4/host.html</span><br><span class=\"line\">  <span class=\"comment\"># Hostname: nginx-deployment-7f5d9779c6-flmsf</span></span><br><span class=\"line\">  <span class=\"comment\"># Image Version: 2.2</span></span><br><span class=\"line\">  <span class=\"comment\"># Nginx Version: 1.19.4</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>Step 4.Pod 副本 &amp; 收缩 &amp; 端口映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl delete pod nginx-deployment-7f5d9779c6-flmsf</span><br><span class=\"line\">  <span class=\"comment\"># pod \"nginx-deployment-7f5d9779c6-flmsf\" deleted</span></span><br><span class=\"line\">$ kubectl get pod -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-hhl7k   1/1     Running   0          60s   10.244.1.5   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl scale --replicas=3 deployment/nginx-deployment</span><br><span class=\"line\">  <span class=\"comment\"># deployment.apps/nginx-deployment scaled</span></span><br><span class=\"line\">$ kubectl get pod -o wide</span><br><span class=\"line\">  <span class=\"comment\"># NAME                                READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-dr5h8   1/1     Running   0          4s     10.244.1.7   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-hhl7k   1/1     Running   0          109s   10.244.1.5   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment-7f5d9779c6-sk2f4   1/1     Running   0          4s     10.244.1.6   k8s-node-4   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl edit svc nginx-deployment  <span class=\"comment\"># 第一章中有介绍 SVC，不知道回去看一哈</span></span><br><span class=\"line\">$ kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000 --protocol=TCP --<span class=\"built_in\">type</span>=NodePort --node-port=31855  <span class=\"comment\"># 后续验证</span></span><br><span class=\"line\">$ kubectl expose svc nginx-deployment --port=80 --target-port=8000 --protocol=TCP --<span class=\"built_in\">type</span>=NodePort</span><br><span class=\"line\">  <span class=\"comment\"># type: NodePort</span></span><br><span class=\"line\">$ kubectl get svc</span><br><span class=\"line\">  <span class=\"comment\"># NAME               TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># kubernetes         ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP           2d22h</span></span><br><span class=\"line\">  <span class=\"comment\"># nginx-deployment   NodePort    10.99.90.247   &lt;none&gt;        30000:31855/TCP   39h</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo netstat -anpt | grep <span class=\"string\">\"31855\"</span></span><br><span class=\"line\">  <span class=\"comment\"># tcp        0      0 0.0.0.0:31855           0.0.0.0:*               LISTEN      1931726/kube-proxy</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 5.IPVS 负载均衡和rr轮询机制查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ipvsadm -Ln</span><br><span class=\"line\">  # IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class=\"line\">  # Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\">  #   -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class=\"line\">  # TCP  10.10.107.202:31855 rr</span><br><span class=\"line\">  #   -&gt; 10.244.1.5:80                Masq    1      0          1</span><br><span class=\"line\">  #   -&gt; 10.244.1.6:80                Masq    1      1          1</span><br><span class=\"line\">  #   -&gt; 10.244.1.7:80                Masq    1      0          1</span><br><span class=\"line\">  # TCP  10.96.0.1:443 rr</span><br><span class=\"line\">  #   -&gt; 10.10.107.202:6443           Masq    1      3          0</span><br><span class=\"line\">  # TCP  10.96.0.10:53 rr</span><br><span class=\"line\">  #   -&gt; 10.244.0.4:53                Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.0.5:53                Masq    1      0          0</span><br><span class=\"line\">  # TCP  10.96.0.10:9153 rr</span><br><span class=\"line\">  #   -&gt; 10.244.0.4:9153              Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.0.5:9153              Masq    1      0          0</span><br><span class=\"line\">  # TCP  10.99.90.247:30000 rr</span><br><span class=\"line\">  #   -&gt; 10.244.1.5:80                Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.1.6:80                Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.1.7:80                Masq    1      0          0</span><br><span class=\"line\">  # TCP  127.0.0.1:31855 rr</span><br><span class=\"line\">  #   -&gt; 10.244.1.5:80                Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.1.6:80                Masq    1      0          0</span><br><span class=\"line\">  #   -&gt; 10.244.1.7:80                Masq    1      0          0</span><br><span class=\"line\"></span><br><span class=\"line\"># 基于RR轮训负载</span><br><span class=\"line\">Hostname: nginx-deployment-7f5d9779c6-dr5h8 Image Version: 2.2 Nginx Version: 1.19.4 </span><br><span class=\"line\">Hostname: nginx-deployment-7f5d9779c6-sk2f4 Image Version: 2.2 Nginx Version: 1.19.4 </span><br><span class=\"line\">Hostname: nginx-deployment-7f5d9779c6-hhl7k Image Version: 2.2 Nginx Version: 1.19.4</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/2/20201107003214.png\" alt=\"WeiyiGeek.rr轮休机制\" title=\"\" class=\"\">\n                <p>WeiyiGeek.rr轮休机制</p>\n            </figure>\n","comments":true,"excerpt":null,"categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"k8s","path":"api/tags/k8s.json"}]}