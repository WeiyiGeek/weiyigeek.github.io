{"title":"JAVA入门学习六","slug":"编程世界/Java/JAVA入门学习六","date":"2019-08-20T03:34:30.000Z","updated":"2022-03-29T05:39:06.303Z","url":"2019/8-20-292.html","path":"api/articles/2019/8-20-292.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190826212641.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190826161925.png"],"content":"<p>[TOC]<br><a id=\"more\"></a></p>\n<h4 id=\"Collection集合框架\"><a href=\"#Collection集合框架\" class=\"headerlink\" title=\"Collection集合框架\"></a>Collection集合框架</h4><p>描述: 集合的由来数组长度是固定,当添加的元素超过了数组的长度时需要对数组重新定义太麻烦,java内部给我们提供了<code>集合类能存储任意对象,长度是可以改变的,随着元素的增加而增加,随着元素的减少而减少</code>;</p>\n<p><strong>集合原理:(重点)</strong></p>\n<ul>\n<li>集合的底层部分采用数组方式,比如创建一个10个大小的数组,之后往里面填数组当填满之后,它又创建了一个比原数组1.5倍大的数组,把原数组的数据都拷贝到新数组中,原数组将成为垃圾被丢弃;(然后一直循环)</li>\n</ul>\n<p><br></p>\n<p><em>数组和集合的区别</em></p>\n<ul>\n<li>区别1 : <ul>\n<li>数组既可以存储基本数据类型,又可以存储引用数据类型,基本数据类型存储的是值,引用数据类型存储的是地址值</li>\n<li>集合只能存储引用数据类型(对象)集合中也可以存储基本数据类型,但是在存储的时候会自动装箱变成对象</li>\n</ul>\n</li>\n<li>区别2:<ul>\n<li>数组长度是固定的,不能自动增长</li>\n<li>集合的长度的是可变的,可以根据元素的增加而增长</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n<p><em>集合继承体系图:</em><br>Collection(单列集合的根接口)</p>\n<ul>\n<li>List : 有序(存和取的顺序一致),有索引可以存储重复;<ul>\n<li>ArrayList 数组实现</li>\n<li>LinkedList 链表实现</li>\n<li>Vector (已被替换掉) 数组实现</li>\n</ul>\n</li>\n<li>Set : 无序()存和取的顺序补一致,无索引不可以存储重复;<ul>\n<li>HashSet 哈希算法</li>\n<li>TreeSet 二叉数算法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190826212641.png\" alt=\"WeiyiGeek.集合继承体系图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.集合继承体系图</p>\n            </figure>\n<p><em>数组和集合什么时候用?</em></p>\n<ul>\n<li>1.如果元素个数是固定的推荐用数组;</li>\n<li>2.如果元素个数不是固定的推荐用集合;</li>\n</ul>\n<p>注意事项:</p>\n<ul>\n<li>collectionXxx.java使用了未经检查或不安全的操作.</li>\n<li>要了解详细信息,请使用 -Xlint:unchecked重新编译.java编译器认为该程序存在安全隐患温馨提示:这不是编译失败,所以先不用理会,等学了泛型你就知道了</li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.util </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt;  //&lt;<span class=\"title\">E</span>&gt; 泛型 <span class=\"title\">jdk1</span>.5出现所以,注意接口不能直接<span class=\"title\">new</span>需要找到它的已知实现类</span>;</span><br><span class=\"line\">extends Iterable&lt;E&gt;  <span class=\"comment\">//扩展迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">#实例化常常采用集合继承体系进行实现</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> <span class=\"comment\">//#确保此集合包含指定的元素（可选操作）。  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span>  <span class=\"comment\">//#从这个集合中移除指定元素的一个实例，如果它是存在的（可选操作）。  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  <span class=\"comment\">//#返回此集合中的元素的数目。  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span>  <span class=\"comment\">//#返回 true如果集合包含指定元素。 </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> <span class=\"comment\">// #返回 true如果集合不包含任何元素。  </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>   <span class=\"comment\">//#从这个集合中移除所有的元素（可选操作）。</span></span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"集合继承ArrayList\"><a href=\"#集合继承ArrayList\" class=\"headerlink\" title=\"集合继承ArrayList\"></a>集合继承ArrayList</h5><p>基础实例:<br>需求：我有5个学生，请把这个5个学生的信息存储到数组中，并遍历数组，获取得到每一个学生信息。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.Collection;</span><br><span class=\"line\"><span class=\"comment\">//创建一个学生类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Students</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">//创建空参和有参</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Students</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Students</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//创建get/setter 方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>案例需要上面的学生类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;  <span class=\"comment\">//引入学生类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Collection</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Student[] arr = new Student[5]; //存储学生对象</span></span><br><span class=\"line\"><span class=\"comment\">\t\tarr[0] = new Student(\"张三\", 23);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tarr[1] = new Student(\"李四\", 24);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tarr[2] = new Student(\"王五\", 25);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tarr[3] = new Student(\"赵六\", 26);</span></span><br><span class=\"line\"><span class=\"comment\">\t\tarr[4] = new Student(\"马哥\", 20);</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.基本数据类型数组</span></span><br><span class=\"line\">    <span class=\"comment\">//int[] arr = new int[5];</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.引用数据类型数组</span></span><br><span class=\"line\">    Students[] arrs = <span class=\"keyword\">new</span> Students[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arrs[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">    arrs[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Students(<span class=\"string\">\"李四\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    arrs[<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> Students(<span class=\"string\">\"王五\"</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">      System.out.println(arrs[i]); <span class=\"comment\">//数组和集合引用数据类型存储都是地址值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.Collection类的使用 (编译看父类,运行看子类)</span></span><br><span class=\"line\">    Collection c = <span class=\"keyword\">new</span> ArrayList(); <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">    <span class=\"comment\">//add方法如果是List集合一直都返回True,因为List集合中是可以存储重复元素的;但如果是set集合当存储重复元素的时候就会返回false;</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b1 = c.add(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b2 = c.add(<span class=\"keyword\">true</span>); <span class=\"comment\">//自动装箱特性new Boolean(true)</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b3 = c.add(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b4 = c.add(<span class=\"number\">10.24</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b5 = c.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>,<span class=\"number\">23</span>));</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b6 = c.add(<span class=\"string\">\"abc\"</span>);  <span class=\"comment\">//可以添加重复的元素</span></span><br><span class=\"line\">    System.out.println(c);  <span class=\"comment\">//类似于Python中的集合</span></span><br><span class=\"line\">    <span class=\"comment\">//ArrayList 的父类的父类重写toString方法,所以在打印对象的引用的时候输出的结果不是Object类中的toString方法</span></span><br><span class=\"line\">    System.out.println(c.toString());  <span class=\"comment\">//类似于Python中的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例4.其他的方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"集合元素个数 :\"</span> + c.size());<span class=\"comment\">//获取集合中元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c.remove(<span class=\"string\">\"abc\"</span>); <span class=\"comment\">//删除元素</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"删除指定元素 : \"</span>+c);  <span class=\"comment\">//类似于Python中的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"判断是否包含 \"</span> + c.contains(<span class=\"number\">10.24</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">    c.clear();<span class=\"comment\">//清空元素</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"清空元素 : \"</span> + c);  <span class=\"comment\">//类似于Python中的集合</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"判断是否为空 : \"</span> + c.isEmpty()); <span class=\"comment\">//判断集合是否为空</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.weiyi.Collection.Students@<span class=\"number\">15</span>db9742</span><br><span class=\"line\">com.weiyi.Collection.Students@<span class=\"number\">6</span>d06d69c</span><br><span class=\"line\">com.weiyi.Collection.Students@<span class=\"number\">7852e922</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">[abc, <span class=\"keyword\">true</span>, <span class=\"number\">100</span>, <span class=\"number\">10.24</span>, com.weiyi.Collection.Students@<span class=\"number\">4e25154f</span>, abc]</span><br><span class=\"line\">[abc, <span class=\"keyword\">true</span>, <span class=\"number\">100</span>, <span class=\"number\">10.24</span>, com.weiyi.Collection.Students@<span class=\"number\">4e25154f</span>, abc]</span><br><span class=\"line\"></span><br><span class=\"line\">集合元素个数 :<span class=\"number\">6</span></span><br><span class=\"line\">删除指定元素 : [<span class=\"keyword\">true</span>, <span class=\"number\">100</span>, <span class=\"number\">10.24</span>, com.weiyi.Collection.Students@<span class=\"number\">4e25154f</span>, abc]</span><br><span class=\"line\">判断是否包含 <span class=\"keyword\">true</span></span><br><span class=\"line\">清空元素 : []</span><br><span class=\"line\">判断是否为空 : <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure><br>Tips : 数组和集合存储引用数据类型存的都是地址值<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/1/20190826161925.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<p><strong>集合转数组遍历:</strong><br>描述:集合常用方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] toArray()  <span class=\"comment\">//#返回包含此集合中所有元素的数组。 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection c)</span>  <span class=\"comment\">//#将指定集合中的所有元素添加到这个集合（可选操作）。 </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection c)</span> <span class=\"comment\">//#删除此集合中包含的所有元素（可选操作）的所有元素（可选操作）。 </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection c)</span> <span class=\"comment\">//#返回 true如果这个集合包含指定集合的所有元素。 </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection c)</span> <span class=\"comment\">//#仅保留包含在指定集合中的这个集合中的元素（可选操作）。 交集</span></span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_Collection</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1：集合遍历之集合转数组遍历</span></span><br><span class=\"line\">    Collection c = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    Object[] arr = c.toArray(); <span class=\"comment\">//集合之数组遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">      System.out.print(arr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n##########分割线上##########\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//示例2.集合转换成为数组</span></span><br><span class=\"line\">    Collection c1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"赵老师\"</span>,<span class=\"number\">24</span>));</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"经老师\"</span>,<span class=\"number\">23</span>));</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"渣渣辉\"</span>,<span class=\"number\">25</span>));</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"刘师傅\"</span>,<span class=\"number\">26</span>));</span><br><span class=\"line\">    Object[] arr1 = c1.toArray();  <span class=\"comment\">//将集合转换成数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">      Students s = (Students)arr1[i];  <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">      System.out.println(s.getName() + <span class=\"string\">\"  \"</span> + s.getAge());  <span class=\"comment\">//重点值得学习</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.自带All()功能测试方法</span></span><br><span class=\"line\">    Collection c2 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c2.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    c2.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    c2.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    c2.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Collection c3 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c3.add(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    c3.add(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    c3.add(<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">    c3.add(<span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">    c3.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"##########分割线###########\"</span>);</span><br><span class=\"line\">    c2.add(c3);    <span class=\"comment\">//将c3看成一个对象添加到c1中 [1,2,3,4]</span></span><br><span class=\"line\">    System.out.println(c2);</span><br><span class=\"line\">    c2.addAll(c3); <span class=\"comment\">//将c3中的每一个元素添加到c1中</span></span><br><span class=\"line\">    System.out.println(c2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b = c2.removeAll(c3);  <span class=\"comment\">//将c2中的c3元素进行删除 (需要注意删除是交集)</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"需要注意删除是交集\"</span>);</span><br><span class=\"line\">    System.out.println(c2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b1 = c2.containsAll(c3); <span class=\"comment\">//判断调用集合是否包含传入的集合</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"c2是否包含c3 : \"</span> + b1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//取交集如果调用的集合改变就返回true(持续),否则返回false;</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b2 = c2.retainAll(c3); <span class=\"comment\">//取交集</span></span><br><span class=\"line\">    System.out.println(b2);</span><br><span class=\"line\">    System.out.println(c2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a b c d </span><br><span class=\"line\">##########分割线上##########</span><br><span class=\"line\">赵老师  <span class=\"number\">24</span></span><br><span class=\"line\">经老师  <span class=\"number\">23</span></span><br><span class=\"line\">渣渣辉  <span class=\"number\">25</span></span><br><span class=\"line\">刘师傅  <span class=\"number\">26</span></span><br><span class=\"line\">##########分割线###########</span><br><span class=\"line\">[a, b, c, d, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">[a, b, c, d, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">需要注意删除是交集</span><br><span class=\"line\">[a, b, c, d, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]]</span><br><span class=\"line\">c2是否包含c3 : <span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"集合之迭代器-Iterator\"><a href=\"#集合之迭代器-Iterator\" class=\"headerlink\" title=\"集合之迭代器(Iterator)\"></a>集合之迭代器(Iterator)</h5><p>描述:其实迭代都是遍历,而遍历也可以看做是迭代;迭代器概述集合是用来存储元素,存储的元素需要查看,那么就需要迭代(遍历);</p>\n<p><em>迭代器原理:</em></p>\n<ul>\n<li>迭代器是对集合进行遍历,而每一个集合内部的存储结构都是不同的,所以每一个集合存和取都是不一样,那么就需要在每一个类中定义hasNext()和next()方法</li>\n<li>这样做是可以的,但是会让整个集合体系过于臃肿,迭代器是将这样的方法向上抽取出接口,然后在每个类的内部,定义自己迭代方式好处有二：<ul>\n<li>第一规定了整个集合体系的遍历方式都是hasNext()和next()方法</li>\n<li>第二代码有底层内部实现,使用者不用管怎么实现的会用即可 </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#迭代器方法解析</span></span><br><span class=\"line\">java.util </span><br><span class=\"line\">public interface Iterator&lt;E&gt; <span class=\"comment\">#返回此集合中的元素的迭代器。 </span></span><br><span class=\"line\">boolean hasNext() <span class=\"comment\">#返回 true如果迭代具有更多的元素。  </span></span><br><span class=\"line\">E next()   <span class=\"comment\">#返回迭代中的下一个元素。</span></span><br></pre></td></tr></table></figure>\n<p>迭代器源码解析<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 1,在eclipse中ctrl + <span class=\"built_in\">shift</span> + t找到ArrayList类</span><br><span class=\"line\">* 2,ctrl+o查找iterator()方法</span><br><span class=\"line\">* 3,查看返回值类型是new Itr(),说明Itr这个类实现Iterator接口</span><br><span class=\"line\">* 4,查找Itr这个内部类,发现重写了Iterator中的所有抽象方法 </span><br><span class=\"line\">* 5,hasNext() 是判断集合中是否有参数,以及cursor标志位是否 == 集合的size个数</span><br><span class=\"line\">* 6,Next() 是集合进行迭代并输出迭代值</span><br></pre></td></tr></table></figure></p>\n<p>基础方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"rawtypes\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_Collection</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.对集合中的元素进行迭代遍历</span></span><br><span class=\"line\">    Collection c = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c.add(<span class=\"string\">\"Weiyi\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"Geek\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"1024\"</span>);</span><br><span class=\"line\">    c.add(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    Iterator it = c.iterator(); <span class=\"comment\">//获取迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> bl = it.hasNext(); <span class=\"comment\">//判断集合中是否有元素,有则返回true;</span></span><br><span class=\"line\">    Object obj = it.next();  <span class=\"comment\">//指针会记录当前位置向后移位;</span></span><br><span class=\"line\">    System.out.print(bl + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    System.out.println(obj); <span class=\"comment\">//输入集合中第一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      System.out.println(it.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//示例2.通过while循环来迭代集合数组</span></span><br><span class=\"line\">    Collection c1 = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张伟\"</span>, <span class=\"number\">15</span>)); <span class=\"comment\">//父类引用指向子类对象</span></span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张杰\"</span>, <span class=\"number\">29</span>)); <span class=\"comment\">//Object obj = new Student</span></span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张根硕\"</span>, <span class=\"number\">35</span>));</span><br><span class=\"line\">    c1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"大张伟\"</span>, <span class=\"number\">25</span>));</span><br><span class=\"line\">    Iterator it1 = c1.iterator();</span><br><span class=\"line\">    <span class=\"comment\">//Collection存储自定义对象并用迭代器遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it1.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Students s = (Students)it1.next(); <span class=\"comment\">//向下转型 强转</span></span><br><span class=\"line\">      System.out.println(s.getName() + <span class=\"string\">\" \"</span> + s.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span> Weiyi</span><br><span class=\"line\">Geek</span><br><span class=\"line\">1024</span><br><span class=\"line\">Java</span><br><span class=\"line\"></span><br><span class=\"line\">张伟 15</span><br><span class=\"line\">张杰 29</span><br><span class=\"line\">张根硕 35</span><br><span class=\"line\">大张伟 25</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"有序集合List\"><a href=\"#有序集合List\" class=\"headerlink\" title=\"有序集合List\"></a>有序集合List</h5><p>描述:List集合中不能有重复元素,否则返回false;List集合中才有索引,而set中是没有索引的<br>List集合的特有功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* void add(int index,E element)</span><br><span class=\"line\">* E remove(int index)</span><br><span class=\"line\">* E get(int index)</span><br><span class=\"line\">* E set(int index,E element)</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_List</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.List集合功能(按照索引插入)</span></span><br><span class=\"line\">    List l = <span class=\"keyword\">new</span> ArrayList(); <span class=\"comment\">//注意是在java.util.List;</span></span><br><span class=\"line\">    l.add(<span class=\"string\">\"Weiyi\"</span>); <span class=\"comment\">//object obj = new String();</span></span><br><span class=\"line\">    l.add(<span class=\"string\">\"Geek\"</span>);</span><br><span class=\"line\">    l.add(<span class=\"string\">\"Love\"</span>);</span><br><span class=\"line\">    l.add(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">    l.add(<span class=\"number\">0</span>,<span class=\"string\">\"Start\"</span>); <span class=\"comment\">//头部插入  INDEX &lt;= SIZE 并且 Index &gt;= 0 不会报索引异常</span></span><br><span class=\"line\">    l.add(<span class=\"number\">5</span>,<span class=\"string\">\"END\"</span>);  <span class=\"comment\">//尾部插入</span></span><br><span class=\"line\">    System.out.println(l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.通过索引删除元素并且其返回</span></span><br><span class=\"line\">    Object demo1 = l.remove(<span class=\"number\">3</span>); <span class=\"comment\">//删除Love - 注意:删除的时候不会自动装箱</span></span><br><span class=\"line\">    System.out.println(l + <span class=\"string\">\" 删除的集合元素是 \"</span> + demo1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.根据索引获取元素</span></span><br><span class=\"line\">    Object demo2 = l.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"获取指定的索引的集合元素 ：\"</span> + demo2 + l.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"comment\">//通过索引遍历List集合;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l.size(); i++) &#123;</span><br><span class=\"line\">      System.out.print(l.get(i) + <span class=\"string\">\" - \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例4.根据索引进行指定位置元素进行修改</span></span><br><span class=\"line\">    l.set(<span class=\"number\">3</span>, <span class=\"string\">\"Editer\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n修改后的集合元素 : \"</span> + l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//综合实例</span></span><br><span class=\"line\">    <span class=\"comment\">//向List集合中存储学生对象然后通过size和get()方法结合遍历</span></span><br><span class=\"line\">    List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"Weiyi\"</span>,<span class=\"number\">28</span>));</span><br><span class=\"line\">    list.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"Geek\"</span>,<span class=\"number\">32</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//存储自定义对象通过size()和get()方式获取</span></span><br><span class=\"line\">      Students s = (Students)list.get(i); <span class=\"comment\">//向下引用</span></span><br><span class=\"line\">      System.out.println(i + <span class=\"string\">\" - \"</span> + s.getName() + <span class=\"string\">\" \"</span> + s.getAge());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Start, Weiyi, Geek, Love, Java, END]</span><br><span class=\"line\">[Start, Weiyi, Geek, Java, END] 删除的集合元素是 Love</span><br><span class=\"line\">获取指定的索引的集合元素 ：WeiyiGeek</span><br><span class=\"line\">Start - Weiyi - Geek - Java - END - </span><br><span class=\"line\">修改后的集合元素 : [Start, Weiyi, Geek, Editer, END]</span><br><span class=\"line\"><span class=\"number\">0</span> - Weiyi <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">1</span> - Geek <span class=\"number\">32</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h5 id=\"集合继承Vector\"><a href=\"#集合继承Vector\" class=\"headerlink\" title=\"集合继承Vector\"></a>集合继承Vector</h5><p>描述：Vector是Java中的老员工了从jdk1.0但是现在已经被ArrayList所替代,Vector类实现了一个可增长对象数组,可以通过索引来访问元素,也可以根据需求来进行收缩对象数组;<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#包</span><br><span class=\"line\">java.util.Vector&lt;E&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">#类</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt;, <span class=\"title\">RandomAccess</span>, <span class=\"title\">Cloneable</span>, <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#成员属性</span></span><br><span class=\"line\">protected int elementCount //#Vector对象的有效成分的数量。成分 elementData[0]通过 elementData[elementCount-1]是实际的项目</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#Vector类特有功能</span></span><br><span class=\"line\">* <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addElement</span><span class=\"params\">(E obj)</span> <span class=\"comment\">//添加元素</span></span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> E <span class=\"title\">elementAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">public</span> Enumeration <span class=\"title\">elements</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//#迭代方式</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> interface Enumeration&lt;E&gt;  <span class=\"comment\">//一个实现枚举接口的对象生成一系列元素，一个在一个时间。连续调用方法返回的 nextElement连续单元系列。 </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasMoreElements</span><span class=\"params\">()</span>  <span class=\"comment\">//#测试此枚举是否包含更多元素。  </span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">nextElement</span><span class=\"params\">()</span>    <span class=\"comment\">//#返回此枚举的下一个元素，如果此枚举对象至少有一个元素可以提供。</span></span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1.Vector的迭代与添加元素</span></span><br><span class=\"line\">Vector v = <span class=\"keyword\">new</span> Vector();</span><br><span class=\"line\">v.addElement(<span class=\"string\">\"Weiyi\"</span>);</span><br><span class=\"line\">v.addElement(<span class=\"string\">\"Geek\"</span>);</span><br><span class=\"line\">v.addElement(<span class=\"string\">\"Java\"</span>);</span><br><span class=\"line\">Enumeration en = v.elements(); <span class=\"comment\">//获取枚举</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(en.hasMoreElements()) <span class=\"comment\">//判断集合中是否有元素</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//迭代获取集合中的元素</span></span><br><span class=\"line\">  System.out.print(en.nextElement() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\">Weiyi</span><br><span class=\"line\">Geek</span><br><span class=\"line\">Java</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"集合继承LinkedList\"><a href=\"#集合继承LinkedList\" class=\"headerlink\" title=\"集合继承LinkedList\"></a>集合继承LinkedList</h5><p>描述：双向链表实现的 List和 Deque接口。实现了所有的可选列表操作，并允许所有元素（包括 null）。<br>可以实现栈(先进后出)和堆(先进先出)的数据结构；<br>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#包</span></span><br><span class=\"line\">java.util </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#类结构</span></span><br><span class=\"line\">public class LinkedList&lt;E&gt;</span><br><span class=\"line\">extends AbstractSequentialList&lt;E&gt;</span><br><span class=\"line\">implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#构造方法</span></span><br><span class=\"line\">LinkedList() <span class=\"comment\">#构造一个空列表。  </span></span><br><span class=\"line\">LinkedList(Collection&lt;? extends E&gt; c)  <span class=\"comment\">#构造一个包含指定集合的元素的列表，它们在集合的迭代器返回的顺序中返回。  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#常用方法</span></span><br><span class=\"line\">* public void addFirst(E e)及addLast(E e)</span><br><span class=\"line\">* public E getFirst() 及 getLast()</span><br><span class=\"line\">* public E removeFirst() 及 public E removeLast()</span><br><span class=\"line\">* public E get(int index);</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo8_linkedList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.集合常用方法展示</span></span><br><span class=\"line\">    LinkedList list = <span class=\"keyword\">new</span> LinkedList(); <span class=\"comment\">//创建Linked对象</span></span><br><span class=\"line\">    list.add(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    list.addFirst(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">    list.addLast(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"获取集合中第一个元素：\"</span>+list.getFirst());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"获取集合中最后一个元素：\"</span>+list.getLast());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"返回删除的第一个元素：\"</span>+list.removeFirst());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"返回删除的最后一个元素：\"</span>+list.removeLast());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"利用索引获取元素 (原理值得学习): \"</span>+list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//示例2.采用LinkedList模拟栈结构</span></span><br><span class=\"line\">    LinkedStack stack = <span class=\"keyword\">new</span> LinkedStack();</span><br><span class=\"line\">    stack.in(<span class=\"string\">\"a\"</span>); <span class=\"comment\">//进栈</span></span><br><span class=\"line\">    stack.in(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    stack.in(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    stack.in(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//循环弹栈</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</span><br><span class=\"line\">      System.out.println(stack.out());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.实现堆即先进先出采用addFrist();以及RemoveFrist（）即可</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装成为类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedStack</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> LinkedList lt = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**模拟栈先进先出**/</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">in</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    lt.addLast(obj);  <span class=\"comment\">//向末尾添加方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">out</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lt.removeLast();  <span class=\"comment\">//向末尾删除方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lt.isEmpty();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取集合中第一个元素：0</span><br><span class=\"line\">获取集合中最后一个元素：2</span><br><span class=\"line\">返回删除的第一个元素：0</span><br><span class=\"line\">返回删除的最后一个元素：2</span><br><span class=\"line\">利用索引获取元素 (原理值得学习): 1</span><br><span class=\"line\"></span><br><span class=\"line\">d</span><br><span class=\"line\">c</span><br><span class=\"line\">b</span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"List子类特点\"><a href=\"#List子类特点\" class=\"headerlink\" title=\"List子类特点\"></a>List子类特点</h5><p>描述:在说List子类特点的时候我们先说说数据结构之数组和链表_<br>数组与链表的区别?<br>A:数组:查询快修改也快,但是增删慢;<br>B:链表:查询慢修改也慢,但是增删快;</p>\n<p><em>List的三个子类的特点?</em></p>\n<ul>\n<li>ArrayList:<ul>\n<li>底层数据结构是<code>数组</code>，查询快，增删慢。</li>\n<li><code>线程不安全，效率高</code>。</li>\n</ul>\n</li>\n<li>Vector:<ul>\n<li>底层数据结构是<code>数组</code>，查询快，增删慢。</li>\n<li><code>线程安全，效率低</code>。</li>\n</ul>\n<ul>\n<li>Vector相对ArrayList查询慢(线程安全的)</li>\n</ul>\n<ul>\n<li>Vector相对LinkedList增删慢(数组结构)</li>\n</ul>\n</li>\n<li>LinkedList:<ul>\n<li>底层数据结构是<code>链表</code>，查询慢，增删快。</li>\n<li><code>线程不安全，效率高</code>。</li>\n</ul>\n</li>\n</ul>\n<p><em>Vector和ArrayList的区别</em></p>\n<ul>\n<li>Vector是线程安全的,效率低</li>\n<li>ArrayList是线程不安全的,效率高<br>共同点:都是数组实现的</li>\n</ul>\n<p><em>ArrayList和LinkedList的区别</em></p>\n<ul>\n<li>ArrayList底层是数组结果,查询和修改快</li>\n<li>LinkedList底层是链表结构的,增和删比较快,查询和修改比较慢<br>共同点:都是线程不安全的</li>\n</ul>\n<ul>\n<li>List有三个儿子，我们到底使用谁呢?<br>  查询多用ArrayList<br>  增删多用LinkedList<br>  如果都多ArrayList</li>\n</ul>\n<p><br></p>\n<h6 id=\"ArrayList示例\"><a href=\"#ArrayList示例\" class=\"headerlink\" title=\"ArrayList示例\"></a>ArrayList示例</h6><p>描述：前面我们已经简单的介绍了一些ArrayList集合的框架，下面直接演示集合参数过滤<br>基础示例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students; <span class=\"comment\">//重写了toString和equals方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo7_ArrayList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * A:案例演示</span></span><br><span class=\"line\"><span class=\"comment\">\t   * 需求：ArrayList去除集合中字符串的重复值(字符串的内容相同)</span></span><br><span class=\"line\"><span class=\"comment\">\t   * 思路：创建新集合方式</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">    ArrayList newList = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    newList.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    newList.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    newList.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    newList.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    newList.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ArrayList list = getSingle(newList);</span><br><span class=\"line\">    System.out.println(list);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\tB:案例演示</span></span><br><span class=\"line\"><span class=\"comment\">\t\t* 需求：ArrayList去除集合中自定义对象元素的重复值(对象的成员变量值相同)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t* **/</span></span><br><span class=\"line\">    ArrayList objList = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    objList.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>,<span class=\"number\">13</span>)); <span class=\"comment\">//如果采用Object方式是对比的地址值是不一样的</span></span><br><span class=\"line\">    objList.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>,<span class=\"number\">13</span>));</span><br><span class=\"line\">    objList.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张四\"</span>,<span class=\"number\">13</span>));</span><br><span class=\"line\">    objList.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"王三\"</span>,<span class=\"number\">13</span>));</span><br><span class=\"line\">    ArrayList objres = getSingleObj(objList); <span class=\"comment\">//循环方法进行对象去重</span></span><br><span class=\"line\">    objList.remove(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"张三\"</span>,<span class=\"number\">13</span>));   <span class=\"comment\">//底层都是依赖于object的equals方法</span></span><br><span class=\"line\">    System.out.println(objres);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t    *  参数: 去除重复</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1,返回ArrayList类型类别</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2,参数列表ArrayList</span></span><br><span class=\"line\"><span class=\"comment\">\t * 创建新集合、根据传入的集合获取迭代器</span></span><br><span class=\"line\"><span class=\"comment\">\t * 遍历老集合、通过新集合判断是否包含老集合中的元素,如果不包含就不添加;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">getSingle</span><span class=\"params\">(ArrayList list)</span>  </span>&#123;</span><br><span class=\"line\">    ArrayList newList = <span class=\"keyword\">new</span> ArrayList();\t\t\t<span class=\"comment\">//创建一个新集合</span></span><br><span class=\"line\">    Iterator it = list.iterator();\t\t\t\t\t<span class=\"comment\">//获取迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it.hasNext()) &#123;\t\t\t\t\t\t\t<span class=\"comment\">//判断老集合中是否有元素</span></span><br><span class=\"line\">      String temp = (String)it.next();\t\t\t<span class=\"comment\">//将每一个元素临时记录住</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!newList.contains(temp)) &#123;\t\t\t\t<span class=\"comment\">//如果新集合中不包含该元素</span></span><br><span class=\"line\">        newList.add(temp);\t\t\t\t\t\t<span class=\"comment\">//将该元素添加到新集合中</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newList;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//将新集合返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//可以处理比较对象的类</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ArrayList <span class=\"title\">getSingleObj</span><span class=\"params\">(ArrayList objList)</span> </span>&#123;</span><br><span class=\"line\">    ArrayList newList = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    Iterator it = objList.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Object obj = it.next();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!newList.contains(obj))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        newList.add(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newList;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"集合泛型\"><a href=\"#集合泛型\" class=\"headerlink\" title=\"集合泛型\"></a>集合泛型</h5><p>泛型概述：比如Collection集合上有一个尖括号&lt;引用数据类型&gt;,一旦设置引用数类型限定您集合存储的数据类型，只能使用引用对象及该对象的子类对象(父类可以指向子类对象);</p>\n<p>泛型好处:</p>\n<ul>\n<li>提高安全性(将运行期的错误转换到编译期) </li>\n<li>省去强转的麻烦</li>\n</ul>\n<p>泛型基本使用:</p>\n<ul>\n<li>&lt;&gt;中放的必须是引用数据类型,从而限定集合中使用的数据类型;</li>\n</ul>\n<p>泛型使用注意事项：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#前后的泛型必须一致</span></span><br><span class=\"line\">ArrayList&lt;Students&gt; lt = new ArrayList&lt;Students&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者后面的泛型可以省略不写(1.7的新特性菱形泛型) </span></span><br><span class=\"line\">ArrayList&lt;Students&gt; lt = new ArrayList&lt;&gt;()</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.generic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引用我们students类</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Generic</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例0.泛型的使用(字符串类型)</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(); <span class=\"comment\">//泛型可以省略不写(1.7的新特性菱形泛型)</span></span><br><span class=\"line\">    list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    Iterator&lt;String&gt; llt = list.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(llt.hasNext()) &#123;</span><br><span class=\"line\">      System.out.println(llt.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例1.ArrayList存储字符串并遍历泛型版</span></span><br><span class=\"line\">    ArrayList&lt;Students&gt; lt = <span class=\"keyword\">new</span> ArrayList&lt;Students&gt;();<span class=\"comment\">//关键点1 数据引用类型一定要相同,后面也可以是前引用类型的子类或者父类</span></span><br><span class=\"line\">    lt.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"渣渣辉\"</span>,<span class=\"number\">25</span>));</span><br><span class=\"line\">    lt.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"掌门人\"</span>,<span class=\"number\">22</span>));</span><br><span class=\"line\">    lt.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"柳师傅\"</span>,<span class=\"number\">21</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    Iterator&lt;Students&gt; ltr = lt.iterator(); <span class=\"comment\">//关键点2(注意泛型集合是什么类型,迭代器便是什么类型)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ltr.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Students obj = ltr.next(); <span class=\"comment\">//这里不用强转</span></span><br><span class=\"line\">      System.out.println(obj.getName() +<span class=\"string\">\" ---- \"</span>+ obj.getAge()); <span class=\"comment\">//注意这里如果调用一次.next()指向的就是下一个对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 渣渣辉 ---- 25</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 掌门人 ---- 22</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 柳师傅 ---- 21</span></span><br><span class=\"line\"><span class=\"comment\">\t\t **/</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.泛型的由来:通过Object转型问题引入</span></span><br><span class=\"line\">    <span class=\"comment\">/* 早期的Object类型可以接收任意的对象类型，但是在实际的使用中，会有类型转换的问题。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 也就存在这隐患，所以Java提供了泛型来解决这个安全问题。</span></span><br><span class=\"line\"><span class=\"comment\">\t\t **/</span></span><br><span class=\"line\">    Tool t = <span class=\"keyword\">new</span> Tool(); <span class=\"comment\">//创建工具类对象</span></span><br><span class=\"line\">    t.setObj(<span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>,<span class=\"number\">24</span>)); <span class=\"comment\">//父类指向子类对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Worker w = (Worker) t.getObj(); <span class=\"comment\">//向下转型</span></span><br><span class=\"line\">    System.out.println(w); <span class=\"comment\">//会出现ClassCastException</span></span><br><span class=\"line\">    <span class=\"comment\">//其实泛型就像是种瓜得瓜种豆得豆一样</span></span><br><span class=\"line\">    <span class=\"comment\">/***执行结果</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Exception in thread \"main\" java.lang.ClassCastException: com.weiyi.generic.Person cannot be cast to com.weiyi.generic.Worker</span></span><br><span class=\"line\"><span class=\"comment\">\tat com.weiyi.generic.Demo1_Generic.main(Demo1_Generic.java:47)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例2演示</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tool</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\">  <span class=\"comment\">//alt + shift + s + r</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> obj;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.obj = obj;   <span class=\"comment\">//父类引用子类对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//继承类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Students</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">super</span>();&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;<span class=\"keyword\">super</span>(name, age);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Students</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">super</span>();&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;<span class=\"keyword\">super</span>(name, age);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h6 id=\"泛型类-方法-接口的概述及使用\"><a href=\"#泛型类-方法-接口的概述及使用\" class=\"headerlink\" title=\"泛型类/方法/接口的概述及使用\"></a>泛型类/方法/接口的概述及使用</h6><p>泛型类概述<T>: 把泛型定义在类上<br>定义格式: <code>public class 类名&lt;泛型类型1,…&gt;</code></p>\n<p>泛型方法概述: 把泛型定义在方法上,如果是静态方法需要在static后加入自己的泛型;<br>定义格式: <code>public &lt;泛型类型&gt; 返回类型 方法名(泛型类型 变量名)</code></p>\n<p>泛型接口概述: 把泛型定义在接口上<br>定义格式: <code>public interface 接口名&lt;泛型类型&gt;</code></p>\n<p>基础案例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.generic;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2_Generic</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.泛型类的使用</span></span><br><span class=\"line\">    Tools&lt;String&gt; tls = <span class=\"keyword\">new</span> Tools&lt;&gt;();</span><br><span class=\"line\">    tls.show(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    tls.showMethod(<span class=\"string\">\"Yes\"</span>);</span><br><span class=\"line\">    tls.showStatic(<span class=\"string\">\"Generic\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.接口泛型</span></span><br><span class=\"line\">    Demo d1 = <span class=\"keyword\">new</span> Demo();</span><br><span class=\"line\">    d1.show(<span class=\"string\">\"Interfaces\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Demo1&lt;String&gt; d2 = <span class=\"keyword\">new</span> Demo1();</span><br><span class=\"line\">    d2.show(<span class=\"string\">\"Interfaces\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例1.泛型类(一个字符大写 常用E)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tools</span>&lt;<span class=\"title\">Q</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Q obj;  <span class=\"comment\">//泛型传入是什么类型就是什么类型</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Q <span class=\"title\">getObj</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> obj;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObj</span><span class=\"params\">(Q obj)</span> </span>&#123;<span class=\"keyword\">this</span>.obj = obj;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(Q str)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"类泛型:\"</span>+str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//示例2.方法泛型最好与类的泛型是一致,如果不一致需要在方法上声明该泛型</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span>&lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title\">showMethod</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法泛型:\"</span>+t); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//示例3.注意:类中静态方法随着类的加载而加载,在加载的时候可能还没出现对象;所以说在静态方法泛型上也必须声明自己的泛型</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;W&gt; <span class=\"keyword\">void</span> <span class=\"title\">showStatic</span><span class=\"params\">(W w)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"静态方法泛型:\"</span>+w);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//示例2.泛型接口(一个字符大写 常用E)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Inter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方式1：推荐方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(String t)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"泛型接口-示例1:\"</span>+t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方式2：没有必要在使用接口的时候指定泛型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Inter</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"泛型接口-示例2:\"</span>+t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类泛型:Hello World!</span><br><span class=\"line\">方法泛型:Yes</span><br><span class=\"line\">静态方法泛型:Generic</span><br><span class=\"line\">泛型接口-示例<span class=\"number\">1</span>:Interfaces</span><br><span class=\"line\">泛型接口-示例<span class=\"number\">2</span>:Interfaces</span><br></pre></td></tr></table></figure></p>\n<p>注意事项: 泛型类型必须是<code>引用类型</code>;</p>\n<p><br></p>\n<h6 id=\"泛型高级之通配符\"><a href=\"#泛型高级之通配符\" class=\"headerlink\" title=\"泛型高级之通配符\"></a>泛型高级之通配符</h6><p>描述:泛型通配符&lt;?&gt;, 任意类型如果引用类型没有明确，那么就是Object以及任意的Java类了;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? extends E  向下限定，E及其子类</span><br><span class=\"line\">? super E    向上限定，E及其父类</span><br></pre></td></tr></table></figure><br>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.generic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_Generic</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.当右边的泛型不确定时,左边可以指定为?</span></span><br><span class=\"line\">    List&lt;?&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例2.通配符案例验证</span></span><br><span class=\"line\">    ArrayList&lt;Study&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Study(<span class=\"string\">\"1.王老五\"</span>, <span class=\"number\">15</span>)); <span class=\"comment\">//子类</span></span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Study(<span class=\"string\">\"2.王老吉\"</span>, <span class=\"number\">15</span>));</span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Study(<span class=\"string\">\"3.王老四\"</span>, <span class=\"number\">15</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    ArrayList&lt;Students&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    list2.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"4.测试\"</span>,<span class=\"number\">25</span>));  <span class=\"comment\">//父类</span></span><br><span class=\"line\">    list2.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"5.学生类\"</span>,<span class=\"number\">25</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    list2.addAll(list1);   <span class=\"comment\">//父类添加拼接子类的集合 （注意不能父类强制转换成为子类list1.addAll(list2))</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"输出结果:\"</span>+list2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实例1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Study</span> <span class=\"keyword\">extends</span> <span class=\"title\">Students</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Study</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出结果:[Students [name=<span class=\"number\">4</span>.测试, age=<span class=\"number\">25</span>], Students [name=<span class=\"number\">5</span>.学生类, age=<span class=\"number\">25</span>], Students [name=<span class=\"number\">1</span>.王老五, age=<span class=\"number\">15</span>], Students [name=<span class=\"number\">2</span>.王老吉, age=<span class=\"number\">15</span>], Students [name=<span class=\"number\">3</span>.王老四, age=<span class=\"number\">15</span>]]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"集合框架进阶\"><a href=\"#集合框架进阶\" class=\"headerlink\" title=\"集合框架进阶\"></a>集合框架进阶</h4><p><strong>1.增强for的概述和使用</strong><br>概述:简化数组和Collection集合的遍历,增强for循环底层由迭代器实现;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(元素数据类型 变量 : 数组或者Collection集合) &#123;</span><br><span class=\"line\">  使用变量即可，该变量就是元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>基础实例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#实例</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.generic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_For</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.增强for遍历数组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//foreach 迭代(值得学习)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : arr) &#123;</span><br><span class=\"line\">      System.out.print(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例2.增强for遍历集合存储元素</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String param : list) &#123;</span><br><span class=\"line\">      System.out.print(param+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//实例3.ArrayList存储字符串和自定义对象并遍历增强for版</span></span><br><span class=\"line\">    ArrayList&lt;Students&gt; list1  = <span class=\"keyword\">new</span> ArrayList&lt;Students&gt;();</span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"渣渣哥\"</span>, <span class=\"number\">27</span>));</span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"刘师傅\"</span>, <span class=\"number\">26</span>));</span><br><span class=\"line\">    list1.add(<span class=\"keyword\">new</span> Students(<span class=\"string\">\"帐老师\"</span>, <span class=\"number\">27</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Students param : list1) &#123;</span><br><span class=\"line\">      System.out.println(param);  <span class=\"comment\">//这里是由于重写了toString的效果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#执行结果:</span></span><br><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">22</span> <span class=\"number\">33</span> <span class=\"number\">44</span> <span class=\"number\">55</span> </span><br><span class=\"line\">a b c d </span><br><span class=\"line\">Students [name=渣渣哥, age=<span class=\"number\">27</span>]</span><br><span class=\"line\">Students [name=刘师傅, age=<span class=\"number\">26</span>]</span><br><span class=\"line\">Students [name=帐老师, age=<span class=\"number\">27</span>]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>2.三种迭代的能否删除</strong></p>\n<ul>\n<li>普通for循环,可以删除,但是索引要– (自减)</li>\n<li>迭代器,可以删除,但是必须使用迭代器自身的remove方法,否则会出现并发修改异常</li>\n<li>增强for循环不能删除<br>基础实例:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyi.generic;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weiyi.Collection.Students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_RemoveCollection</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例1.三种迭代方法是否能进行删除</span></span><br><span class=\"line\">    ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    list.add(<span class=\"string\">\"a\"</span>); </span><br><span class=\"line\">    list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"WeiyiGeek\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//(1)如果要删除的元素是挨着的,普通循环只能对其index索引减减&lt;-重点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"string\">\"a\"</span>.equals(list.get(i)))</span><br><span class=\"line\">        list.remove(i--); <span class=\"comment\">//注意这里是先赋值,再减减</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//(2)迭代器删除</span></span><br><span class=\"line\">    Iterator&lt;String&gt; it = list.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"string\">\"b\"</span>.equals(it.next()))</span><br><span class=\"line\">        <span class=\"comment\">//注意这里不能使用集合的删除方法会导致并发修改异常(迭代过程中进行了修改),因为迭代过程中如果集合被修改,便会导致迭代修改异常</span></span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//宁一种方式 与上面的区别就是 不能重复使用迭代器it1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Iterator&lt;String&gt; it1 = list.iterator(); it.hasNext();)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"string\">\"c\"</span>.equals(it1.next()))</span><br><span class=\"line\">        it1.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//(3)增强for循环不能删除只可以遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String param: list)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"string\">\"c\"</span>.equals(param))</span><br><span class=\"line\">        <span class=\"comment\">//list.remove(param);</span></span><br><span class=\"line\">        System.out.println(param);</span><br><span class=\"line\">    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"外层 : \"</span> +  param);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(list);\t\t</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n执行结果:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c</span><br><span class=\"line\">外层 : c</span><br><span class=\"line\">外层 : WeiyiGeek</span><br><span class=\"line\">[c, WeiyiGeek]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<p><strong>3.集合嵌套之ArrayList嵌套ArrayList</strong><br>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.weiyi.Collection.Students;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo3_ArrayLists &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(String[] args) &#123;</span><br><span class=\"line\">    //示例：集合嵌套ArrayList中的ArrayList</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Students&gt;&gt; list = new ArrayList&lt;ArrayList&lt;Students&gt;&gt;(); //当做一个年级</span><br><span class=\"line\">    ArrayList&lt;Students&gt; first = new ArrayList&lt;Students&gt;(); //第一个班级</span><br><span class=\"line\">    first.add(new Students(<span class=\"string\">\"张伟\"</span>,25));</span><br><span class=\"line\">    first.add(new Students(<span class=\"string\">\"大张伟\"</span>,25));</span><br><span class=\"line\">    first.add(new Students(<span class=\"string\">\"纳音\"</span>,25));</span><br><span class=\"line\"></span><br><span class=\"line\">    ArrayList&lt;Students&gt; seconde = new ArrayList&lt;Students&gt;(); //第二个班级</span><br><span class=\"line\">    seconde.add(new Students(<span class=\"string\">\"Love\"</span>, 99));</span><br><span class=\"line\">    seconde.add(new Students(<span class=\"string\">\"Test\"</span>, 199));</span><br><span class=\"line\"></span><br><span class=\"line\">    //将班级加到年级集合中</span><br><span class=\"line\">    list.add(first);</span><br><span class=\"line\">    list.add(seconde);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //遍历学科集合(值得学习)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ArrayList&lt;Students&gt; x: list) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Students y : x) &#123;</span><br><span class=\"line\">        System.out.println(y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#执行结果</span></span><br><span class=\"line\">Students [name=张伟, age=25]</span><br><span class=\"line\">Students [name=大张伟, age=25]</span><br><span class=\"line\">Students [name=纳音, age=25]</span><br><span class=\"line\">Students [name=Love, age=99]</span><br><span class=\"line\">Students [name=Test, age=199]</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"集合异常\"><a href=\"#集合异常\" class=\"headerlink\" title=\"集合异常\"></a>集合异常</h4><p><strong>问题1:集合框架(并发修改异常产生的原因及解决方案)</strong><br>ListIterator常用方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span>是否有下一个</span></span><br><span class=\"line\"><span class=\"function\">* <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span>是否有前一个</span></span><br><span class=\"line\"><span class=\"function\">* Object <span class=\"title\">next</span><span class=\"params\">()</span>返回下一个元素</span></span><br><span class=\"line\"><span class=\"function\">* Object <span class=\"title\">previous</span><span class=\"params\">()</span></span>;返回上一个元素</span><br></pre></td></tr></table></figure></p>\n<p>案例演示需求：我有一个集合，请问，我想判断里面有没有”world”这个元素，如果有，我就添加一个”javaee”元素，请写代码实现。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.Collection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ListIterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo5_ListIterator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//方式1：</span></span><br><span class=\"line\">    List list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    list.add(<span class=\"string\">\"Weiyi\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">    list.add(<span class=\"string\">\"Geek\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//采用：常规Iterator迭代器</span></span><br><span class=\"line\">    Iterator it = list.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(it.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      String str = (String)it.next();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(str.equals(<span class=\"string\">\"world\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//list.add(\"JavaEE\") //这里会抛出ConcurrentModificationException并发修改异常</span></span><br><span class=\"line\">      <span class=\"comment\">//迭代器遍历集合修改集合,异常由于迭代器已经知道集合的个数,然而在迭代的时候又添加了集合元素所以导致异常</span></span><br><span class=\"line\">      <span class=\"comment\">//所以采用此种方法</span></span><br><span class=\"line\">        flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">      list.add(<span class=\"string\">\"JavaEE\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方法1:\"</span> + list);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方式2：</span></span><br><span class=\"line\">    <span class=\"comment\">//* a:迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)</span></span><br><span class=\"line\">    <span class=\"comment\">//* b:集合遍历元素，集合修改元素</span></span><br><span class=\"line\">    ListIterator lit = list.listIterator();\t\t<span class=\"comment\">//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lit.hasNext()) &#123;</span><br><span class=\"line\">      String str = (String)lit.next();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(str.equals(<span class=\"string\">\"world\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//它会立即在找到world后面进行添加javaee</span></span><br><span class=\"line\">        lit.add(<span class=\"string\">\"javaee\"</span>);\t<span class=\"comment\">//关键点 lit的 ListIterator在迭代的过程中添加元素对象;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2:\"</span>+list);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//###########执行结果##############</span></span><br><span class=\"line\">方法<span class=\"number\">1</span>:[Weiyi, world, Geek, JavaEE]</span><br><span class=\"line\">方式<span class=\"number\">2</span>:[Weiyi, world, javaee, Geek, JavaEE]</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]<br>","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"JAVA","path":"api/tags/JAVA.json"}]}