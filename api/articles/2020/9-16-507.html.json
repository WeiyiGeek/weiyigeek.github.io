{"title":"Flask中ORM框架之SQLAlchemy插件入门到弃坑","slug":"编程世界/Python/Web开发/Flask/扩展进阶/Flask中ORM框架之SQLAlchemy插件入门到弃坑","date":"2020-09-16T12:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2020/9-16-507.html","path":"api/articles/2020/9-16-507.html.json","covers":["https://img.weiyigeek.top/2020/1/20200905120348.png","https://img.weiyigeek.top/2020/1/20201017150942.png","https://img.weiyigeek.top/2020/1/20201012223637.png","https://img.weiyigeek.top/2020/1/20201021230606.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h3 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h3><p>Q: 什么是ORM框架?它有何作用?</p>\n<blockquote>\n<p>答:</p>\n</blockquote>\n<p>Q: 什么是SQLAlchemy?它有何作用?</p>\n<blockquote>\n<p>答: </p>\n</blockquote>\n<p>Q: 什么是Flask-SQLAlchemy扩展?它有何作用?</p>\n<blockquote>\n<p>答: 他是基于SQLAlchemy框架针对于Flask进行优化与封装的数据库框架, 可以帮助开发者快速进行应用开发与不同数据库之间的数据存储, 还能结合Flask-Migrate实现数据库的迁移与回滚;</p>\n</blockquote>\n<p>官网地址：<a href=\"http://flask-sqlchemy.pocoo.org\" target=\"_blank\" rel=\"noopener\">http://flask-sqlchemy.pocoo.org</a></p>\n<p>设置数据库字段模型便于创建表以及追加字段和CURD</p>\n<h3 id=\"0x01-框架初识\"><a href=\"#0x01-框架初识\" class=\"headerlink\" title=\"0x01 框架初识\"></a>0x01 框架初识</h3><h4 id=\"1-安装与配置\"><a href=\"#1-安装与配置\" class=\"headerlink\" title=\"1.安装与配置\"></a>1.安装与配置</h4><p>Step 1.Flask-SQLAlchemy 扩展安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure></p>\n<p>Step 2.Flask-SQLAlchemy 扩展配置：<br>描述: 需要使用Flask 的 <code>app = Flask(__name__)</code> 进行 SQLAlchemy 对象构建, 在开发过程中常常使用懒加载方法 init_app 方法进行扩展的加载使用;</p>\n<p>Step 3.配置数据库连接字符串说明与实例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据库连接字符串通用: 数据库+驱动://用户名:密码@主机:端口/具体库?参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SQLAlchemy 各数据库链接使用案例</span></span><br><span class=\"line\"><span class=\"comment\"># SQLite</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>] = <span class=\"string\">\"sqlite:///sqlite.db\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># MySQL ：需要额外安装 pymysql 库(Python3中)</span></span><br><span class=\"line\">app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>] = <span class=\"string\">\"mysql+pymysql://root:weiyigeek@localhost:3306/Flask_Hello\"</span></span><br></pre></td></tr></table></figure></p>\n<p>Step 4.项目环境决定数据库链接自定义配置</p>\n<ul>\n<li>(1) 开发环境(Development)：开发人员把代码拉取到本地环境中进行开发，等开发完成后推送到开发环境中(让项目的开发人员查看)</li>\n<li>(2) 测试环境(Testing)：测试人员使用</li>\n<li>(3) 演示环境(Staging): 产品经理查看以及正式上线前的彩排</li>\n<li>(4) 生产环境(Product): 针对于广大的互联网使用者;</li>\n</ul>\n<p>如下示例根据需要切换项目场景<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Day3\\App\\setting.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> redis <span class=\"keyword\">import</span> Redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_db_uri</span><span class=\"params\">(dbinfo)</span>:</span></span><br><span class=\"line\">  engine = dbinfo.get(<span class=\"string\">\"ENGINE\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"sqlite\"</span></span><br><span class=\"line\">  driver = dbinfo.get(<span class=\"string\">\"DRIVER\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"sqlite\"</span></span><br><span class=\"line\">  user = dbinfo.get(<span class=\"string\">\"USER\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  password = dbinfo.get(<span class=\"string\">\"PASSWORD\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  host = dbinfo.get(<span class=\"string\">\"HOST\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  port = dbinfo.get(<span class=\"string\">\"PORT\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  name = dbinfo.get(<span class=\"string\">\"NAME\"</span>) <span class=\"keyword\">or</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 数据库连接字符串通用: 数据库+驱动://用户名:密码@主机:端口/具体库?参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> engine == <span class=\"string\">\"sqlite\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;&#125;:///&#123;&#125;\"</span>.format(engine,name)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;&#125;+&#123;&#125;://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;\"</span>.format(engine,driver,user,password,host,port,name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开发环境 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevelopConfig</span>:</span></span><br><span class=\"line\">  DEBUG = <span class=\"literal\">True</span></span><br><span class=\"line\">  SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br><span class=\"line\">  DBINFO = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ENGINE\"</span>: <span class=\"string\">\"sqlite\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NAME\"</span>: <span class=\"string\">\"sqlite.db\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DBURI = get_db_uri(DBINFO)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成环境</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductConfig</span>:</span></span><br><span class=\"line\">  DEBUG = <span class=\"literal\">False</span></span><br><span class=\"line\">  TESTING = <span class=\"literal\">False</span></span><br><span class=\"line\">  SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br><span class=\"line\">  DBINFO = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ENGINE\"</span>: <span class=\"string\">\"mysql\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"DRIVER\"</span>: <span class=\"string\">\"pymysql\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"USER\"</span>: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"PASSWORD\"</span>: <span class=\"string\">\"Weiyi123456.\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"HOST\"</span>: <span class=\"string\">\"10.20.72.24\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"PORT\"</span>: <span class=\"string\">\"3306\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NAME\"</span>: <span class=\"string\">\"FlaskTest\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  DBURI = get_db_uri(DBINFO)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 环境切换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_param</span><span class=\"params\">(app)</span>:</span></span><br><span class=\"line\">  devconfig = DevelopConfig.DBURI</span><br><span class=\"line\">  proconfig = ProductConfig.DBURI</span><br><span class=\"line\">  app.config[<span class=\"string\">'SQLALCHEMY_DATABASE_URI'</span>] = proconfig</span><br><span class=\"line\">  app.config[<span class=\"string\">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class=\"literal\">False</span>    <span class=\"comment\"># 保持兼容性及它是一个在将来被添加进来的特性</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200905120348.png\" alt=\"WeiyiGeek.Mysql正式环境\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Mysql正式环境</p>\n            </figure></p>\n<hr>\n<h4 id=\"2-扩展基础使用\"><a href=\"#2-扩展基础使用\" class=\"headerlink\" title=\"2.扩展基础使用\"></a>2.扩展基础使用</h4><ul>\n<li>使用Models进行模型定义</li>\n<li>使用Column创建字段</li>\n<li>使用SQLAlchemy对象进行创建数据库(create_all)以及删除数据库(drop_all);</li>\n</ul>\n<h3 id=\"0x02-基础知识\"><a href=\"#0x02-基础知识\" class=\"headerlink\" title=\"0x02 基础知识\"></a>0x02 基础知识</h3><h4 id=\"0-模型信息\"><a href=\"#0-模型信息\" class=\"headerlink\" title=\"0.模型信息\"></a>0.模型信息</h4><p>描述: 主要针对于模型信息的指定设置例如以下关键字方法;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-表名称指定</span></span><br><span class=\"line\">__tablename__ = <span class=\"string\">\"example\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-模型继承</span></span><br><span class=\"line\"><span class=\"comment\"># 注意默认继承并不会报错，它会将多个模型的数据映射到一张表之中，不好之处是可能导致数据混乱并不能满足基本使用，而抽象模型正好解决该问题，它不会在数据库中产生映射;</span></span><br><span class=\"line\">__abstract__ = True</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"1-字段类型\"><a href=\"#1-字段类型\" class=\"headerlink\" title=\"1.字段类型\"></a>1.字段类型</h4><p>描述：其主要用于定制模型继承Model和创建字段时指定类型;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.普通整数一般是32位</span></span><br><span class=\"line\">Numeric</span><br><span class=\"line\">decimal.Decimal</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.实际上都是整型的只是继承后然后改改名称不同而已;</span></span><br><span class=\"line\">Integer       <span class=\"comment\"># 普通整数，一般是32位</span></span><br><span class=\"line\">SmallInteger  <span class=\"comment\"># 取值范围小的整数，一般是16位</span></span><br><span class=\"line\">BigInteger    <span class=\"comment\"># 不限制精度的整数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.浮点型</span></span><br><span class=\"line\">Float</span><br><span class=\"line\">Real</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.字符串(文本)类型</span></span><br><span class=\"line\">String  <span class=\"comment\"># 变长字符串</span></span><br><span class=\"line\">Text    <span class=\"comment\"># 变长字符串，对较长或不限长度的字符串做了优化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.经Unicode编码后的类型</span></span><br><span class=\"line\">Unicode</span><br><span class=\"line\">Unicode Text  <span class=\"comment\">#变长Unicode字符串，对较长或不限长度的字符串做了优化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.布尔值关系型数据库一般不支持用0、1代替</span></span><br><span class=\"line\">Boolean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.日期时间性</span></span><br><span class=\"line\">Date</span><br><span class=\"line\">Time  </span><br><span class=\"line\">Datetime  <span class=\"comment\">#日期和时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.二进制类型</span></span><br><span class=\"line\">LargerBinary</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"2-字段选项\"><a href=\"#2-字段选项\" class=\"headerlink\" title=\"2.字段选项\"></a>2.字段选项</h4><p>常用的<code>SQLAlchemy</code>中的列选项:</p>\n<table>\n<thead>\n<tr>\n<th>选项名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary_key</td>\n<td>如果为True，代表表的主键</td>\n</tr>\n<tr>\n<td>autoincrement</td>\n<td>如果为Trye，表示该字段自增</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>如果为True，代表这列不允许出现重复的值</td>\n</tr>\n<tr>\n<td>index</td>\n<td>如果为True，为这列创建索引，提高查询效率</td>\n</tr>\n<tr>\n<td>nullable</td>\n<td>如果为True，允许有空值，如果为False，不允许有空值</td>\n</tr>\n<tr>\n<td>default</td>\n<td>为这列定义默认值</td>\n</tr>\n</tbody>\n</table>\n<p>Q: 模型中外键ForeignKey的构建?<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\">db.Column(db.类型, db.ForeignKey(模型类名称.字段))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础参数</span></span><br><span class=\"line\">class Animal(db.Model):</span><br><span class=\"line\">  Id = db.Column(db.Interger, primary_key=True, autoincrement=True)</span><br><span class=\"line\">  Type = db.Column(db.String(32), default=<span class=\"string\">\"动物类型\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog(db.Model):</span><br><span class=\"line\">  DId = db.Column(db.Interger, db.ForeignKey(Animal.Id))  <span class=\"comment\"># 创建外键</span></span><br><span class=\"line\">  DName = db.Column(db.String(<span class=\"string\">\"32\"</span>), default=<span class=\"string\">\"动物名称\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Q: 模型中外键的反向引用级联查询如何构建?</p>\n<ul>\n<li>答: 官方文档使用关系 <code>relationship</code> 进行 <code>外键的反向引用</code>即级联查询，注意点他不是映射在数据库之中的他实际上是Django的隐型属性; <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\">外键反向引用名称 = db.relationship(<span class=\"string\">'有外键的表(模型类名称)'</span>, backref=<span class=\"string\">'自身模型类名称'</span>, lazy=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础用法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'animal_dog'</span></span><br><span class=\"line\">  d_eat = db.Column(db.String(<span class=\"number\">32</span>), default=<span class=\"string\">\"bone\"</span>)</span><br><span class=\"line\">  d_age = db.Column(db.Integer, default=<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 外键反向引用</span></span><br><span class=\"line\">  d_fdog = db.relationship(<span class=\"string\">'FDog'</span>, backref=<span class=\"string\">'Dog'</span>, lazy=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FDog</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'fdog'</span></span><br><span class=\"line\">  id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>, autoincrement=<span class=\"literal\">True</span>)  <span class=\"comment\"># SQLAlchemy 要求 模型中必须有一个主键否则保存</span></span><br><span class=\"line\">  comment = db.Column(db.String(<span class=\"number\">255</span>), default=<span class=\"string\">\"备注描述说明\"</span>)</span><br><span class=\"line\">  fid = db.Column(db.Integer, db.ForeignKey(Dog.id))  <span class=\"comment\"># 注意外键的字段不能是主键</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Q: 什么时候对字段使用Index索引?</p>\n<blockquote>\n<p>答: 学过数据库的人都应该知道索引是为了加快在关系型数据库中数据的查找, 所以一般常常加在被搜索的字段之上;</p>\n</blockquote>\n<p><br/></p>\n<h4 id=\"3-常用方法\"><a href=\"#3-常用方法\" class=\"headerlink\" title=\"3.常用方法\"></a>3.常用方法</h4><p><br></p>\n<h4 id=\"4-查询方法\"><a href=\"#4-查询方法\" class=\"headerlink\" title=\"4.查询方法\"></a>4.查询方法</h4><p>常用查询数据结果集:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">模型类名.query.xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询集</span></span><br><span class=\"line\">all()   <span class=\"comment\"># 返回查询到的所有数据集，返回格式list</span></span><br><span class=\"line\">first() <span class=\"comment\"># 返回查询到的第一行数据集</span></span><br><span class=\"line\">get(index)   <span class=\"comment\"># 返回指定索引的数据结果集</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 条件查询</span></span><br><span class=\"line\">filter(类名.属性[类名] 操作运算符 值)  <span class=\"comment\"># 指定查询条件(复杂) 返回Basequery对象</span></span><br><span class=\"line\">filter(类名.属性[类名].魔术方法(<span class=\"string\">\"xx\"</span>))  <span class=\"comment\"># 指定查询条件(复杂) 返回Basequery对象</span></span><br><span class=\"line\">filter_by(字段 数学运算符 值)          <span class=\"comment\"># 指定查询条件(简单) 常用于级联数据条件语法精准</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 筛选</span></span><br><span class=\"line\">offset()  <span class=\"comment\"># 偏移</span></span><br><span class=\"line\"><span class=\"built_in\">limit</span>()   <span class=\"comment\"># 限制数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序(ASC / DESC)</span></span><br><span class=\"line\">order_by(text(<span class=\"string\">\"-id\"</span>)) </span><br><span class=\"line\">order_by(text(<span class=\"string\">\"id desc\"</span>)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进阶</span></span><br></pre></td></tr></table></figure></p>\n<p>常用运算符:</p>\n<p>比较运算符<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__str__   <span class=\"comment\">#  魔术方法执行的SQL语句字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较运算符</span></span><br><span class=\"line\">__eq__,==   <span class=\"comment\"># == 实际调用也是前者魔术方法</span></span><br><span class=\"line\">__lt__,&lt;    </span><br><span class=\"line\">__gt__,&gt;    </span><br><span class=\"line\">__le__,&lt;=</span><br><span class=\"line\">__ge__,&gt;=</span><br></pre></td></tr></table></figure></p>\n<p>逻辑运算:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 与 | and_ </span></span><br><span class=\"line\">filter(and_(条件), 条件...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或 | or_</span></span><br><span class=\"line\">filter(or_(条件), 条件...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非 | not_</span></span><br><span class=\"line\">filter(not_(条件), 条件...)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contains    # 包含</span><br><span class=\"line\">startswith  # 开始匹配</span><br><span class=\"line\">endswith    # 结束匹配</span><br><span class=\"line\"></span><br><span class=\"line\">in_         # 包含在一个列表中</span><br><span class=\"line\"></span><br><span class=\"line\">like        # 找相似的字符串的数据</span><br></pre></td></tr></table></figure>\n<p>简单实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.返回id为2的结果集</span></span><br><span class=\"line\">Cat.query.filter(Cat.id.__eq__(2))</span><br><span class=\"line\">Cat.query.filter(Cat.id == 2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.姓名包含\"喵\"的结果集</span></span><br><span class=\"line\">Cat.query.filter(Cat.name.contains(<span class=\"string\">\"喵\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.偏移1个索引从第二行数据开始只显示两行数据即(2-3)行</span></span><br><span class=\"line\">Cat.query.offset(1).<span class=\"built_in\">limit</span>(2)</span><br><span class=\"line\">Cat.query.order_by(<span class=\"string\">'-id'</span>).offset(1).<span class=\"built_in\">limit</span>(3)  <span class=\"comment\"># 倒序 1.2.x  方式2 =&gt; 'id desc'</span></span><br><span class=\"line\">Cat.query.order_by(text(<span class=\"string\">\"id desc\"</span>)).offset(1).<span class=\"built_in\">limit</span>(3)  <span class=\"comment\"># 1.3.x  方式2 =&gt; text(\"id desc\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.分页简单实现</span></span><br><span class=\"line\">Cat.query.offset( (page_num -1) * count ).<span class=\"built_in\">limit</span>(count).all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.Flask-SQLAlchemy 自带分页</span></span><br><span class=\"line\">Cat.query.paginate(page=None, per_page=None, error_out=True, max_per_page=None).items</span><br><span class=\"line\"><span class=\"comment\"># 分页定义</span></span><br><span class=\"line\"><span class=\"comment\"># def paginate(self, page=None, per_page=None, error_out=True, max_per_page=None): </span></span><br><span class=\"line\"><span class=\"comment\"># self.query = query  #: pagination object. 对象</span></span><br><span class=\"line\"><span class=\"comment\"># self.page = page    #: the current page number (1 indexed) 当前页数量</span></span><br><span class=\"line\"><span class=\"comment\"># self.per_page = per_page  #: the number of items to be displayed on a page. 每页显示多少条</span></span><br><span class=\"line\"><span class=\"comment\"># self.total = total  #: the total number of items matching the query  总页数</span></span><br><span class=\"line\"><span class=\"comment\"># self.items = items  #: the items for the current page  当前页的项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.逻辑运算符多重条件展示</span></span><br><span class=\"line\">Cat.query.filter(Cat.cid.__eq__(1)).filter(Cat.name.endswith(<span class=\"string\">'4'</span>))  <span class=\"comment\"># id为1并且名称以4结尾的项</span></span><br><span class=\"line\">Cat.query.filter(and_(Cat.cid.__eq__(1), Cat.name.endswith(<span class=\"string\">'4'</span>)))</span><br><span class=\"line\">Cat.query.filter(not_(or_(Cat.cid.__eq__(1), Cat.name.endswith(<span class=\"string\">'4'</span>))))  <span class=\"comment\"># 取反id不为1或者结尾不为4的项</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例:</p>\n<ul>\n<li>模板Templates：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>分页测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>分页测试1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-hover\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid black;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>食物<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      &#123;% for user in dogs %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.d_eat &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.d_age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>分页测试2<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-hover\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"1px solid red;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>食物<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      &#123;% for user in pagination.items %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.d_eat &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; user.d_age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;% macro render_pagination(pagination,current_page,current_count,end) %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">pagination</span>&gt;</span></span><br><span class=\"line\">    &#123;% if page != 1 %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for('demo3.get_dogs_paginate') &#125;&#125;?page=1&amp;count=&#123;&#123; per_page &#125;&#125;\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;%- for page in pagination.iter_pages() %&#125;</span><br><span class=\"line\">    &#123;% if page %&#125;</span><br><span class=\"line\">      &#123;% if page != pagination.page %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for('demo3.get_dogs_paginate') &#125;&#125;?page=&#123;&#123; page &#125;&#125;&amp;count=&#123;&#123; per_page &#125;&#125;\"</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      &#123;% else %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">ellipsis</span>&gt;</span>…<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">  &#123;%- endfor %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;% if current_page != end %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; url_for('demo3.get_dogs_paginate') &#125;&#125;?page=&#123;&#123; end &#125;&#125;&amp;count=&#123;&#123; per_page &#125;&#125;\"</span>&gt;</span>尾页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>  数据共<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span> &#123;&#123; total &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>条 , 跳转到<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page_num\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"&#123;&#123; end &#125;&#125;\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; current_page &#125;&#125;\"</span>/&gt;</span>页, 每页显示<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"per_page_num\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&#123;&#123; current_count &#125;&#125;\"</span>/&gt;</span>条<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"跳转\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"goto\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"goto()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endmacro %&#125;</span><br><span class=\"line\">&#123;&#123; render_pagination(pagination,page,per_page,end) &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">goto</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> page = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"page_num\"</span>).value;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> per_page = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"per_page_num\"</span>).value;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">if</span> ( page * per_page &gt; &#123;&#123; total &#125;&#125; )&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    alert(<span class=\"string\">\"显示超出返回值范围!\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"&#123;&#123; url_for('demo3.get_dogs_paginate') &#125;&#125;?page=\"</span>+page+<span class=\"string\">\"&amp;count=\"</span>+per_page;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>蓝图视图代码<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Day3\\App\\views\\demo\\demo3.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint,render_template,request</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.models <span class=\"keyword\">import</span> db,Dog,Cat</span><br><span class=\"line\"></span><br><span class=\"line\">d3 = Blueprint(<span class=\"string\">\"demo3\"</span>, __name__, url_prefix=<span class=\"string\">\"/add\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/getdogs/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dogs</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  page = request.args.get(<span class=\"string\">\"page\"</span>,<span class=\"number\">1</span>,type=int)</span><br><span class=\"line\">  per_page = request.args.get(<span class=\"string\">\"count\"</span>,<span class=\"number\">10</span>,type=int)</span><br><span class=\"line\">  Dogs = Dog.query.offset((page - <span class=\"number\">1</span>) * per_page).limit(per_page).all()</span><br><span class=\"line\">  type(Dogs)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> render_template(<span class=\"string\">'User/show.html'</span>,dogs=Dogs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/getpaginate/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dogs_paginate</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  page = request.args.get(<span class=\"string\">\"page\"</span>,<span class=\"number\">1</span>,type=int)</span><br><span class=\"line\">  per_page = request.args.get(<span class=\"string\">\"count\"</span>,<span class=\"number\">10</span>,type=int)</span><br><span class=\"line\">  Dogs = Dog.query.paginate(page,per_page)</span><br><span class=\"line\">  print(<span class=\"string\">\"数据总条数:%d\"</span> % Dogs.total)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> render_template(<span class=\"string\">'User/show.html'</span>,dogs=Dogs.items, total=Dogs.total, pagination=Dogs, per_page=per_page, page=page, end=round(Dogs.total/per_page))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果:</span></span><br><span class=\"line\"><span class=\"comment\"># http://127.0.0.1:8000/add/getdogs/?page=5&amp;count=10</span></span><br><span class=\"line\"><span class=\"comment\"># http://127.0.0.1:8000/add/getpaginate/?page=8&amp;count=10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20201017150942.png\" alt=\"WeiyiGeek.paginate\" title=\"\" class=\"\">\n                <p>WeiyiGeek.paginate</p>\n            </figure>\n</li>\n</ul>\n<p>补充说明:</p>\n<ul>\n<li>(1) 在Flask-SQLAchemy里筛选中的all()只能放在最后且后面不能加filter()等过滤条件;</li>\n<li>(2) 在筛选中offset与limit是不区分顺序的, 并且order_by必须放在前两者之前;</li>\n</ul>\n<p>创建库表，库手动创建，而表采用SQLAlchemy对象 create_all ,删除则通过drop_all，其缺陷不能差量更新</p>\n<p>数据库操作 - 存储 创建对象 即SQLAlchemy.session.add() 然后在执行commit()</p>\n<p>补充SQLalchemy Query帮助文档</p>\n<blockquote>\n<p> <a href=\"https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/\" target=\"_blank\" rel=\"noopener\">https://flask-sqlalchemy.palletsprojects.com/en/2.x/queries/</a><br> <a href=\"http://www.pythondoc.com/flask-sqlalchemy/quickstart.html\" target=\"_blank\" rel=\"noopener\">http://www.pythondoc.com/flask-sqlalchemy/quickstart.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\">Users.query.filter(<span class=\"string\">'条件'</span>).order(<span class=\"string\">'字段名'</span>).all()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\">db.session.query(TableName.colum1, func.count(TableName.colum1)).filter(<span class=\"string\">'条件'</span>).group_by(<span class=\"string\">'字段名'</span>).all()</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"0x03-进阶使用实例\"><a href=\"#0x03-进阶使用实例\" class=\"headerlink\" title=\"0x03 进阶使用实例\"></a>0x03 进阶使用实例</h3><h4 id=\"1-模型继承\"><a href=\"#1-模型继承\" class=\"headerlink\" title=\"1.模型继承\"></a>1.模型继承</h4><p>数据库的 Models 中字段定义:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3\\App\\models.py</span></span><br><span class=\"line\"><span class=\"comment\"># 例如以下数据库模型的声明</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(db.Model)</span>:</span></span><br><span class=\"line\">  __abstract__ = <span class=\"literal\">True</span></span><br><span class=\"line\">  id = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>, autoincrement=<span class=\"literal\">True</span>, index=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  name = db.Column(db.String(<span class=\"number\">16</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承 Animal 类由于其定义 `__abstract__ = True` 是抽象的所以Animal模型并不会在数据库中创建而Dog模型继承其字段并会在数据库中创建其字段;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'animal_dog'</span></span><br><span class=\"line\">  d_eat = db.Column(db.String(<span class=\"number\">32</span>), default=<span class=\"string\">\"bone\"</span>)</span><br><span class=\"line\">  d_age = db.Column(db.Integer, default=<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">commit</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    save(self)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#同上</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'animal_cat'</span></span><br><span class=\"line\">  c_eat = db.Column(db.String(<span class=\"number\">32</span>), default=<span class=\"string\">\"fish\"</span>)</span><br><span class=\"line\">  c_age = db.Column(db.Integer, default=<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">commit</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    save(self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3\\App\\views\\demo\\demo3.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint,render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> App.models <span class=\"keyword\">import</span> db,Dog,Cat</span><br><span class=\"line\"><span class=\"meta\">@d3.route(\"/dog/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_dog</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  dogs = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    dog = Dog()</span><br><span class=\"line\">    dog.name = <span class=\"string\">\"阿黄%d号\"</span> % x</span><br><span class=\"line\">    dog.d_eat = <span class=\"string\">\"小黄鱼 %d\"</span> % x</span><br><span class=\"line\">    dog.d_age = x</span><br><span class=\"line\">    dogs.append(dog)</span><br><span class=\"line\"></span><br><span class=\"line\">  db.session.add_all(dogs) <span class=\"comment\"># 添加多条数据</span></span><br><span class=\"line\">  db.session.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Dog add success\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route(\"/cat/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_cat</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  cat = Cat()</span><br><span class=\"line\">  cat.name = <span class=\"string\">\"阿喵\"</span></span><br><span class=\"line\">  cat.c_age = <span class=\"number\">12</span></span><br><span class=\"line\">  cat.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Cat add success\"</span></span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db migrate</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added table <span class=\"string\">'animal_cat'</span></span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added index <span class=\"string\">'ix_animal_cat_id'</span> on <span class=\"string\">'['</span>id<span class=\"string\">']'</span></span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added table <span class=\"string\">'animal_dog'</span></span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added index <span class=\"string\">'ix_animal_dog_id'</span> on <span class=\"string\">'['</span>id<span class=\"string\">']'</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3\\migrations\\versions\\<span class=\"number\">6e1</span>cbc828430_.py ...  done</span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db upgrade</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl SQLiteImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade a0e47b8e1d88 -&gt; 6e1cbc828430, empty message</span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20201012223637.png\" alt=\"WeiyiGeek.模型继承\" title=\"\" class=\"\">\n                <p>WeiyiGeek.模型继承</p>\n            </figure>\n<h4 id=\"2-级联数据与外键\"><a href=\"#2-级联数据与外键\" class=\"headerlink\" title=\"2.级联数据与外键\"></a>2.级联数据与外键</h4><p>描述:级联数据之外键间的关系</p>\n<ul>\n<li>1:1 ForeignKey + Unique</li>\n<li>1:M ForeignKey</li>\n<li>M:N 额外扩充的关系表即多个ForeignKey</li>\n</ul>\n<p>基础实例:</p>\n<ul>\n<li>1.外键与外键反向引用的模型构建</li>\n<li>2.使用关系 relationship 进行<code>外键的反向引用</code>即级联查询;</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Day3\\App\\models.py</span></span><br><span class=\"line\"><span class=\"comment\"># 例如以下数据库模型的声明</span></span><br><span class=\"line\">class Animal(db.Model):</span><br><span class=\"line\">  __abstract__ = True</span><br><span class=\"line\">  id = db.Column(db.Integer, primary_key=True, autoincrement=True, index=True)</span><br><span class=\"line\">  name = db.Column(db.String(16))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继承 Animal 类由于其定义 `__abstract__ = True` 是抽象的所以Animal模型并不会在数据库中创建而Dog模型继承其字段并会在数据库中创建其字段;</span></span><br><span class=\"line\">class Dog(Animal):</span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'animal_dog'</span></span><br><span class=\"line\">  d_eat = db.Column(db.String(32), default=<span class=\"string\">\"bone\"</span>)</span><br><span class=\"line\">  d_age = db.Column(db.Integer, default=0)</span><br><span class=\"line\">  <span class=\"comment\"># 外键反向引用</span></span><br><span class=\"line\">  d_fdog = db.relationship(<span class=\"string\">'FDog'</span>, backref=<span class=\"string\">'Dog'</span>, lazy=True)</span><br><span class=\"line\"></span><br><span class=\"line\">class FDog(db.Model):</span><br><span class=\"line\">  __tablename__ = <span class=\"string\">'fdog'</span></span><br><span class=\"line\">  id = db.Column(db.Integer, primary_key=True, autoincrement=True)  <span class=\"comment\"># SQLAlchemy 要求 模型中必须有一个主键否则保存</span></span><br><span class=\"line\">  comment = db.Column(db.String(255), default=<span class=\"string\">\"备注描述说明\"</span>)</span><br><span class=\"line\">  fid = db.Column(db.Integer, db.ForeignKey(Dog.id))  <span class=\"comment\"># 注意外键的字段不能是主键</span></span><br></pre></td></tr></table></figure>\n<p>创建外键后进行数据库字段迁移升级:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db migrate</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected added table <span class=\"string\">'fdog'</span></span><br><span class=\"line\">Generating E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3\\migrations\\versions\\27b381148478_.py ...  <span class=\"keyword\">done</span></span><br><span class=\"line\">PS E:\\githubProject\\Study-Promgram\\Python3\\Flask\\Day3&gt; python .\\Setup.py db upgrade</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 6e1cbc828430 -&gt; 27b381148478, empty message</span><br></pre></td></tr></table></figure></p>\n<p>视图View蓝图代码:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Day3\\App\\views\\demo\\demo3.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> App.models <span class=\"keyword\">import</span> db,Dog,Cat,FDog</span><br><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> text</span><br><span class=\"line\"></span><br><span class=\"line\">d3 = Blueprint(<span class=\"string\">\"demo3\"</span>, __name__, url_prefix=<span class=\"string\">\"/add\"</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 外键使用插入外键数据</span></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/add_fdog/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_fdog</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  fdog = FDog()</span><br><span class=\"line\">  <span class=\"comment\"># 插入数据根据外键字段中的值排序的规则为倒序</span></span><br><span class=\"line\">  fdog.fid =  Dog.query.order_by(text(<span class=\"string\">\"id desc\"</span>)).first().id</span><br><span class=\"line\">  fdog.comment = <span class=\"string\">\"我是 %d 条记录\"</span> % randrange(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  db.session.add(fdog)</span><br><span class=\"line\">  db.session.commit()</span><br><span class=\"line\">  print(fdog.fid,fdog.comment)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Insert Success fid = &#123;&#125;, fdog.comment = &#123;&#125;'</span>.format(fdog.fid,fdog.comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/get_fdog/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_fdog</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  id = request.args.get(<span class=\"string\">'id'</span>,type=int)</span><br><span class=\"line\">  fdog = FDog.query.get_or_404(id)</span><br><span class=\"line\">  <span class=\"comment\"># 外键常见使用方法</span></span><br><span class=\"line\">  dog = Dog.query.get(fdog.fid)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"外键关联的数据 : id = %d , 名称 = %s , 年龄 = %d ,食物 = %s, 备注描述 = %s\"</span> % (dog.id,dog.name,dog.d_age,dog.d_eat, fdog.comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@d3.route('/get_relationship/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_relationship</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  id = request.args.get(<span class=\"string\">'id'</span>,type=int)</span><br><span class=\"line\">  dog = Dog.query.get(id)</span><br><span class=\"line\">  <span class=\"comment\"># 外键反向引用使用方法(relationship)</span></span><br><span class=\"line\">  rdog = dog.d_fdog</span><br><span class=\"line\">  print(<span class=\"string\">\"\\n\\n\"</span>,type(rdog))  <span class=\"comment\"># 实际是将其封装成为一个列表 &lt;class 'sqlalchemy.orm.attributes.InstrumentedAttribute'&gt; </span></span><br><span class=\"line\">  print(<span class=\"string\">\"外键反向引用或者的数据:\\n\"</span>,rdog,end=<span class=\"string\">\"\\n\\n\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'get_relationship'</span></span><br></pre></td></tr></table></figure></p>\n<p>执行结果:</p>\n<ul>\n<li>外键基础使用:<a href=\"http://127.0.0.1:8000/add/get_fdog/?id=12\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/add/get_fdog/?id=12</a></li>\n<li>外键反向引用:<a href=\"http://127.0.0.1:8000/add/get_relationship/?id=99\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/add/get_relationship/?id=99</a><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;class <span class=\"string\">'sqlalchemy.orm.collections.InstrumentedList'</span>&gt;</span><br><span class=\"line\">外键反向引用或者的数据(列表对象):</span><br><span class=\"line\"> [&lt;FDog 12&gt;, &lt;FDog 13&gt;, &lt;FDog 14&gt;, &lt;FDog 15&gt;, &lt;FDog 16&gt;, &lt;FDog 17&gt;, &lt;FDog 18&gt;, &lt;FDog 19&gt;, &lt;FDog 20&gt;, &lt;FDog 21&gt;, &lt;FDog 22&gt;, &lt;FDog 23&gt;, &lt;FDog 24&gt;, &lt;FDog 25&gt;, &lt;FDog 26&gt;, &lt;FDog 27&gt;, &lt;FDog 28&gt;, &lt;FDog 29&gt;, &lt;FDog 30&gt;, &lt;FDog 31&gt;, &lt;FDog 32&gt;, &lt;FDog 33&gt;]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20201021230606.png\" alt=\"WeiyiGeek.ForignKey\" title=\"\" class=\"\">\n                <p>WeiyiGeek.ForignKey</p>\n            </figure>\n<h4 id=\"入坑出坑\"><a href=\"#入坑出坑\" class=\"headerlink\" title=\"入坑出坑\"></a>入坑出坑</h4><p>问题1.在Flask中的SQLAlchemy设置数据模型的外键(ForeignKey)时候无法启动项目;</p>\n<ul>\n<li>错误信息:<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">\"D:\\Program Files (x86)\\Python37-32\\lib\\site-packages\\sqlalchemy\\orm\\mapper.py\"</span>, line <span class=\"number\">1413</span>, <span class=\"keyword\">in</span> _configure_pks</span><br><span class=\"line\">    % (self, self.persist_selectable.description)</span><br><span class=\"line\">sqlalchemy.exc.ArgumentError: Mapper mapped <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FDog</span>-&gt;fdog could not assemble any primary key columns for mapped table 'fdog'</span></span><br></pre></td></tr></table></figure></li>\n<li>问题原因: 由于创建的模型之中没有创建主键字段</li>\n<li>解决方法: 在该模型中创建一个字段主键即可</li>\n</ul>\n<p>问题2.Textual SQL expression ‘-id’ should be explicitly declared as text(’-id’)</p>\n<ul>\n<li>问题原因:使用的SQLalchemy版本不兼容导致</li>\n<li>解决方法：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原代码： projects = Project.query.filter_by(status=False).order_by(<span class=\"string\">\"-id\"</span>).all()</span><br><span class=\"line\"></span><br><span class=\"line\">from sqlalchemy import text  <span class=\"comment\"># 必须在头文件中导入text模块否则报错 global name ‘text’ is not defined；</span></span><br><span class=\"line\">解决方法： projects = Project.query.filter_by(status=False).order_by(text(<span class=\"string\">\"-id\"</span>)).all()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Python3","path":"api/categories/Python3.json"},{"name":"Web开发","path":"api/categories/Web开发.json"}],"tags":[{"name":"Flask","path":"api/tags/Flask.json"},{"name":"SQLAlchemy","path":"api/tags/SQLAlchemy.json"}]}