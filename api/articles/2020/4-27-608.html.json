{"title":"3.Go语言项目操作Redis数据实践","slug":"编程世界/Go/Extension/3.Go语言项目操作Redis数据实践","date":"2020-04-27T03:16:58.000Z","updated":"2022-03-11T03:43:52.946Z","url":"2020/4-27-608.html","path":"api/articles/2020/4-27-608.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"Go语言编程使用Go-redis库操作Redis数据库\"><a href=\"#Go语言编程使用Go-redis库操作Redis数据库\" class=\"headerlink\" title=\"Go语言编程使用Go-redis库操作Redis数据库\"></a>Go语言编程使用Go-redis库操作Redis数据库</h2><p><strong>快速了解 Redis 数据库</strong><br>描述: Redis是一个开源的内存数据库, Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映射到这些数据结构上。除此之外，通过复制、持久化和客户端分片等特性，我们可以很方便地将Redis扩展成一个能够包含数百GB数据、每秒处理上百万次请求的系统。</p>\n<p><br></p>\n<p><strong>Redis 支持的数据结构</strong></p>\n<ul>\n<li>字符串（strings）</li>\n<li>哈希（hashes）</li>\n<li>列表（lists）</li>\n<li>集合（sets）</li>\n<li>带范围查询的排序集合（sorted sets）</li>\n<li>位图（bitmaps）</li>\n<li>hyperloglogs</li>\n<li>带半径查询和流的地理空间索引等数据结构（geospatial indexes）</li>\n</ul>\n<p><br/></p>\n<p><strong>Redis 应用场景</strong></p>\n<ul>\n<li>高速缓存系统：减轻主数据库（MySQL）的压力 <code>set keyname</code>。</li>\n<li>计数场景：比如微博、抖音中的关注数和粉丝数 <code>incr keyname</code>。</li>\n<li>热门排行榜: 需要排序的场景特别适合使用 <code>ZSET</code>。</li>\n<li>实现消息队列的功能: 简单的队列操作使用list类型实现,L表示从左边(头部)开始插与弹出，R表示从右边(尾部)开始插与弹出,例如<code>&quot;lpush / rpop&quot; - (满足先进先出的队列模式)</code>和<code>&quot;rpush / lpop&quot; - (满足先进先出的队列模式)</code>。</li>\n</ul>\n<p><br></p>\n<h3 id=\"Redis-环境准备\"><a href=\"#Redis-环境准备\" class=\"headerlink\" title=\"Redis 环境准备\"></a>Redis 环境准备</h3><p>描述: 此处使用Docker快速启动一个redis环境，如有不会的朋友可以看我前面关于Docker文章或者百度。</p>\n<p>以下是启动一个redis server，利用docker启动一个名为redis的容器,注意此处的版本为5.0.8、容器名和端口号请根据自己需要设置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -- Server</span></span><br><span class=\"line\">$ docker run --name redis -p 6379:6379 -d redis:5.0.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -- 查看运行的 redis 容器</span></span><br><span class=\"line\">$ docker ps | grep <span class=\"string\">\"redis\"</span></span><br><span class=\"line\">24eb3c6f7bab  redis   <span class=\"string\">\"docker-entrypoint.s…\"</span>   19 months ago   Up 2 weeks  0.0.0.0:6379-&gt;6379/tcp   redis</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -- 查询redis容器资源使用状态 (扩展)</span></span><br><span class=\"line\">$ docker stats redis</span><br><span class=\"line\">CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS</span><br><span class=\"line\">24eb3c6f7bab        redis               0.10%               9.02MiB / 2.77GiB   0.32%               20.8MB / 126MB      33.5MB / 16.2MB     4</span><br></pre></td></tr></table></figure></p>\n<p>以下方法是启动一个 redis-cli 连接上面的 redis server<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -- Client </span></span><br><span class=\"line\">docker run -it --network host --rm redis:5.0.8 redis-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -- 交互式</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it redis bash</span><br><span class=\"line\">root@24eb3c6f7bab:/data<span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">(error) NOAUTH Authentication required.</span><br><span class=\"line\">127.0.0.1:6379&gt; auth weiyigeek.top</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Redis-客户端库安装\"><a href=\"#Redis-客户端库安装\" class=\"headerlink\" title=\"Redis 客户端库安装\"></a>Redis 客户端库安装</h3><p>描述: 在网页项目开发中redis数据库的使用也比较频繁，本节将介绍在Go语言中如何连接操作Redis数据库以及客户库的基本安装和使用。</p>\n<p>Go 语言中常用的Redis Client库:</p>\n<ul>\n<li>redigo : <a href=\"https://github.com/gomodule/redigo\" target=\"_blank\" rel=\"noopener\">https://github.com/gomodule/redigo</a></li>\n<li>go-redis : <a href=\"https://github.com/go-redis/redis\" target=\"_blank\" rel=\"noopener\">https://github.com/go-redis/redis</a></li>\n</ul>\n<p>Tips: 此处我们采用go-redis来连接Redis数据库并进行一系列的操作,因为其支持连接哨兵及集群模式的Redis。</p>\n<p>使用命令下载安装go-redis库: <code>go get -u github.com/go-redis/redis</code></p>\n<p><br/></p>\n<h3 id=\"Redis-数据库连接\"><a href=\"#Redis-数据库连接\" class=\"headerlink\" title=\"Redis 数据库连接\"></a>Redis 数据库连接</h3><p>描述: 前面我们下载并安装了<code>go-redis</code>第三方库, 下面我将分别进行单节点连接和集群连接演示, 并将其封装为package方便后续试验进行调用.</p>\n<h4 id=\"1-Redis单节点连接\"><a href=\"#1-Redis单节点连接\" class=\"headerlink\" title=\"1.Redis单节点连接\"></a>1.Redis单节点连接</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/studygo/Day09/MySQL/mypkg/initredis.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> mypkg</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/go-redis/redis\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个RedisSingleObj结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisSingleObj <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Redis_host <span class=\"keyword\">string</span></span><br><span class=\"line\">  Redis_port <span class=\"keyword\">uint16</span></span><br><span class=\"line\">  Redis_auth <span class=\"keyword\">string</span></span><br><span class=\"line\">  Database   <span class=\"keyword\">int</span></span><br><span class=\"line\">  Db         *redis.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体InitSingleRedis方法: 用于初始化redis数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *RedisSingleObj)</span> <span class=\"title\">InitSingleRedis</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Redis连接格式拼接</span></span><br><span class=\"line\">  redisAddr := fmt.Sprintf(<span class=\"string\">\"%s:%d\"</span>, r.Redis_host, r.Redis_port)</span><br><span class=\"line\">  <span class=\"comment\">// Redis 连接对象: NewClient将客户端返回到由选项指定的Redis服务器。</span></span><br><span class=\"line\">  r.Db = redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">    Addr:        redisAddr,    <span class=\"comment\">// redis服务ip:port</span></span><br><span class=\"line\">    Password:    r.Redis_auth, <span class=\"comment\">// redis的认证密码</span></span><br><span class=\"line\">    DB:          r.Database,   <span class=\"comment\">// 连接的database库</span></span><br><span class=\"line\">    IdleTimeout: <span class=\"number\">300</span>,          <span class=\"comment\">// 默认Idle超时时间</span></span><br><span class=\"line\">    PoolSize:    <span class=\"number\">100</span>,          <span class=\"comment\">// 连接池</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Connecting Redis : %v\\n\"</span>, redisAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 验证是否连接到redis服务端</span></span><br><span class=\"line\">  res, err := r.Db.Ping().Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Connect Failed! Err: %v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Connect Successful! Ping =&gt; %v\\n\"</span>, res)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用程序:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/studygo/Day09/MySQL/demo6/singeredis.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"weiyigeek.top/studygo/Day09/MySQL/mypkg\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实例化RedisSingleObj结构体</span></span><br><span class=\"line\">  conn := &amp;mypkg.RedisSingleObj&#123;</span><br><span class=\"line\">    Redis_host: <span class=\"string\">\"10.20.172.248\"</span>,</span><br><span class=\"line\">    Redis_port: <span class=\"number\">6379</span>,</span><br><span class=\"line\">    Redis_auth: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化连接 Single Redis 服务端</span></span><br><span class=\"line\">  err := conn.InitSingleRedis()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 程序执行完毕释放资源</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> conn.Db.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! Ping() =&gt; PONG</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"2-Redis哨兵模式连接\"><a href=\"#2-Redis哨兵模式连接\" class=\"headerlink\" title=\"2.Redis哨兵模式连接\"></a>2.Redis哨兵模式连接</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个RedisClusterObj结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisSentinelObj <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Redis_master <span class=\"keyword\">string</span></span><br><span class=\"line\">  Redis_addr []<span class=\"keyword\">string</span></span><br><span class=\"line\">  Redis_auth <span class=\"keyword\">string</span></span><br><span class=\"line\">  Db         *redis.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *RedisSentinelObj)</span> <span class=\"title\">initSentinelClient</span><span class=\"params\">()</span><span class=\"params\">(err error)</span></span>&#123;</span><br><span class=\"line\">  r.Db = redis.NewFailoverClient(&amp;redis.FailoverOptions&#123;</span><br><span class=\"line\">    MasterName:    <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">    SentinelAddrs: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"x.x.x.x:26379\"</span>, <span class=\"string\">\"xx.xx.xx.xx:26379\"</span>, <span class=\"string\">\"xxx.xxx.xxx.xxx:26379\"</span>&#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  _, err = rdb.Ping().Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"3-Redis集群模式连接\"><a href=\"#3-Redis集群模式连接\" class=\"headerlink\" title=\"3.Redis集群模式连接\"></a>3.Redis集群模式连接</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个RedisClusterObj结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisClusterObj <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Redis_addr []<span class=\"keyword\">string</span></span><br><span class=\"line\">  Redis_auth <span class=\"keyword\">string</span></span><br><span class=\"line\">  Db         *redis.Client</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *RedisSingleObj)</span> <span class=\"title\">initClusterClient</span><span class=\"params\">()</span><span class=\"params\">(err error)</span></span>&#123;</span><br><span class=\"line\">  r.Db = redis.NewClusterClient(&amp;redis.ClusterOptions&#123;</span><br><span class=\"line\">    Addrs: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\":7000\"</span>, <span class=\"string\">\":7001\"</span>, <span class=\"string\">\":7002\"</span>, <span class=\"string\">\":7003\"</span>, <span class=\"string\">\":7004\"</span>, <span class=\"string\">\":7005\"</span>&#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  _, err = rdb.Ping().Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"4-V8新版本连接方式-重点\"><a href=\"#4-V8新版本连接方式-重点\" class=\"headerlink\" title=\"4.V8新版本连接方式(重点)\"></a>4.V8新版本连接方式(重点)</h4><p>描述: 最新版本的<code>go-redis</code>库是v8版本, 在使用前我们必须进行安装：<code>go get github.com/go-redis/redis/v8</code>。<br>项目地址: <a href=\"https://pkg.go.dev/github.com/go-redis/redis/v8\" target=\"_blank\" rel=\"noopener\">https://pkg.go.dev/github.com/go-redis/redis/v8</a></p>\n<p>注意最新版本的<code>go-redis</code>库相关命令新增了上下文操作，所以需要传递<code>context.Context</code>参数，例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"context\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/go-redis/redis/v8\"</span> <span class=\"comment\">// 注意导入的是新版本</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  rdb *redis.Client</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 初始化连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initClient</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123;</span><br><span class=\"line\">  rdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">    Addr:     <span class=\"string\">\"localhost:16379\"</span>,</span><br><span class=\"line\">    Password: <span class=\"string\">\"\"</span>,  <span class=\"comment\">// no password set</span></span><br><span class=\"line\">    DB:       <span class=\"number\">0</span>,   <span class=\"comment\">// use default DB</span></span><br><span class=\"line\">    PoolSize: <span class=\"number\">100</span>, <span class=\"comment\">// 连接池大小</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 需要使用context库</span></span><br><span class=\"line\">  ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">  _, err = rdb.Ping(ctx).Result()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">V8Example</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx := context.Background()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := initClient(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 设置Key</span></span><br><span class=\"line\">  err := rdb.Set(ctx, <span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 获取存在的Key</span></span><br><span class=\"line\">  val, err := rdb.Get(ctx, <span class=\"string\">\"key\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"key\"</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取不存在的Key</span></span><br><span class=\"line\">  val2, err := rdb.Get(ctx, <span class=\"string\">\"key2\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err == redis.Nil &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"key2 does not exist\"</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"key2\"</span>, val2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output: key value</span></span><br><span class=\"line\"><span class=\"comment\">// key2 does not exist</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Redis-数据类型指令操作实践\"><a href=\"#Redis-数据类型指令操作实践\" class=\"headerlink\" title=\"Redis 数据类型指令操作实践\"></a>Redis 数据类型指令操作实践</h3><p>描述: 在使用<code>go-redis</code>来操作redis前,我们可以通过redis-cli命令进入到交互式的命令行来执行相关命令并查看执行后相应的效果便于读者理解。</p>\n<p>Step 1.首先我们连接到服务端.<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 连接到redis服务器 -a 指定认证字符串</span></span><br><span class=\"line\">redis-cli -a weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证连接状态</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ping  </span><br><span class=\"line\">PONG <span class=\"comment\">// 表示连接正常</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 2. Redis 字符串数据类型的相关命令用于管理 redis 字符串值<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置key并指定字符串(String)</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; set myname <span class=\"string\">\"weiyigeek\"</span> EX <span class=\"number\">60</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"comment\">// 获取指定key存在的字符串(String)</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get myname</span><br><span class=\"line\"><span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get myname  <span class=\"comment\">// 等待60s后该keys失效</span></span><br><span class=\"line\">(<span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 3. Redis hash 特别适合用于存储对象它是一个 string 类型的 field（字段） 和 value（值） 的映射表<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; HMSET mymsets name <span class=\"string\">\"weiygeek\"</span> age <span class=\"number\">13</span> hobby <span class=\"string\">\"Study Go!\"</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; HGET mymsets name  <span class=\"comment\">// 指定键的指定字段值</span></span><br><span class=\"line\"><span class=\"string\">\"weiygeek\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; HGETALL mymsets   <span class=\"comment\">// 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"name\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"weiygeek\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"age\"</span></span><br><span class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"13\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"hobby\"</span></span><br><span class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"Study Go!\"</span></span><br></pre></td></tr></table></figure><br><br/></p>\n<p>Step 4. Redis List 是简单的字符串列表，按照插入顺序排序。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt;  LPUSH mylpush one <span class=\"string\">\"C\"</span> tow <span class=\"string\">\"C#\"</span> there <span class=\"string\">\"Java\"</span> four <span class=\"string\">\"Go\"</span> <span class=\"comment\">// 头部插入</span></span><br><span class=\"line\">(integer) <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt;  LRANGE mylpush <span class=\"number\">0</span> <span class=\"number\">7</span>  <span class=\"comment\">// 从0开始到1的范围内数据</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"four\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Java\"</span></span><br><span class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"there\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"C#\"</span></span><br><span class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"tow\"</span></span><br><span class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"C\"</span></span><br><span class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"one\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LINDEX mylpush <span class=\"number\">0</span>  <span class=\"comment\">// 获取索引为0的值</span></span><br><span class=\"line\"><span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LINDEX mylpush <span class=\"number\">1</span>  <span class=\"comment\">// 获取索引为1的值</span></span><br><span class=\"line\"><span class=\"string\">\"four\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LPOP mylpush      <span class=\"comment\">// 移除列表第一个元素，返回值为移除的元素。 0 -&gt;</span></span><br><span class=\"line\"><span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; RPOP mylpush      <span class=\"comment\">// 移除列表的最后一个元素，返回值为移除的元素。-1 &lt;-  </span></span><br><span class=\"line\"><span class=\"string\">\"one\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; RPUSH mylpush <span class=\"string\">\"末尾\"</span>  <span class=\"comment\">// 向末尾进行插入值</span></span><br><span class=\"line\">(integer) <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; LINDEX mylpush <span class=\"number\">-1</span>    <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"string\">\"\\xe6\\x9c\\xab\\xe5\\xb0\\xbe\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 5. Set是 String 类型的无序集合且集合成员是唯一的<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; SADD mysadds <span class=\"number\">1</span> redis <span class=\"number\">8</span> mongodb <span class=\"number\">3</span> mysql <span class=\"number\">4</span> oracle <span class=\"number\">5</span> db2</span><br><span class=\"line\">(integer) <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; SMEMBERS mysadds <span class=\"comment\">// 返回集合中的所有成员</span></span><br><span class=\"line\"> <span class=\"number\">1</span>) <span class=\"string\">\"8\"</span></span><br><span class=\"line\"> <span class=\"number\">2</span>) <span class=\"string\">\"5\"</span></span><br><span class=\"line\"> <span class=\"number\">3</span>) <span class=\"string\">\"3\"</span></span><br><span class=\"line\"> <span class=\"number\">4</span>) <span class=\"string\">\"4\"</span></span><br><span class=\"line\"> <span class=\"number\">5</span>) <span class=\"string\">\"mongodb\"</span></span><br><span class=\"line\"> <span class=\"number\">6</span>) <span class=\"string\">\"oracle\"</span></span><br><span class=\"line\"> <span class=\"number\">7</span>) <span class=\"string\">\"mysql\"</span></span><br><span class=\"line\"> <span class=\"number\">8</span>) <span class=\"string\">\"db2\"</span></span><br><span class=\"line\"> <span class=\"number\">9</span>) <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"number\">10</span>) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; SCARD mysadds  <span class=\"comment\">// 获取集合的成员数</span></span><br><span class=\"line\">(integer) <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; SPOP mysadds   <span class=\"comment\">// 随机移除成员</span></span><br><span class=\"line\"><span class=\"string\">\"db2\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; SPOP mysadds</span><br><span class=\"line\"><span class=\"string\">\"mysql\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 6. Redis 有序集合是 string 类型元素的集合且不允许重复的成员, 但是会通过分数来为集合中的成员进行从小到大的排序。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZADD mysets <span class=\"number\">100</span> <span class=\"string\">\"Go\"</span> <span class=\"number\">90</span> <span class=\"string\">\"Python\"</span> <span class=\"number\">80</span> <span class=\"string\">\"Ruby\"</span> <span class=\"number\">70</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">(integer) <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">0</span> <span class=\"number\">5</span> withscores  <span class=\"comment\">// 指定范围</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"C\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"70\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Ruby\"</span></span><br><span class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"80\"</span></span><br><span class=\"line\"><span class=\"number\">5</span>) <span class=\"string\">\"Python\"</span></span><br><span class=\"line\"><span class=\"number\">6</span>) <span class=\"string\">\"90\"</span></span><br><span class=\"line\"><span class=\"number\">7</span>) <span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">8</span>) <span class=\"string\">\"100\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">0</span> <span class=\"number\">-1</span>   <span class=\"comment\">// 整个集合</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"C\"</span></span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"string\">\"Ruby\"</span></span><br><span class=\"line\"><span class=\"number\">3</span>) <span class=\"string\">\"Python\"</span></span><br><span class=\"line\"><span class=\"number\">4</span>) <span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">-1</span> <span class=\"number\">3</span>   <span class=\"comment\">// 获取分数最高的值-1代表倒数第一个。</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Go\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">-2</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Python\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">-3</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"Ruby\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; ZRANGE mysets <span class=\"number\">-4</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"string\">\"C\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 7. Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; PFADD myhlkey <span class=\"string\">\"redis\"</span>  <span class=\"comment\">// 添加指定元素到 HyperLogLog 中。</span></span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; PFADD myhlkey <span class=\"string\">\"memcache\"</span></span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; PFADD myhlkey <span class=\"string\">\"mysql\"</span></span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; PFADD myhlkey <span class=\"string\">\"redis\"</span>  </span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; PFCOUNT myhlkey  <span class=\"comment\">// 返回给定 HyperLogLog 的基数估算值。</span></span><br><span class=\"line\">(integer) <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>Step 8. 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一个 redis-cli 客户端，在我们实例中我们创建了订阅频道名为 weiyigeekChat:</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SUBSCRIBE weiyigeekChat</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"weiyigeekChat\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二个 redis-cli 客户端,在同一个频道 weiyigeekChat 发布两次消息，订阅者就能接收到消息。</span></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH weiyigeekChat <span class=\"string\">\"Redis PUBLISH test\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; PUBLISH weiyigeekChat <span class=\"string\">\"Learn redis by weiyigeek.top\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 订阅者的客户端会显示如下消息</span></span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"weiyigeekChat\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"weiyigeekChat\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"Redis PUBLISH test\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"weiyigeekChat\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"Learn redis by weiyigeek.top\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Step 9.Redis 事务可以一次执行多个命令, 一个事务从开始到执行会经历以下三个阶段：<code>开始事务</code>,<code>命令入队</code>,<code>执行事务</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; MULTI  <span class=\"comment\"># 开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SET book-name <span class=\"string\">\"Mastering C++ in 21 days\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; GET book-name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SADD tag <span class=\"string\">\"C++\"</span> <span class=\"string\">\"Programming\"</span> <span class=\"string\">\"Mastering Series\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">redis 127.0.0.1:6379&gt; SMEMBERS tag</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">redis 127.0.0.1:6379&gt; EXEC  <span class=\"comment\"># 执行所有事务块内的命令</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) <span class=\"string\">\"Mastering C++ in 21 days\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">4) 1) <span class=\"string\">\"Mastering Series\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"C++\"</span></span><br><span class=\"line\">   3) <span class=\"string\">\"Programming\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Step 10. Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.将一个或多个经度(longitude)|、纬度(latitude)-、位置名称(member)添加到指定的 key 中</span></span><br><span class=\"line\"><span class=\"comment\"># 重庆 经度:106.55 纬度:29.57</span></span><br><span class=\"line\"><span class=\"comment\"># 四川成都 经度:104.06\t纬度:30.67</span></span><br><span class=\"line\">GEOADD cityAddr 106.55 29.57 ChongQing 104.06 30.67 SichuanChengDu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.返回所有指定名称(member)的位置（经度和纬度），不存在的返回 nil。</span></span><br><span class=\"line\">GEOPOS cityAddr ChongQing SichuanChengDu NonExistKey</span><br><span class=\"line\">1) 1) <span class=\"string\">\"106.5499994158744812\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"29.5700000136221135\"</span></span><br><span class=\"line\">2) 1) <span class=\"string\">\"104.05999749898910522\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"30.67000055930392222\"</span></span><br><span class=\"line\">3) (nil)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.用于返回两个给定位置之间的距离,此处计算重庆与程度的距离（m ：米，默认单位、km ：千米、mi ：英里、ft ：英尺）。</span></span><br><span class=\"line\">GEODIST cityAddr ChongQing SichuanChengDu km</span><br><span class=\"line\"><span class=\"string\">\"268.9827\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</span></span><br><span class=\"line\"><span class=\"comment\"># WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。</span></span><br><span class=\"line\"><span class=\"comment\"># WITHCOORD: 将位置元素的经度和纬度也一并返回。</span></span><br><span class=\"line\"><span class=\"comment\"># WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; GEORADIUS cityAddr 105 29 200 km WITHDIST WITHCOORD</span><br><span class=\"line\">1) 1) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"163.1843\"</span></span><br><span class=\"line\">   3) 1) <span class=\"string\">\"106.5499994158744812\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"29.5700000136221135\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.geohash 用于获取一个或多个位置元素的 geohash 值。</span></span><br><span class=\"line\">GEOHASH cityAddr ChongQing SichuanChengDu</span><br><span class=\"line\">127.0.0.1:6379&gt; GEOHASH cityAddr ChongQing SichuanChengDu</span><br><span class=\"line\">1) <span class=\"string\">\"wm7b0x53dz0\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"wm3yrzq1tw0\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Step 11.Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃，它是Redis 5.0 版本新增加的数据结构。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 XADD 向队列添加消息，如果指定的队列不存在，则创建一个队列</span></span><br><span class=\"line\">XADD mystreams * Name <span class=\"string\">\"WeiyiGeek\"</span> Age 25 Hobby <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\"><span class=\"string\">\"1640313258699-0\"</span></span><br><span class=\"line\">XADD mystreams * Addr ChongQing</span><br><span class=\"line\"><span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消息队列长度</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XLEN mystreams</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印队列存储的字段与值( - 表示最小值 ,+ 表示最大值 )</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XRANGE mystreams - +</span><br><span class=\"line\">1) 1) <span class=\"string\">\"1640313258699-0\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">      3) <span class=\"string\">\"Age\"</span></span><br><span class=\"line\">      4) <span class=\"string\">\"25\"</span></span><br><span class=\"line\">      5) <span class=\"string\">\"Hobby\"</span></span><br><span class=\"line\">      6) <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\">2) 1) <span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"Addr\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  使用 XTRIM 对流进行修剪，限制长度， 语法格式：</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XTRIM mystreams MAXLEN 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; XRANGE mystreams - +</span><br><span class=\"line\">1) 1) <span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\">   2) 1) <span class=\"string\">\"Addr\"</span></span><br><span class=\"line\">      2) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从 Stream 头部读取两条消息</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XADD mystreams * Name <span class=\"string\">\"WeiyiGeek\"</span> Age 25 Hobby <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XREAD COUNT 2 STREAMS mystreams  writers 0-0 0-0</span><br><span class=\"line\">1) 1) <span class=\"string\">\"mystreams\"</span></span><br><span class=\"line\">   2) 1) 1) <span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\">         2) 1) <span class=\"string\">\"Addr\"</span></span><br><span class=\"line\">            2) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\">      2) 1) <span class=\"string\">\"1640313910204-0\"</span></span><br><span class=\"line\">         2) 1) <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">            2) <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">            3) <span class=\"string\">\"Age\"</span></span><br><span class=\"line\">            4) <span class=\"string\">\"25\"</span></span><br><span class=\"line\">            5) <span class=\"string\">\"Hobby\"</span></span><br><span class=\"line\">            6) <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从 Stream 头部读取1条消息</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XREAD COUNT 1 STREAMS mystreams  writers 0-0 0-0</span><br><span class=\"line\">1) 1) <span class=\"string\">\"mystreams\"</span></span><br><span class=\"line\">   2) 1) 1) <span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\">         2) 1) <span class=\"string\">\"Addr\"</span></span><br><span class=\"line\">            2) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 XGROUP CREATE 创建消费者组,此处从头部消费,如果想从尾部消费请将0-0改成$</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XGROUP CREATE mystreams consumer-group-name 0-0</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 XREADGROUP GROUP 读取消费组中的消息</span></span><br><span class=\"line\"><span class=\"comment\"># XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</span></span><br><span class=\"line\"><span class=\"comment\"># group ：消费组名</span></span><br><span class=\"line\"><span class=\"comment\"># consumer ：消费者名。</span></span><br><span class=\"line\"><span class=\"comment\"># count ： 读取数量。</span></span><br><span class=\"line\"><span class=\"comment\"># milliseconds ： 阻塞毫秒数。</span></span><br><span class=\"line\"><span class=\"comment\"># key ： 队列名。</span></span><br><span class=\"line\"><span class=\"comment\"># ID ： 消息 ID。</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystreams &gt;</span><br><span class=\"line\">1) 1) <span class=\"string\">\"mystreams\"</span></span><br><span class=\"line\">   2) 1) 1) <span class=\"string\">\"1640313276946-0\"</span></span><br><span class=\"line\">         2) 1) <span class=\"string\">\"Addr\"</span></span><br><span class=\"line\">            2) <span class=\"string\">\"ChongQing\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystreams &gt;</span><br><span class=\"line\">1) 1) <span class=\"string\">\"mystreams\"</span></span><br><span class=\"line\">   2) 1) 1) <span class=\"string\">\"1640313910204-0\"</span></span><br><span class=\"line\">         2) 1) <span class=\"string\">\"Name\"</span></span><br><span class=\"line\">            2) <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">            3) <span class=\"string\">\"Age\"</span></span><br><span class=\"line\">            4) <span class=\"string\">\"25\"</span></span><br><span class=\"line\">            5) <span class=\"string\">\"Hobby\"</span></span><br><span class=\"line\">            6) <span class=\"string\">\"Computer\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; XREADGROUP GROUP consumer-group-name consumer-name COUNT 1 STREAMS mystreams &gt;</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Redis-客户端库基本使用\"><a href=\"#Redis-客户端库基本使用\" class=\"headerlink\" title=\"Redis 客户端库基本使用\"></a>Redis 客户端库基本使用</h3><h4 id=\"Go-Redis-V8-初始化连接\"><a href=\"#Go-Redis-V8-初始化连接\" class=\"headerlink\" title=\"Go-Redis V8 初始化连接\"></a>Go-Redis V8 初始化连接</h4><p>描述: 此处采用Go-Redis V8 版本, 下述将其封装为包以便后续调用。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// weiyigeek.top/studygo/Day09/MySQL/mypkg/initredis.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> mypkg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"context\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"github.com/go-redis/redis/v8\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个全局变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">  RedisClient *redis.Client</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个RedisSingleObj结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RedisSingleObj <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Redis_host <span class=\"keyword\">string</span></span><br><span class=\"line\">  Redis_port <span class=\"keyword\">uint16</span></span><br><span class=\"line\">  Redis_auth <span class=\"keyword\">string</span></span><br><span class=\"line\">  Database   <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结构体InitSingleRedis方法: 用于初始化redis数据库</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *RedisSingleObj)</span> <span class=\"title\">InitSingleRedis</span><span class=\"params\">()</span> <span class=\"params\">(*redis.Client, error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Redis连接格式拼接</span></span><br><span class=\"line\">  redisAddr := fmt.Sprintf(<span class=\"string\">\"%s:%d\"</span>, r.Redis_host, r.Redis_port)</span><br><span class=\"line\">  <span class=\"comment\">// Redis 连接对象: NewClient将客户端返回到由选项指定的Redis服务器。</span></span><br><span class=\"line\">  RedisClient = redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">    Addr:        redisAddr,    <span class=\"comment\">// redis服务ip:port</span></span><br><span class=\"line\">    Password:    r.Redis_auth, <span class=\"comment\">// redis的认证密码</span></span><br><span class=\"line\">    DB:          r.Database,   <span class=\"comment\">// 连接的database库</span></span><br><span class=\"line\">    IdleTimeout: <span class=\"number\">300</span>,          <span class=\"comment\">// 默认Idle超时时间</span></span><br><span class=\"line\">    PoolSize:    <span class=\"number\">100</span>,          <span class=\"comment\">// 连接池</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Connecting Redis : %v\\n\"</span>, redisAddr)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// go-redis库v8版本相关命令都需要传递context.Context参数,Background 返回一个非空的Context,它永远不会被取消，没有值，也没有期限。</span></span><br><span class=\"line\">  ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 验证是否连接到redis服务端</span></span><br><span class=\"line\">  res, err := RedisClient.Ping(ctx).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Connect Failed! Err: %v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输出连接成功标识</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Connect Successful! \\nPing =&gt; %v\\n\"</span>, res)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> RedisClient, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>调用演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"context\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/go-redis/redis/v8\"</span></span><br><span class=\"line\">  <span class=\"string\">\"weiyigeek.top/studygo/Day09/MySQL/mypkg\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最新版本的go-redis库的相关命令都需要传递context.Context参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx = context.Background()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实例化RedisSingleObj结构体</span></span><br><span class=\"line\">  conn := &amp;mypkg.RedisSingleObj&#123;</span><br><span class=\"line\">    Redis_host: <span class=\"string\">\"10.20.172.248\"</span>,</span><br><span class=\"line\">    Redis_port: <span class=\"number\">6379</span>,</span><br><span class=\"line\">    Redis_auth: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化连接 Single Redis 服务端</span></span><br><span class=\"line\">  redisClient, err := conn.InitSingleRedis()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"[Error] - %v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 程序执行完毕释放资源</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> redisClient.Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"Redis-基本指令操作示例\"><a href=\"#Redis-基本指令操作示例\" class=\"headerlink\" title=\"Redis 基本指令操作示例\"></a>Redis 基本指令操作示例</h3><h4 id=\"字符串-string-类型操作\"><a href=\"#字符串-string-类型操作\" class=\"headerlink\" title=\"字符串(string)类型操作\"></a>字符串(string)类型操作</h4><p><strong>常用方法:</strong></p>\n<ul>\n<li>Keys():根据正则获取keys</li>\n<li>Type():获取key对应值得类型</li>\n<li>Del():删除缓存项</li>\n<li>Exists():检测缓存项是否存在</li>\n<li>Expire(),ExpireAt():设置有效期</li>\n<li>TTL(),PTTL():获取有效期</li>\n<li>DBSize():查看当前数据库key的数量</li>\n<li>FlushDB():清空当前数据</li>\n<li><p>FlushAll():清空所有数据库</p>\n</li>\n<li><p>Set():设置键缓存</p>\n</li>\n<li>SetEX():设置并指定过期时间</li>\n<li>SetNX():设置并指定过期时间,仅当key不存在的时候才设置。</li>\n<li>Get():获取键值</li>\n<li>GetRange():字符串截取</li>\n<li>Incr():增加+1</li>\n<li>IncrBy():按指定步长增加</li>\n<li>Decr():减少-1</li>\n<li>DecrBy():按指定步长减少</li>\n<li>Append():追加</li>\n<li>StrLen():获取长度</li>\n</ul>\n<p><br/></p>\n<p><strong>示例1.redis数据库中字符串的set与get操作实践.</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Redis String Set/Get 示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setGetExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.Set 设置 key 如果设置为-1则表示永不过期</span></span><br><span class=\"line\">  err := rdb.Set(ctx, <span class=\"string\">\"score\"</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>*time.Second).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"set score failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.Get 获取已存在的Key其存储的值</span></span><br><span class=\"line\">  val1, err := rdb.Get(ctx, <span class=\"string\">\"score\"</span>).Result() <span class=\"comment\">// 获取其值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"get score failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"val1 -&gt; score ：%v\\n\"</span>, val1)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Get 获取一个不存在的值返回redis.Nil 则说明不存在</span></span><br><span class=\"line\">  val2, err := rdb.Get(ctx, <span class=\"string\">\"name\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err == redis.Nil &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"[ERROR] - Key [name] not exist\"</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"get name failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Exists() 方法用于检测某个key是否存在</span></span><br><span class=\"line\">  n, _ := rdb.Exists(ctx, <span class=\"string\">\"name\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"name key 存在!\"</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"name key 不存在!\"</span>)</span><br><span class=\"line\">    rdb.Set(ctx, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"weiyi\"</span>, <span class=\"number\">60</span>*time.Second)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  val2, _ = rdb.Get(ctx, <span class=\"string\">\"name\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"val2 -&gt; name : \"</span>, val2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.SetNX 当不存在key时将进行设置该可以并设置其过期时间</span></span><br><span class=\"line\">  val3, err := rdb.SetNX(ctx, <span class=\"string\">\"username\"</span>, <span class=\"string\">\"weiyigeek\"</span>, <span class=\"number\">0</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"set username failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"val3 -&gt; username: %v\\n\"</span>, val3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.Keys() 根据正则获取keys, DBSize() 查看当前数据库key的数量.</span></span><br><span class=\"line\">  keys, _ := rdb.Keys(ctx, <span class=\"string\">\"*\"</span>).Result()</span><br><span class=\"line\">  num, err := rdb.DBSize(ctx).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"All Keys : %v, Keys number : %v \\n\"</span>, keys, num)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据前缀获取Key</span></span><br><span class=\"line\">  vals, _ := rdb.Keys(ctx, <span class=\"string\">\"user*\"</span>).Result()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 5.Type() 方法用户获取一个key对应值的类型</span></span><br><span class=\"line\">  vType, err := rdb.Type(ctx, <span class=\"string\">\"username\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"username key type : %v\\n\"</span>, vType)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 6.Expire()方法是设置某个时间段(time.Duration)后过期，ExpireAt()方法是在某个时间点(time.Time)过期失效.</span></span><br><span class=\"line\">  val4, _ := rdb.Expire(ctx, <span class=\"string\">\"name\"</span>, time.Minute*<span class=\"number\">2</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> val4 &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"name 过期时间设置成功\"</span>, val4)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"name 过期时间设置失败\"</span>, val4)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  val5, _ := rdb.ExpireAt(ctx, <span class=\"string\">\"username\"</span>, time.Now().Add(time.Minute*<span class=\"number\">2</span>)).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> val5 &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"username 过期时间设置成功\"</span>, val5)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"username 过期时间设置失败\"</span>, val5)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 7.TTL()与PTTL()方法可以获取某个键的剩余有效期</span></span><br><span class=\"line\">  userTTL, _ := rdb.TTL(ctx, <span class=\"string\">\"user\"</span>).Result() <span class=\"comment\">// 获取其key的过期时间</span></span><br><span class=\"line\">  usernameTTL, _ := rdb.PTTL(ctx, <span class=\"string\">\"username\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"user TTL : %v, username TTL : %v\\n\"</span>, userTTL, usernameTTL)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 8.Del():删除缓存项与FlushDB():清空当前数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 当通配符匹配的key的数量不多时，可以使用Keys()得到所有的key在使用Del命令删除。</span></span><br><span class=\"line\">  num, err = rdb.Del(ctx, <span class=\"string\">\"user\"</span>, <span class=\"string\">\"username\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Del() : \"</span>, num)</span><br><span class=\"line\">  <span class=\"comment\">// 如果key的数量非常多的时候，我们可以搭配使用Scan命令和Del命令完成删除。</span></span><br><span class=\"line\">  iter := rdb.Scan(ctx, <span class=\"number\">0</span>, <span class=\"string\">\"user*\"</span>, <span class=\"number\">0</span>).Iterator()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> iter.Next(ctx) &#123;</span><br><span class=\"line\">    err := rdb.Del(ctx, iter.Val()).Err()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := iter.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 9.清空当前数据库，因为连接的是索引为0的数据库，所以清空的就是0号数据库</span></span><br><span class=\"line\">  flag, err := rdb.FlushDB(ctx).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"FlushDB() : \"</span>, flag)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main 调用</span></span><br><span class=\"line\"><span class=\"comment\">// String 数据类型操作</span></span><br><span class=\"line\">setGetExample(redisClient, ctx)</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # Go execute</span></span><br><span class=\"line\">Connecting Redis : <span class=\"number\">10.20</span><span class=\"number\">.172</span><span class=\"number\">.248</span>:<span class=\"number\">6379</span></span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">val1 -&gt; score ：<span class=\"number\">100</span></span><br><span class=\"line\">[ERROR] - Key [name] not exist</span><br><span class=\"line\">name key 不存在!</span><br><span class=\"line\">val2 -&gt; name :  weiyi</span><br><span class=\"line\">val3 -&gt; username: <span class=\"literal\">true</span></span><br><span class=\"line\">All Keys : [name username score], Keys number : <span class=\"number\">3</span> </span><br><span class=\"line\">username key <span class=\"keyword\">type</span> : <span class=\"keyword\">string</span></span><br><span class=\"line\">name 过期时间设置成功 <span class=\"literal\">true</span></span><br><span class=\"line\">username 过期时间设置成功 <span class=\"literal\">true</span></span><br><span class=\"line\">user TTL : <span class=\"number\">-2</span>ns, username TTL : <span class=\"number\">2</span>m1<span class=\"number\">.679s</span></span><br><span class=\"line\">Del() :  <span class=\"number\">1</span></span><br><span class=\"line\">FlushDB() :  OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # Redis-cli</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get score</span><br><span class=\"line\"><span class=\"string\">\"100\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get name</span><br><span class=\"line\">(<span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get username</span><br><span class=\"line\"><span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; TTL username  <span class=\"comment\">// 生存周期60s</span></span><br><span class=\"line\">(integer) <span class=\"number\">50</span></span><br><span class=\"line\">........ </span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; keys *   <span class=\"comment\">// 执行后全部key为空</span></span><br><span class=\"line\">(empty list or set)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>示例2.redis数据库中字符串与整型操作实践.</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// stringIntExample 数据类型演示</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stringIntExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置字符串类型的key</span></span><br><span class=\"line\">  err := rdb.Set(ctx, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\"Hello World!\"</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// GetRange ： 字符串截取</span></span><br><span class=\"line\">  <span class=\"comment\">// 注：即使key不存在，调用GetRange()也不会报错，只是返回的截取结果是空\"\",可以使用fmt.Printf(\"%q\\n\", val)来打印测试</span></span><br><span class=\"line\">  val1, _ := rdb.GetRange(ctx, <span class=\"string\">\"hello\"</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"key: hello, value: %v\\n\"</span>, val1) <span class=\"comment\">//截取到的内容为: ello</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Append()表示往字符串后面追加元素，返回值是字符串的总长度</span></span><br><span class=\"line\">  length1, _ := rdb.Append(ctx, <span class=\"string\">\"hello\"</span>, <span class=\"string\">\" Go Programer\"</span>).Result()</span><br><span class=\"line\">  val2, _ := rdb.Get(ctx, <span class=\"string\">\"hello\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"当前缓存key的长度为: %v，值: %v \\n\"</span>, length1, val2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置整形的key</span></span><br><span class=\"line\">  err = rdb.SetNX(ctx, <span class=\"string\">\"number\"</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Incr()、IncrBy()都是操作数字，对数字进行增加的操作</span></span><br><span class=\"line\">  <span class=\"comment\">// Decr()、DecrBy()方法是对数字进行减的操作，和Incr正好相反</span></span><br><span class=\"line\">  <span class=\"comment\">// incr是执行原子加1操作</span></span><br><span class=\"line\">  val3, _ := rdb.Incr(ctx, <span class=\"string\">\"number\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Incr -&gt; key当前的值为: %v\\n\"</span>, val3) <span class=\"comment\">// 2</span></span><br><span class=\"line\">  <span class=\"comment\">// incrBy是增加指定的数</span></span><br><span class=\"line\">  val4, _ := rdb.IncrBy(ctx, <span class=\"string\">\"number\"</span>, <span class=\"number\">6</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"IncrBy -&gt; key当前的值为: %v\\n\"</span>, val4) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// StrLen 也可以返回缓存key的长度</span></span><br><span class=\"line\">  length2, _ := rdb.StrLen(ctx, <span class=\"string\">\"number\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"number 值长度: %v\\n\"</span>, length2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main 函数中调用</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串整形数据类型</span></span><br><span class=\"line\">stringIntExample(redisClient, ctx)</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ➜ demo6 go run .</span></span><br><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">key: hello, value: ello</span><br><span class=\"line\">当前缓存key的长度为: 25，值: Hello World! Go Programer </span><br><span class=\"line\">Incr -&gt; key当前的值为: 9</span><br><span class=\"line\">IncrBy -&gt; key当前的值为: 15</span><br><span class=\"line\">number 值长度: 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"number\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get hello</span><br><span class=\"line\"><span class=\"string\">\"Hello World! Go Promgram\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get number</span><br><span class=\"line\"><span class=\"string\">\"8\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"列表-list-类型操作\"><a href=\"#列表-list-类型操作\" class=\"headerlink\" title=\"列表(list)类型操作\"></a>列表(list)类型操作</h4><p><strong>常用方法:</strong></p>\n<ul>\n<li>LPush():将元素压入链表</li>\n<li>LInsert():在某个位置插入新元素</li>\n<li>LSet():设置某个元素的值</li>\n<li>LLen():获取链表元素个数</li>\n<li>LIndex():获取链表下标对应的元素</li>\n<li>LRange():获取某个选定范围的元素集</li>\n<li>LPop()从链表左侧弹出数据</li>\n<li>LRem():根据值移除元素</li>\n</ul>\n<p><br></p>\n<p><strong>简单示例</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">listExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 插入指定值到list列表中，返回值是当前列表元素的数量</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用LPush()方法将数据从左侧压入链表（后进先出）,也可以从右侧压如链表对应的方法是RPush()</span></span><br><span class=\"line\">  count, _ := rdb.LPush(ctx, <span class=\"string\">\"list\"</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"插入到list集合中元素的数量: \"</span>, count)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// LInsert() 在某个位置插入新元素</span></span><br><span class=\"line\">  <span class=\"comment\">// 在名为key的缓存项值为2的元素前面插入一个值，值为123 ， 注意只会执行一次</span></span><br><span class=\"line\">  _ = rdb.LInsert(ctx, <span class=\"string\">\"list\"</span>, <span class=\"string\">\"before\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"number\">123</span>).Err()</span><br><span class=\"line\">  <span class=\"comment\">// 在名为key的缓存项值为2的元素后面插入一个值，值为321</span></span><br><span class=\"line\">  _ = rdb.LInsert(ctx, <span class=\"string\">\"list\"</span>, <span class=\"string\">\"after\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"number\">321</span>).Err()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// LSet() 设置某个元素的值</span></span><br><span class=\"line\">  <span class=\"comment\">//下标是从0开始的</span></span><br><span class=\"line\">  val1, _ := rdb.LSet(ctx, <span class=\"string\">\"list\"</span>, <span class=\"number\">2</span>, <span class=\"number\">256</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"是否成功将下标为2的元素值改成256: \"</span>, val1)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// LLen() 获取链表元素个数</span></span><br><span class=\"line\">  length, _ := rdb.LLen(ctx, <span class=\"string\">\"list\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"当前链表的长度为: %v\\n\"</span>, length)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// LIndex() 获取链表下标对应的元素</span></span><br><span class=\"line\">  val2, _ := rdb.LIndex(ctx, <span class=\"string\">\"list\"</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"下标为2的值为: %v\\n\"</span>, val2)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从链表左侧弹出数据</span></span><br><span class=\"line\">  val3, _ := rdb.LPop(ctx, <span class=\"string\">\"list\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"弹出下标为0的值为: %v\\n\"</span>, val3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// LRem() 根据值移除元素 lrem key count value</span></span><br><span class=\"line\">  n, _ := rdb.LRem(ctx, <span class=\"string\">\"list\"</span>, <span class=\"number\">2</span>, <span class=\"string\">\"256\"</span>).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"移除了: %v 个\\n\"</span>, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">插入到list集合中元素的数量:  3</span><br><span class=\"line\">是否成功将下标为2的元素值改成256:  OK</span><br><span class=\"line\">当前链表的长度为: 5</span><br><span class=\"line\">下标为2的值为: 256</span><br><span class=\"line\">弹出下标为0的值为: 3</span><br><span class=\"line\">移除了: 1 个</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys lis*</span><br><span class=\"line\">1) <span class=\"string\">\"list\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class=\"line\"><span class=\"string\">\"123\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LPOP list</span><br><span class=\"line\"><span class=\"string\">\"123\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; LLEN list</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"集合-set-类型操作\"><a href=\"#集合-set-类型操作\" class=\"headerlink\" title=\"集合(set)类型操作\"></a>集合(set)类型操作</h4><p>常用方法:</p>\n<ul>\n<li>SAdd():添加元素</li>\n<li>SPop():随机获取一个元素</li>\n<li>SRem():删除集合里指定的值</li>\n<li>SSMembers():获取所有成员</li>\n<li>SIsMember():判断元素是否在集合中</li>\n<li>SCard():获取集合元素个数</li>\n<li>SUnion():并集,SDiff():差集,SInter():交集</li>\n</ul>\n<p>Tips：集合数据的特征，元素不能重复保持唯一性, 元素无序不能使用索引(下标)操作</p>\n<p><br></p>\n<p><strong>简单示例</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 集合元素缓存设置</span></span><br><span class=\"line\">  keyname := <span class=\"string\">\"Program\"</span></span><br><span class=\"line\">  mem := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"C\"</span>, <span class=\"string\">\"Golang\"</span>, <span class=\"string\">\"C++\"</span>, <span class=\"string\">\"C#\"</span>, <span class=\"string\">\"Java\"</span>, <span class=\"string\">\"Delphi\"</span>, <span class=\"string\">\"Python\"</span>, <span class=\"string\">\"Golang\"</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">// //由于Golang已经被添加到Program集合中，所以重复添加时无效的</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> mem &#123;</span><br><span class=\"line\">    rdb.SAdd(ctx, keyname, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// SCard() 获取集合元素个数</span></span><br><span class=\"line\">  total, _ := rdb.SCard(ctx, keyname).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"golang集合成员个数: \"</span>, total)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// SPop() 随机获取一个元素 （无序性，是随机的）</span></span><br><span class=\"line\">  val1, _ := rdb.SPop(ctx, keyname).Result()</span><br><span class=\"line\">  <span class=\"comment\">// SPopN()  随机获取多个元素.</span></span><br><span class=\"line\">  val2, _ := rdb.SPopN(ctx, keyname, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// SSMembers() 获取所有成员</span></span><br><span class=\"line\">  val3, _ := rdb.SMembers(ctx, keyname).Result()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"随机获取一个元素: %v , 随机获取多个元素: %v \\n所有成员: %v\\n\"</span>, val1, val2, val3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// SIsMember() 判断元素是否在集合中</span></span><br><span class=\"line\">  exists, _ := rdb.SIsMember(ctx, keyname, <span class=\"string\">\"golang\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> exists &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"golang 存在 Program 集合中.\"</span>) <span class=\"comment\">// 注意:我们存入的是Golang而非golang</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"golang 不存在 Program 集合中.\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// SUnion():并集, SDiff():差集, SInter():交集</span></span><br><span class=\"line\">  rdb.SAdd(ctx, <span class=\"string\">\"setA\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>)</span><br><span class=\"line\">  rdb.SAdd(ctx, <span class=\"string\">\"setB\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//并集</span></span><br><span class=\"line\">  union, _ := rdb.SUnion(ctx, <span class=\"string\">\"setA\"</span>, <span class=\"string\">\"setB\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"并集\"</span>, union)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//差集</span></span><br><span class=\"line\">  diff, _ := rdb.SDiff(ctx, <span class=\"string\">\"setA\"</span>, <span class=\"string\">\"setB\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"差集\"</span>, diff)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//交集</span></span><br><span class=\"line\">  inter, _ := rdb.SInter(ctx, <span class=\"string\">\"setA\"</span>, <span class=\"string\">\"setB\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"交集\"</span>, inter)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 删除集合中指定元素(返回成功)</span></span><br><span class=\"line\">  n, _ := rdb.SRem(ctx, <span class=\"string\">\"setB\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"f\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"已成功删除元素的个数: \"</span>,n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">golang集合成员个数:  7</span><br><span class=\"line\">随机获取一个元素: Java , 随机获取多个元素: [Golang C++] </span><br><span class=\"line\">所有成员: [C Python C<span class=\"comment\"># Delphi]</span></span><br><span class=\"line\">golang 不存在 Program 集合中.</span><br><span class=\"line\">并集 [a d c e f b]</span><br><span class=\"line\">差集 [c b]</span><br><span class=\"line\">交集 [a d]</span><br><span class=\"line\">已成功删除元素的个数: 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys Prog*</span><br><span class=\"line\">1) <span class=\"string\">\"Program\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER Program</span><br><span class=\"line\"><span class=\"string\">\"Python\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER Program</span><br><span class=\"line\"><span class=\"string\">\"Delphi\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SCARD Program</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"有序集合-zset-类型操作\"><a href=\"#有序集合-zset-类型操作\" class=\"headerlink\" title=\"有序集合(zset)类型操作\"></a>有序集合(zset)类型操作</h4><p>常用方法:</p>\n<ul>\n<li>ZAdd():添加元素</li>\n<li>ZIncrBy():增加元素分值</li>\n<li>ZRange()、ZRevRange():获取根据score排序后的数据段</li>\n<li>ZRangeByScore()、ZRevRangeByScore():获取score过滤后排序的数据段</li>\n<li>ZCard():获取元素个数</li>\n<li>ZCount():获取区间内元素个数</li>\n<li>ZScore():获取元素的score</li>\n<li>ZRank()、ZRevRank():获取某个元素在集合中的排名</li>\n<li>ZRem():删除元素</li>\n<li>ZRemRangeByRank():根据排名来删除</li>\n<li>ZRemRangeByScore():根据分值区间来删除</li>\n</ul>\n<p><br/></p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zsetExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有序集合成员与分数设置</span></span><br><span class=\"line\">  <span class=\"comment\">// zSet类型需要使用特定的类型值*redis.Z，以便作为排序使用</span></span><br><span class=\"line\">  lang := []*redis.Z&#123;</span><br><span class=\"line\">    &amp;redis.Z&#123;Score: <span class=\"number\">90.0</span>, Member: <span class=\"string\">\"Golang\"</span>&#125;,</span><br><span class=\"line\">    &amp;redis.Z&#123;Score: <span class=\"number\">98.0</span>, Member: <span class=\"string\">\"Java\"</span>&#125;,</span><br><span class=\"line\">    &amp;redis.Z&#123;Score: <span class=\"number\">95.0</span>, Member: <span class=\"string\">\"Python\"</span>&#125;,</span><br><span class=\"line\">    &amp;redis.Z&#123;Score: <span class=\"number\">97.0</span>, Member: <span class=\"string\">\"JavaScript\"</span>&#125;,</span><br><span class=\"line\">    &amp;redis.Z&#123;Score: <span class=\"number\">99.0</span>, Member: <span class=\"string\">\"C/C++\"</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//插入ZSet类型</span></span><br><span class=\"line\">  num, err := rdb.ZAdd(ctx, <span class=\"string\">\"language_rank\"</span>, lang...).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"zadd failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"zadd %d succ.\\n\"</span>, num)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将ZSet中的某一个元素顺序值增加: 把Golang的分数加10</span></span><br><span class=\"line\">  newScore, err := rdb.ZIncrBy(ctx, <span class=\"string\">\"language_rank\"</span>, <span class=\"number\">10.0</span>, <span class=\"string\">\"Golang\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"zincrby failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Golang's score is %f now.\\n\"</span>, newScore)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据分数排名取出元素:取分数最高的3个</span></span><br><span class=\"line\">  ret, err := rdb.ZRevRangeWithScores(ctx, <span class=\"string\">\"language_rank\"</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"zrevrange failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"zsetKey前3名热度的是: %v\\n,Top 3 的 Memeber 与 Score 是:\\n\"</span>, ret)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, z := <span class=\"keyword\">range</span> ret &#123;</span><br><span class=\"line\">    fmt.Println(z.Member, z.Score)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ZRangeByScore()、ZRevRangeByScore():获取score过滤后排序的数据段</span></span><br><span class=\"line\">  <span class=\"comment\">// 此处表示取95~100分的</span></span><br><span class=\"line\">  op := redis.ZRangeBy&#123;</span><br><span class=\"line\">    Min: <span class=\"string\">\"95\"</span>,</span><br><span class=\"line\">    Max: <span class=\"string\">\"100\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ret, err = rdb.ZRangeByScoreWithScores(ctx, <span class=\"string\">\"language_rank\"</span>, &amp;op).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"zrangebyscore failed, err:%v\\n\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 输出全部成员及其score分数</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"language_rank 键存储的全部元素:\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, z := <span class=\"keyword\">range</span> ret &#123;</span><br><span class=\"line\">    fmt.Println(z.Member, z.Score)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># go run .</span></span><br><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">zadd 0 succ.</span><br><span class=\"line\">Golang\\<span class=\"string\">'s score is 100.000000 now.</span></span><br><span class=\"line\"><span class=\"string\">zsetKey前3名热度的是: [&#123;100 Golang&#125; &#123;99 C/C++&#125; &#123;98 Java&#125;]</span></span><br><span class=\"line\"><span class=\"string\">,Top 3 的 Memeber 与 Score 是:</span></span><br><span class=\"line\"><span class=\"string\">Golang 100</span></span><br><span class=\"line\"><span class=\"string\">C/C++ 99</span></span><br><span class=\"line\"><span class=\"string\">Java 98</span></span><br><span class=\"line\"><span class=\"string\">language_rank 键存储的全部元素:</span></span><br><span class=\"line\"><span class=\"string\">Python 95</span></span><br><span class=\"line\"><span class=\"string\">JavaScript 97</span></span><br><span class=\"line\"><span class=\"string\">Java 98</span></span><br><span class=\"line\"><span class=\"string\">C/C++ 99</span></span><br><span class=\"line\"><span class=\"string\">Golang 100</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># redis-cli</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; keys language_rank*</span></span><br><span class=\"line\"><span class=\"string\">1) \"language_rank\"</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; keys language_rank*</span></span><br><span class=\"line\"><span class=\"string\">1) \"language_rank\"</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; ZCARD language_rank</span></span><br><span class=\"line\"><span class=\"string\">(integer) 5</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; ZRANGE language_rank 1 3  # 1-3 索引的成员名称</span></span><br><span class=\"line\"><span class=\"string\">1) \"JavaScript\"</span></span><br><span class=\"line\"><span class=\"string\">2) \"Java\"</span></span><br><span class=\"line\"><span class=\"string\">3) \"C/C++\"</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1:6379&gt; ZRANGEBYSCORE language_rank 99 100 WITHSCORES</span></span><br><span class=\"line\"><span class=\"string\">1) \"C/C++\"</span></span><br><span class=\"line\"><span class=\"string\">2) \"99\"</span></span><br><span class=\"line\"><span class=\"string\">3) \"Golang\"</span></span><br><span class=\"line\"><span class=\"string\">4) \"100\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"哈希-hash-类型操作\"><a href=\"#哈希-hash-类型操作\" class=\"headerlink\" title=\"哈希(hash)类型操作\"></a>哈希(hash)类型操作</h4><p>常用方法:</p>\n<ul>\n<li>HSet():设置</li>\n<li>HMset():批量设置</li>\n<li>HGet():获取某个元素</li>\n<li>HGetAll():获取全部元素</li>\n<li>HDel():删除某个元素</li>\n<li>HExists():判断元素是否存在</li>\n<li>HLen():获取长度</li>\n</ul>\n<p><br></p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hashExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// (1) HSet() 设置字段和值</span></span><br><span class=\"line\">  rdb.HSet(ctx, <span class=\"string\">\"huser\"</span>, <span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>)</span><br><span class=\"line\">  rdb.HSet(ctx, <span class=\"string\">\"huser\"</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"key3\"</span>, <span class=\"string\">\"value3\"</span>, <span class=\"string\">\"key4\"</span>, <span class=\"string\">\"value4\"</span>&#125;)</span><br><span class=\"line\">  rdb.HSet(ctx, <span class=\"string\">\"huser\"</span>, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"key5\"</span>: <span class=\"string\">\"value5\"</span>, <span class=\"string\">\"key6\"</span>: <span class=\"string\">\"value6\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (2) HMset():批量设置</span></span><br><span class=\"line\">  rdb.HMSet(ctx, <span class=\"string\">\"hmuser\"</span>, <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">88</span>, <span class=\"string\">\"address\"</span>: <span class=\"string\">\"重庆\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (3) HGet() 获取某个元素</span></span><br><span class=\"line\">  address, _ := rdb.HGet(ctx, <span class=\"string\">\"hmuser\"</span>, <span class=\"string\">\"address\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"hmuser.address -&gt; \"</span>, address)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (4) HGetAll() 获取全部元素</span></span><br><span class=\"line\">  hmuser, _ := rdb.HGetAll(ctx, <span class=\"string\">\"hmuser\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"hmuser :=&gt; \"</span>, hmuser)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (5) HExists 判断元素是否存在</span></span><br><span class=\"line\">  flag, _ := rdb.HExists(ctx, <span class=\"string\">\"hmuser\"</span>, <span class=\"string\">\"address\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"address 是否存在 hmuser 中: \"</span>, flag)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (6) HLen() 获取长度</span></span><br><span class=\"line\">  length, _ := rdb.HLen(ctx, <span class=\"string\">\"hmuser\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"hmuser hash 键长度: \"</span>, length)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// (7) HDel() 支持一次删除多个元素</span></span><br><span class=\"line\">  count, _ := rdb.HDel(ctx, <span class=\"string\">\"huser\"</span>, <span class=\"string\">\"key3\"</span>, <span class=\"string\">\"key4\"</span>).Result()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"删除元素的个数: \"</span>, count)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">hmuser.address -&gt;  重庆</span><br><span class=\"line\">hmuser :=&gt;  map[address:重庆 age:88 name:WeiyiGeek]</span><br><span class=\"line\">address 是否存在 hmuser 中: <span class=\"literal\">true</span></span><br><span class=\"line\">hmuser <span class=\"built_in\">hash</span> 键长度: 3</span><br><span class=\"line\">删除元素的个数: 2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *user</span><br><span class=\"line\">1) <span class=\"string\">\"hmuser\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"huser\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGETALL huser</span><br><span class=\"line\">1) <span class=\"string\">\"key1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"value1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"key2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"value2\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"key6\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"value6\"</span></span><br><span class=\"line\">7) <span class=\"string\">\"key5\"</span></span><br><span class=\"line\">8) <span class=\"string\">\"value5\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HGET hmuser name</span><br><span class=\"line\"><span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; HLEN hmuser</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"基数统计-HyperLogLog-类型操作\"><a href=\"#基数统计-HyperLogLog-类型操作\" class=\"headerlink\" title=\"基数统计 HyperLogLog 类型操作\"></a>基数统计 HyperLogLog 类型操作</h4><p>描述: 用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p>\n<p>Tips: 每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数.</p>\n<p><strong>示例代码:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hyperLogLogExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"Start ExampleClient_HyperLogLog\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> log.Println(<span class=\"string\">\"End ExampleClient_HyperLogLog\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//  设置 HyperLogLog 类型的键  pf_test_1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">    rdb.PFAdd(ctx, <span class=\"string\">\"pf_test_1\"</span>, fmt.Sprintf(<span class=\"string\">\"pf1key%d\"</span>, i))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ret, err := rdb.PFCount(ctx, <span class=\"string\">\"pf_test_1\"</span>).Result()</span><br><span class=\"line\">  log.Println(ret, err)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  设置 HyperLogLog 类型的键  pf_test_2</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    rdb.PFAdd(ctx, <span class=\"string\">\"pf_test_2\"</span>, fmt.Sprintf(<span class=\"string\">\"pf2key%d\"</span>, i))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ret, err = rdb.PFCount(ctx, <span class=\"string\">\"pf_test_2\"</span>).Result()</span><br><span class=\"line\">  log.Println(ret, err)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  合并两个 HyperLogLog 类型的键  pf_test_1 + pf_test_1</span></span><br><span class=\"line\">  rdb.PFMerge(ctx, <span class=\"string\">\"pf_test\"</span>, <span class=\"string\">\"pf_test_2\"</span>, <span class=\"string\">\"pf_test_1\"</span>)</span><br><span class=\"line\">  ret, err = rdb.PFCount(ctx, <span class=\"string\">\"pf_test\"</span>).Result()</span><br><span class=\"line\">  log.Println(ret, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">2021/12/27 09:26:11 Start ExampleClient_HyperLogLog</span><br><span class=\"line\">2021/12/27 09:26:11 5 &lt;nil&gt;</span><br><span class=\"line\">2021/12/27 09:26:11 10 &lt;nil&gt;</span><br><span class=\"line\">2021/12/27 09:26:11 15 &lt;nil&gt;</span><br><span class=\"line\">2021/12/27 09:26:11 End ExampleClient_HyperLogLog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys  pf_test*</span><br><span class=\"line\">1) <span class=\"string\">\"pf_test\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"pf_test_2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"pf_test_1\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT pf_test</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br><span class=\"line\">127.0.0.1:6379&gt; PFCOUNT pf_test_1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"自定义redis指令操作\"><a href=\"#自定义redis指令操作\" class=\"headerlink\" title=\"自定义redis指令操作\"></a>自定义redis指令操作</h4><p>描述: 我们可以采用go-redis提供的Do方法，可以让我们直接执行redis-cli中执行的相关指令, 可以极大的便于使用者上手。</p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ExampleClient_CMD</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"Start ExampleClient_CMD\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> log.Println(<span class=\"string\">\"End ExampleClient_CMD\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.执行redis指令 Set 设置缓存</span></span><br><span class=\"line\">  v := rdb.Do(ctx, <span class=\"string\">\"set\"</span>, <span class=\"string\">\"NewStringCmd\"</span>, <span class=\"string\">\"redis-cli\"</span>).String()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"&gt;\"</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2.执行redis指令 Get 设置缓存</span></span><br><span class=\"line\">  v = rdb.Do(ctx, <span class=\"string\">\"get\"</span>, <span class=\"string\">\"NewStringCmd\"</span>).String()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"Method1 &gt;\"</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.匿名方式执行自定义redis命令</span></span><br><span class=\"line\">  <span class=\"comment\">// Set</span></span><br><span class=\"line\">  Set := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(client *redis.Client, ctx context.Context, key, value <span class=\"keyword\">string</span>)</span> *<span class=\"title\">redis</span>.<span class=\"title\">StringCmd</span></span> &#123;</span><br><span class=\"line\">    cmd := redis.NewStringCmd(ctx, <span class=\"string\">\"set\"</span>, key, value) <span class=\"comment\">// 关键点</span></span><br><span class=\"line\">    client.Process(ctx, cmd)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v, _ = Set(rdb, ctx, <span class=\"string\">\"NewCmd\"</span>, <span class=\"string\">\"go-redis\"</span>).Result()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"&gt; set NewCmd go-redis:\"</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Get</span></span><br><span class=\"line\">  Get := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(client *redis.Client, ctx context.Context, key <span class=\"keyword\">string</span>)</span> *<span class=\"title\">redis</span>.<span class=\"title\">StringCmd</span></span> &#123;</span><br><span class=\"line\">    cmd := redis.NewStringCmd(ctx, <span class=\"string\">\"get\"</span>, key) <span class=\"comment\">// 关键点</span></span><br><span class=\"line\">    client.Process(ctx, cmd)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v, _ = Get(rdb, ctx, <span class=\"string\">\"NewCmd\"</span>).Result()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"Method2 &gt; get NewCmd:\"</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.执行redis指令 hset 设置哈希缓存 (实践以下方式不行)</span></span><br><span class=\"line\">  <span class=\"comment\">// kv := map[string]interface&#123;&#125;&#123;\"key5\": \"value5\", \"key6\": \"value6\"&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// v, _ = rdb.Do(ctx, \"hmset\", \"NewHashCmd\", kv)</span></span><br><span class=\"line\">  <span class=\"comment\">// log.Println(\"&gt; \", v)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">2021/12/27 12:11:43 Start ExampleClient_CMD</span><br><span class=\"line\">2021/12/27 12:11:43 &gt; <span class=\"built_in\">set</span> NewStringCmd redis-cli: OK</span><br><span class=\"line\">2021/12/27 12:11:43 Method1 &gt; get NewStringCmd: redis-cli</span><br><span class=\"line\">2021/12/27 12:11:43 &gt; <span class=\"built_in\">set</span> NewCmd go-redis: OK</span><br><span class=\"line\">2021/12/27 12:11:43 Method2 &gt; get NewCmd: go-redis</span><br><span class=\"line\">2021/12/27 12:11:43 End ExampleClient_CMD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys New*</span><br><span class=\"line\">1) <span class=\"string\">\"NewCmd\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"NewStringCmd\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get NewCmd</span><br><span class=\"line\"><span class=\"string\">\"go-redis\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><br></p>\n<h4 id=\"Redis-Pipeline-通道操作\"><a href=\"#Redis-Pipeline-通道操作\" class=\"headerlink\" title=\"Redis Pipeline 通道操作\"></a>Redis Pipeline 通道操作</h4><p>描述: Pipeline 主要是一种网络优化,它本质上意味着客户端缓冲一堆命令并一次性将它们发送到服务器。这些命令不能保证在事务中执行。这样做的好处是节省了每个命令的网络往返时间（RTT）。</p>\n<p>Pipeline 基本示例如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe := rdb.Pipeline()</span><br><span class=\"line\"></span><br><span class=\"line\">incr := pipe.Incr(<span class=\"string\">\"pipeline_counter\"</span>)</span><br><span class=\"line\">pipe.Expire(<span class=\"string\">\"pipeline_counter\"</span>, time.Hour)</span><br><span class=\"line\"></span><br><span class=\"line\">_, err := pipe.Exec()</span><br><span class=\"line\">fmt.Println(incr.Val(), err)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>上面的代码相当于将以下两个命令一次发给<code>redis server</code>端执行与不使用Pipeline相比能减少一次RTT。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INCR pipeline_counter</span><br><span class=\"line\">EXPIRE pipeline_counts <span class=\"number\">3600</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>也可以使用Pipelined:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> incr *redis.IntCmd</span><br><span class=\"line\">_, err := rdb.Pipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  incr = pipe.Incr(<span class=\"string\">\"pipelined_counter\"</span>)</span><br><span class=\"line\">  pipe.Expire(<span class=\"string\">\"pipelined_counter\"</span>, time.Hour)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fmt.Println(incr.Val(), err)</span><br></pre></td></tr></table></figure></p>\n<p>所以在某些场景下，当我们有多条命令要执行时，就可以考虑使用pipeline来优化redis缓冲效率。</p>\n<p><br/></p>\n<h4 id=\"MULTI-EXEC-事务处理操作\"><a href=\"#MULTI-EXEC-事务处理操作\" class=\"headerlink\" title=\"MULTI/EXEC 事务处理操作\"></a>MULTI/EXEC 事务处理操作</h4><p>描述: Redis是单线程的，因此单个命令始终是原子的，但是来自不同客户端的两个给定命令可以依次执行，例如在它们之间交替执行。但是<code>Multi/exec</code>能够确保在其两个语句之间的命令之间没有其他客户端正在执行命令。</p>\n<p>在这种场景我们需要使用TxPipeline, 它总体上类似于上面的Pipeline, 但是它内部会使用<code>MULTI/EXEC</code>包裹排队的命令。例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipe := rdb.TxPipeline()</span><br><span class=\"line\">incr := pipe.Incr(<span class=\"string\">\"tx_pipeline_counter\"</span>)</span><br><span class=\"line\">pipe.Expire(<span class=\"string\">\"tx_pipeline_counter\"</span>, time.Hour)</span><br><span class=\"line\">_, err := pipe.Exec()</span><br><span class=\"line\">fmt.Println(incr.Val(), err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 上面代码相当于在一个RTT下执行了下面的redis命令：</span></span><br><span class=\"line\">MULTI</span><br><span class=\"line\">INCR pipeline_counter</span><br><span class=\"line\">EXPIRE pipeline_counts <span class=\"number\">3600</span></span><br><span class=\"line\">EXEC</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 还有一个与上文类似的TxPipelined方法，使用方法如下：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> incr *redis.IntCmd</span><br><span class=\"line\">_, err := rdb.TxPipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  incr = pipe.Incr(<span class=\"string\">\"tx_pipelined_counter\"</span>)</span><br><span class=\"line\">  pipe.Expire(<span class=\"string\">\"tx_pipelined_counter\"</span>, time.Hour)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">fmt.Println(incr.Val(), err)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TxPipelineExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 开pipeline与事务</span></span><br><span class=\"line\">  pipe := rdb.TxPipeline()</span><br><span class=\"line\">  <span class=\"comment\">// 设置TxPipeline键缓存</span></span><br><span class=\"line\">  v, _ := rdb.Do(ctx, <span class=\"string\">\"set\"</span>, <span class=\"string\">\"TxPipeline\"</span>, <span class=\"number\">1023.0</span>).Result()</span><br><span class=\"line\">  log.Println(v)</span><br><span class=\"line\">  <span class=\"comment\">// 自增+1.0</span></span><br><span class=\"line\">  incr := pipe.IncrByFloat(ctx, <span class=\"string\">\"TxPipeline\"</span>, <span class=\"number\">1026.0</span>)</span><br><span class=\"line\">  log.Println(incr) <span class=\"comment\">// 未提交时  incr.Val() 值 为 0</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置键过期时间</span></span><br><span class=\"line\">  pipe.Expire(ctx, <span class=\"string\">\"TxPipeline\"</span>, time.Hour)</span><br><span class=\"line\">  <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">  _, err := pipe.Exec(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    log.Println(<span class=\"string\">\"执行失败, 进行回滚操作!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"事务执行成功,已提交!\"</span>)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"TxPipeline :\"</span>, incr.Val()) <span class=\"comment\">// 提交后值 为 2049</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : <span class=\"number\">10.20</span><span class=\"number\">.172</span><span class=\"number\">.248</span>:<span class=\"number\">6379</span></span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">12</span>/<span class=\"number\">27</span> <span class=\"number\">13</span>:<span class=\"number\">20</span>:<span class=\"number\">15</span> OK</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">12</span>/<span class=\"number\">27</span> <span class=\"number\">13</span>:<span class=\"number\">20</span>:<span class=\"number\">15</span> incrbyfloat TxPipeline <span class=\"number\">1026</span>: <span class=\"number\">0</span></span><br><span class=\"line\">事务执行成功,已提交!</span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">12</span>/<span class=\"number\">27</span> <span class=\"number\">13</span>:<span class=\"number\">20</span>:<span class=\"number\">15</span> TxPipeline : <span class=\"number\">2049</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # redis-cli</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; TYPE TxPipeline</span><br><span class=\"line\"><span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">6379</span>&gt; get TxPipeline</span><br><span class=\"line\"><span class=\"string\">\"2049\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Watch-监听操作\"><a href=\"#Watch-监听操作\" class=\"headerlink\" title=\"Watch 监听操作\"></a>Watch 监听操作</h4><p>描述: 在某些场景下我们除了要使用<code>MULTI/EXEC</code>命令外，还需要配合使用WATCH命令, 用户使用WATCH命令监视某个键之后，直到该用户执行EXEC命令的这段时间里，如果有其他用户抢先对被监视的键进行了替换、更新、删除等操作，那么当用户尝试执行EXEC的时候，事务将失败并返回一个错误，用户可以根据这个错误选择重试事务或者放弃事务。</p>\n<p>Watch方法接收一个函数和一个或多个key作为参数,其函数原型:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watch(fn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Tx)</span> <span class=\"title\">error</span>, <span class=\"title\">keys</span> ...<span class=\"title\">string</span>) <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>基本使用示例如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 监视watch_count的值，并在值不变的前提下将其值+1</span></span><br><span class=\"line\">key := <span class=\"string\">\"watch_count\"</span></span><br><span class=\"line\">err = client.Watch(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *redis.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">  n, err := tx.Get(key).Int()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.Nil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _, err = tx.Pipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    pipe.Set(key, n+<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;, key)</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>go-redis V8版本中: 使用<code>GET和SET</code>命令以事务方式递增Key的值的示例，仅当Key的值不发生变化时提交一个事务。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">transactionDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    maxRetries   = <span class=\"number\">1000</span></span><br><span class=\"line\">    routineCount = <span class=\"number\">10</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Increment 使用GET和SET命令以事务方式递增Key的值 (匿名函数)</span></span><br><span class=\"line\">  increment := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(key <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 事务函数</span></span><br><span class=\"line\">    txf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *redis.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获得key的当前值或零值</span></span><br><span class=\"line\">      n, err := tx.Get(ctx, key).Int()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.Nil &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 实际的操作代码（乐观锁定中的本地操作）</span></span><br><span class=\"line\">      n++</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 操作仅在 Watch 的 Key 没发生变化的情况下提交</span></span><br><span class=\"line\">      _, err = tx.TxPipelined(ctx, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        pipe.Set(ctx, key, n, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最多重试 maxRetries 次</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxRetries; i++ &#123;</span><br><span class=\"line\">      err := rdb.Watch(ctx, txf, key)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err == redis.TxFailedErr &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 乐观锁丢失 重试</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 返回其他的错误</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"increment reached maximum number of retries\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模拟 routineCount 个并发同时去修改 counter3 的值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">  wg.Add(routineCount)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; routineCount; i++ &#123;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := increment(<span class=\"string\">\"counter3\"</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"increment error:\"</span>, err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">  n, err := rdb.Get(context.TODO(), <span class=\"string\">\"counter3\"</span>).Int()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"ended with\"</span>, n, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Script-脚本操作\"><a href=\"#Script-脚本操作\" class=\"headerlink\" title=\"Script 脚本操作\"></a>Script 脚本操作</h4><p>描述: 从 Redis 2.6.0 版本开始的，使用内置的 Lua 解释器，可以对 Lua 脚本进行求值, 所以我们可直接在redis客户端中执行一些脚本。</p>\n<p>redis Eval 命令基本语法如下：<code>EVAL script numkeys key [key ...] arg [arg ...]</code></p>\n<ul>\n<li>script: 参数是一段 Lua 5.1 脚本程序。脚本不必(也不应该)定义为一个 Lua 函数。</li>\n<li>numkeys: 用于指定键名参数的个数。</li>\n<li>key [key …]: 从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问<code>( KEYS[1] ， KEYS[2] ，以此类推)</code>。</li>\n<li>arg [arg …]: 附加参数，在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似<code>( ARGV[1] 、 ARGV[2] ，诸如此类)</code>。</li>\n</ul>\n<p><code>redis.call()</code> 与 <code>redis.pcall()</code> 唯一的区别是当redis命令执行结果返回错误时 redis.call() 将返回给调用者一个错误，而redis.pcall()会将捕获的错误以Lua表的形式返回<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 利用eval执行脚本</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name weiyigeek</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return redis.call('get','name')\"</span> 0</span><br><span class=\"line\"><span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return redis.call('set','foo','bar')\"</span> 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return redis.pcall('get','foo')\"</span> 0</span><br><span class=\"line\"><span class=\"string\">\"bar\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return &#123;KEYS[1],ARGV[1],KEYS[2],ARGV[2]&#125;\"</span> 2 name age weiyigeek 25</span><br><span class=\"line\">1) <span class=\"string\">\"name\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"age\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"25\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Lua 数据类型和 Redis 数据类型之间转换</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return 10\"</span> 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 10</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return &#123;1,2,&#123;3,'Hello World!'&#125;&#125;\"</span> 0</span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">3) 1) (<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">   2) <span class=\"string\">\"Hello World!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">eval</span> <span class=\"string\">\"return redis.call('get','foo')\"</span> 0</span><br><span class=\"line\"><span class=\"string\">\"bar\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>那在<code>go-redis</code>客户端中如何执行脚本操作?</p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ScriptExample</span><span class=\"params\">(rdb *redis.Client, ctx context.Context)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Lua脚本定义1. 传递key输出指定格式的结果</span></span><br><span class=\"line\">  EchoKey := redis.NewScript(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\tif redis.call(\"GET\", KEYS[1]) ~= false then</span></span><br><span class=\"line\"><span class=\"string\">\t\t\treturn &#123;KEYS[1],\"==&gt;\",redis.call(\"get\", KEYS[1])&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\tend</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn false</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  err := rdb.Set(ctx, <span class=\"string\">\"xx_name\"</span>, <span class=\"string\">\"WeiyiGeek\"</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  val1, err := EchoKey.Run(ctx, rdb, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"xx_name\"</span>&#125;).Result()</span><br><span class=\"line\">  log.Println(val1, err)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Lua脚本定义2. 传递key与step使得，key值等于`键值+step`</span></span><br><span class=\"line\">  IncrByXX := redis.NewScript(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\t\tif redis.call(\"GET\", KEYS[1]) ~= false then</span></span><br><span class=\"line\"><span class=\"string\">\t\t\treturn redis.call(\"INCRBY\", KEYS[1], ARGV[1])</span></span><br><span class=\"line\"><span class=\"string\">\t\tend</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn false</span></span><br><span class=\"line\"><span class=\"string\">\t`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断键是否存在，存在就删除该键</span></span><br><span class=\"line\">  exist, err := rdb.Exists(ctx, <span class=\"string\">\"xx_counter\"</span>).Result()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> exist &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    res, err := rdb.Del(ctx, <span class=\"string\">\"xx_counter\"</span>).Result()</span><br><span class=\"line\">    log.Printf(<span class=\"string\">\"is Exists?: %v, del xx_counter: %v, err: %v \\n\"</span>, exist, res, err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 首次调用</span></span><br><span class=\"line\">  val2, err := IncrByXX.Run(ctx, rdb, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"xx_counter\"</span>&#125;, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"首次调用 IncrByXX.Run -&gt;\"</span>, val2, err)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 写入 xx_counter 键</span></span><br><span class=\"line\">  err = rdb.Set(ctx, <span class=\"string\">\"xx_counter\"</span>, <span class=\"number\">40</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 二次调用</span></span><br><span class=\"line\">  val3, err := IncrByXX.Run(ctx, rdb, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"xx_counter\"</span>&#125;, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"二次调用 IncrByXX.Run -&gt;\"</span>, val3, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting Redis : 10.20.172.248:6379</span><br><span class=\"line\">Connect Successful! </span><br><span class=\"line\">Ping =&gt; PONG</span><br><span class=\"line\">2021/12/27 15:00:18 [xx_name ==&gt; WeiyiGeek] &lt;nil&gt;</span><br><span class=\"line\">2021/12/27 15:00:18 is Exists?: 1, del xx_counter: 1, err: &lt;nil&gt; </span><br><span class=\"line\">2021/12/27 15:00:18 首次调用 IncrByXX.Run -&gt; &lt;nil&gt; redis: nil</span><br><span class=\"line\">2021/12/27 15:00:18 二次调用 IncrByXX.Run -&gt; 42 &lt;nil&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis-cli</span></span><br><span class=\"line\">127.0.0.1:6379&gt; keys xx*</span><br><span class=\"line\">1) <span class=\"string\">\"xx_counter\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"xx_name\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get xx_counter</span><br><span class=\"line\"><span class=\"string\">\"42\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get <span class=\"string\">\"xx_name\"</span></span><br><span class=\"line\"><span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">127.0.0.1:6379&gt; TTL xx_counter</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br></pre></td></tr></table></figure></p>\n<p>至此在使用go-Redis客户端库操作实践Redis数据库完毕!</p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}