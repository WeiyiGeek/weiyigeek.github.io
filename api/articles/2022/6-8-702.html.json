{"title":"11.计算机科学导论之数据结构学习笔记","slug":"书籍笔记/计算机科学导论/11.计算机科学导论之数据结构学习笔记","date":"2022-06-08T08:35:30.000Z","updated":"2023-01-03T07:52:17.713Z","url":"2022/6-8-702.html","path":"api/articles/2022/6-8-702.html.json","covers":["https://img.weiyigeek.top/2022/8/image-20221010160105750.png","https://img.weiyigeek.top/2022/8/image-20221010170017937.png","https://img.weiyigeek.top/2022/8/image-20221017101827727.png","https://img.weiyigeek.top/2022/8/image-20221017142642576.png","https://img.weiyigeek.top/2022/8/image-20221017165341947.png","https://img.weiyigeek.top/2022/8/image-20221017152545868.png","https://img.weiyigeek.top/2022/8/image-20221017161001029.png","https://img.weiyigeek.top/2022/8/image-20221017163149735.png","https://img.weiyigeek.top/2022/8/image-20221017163457092.png","https://img.weiyigeek.top/2022/8/image-20221017163526013.png","https://img.weiyigeek.top/2022/8/image-20221017163736708.png","https://img.weiyigeek.top/2022/8/image-20221017155500205.png"],"content":"<p>[TOC]</p>\n<h1 id=\"计算机科学导论学习笔记\"><a href=\"#计算机科学导论学习笔记\" class=\"headerlink\" title=\"计算机科学导论学习笔记\"></a>计算机科学导论学习笔记</h1><h2 id=\"第-5-部分-数据组织与抽象\"><a href=\"#第-5-部分-数据组织与抽象\" class=\"headerlink\" title=\"第 5 部分 数据组织与抽象\"></a>第 5 部分 数据组织与抽象</h2><p>此部分包含第<strong>11</strong>、<strong>12</strong>、<strong>13</strong>和<strong>14</strong> 章，讨论了数据结构、抽象数据类型、文件结构以及数据库原理。</p>\n<p>在计算机科学中，原子数据汇集成记录、文件和数据库，而数据抽象使得程序员能创建关于数据的抽象观念。</p>\n<a id=\"more\"></a>\n<h3 id=\"11-数据结构\"><a href=\"#11-数据结构\" class=\"headerlink\" title=\"11.数据结构\"></a>11.数据结构</h3><p>在前面学习中使用变量来存储单个实体，尽管单变量在程序设计语言中被大量使用，但它们不能有效地解决复杂问题，所以我们需要不同的数据结构。</p>\n<p><strong>什么是数据结构?</strong></p>\n<blockquote>\n<p>数据结构利用了有关的变量的集合，而这些集合能够单独或作为一个整体被访问，即<code>一个数据结构代表了有特殊关系的数据的集合。</code></p>\n<p>例如：常见的三种数据结构数组(Array)、记录(Record) 和 链表(List).</p>\n</blockquote>\n<h4 id=\"11-1-数组（Array）\"><a href=\"#11-1-数组（Array）\" class=\"headerlink\" title=\"11.1 数组（Array）\"></a>11.1 数组（Array）</h4><p>数组（类型）在常见的高级语言中都是被支持，它可以帮助我们处理大量同类型的数据。</p>\n<p><strong>数组定义</strong>：数组是元素的顺序集合，通常这些元素具有相同的数据类型。</p>\n<p><strong>索引定义</strong>: 表示元素在数组中的顺序号，顺序号从数组开始处计数，通常是从0开始。</p>\n<p>在开发中高级语言（C、C++、Java、Go），其数组下标索引常常是从0处开始，例如首个元素 <code>scores[0]</code>由<code>数组名+索引</code>组成，其中 scores是数组名称，0是索引下。</p>\n<blockquote>\n<p>即<code>数组名</code>是整个结构的名字，而<code>元素</code>的名字允许我们查阅这个元素</p>\n</blockquote>\n<h5 id=\"1-一、二维或多维数组\"><a href=\"#1-一、二维或多维数组\" class=\"headerlink\" title=\"(1) 一、二维或多维数组\"></a>(1) 一、二维或多维数组</h5><p>一维数组：数据仅是在一个方向上线性组成。</p>\n<p>二维数组：数据包括行和列共同指向对应元素，例如 <code>excl</code> 表格。</p>\n<p>多维数组：多于二维的数组也是可以的，例如3D空间坐标轴 <code>x,y,z</code>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221010160105750.png\" alt=\"WeiyiGeek.一维、二维、多维数组\" title=\"\" class=\"\">\n                <p>WeiyiGeek.一维、二维、多维数组</p>\n            </figure>\n<h5 id=\"2-数组存储\"><a href=\"#2-数组存储\" class=\"headerlink\" title=\"(2) 数组存储\"></a>(2) 数组存储</h5><p>一维数组：其索引直接定义了元素在实际存储上的相对位置。</p>\n<blockquote>\n<p>例如，有一个一维 weiyigeek 数组有10个整数元素，其中首元素<code>weiyigeek[0]</code>存储的物理地址假设为<code>1000</code>（此处使用十进制演示，通常情况下在计算机中是十六进制表示）,</p>\n<p>按照在x64系统中 C 语言的 int 整型占 4 Bit，则 尾元素<code>weiyigeek[9]</code> 存储物理地址为 1000+4*9 = 1036</p>\n</blockquote>\n<p>二维数组：使用行和列表示，所以其可以使用<code>行主序存储</code>或<code>列主序存储</code>的，取决于语言特性。</p>\n<ul>\n<li><p>如果计算机使用<code>行</code>主序存储(常见)，其中数组的一个整行在内存上存储在下一个行之前。</p>\n</li>\n<li><p>如果计算机使用<code>列</code>主序存储，其中一个整列在内存上存储在下一个列之前。</p>\n</li>\n</ul>\n<blockquote>\n<p>例如，有一个二维数组 weiyigeek 有 5行 x 4列 个元素，假设 <code>weiyigeek [0][0]</code>元素物理地址为 1000 ，并且每个元素占用一个存储地址。</p>\n<p>则<code>weiyigeek [2][3]</code> 行存储物理地址为 <code>x起始地址 + Cols * (i) + j = 1000 + 4*2  + 3</code> = 1011，即该元素的物理地址就是 1011 。</p>\n</blockquote>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20221010170017937.png\" alt=\"WeiyiGeek.数组的存储\"></p>\n<h5 id=\"3-数组操作\"><a href=\"#3-数组操作\" class=\"headerlink\" title=\"(3) 数组操作\"></a>(3) 数组操作</h5><p>数组作为结构的常用操作有：<code>查找、插入、删除、检索 和遍历.</code></p>\n<p><strong>查找元素</strong>: 我们可以对未排序的数组使用顺序査找，对排序的数组使用折半查找。</p>\n<p><strong>插入元素</strong>: 通常计算机语言要求数组的大小(数组中元素的个数) 在程序被写的时候就被定义， 防止在程序的执行过程中被修改，当需要插入元素（<code>尾部、开始或者中间插入</code>）时，通常是将其拷贝到一个新变量中。</p>\n<blockquote>\n<p>尾部插入：如果插入操作在数组尾部进行，而且语言允许增加数组的大小，那便非常简单了。</p>\n<p>开始或中间插入：</p>\n<ul>\n<li>如果插入操作在开始位置则创建一个新的数组插入首元素后将原数组后续依次移动拷贝。</li>\n<li>如果中间插入操作，也是现将查询到元素前面值复制到新数组中，然后插入值，最后将剩余部分元素依次移动拷贝。</li>\n</ul>\n</blockquote>\n<p><strong>删除元素</strong>: 在数组中删除一个元素就像插入操作一样冗长和棘手。例如，如果要删除第9个元素, 则需要把第10个元素到第30个元素向数组的开始位置移动一个位置。</p>\n<p><strong>检索元素</strong>: 检索操作就是随便地存取一个元素，达到检查或复制元素中的数据的目的，例如 <code>RetrieveValue ← array[9</code>。</p>\n<p>遍历元素：数组的遍历是指被应用于数组中每个元素上的操作，如<code>读、写、应用数学的运算</code>等。</p>\n<h5 id=\"4-数组应用\"><a href=\"#4-数组应用\" class=\"headerlink\" title=\"(4) 数组应用\"></a>(4) 数组应用</h5><p>当数据都是同类型时，当需要进行的插入和删除操作数目较少，当需要大量的査找和检索操作时，数组是合适的结构。</p>\n<p><br/></p>\n<h4 id=\"11-2-记录（record）\"><a href=\"#11-2-记录（record）\" class=\"headerlink\" title=\"11.2 记录（record）\"></a>11.2 记录（record）</h4><p>记录定义：它是一组相关元素的集合，它们可能是不同的类型，但整个记录有一个名称，即类似于C/Go语言中的结构体（struct ），在C++/JAVA语言中的类（Class）。</p>\n<p>域的定义：记录中的每个元素称为域，域是具有含义的最小命名数据，<code>域不同于变量主要在于它是记录的一部分</code>。</p>\n<h5 id=\"1-记录名与域名\"><a href=\"#1-记录名与域名\" class=\"headerlink\" title=\"(1) 记录名与域名\"></a>(1) 记录名与域名</h5><p>重点: 在记录中的元素可以是相同类型或不同类型，但记录中的所有元素必须是关联的（<code>记录中的数据必须都与一个对象关联</code>）。</p>\n<p>在记录中也有两种标识符（记录的名字和记录中各个域的名字), 记录的名字是<code>整个结构的名字</code>，而每个域的名字<code>允许我们存取这些域</code>, 例如下图中的 student 变量存储的数据。</p>\n<blockquote>\n<p>记录的名字是: student<br>域  的名字是: student.id, student.name 和 student.grade</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017101827727.png\" alt=\"WeiyiGeek.记录数据类型示例图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.记录数据类型示例图</p>\n            </figure>\n<p>第一个例子：fraction 记录，它有两个域，都是整型。<br>第二个例子：student 记录，它有三个域，包含了两种不同的数据类型。</p>\n<p><br/></p>\n<h5 id=\"2-记录与数组差异\"><a href=\"#2-记录与数组差异\" class=\"headerlink\" title=\"(2) 记录与数组差异\"></a>(2) 记录与数组差异</h5><p>数组定义了元素的集合，而记录定义了元素可以确认的部分。</p>\n<p>例如，数组可以定义一个班级的学生（40位学生），而记录定义了学生不同的属性，如标识、姓名或成绩等。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用Go语言演示</span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"keyword\">string</span></span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Scores <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> student_array = [...]<span class=\"keyword\">string</span>(<span class=\"string\">\"1001\"</span>,<span class=\"string\">\"1002\"</span>,<span class=\"string\">\"1003\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> student_struct = &amp;User&#123;ID: <span class=\"string\">\"1001\"</span>,Name: <span class=\"string\">\"经天纬地\"</span>, Scores: <span class=\"number\">99</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-记录数组与数组差异\"><a href=\"#3-记录数组与数组差异\" class=\"headerlink\" title=\"(3) 记录数组与数组差异\"></a>(3) 记录数组与数组差异</h5><p>如果我们需要定义元素的集合，且同时需要定义元素的属性，那么可以使用记录数组</p>\n<p>例如，在一个有30位学生的班级中，我们可以有一个30个记录的数组，每个记录表示一位学生。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用Go语言演示</span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID   <span class=\"keyword\">string</span></span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Scores <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> struct_array = [...]User&#123;&#123;ID:<span class=\"string\">\"1001\"</span>,Name:<span class=\"string\">\"经天纬地\"</span>, Scores: <span class=\"number\">99</span>&#125;,&#123;ID:<span class=\"string\">\"1002\"</span>,Name:<span class=\"string\">\"WeiyiGeek\"</span>, Scores: <span class=\"number\">100</span>&#125;&#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\"</span>,struct_array)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%v\"</span>,struct_array[<span class=\"number\">1</span>]) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果输出: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;1001 经天纬地 99&#125; &#123;1002 WeiyiGeek 100&#125;]</span><br><span class=\"line\">&#123;1002 WeiyiGeek 100&#125;</span><br></pre></td></tr></table></figure>\n<p>由上可以看出数组和记录数组都表示<code>数据项的列表</code>，数组可以被看成是记录数组的一种特例，其中每个元素是只带一个域的记录。</p>\n<p><br/></p>\n<h4 id=\"11-3-链表（Link）\"><a href=\"#11-3-链表（Link）\" class=\"headerlink\" title=\"11.3 链表（Link）\"></a>11.3 链表（Link）</h4><p><strong>链表</strong>：是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p>\n<p>链表一个数据的集合，其中每个元素包含下一个元素的地址，即每个元素包含两部分<code>数据和链</code>。</p>\n<ul>\n<li><strong>数据部分</strong>：包含可用的信息，并被处理。</li>\n<li><strong>链</strong>：则将数据连在一起，它包含一个指明列表中下一个元素的指针(地址)。另外，一个指针变量标识该列表中的第一个元素，列表的名字就是该指针变量的名字，例如 C语言取链表地址的节点值<code>*link</code>。</li>\n</ul>\n<p>例如，下图中，显示了一个称为scores的链表，它含有4个元素（<code>通常称为节点</code>）以及一个空链表的、地址副本例子。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017142642576.png\" alt=\"WeiyiGeek.链表示例图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.链表示例图</p>\n            </figure>\n<p><strong>链表的优缺点</strong></p>\n<ul>\n<li><p>优点：在链表中进行的插入和删除操作更容易些，只需改变指向下一元素地址的指针。</p>\n</li>\n<li><p>缺点：有额外的开销，链表的每个节点有一个额外的域，存放内存中下一节点的地址，不便于数据查找。</p>\n</li>\n</ul>\n<p><br/></p>\n<h5 id=\"1-链表名与节点名\"><a href=\"#1-链表名与节点名\" class=\"headerlink\" title=\"(1) 链表名与节点名\"></a>(1) 链表名与节点名</h5><p>链表必须要有一个名字，并且需要区分链表名和节点名（<code>链表中的元素</code>）, </p>\n<p><strong>链表名</strong>：<code>是头指针的名字</code>，该头指针<code>指向表中第一个节点</code>,</p>\n<p><strong>节点名</strong>：在链表中并没有明显的名字，有的只是隐含的名字，节点的名字与指向节点的指针有关。例如，指向节点的指针称为<code>P</code>，我们称节点为<code>*P</code>。</p>\n<p>即，我们常常使用<code>首元结点、头结点和头指针</code>三个概念来表示。</p>\n<ul>\n<li>首元结点：就是链表中存储第一个元素的结点，如下图中 a1 的位置。</li>\n<li>头结点：它是在首元结点之前附设的一个结点，其指针域指向首元结点。头结点的数据域可以存储链表的长度或者其它的信息，也可以为空不存储任何信息。</li>\n<li>头指针：它是指向链表中第一个结点的指针。若链表中有头结点，则头指针指向头结点；若链表中没有头结点，则头指针指向首元结点。</li>\n</ul>\n<p>例如，下图所示的单向链表。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017165341947.png\" alt=\"WeiyiGeek.单向链表\" title=\"\" class=\"\">\n                <p>WeiyiGeek.单向链表</p>\n            </figure>\n<p>温馨提示: 头结点在链表中不是必须的，但增加头结点有以下几点好处。</p>\n<ul>\n<li>增加了头结点后，首元结点的地址保存在头结点的指针域中，对链表的第一个数据元素的操作与其他数据元素相同，无需进行特殊处理。</li>\n<li>增加头结点后，无论链表是否为空，头指针都是指向头结点的非空指针，若链表为空的话，那么头结点的指针域为空。</li>\n</ul>\n<p>例如，指针P所指节点的数据部分和链部分分别为<code>（*p）.data</code>和<code>（*p).link</code>. 这种命名约定隐含着一个节点可以有多于一个的名字。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017152545868.png\" alt=\"WeiyiGeek.链表名与节点名\" title=\"\" class=\"\">\n                <p>WeiyiGeek.链表名与节点名</p>\n            </figure>\n<p>下面以Go语言使用 Struct 作为链表的节点进行演示链表。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Go语言演示链表</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Struct 定义一个单向链表</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Data  <span class=\"keyword\">int</span></span><br><span class=\"line\">  Next  *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 为链表赋值</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> head = <span class=\"built_in\">new</span>(Node)</span><br><span class=\"line\"> head.Data = <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> node1 = <span class=\"built_in\">new</span>(Node)</span><br><span class=\"line\"> node1.Data = <span class=\"number\">1001</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> node2 = <span class=\"built_in\">new</span>(Node)</span><br><span class=\"line\"> node2.Data = <span class=\"number\">1002</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 将链表中head 、node1 与 node2 链成一串</span></span><br><span class=\"line\"> head.Next = node1</span><br><span class=\"line\"> node1.Next = node2</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 链表输出</span></span><br><span class=\"line\"> fmt.Printf(<span class=\"string\">\"%v \\n\"</span>,head)</span><br><span class=\"line\"> fmt.Println(node1)</span><br><span class=\"line\"> fmt.Println(node2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;&#123;1000 0xc000010220&#125;</span><br><span class=\"line\">&amp;&#123;1001 0xc000010230&#125;</span><br><span class=\"line\">&amp;&#123;1002 &#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h5 id=\"2-链表操作\"><a href=\"#2-链表操作\" class=\"headerlink\" title=\"(2) 链表操作\"></a>(2) 链表操作</h5><p>链表有 <code>单向链表、双向链表以及循环链表</code> 三种类型，如下演示以单向链表为例。</p>\n<p><strong>1.查找链表</strong></p>\n<p>因为链表中的节点没有特定的名字（不像数组中的元素），既然链表中的节点没有名字，那我们使用两个指针：pre （先前的节点）和cur （当前的节点）。</p>\n<p>例如，在5个节点的表中，假定目标值是220，它比表中任何值都大，下面都假设是排序后的链表。</p>\n<ul>\n<li>在第一种情况中，目标是98 ，此值在链表中不存在，而且比表中任何值都小，所以cur指向第一个节点时，此时pre为空，算法停止。</li>\n<li>在第二种情况中，目标是132，此值是第二个节点的值，当 cur 指针指向第二个节点，pre指针指向第一个节点时，算法停止。</li>\n<li>在第三种和第四种情况中，目标都没有找到，所以标记的值为假。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017161001029.png\" alt=\"WeiyiGeek.链表查找示例图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.链表查找示例图</p>\n            </figure>\n<p><br/></p>\n<p><strong>2.节点插入</strong></p>\n<p>通常会出现以下四种插入情况，<code>在空表中插入、在表的开始处插入、在表的末尾插入、在表中间插入</code></p>\n<ul>\n<li><p>在空表中插入：如果链表表是空(<code>list=null</code>)，新数据项被作为第一个元素插入。</p>\n</li>\n<li><p>在表的开始处插入：如果 pre 指针的值为空，那数据就插在表的开始处。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017163149735.png\" alt=\"WeiyiGeek.表开始处插入\" title=\"\" class=\"\">\n                <p>WeiyiGeek.表开始处插入</p>\n            </figure>\n<ul>\n<li>在表的末尾插入: 如果查找算法返回的标记为假，cur指针的值为空，说明已经到链表末尾，那数据就需要插在表的末尾。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017163457092.png\" alt=\"WeiyiGeek.在表的末尾插入\" title=\"\" class=\"\">\n                <p>WeiyiGeek.在表的末尾插入</p>\n            </figure>\n<ul>\n<li>在表中间插入: 如果查找算法返回的标记值为假，判断链表长度，当两个指针都不为空且在链表表中间时，那新数据就需要插在表的中间。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017163526013.png\" alt=\"WeiyiGeek.在表中间插入\" title=\"\" class=\"\">\n                <p>WeiyiGeek.在表中间插入</p>\n            </figure>\n<p><br/></p>\n<p><strong>3.删除节点</strong></p>\n<p>在链表中删除节点之前，我们要先应用查找算法，如果査找算法返回的标记是真(节点找到)，我们可以从链表中删除该节点。</p>\n<ul>\n<li>删除首节点：如果pre指针为空，首节点将被删除。</li>\n<li>删除中间或末尾节点：如果两个指针都不为空，那要删除的节点或者是中间节点，或者是末尾节点，即通过把后继节点与前驱节点连接在一起，即表明当前节点被删除。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017163736708.png\" alt=\"WeiyiGeek.删除链表中的节点\" title=\"\" class=\"\">\n                <p>WeiyiGeek.删除链表中的节点</p>\n            </figure>\n<p><br/></p>\n<p><strong>4.检索节点</strong></p>\n<p>检索就是为了检査或复制节点中所含数据的目的而随机访问节点。</p>\n<p>在检索之前，链表需要被查找，如果找到数据那它被检索，否则过程终止，值得注意检索只使用cur指针，它指向被査找算法找到的节点。</p>\n<p><br/></p>\n<p><strong>5.遍历链表</strong></p>\n<p>为了遍历链表，需要一个“步行”指针，当元素被处理时，它从一个节点移到另一 个节点。</p>\n<p>开始遍历时，我们把步行指针指向链表中的首节点，然后使用循环，直到所有数据都被处理，每次循环处理当前节点，然后把步行指针指向下一个节点。当最后一个节点被处理完时，步行指针变为空，循环终止。</p>\n<p>此处使用Go语言进行链表的操作。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Struct 定义一个单向链表</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   data  <span class=\"keyword\">int</span></span><br><span class=\"line\">   next  *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历链表函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Shownode</span><span class=\"params\">(p *Node)</span></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> p != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(*p)   <span class=\"comment\">// </span></span><br><span class=\"line\">        p=p.next          <span class=\"comment\">//移动指针,指向下一个地址</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 头部插入 3 -&gt; 2 -&gt; 1 -&gt; 0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> head = <span class=\"built_in\">new</span>(Node)</span><br><span class=\"line\">    head.data = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tail *Node</span><br><span class=\"line\">    tail = head         <span class=\"comment\">//tail用于记录头结点的地址，刚开始tail的的指针指向头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\">1</span> ;i&lt;<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = Node&#123;data:i&#125;</span><br><span class=\"line\">        node.next = tail    <span class=\"comment\">//将新插入的node的next指向头结点</span></span><br><span class=\"line\">        tail = &amp;node        <span class=\"comment\">//取指针地址,重新赋值头结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在头部进行插入</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = Node&#123;data: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">    temp.next = tail   <span class=\"comment\">// 重点</span></span><br><span class=\"line\">    tail = &amp;temp</span><br><span class=\"line\">    </span><br><span class=\"line\">    Shownode(tail)    <span class=\"comment\">//遍历结果      </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"----------------------------------------\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 尾部插入 0 -&gt; 1 -&gt; 2 -&gt; 3  </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"built_in\">new</span>(Node)</span><br><span class=\"line\">    end.data = <span class=\"number\">0</span></span><br><span class=\"line\">    tail = end           <span class=\"comment\">// tail 用于记录最末尾的结点的地址，刚开始tail的的指针指向头结点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i :=<span class=\"number\">1</span> ;i&lt;<span class=\"number\">5</span>; i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> node = Node&#123;data:i&#125;</span><br><span class=\"line\">        (*tail).next = &amp;node    <span class=\"comment\">// 取指针值 ，将头节点指向插入的新节点</span></span><br><span class=\"line\">        tail = &amp;node            <span class=\"comment\">// 取指针地址,重新赋值尾部结点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在尾部进行插入</span></span><br><span class=\"line\">    temp = Node&#123;data: <span class=\"number\">100</span>&#125;</span><br><span class=\"line\">    (*tail).next = &amp;temp    <span class=\"comment\">// 重点</span></span><br><span class=\"line\">    tail = &amp;temp</span><br><span class=\"line\">    </span><br><span class=\"line\">    Shownode(end)          <span class=\"comment\">// 遍历结果</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 头插法 从大到小 一致指向头结点</span><br><span class=\"line\">&#123;100 0xc00005c220&#125;</span><br><span class=\"line\">&#123;4 0xc00005c210&#125;</span><br><span class=\"line\">&#123;3 0xc00005c200&#125;</span><br><span class=\"line\">&#123;2 0xc00005c1f0&#125;</span><br><span class=\"line\">&#123;1 0xc00005c1e0&#125;</span><br><span class=\"line\">&#123;0 &#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">// 头插法 从小到大 一致指向尾结点</span><br><span class=\"line\">&#123;0 0xc00005c2b0&#125;</span><br><span class=\"line\">&#123;1 0xc00005c2c0&#125;</span><br><span class=\"line\">&#123;2 0xc00005c2d0&#125;</span><br><span class=\"line\">&#123;3 0xc00005c2e0&#125;</span><br><span class=\"line\">&#123;4 0xc00005c230&#125;</span><br><span class=\"line\">&#123;100 &#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h5 id=\"3-链表与数组差异\"><a href=\"#3-链表与数组差异\" class=\"headerlink\" title=\"(3) 链表与数组差异\"></a>(3) 链表与数组差异</h5><p><code>数组和链表</code>都能表示内存中的数据项列表，其唯一的区别在于数据项连接在一起的方式。</p>\n<p>在<code>记录数组</code>中，连接工具是索引，物理地址是有序的（连续），例如 <code>元素scores[3]与元素scores[4]相连</code></p>\n<p>在<code>链表</code>中，连接工具是指向下一元素的链（指针或下一元素的地址），其节点尾部的物理地址是无序的，换言之，计算机可以选择连续存储它们或把节点分布在整个内存中。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221017155500205.png\" alt=\"WeiyiGeek.数组与链表\" title=\"\" class=\"\">\n                <p>WeiyiGeek.数组与链表</p>\n            </figure>\n<p><strong>总结：链表与数组相比，链表可以无限增长，也可以缩短为空，并且节点很容易被删除，不需要移动其他节点，但是不利于数据查询。</strong></p>\n<p><br/></p>\n<h5 id=\"4-链表应用\"><a href=\"#4-链表应用\" class=\"headerlink\" title=\"(4) 链表应用\"></a>(4) 链表应用</h5><p>当需要对存储数据进行许多插入和删除的场景时，链表是一种非常高效动态的数据结构，其中表从没有节点开始，然后当需要新节点时，它就逐渐增长。</p>\n<p>例如，链表可以应用于包含学校学生的记录，每季或每学期，新生进入学校，而有些学生离开学校或毕业的场景。</p>\n<p><strong>总结：如果需要大量的插入和删除，那么链表是合适的结构，但查找一个链表比査找一个数组要慢</strong></p>\n<p>在下一章中，我们可以看到一些抽象数据类型，它们既有数组对于査找的优点，也有链表对于插入和删除的优点。</p>\n","comments":true,"excerpt":"[TOC]计算机科学导论学习笔记第 5 部分 数据组织与抽象此部分包含第11、12、13和14 章，讨论了数据结构、抽象数据类型、文件结构以及数据库原理。在计算机科学中，原子数据汇集成记录、文件和数据库，而数据抽象使得程序员能创建关于数据的抽象观念。","categories":[{"name":"计算机基础知识","path":"api/categories/计算机基础知识.json"}],"tags":[{"name":"计算机科学导论","path":"api/tags/计算机科学导论.json"}]}