{"title":"系统进程管理查看","slug":"系统运维/Linux/常用命令/系统管理类命令/系统进程管理查看","date":"2019-06-13T11:36:30.000Z","updated":"2023-01-31T02:29:09.175Z","url":"2019/6-13-168.html","path":"api/articles/2019/6-13-168.html.json","covers":["https://img.weiyigeek.top/2019/20190612150358.png","https://img.weiyigeek.top/2019/20190612151039.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-进程查看\"><a href=\"#0x00-进程查看\" class=\"headerlink\" title=\"0x00 进程查看\"></a>0x00 进程查看</h4><p>HUP进程(Process)：就是正在运行的程序</p>\n<ul>\n<li>是指正在支持的一个程序或命令,每个进程都是一个运行的实体，都有自己的地址空间,并有一定进程管理的作用:</li>\n<li>判断服务器健康状态,查看系统中所有进程,杀死进程.</li>\n</ul>\n<hr>\n\n<h5 id=\"fuser-命令\"><a href=\"#fuser-命令\" class=\"headerlink\" title=\"fuser 命令\"></a>fuser 命令</h5><p>描述：用于报告进程使用的文件和网络套接字,还可以用指定的文件或者文件系统显示进程进程号,默认情况下每一个文件名后会跟着一个字母来表示类型,那些本地进程使用file参数指定的本地或远程文件。</p>\n<p>命令安装:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Psmisc软件包包含三个帮助管理/proc目录的程序</span><br><span class=\"line\">yum install psmisc -y <span class=\"comment\">#可以安装下列程序: fuser, killall,pstree和pstree.x11(到pstree的链接)</span></span><br></pre></td></tr></table></figure></p>\n<p>语法参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># USage:</span></span><br><span class=\"line\">fuser [-fMuvw] [-a|-s] [-4|-6] [-c|-m|-n SPACE] [-k [-i] [-SIGNAL]] NAME...</span><br><span class=\"line\">-4 IPv4</span><br><span class=\"line\">-6 IPv6</span><br><span class=\"line\">-a：显示命令行中指定的所有文件；</span><br><span class=\"line\">-k：杀死访问指定文件的所有进程；</span><br><span class=\"line\">-i：杀死进程前需要用户进行确认；</span><br><span class=\"line\">-l：列出所有已知信号名；</span><br><span class=\"line\">-m：指定一个被加载的文件系统或一个被加载的块设备；</span><br><span class=\"line\">-n：选择不同的名称空间，指定关键字进行搜索,如 文件、UDP、TCP</span><br><span class=\"line\">-u：在每个进程后显示所属的用户名。</span><br><span class=\"line\">-s 不显示处理信息</span><br><span class=\"line\">-u PID显示用户名</span><br><span class=\"line\">-v 运行时，显示相信处理信息</span><br><span class=\"line\">- 清零</span><br><span class=\"line\">-m 挂载文件系统</span><br><span class=\"line\">-signal 发送信号</span><br><span class=\"line\">-V 显示版本显示</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#对于阻塞特别设备,此命令列出了使用该设备上任何文件的进程。 </span></span><br><span class=\"line\">c：指示进程的工作目录。</span><br><span class=\"line\">e：指示该文件为进程的可执行文件(即进程由该文件拉起)。</span><br><span class=\"line\">f：指示该文件被进程打开,默认情况下f字符不显示。</span><br><span class=\"line\">F：指示该文件被进程打开进行写入,默认情况下F字符不显示。</span><br><span class=\"line\">r：指示该目录为进程的根目录。</span><br><span class=\"line\">m：指示进程使用该文件进行内存映射,抑或该文件为共享库文件,被进程映射进内存。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示支持的信号,使用最多的是</span></span><br><span class=\"line\">fuser -l  <span class=\"comment\">#HUP 平滑启动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2. 要列出使用/etc/passwd文件的本地进程的进程号与用户登录名称</span></span><br><span class=\"line\">fuser /etc/passwd</span><br><span class=\"line\">fuser -u /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例3.进程操作并获取进程对应的 PID</span></span><br><span class=\"line\">fuser -a /etc/passwd       <span class=\"comment\">##显示与/etc/passwd 目录相关的进程</span></span><br><span class=\"line\">fuser -k /etc/passwd       <span class=\"comment\">##杀死与/etc/passwd 目录相关的进</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.根据通信协议和端口来看pid信息</span></span><br><span class=\"line\">fuser -nv tcp 80     <span class=\"comment\">#指定名称空加端口,显示器进程信息</span></span><br><span class=\"line\"><span class=\"comment\"># 端口/协议：     进程PID  当前连接的PID</span></span><br><span class=\"line\"><span class=\"comment\"># 80/tcp:         1005    28805</span></span><br><span class=\"line\">fuser -k -n tcp 80  <span class=\"comment\"># 会终止该端口号进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.任一命令都列出了进程号和用户名，然后终止每个正在使用/dev/hd1 (/home)文件系统的进程。仅有root用户能终止属于另一用户的进程。</span></span><br><span class=\"line\"><span class=\"comment\">#如果您正在试图卸下/dev/hd1文件系统，而一个正在访问/dev/hd1文件系统的进程不允许这样，您可能希望使用此命令</span></span><br><span class=\"line\">fuser -k -u -c /dev/hd1 或者 fuser -kuc /home   <span class=\"comment\">#注意使用啊，貌似会关闭终端</span></span><br><span class=\"line\">fuser -km /www   <span class=\"comment\">#快速停止占用（根据挂载的目录）</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"ps-命令\"><a href=\"#ps-命令\" class=\"headerlink\" title=\"ps 命令\"></a>ps 命令</h5><p>描述：在Linux系统中PS(Process Status的缩写)命令常常用来用来列出系统中当前运行的进程，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等;，总之大部分信息都是可以通过执行该命令得到的。</p>\n<p>Tips: Linux上进程有5种状态: </p>\n<ul>\n<li>运行：正在运行或在运行队列中等待 -    R 运行 runnable (on run queue);</li>\n<li>中断：休眠中, 受阻, 在等待某个条件的形成或接受到信号 -    S 中断 sleeping;</li>\n<li>不可中断：收到信号不唤醒和不可运行, 进程必须等待直到有中断发生 -    D 不可中断 uninterruptible sleep (usually IO) ;</li>\n<li>僵死：进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放 -    Z 僵死 a defunct (”zombie”) process ;</li>\n<li>停止：进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行 -    T 停止 traced or stopped;</li>\n</ul>\n<p>命令参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。</span><br><span class=\"line\">a：显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class=\"line\">-A：显示所有程序。</span><br><span class=\"line\">-c：显示CLS和PRI栏位。</span><br><span class=\"line\">c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。</span><br><span class=\"line\">-C&lt;指令名称&gt;：指定执行指令的名称，并列出该指令的程序的状况。</span><br><span class=\"line\">-d：显示所有程序，但不包括阶段作业领导者的程序。</span><br><span class=\"line\">-e：此选项的效果和指定<span class=\"string\">\"A\"</span>选项相同。</span><br><span class=\"line\">e：列出程序时，显示每个程序所使用的环境变量。</span><br><span class=\"line\">-f：显示UID,PPIP,C与STIME栏位。</span><br><span class=\"line\">f：用ASCII字符显示树状结构，表达程序间的相互关系。</span><br><span class=\"line\">-g&lt;群组名称&gt;：此选项的效果和指定<span class=\"string\">\"-G\"</span>选项相同，当亦能使用阶段作业领导者的名称来指定。</span><br><span class=\"line\">g：显示现行终端机下的所有程序，包括群组领导者的程序。</span><br><span class=\"line\">-G&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。</span><br><span class=\"line\">h：不显示标题列。</span><br><span class=\"line\">-H：显示树状结构，表示程序间的相互关系。</span><br><span class=\"line\">-j或j：采用工作控制的格式显示程序状况。</span><br><span class=\"line\">-l或l：采用详细的格式来显示程序状况。</span><br><span class=\"line\">L：列出栏位的相关信息。</span><br><span class=\"line\">-m或m：显示所有的执行绪。</span><br><span class=\"line\">n：以数字来表示USER和WCHAN栏位。</span><br><span class=\"line\">-N：显示所有的程序，除了执行ps指令终端机下的程序之外。</span><br><span class=\"line\">-p&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。</span><br><span class=\"line\">p&lt;程序识别码&gt;：此选项的效果和指定<span class=\"string\">\"-p\"</span>选项相同，只在列表格式方面稍有差异。</span><br><span class=\"line\">r：只列出现行终端机正在执行中的程序。</span><br><span class=\"line\">-s&lt;阶段作业&gt;：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。</span><br><span class=\"line\">s：采用程序信号的格式显示程序状况。</span><br><span class=\"line\">S：列出程序时，包括已中断的子程序资料。</span><br><span class=\"line\">-t&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。</span><br><span class=\"line\">t&lt;终端机编号&gt;：此选项的效果和指定<span class=\"string\">\"-t\"</span>选项相同，只在列表格式方面稍有差异。</span><br><span class=\"line\">-T：显示现行终端机下的所有程序。</span><br><span class=\"line\">-u&lt;用户识别码&gt;：此选项的效果和指定<span class=\"string\">\"-U\"</span>选项相同。</span><br><span class=\"line\">u：以用户为主的格式来显示程序状况。</span><br><span class=\"line\">-U&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。</span><br><span class=\"line\">U&lt;用户名称&gt;：列出属于该用户的程序的状况。</span><br><span class=\"line\">v：采用虚拟内存的格式显示程序状况。</span><br><span class=\"line\">-V或V：显示版本信息。</span><br><span class=\"line\">-w或w：采用宽阔的格式来显示程序状况</span><br><span class=\"line\">-o: 指定显示进程的信息以列为主</span><br><span class=\"line\">x：显示所有程序，不以终端机来区分。</span><br><span class=\"line\">X：采用旧式的Linux i386登陆格式显示程序状况。</span><br><span class=\"line\">-y：配合选项<span class=\"string\">\"-l\"</span>使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。</span><br><span class=\"line\">-&lt;程序识别码&gt;：此选项的效果和指定<span class=\"string\">\"p\"</span>选项相同。</span><br><span class=\"line\">--cols&lt;每列字符数&gt;：设置每列的最大字符数。</span><br><span class=\"line\">--columns&lt;每列字符数&gt;：此选项的效果和指定<span class=\"string\">\"--cols\"</span>选项相同。</span><br><span class=\"line\">--cumulative：此选项的效果和指定<span class=\"string\">\"S\"</span>选项相同。</span><br><span class=\"line\">--deselect：此选项的效果和指定<span class=\"string\">\"-N\"</span>选项相同。</span><br><span class=\"line\">--forest：此选项的效果和指定<span class=\"string\">\"f\"</span>选项相同。</span><br><span class=\"line\">--headers：重复显示标题列。</span><br><span class=\"line\">--lines&lt;显示列数&gt;：设置显示画面的列数。</span><br><span class=\"line\">--no-headers：此选项的效果和指定<span class=\"string\">\"h\"</span>选项相同，只在列表格式方面稍有差异。</span><br><span class=\"line\">--group&lt;群组名称&gt;：此选项的效果和指定<span class=\"string\">\"-G\"</span>选项相同。</span><br><span class=\"line\">--Group&lt;群组识别码&gt;：此选项的效果和指定<span class=\"string\">\"-G\"</span>选项相同。</span><br><span class=\"line\">--pid&lt;程序识别码&gt;：此选项的效果和指定<span class=\"string\">\"-p\"</span>选项相同。</span><br><span class=\"line\">--rows&lt;显示列数&gt;：此选项的效果和指定<span class=\"string\">\"--lines\"</span>选项相同。</span><br><span class=\"line\">--sid&lt;阶段作业&gt;：此选项的效果和指定<span class=\"string\">\"-s\"</span>选项相同。</span><br><span class=\"line\">--tty&lt;终端机编号&gt;：此选项的效果和指定<span class=\"string\">\"-t\"</span>选项相同。</span><br><span class=\"line\">--user&lt;用户名称&gt;：此选项的效果和指定<span class=\"string\">\"-U\"</span>选项相同。</span><br><span class=\"line\">--User&lt;用户识别码&gt;：此选项的效果和指定<span class=\"string\">\"-U\"</span>选项相同。</span><br><span class=\"line\">--version：此选项的效果和指定<span class=\"string\">\"-V\"</span>选项相同。</span><br><span class=\"line\">--widty&lt;每列字符数&gt;：此选项的效果和指定<span class=\"string\">\"-cols\"</span>选项相同。</span><br></pre></td></tr></table></figure></p>\n<p>格式头说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER  PID PPID(父进程) C(进程占用CPU的百分比 ) %CPU(占用的CPU) %MEM(占用的内存) VSZ(占虚拟内存KB) RSS(占物理内存KB) TTY（终端）STAT（进程状态）START(占用实时间) STIME(进程启动的时间) TIME COMMAND</span><br><span class=\"line\">root      7248          0.0           0.0              110104          864       tty1     Ss+  14:06   0:00 /sbin/agetty --noclear tty1 linux</span><br></pre></td></tr></table></figure></p>\n<p>格式说明:</p>\n<ul>\n<li>PID:进程标识符，系统为每一个进程分配一个识别码，称为PID</li>\n<li>VSZ:该进程使用的虚拟內存量（KB）</li>\n<li>RSS:该进程占用的固定內存量（KB）（驻留中页的数量） (RSS is the “resident set size” meaning physical memory used)</li>\n<li>START:该进程的启动时间</li>\n<li>TIME:该进程占用CPU的运算时间，注意不是系统时间；</li>\n<li>TTY:linux 中tty1~tty6表示本地字符终端 tty7图形终端 pts/0 -255虚拟终端很多都是？表示很多进程都是系统进程<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">串行端口终端（/dev/ttySn）</span><br><span class=\"line\">伪终端（/dev/pty/） </span><br><span class=\"line\">控制终端（/dev/tty） </span><br><span class=\"line\">控制台终端（/dev/ttyn, /dev/console） </span><br><span class=\"line\">虚拟终端(/dev/pts/n)</span><br></pre></td></tr></table></figure></li>\n<li>COMMAND:产生此进程的命令名</li>\n<li>STAT状态位常见的状态字符有:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D      //无法中断的休眠状态（通常 IO 的进程）</span><br><span class=\"line\">R(running)       //正在运行可中在队列中可过行的</span><br><span class=\"line\">S(sleeping)      //处于休眠状态</span><br><span class=\"line\">T(terminate)     //停止或被追踪</span><br><span class=\"line\">W      //换出,进入内存交换 （从内核2.6开始无效） </span><br><span class=\"line\">X      //死掉的进程 （基本很少见）</span><br><span class=\"line\">Z      //僵尸进程； </span><br><span class=\"line\">&lt;      //优先级高的进程 </span><br><span class=\"line\">N      //优先级较低的进程 </span><br><span class=\"line\">L      //有些页被锁进内存； </span><br><span class=\"line\">s      //进程的领导者（在它之下有子进程）</span><br><span class=\"line\">l      //多线程，克隆线程（使用 CLONE_THREAD, 类似 NPTL pthreads）</span><br><span class=\"line\">P      //等待交换页</span><br><span class=\"line\">I      //(idle) 空闲</span><br><span class=\"line\">+      //位于后台的进程组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示每个环节变量,以accii树形显示并且不显示标题</span></span><br><span class=\"line\"><span class=\"variable\">$ps</span> efh   <span class=\"comment\">#以System V风格显示进程</span></span><br><span class=\"line\">7231 pts/1    Ss     0:00 -bash USER=root LOGNAME=root HOME=/root PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr</span><br><span class=\"line\">7291 pts/1    R+     0:00  \\_ ps efh XDG_SESSION_ID=31 HOSTNAME=localhost.localdomain TERM=xterm SHELL=/bi</span><br><span class=\"line\">7248 tty1     Ss+    0:00 /sbin/agetty --noclear tty1 linux LANG= PATH=/usr/<span class=\"built_in\">local</span>/sbin:/usr/<span class=\"built_in\">local</span>/bin:/usr</span><br><span class=\"line\"><span class=\"variable\">$ps</span> aux <span class=\"comment\">#最初用在Unix Style中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#显示所有进程，还有状态显示（与ps -A的区别）</span></span><br><span class=\"line\">ps x | head -n 2</span><br><span class=\"line\"><span class=\"comment\"># PID TTY      STAT   TIME COMMAND</span></span><br><span class=\"line\"><span class=\"comment\"># 1 ?        Ss     0:17 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.显示执行的命令uid以及PID和父进程 (常用)</span></span><br><span class=\"line\">ps -ef  <span class=\"comment\">#UID-PID-Command</span></span><br><span class=\"line\">ps -ef | grep firefox</span><br><span class=\"line\"><span class=\"comment\"># UID        PID  PPID  C STIME TTY          TIME CMD</span></span><br><span class=\"line\"><span class=\"comment\"># root         1     0  0 6月11 ?       00:00:01 /usr/lib/systemd/systemd --switched-root --system --deseria</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.采用linux标准命令格式查看进程执行的cmd命令</span></span><br><span class=\"line\">ps -le </span><br><span class=\"line\"><span class=\"comment\"># -l 长格式显示。显示更加详细的信息</span></span><br><span class=\"line\"><span class=\"comment\"># -e 显示所有进程和－A作用一致</span></span><br><span class=\"line\"><span class=\"comment\"># F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span></span><br><span class=\"line\"><span class=\"comment\"># 4 S     0     1     0  0  80   0 - 31359 ep_pol ?        00:00:01 systemd</span></span><br><span class=\"line\">ps -p 7193</span><br><span class=\"line\"><span class=\"comment\">#   PID TTY          TIME CMD</span></span><br><span class=\"line\"><span class=\"comment\">#  7193 ?        00:00:00 sshd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例4.线程的子线程查看</span></span><br><span class=\"line\"><span class=\"variable\">$ps</span> -p 30520</span><br><span class=\"line\"><span class=\"variable\">$ps</span> -P 30520   <span class=\"comment\">#列表格式差异</span></span><br><span class=\"line\">PID TTY          TIME CMD</span><br><span class=\"line\">30520 ?        00:00:00 docker-proxy </span><br><span class=\"line\"><span class=\"variable\">$ps</span> -Hp 30520</span><br><span class=\"line\">PID PSR TTY      STAT   TIME COMMAND</span><br><span class=\"line\">30520   3 ?        Sl     0:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 9002 -container-ip 172.18.0.4 -container-port 3306</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例5.指定显示进程的某些信息</span></span><br><span class=\"line\">ps -o %cpu,%mem,user,group,comm,nice,pid,<span class=\"built_in\">stat</span></span><br><span class=\"line\">%CPU %MEM USER     GROUP    COMMAND          NI   PID STAT</span><br><span class=\"line\"> 0.0  0.0 root     root     bash              0  5443 Ss</span><br><span class=\"line\"> 0.0  0.0 root     root     ps                0  5492 R+</span><br><span class=\"line\">[root@vm-1575613390 ~]<span class=\"comment\"># ps -a -o %cpu,%mem,user,group,comm,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例6.进程条件过滤</span></span><br><span class=\"line\"><span class=\"comment\"># 1.CPU占用最多的前10个进程</span></span><br><span class=\"line\">ps auxw|head -1;ps auxw|sort -rn -k3|head -10 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.内存消耗最多的前10个进程</span></span><br><span class=\"line\">ps auxw|head -1;ps auxw|sort -rn -k4|head -10 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.虚拟内存使用最多的前10个进程 </span></span><br><span class=\"line\">ps auxw|head -1;ps auxw|sort -rn -k5|head -10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.RSS是“驻留集大小”表示使用的物理内存最多的前10个进程</span></span><br><span class=\"line\">ps auxw|head -1;ps auxw|sort -rn -k6|head -10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.按照进程运行时间进行倒序排序显示 </span></span><br><span class=\"line\">ps auxw|head -1;ps auxw|sort -rn -k2|head -10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.按进程消耗内存多少排序的方法</span></span><br><span class=\"line\">ps -e -o <span class=\"string\">'pid,comm,args,pcpu,rsz,vsz,stime,user,uid'</span> | sort -k5nr</span><br><span class=\"line\">ps -e -o <span class=\"string\">'pid,comm,args,pcpu,rsz,vsz,stime,user,uid'</span> --sort -rsz</span><br><span class=\"line\">  <span class=\"comment\"># PID COMMAND         COMMAND                     %CPU   RSZ    VSZ STIME USER       UID</span></span><br><span class=\"line\">  <span class=\"comment\"># 503 systemd-journal /lib/systemd/systemd-journa  0.0 140656 518176 Feb10 root        0</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190612150358.png\" alt=\"WeiyiGeek.psaux\" title=\"\" class=\"\">\n                <p>WeiyiGeek.psaux</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"pstree-命令\"><a href=\"#pstree-命令\" class=\"headerlink\" title=\"pstree 命令\"></a>pstree 命令</h5><p>描述：以树状图的方式展现进程之间的派生关系，显示效果比较直观;</p>\n<p>安装方式:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#RHEL/CentOS</span></span><br><span class=\"line\">yum install psmisc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Debian/Ubuntu</span></span><br><span class=\"line\">apt install psmisc</span><br></pre></td></tr></table></figure></p>\n<p>基础语法参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法:</span></span><br><span class=\"line\">pstree(选项)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数:</span></span><br><span class=\"line\">-a：显示每个程序的完整指令，包含路径，参数或是常驻服务的标示；</span><br><span class=\"line\">-c：不使用精简标示法；</span><br><span class=\"line\">-G：使用VT100终端机的列绘图字符；</span><br><span class=\"line\">-h：列出树状图时，特别标明现在执行的程序；</span><br><span class=\"line\">-H&lt;程序识别码&gt;：此参数的效果和指定<span class=\"string\">\"-h\"</span>参数类似，但特别标明指定的程序；</span><br><span class=\"line\">-l：采用长列格式显示树状图；</span><br><span class=\"line\">-n：用程序识别码排序。预设是以程序名称来排序；</span><br><span class=\"line\">-p：显示程序识别码；PID</span><br><span class=\"line\">-u：显示用户名称；UID</span><br><span class=\"line\">-U：使用UTF-8列绘图字符；</span><br><span class=\"line\">-V：显示版本信息。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.简单示例</span></span><br><span class=\"line\">pstree     <span class=\"comment\"># init 进程 systemd 为系统的 PID 1 号进程，所有的进程都在 systemd 的管理之下。</span></span><br><span class=\"line\">pstree -u</span><br><span class=\"line\">pstree -p  <span class=\"comment\"># 显示当前所有进程的进程号和进程id</span></span><br><span class=\"line\">pstree -a  <span class=\"comment\"># 显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190612151039.png\" alt=\"WeiyiGeek.pstree\" title=\"\" class=\"\">\n                <p>WeiyiGeek.pstree</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"pgrep-命令\"><a href=\"#pgrep-命令\" class=\"headerlink\" title=\"pgrep 命令\"></a>pgrep 命令</h5><p>描述：以名称为依据从运行进程队列中查找进程，并显示查找到的进程id；每一个进程ID以一个十进制数表示，通过一个分割字符串和下一个ID分开，默认的分割字符串是一个新行对于每个属性选项，用户可以在命令行上指定一个以逗号分割的可能值的集合</p>\n<p>基础语法参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法</span></span><br><span class=\"line\">pgrep [选项] &lt;进程名&gt;     <span class=\"comment\"># 显示进程的PID</span></span><br><span class=\"line\"><span class=\"comment\"># 参数</span></span><br><span class=\"line\">-o：仅显示找到的最小（起始）进程号；</span><br><span class=\"line\">-n：仅显示找到的最大（结束）进程号；</span><br><span class=\"line\">-l：显示进程名称；</span><br><span class=\"line\">-P：指定父进程号；</span><br><span class=\"line\">-g：指定进程组；</span><br><span class=\"line\">-t：指定开启进程的终端；</span><br><span class=\"line\">-u：指定进程的有效用户ID。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.进程名称：指定要查找的进程名称，同时也支持类似grep指令中的匹配模式.</span></span><br><span class=\"line\">pgrep sshd</span><br><span class=\"line\">pgrep -f sshd</span><br><span class=\"line\">5460</span><br><span class=\"line\">7220</span><br><span class=\"line\">7222</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.显示进程及其名称</span></span><br><span class=\"line\">pgrep -l ssh</span><br><span class=\"line\">5460 sshd</span><br><span class=\"line\">7222 sshd</span><br><span class=\"line\">7335 sshd</span><br><span class=\"line\">7337 sshd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.显示最小最大的进程号</span></span><br><span class=\"line\"><span class=\"variable\">$pgrep</span> -lo sshd</span><br><span class=\"line\">5460 sshd</span><br><span class=\"line\"><span class=\"variable\">$pgrep</span> -ln sshd </span><br><span class=\"line\">7222</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.显示指定UID的用户</span></span><br><span class=\"line\"><span class=\"variable\">$pgrep</span> -au root  <span class=\"comment\">#root用户</span></span><br><span class=\"line\">5779 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">5780 /usr/sbin/smbd --foreground --no-process-group</span><br><span class=\"line\">5781 /usr/sbin/smbd --foreground --no-process-group</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"pidof-命令\"><a href=\"#pidof-命令\" class=\"headerlink\" title=\"pidof 命令\"></a>pidof 命令</h5><p>描述：能可以根据可执行进程来快速找到进程的PID号<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法</span></span><br><span class=\"line\"> pidof  [-s] [-c] [-n] [-x] [-m] [-o omitpid[,omitpid..]]  [-o omitpid[,omitpid..]..]</span><br><span class=\"line\">       program [program..]  <span class=\"comment\"># 进程名称：指定要查找的进程名称。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-s：仅返回一个进程号；</span><br><span class=\"line\">-c：仅显示具有相同“root”目录的进程；</span><br><span class=\"line\">-x：显示由脚本开启的进程；</span><br><span class=\"line\">-o：指定不显示的进程ID。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示服务相关的进程</span></span><br><span class=\"line\"><span class=\"variable\">$pidof</span> sshd</span><br><span class=\"line\">7195 7193 5459</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.只显示一个进程号</span></span><br><span class=\"line\"><span class=\"variable\">$pidof</span> -s httpd</span><br><span class=\"line\">47365</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"pwdx-命令-通过PID找出程序运行的绝对路\"><a href=\"#pwdx-命令-通过PID找出程序运行的绝对路\" class=\"headerlink\" title=\"pwdx 命令 - 通过PID找出程序运行的绝对路\"></a>pwdx 命令 - 通过PID找出程序运行的绝对路</h5><p>描述:此命令可以通过PID找出程序的绝对路径，在查找某个java编写的程序运行情况可通过jps命令查看，然后可以通过显示的pid进行程序定位；</p>\n<p>使用说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1)找到mysqld进程pid标识然后找绝对路径</span></span><br><span class=\"line\"><span class=\"variable\">$top</span> -n2 -d2 </span><br><span class=\"line\"><span class=\"comment\"># 30337 polkitd   20   0 2701192 485928  21608 S   0.3 12.5  75:08.94 mysqld</span></span><br><span class=\"line\"><span class=\"variable\">$pwdx</span> 30337</span><br><span class=\"line\">30337: /var/lib/mysql</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项:</em></p>\n<ul>\n<li>(1) pidof命令必须输入正确的进程名，如果输入进程名不全，则显示为空。而pgrep命令获取进程ID时，是可以不需要输入准确的进程名。验证效果如下命令所示：</li>\n<li>(2) 通过<code>/proc/进程id/</code>下面的进程相关文件进行查看进程信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进程执行</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> /proc/26195/cmdline | tr \\<span class=\"string\">'\\0\\'</span> \\<span class=\"string\">' \\'</span></span><br><span class=\"line\">./bt_uinfo_memcached -p 20211 -u root -l 0.0.0.0 -m 3072 -d root@ubuntu:~<span class=\"comment\">#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程zhun</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> /proc/26195/status | tr \\<span class=\"string\">'\\0\\'</span> \\<span class=\"string\">' \\'</span></span><br><span class=\"line\">Name: bt_uinfo_memcac</span><br><span class=\"line\">State: S (sleeping) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程信息</span></span><br><span class=\"line\"><span class=\"variable\">$cat</span> /proc/26195/<span class=\"built_in\">stat</span></span><br><span class=\"line\">26195 (bt_uinfo_memcac) S 1 26195 26195 0 -1 4202560 42735 0 0 0 3517 5339 0 0 20 0 6 0 293270594 475316224</span><br><span class=\"line\">36956 18446744073709551615 1 1 0 0 0 0 0 4097 2 18446744073709551615 0 0 17 9 0 0 0 0 0 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进程执行路径</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> ls -l /proc/27628/exe</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 2013-05-29 16:00 /proc/27628/exe -&gt; /home/dspeak/myshard/2013/room_1_0/bin/shard_d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h5 id=\"lsipc-命令\"><a href=\"#lsipc-命令\" class=\"headerlink\" title=\"lsipc 命令\"></a>lsipc 命令</h5><p>描述:该命令可在进程间通信设施，调用进程具有读取访问lsipc节目信息。</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.查看消息队列/共享内存/信号量</span></span><br><span class=\"line\"><span class=\"variable\">$lsipc</span></span><br><span class=\"line\">RESOURCE DESCRIPTION                               LIMIT USED  USE%</span><br><span class=\"line\">MSGMNI   消息队列数量                               7572    0 0.00%</span><br><span class=\"line\">MSGMAX   消息的最大大小(字节)                       8192    -     -</span><br><span class=\"line\">MSGMNB   默认最大队列大小(字节)                     16384    -     -</span><br><span class=\"line\">SHMMNI   共享内存段                                 4096    2 0.05%</span><br><span class=\"line\">SHMALL   共享内存页                                 18446744073692774399  178 0.00%</span><br><span class=\"line\">SHMMAX   共享内存段的最大大小(字节)                 18446744073692774399    -     -</span><br><span class=\"line\">SHMMIN   共享内存段的最小大小(字节)                  1    -     -</span><br><span class=\"line\">SEMMNI   信号量标识符的数目                          128    2 1.56%</span><br><span class=\"line\">SEMMNS   信号量总量                                 32000   28 0.09%</span><br><span class=\"line\">SEMMSL   每个信号量集的最大信号量。                 250    -     -</span><br><span class=\"line\">SEMOPM   每个semop的最大操作数                     32    -     -</span><br><span class=\"line\">SEMVMX   信号量最大值                              32767    -     -</span><br></pre></td></tr></table></figure><br><br></p>\n<h5 id=\"pmap-命令-报告进程的内存映射\"><a href=\"#pmap-命令-报告进程的内存映射\" class=\"headerlink\" title=\"pmap 命令 - 报告进程的内存映射\"></a>pmap 命令 - 报告进程的内存映射</h5><p>描述:pmap 工具主要用于报告进程“内存映射”情况，指定需要显示内存映射关系的进程号,可以是多个进程号。</p>\n<p><strong>语法参数</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># SYNOPSIS</span></span><br><span class=\"line\">pmap [options] pid [...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OPTIONS</span></span><br><span class=\"line\">-x, --extended : 显示扩展格式</span><br><span class=\"line\">-d, --device : 显示设备格式</span><br><span class=\"line\">-q, --quiet : 不显示头信息</span><br><span class=\"line\">-A, --range low,high : Limit results to the given range to low and high address range.  Notice that the low  and high arguments are single string separated with comma.</span><br><span class=\"line\">-X : Show even more details than the -x option.  WARNING:  format  changes  according  to /proc/PID/smaps</span><br><span class=\"line\">-XX : Show everything the kernel provides</span><br><span class=\"line\">-p, --show-path : Show full path to files <span class=\"keyword\">in</span> the mapping column</span><br><span class=\"line\">-c, --<span class=\"built_in\">read</span>-rc : Read the default configuration</span><br><span class=\"line\">-C, --<span class=\"built_in\">read</span>-rc-from file  :  Read the configuration from file</span><br><span class=\"line\">-n, --create-rc  : Create new default configuration</span><br><span class=\"line\">-N, --create-rc-to file  :  Create new configuration to file</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.显示进程扩展格式</span></span><br><span class=\"line\">$ pidof dockerd</span><br><span class=\"line\">  <span class=\"comment\"># 3220194</span></span><br><span class=\"line\">$ pmap -x 3220194</span><br><span class=\"line\">  <span class=\"comment\"># 3220194:   /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class=\"line\">  <span class=\"comment\"># Address           Kbytes     RSS   Dirty Mode  Mapping</span></span><br><span class=\"line\">  <span class=\"comment\"># 000000c000000000   10240    9244    9240 rw---   [ anon ]</span></span><br><span class=\"line\">  <span class=\"comment\"># 000000c000a00000   24576    5736    5732 rw---   [ anon ]</span></span><br><span class=\"line\">  <span class=\"comment\"># ....</span></span><br><span class=\"line\">  <span class=\"comment\"># 000055ad65318000   24764       0       0 r---- dockerd</span></span><br><span class=\"line\">  <span class=\"comment\"># ....</span></span><br><span class=\"line\">  <span class=\"comment\"># 00007f14bc007000      16       0       0 r---- libresolv-2.31.so (deleted)</span></span><br><span class=\"line\">  <span class=\"comment\"># 00007f14bc00b000      64       0       0 r-x-- libresolv-2.31.so (deleted)</span></span><br><span class=\"line\">  <span class=\"comment\"># ....</span></span><br><span class=\"line\">  <span class=\"comment\"># 00007ffe84662000     132       4       4 rw---   [ stack ]</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------- ------- ------- -------</span></span><br><span class=\"line\">  <span class=\"comment\"># total kB         2196164   39852   25784</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.统计dockerd进程占用的物理内存。</span></span><br><span class=\"line\">$ cat /proc/3220194/smaps | grep <span class=\"string\">'^Rss:'</span> | awk <span class=\"string\">'&#123;sum +=$2&#125; END&#123;print sum&#125;'</span></span><br><span class=\"line\">39852</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x01-进程杀死\"><a href=\"#0x01-进程杀死\" class=\"headerlink\" title=\"0x01 进程杀死\"></a>0x01 进程杀死</h4><h5 id=\"kill-命令-进程杀死\"><a href=\"#kill-命令-进程杀死\" class=\"headerlink\" title=\"kill 命令 - 进程杀死\"></a>kill 命令 - 进程杀死</h5><p>描述：用来在Linux杀死执行中的程序或工作进程的命令，<br>kill可将指定的信息送至程序，预设的信息为SIGTERM(15),可将指定程序终止，若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序-&gt;程序或工作的编号可利用ps指令或job指令查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> [信号代码] &lt;进程PID/作业识别号&gt;     </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数</span></span><br><span class=\"line\">-a：当处理当前进程时，不限制命令名和进程号的对应关系；</span><br><span class=\"line\">-l &lt;信息编号&gt;：若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称；</span><br><span class=\"line\">-p：指定<span class=\"built_in\">kill</span> 命令只打印相关进程的进程号，而不发送任何信号；</span><br><span class=\"line\">-s &lt;信息名称或编号&gt;：指定要送出的信息；</span><br><span class=\"line\">-u：指定用户。</span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.显示所有信号名称,只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l   </span><br><span class=\"line\"><span class=\"comment\">#下面是常用的信号：根据PID向进程发送信号，常用来结束进程，默认信号为-9</span></span><br><span class=\"line\">-l [信号数字]显示、翻译信号代码</span><br><span class=\"line\">-1 , -HUP 挂起，终端断线</span><br><span class=\"line\">-2 , -INT 从键盘中断中断（同 Ctrl + C）</span><br><span class=\"line\">-3 , -QUIT 从键盘退出退出（同 Ctrl + \\\\）</span><br><span class=\"line\">-4 , -ILL 非法指令</span><br><span class=\"line\">-6 , -ABRT 发送abort 信号退出</span><br><span class=\"line\">-9 , -KILL   强制终止</span><br><span class=\"line\">-11 , -SEGV 内存错误</span><br><span class=\"line\">-13 , -PIPE 破坏管道</span><br><span class=\"line\">-14 , -ALRM</span><br><span class=\"line\">-15 , -TERM 发送Termination 信号 终止</span><br><span class=\"line\">-19 , -STOP 停止进程，但不结束( Ctrl+z )</span><br><span class=\"line\">-18 , -CONT 继续运行已停止的进程（与-stop相反,<span class=\"built_in\">fg</span>/<span class=\"built_in\">bg</span>命令）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.进程终止</span></span><br><span class=\"line\"><span class=\"comment\">#先用ps命令来查看该进程对应的PID，可以看到该进程对应的PID是345，现在使用kill命令来终止该进程.</span></span><br><span class=\"line\"><span class=\"comment\">#345 1 00:00:00 find / -name foxy.jpg </span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> 345</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -l 223  <span class=\"comment\">#重启进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -9 2236 <span class=\"comment\">#强制结束进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s 9 2236 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.平滑重启服务，不会跳出当前登录用户</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP 1523</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.关闭读取配置文件后重启(平滑重启)</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -SIGHUP $(pidof dockerd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.指定停止后台执行的任务</span></span><br><span class=\"line\"><span class=\"built_in\">jobs</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> %1  <span class=\"comment\">#这里的数字是按照jobs返回的数字</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>补充说明:</strong></p>\n<p>Q:SIGINT、SIGKILL和SIGTERM区别?</p>\n<ul>\n<li>(1) SIGINT与SIGTERM区别<br>1）SIGINT关联ctrl+c<br>2）SIGINT只能结束前台进程<br>3）通过ctrl+c对当前进程发送结束信号，信号被进程树接收到（即：不仅当前进程，子进程也会收到结束信号）</li>\n<li>(2) SIGTERM与SIGKILL<br>1）SIGTERM可以被阻塞、处理和忽略；因此有的进程不能按预期的结束<br>2）kill不使用参数：发送SIGTERM信号，只有当前进程收到信号若当前进程被kill，则子进程的父进程就会更改为init即pid为1<br>3）kill命令的默认不带参数发生的信号SIGTERM它<code>让程序友好的退出</code> ，当程序未退出时，可以使用<code>kill -9</code>强制退出;</li>\n</ul>\n<p><br></p>\n<h5 id=\"pkill-命令-结束一个进程组\"><a href=\"#pkill-命令-结束一个进程组\" class=\"headerlink\" title=\"pkill 命令 - 结束一个进程组\"></a>pkill 命令 - 结束一个进程组</h5><p>描述：该命令会结束进程族，如果结束单个进程请用<code>kill</code>,其检查的是 /proc/ 下面的 pid 目录的 cmdline 文件和 status 文件;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">pkill (选项) (参数)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数</span></span><br><span class=\"line\">-o：仅向找到的最小（起始）进程号发送信号；</span><br><span class=\"line\">-n：仅向找到的最大（结束）进程号发送信号；</span><br><span class=\"line\">-P：指定父进程号发送信号；</span><br><span class=\"line\">-g：指定进程组；</span><br><span class=\"line\">-t：指定开启进程的终端, (用户踢出)</span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.结束所有有关于firefox的进程;</span></span><br><span class=\"line\">pkill firefox</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例2.结束多余的用户会话(重要)</span></span><br><span class=\"line\"><span class=\"variable\">$w</span> </span><br><span class=\"line\">pkill -9 -t tty1  <span class=\"comment\">#只有超级用户才能剔除用户   </span></span><br><span class=\"line\">pkill -9 -t pts/1 <span class=\"comment\">#远程终端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.使用进程名称直接kill掉</span></span><br><span class=\"line\">pkill -f name</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"killall-命令-杀死单一进程或者所属进程\"><a href=\"#killall-命令-杀死单一进程或者所属进程\" class=\"headerlink\" title=\"killall 命令 - 杀死单一进程或者所属进程\"></a>killall 命令 - 杀死单一进程或者所属进程</h5><p>描述:killall 和 pkill 应用方法差不多也是直接杀死运行中的程序把这ps和grep两个过程合二为一; 它查看的是 /proc/pid/stat 文件内容;如果您想杀掉单个进程请用kill 来杀掉.</p>\n<p>语法&amp;参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install psmisc -y </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语法</span></span><br><span class=\"line\">killall [选项] [信号] &lt;进程名&gt;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数</span></span><br><span class=\"line\">-e：对长名称进行精确匹配；</span><br><span class=\"line\">-l：忽略大小写的不同；</span><br><span class=\"line\">-p：杀死进程所属的进程组；</span><br><span class=\"line\">-i：交互式杀死进程，杀死进程前需要进行确认；</span><br><span class=\"line\">-l：打印所有已知信号列表；</span><br><span class=\"line\">-q：如果没有进程被杀死。则不输出任何信息；</span><br><span class=\"line\">-r：使用正规表达式匹配要杀死的进程名称；</span><br><span class=\"line\">-s：用指定的进程号代替默认信号“SIGTERM”；</span><br><span class=\"line\">-u：杀死指定用户的进程。</span><br></pre></td></tr></table></figure></p>\n<p>实际操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例0.查看进程信号</span></span><br><span class=\"line\">killall -l</span><br><span class=\"line\">HUP   <span class=\"comment\"># 挂起，终端断线</span></span><br><span class=\"line\">INT   <span class=\"comment\"># 从键盘中断中断（同 Ctrl + C）</span></span><br><span class=\"line\">QUIT  <span class=\"comment\"># 从键盘退出退出（同 Ctrl + \\\\）</span></span><br><span class=\"line\">ILL TRAP ABRT IOT BUS FPE </span><br><span class=\"line\">KILL  <span class=\"comment\"># 终止信号  </span></span><br><span class=\"line\">USR1 SEGV USR2 PIPE ALRM </span><br><span class=\"line\">TERM  <span class=\"comment\"># 发送Termination 信号 终止</span></span><br><span class=\"line\">STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH IO PWR SYS</span><br><span class=\"line\">UNUSED</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例1.删除所有的同名进程显示信号量</span></span><br><span class=\"line\">killall vi   <span class=\"comment\">#杀死所有同名进程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.删除apache2得一个进程组:</span></span><br><span class=\"line\">killall -g apache2</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"killall5-命令-向所有进程发送一个信号，除了内核线程和它自己会话中的进程\"><a href=\"#killall5-命令-向所有进程发送一个信号，除了内核线程和它自己会话中的进程\" class=\"headerlink\" title=\"killall5 命令 - 向所有进程发送一个信号，除了内核线程和它自己会话中的进程\"></a>killall5 命令 - 向所有进程发送一个信号，除了内核线程和它自己会话中的进程</h5><p>描述:killall5是SystemV killall命令，它向所有进程发送一个信号，除了内核线程和它自己会话中的进程，所以它不会杀死运行脚本的shell。<br>killall5也可以作为pidof调用，它只是一个指向killall5程序的(符号)链接。</p>\n<p>注意: 不要直接执行该命令，如果执行会向所有进行发送一个关闭信号会直接导致机器宕掉；</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall5 -signalnumber [-o omitpid[,omitpid..]]  [-o omitpid[,omitpid..]..]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 常用参数</span></span><br><span class=\"line\">-o\t省略具有该进程id的进程</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回值</span></span><br><span class=\"line\">如果程序终止进程，则返回零。</span><br><span class=\"line\">如果没有进程被杀死，它返回2。</span><br><span class=\"line\">如果无法找到任何进程(/proc/丢失)返回1</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.杀死除1122外外的所有进程</span></span><br><span class=\"line\">killall5 -o 1122</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x02-进程进程优先级\"><a href=\"#0x02-进程进程优先级\" class=\"headerlink\" title=\"0x02 进程进程优先级\"></a>0x02 进程进程优先级</h4><p>CPU 在同一个时间只能执行一个指令，顺序由进程优先级来排序，数字越小优先级越高<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如ps -le命令中可以看见</span></span><br><span class=\"line\">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class=\"line\">4 S     0     1     0  0  80   0 - 31359 ep_pol ?        00:00:01 systemd</span><br><span class=\"line\">4 S     0  7339  7337  0  80   0 - 18050 poll_s ?        00:00:00 sftp-server</span><br><span class=\"line\"></span><br><span class=\"line\">PRI：Priority  <span class=\"comment\">#优先权</span></span><br><span class=\"line\">NI：Nice <span class=\"comment\">#精密的</span></span><br></pre></td></tr></table></figure></p>\n<p><em>修改NI值的几个注意事项：</em><br>1）NI的值范围－20～19<br>2）普通用户调制NI值范围0～19而且只能调整自己的进程<br>3）普通用户只能调高NI，而不能降低NI值<br>4）root用户才能设定NI值为负值，而且可以调整任何用户的进程;计算：PRI（最终值）＝ PRI（原始值） ＋ NI<br>5）用户只能修改NI 不能直接修改PRI</p>\n<p><br/></p>\n<h5 id=\"nice-命令\"><a href=\"#nice-命令\" class=\"headerlink\" title=\"nice 命令\"></a>nice 命令</h5><p>描述：用于以指定的进程调度优先级启动其他的程序，nice命令可以给新执行的命令直接赋予NI值，但不能修改已经存在的进程NI值.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：nice [选项] [命令 [参数] ]</span><br><span class=\"line\">-n：指定进程的优先级（整数）。</span><br></pre></td></tr></table></figure></p>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.新建一个进程并设置优先级，将当前目录下的documents目录打包，但不希望tar占用太多CPU：</span></span><br><span class=\"line\">nice -19 tar zcf pack.tar.gz documents</span><br><span class=\"line\"><span class=\"comment\">#方法非常简单，即在原命令前加上nice -19。很多人可能有疑问了，最低优先级不是19么？</span></span><br><span class=\"line\"><span class=\"comment\">#那是因为这个“-19”中的“-”仅表示参数前缀；所以如果希望将当前目录下的documents目录打包，并且赋予tar进程最高的优先级：</span></span><br><span class=\"line\">nice --19 tar zcf pack.tar.gz documents</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.将httpd启动加入优先级</span></span><br><span class=\"line\">nice -n -5 service httpd start  <span class=\"comment\">#加入优先级</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"renice-命令\"><a href=\"#renice-命令\" class=\"headerlink\" title=\"renice 命令\"></a>renice 命令</h5><p>描述：修改正在运行的进程的调度优先级，预设是以程序识别码指定程序调整其优先权，您亦可以指定程序群组或用户名称调整优先权等级，并修改所有隶属于该程序群组或用户的程序的优先权</p>\n<ul>\n<li>只有系统管理者可以改变其他用户程序的优先权，也仅有系统管理者可以设置负数等级</li>\n<li>使用renice命令修改已经存在进程的NI值的命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法参数</span></span><br><span class=\"line\">renice [优先级] PID [选项]</span><br><span class=\"line\"></span><br><span class=\"line\">-g：指定进程组id；</span><br><span class=\"line\">-p&lt;程序识别码&gt;：改变该程序的优先权等级，此参数为预设值。</span><br><span class=\"line\">-u：指定开启进程的用户名。</span><br></pre></td></tr></table></figure>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将行程id为987及32的行程与行程拥有者为daemon及root的优先序号码加1：</span></span><br><span class=\"line\">renice 1 987 -u daemon root -p 32   <span class=\"comment\">#注意：每一个进程都有一个唯一的id。</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"0x03-进程切换\"><a href=\"#0x03-进程切换\" class=\"headerlink\" title=\"0x03 进程切换\"></a>0x03 进程切换</h4><h5 id=\"unshare-命令\"><a href=\"#unshare-命令\" class=\"headerlink\" title=\"unshare 命令\"></a>unshare 命令</h5><p>描述:<code>/usr/bin/unshare</code>是Linux自带的命令实际通过unshare()系统调用实现的，调用的主要作用就是不启动一个新进程就可以起到隔离效果，简单的说就是跳出原先的namespace进行操作，使得原进程就可以进行一些需要改隔离的操作；</p>\n<p>unshare() 在 C 语言库中的声明如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#define _GNU_SOURCE</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sched.h&gt;</span></span><br><span class=\"line\">int unshare(int flags);</span><br></pre></td></tr></table></figure></p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：</span><br><span class=\"line\">unshare [options] &lt;program&gt; [&lt;argument&gt;...]</span><br><span class=\"line\">选项：</span><br><span class=\"line\"> -m, --mount               unshare mounts namespace</span><br><span class=\"line\"> -u, --uts                 unshare UTS namespace (hostname etc)</span><br><span class=\"line\"> -i, --ipc                 unshare System V IPC namespace</span><br><span class=\"line\"> -n, --net                 unshare network namespace</span><br><span class=\"line\"> -p, --pid                 unshare pid namespace</span><br><span class=\"line\"> -U, --user                unshare user namespace</span><br><span class=\"line\"> -f, --fork                执行unshare的进程fork一个新的子进程，在子进程里执行unshare传入的参数</span><br><span class=\"line\">     --mount-proc[=&lt;dir&gt;]  mount proc filesystem first (implies --mount)</span><br><span class=\"line\"> -r, --map-root-user       将当前用户映射到根用户(暗指--user)</span><br><span class=\"line\">     --propagation &lt;slave|shared|private|unchanged&gt;</span><br><span class=\"line\">                           modify mount propagation <span class=\"keyword\">in</span> mount namespace</span><br><span class=\"line\"> -s, --setgroups allow|deny  control the setgroups syscall <span class=\"keyword\">in</span> user namespaces</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.隔离mnt的Namespace</span></span><br><span class=\"line\">unshare --mount /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.隔离ipc的Namespace</span></span><br><span class=\"line\">unshare --ipc /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.把当前进程的 user namespace 设置成了 root</span></span><br><span class=\"line\">unshare -u sh -c whoami</span><br><span class=\"line\">root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.该命令unshares一个或多个名称空间，并执行该命令在其命令行参数提供,实现取消共享</span></span><br><span class=\"line\">$ readlink /proc/$$/ns/mnt</span><br><span class=\"line\">mnt:[4026531840]</span><br><span class=\"line\">$ sudo ./unshare -m /bin/bash</span><br><span class=\"line\">$ readlink /proc/$$/ns/mnt</span><br><span class=\"line\">mnt:[4026532325]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.进程fork一个新的子进程有新的pid，因为子进程已经隔离了pid namespace所以子进程的ps 无法看到父进程里能看到的那些进程列表。</span></span><br><span class=\"line\">sudo unshare --fork --pid --mount-proc bash</span><br><span class=\"line\">ps -ejf</span><br><span class=\"line\">UID         PID   PPID   PGID    SID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0      1      0  0 11:39 pts/0    00:00:00 bash</span><br><span class=\"line\">root         27      1     27      0  0 11:39 pts/0    00:00:00 ps -ejf</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"系统命令","path":"api/tags/系统命令.json"}]}