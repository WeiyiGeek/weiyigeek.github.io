{"title":"9.计算机科学导论之程序设计语言学习笔记","slug":"书籍笔记/计算机科学导论/9.计算机科学导论之程序设计语言学习笔记","date":"2022-06-06T08:35:30.000Z","updated":"2023-01-03T07:40:40.182Z","url":"2022/6-6-700.html","path":"api/articles/2022/6-6-700.html.json","covers":["https://img.weiyigeek.top/2022/8/image-20220928205010038.png","https://img.weiyigeek.top/2022/8/image-20220928211621844.png","https://img.weiyigeek.top/2022/8/image-20220929144215078.png","https://img.weiyigeek.top/2022/8/image-20220929153902622.png","https://img.weiyigeek.top/2022/8/image-20220929162137202.png","https://img.weiyigeek.top/2022/8/image-20220929171807093.png","https://img.weiyigeek.top/2022/8/image-20220929182639968.png","https://img.weiyigeek.top/2022/8/image-20220929192157438.png","https://img.weiyigeek.top/2022/8/image-20220929221435019.png","https://img.weiyigeek.top/2022/8/image-20221001125936911.png","https://img.weiyigeek.top/2022/8/image-20221001131349980.png","https://img.weiyigeek.top/2022/8/image-20221001132613183.png","https://img.weiyigeek.top/2022/8/image-20221001133742301.png","https://img.weiyigeek.top/2022/8/image-20221001135918017.png","https://img.weiyigeek.top/2022/8/image-20221001142409996.png","https://img.weiyigeek.top/2022/8/image-20221001144106793.png"],"content":"<p>[TOC]</p>\n<h1 id=\"计算机科学导论学习笔记\"><a href=\"#计算机科学导论学习笔记\" class=\"headerlink\" title=\"计算机科学导论学习笔记\"></a>计算机科学导论学习笔记</h1><h2 id=\"第-4-部分-计算机软件与算法\"><a href=\"#第-4-部分-计算机软件与算法\" class=\"headerlink\" title=\"第 4 部分 计算机软件与算法\"></a>第 4 部分 计算机软件与算法</h2><p>此部分包含第<strong>7</strong>、<strong>8</strong>、<strong>9</strong>、<strong>10</strong>章，包含了计算机操作系统、问题求解算法、程序设计语言之旅、软件工程等相关知识，加深我们对开发的认识，为后续开发打下一个基础。</p>\n<a id=\"more\"></a>\n<h3 id=\"第-9-章-程序设计语言\"><a href=\"#第-9-章-程序设计语言\" class=\"headerlink\" title=\"第 9 章 程序设计语言\"></a>第 9 章 程序设计语言</h3><h4 id=\"9-1-语言演化\"><a href=\"#9-1-语言演化\" class=\"headerlink\" title=\"9.1 语言演化\"></a>9.1 语言演化</h4><p>计算机语言是指编写程序时，根据事先定义的规则(语法)而写出的预订语句集合。</p>\n<p>计算机语言已经度过了从机器语言，到汇编语言，到高级语言的演化。</p>\n<p><strong>1) 机器语言</strong></p>\n<p>早期，计算机唯一的程序设计语言就是<code>机器语言</code>，每台计算机都有其自己的机器语言，它由<code>0</code>和<code>1</code>二进制数组成，在电气元件中分别表示<code>关和开</code>电路。</p>\n<p>缺点：</p>\n<ul>\n<li>严重依赖计算机，不同计算机机器不能执行已编写运行的机器语言。</li>\n<li>使用机器语言编写程序单调、乏味，还易错。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220928205010038.png\" alt=\"WeiyiGeek.两个数相加使用机器语言代码表示图示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.两个数相加使用机器语言代码表示图示</p>\n            </figure>\n<p><strong>2) 汇编语言</strong></p>\n<p>汇编语言是由带符号或助记符（<code>符号语言</code>）的指令和地址组成，目的是为了替代机器语言。</p>\n<p>汇编语言代码通过<code>汇编程序</code>将其翻译成为机器语言，其缺点是仍然需要程序员在硬件上花费大部分精力，并且由于每条机器指令都必须单独编码，则效率比较低下。</p>\n<p>常用助记符：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOAD  : 读取寄存器中数据。</span><br><span class=\"line\">STORE : 将数据存储到寄存器中。</span><br><span class=\"line\">ADDI  : 将两个寄存器数据相加。</span><br><span class=\"line\">HALT : 停止运行。</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220928211621844.png\" alt=\"WeiyiGeek.使用汇编语言表示两整数相加的过程\" title=\"\" class=\"\">\n                <p>WeiyiGeek.使用汇编语言表示两整数相加的过程</p>\n            </figure>\n<p><strong>3) 高级语言</strong></p>\n<p>高级语言的发展是为了解决(<code>摆脱</code>)汇编语言<code>开发的低效、繁琐的细节</code>，让程序员可以从关注计算机转到关注要解决的问题，即将精力集中在应用程序上，而不是计算机结构的复杂性上。</p>\n<p>高级语言可以将编写代码程序移植到不同计算机操作系统中执行，同样它也需要经过<code>解释或者编译</code>流程将其转为机器语言，所以在高级语言又分<code>解释型高级语言</code>和<code>编译型高级语言</code>。</p>\n<ul>\n<li><p>编译型高级语言: 将源代码编译成机器码（<code>机器语言</code>），再由计算机运行机器码（<code>二进制程序</code>），只需编译一次，运行速度快，执行效率高，但依赖编译器，跨平台性差些。</p>\n<blockquote>\n<p>COBOL、Pascal、Ada、C、C++、Java以及现在很火的Go语言。</p>\n</blockquote>\n</li>\n<li><p>解释型高级语言：程序不需要编译，但需要翻译成中间代码、解释器对中间代码进行解释运行，所以程序在运行时才翻译成机器语言，但每执行一次都要翻译一次，因此效率比较低、依赖解释器，跨平台性好。</p>\n<blockquote>\n<p>BASIC、Bat 批处理、Shell 脚本、Perl 、PHP、Python、Javascript</p>\n</blockquote>\n</li>\n</ul>\n<p>  例如，使用Go语言演示两个数相加。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> b <span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result <span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"comment\">// 赋值</span></span><br><span class=\"line\">    a = <span class=\"number\">127</span></span><br><span class=\"line\">    b = <span class=\"number\">128</span></span><br><span class=\"line\">  <span class=\"comment\">// 计算</span></span><br><span class=\"line\">  result = a + b</span><br><span class=\"line\">  <span class=\"comment\">// 结果</span></span><br><span class=\"line\">  fmt.Println(result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：255</p>\n<hr>\n<h4 id=\"9-2-语言翻译\"><a href=\"#9-2-语言翻译\" class=\"headerlink\" title=\"9.2 语言翻译\"></a>9.2 语言翻译</h4><p>前面提到，为了在计算机上运行程序，程序需要被翻译成它要运行在其他的计算机的机器语言。</p>\n<p>高级语言程序 ：被称为源程序</p>\n<p>目标程序： 被翻译成的机器语言程序</p>\n<h5 id=\"1-编译\"><a href=\"#1-编译\" class=\"headerlink\" title=\"(1) 编译\"></a>(1) 编译</h5><p>编译程序通常把整个源程序翻译成目标程序。</p>\n<h5 id=\"2-解释\"><a href=\"#2-解释\" class=\"headerlink\" title=\"(2) 解释\"></a>(2) 解释</h5><p>解释器会把源程序翻译成目标程序，而解释是指把源程序中的每一行翻译成目标程序中相应的行，并执行它的过程。</p>\n<p>在解释中的两种趋势：</p>\n<ul>\n<li><p>解释的第一种方法</p>\n<blockquote>\n<p>在Java语言之前的有些解释式语言（如BASIC和APL）使用一种称为解释的第一种方法的解释过程，因为缺少其他任何的名字，所以称为解释的第一种方法。在这种解释中，源程序的每一行被翻译成被其使用的计算机上的机器语言，该行机器语言被立即执行。如果在翻译和执行中有任何错误，过程就显示消息，其余的过程就被中止。程序需要被改正，再次从头解释和执行。第一种方法被看成是一种慢的过程，这就是大多数语言使用编译而不是解释的原因。</p>\n</blockquote>\n</li>\n<li><p>解释程序的第二种方法</p>\n<blockquote>\n<p>随着Java的到来，一种新的解释过程就被引入了，Java语言能向任何计算机移植，其为了取得可移植性，源程序到目标程序的翻译分成两步进行<code>编译</code>和<code>解释</code>。</p>\n<p>Java源程序首先被Java编译器<code>编译</code>，创建Java的字节代码，字节代码看起来像机器语言中的代码，但不是任何特定计算机的目标代码，它是一种虚拟机的目标代码，该虚拟机称为<code>Java虚拟机或JVM</code>，字节代码然后能被任何运行JVM模拟器的计算机编译或解释，也就是运行字节代码的计算机只需要JVM模拟器，而不是Java编译器。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"3-翻译\"><a href=\"#3-翻译\" class=\"headerlink\" title=\"(3) 翻译\"></a>(3) 翻译</h5><p>编译和解释的不同在于，编译在执行前翻译整个源代码，而解释一次只翻译和执行源代码中的一行(<code>因此效率低下</code>)。</p>\n<p>但是两种方法都遵循图中显示的相同的翻译过程：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929144215078.png\" alt=\"WeiyiGeek.源代码翻译过程\" title=\"\" class=\"\">\n                <p>WeiyiGeek.源代码翻译过程</p>\n            </figure>\n<ol>\n<li><code>词法分析器</code>: 一个符号接一个符号地读源代码，创建源语言中的助记符表。</li>\n</ol>\n<blockquote>\n<p>例如，5个符号w、h、i、1、e被读入，组合起来就形成了C、C++或Java语言中的助记符while.</p>\n</blockquote>\n<ol start=\"2\">\n<li><p><code>语法分析器</code>: 一组助记符，找出指令。</p>\n<blockquote>\n<p>例如，语法分析器使用助记符“X”、”=”、“0” 创建C语言中的赋值语句“x=0”</p>\n</blockquote>\n</li>\n<li><p><code>语义分析器</code>: 检查语法分析器创建的句子，确保它们不含有二义性，而计算机语义通常情况下是无二义性的，意味着这一步骤或者是在翻译器中被省略。</p>\n</li>\n<li><p><code>代码生成器</code>: 将每条指令将转化为一组程序将要在其上运行的计算机的机器语言。</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"9-3-编程模式\"><a href=\"#9-3-编程模式\" class=\"headerlink\" title=\"9.3 编程模式\"></a>9.3 编程模式</h4><p>当下，计算机语言按照它们使用的解决问题的方法来分类，因此模式是计算机语言看待要解决问题的一种方式。</p>\n<p>计算机语言可分为四种模式：<code>过程性、面向对象、函数式和声明式</code>。</p>\n<ul>\n<li>面向过程：FORTRAN、COBL、BASIC、C 语言、Pascal、Ada</li>\n<li>面向对象：Smalltalk、C++、Visual、Basic、C#、Java、Python</li>\n<li>函数式：LISP、Scheme</li>\n<li>声明式：Prolog</li>\n</ul>\n<h5 id=\"1-过程式模式\"><a href=\"#1-过程式模式\" class=\"headerlink\" title=\"(1) 过程式模式\"></a>(1) 过程式模式</h5><p>在该模式中，我们把程序看成是操纵被动对象的主动主体。例如，我们在日常生活中遇到许多被动对象石头、书、灯等, 一个被动对象本身不能发出一个动作，但它能从主动主体接收动作。</p>\n<p>在该模式下的程序就是主动主体，该主体使用称为数据或数据项的被动对象, 作为被动对象的数据项存储在计算机的内存中，程序操纵它们, 为了操纵数据主动主体（程序）发出动作，称之为过程。例如，考虑一个打印文件内容的程序，为了能被打印，文件需要存储在内存中（或一些像内存一样的寄存器中）。</p>\n<blockquote>\n<p>文件是一个被动对象或一个被动对象集合， 对象（文件）是一个能接收print动作或其他一些动作（如删除、复制等）的独立实体。<br>打印(<code>print</code>)过程通常包括了需要告诉计算机如何打印文件中每一个字符的所有动作，它是是编写的一个独立实体，程序只是触发它。<br>即为了避免每次需要打印文件时都编写一个新过程，我们可编写一个能打印任何文件的通用过程，当过程被调用触发时，我们可以传递实际要打印的文件名给过程，这样便使得一个过程调用两次，分别打印不同的文件。</p>\n</blockquote>\n<p>如果我们考虑过程和被作用于的对象，那么过程式模式的概念就变得更为简单，且容易理解。这种模式的程序由三部分构成：<code>对象创建部分、一组过程调用和每个过程的一组代码</code>。有些过程在语言本身中已经被定义, 我们可通过组合代码来建立新的过程。</p>\n<p>例如，下图中显示了程序如何能调用不同的预定义过程，打印或删除不同的目标文件，以及过程式程序的三个组成部分。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929153902622.png\" alt=\"WeiyiGeek.过程式概念与组成部分\" title=\"\" class=\"\">\n                <p>WeiyiGeek.过程式概念与组成部分</p>\n            </figure>\n<p><strong>常见的过程式语言</strong></p>\n<ol>\n<li><p>FORTRAN ( <code>FORmula TRANsIation</code>) ：它是第一代高级语言，由Jack Backus 领导下的一批IBM工程师所设计，于1957年变成商用的，在50年后的今天它仍然是科学或工程应用中的理想语言。</p>\n<blockquote>\n<p>语言版本：FORTRAN. FORTRAN U、FORTRAN IV, FORTRAN 77、FORTRAN 99 和HPF(高性能FORTRAN)，以及最新版本(HPF) 用于高速多处理器计算机系统。</p>\n<p>语言特点：</p>\n<ul>\n<li>高精度算法。</li>\n<li>处理复杂数据的能力。</li>\n<li>指数运算(a^b)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>COBOL (<code>COmmon Business-Oriented Language</code>): 由一批计算机专家在美国海军的Grace Hopper指导下设计出来,作为商业编程语言使用。</p>\n<blockquote>\n<p>语言特点：</p>\n<ul>\n<li><p>快速访问文件和数据库。</p>\n</li>\n<li><p>快速更新文件和数据库。</p>\n</li>\n<li><p>生成大量的报表。</p>\n</li>\n<li><p>界面友好的格式化的输出。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Pascal ： 由Niklaus Wirth于1971年在瑞士的苏黎世发明，根据17世纪发明Pascaline计算器的法国数学家、哲学家Blaise Pascal来命名，尽管Pascal成为学术中最流行的语言，但它从未在工业中达到同等流行的程度，现在的过程化语言归功于该语言（发展）。</p>\n<blockquote>\n<p>设计目标：通过强调结构化编程方法来教初学者编程。</p>\n</blockquote>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>C 语言：由贝尔实验室的Dennis Ritchie在20世纪70年代初期发明的，最初用于编写操作系统和系统软件(UNIX操作系统的大部分是用C编写)，当前 C 语言仍然是效率最高的语言，针对操作系统、以及嵌入式开发必学。</p>\n<blockquote>\n<p>语言特点：</p>\n<ul>\n<li>有一个结构化的高级编程语言应有的所有高级指令，使程序员无需知道硬件细节。</li>\n<li>具有一些低级指令，使得程序员能够直接、快速地访问硬件。相对于其他高级语言，C更接近于汇编语言，这使得它对系统程序设计员来说是一种好语言。</li>\n<li>是非常有效的语言，指令短。这种简洁吸引了想编写短程序的程序员。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>Ada ：其命名是为了纪念世界上第一位程序员[阿达·洛芙莱斯]（<code>Ada Lovelace</code>），旨在整合美军事系统中运行着上百种不同的程序设计语言。</p>\n<blockquote>\n<p>语言特点：</p>\n<ul>\n<li><p>Ada有其他过程式语言那样的高级指令。</p>\n</li>\n<li><p>Ada有允许实时处理的指令，从而便于过程控制。</p>\n</li>\n<li><p>Ada具有并行处理能力，可以在具有多处理器的主机上运行。</p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"2-面向对象模式\"><a href=\"#2-面向对象模式\" class=\"headerlink\" title=\"(2) 面向对象模式\"></a>(2) 面向对象模式</h5><p>该模式处理活动对象，而不是被动对象，通常此类对象只需要接收合适的外部刺激来执行其中的一个动作。例如，我们生活中遇到的许多活动对象汽车、自动门、洗盘机等。</p>\n<p>在面向对象模式中的文件能把所有的被文件执行的过程（在面向对象模式中称为方法）打包在一起，这些过程有打印、复制、删除等，仅仅向对象发送相应请求（<code>打印、复制、删除等</code>），文件就会进行相应操作。</p>\n<p>此处比较<code>过程式模式和面向对象模式</code>，可以看出过程式模式中的<code>过程是独立的实体</code>, 但面向对象模式中的方法是<code>属于对象领地的</code>。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929162137202.png\" alt=\"WeiyiGeek.面向对象模式的概念\" title=\"\" class=\"\">\n                <p>WeiyiGeek.面向对象模式的概念</p>\n            </figure>\n<p><strong>类 (Class) </strong></p>\n<p>说到面向对象就不得不提到<code>类（Class）</code>, 通常相同类型的对象（如文件）需要一组方法，方法显示了这类对象可操作的描述（<code>属性</code>）或者动作（<code>方法</code>），例如 C++、Java和C# （读作”C sharp”）等面向对象语言使用称为类的单元</p>\n<p>面向对象语言特点：</p>\n<ul>\n<li>属性与方法：在该类语言中，通常我们会在类中定义对象的属性和方法，例如 动物（Animal）类包括 的名称、外观、颜色属性，以及动物吃食物的方法。</li>\n<li>继承性：即一个对象能从另一个对象继承，便于为已存在类的添加一些新的特性。例如，Cat 动物猫，继承 Animal 类，则可以继续添加喜欢的食物属性，以及猫吃🐠的方法。</li>\n<li>多态性：指我们可以定义一些具有相同名字的操作，而这些操作在相关类中做不同的事情，例如，我们定义了两个类：矩形(<code>rectangle</code>)和 圆(<code>circular</code>)，都是从几何形状类继承下来的，我们定义名字都为area的两个操作，一个在矩形类中；一个在圆类中，它们分别计算矩形或圆的面积。</li>\n</ul>\n<p>例如，此处以Go语言为例演示面向对象语言类的使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span>&#123; name <span class=\"keyword\">string</span> &#125; <span class=\"comment\">// 属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Animal)</span> <span class=\"title\">voice</span><span class=\"params\">(v <span class=\"keyword\">string</span>)</span></span> &#123; <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"我是动物，我叫 %v, 我会叫 %s,\"</span>, a.name, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 - 狗</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Dog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> eat <span class=\"keyword\">string</span>  <span class=\"comment\">// 属性</span></span><br><span class=\"line\"> *Animal     <span class=\"comment\">// 继承父类</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *Dog)</span> <span class=\"title\">love</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"狗狗喜欢吃的食物是 %v.\\n\"</span>, d.eat)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 - 狗</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cat <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  eat <span class=\"keyword\">string</span> <span class=\"comment\">// 属性</span></span><br><span class=\"line\">  *Animal   <span class=\"comment\">// 继承父类</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cat)</span> <span class=\"title\">love</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">// 方法</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"猫猫喜欢吃的食物是 %v.\\n\"</span>, c.eat)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化对象</span></span><br><span class=\"line\">  d1 := &amp;Dog&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意嵌套的是结构体指针</span></span><br><span class=\"line\">    Animal: &amp;Animal&#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"小黄\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    eat: <span class=\"string\">\"bone\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  d1.voice(<span class=\"string\">\"汪汪.汪汪.\"</span>)</span><br><span class=\"line\">  d1.love()</span><br><span class=\"line\"></span><br><span class=\"line\">  c1 := &amp;Cat&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意嵌套的是结构体指针</span></span><br><span class=\"line\">    Animal: &amp;Animal&#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"小白\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    eat: <span class=\"string\">\"fish\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  c1.voice(<span class=\"string\">\"喵喵.喵喵.\"</span>)</span><br><span class=\"line\">  c1.love()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我是动物，我叫 小黄, 我会叫 汪汪.汪汪.,狗狗喜欢吃的食物是 bone.</span><br><span class=\"line\">我是动物，我叫 小白, 我会叫 喵喵.喵喵.,猫猫喜欢吃的食物是 fish.</span><br></pre></td></tr></table></figure>\n<p><strong>常见的过程式语言</strong></p>\n<ol>\n<li><p>C++ : 是由贝尔实验室Bjame Stroustrup等人开发出来的，是比C语言更高级的一种计算机编程语言，它使用类来定义相似对象的通用属性以及可以应用于它们本身的各种操作。</p>\n<blockquote>\n<p>语言特点：C++语言的设计遵循三条基本原则特性<code>封装、继承和多态</code>。</p>\n</blockquote>\n</li>\n<li><p>Java：当前后端开发占有率最高的语言之一，由Sun Microsystems公司开发的，它在C和C++的基础上发展而来，但是C++ 的一些特性（如多重继承等）从语言中被移除，从而使Java更健壮。在Java中的程序可以是一个<code>应用程序</code>也可以是一个<code>小程序</code>，应用程序是指一个可以完全<code>独立运行的程序</code>，小程序则是<code>嵌入在超文本标记语言</code>。</p>\n<blockquote>\n<p>语言特点：</p>\n<ul>\n<li>程序的执行时，将构建一个类并把它传给编译器，由编译器来调用类的方法。</li>\n<li>许多线程执行（几行代码同时执行），线程是指按顺序执行的动作序列。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"3-函数式模式\"><a href=\"#3-函数式模式\" class=\"headerlink\" title=\"(3) 函数式模式\"></a>(3) 函数式模式</h5><p>该模式下程序被看成是一个数学函数，函数是把一组输入映射到一组输出的黑盒子。例如，求和可以被认为是具有n个输入和1个输出的函数，该函数实现n输入值相加得到总和并最终输出求和结果。</p>\n<p>函数式语言主要实现下面的功能：</p>\n<ul>\n<li><p>1.函数式语言预定义一系列可供任何程序员调用的原始(原子)函数。</p>\n</li>\n<li><p>2.函数式语言允许程序员通过若干原始函数的组合创建新的函数。</p>\n</li>\n</ul>\n<p>例如，定义一个称为first的原始函数，由它来完成从一个数据列表中抽取第一个元素的功能。再定义另一个函数rest,由它完成从一个数据列表中抽取出除第一个元素以外的所有元素，通过两个函数的组合使用，可以在一个程序中定义一个函数来完成对第三个元素的抽取。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929171807093.png\" alt=\"WeiyiGeek.函数式语言中的函数\" title=\"\" class=\"\">\n                <p>WeiyiGeek.函数式语言中的函数</p>\n            </figure>\n<p><strong>常见的函数是语言：</strong></p>\n<ol>\n<li><p>LISP（<code>LISt Programming</code>）：表处理解释语言是20世纪60年代早期由麻省理工学院科研小组设计开发的，它是一种把表作为处理对象的语言。</p>\n</li>\n<li><p>Scheme：由麻省理工学院在20世纪70年代早期开发的，此时表处理解释语言没有统一标准化，不久之后就有许多不同的版本流传于世，该语言定义了一系列原始函数来解决问题，<code>函数名和函数的</code>输入列表写在括号内，结果是一个可用于其他函数输入的列表。</p>\n<blockquote>\n<p>例如，有一个函数car,用来从列表中取出第一个元素,第二个函数cdr用来从列表中取出除第一个元素以外的所有元素。</p>\n<p>两个函数如下：</p>\n<p>car 2 3 5 7 9  =&gt; 2</p>\n<p>cdr 2 3 5 7 9 =&gt; 3 5 7 9</p>\n<p>现在可通过该组合来完成从列表中取出第三个元素的函数。</p>\n<p>(car (cdr (cdr 2 3 5 7 9 ) ) ) =&gt; 取 5</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"4-声明式模式\"><a href=\"#4-声明式模式\" class=\"headerlink\" title=\"(4) 声明式模式\"></a>(4) 声明式模式</h5><p>也称为说明式，该模式依据逻辑推理的原则响应查询，它是在由希腊数学家定义的规范的逻辑基础上发展而来的，并且后来发展成为一阶谓词演算<code>(first-order predicate calculus)</code>。逻辑推理以推导为基础，逻辑学家根据已知正确的一些论断(事实)，运用逻辑推理的 可靠的准则推导出新的论断(事实)。</p>\n<p>例如，逻辑学中著名的推导原则如下：</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929182639968.png\" alt=\"WeiyiGeek.A->B-C\" title=\"\" class=\"\">\n                <p>WeiyiGeek.A->B-C</p>\n            </figure>\n<p><strong>说明式语言</strong></p>\n<ol>\n<li>Prolog (<code>PROgramming in LOGic</code>)：它是最著名的说明性语言，它是由法国人<code>A.Colmerauer</code> 于1972年设计开发的，Prolog中的程序全部由事实和规则组成。</li>\n</ol>\n<hr>\n<h4 id=\"9-4-共同概念\"><a href=\"#9-4-共同概念\" class=\"headerlink\" title=\"9.4 共同概念\"></a>9.4 共同概念</h4><p>此节中，通过对一些过程式语言的快速浏览，发现其共同概念，并且其中某些概念<code>对大多数面向对象语言也适用</code>，因为创建方法时面向对象模式使用过程式模式。</p>\n<h5 id=\"1-标识符\"><a href=\"#1-标识符\" class=\"headerlink\" title=\"(1) 标识符\"></a>(1) 标识符</h5><p>所有计算机语言的共同特点之一就是都具有标识符，标识符允许给程序中对象命名，即<code>对象的名称</code>.</p>\n<p>例如，计算机中每一个数据都存储在一个唯一的地址中，我们可以数据对象命名，然后给出数据的名字就可以让编译器去跟踪数据实际存放的物理地址。</p>\n<h5 id=\"2-数据类型\"><a href=\"#2-数据类型\" class=\"headerlink\" title=\"(2) 数据类型\"></a>(2) 数据类型</h5><p>其定义了一系列值及应用于这些值的一系列操作，每种数据类型值的集合称为数据类型的域，而大多数语言都定义了两类数据类型，即<code>简单数据类型</code>和<code>复合数据类型</code>。</p>\n<p><strong>1) 简单数据类型</strong></p>\n<p>该类型有时又称为<code>原子类型、基本类型、标量类型或内建类型</code>，是不能分解成更小数据类型的数据类型，强制性语言已经定义一些简单数据类型：</p>\n<ul>\n<li><ul>\n<li>整数类型（int）：是不包括小数部分的完整的数。整数的取值范围依赖于语言。有些语言支持多种整数大小。</li>\n<li>实数类型（float）：是带小数部分的数字。</li>\n<li>字符类型（char）：是被语言使用的潜在字符集中的符号，例如，ASCII或Unicode，占 1 B空间大小。</li>\n<li>布尔类型（boolean）：是只取两个值（真或假）的数据类型。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2) 复合数据类型</strong></p>\n<p>该类型是一组元素，其中每个元素都是简单数据类型或复合数据类型（这是递归定义），大多数语言定义了如下的复合数据类型：</p>\n<ul>\n<li><p>数组（array）是一组元素，其中每个元素具有相同类型，例如 C 语言的数据类型。</p>\n</li>\n<li><p>记录（list）是一组元素，其中的元素可以具有不同的类型，例如 Python 语言的列表类型。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># C</span></span><br><span class=\"line\">int array[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python</span></span><br><span class=\"line\">list1 = [<span class=\"string\">'唯一极客'</span>, 2, <span class=\"string\">'weiyigeek'</span>, [1, 3, 4]]</span><br></pre></td></tr></table></figure>\n<p><strong>3) 变量声明与初始化</strong></p>\n<p>变量是存储单元的名字，数据项在内存中可能占据多个地址，名字（作为地址的替代）使程序员从地址中解放出来，只需在程序如何执行的层次上考虑。</p>\n<ul>\n<li>变量声明：大多数过程式语言和面向对象语言要求变量在使用前被声明，声明警告计算机被赋予名字和类型的变量将在程序中使用，要求计算机预留出相应的存储区域。</li>\n<li>变量初始化：虽然存储在变量中的数据值在程序执行过程中可能改变，但大多数过程式语言允许变量<code>在它声明时进行初始化</code>，初始化就是在变量中存储一个值（实际上是存储在寄存器中）。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如，在C、C++和Java中，我们可以定义三种变量数据类型 字符、整数和实数，并赋值</span></span><br><span class=\"line\"><span class=\"comment\"># 变量声明</span></span><br><span class=\"line\">char c;</span><br><span class=\"line\">int number;</span><br><span class=\"line\">double result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 声明时进行初始化</span></span><br><span class=\"line\">char c=<span class=\"string\">'a'</span>;</span><br><span class=\"line\">int number=1024;</span><br><span class=\"line\">double result=256.128;</span><br></pre></td></tr></table></figure>\n<p><strong>4) 字面值</strong></p>\n<p>字面值是程序中使用的预定义的值，在大多数程序设计语言中，可以有整数、实数、字符和布尔字面值，还可以有字符串字面值，为了把字符和字符串字面值从变量名和其他对象中区分开，大多数语言要求字符字面值被括在单引号中，如’A’,而字符串字面值被括中双引号中，如”Anne”。</p>\n<p>例如，当半径存储在变量r中，需要计算圆的面积时，可以使用表达式π x r2其中π(pi）的近似值就是被用作字面值，此处以Go语言为例。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%f\\n\"</span>, math.Pi)   <span class=\"comment\">//直接输出pi的值</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%.2f\\n\"</span>, math.Pi) <span class=\"comment\">//保留两位小数</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%f\\n\"</span>, math.Pi*math.Pow(<span class=\"number\">4</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// 当半径为 4 时 πr^2 计算其圆的面积</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.141593</span><br><span class=\"line\">3.14</span><br><span class=\"line\">50.265482</span><br></pre></td></tr></table></figure>\n<p><strong>5) 常量</strong></p>\n<p>在程序中出了字面值以外不能在运行时被改变的量，称其为常量。</p>\n<p>大多数编程语言定义常量（类似于变量）是一个可以存储值的名字的位置，但不同与变量的是其在声明初始化（需指明类型）后其值便不能够被改变。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c or c++</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">float</span> flagNum = <span class=\"number\">10.24</span></span><br></pre></td></tr></table></figure>\n<p><strong>6) 输入输出</strong></p>\n<p>几乎所有的程序都需要输入和(或)输出数据，大多数程序设计语言使用一些预先定义好的函数完成输入和输出。</p>\n<ul>\n<li>输入：数据或者通过语句或者通过预先定义的函数来完成输入。</li>\n<li>输出：数据或者通过语句或者通过预先定义的函数来完成输出。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"input a,b,c\\n\"</span>); <span class=\"comment\">// 输出</span></span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;a,&amp;b,&amp;c); <span class=\"comment\">// 输入 三个 整数</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a=%d,b=%d,c=%d\"</span>,a,b,c); <span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C 语言格式字符说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%a,%A 读入一个浮点值(仅C99有效) </span><br><span class=\"line\">%c 读入一个字符</span><br><span class=\"line\">%d 读入十进制整数</span><br><span class=\"line\">%i 读入十进制，八进制，十六进制整数</span><br><span class=\"line\">%o 读入八进制整数</span><br><span class=\"line\">%x,%X 读入十六进制整数</span><br><span class=\"line\">%c 读入一个字符</span><br><span class=\"line\">%s 读入一个字符串，遇空格、制表符或换行符结束。</span><br><span class=\"line\">%f,%F,%e,%E,%g,%G 用来输入实数，可以用小数形式或指数形式输入。</span><br><span class=\"line\">%p 读入一个指针</span><br><span class=\"line\">%u 读入一个无符号十进制整数</span><br><span class=\"line\">%n 至此已读入值的等价字符数</span><br><span class=\"line\">%[] 扫描字符集合</span><br><span class=\"line\">%% 读%符号</span><br></pre></td></tr></table></figure>\n<p><strong>7) 表达式</strong></p>\n<p>表达式是由一系列<code>操作数</code>和<code>运算符</code>简化后的一个单一数值，例如 3 + 2 - 5 = 0</p>\n<ol>\n<li><p>操作数：用于接收一个运算符的动作，对于任何一个运算符可能有1、2或更多个操作数。</p>\n</li>\n<li><p>运算符：是用来完成一个动作的特定语言的语法记号。</p>\n</li>\n</ol>\n<blockquote>\n<p>算数运算符：即常见的加、减、乘、除等符号。</p>\n<p>关系运算符：即用于比较两个数的大小关系。</p>\n<p>逻辑运算符：即判断逻辑值（True、False）组合后的新值。</p>\n</blockquote>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20220929192157438.png\" alt=\"WeiyiGeek.运算符\" title=\"\" class=\"\">\n                <p>WeiyiGeek.运算符</p>\n            </figure>\n<h5 id=\"3-语句\"><a href=\"#3-语句\" class=\"headerlink\" title=\"(3) 语句\"></a>(3) 语句</h5><p>每条语句都使程序执行一个相应的动作，它被直接翻译成一条或多条计算机可执行的指令。</p>\n<ol>\n<li><p>赋值语句：即给变量赋值，例如 C、C++和Java使用 “=” 赋值，其他语言 Go 、Ada、Pascal 则使用 := 来赋值。</p>\n</li>\n<li><p>复合语句：即包含零个或多个语句的代码单元，其被称为块，例如，Javascript 中的代码块。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  x = 1;</span><br><span class=\"line\">  y = 20;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>控制语句：即我们在数据算法中提到的三种结构<code>顺序、选择、循环</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 选择</span><br><span class=\"line\"><span class=\"keyword\">if</span> (条件) ... <span class=\"keyword\">else</span> ...</span><br><span class=\"line\">switch (条件) ... <span class=\"keyword\">case</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\">// 循环</span><br><span class=\"line\"><span class=\"keyword\">while</span>(条件) ...</span><br><span class=\"line\"><span class=\"keyword\">for</span>(int i = 0; i &lt; 0; i++) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span> .... <span class=\"keyword\">while</span>(条件)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20220929221435019.png\" alt=\"WeiyiGeek.控制语句\"></p>\n</li>\n</ol>\n<p><br/></p>\n<h5 id=\"4-子程序\"><a href=\"#4-子程序\" class=\"headerlink\" title=\"(4) 子程序\"></a>(4) 子程序</h5><p>子程序（<code>称为函数更贴切</code>）的概念在过程式语言中极其重要，在面向对象语言中的作用要少些。</p>\n<p>子程序(<code>即理解为函数</code>)使程序变得更结构化，更便于协同开发，帮助检査错误，完成特定任务的子程序能一次编写多次调用，就像在编程语言中的预定义过程一样。</p>\n<ul>\n<li><p>局部变量：即变量的作用域，在子程序内部定义的变量，其声明周期随着函数调用而产生，结束而销毁。</p>\n</li>\n<li><p>参数：通常我们需要给子程序传递参数，在主程序中称为实际参数，在子程序中称为形式参数，所以在参数传递时分为<code>传之</code>和<code>传引用两种方式</code>。</p>\n<blockquote>\n<p>传值参数：主程序和子程序创建两个不同的对象(变量)，在程序中创建的对象属程序，在子程序中创建的对象属于子程序，即传入到子程序中实际参数是独立的，在子程序内部处理加工的后的参数<code>不会影响改变</code>传入的变量值。</p>\n</blockquote>\n<blockquote>\n<p>传引用参数：传引用被设计来允许子程序改变主程序中变量的值，在程序向子程序传递参数变量(实际上它是内存的地址)被主程序和子程序共享，即在子程序内部处理加工的后的参数<code>会影响改变</code>传入的变量值。</p>\n</blockquote>\n</li>\n<li><p>返回值：子程序（<code>函数</code>）通常是返回一个或者多个值。</p>\n</li>\n<li><p>实现：子程序概念在不同的语言中被不同地实现，在C和C++中子程序被实现为函数</p>\n</li>\n</ul>\n<p>此处，以C语言为例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 传递参数（形式参数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">value_swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">       tmp = a;</span><br><span class=\"line\">       a = b;</span><br><span class=\"line\">       b = tmp;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"子程序（函数内部）a = %d , b = %d \\n\"</span>,a , b); <span class=\"comment\">// 不会更改成子程序外部的变量a,b值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用参数（形式参数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reference_swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">       tmp = *a;</span><br><span class=\"line\">       *a = *b;</span><br><span class=\"line\">       *b = tmp;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"子程序（函数内部）a = %d , b = %d\\n\"</span>,*a , *b); <span class=\"comment\">// 会更改成子程序外部的变量a,b值</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a 变量地址 %p , b 变量地址 %p\\n\"</span>, a , b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"主程序 a = %d , b = %d \\n\"</span>,a , b);</span><br><span class=\"line\">    value_swap(a, b); <span class=\"comment\">// （实际参数）</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"经过值传递 value_swap 子程序（函数）后,主程序 a = %d , b = %d \\n\\n\"</span>,a , b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"主程序 中 a 变量地址 %p , b 变量地址 %p\\n\"</span>, &amp;a , &amp;b);  <span class=\"comment\">// 变量地址 与 子函数内部变量地址一致</span></span><br><span class=\"line\">    reference_swap(&amp;a,&amp;b); <span class=\"comment\">// （实际参数）</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"经过值引用 reference_swap 子程序（函数）后,主程序 a = %d , b = %d \\n\"</span>,a , b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主程序 a = 8 , b = 2 </span><br><span class=\"line\">子程序（函数内部）a = 2 , b = 8 </span><br><span class=\"line\">经过值传递 value_swap 子程序（函数）后,主程序 a = 8 , b = 2 </span><br><span class=\"line\"></span><br><span class=\"line\">主程序 中 a 变量地址 0x7ffd748ca05c , b 变量地址 0x7ffd748ca058</span><br><span class=\"line\">子程序（函数内部）a = 2 , b = 8</span><br><span class=\"line\">a 变量地址 0x7ffd748ca05c , b 变量地址 0x7ffd748ca058</span><br><span class=\"line\">经过值引用 reference_swap 子程序（函数）后,主程序 a = 2 , b = 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"第-10-章-软件工程\"><a href=\"#第-10-章-软件工程\" class=\"headerlink\" title=\"第 10 章 软件工程\"></a>第 10 章 软件工程</h3><p>此节介绍软件工程概念以及软件生命周期为起点，以及开发过程中的两个模型（<code>瀑布模型和增量模型</code>）。</p>\n<p>在1969年第一届国际软件工程会议，恰巧是第一台计算机诞生30年之际，定义了软件工程是建立在利用合理的工程方法和原则来获得在真实机器上工作的可靠软件。</p>\n<h4 id=\"10-1-软件生命周期\"><a href=\"#10-1-软件生命周期\" class=\"headerlink\" title=\"10.1 软件生命周期\"></a>10.1 软件生命周期</h4><h5 id=\"1-生命周期概念\"><a href=\"#1-生命周期概念\" class=\"headerlink\" title=\"(1) 生命周期概念\"></a>(1) 生命周期概念</h5><p>描述：软件生命周期是软件工程的基本概念，软件和其他的产品一样，周期性地重复着一些阶段。</p>\n<ul>\n<li><p>开发：由开发者小组根据设计要求开发软件。</p>\n</li>\n<li><p>使用和修改：由于在软件使用中发现错误、设计改变规则或公司本身发生变化。</p>\n</li>\n<li><p>过时：因效率低下、语言过时、 用户需求的重大变化或其他因素而导致软件失去它的有效性。</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001125936911.png\" alt=\"WeiyiGeek.软件生命周期\" title=\"\" class=\"\">\n                <p>WeiyiGeek.软件生命周期</p>\n            </figure>\n<h5 id=\"2-开发过程模型\"><a href=\"#2-开发过程模型\" class=\"headerlink\" title=\"(2) 开发过程模型\"></a>(2) 开发过程模型</h5><p>在软件生命周期中，开发过程包括4个阶段：<code>分析、设计、实现和测试</code>，并且有多种模型，此处讨论最常见的两种模型，即<code>瀑布模型和增量模型</code>。</p>\n<p><strong>瀑布模型</strong>: 它是一种非常流行的模型，开发过程只有一个方向的流动。意味则前一个阶段结束，才能开始后面一个阶段。</p>\n<blockquote>\n<p>例如，整个工程的分析阶段应该在设计阶段开始前完成，整个设计阶段应该在实现阶段开始前完成。</p>\n<p>优点：在下一个阶段开始前每个阶段已经完成，在测试阶段整个系统整体功能已经完成。</p>\n<p>缺点：问题定位难，如果过程中中有一部分有问题，则必须检查整个过程。</p>\n</blockquote>\n<p><strong>增量模型</strong>：它是企业中最常用的模型，由开发者根据初始需求进行开发，后续在由需求是在进行开发，这就是我们常说的模块化开发。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001131349980.png\" alt=\"WeiyiGeek.瀑布模型与增量模型\" title=\"\" class=\"\">\n                <p>WeiyiGeek.瀑布模型与增量模型</p>\n            </figure>\n<h4 id=\"10-2-分析阶段\"><a href=\"#10-2-分析阶段\" class=\"headerlink\" title=\"10.2 分析阶段\"></a>10.2 分析阶段</h4><p>整个开发过程始于分析阶段，此阶段生<code>成规格说明文档</code>，即说明了<code>软件要做什么</code>，它使用两种独立的方法，其依赖于实现阶段是使用 <code>过程编程还是对象编程</code></p>\n<h5 id=\"1-面向过程分析\"><a href=\"#1-面向过程分析\" class=\"headerlink\" title=\"(1) 面向过程分析\"></a>(1) 面向过程分析</h5><p><strong>1) 数据流图</strong>: 显示了系统中数据的流动，使用4种符号来表示。</p>\n<blockquote>\n<p>方形盒: 表示数据源或数据目的<br>带圆角的矩形: 表示过程（数据上的动作）<br>末端开口的矩形: 表示数据存储的地方<br>箭头表示: 数据流</p>\n</blockquote>\n<p><strong>2) 实体图</strong>：实体关系图是分析阶段使用的另一个建模工具，此图主要用于数据库的设计。</p>\n<p><strong>3) 状态图</strong>:  提供了另外一种有用的工具，其通常用于当系统中的实体状态在响应事件时将会改变的情况下。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001132613183.png\" alt=\"WeiyiGeek.数据流图与状态图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.数据流图与状态图</p>\n            </figure>\n<h5 id=\"2-面向过程分析\"><a href=\"#2-面向过程分析\" class=\"headerlink\" title=\"(2) 面向过程分析\"></a>(2) 面向过程分析</h5><p><strong>1) 用例图</strong>: 系统用户视图，它显示了用户与系统间的交互，常常使用四种组件表示，即<code>系统、用例、动作者和关系</code>。</p>\n<blockquote>\n<p>系统（用矩形表示）执行功能。<br>系统中的行动（圆角的矩形表示）由用例显示。<br>动作者：是使用系统的某人或某事。<br>关系：使用线条联系动作者与行动，但它们并不需要表示人类。</p>\n</blockquote>\n<p><strong>2) 类图</strong>：经过分析下一步就是创建系统类图，主要是考虑系统涉及的实体。</p>\n<p><strong>3) 状态图</strong>：在类图完成之后，就可以为类图中的每个类准备状态图，其与面向过程分析中的状态图相同。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001133742301.png\" alt=\"WeiyiGeek.用例图与类图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.用例图与类图</p>\n            </figure>\n<h4 id=\"10-3-设计阶段\"><a href=\"#10-3-设计阶段\" class=\"headerlink\" title=\"10.3 设计阶段\"></a>10.3 设计阶段</h4><p>设计阶段定义系统如何完成在分析阶段所定义的需求，<code>即到底怎么做</code>，此阶段中系统所有的组成部分都被定义。</p>\n<h5 id=\"1-面向过程设计\"><a href=\"#1-面向过程设计\" class=\"headerlink\" title=\"(1) 面向过程设计\"></a>(1) 面向过程设计</h5><p>在面向过程设计中，即要设计过程也要设计数据，并且整个系统被<code>分解成一组过程或模块</code>。</p>\n<p><strong>1) 结构图</strong>：主要用于说明模块间的关系，例如图中的 10.8。</p>\n<p><strong>2) 模块化</strong>：将大项目分解成较小的部分，以便能够容易理解和处理，即意味着将大程序分解成能互相通信的小程序，通常在代码开发时要求<code>低耦合</code>和<code>高内聚</code>。</p>\n<ul>\n<li><p>(低)耦合：耦合是对两个模块互相绑定紧密程度的度量，通常为了让模块尽可能地独立，我们需要让其松散耦合。</p>\n<blockquote>\n<p>例如，A模块与B模块存在依赖关系，当A模块发生改变时，B模块仍然可以正常工作，那么就认为A与B是低耦合的。</p>\n<p>优点：松散耦合的模块更可能被重用，不容易在相关模块中产生错误，并且在系统需要修改时，允许我们只修改需要改变的模块，而不会影响到其它模块。<br>开发原则：软件系统中模块间的耦合必须最小化。</p>\n</blockquote>\n</li>\n<li><p>(高)内聚：内聚是程序（<code>模块内部</code>）中处理过程相关紧密程度的度量，通常需要尽可能最大化软件系统模块间的内聚。</p>\n<blockquote>\n<p>例如，系统中存在A、B两个模块进行交互，如果修改了A模块，不影响B模块的工作，反之，修改了B模块也不影响A模块工作，即A、B模块都各司其职，那么我们就认为A模块有足够的内聚。</p>\n<p>优点：我认为高内聚的模块是实现低耦合的前提，因为一个模块实现某一个功能不依赖于其他模块，从而提高程序的可靠性。<br>开发原则：软件系统模块间的内聚必须最大化。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"2-面向对象设计\"><a href=\"#2-面向对象设计\" class=\"headerlink\" title=\"(2) 面向对象设计\"></a>(2) 面向对象设计</h5><p>在面向对象设计中设计阶段，通过详细描述类（Class）的细节，例举出其对象的属性以及方法动作的细节。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001135918017.png\" alt=\"WeiyiGeek.结构图\" title=\"\" class=\"\">\n                <p>WeiyiGeek.结构图</p>\n            </figure>\n<h4 id=\"10-4-实现阶段\"><a href=\"#10-4-实现阶段\" class=\"headerlink\" title=\"10.4 实现阶段\"></a>10.4 实现阶段</h4><p>此阶段在瀑布模型中，通常是在设计阶段完成之后，其主要为面向过程设计中的模块<code>编写程序</code>或者<code>编写程序单元</code>，换言之，根据需求开始写代码🤓。</p>\n<h5 id=\"1-语言选择\"><a href=\"#1-语言选择\" class=\"headerlink\" title=\"(1) 语言选择\"></a>(1) 语言选择</h5><p>通常在企业中都有相应的技术开发栈，例如 C 系列、Java 系（当前最多）、Go 系（次之）、Python 系，对应不同的开发需求、侧重点选择一种开发语言，使得开发周期变短。</p>\n<h5 id=\"2-软件质量\"><a href=\"#2-软件质量\" class=\"headerlink\" title=\"(2) 软件质量\"></a>(2) 软件质量</h5><p>高质量的软件系统是一个能满足用户需求、符合组织操作标准和能高效运行在为其开发的硬件上的一个软件。</p>\n<p>软件质量能够划分成三个广义的度量∶<code>可操作性、可维护性和可迁移性</code>。</p>\n<ul>\n<li>1) 可操作性：涉及系统的基本操作，具有有多种度量方法<code>准确性、高效性、可靠性、安全、及时性和适用性</code>。</li>\n<li>2) 可维护性：以保持系统正常运行并及时更新为参照，具有有多种度量方法<code>可变性、可修正性、适应性，可测试性</code></li>\n<li>3) 可迁移性：指把数据和（或）系统从一个平台移动到另一个平台并重用代码的能力，有有多种度量方法<code>重用性、互用性、可一移植性</code></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/8/image-20221001142409996.png\" alt=\"WeiyiGeek.软件质量\" title=\"\" class=\"\">\n                <p>WeiyiGeek.软件质量</p>\n            </figure>\n<h4 id=\"10-5-测试阶段\"><a href=\"#10-5-测试阶段\" class=\"headerlink\" title=\"10.5 测试阶段\"></a>10.5 测试阶段</h4><p>此阶段主要是在上线前尽可能发现错误，意味着良好的测试策略能发现最多的错误，通常有白盒测试与黑盒测试两种。</p>\n<h5 id=\"1-白盒测试\"><a href=\"#1-白盒测试\" class=\"headerlink\" title=\"(1) 白盒测试\"></a>(1) 白盒测试</h5><p>或叫玻璃盒测试，即内部开发测试人员，知道或者拿到<code>软件分析文档，设计文档，以及有开发的源程序代码</code>, 程序就像玻璃盒子，其中的每件事都是可见的。</p>\n<p>白盒测试需要保证至少满足下面4条标准:</p>\n<ul>\n<li><p>每个模块中的所有独立的路径至少被测试过一次。</p>\n</li>\n<li><p>所有的判断结构（两路的或多路的）每个分支都被测试。</p>\n</li>\n<li><p>每个循环被测试。</p>\n</li>\n<li><p>所有数据结构都被测试。</p>\n</li>\n</ul>\n<p><img src=\"https://img.weiyigeek.top/2022/8/image-20221001144106793.png\" alt=\"WeiyiGeek.软件测试与基本测试示例\"></p>\n<p>白盒测试有多种测试方法，其中最常见是<code>基本路径测试</code>和<code>控制结构测试(逻辑测试)</code>。</p>\n<p><strong>基本路径测试</strong>：由Tom McCabe提出的，它是一种软件中每条语句至少被执行一次的方法。</p>\n<p><strong>控制结构测试</strong>：它比基本路径测试更容易理解并且包含基本路径测试，例如下方不同类的测试。</p>\n<ul>\n<li>条件测试：用来检査是否所有的条件都被正确设置。</li>\n<li>数据流测试：用来检査被用在赋值语句左边的变量的值。</li>\n<li>循环测试：用来检查循环的正确性。</li>\n</ul>\n<h5 id=\"2-黑盒测试\"><a href=\"#2-黑盒测试\" class=\"headerlink\" title=\"(2) 黑盒测试\"></a>(2) 黑盒测试</h5><p>即我们在不知道其程序分析文档、设计文档以及拿不到程序源代码时进行的测试，通常在业务上线前需要进行黑盒的安全渗透测试，换言之，程序就像看不见内部的黑盒。</p>\n<p><strong>穷尽测试</strong>：在输入域（路径、输入、传参出）中的使用所有可能的值去测试软件。</p>\n<p><strong>随机测试</strong>：在输入域的值的子集来测试，子集选择的方式(值在输入域上的分布)是非常重要的。</p>\n<p><strong>边界值测试</strong>：当遇到边界值时错误经常发生，即我们常说的缓冲区溢出，可能会对代码程序致命的错误。</p>\n<h4 id=\"10-6-软件文档\"><a href=\"#10-6-软件文档\" class=\"headerlink\" title=\"10.6 软件文档\"></a>10.6 软件文档</h4><p>企业内部中在开发初始阶段便有许多开发设计文档，随着业务的迭代也有自己的Bug管理文档，所以说软件的正确使用和有效维护离不开文档，所以文档是一个持续过程。</p>\n<p>通常软件有三种独立的文档：<code>用户文档、系统文档和技术文档</code>。</p>\n<p><strong>用户文档</strong>：即用户手册的文档，它告诉用户如何一步步地使用此软件。</p>\n<p><strong>系统文档</strong>：即定义软件本身，其目的是为了让原始开发人员之外的人能够维护和修改软件包（接盘侠 😳）。</p>\n<blockquote>\n<p>在分析阶段，收集的信息应该仔细地用文档记录</p>\n<p>在设计阶段，最终版本中用到的工具必须记录在文档中。</p>\n<p>在实现阶段，代码的每个模块都应记录在文档中。</p>\n<p>在测试阶段，对最终产品使用的每种测试，连同它的结果都要记录在文档中。</p>\n</blockquote>\n<p><strong>技术文档</strong>: 即软件系统的安装部署，通常由专业的技术人员进行参考。</p>\n","comments":true,"excerpt":"[TOC]计算机科学导论学习笔记第 4 部分 计算机软件与算法此部分包含第7、8、9、10章，包含了计算机操作系统、问题求解算法、程序设计语言之旅、软件工程等相关知识，加深我们对开发的认识，为后续开发打下一个基础。","categories":[{"name":"计算机基础知识","path":"api/categories/计算机基础知识.json"}],"tags":[{"name":"计算机科学导论","path":"api/tags/计算机科学导论.json"}]}