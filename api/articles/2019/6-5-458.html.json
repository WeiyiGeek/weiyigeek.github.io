{"title":"4.Docker学习之进阶使用","slug":"虚拟云容/云容器/Docker/4.Docker学习之进阶使用","date":"2019-06-05T06:56:30.000Z","updated":"2023-01-31T02:29:10.643Z","url":"2019/6-5-458.html","path":"api/articles/2019/6-5-458.html.json","covers":["https://img.weiyigeek.top/2020/1/20200801084054.png","https://img.weiyigeek.top/2020/1/20200716095033.png","https://img.weiyigeek.top/2020/1/20200716143909.png","https://img.weiyigeek.top/2020/1/20200716164918.png","https://img.weiyigeek.top/2020/1/20200716162414.png","https://img.weiyigeek.top/2020/1/20200716164431.png","https://img.weiyigeek.top/2020/1/20200716214552.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h4><p>描述: 本章主要学习与记录了在进一步学习Docker容器中的一些基础名称解析与Docker与一些辅助软件配合使用来增加工作效率以及简化运维流程;</p>\n<p>辅助工具比如: Docker Machine, Swarm(架构很小的时候使用不过现在推荐使用K8S) docker 集群, Docker-Compose;</p>\n<hr>\n<h4 id=\"0x01-名词解析\"><a href=\"#0x01-名词解析\" class=\"headerlink\" title=\"0x01 名词解析\"></a>0x01 名词解析</h4><p>描述: 通过前面的学习，我们大概已经对docker容器有了个简单的认识，随着近些年云计算的流行，容器从出现至今广泛使用特别是在Kubernetes容器编排发布后由于其能快速为分布式架构的应用部署以及收缩，Docker 已经站在容器工具的顶端;</p>\n<p>随着K8s的大热<code>docker、oci、runc、containerd</code>等等名词也逐渐传播开来。这么多的名词，也容易让人混淆。<br>本章对相关名词和其之间的联系进行一下梳理和总结，方便大家更好地理解。</p>\n<h5 id=\"container-容器\"><a href=\"#container-容器\" class=\"headerlink\" title=\"container - 容器\"></a>container - 容器</h5><p>描述: 我们所知Docker设计理念是一次Build到处运行，其Logo也是非常经典图标一条鲸鱼拖着若干个集装箱的经典形象已经深入人心；</p>\n<p>Q: 现在问题来了在docker中container的翻译是译为容器还是集装箱？</p>\n<blockquote>\n<p>答: 由于Container是在Docker出现以前产生，而在此之前Linux Container 就已经被翻译为Linux容器并被大家接受；从含义来看一开始选定把”容器”作为container的翻译，也应该是准确的。而随着docker出现，container的概念深入人心，而其与原来的linux container中的container含义应该说是一致的。</p>\n</blockquote>\n<p>Q: 那何为容器?</p>\n<blockquote>\n<p>答: 容器本质上是受到资源限制，彼此间相互隔离的若干个linux进程的集合,这是有别于基于模拟的虚拟机的。对于容器和虚拟机的区别的理解可以参考我前面所写的Docker基础文章;<br>一般来说容器技术主要指代用于资源限制的cgroup(Linux control group)，用于隔离的namespace，以及基础的linux kernel等。</p>\n</blockquote>\n<p><br></p>\n<h5 id=\"OCI-镜像容器运行时标准\"><a href=\"#OCI-镜像容器运行时标准\" class=\"headerlink\" title=\"OCI - 镜像容器运行时标准\"></a>OCI - 镜像容器运行时标准</h5><p>描述: Docker 公司与 CoreOS 和 Google 共同创建了<code>OCI (Open Container Initial - 开放初始化容器)</code>，并由linux基金会进行管理致力于<code>images spec 与 container runtime的标准的制定</code>和runc的开发等工作。</p>\n<p>Q: 何为container runtime?</p>\n<blockquote>\n<p>答: 主要负责的是容器的生命周期的管理; oci的<code>runtime spec</code>标准中对于容器的状态描述，以及对于容器的<code>创建、删除、查看等操作</code>进行了定义。<br>其容器在运行时分为两类: Low-level Runtime 、 High-Level Runtime;</p>\n</blockquote>\n<p>在<code>Docker容器镜像仓库存储原理(前世今身)与技巧</code>文章中我们知道runc是Low-Level Runtime当然也当前应用最为广泛的;</p>\n<p>下面针对于runc我们做一个简单描述, 它是对于OCI标准的一个参考实现，是一个可以<code>用于创建和运行容器的CLI(command-line interface)工具</code>;<br>简单的说 runc直接与容器所依赖的 cgroup/linux kernel等进行交互，负责为容器配置cgroup/namespace等启动容器所需的环境，创建启动容器的相关进程。</p>\n<p><br></p>\n<h5 id=\"Docker-Engine-容器引擎\"><a href=\"#Docker-Engine-容器引擎\" class=\"headerlink\" title=\"Docker-Engine - 容器引擎\"></a>Docker-Engine - 容器引擎</h5><p>描述: <code>容器引擎或者说容器平台</code>，不仅包含对于容器的生命周期的管理，还包括了对于容器生态的管理，比如对于镜像等。现在的docker、rkt以及阿里推出的pouch均可属于此范畴。</p>\n<p>从Docker开源发布至今笔者认为可以分为两个阶段来理解。在笔者接触docker之初，docker版本为1.2，当时的docker的主要作用是容器的生命周期管理和镜像管理，当时的docker在功能上更趋近于现在的container runtime。而后来，随着docker的发展，docker就不再局限于容器的管理，还囊括了存储(volume)、网络(net)等的管理，因此后来的docker更多的是一个容器及容器生态的管理平台。</p>\n<p>在容器编排领域的两种架构技术Swarm集群与Kubernetes集群，最终以Google家的Kubernetes胜出并且在分布式架构中广泛应用；</p>\n<p><br></p>\n<h5 id=\"containerd-货箱\"><a href=\"#containerd-货箱\" class=\"headerlink\" title=\"containerd - 货箱\"></a>containerd - 货箱</h5><p>描述:为了兼容oci标准docker也做了架构调整。将容器运行时相关的程序<code>从docker daemon剥离出来形成了containerd</code>。<br>Containerd向docker提供运行容器的API二者通过grpc进行交互, containerd最后会通过runc来实际运行容器。</p>\n<p>Conatinerd 与 Docker 引擎以及 runC 关系图:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200801084054.png\" alt=\"WeiyiGeek.container ship 集装箱运货船货柜船\" title=\"\" class=\"\">\n                <p>WeiyiGeek.container ship 集装箱运货船货柜船</p>\n            </figure></p>\n<hr>\n<h4 id=\"0x02-常用工具\"><a href=\"#0x02-常用工具\" class=\"headerlink\" title=\"0x02 常用工具\"></a>0x02 常用工具</h4><h5 id=\"Docker-Machine\"><a href=\"#Docker-Machine\" class=\"headerlink\" title=\"Docker-Machine\"></a>Docker-Machine</h5><p>描述: 它是一种可以让您在虚拟主机上安装 Docker 的工具，并可以使用 docker-machine 命令来管理主机, 其便于在Mac或者Windows上(需要和<code>Docker Desktop for Windows</code>-<a href=\"https://hub.docker.com/editions/community/docker-ce-desktop-windows/\" target=\"_blank\" rel=\"noopener\">下载</a>联合使用)进行安装, 还能进行远程的机器上安装与管理Docker宿主机,与之前说的vagrant非常类似;</p>\n<p>官方手册:<a href=\"http://docs.docker.com/machine/\" target=\"_blank\" rel=\"noopener\">http://docs.docker.com/machine/</a><br>项目地址:<a href=\"https://github.com/docker/machine/releases/\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/machine/releases/</a></p>\n<p>简述作用:</p>\n<ul>\n<li>(1) 旧的桌面系统版本中运行在Windows或者MAC的Docker环境中;</li>\n<li>(2) 简化Docker和远程管理多个Docker Host机器，比如快速的给 100 台服务器安装上 docker。;</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716095033.png\" alt=\"WeiyiGeek.图示\" title=\"\" class=\"\">\n                <p>WeiyiGeek.图示</p>\n            </figure>\n<p>安装依赖:</p>\n<ul>\n<li>1.安装 Docker Machine 之前你需要先安装 Docker。 </li>\n<li>2.您需要在您的机器上安装Virtualbox(MAC)或者Hyper-V(Windows)</li>\n</ul>\n<p>安装流程:</p>\n<ul>\n<li>Step1.在GitHub的docker/machine发布页面上找到最新版本的二进制文件进行拉取。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux</span></span><br><span class=\"line\">base=https://github.com/docker/machine/releases/download/v0.16.2 &amp;&amp;</span><br><span class=\"line\">  curl -L <span class=\"variable\">$base</span>/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class=\"line\">  sudo mv /tmp/docker-machine /usr/<span class=\"built_in\">local</span>/bin/docker-machine &amp;&amp;</span><br><span class=\"line\">  chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-machine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Windows (需借用Git Bash)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ ! -d <span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin\"</span> ]]; <span class=\"keyword\">then</span> mkdir -p <span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin\"</span>; <span class=\"keyword\">fi</span> &amp;&amp; \\</span><br><span class=\"line\">curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-Windows-x86_64.exe &gt; <span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin/docker-machine.exe\"</span> &amp;&amp; \\</span><br><span class=\"line\">chmod +x <span class=\"string\">\"<span class=\"variable\">$HOME</span>/bin/docker-machine.exe\"</span></span><br></pre></td></tr></table></figure></li>\n<li><p>Step 2.Docker-Machine自动生成的配置文件<code>~/.docker/machine/machines/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker-machine安装</span></span><br><span class=\"line\">./docker-machine-Windows-x86_64.exe version</span><br><span class=\"line\">docker-machine-Windows-x86_64.exe version 0.16.2, build bd45ab13</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.Docker-Machine卸载<code>Remove the executable: rm $(which docker-machine)</code></p>\n</li>\n</ul>\n<p><br></p>\n<p><strong>docker-machine 命令</strong><br>描述:使用 <code>docker-machine 命令</code>，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p>\n<p>基础语法和参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: docker-machine-Windows-x86_64.exe [OPTIONS] COMMAND [arg...]</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --debug, -D                                                   Enable debug mode</span><br><span class=\"line\">  --storage-path, -s <span class=\"string\">\"C:\\Users\\WeiyiGeek\\.docker\\machine\"</span>       Configures storage path [<span class=\"variable\">$MACHINE_STORAGE_PATH</span>]</span><br><span class=\"line\">  --tls-ca-cert                                                 CA to verify remotes against [<span class=\"variable\">$MACHINE_TLS_CA_CERT</span>]</span><br><span class=\"line\">  --tls-ca-key                                                  Private key to generate certificates [<span class=\"variable\">$MACHINE_TLS_CA_KEY</span>]</span><br><span class=\"line\">  --tls-client-cert                                             Client cert to use <span class=\"keyword\">for</span> TLS [<span class=\"variable\">$MACHINE_TLS_CLIENT_CERT</span>]</span><br><span class=\"line\">  --tls-client-key                                              Private key used <span class=\"keyword\">in</span> client TLS auth [<span class=\"variable\">$MACHINE_TLS_CLIENT_KEY</span>]</span><br><span class=\"line\">  --github-api-token                                            Token to use <span class=\"keyword\">for</span> requests to the Github API [<span class=\"variable\">$MACHINE_GITHUB_API_TOKEN</span>]</span><br><span class=\"line\">  --native-ssh                                                  Use the native (Go-based) SSH implementation. [<span class=\"variable\">$MACHINE_NATIVE_SSH</span>]</span><br><span class=\"line\">  --bugsnag-api-token                                           BugSnag API token <span class=\"keyword\">for</span> crash reporting [<span class=\"variable\">$MACHINE_BUGSNAG_API_TOKEN</span>]</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>, -h                                                    show <span class=\"built_in\">help</span></span><br><span class=\"line\">  --version, -v                                                 <span class=\"built_in\">print</span> the version</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">* config：查看当前激活状态 Docker 主机的连接信息。</span><br><span class=\"line\">* creat：创建 Docker 主机</span><br><span class=\"line\"></span><br><span class=\"line\">* env：显示连接到某个主机需要的环境变量</span><br><span class=\"line\">* inspect： 以 json 格式输出指定Docker的详细信息</span><br><span class=\"line\">* ip： 获取指定 Docker 主机的地址</span><br><span class=\"line\">* <span class=\"built_in\">kill</span>： 直接杀死指定的 Docker 主机</span><br><span class=\"line\">* ls： 列出所有的管理主机</span><br><span class=\"line\">* provision： 重新配置指定主机</span><br><span class=\"line\">* regenerate-certs： 为某个主机重新生成 TLS 信息</span><br><span class=\"line\">* restart： 重启指定的主机</span><br><span class=\"line\">* rm： 删除某台 Docker 主机，对应的虚拟机也会被删除</span><br><span class=\"line\">* ssh： 通过 SSH 连接到主机上，执行命令</span><br><span class=\"line\">* scp： 在 Docker 主机之间以及 Docker 主机和本地主机之间通过 scp 远程复制数据</span><br><span class=\"line\">* mount： 使用 SSHFS 从计算机装载或卸载目录</span><br><span class=\"line\">* start： 启动一个指定的 Docker 主机，如果对象是个虚拟机，该虚拟机将被启动</span><br><span class=\"line\">* status： 获取指定 Docker 主机的状态(包括：Running、Paused、Saved、Stopped、Stopping、Starting、Error)等</span><br><span class=\"line\">* stop： 停止一个指定的 Docker 主机</span><br><span class=\"line\">* upgrade： 将一个指定主机的 Docker 版本更新为最新</span><br><span class=\"line\">* url： 获取指定 Docker 主机的监听 URL</span><br><span class=\"line\">* version： 显示 Docker Machine 的版本或者主机 Docker 版本</span><br><span class=\"line\">* <span class=\"built_in\">help</span>： 显示帮助信息</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$DOCKER_HOST</span>=tcp://10.10.107.245:2375</span><br><span class=\"line\"><span class=\"variable\">$MACHINE_DRIVER</span>=swarm   <span class=\"comment\"># virtualbox | swarm | hyper-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.列出可用的机器，目前只有这里默认的 default 虚拟机。</span></span><br><span class=\"line\">docker-machine ls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.在安装有Virutualbox的机器上创建机器</span></span><br><span class=\"line\"><span class=\"comment\"># --driver：指定用来创建机器的驱动类型这里是virtualbox。</span></span><br><span class=\"line\">docker-machine create --driver virtualbox <span class=\"built_in\">test</span></span><br><span class=\"line\">docker-machine create -d hyperv --hyperv-virtual-switch <span class=\"string\">\"Primary Virtual Switch\"</span> worker2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.查看机器的 ip</span></span><br><span class=\"line\">docker-machine ip <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.停止机器</span></span><br><span class=\"line\">docker-machine stop <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.启动机器</span></span><br><span class=\"line\">docker-machine start <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.进入机器之中</span></span><br><span class=\"line\">docker-machine ssh <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.查看当前激活状态的 Docker 主机</span></span><br><span class=\"line\">$ docker-machine active</span><br><span class=\"line\">$ docker-machine active</span><br><span class=\"line\"><span class=\"comment\"># staging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8.命令配置Shell</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> $(docker-machine env <span class=\"built_in\">test</span>)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716143909.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<p><strong>实际案例:</strong><br>在Win10开始菜单的“Windows管理工具”下看到Hyper-V管理器,打开后需要进行进一步的设置;</p>\n<ul>\n<li><p>Step 1.确保Hyper-V是启用，可以正常打开Hyper-V管理器并可以看见虚拟机情况;</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716164918.png\" alt=\"WeiyiGeek.Hyper-V管理器\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Hyper-V管理器</p>\n            </figure>\n</li>\n<li><p>Step 2.然后进行建立一个新的外部网络交换机（可选）,注意确定后会重新刷新网卡会导致短暂的断网(修改后建议重新机器以确保在虚拟交换机管理器中选择了正确的网络)</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716162414.png\" alt=\"WeiyiGeek.VirtualSwitch\" title=\"\" class=\"\">\n                <p>WeiyiGeek.VirtualSwitch</p>\n            </figure>\n<ul>\n<li><p>Step 3.使用Docker机器和微软Hyper-V驱动程序创建节点,注意需要采用管理员来运行cmd或者Powershell终端（推荐）;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意:区分大小写</span></span><br><span class=\"line\">./docker-machine.exe create -d hyperv --hyperv-virtual-switch Docker0 worker-01</span><br><span class=\"line\">./docker-machine.exe create -d hyperv --hyperv-virtual-switch Docker0 worker-02</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716164431.png\" alt=\"WeiyiGeek.虚拟\" title=\"\" class=\"\">\n                <p>WeiyiGeek.虚拟</p>\n            </figure>\n</li>\n<li><p>Step 4.查看创建的虚拟机信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建的机器查看</span></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe ls</span><br><span class=\"line\">NAME        ACTIVE   DRIVER   STATE     URL                        SWARM   DOCKER      ERRORS</span><br><span class=\"line\">worker-01   -        hyperv   Running   tcp://10.20.172.122:2376           v19.03.12</span><br><span class=\"line\">worker-02   -        hyperv   Running   tcp://10.20.172.123:2376           v19.03.12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将你的Docker客户端连接到运行在这个虚拟机上的Docker引擎</span></span><br><span class=\"line\">.\\docker-machine.exe env worker-01</span><br><span class=\"line\"><span class=\"variable\">$Env</span>:DOCKER_TLS_VERIFY = <span class=\"string\">\"1\"</span></span><br><span class=\"line\"><span class=\"variable\">$Env</span>:DOCKER_HOST = <span class=\"string\">\"tcp://10.20.172.122:2376\"</span></span><br><span class=\"line\"><span class=\"variable\">$Env</span>:DOCKER_CERT_PATH = <span class=\"string\">\"C:\\Users\\WeiyiGeek\\.docker\\machine\\machines\\worker-01\"</span></span><br><span class=\"line\"><span class=\"variable\">$Env</span>:DOCKER_MACHINE_NAME = <span class=\"string\">\"worker-01\"</span></span><br><span class=\"line\"><span class=\"variable\">$Env</span>:COMPOSE_CONVERT_WINDOWS_PATHS = <span class=\"string\">\"true\"</span></span><br><span class=\"line\"><span class=\"comment\"># Run this command to configure your shell:</span></span><br><span class=\"line\">&amp; <span class=\"string\">\"F:\\ChoromeDownload\\docker-machine.exe\"</span> env worker-01 | Invoke-Expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前活动机器切换</span></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe active</span><br><span class=\"line\">worker-01</span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; &amp; <span class=\"string\">\"F:\\ChoromeDownload\\docker-machine.exe\"</span> env worker-02 | Invoke-Expression</span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe active</span><br><span class=\"line\">worker-02</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置进行查看</span></span><br><span class=\"line\">.\\docker-machine.exe config worker-01</span><br><span class=\"line\">--tlsverify</span><br><span class=\"line\">--tlscacert=<span class=\"string\">\"C:\\\\Users\\\\WeiyiGeek\\\\.docker\\\\machine\\\\machines\\\\worker-01\\\\ca.pem\"</span></span><br><span class=\"line\">--tlscert=<span class=\"string\">\"C:\\\\Users\\\\WeiyiGeek\\\\.docker\\\\machine\\\\machines\\\\worker-01\\\\cert.pem\"</span></span><br><span class=\"line\">--tlskey=<span class=\"string\">\"C:\\\\Users\\\\WeiyiGeek\\\\.docker\\\\machine\\\\machines\\\\worker-01\\\\key.pem\"</span></span><br><span class=\"line\">-H=tcp://10.20.172.122:2376</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入创建的机器的ssh之中;</span></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe ssh worker-01</span><br><span class=\"line\">   ( <span class=\"string\">'&gt;'</span>)</span><br><span class=\"line\">  /) TC (\\   Core is distributed with ABSOLUTELY NO WARRANTY.</span><br><span class=\"line\"> (/-_--_-\\)           www.tinycorelinux.net</span><br><span class=\"line\"></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe ssh worker-01 hostname</span><br><span class=\"line\">worker-01</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><em>注意事项:</em></p>\n<ul>\n<li>(1) 与Docker-compose一样如果您想使用docker-machine您必须在您的运行它的环境中安装docker;</li>\n<li>(2) 不同操作系统建议不同的虚拟化程序<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker Desktop <span class=\"keyword\">for</span> Mac - virtualbox driver</span><br><span class=\"line\">Docker Desktop <span class=\"keyword\">for</span> Windows - hyperv driver</span><br></pre></td></tr></table></figure></li>\n<li>(3) 构建镜像时候由于拉取Github的releases速度较慢会导致下载失败提示<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误信息</span></span><br><span class=\"line\">(worker-01) Latest release <span class=\"keyword\">for</span> github.com/boot2docker/boot2docker is v19.03.12</span><br><span class=\"line\">(worker-01) Downloading C:\\Users\\WeiyiGeek\\.docker\\machine\\cache\\boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso...</span><br><span class=\"line\">worker-01) 0%Error removing file: Error removing temporary download file: remove C:\\Users\\WeiyiGeek\\.docker\\machine\\cache\\boot2docker.iso.tmp850714895: The process cannot access the file because it is being used by another process.</span><br><span class=\"line\">(worker-01)</span><br><span class=\"line\">Error with pre-create check: <span class=\"string\">\"read tcp 10.20.172.103:57715-&gt;52.216.89.11:443: wsarecv: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方法:</span></span><br><span class=\"line\">ISO: https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso</span><br><span class=\"line\">1.迅雷下载</span><br><span class=\"line\">2.Github下载加速站点:https://d.serctl.com/</span><br><span class=\"line\"><span class=\"comment\"># 将下载的镜像放入到以下目录之中</span></span><br><span class=\"line\">C:\\Users\\WeiyiGeek\\.docker\\machine\\cache\\boot2docker.iso</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h5 id=\"Docker-Swarm-集群\"><a href=\"#Docker-Swarm-集群\" class=\"headerlink\" title=\"Docker Swarm 集群\"></a>Docker Swarm 集群</h5><p>描述: 由于Docker只能在单主机上进行运行，且跨HOST部署,运行与管理能力有限，此时就需要一个容器编排或者管理工具,自Docker 1.12版本开始，swarm模式已经被集成到<code>Docker Engine</code>之中;</p>\n<p>此时以上面的Docker-machine和Hyper-V环境中创建的两个docker容器为例，假设我的一台node-2Linux服务器是管理者他被用来执行相关管理命令以及对加入的swarm集群节点进行授权，而worker-01/worker-02加入到swarm之中成为节点进行业务负载;</p>\n<p><br/></p>\n<p>例如,在Windows中的利用Hyper-v + Docker进行实践<code>docker swarm</code>集群。</p>\n<p><strong>流程步骤:</strong></p>\n<ul>\n<li><p>Step1.创建swarm控制端在worker-01机器上或者加入集群的tokern</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker@worker-01:~$ docker swarm init --advertise-addr 10.20.172.122</span><br><span class=\"line\"><span class=\"comment\"># docker swarm join --token SWMTKN-1-0w8bvf8gzw5hct845izbv38qvl45385r19p4gwo0v8fuwie68g-603ibqyz4od3mmnw1gmbahd8v 10.10.107.245:2377</span></span><br><span class=\"line\"><span class=\"comment\"># To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step2.将worker-01/worker-02加入到swarm集群之中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># worker-01 节点</span></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt;.\\docker-machine.exe ssh worker-01</span><br><span class=\"line\">docker@worker-01:~$ docker swarm join --token SWMTKN-1-0w8bvf8gzw5hct845izbv38qvl45385r19p4gwo0v8fuwie68g-603ibqyz4od3mmnw1gmbahd8v 10.10.107.245:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># worker-02 节点</span></span><br><span class=\"line\">PS F:\\ChoromeDownload&gt; .\\docker-machine.exe ssh worker-02</span><br><span class=\"line\">[root@node2 ~]$ docker swarm join --token SWMTKN-1-0w8bvf8gzw5hct845izbv38qvl45385r19p4gwo0v8fuwie68g-603ibqyz4od3mmnw1gmbahd8v 10.10.107.245:2377</span><br><span class=\"line\">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.在Swarm控制节点上查看加入的节点:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker node ls</span><br><span class=\"line\"><span class=\"comment\"># ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span></span><br><span class=\"line\"><span class=\"comment\"># tqulwewuzrgayabjomy3xw55u *   node2               Ready               Active              Leader(领导者)      19.03.12</span></span><br><span class=\"line\"><span class=\"comment\"># 7vp6qrabwp7ee2dkq0d1bf11l     worker-01           Ready               Active                                  19.03.12</span></span><br><span class=\"line\"><span class=\"comment\"># kxhd5fdxvarn6vpjweadf8yfb     worker-02           Ready               Active                                  19.03.12</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 4.Swarm 集群中部署应用准备</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># DockerFile</span></span><br><span class=\"line\">cat &gt; dockerfile &lt;&lt;<span class=\"string\">'END'</span></span><br><span class=\"line\">FROM frolvlad/alpine-python3</span><br><span class=\"line\">WORKDIR /opt/</span><br><span class=\"line\">ADD ./hostname.txt /opt/</span><br><span class=\"line\">RUN sh -c <span class=\"string\">\"ip addr\"</span> &gt; ip.txt</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">ENV NAME Python-Web</span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>,<span class=\"string\">\"-m\"</span>,<span class=\"string\">\"http.server\"</span>,<span class=\"string\">\"8080\"</span>,<span class=\"string\">\"-d\"</span>,<span class=\"string\">\"/opt/\"</span>]</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Docker-compose.yml</span></span><br><span class=\"line\"><span class=\"comment\"># Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.</span></span><br><span class=\"line\">cat &gt; docker-compose.yml&lt;&lt;<span class=\"string\">'END'</span></span><br><span class=\"line\">version: <span class=\"string\">\"3\"</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  web:</span><br><span class=\"line\">    image: python-web:latest</span><br><span class=\"line\">    deploy:</span><br><span class=\"line\">      replicas: 5</span><br><span class=\"line\">      resources:</span><br><span class=\"line\">        limits:</span><br><span class=\"line\">          cpus: <span class=\"string\">\"0.1\"</span></span><br><span class=\"line\">          memory: <span class=\"string\">\"50M\"</span></span><br><span class=\"line\">      restart_policy:</span><br><span class=\"line\">        condition: on-failure</span><br><span class=\"line\">    entrypoint: [<span class=\"string\">\"sh\"</span>,<span class=\"string\">\"-c\"</span>,<span class=\"string\">\"/opt/start.sh\"</span>]</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - <span class=\"string\">\"/tmp/:/opt/\"</span></span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - <span class=\"string\">\"80:8080\"</span></span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - webnet</span><br><span class=\"line\">networks:</span><br><span class=\"line\">  webnet:</span><br><span class=\"line\">END</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [root@node2 test]# cat start.sh</span></span><br><span class=\"line\"><span class=\"comment\"># ip addr &gt; /opt/ip.txt &amp;&amp; python -m http.server 8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像构建</span></span><br><span class=\"line\">docker build -t python-web .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像查看</span></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">python-web                  latest              196e26d0d89f        9 seconds ago       57.8MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 镜像导出与启动web下载端口</span></span><br><span class=\"line\">docker save python-web -o python-web.tar</span><br><span class=\"line\">python -m SimpleHTTPServer 80 <span class=\"comment\">#python 2语法</span></span><br><span class=\"line\"><span class=\"comment\"># Serving HTTP on 0.0.0.0 port 80 ...</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 5.各个节点拉取镜像进行导入到本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># worker-01/worker-02 中执行拉取镜像</span></span><br><span class=\"line\">wget http://10.10.107.245/python-web.tar &amp;&amp; docker load -i python-web.tar</span><br><span class=\"line\"><span class=\"comment\"># Connecting to 10.10.107.245 (10.10.107.245:80)</span></span><br><span class=\"line\"><span class=\"comment\"># python-web.tar       100% |********************************| 58.1M  0:00:00 ETA</span></span><br><span class=\"line\"><span class=\"comment\"># 50644c29ef5a: Loading layer  5.845MB/5.845MB                                                                            </span></span><br><span class=\"line\"><span class=\"comment\"># 47279ef47504: Loading layer  55.11MB/55.11MB                                                                            </span></span><br><span class=\"line\"><span class=\"comment\"># a126991f92ee: Loading layer   2.56kB/2.56kB                                                                             </span></span><br><span class=\"line\"><span class=\"comment\"># 89a1c87b5354: Loading layer   2.56kB/2.56kB                                                                             </span></span><br><span class=\"line\"><span class=\"comment\"># Loaded image: python-web:latest</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 6.通过swarm集群进行部署应用(多个副本)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Swarm Master 控制节点上执行</span></span><br><span class=\"line\">docker stack deploy -c docker-compose.yml swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># Creating network swarm-python-web_webnet # 项目名称+网卡名 = 网络名称</span></span><br><span class=\"line\"><span class=\"comment\"># Creating service swarm-python-web_web</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># swarm 集群信息与swarm-python-web服务应用信息</span></span><br><span class=\"line\">docker stack ls</span><br><span class=\"line\"><span class=\"comment\"># NAME                SERVICES            ORCHESTRATOR</span></span><br><span class=\"line\"><span class=\"comment\"># swarm-python-web    1                   Swarm</span></span><br><span class=\"line\">docker stack services swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># ID                  NAME                   MODE                REPLICAS            IMAGE               PORTS</span></span><br><span class=\"line\"><span class=\"comment\"># bzeeucg6n6s1        swarm-python-web_web   replicated          5/5                 python-web:latest   *:80-&gt;8080/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 应用启动后的正常状态</span></span><br><span class=\"line\">docker stack ps swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># ID                  NAME                     IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</span></span><br><span class=\"line\"><span class=\"comment\"># xv3doqj787ae        swarm-python-web_web.1   python-web:latest   worker-02           Running             Running 5 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># njkppsnrf4nc        swarm-python-web_web.2   python-web:latest   worker-01           Running             Running 5 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># sulpgnpg00v2        swarm-python-web_web.3   python-web:latest   node2               Running             Running 4 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># ny91qomtch7p        swarm-python-web_web.4   python-web:latest   worker-02           Running             Running 5 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># fb1a0cp50wf4        swarm-python-web_web.5   python-web:latest   worker-01           Running             Running 5 minutes ago</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Step 7.访问集群Web查看效果,即每个节点的IP：80<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># master</span></span><br><span class=\"line\">$ docker inspect $(docker ps -aq) | grep <span class=\"string\">\"IPAddress\"</span></span><br><span class=\"line\">            <span class=\"string\">\"SecondaryIPAddresses\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.0.28\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.2.11\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># worker-01</span></span><br><span class=\"line\">docker@worker-01:~$ docker inspect $(docker ps -aq) | grep <span class=\"string\">\"IPAddress\"</span></span><br><span class=\"line\">            <span class=\"string\">\"SecondaryIPAddresses\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.0.25\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.2.5\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"SecondaryIPAddresses\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.0.27\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.2.7\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># worker-02</span></span><br><span class=\"line\">docker@worker-02:~$ docker inspect $(docker ps -aq) | grep <span class=\"string\">\"IPAddress\"</span></span><br><span class=\"line\">            <span class=\"string\">\"SecondaryIPAddresses\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.0.24\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.2.4\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"SecondaryIPAddresses\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.0.26\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"IPAddress\"</span>: <span class=\"string\">\"10.0.2.6\"</span>,</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200716214552.png\" alt=\"WeiyiGeek.集群WEb\" title=\"\" class=\"\">\n                <p>WeiyiGeek.集群WEb</p>\n            </figure>\n</li>\n</ul>\n<ul>\n<li><p>Step 8.如果此时停止或删除一个容器，swarm会在工作节点中新启动一个容器，使之副本数量一直为五;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stack ps swarm-python-web</span><br><span class=\"line\"><span class=\"comment\"># ID                  NAME                         IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR                         PORTS</span></span><br><span class=\"line\"><span class=\"comment\"># xv3doqj787ae        swarm-python-web_web.1       python-web:latest   worker-02           Running             Running 24 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># nkwtm8w9yfxp        swarm-python-web_web.2       python-web:latest   node2               Running             Running 3 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># njkppsnrf4nc         \\_ swarm-python-web_web.2   python-web:latest   worker-01           Shutdown            Failed 3 minutes ago     \"task: non-zero exit (137)\"</span></span><br><span class=\"line\"><span class=\"comment\"># sulpgnpg00v2        swarm-python-web_web.3       python-web:latest   node2               Running             Running 24 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># ny91qomtch7p        swarm-python-web_web.4       python-web:latest   worker-02           Running             Running 24 minutes ago</span></span><br><span class=\"line\"><span class=\"comment\"># fb1a0cp50wf4        swarm-python-web_web.5       python-web:latest   worker-01           Running             Running 24 minutes ago</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 9.删除在集群中部署的应用以及退出集群:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span> stack rm $(docker stack ls --format <span class=\"string\">\"&#123;&#123;.Name&#125;&#125;\"</span>)</span><br><span class=\"line\">Removing service swarm-python-web_web</span><br><span class=\"line\">Removing network swarm-python-web_webnet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排空节点上的集群容器 </span></span><br><span class=\"line\">docker@master-01:~<span class=\"variable\">$docker</span> node update --availability drain j5auh1zg6qzvmzkf80wvpl9hr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 节点退出集群</span></span><br><span class=\"line\">docker@worker-02:~$ docker swarm leave</span><br><span class=\"line\">Node left the swarm.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">docker@master-01:~$ docker node ls</span><br><span class=\"line\">ID                            HOSTNAME            STATUS              AVAILABILITY(可用性)  MANAGER STATUS      ENGINE VERSION</span><br><span class=\"line\">j5auh1zg6qzvmzkf80wvpl9hr     worker-02           Down 状态           Drain  已停止                                   19.03.12</span><br><span class=\"line\">tjwo77l1i08gzextmfwn69i9z *   worker-01           Ready               Active                Leader              19.03.12</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 控制节点退出swarm集群</span></span><br><span class=\"line\">docker@master-01:~$ docker swarm leave --force</span><br><span class=\"line\">Node left the swarm.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"0x03-在Docker中运行Docker-dind\"><a href=\"#0x03-在Docker中运行Docker-dind\" class=\"headerlink\" title=\"0x03 在Docker中运行Docker(dind)\"></a>0x03 在Docker中运行Docker(dind)</h4><h5 id=\"1-dind-介绍\"><a href=\"#1-dind-介绍\" class=\"headerlink\" title=\"(1) dind 介绍\"></a>(1) dind 介绍</h5><p>描述: 什么是dind(Docker in Docker)?<br>答: 就是在Docker容器内启动<code>docker daemon</code>从而对外提供服务, 每个运行容器都是在一个进程它托管在Docker Daemon。</p>\n<p><strong>dind 实现方式:</strong></p>\n<ul>\n<li>1.利用宿主机的docker.sock文件</li>\n<li>2.利用容器中的运行docker:dind容器,在启动一个docker容器(b),容器b指定host为a容器内的Docker Daemon。</li>\n</ul>\n<p><br/></p>\n<h5 id=\"2-dind-原理\"><a href=\"#2-dind-原理\" class=\"headerlink\" title=\"(2) dind 原理\"></a>(2) dind 原理</h5><p><strong>基础代码:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (cli *Client) ImageBuild(ctx context.Context, buildContext io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error) &#123;</span><br><span class=\"line\">    query, err := cli.imageBuildOptionsToQuery(options)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> types.ImageBuildResponse&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    headers := http.Header(make(map[string][]string))</span><br><span class=\"line\">    buf, err := json.Marshal(options.AuthConfigs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> types.ImageBuildResponse&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 两句比较重要</span></span><br><span class=\"line\">    headers.Add(<span class=\"string\">\"X-Registry-Config\"</span>, base64.URLEncoding.EncodeToString(buf))</span><br><span class=\"line\">    headers.Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/x-tar\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    serverResp, err := cli.postRaw(ctx, <span class=\"string\">\"/build\"</span>, query, buildContext, headers)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> types.ImageBuildResponse&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    osType := getDockerOS(serverResp.header.Get(<span class=\"string\">\"Server\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> types.ImageBuildResponse&#123;</span><br><span class=\"line\">        Body:   serverResp.body,</span><br><span class=\"line\">        OSType: osType,</span><br><span class=\"line\">    &#125;, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"3-dind-实践\"><a href=\"#3-dind-实践\" class=\"headerlink\" title=\"(3) dind 实践\"></a>(3) dind 实践</h5><p>Tips : 注意不同的Docker版本其启动和访问有些许差异。<br><strong>2.1 低版本启动及访问</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动1.12.6-dind 并在其它容器中访问</span></span><br><span class=\"line\">docker run --privileged -d --name mydocker docker:1.12.6-dind</span><br><span class=\"line\">docker run --rm --link mydocker:docker docker:1.12.6 version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在宿主机访问</span></span><br><span class=\"line\">docker -H 172.17.0.2:2375 version</span><br><span class=\"line\">docker -H 0.0.0.0:<span class=\"variable\">$&#123;hostport&#125;</span> version</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>2.2 例18.09以上的dind镜像</strong><br>描述: 19.03+默认tls模式，通过<code>DOCKER_TLS_CERTDIR=&#39;&#39;</code>可以关闭;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A 容器：启动 stable 19.03.1 版本</span></span><br><span class=\"line\">docker run --privileged --name some-docker -d \\</span><br><span class=\"line\"><span class=\"comment\">#--network some-network --network-alias docker \\</span></span><br><span class=\"line\">-e DOCKER_TLS_CERTDIR=/certs \\</span><br><span class=\"line\">-v some-docker-certs-ca:/certs/ca \\</span><br><span class=\"line\">-v some-docker-certs-client:/certs/client \\</span><br><span class=\"line\">docker:stable-dind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># B 容器: 容器内访问A容器</span></span><br><span class=\"line\">docker run --rm \\</span><br><span class=\"line\"><span class=\"comment\">#--network some-network \\</span></span><br><span class=\"line\">-e DOCKER_TLS_CERTDIR=/certs \\</span><br><span class=\"line\">-v some-docker-certs-client:/certs/client:ro \\</span><br><span class=\"line\">--link some-docker:docker \\</span><br><span class=\"line\">docker:stable version</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"4-dind-DockerFile-学习\"><a href=\"#4-dind-DockerFile-学习\" class=\"headerlink\" title=\"(4) dind DockerFile 学习\"></a>(4) dind DockerFile 学习</h5><p><strong>Dockerfile</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM alpine:3.10</span><br><span class=\"line\">RUN apk add --no-cache ca-certificates</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set up nsswitch.conf for Go's \"netgo\" implementation (which Docker explicitly uses)</span></span><br><span class=\"line\"><span class=\"comment\"># - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149</span></span><br><span class=\"line\"><span class=\"comment\"># - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275</span></span><br><span class=\"line\"><span class=\"comment\"># - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN [ ! -e /etc/nsswitch.conf ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">'hosts: files dns'</span> &gt; /etc/nsswitch.conf</span><br><span class=\"line\">ENV DOCKER_CHANNEL stable</span><br><span class=\"line\">ENV DOCKER_VERSION 19.03.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># todo ENV DOCKER_SHA256</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/docker/docker-ce/blob/5b073ee2cf564edee5adca05eee574142f7627bb/components/packaging/static/hash_files !!</span></span><br><span class=\"line\"><span class=\"comment\"># (no SHA file artifacts on download.docker.com yet as of 2017-06-07 though)</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">set</span> -eux; \\</span><br><span class=\"line\">  \\</span><br><span class=\"line\"><span class=\"comment\"># this \"case\" statement is generated via \"update.sh\"</span></span><br><span class=\"line\">  apkArch=<span class=\"string\">\"<span class=\"variable\">$(apk --print-arch)</span>\"</span>; \\</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$apkArch</span>\"</span> <span class=\"keyword\">in</span> \\</span><br><span class=\"line\">  <span class=\"comment\"># amd64</span></span><br><span class=\"line\">    x86_64) dockerArch=<span class=\"string\">'x86_64'</span> ;; \\</span><br><span class=\"line\">  <span class=\"comment\"># arm32v6 </span></span><br><span class=\"line\">    armhf) dockerArch=<span class=\"string\">'armel'</span> ;; \\</span><br><span class=\"line\">  <span class=\"comment\"># arm32v7</span></span><br><span class=\"line\">    armv7) dockerArch=<span class=\"string\">'armhf'</span> ;; \\</span><br><span class=\"line\">  <span class=\"comment\"># arm64v8</span></span><br><span class=\"line\">    aarch64) dockerArch=<span class=\"string\">'aarch64'</span> ;; \\</span><br><span class=\"line\">    *) <span class=\"built_in\">echo</span> &gt;&amp;2 <span class=\"string\">\"error: unsupported architecture (<span class=\"variable\">$apkArch</span>)\"</span>; <span class=\"built_in\">exit</span> 1 ;;\\</span><br><span class=\"line\">  <span class=\"keyword\">esac</span>; \\</span><br><span class=\"line\">  \\</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ! wget -O docker.tgz <span class=\"string\">\"https://download.docker.com/linux/static/<span class=\"variable\">$&#123;DOCKER_CHANNEL&#125;</span>/<span class=\"variable\">$&#123;dockerArch&#125;</span>/docker-<span class=\"variable\">$&#123;DOCKER_VERSION&#125;</span>.tgz\"</span>; <span class=\"keyword\">then</span> \\</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> &gt;&amp;2 <span class=\"string\">\"error: failed to download 'docker-<span class=\"variable\">$&#123;DOCKER_VERSION&#125;</span>' from '<span class=\"variable\">$&#123;DOCKER_CHANNEL&#125;</span>' for '<span class=\"variable\">$&#123;dockerArch&#125;</span>'\"</span>; \\</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1; \\</span><br><span class=\"line\">  <span class=\"keyword\">fi</span>; \\</span><br><span class=\"line\">  \\</span><br><span class=\"line\">  tar --extract \\</span><br><span class=\"line\">    --file docker.tgz \\</span><br><span class=\"line\">    --strip-components 1 \\</span><br><span class=\"line\">    --directory /usr/<span class=\"built_in\">local</span>/bin/ \\</span><br><span class=\"line\">  ; \\</span><br><span class=\"line\">  rm docker.tgz; \\</span><br><span class=\"line\">  \\</span><br><span class=\"line\">  dockerd --version; \\</span><br><span class=\"line\">  docker --version</span><br><span class=\"line\"></span><br><span class=\"line\">COPY modprobe.sh /usr/<span class=\"built_in\">local</span>/bin/modprobe</span><br><span class=\"line\">COPY docker-entrypoint.sh /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/docker-library/docker/pull/166</span></span><br><span class=\"line\"><span class=\"comment\">#   dockerd-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-generating TLS certificates</span></span><br><span class=\"line\"><span class=\"comment\">#   docker-entrypoint.sh uses DOCKER_TLS_CERTDIR for auto-setting DOCKER_TLS_VERIFY and DOCKER_CERT_PATH</span></span><br><span class=\"line\"><span class=\"comment\"># (For this to work, at least the \"client\" subdirectory of this path needs to be shared between the client and server containers via a volume, \"docker cp\", or other means of data sharing.)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENV DOCKER_TLS_CERTDIR=/certs</span><br><span class=\"line\"><span class=\"comment\"># also, ensure the directory pre-exists and has wide enough permissions for \"dockerd-entrypoint.sh\" to create subdirectories, even when run in \"rootless\" mode</span></span><br><span class=\"line\">RUN mkdir /certs /certs/client &amp;&amp; chmod 1777 /certs /certs/client</span><br><span class=\"line\"><span class=\"comment\"># (doing both /certs and /certs/client so that if Docker does a \"copy-up\" into a volume defined on /certs/client, it will \"do the right thing\" by default in a way that still works for rootless users)</span></span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"docker-entrypoint.sh\"</span>]</span><br><span class=\"line\">CMD [<span class=\"string\">\"sh\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>docker-entrypoint.sh</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -eu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># first arg is `-f` or `--some-option`</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;1#-&#125;</span>\"</span> != <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- docker <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if our command is a valid Docker subcommand, let's invoke it through Docker instead</span></span><br><span class=\"line\"><span class=\"comment\"># (this allows for \"docker run docker ps\", etc)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> docker <span class=\"built_in\">help</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> &gt; /dev/null 2&gt;&amp;1; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- docker <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">_should_tls</span></span>() &#123;</span><br><span class=\"line\">  [ -n <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_TLS_CERTDIR:-&#125;</span>\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; [ -s <span class=\"string\">\"<span class=\"variable\">$DOCKER_TLS_CERTDIR</span>/client/ca.pem\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; [ -s <span class=\"string\">\"<span class=\"variable\">$DOCKER_TLS_CERTDIR</span>/client/cert.pem\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; [ -s <span class=\"string\">\"<span class=\"variable\">$DOCKER_TLS_CERTDIR</span>/client/key.pem\"</span> ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if we have no DOCKER_HOST but we do have the default Unix socket (standard or rootless), use it explicitly</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_HOST:-&#125;</span>\"</span> ] &amp;&amp; [ -S /var/run/docker.sock ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOCKER_HOST=unix:///var/run/docker.sock</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -z <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_HOST:-&#125;</span>\"</span> ] &amp;&amp; XDG_RUNTIME_DIR=<span class=\"string\">\"<span class=\"variable\">$&#123;XDG_RUNTIME_DIR:-/run/user/$(id -u)&#125;</span>\"</span> &amp;&amp; [ -S <span class=\"string\">\"<span class=\"variable\">$XDG_RUNTIME_DIR</span>/docker.sock\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">\"unix://<span class=\"variable\">$XDG_RUNTIME_DIR</span>/docker.sock\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if DOCKER_HOST isn't set (no custom setting, no default socket), let's set it to a sane remote value</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_HOST:-&#125;</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> _should_tls || [ -n <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_TLS_VERIFY:-&#125;</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">'tcp://docker:2376'</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">'tcp://docker:2375'</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_HOST#tcp:&#125;</span>\"</span> != <span class=\"string\">\"<span class=\"variable\">$DOCKER_HOST</span>\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; [ -z <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_TLS_VERIFY:-&#125;</span>\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; [ -z <span class=\"string\">\"<span class=\"variable\">$&#123;DOCKER_CERT_PATH:-&#125;</span>\"</span> ] \\</span><br><span class=\"line\">  &amp;&amp; _should_tls \\</span><br><span class=\"line\">; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOCKER_TLS_VERIFY=1</span><br><span class=\"line\">  <span class=\"built_in\">export</span> DOCKER_CERT_PATH=<span class=\"string\">\"<span class=\"variable\">$DOCKER_TLS_CERTDIR</span>/client\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> = <span class=\"string\">'dockerd'</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  cat &gt;&amp;2 &lt;&lt;-<span class=\"string\">'EOW'</span></span><br><span class=\"line\">    📎 Hey there!  It looks like you<span class=\"string\">'re trying to run a Docker daemon.</span></span><br><span class=\"line\"><span class=\"string\">\t\t   You probably should use the \"dind\" image variant instead, something like:</span></span><br><span class=\"line\"><span class=\"string\">\t\t     docker run --privileged --name some-docker ... docker:dind ...</span></span><br><span class=\"line\"><span class=\"string\">\t\t   See https://hub.docker.com/_/docker/ for more documentation and usage examples.</span></span><br><span class=\"line\"><span class=\"string\">\tEOW</span></span><br><span class=\"line\"><span class=\"string\">\tsleep 3</span></span><br><span class=\"line\"><span class=\"string\">fi</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">exec \"$@\"</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}