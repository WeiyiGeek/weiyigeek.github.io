{"title":"Python3补充知识点","slug":"编程世界/Python/基础学习/Python3补充知识点","date":"2019-06-29T05:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/6-29-337.html","path":"api/articles/2019/6-29-337.html.json","covers":["https://img.weiyigeek.top/2019/1/20190728112735.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<p>#### </p>\n<h4 id=\"Python与C数据类型\"><a href=\"#Python与C数据类型\" class=\"headerlink\" title=\"Python与C数据类型\"></a>Python与C数据类型</h4><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190728112735.png\" alt=\"WeiyiGeek.基本数据类型在Python与C之间的对应关系\" title=\"\" class=\"\">\n                <p>WeiyiGeek.基本数据类型在Python与C之间的对应关系</p>\n            </figure>\n<hr>\n\n<h4 id=\"采用字典实现switch条件选择\"><a href=\"#采用字典实现switch条件选择\" class=\"headerlink\" title=\"采用字典实现switch条件选择\"></a>采用字典实现switch条件选择</h4><p>描述：初学python语言，竟然很久才发现python没有switch-case语句，查看官方文档说是可以用if-elseif-elseif代替，同时也用其他的解决方案比较简单的就是利用字典来实现同样的功能。</p>\n<p>写一个字典每个key对应的值是一个方法如:</p>\n<blockquote>\n<p>switch = {“valueA”:lambda x,y:functionA(x,y),”valueB”:functionB,”valueC”:functionC}</p>\n</blockquote>\n<p>示例演示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># python中switch...case语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"case c ：switch c 字典形式调用add函数: %d + %d =  %d\"</span> %(x,y,x+y))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">div</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"switch b 字典调用div函数: %d + %d  = %f\"</span> %(x,y,x/y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#字典形式中的lambda表达式来实现switch语句效果</span></span><br><span class=\"line\">switch = &#123;</span><br><span class=\"line\">    <span class=\"string\">'a'</span>:<span class=\"keyword\">lambda</span> x:x**<span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"string\">'b'</span>:<span class=\"keyword\">lambda</span> x,y:div(x,y),</span><br><span class=\"line\">    <span class=\"string\">'c'</span>:<span class=\"keyword\">lambda</span> x,y:add(x,y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#采用 try...except来捕获异常</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"case a : \"</span>, switch[<span class=\"string\">\"a\"</span>](<span class=\"number\">2</span>))  <span class=\"comment\">#4</span></span><br><span class=\"line\">    print(<span class=\"string\">\"case b ：\"</span>, switch[<span class=\"string\">'b'</span>](<span class=\"number\">8</span>,<span class=\"number\">2</span>)) <span class=\"comment\">#4.0</span></span><br><span class=\"line\">    switch[<span class=\"string\">\"c\"</span>](<span class=\"number\">2</span>,<span class=\"number\">5</span>)       <span class=\"comment\">#根据字典key值来调用函数  #7</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">    print(<span class=\"string\">\"捕获到异常！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果</span></span><br><span class=\"line\">case a :  <span class=\"number\">4</span></span><br><span class=\"line\">case b ： switch b 字典调用div函数: <span class=\"number\">8</span> + <span class=\"number\">2</span>  = <span class=\"number\">4.000000</span></span><br><span class=\"line\">case c ：switch c 字典形式调用add函数: <span class=\"number\">2</span> + <span class=\"number\">5</span> =  <span class=\"number\">7</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ctype模块的三种不同动态库链接方式（python\"><a href=\"#ctype模块的三种不同动态库链接方式（python\" class=\"headerlink\" title=\"ctype模块的三种不同动态库链接方式（python)\"></a>ctype模块的三种不同动态库链接方式（python)</h4><p>问题：如果理解函数调用的约定?<br>答：函数调用约定(calling convention) 描述了如何正确的方式调用某些特定类型的函数，包括了函数参数在站上的分配顺序,有哪些参数会被压入栈中，而那些参数将通过寄存器传入,以及在函数返回时函数栈的回收方式等;</p>\n<p>两种最基本的函数调用约定：</p>\n<ul>\n<li><p>cdecl ： 规定了函数参数列表<code>从右向左</code>顺序入栈,并有函数调用者负责清理栈上的参数,在X86架构被C编译器广泛使用;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#C语言形式：</span></span><br><span class=\"line\">int python_rocks(one, two, three)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#x86汇编语言形式 (从右向左)</span></span><br><span class=\"line\">push three</span><br><span class=\"line\">push two</span><br><span class=\"line\">push one</span><br><span class=\"line\">call python_rocks</span><br><span class=\"line\">add esp, 12  <span class=\"comment\">#每个参数占用四个字节空间</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>stdcall ：约定为Win32 API所广泛使用,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#C语言形式：</span></span><br><span class=\"line\">int python_myrocks(one, two, three)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#x86汇编语言形式 (从右向左)</span></span><br><span class=\"line\">push three</span><br><span class=\"line\">push two</span><br><span class=\"line\">push one</span><br><span class=\"line\">call python_myrocks</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>两者之间的相同/区别：</p>\n<ul>\n<li>相同：参数入栈顺序,两者函数调用都约定选用EAX寄存器存放函数返回值;</li>\n<li>区别：回收函数栈的工作并非由函数调用者完成，而是有被调用者本身python_myrocks在函数返回前自相负责清除;</li>\n</ul>\n<p>ctype模块的三种不同动态库链接方式：</p>\n<ul>\n<li>1.cdll()：用于加载那些遵循cdecl标准函数调用约定的链接库；</li>\n<li>2.Windll()：用于加载那些遵循从stdcall调用约定的动态链接库，stdcall是微软Win32API所使用的原生调用约定；</li>\n<li>3.Oledll()：使用方法与windll完全类似，只是oledll会假定其载入的函数会统一返回一个windows hresult错误编码，这些错误编码专门服务于微软的COM（组件对象模型）函数，用于表示错误信息；</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"}]}