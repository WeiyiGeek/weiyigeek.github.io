{"title":"Git入门学习到进阶3","slug":"编程世界/开发必备/版本控制/GIT/Git入门学习到进阶3","date":"2019-03-08T14:45:25.000Z","updated":"2022-12-10T04:14:10.594Z","url":"2019/3-8-370.html","path":"api/articles/2019/3-8-370.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190716214716.png"],"content":"<p>[toc]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-参与开源项目\"><a href=\"#0x00-参与开源项目\" class=\"headerlink\" title=\"0x00 参与开源项目\"></a>0x00 参与开源项目</h4><p>但是在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目了。</p>\n<p><em>如何参与一个开源项目呢？</em><br>比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href=\"https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库然后从自己的账号下clone：\" target=\"_blank\" rel=\"noopener\">https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库然后从自己的账号下clone：</a></p>\n<blockquote>\n<p>git clone <a href=\"mailto:git@github.com\">git@github.com</a>:michaelliao/bootstrap.git</p>\n</blockquote>\n<p><code>一定要从自己的账号下clone仓库，这样你才能推送修改</code>。如果从bootstrap的作者的仓库地址<a href=\"mailto:git@github.com\">git@github.com</a>:twbs/bootstrap.git克隆，因为没有权限你将不能推送修改。</p>\n<p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request（推送属性请求）,当然对方是否接受你的pull request就不一定了。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190716214716.png\" alt=\"WeiyiGeek.pull request\" title=\"\" class=\"\">\n                <p>WeiyiGeek.pull request</p>\n            </figure>\n<hr>\n<h4 id=\"0x01-进阶使用\"><a href=\"#0x01-进阶使用\" class=\"headerlink\" title=\"0x01 进阶使用\"></a>0x01 进阶使用</h4><h5 id=\"清理-git-log-日志\"><a href=\"#清理-git-log-日志\" class=\"headerlink\" title=\"清理 git log 日志\"></a>清理 git log 日志</h5><p>描述：就是创建一个新的分支，并将项目git commit然后再新建立分支上删除master分支，之后并当前分支更名为master分支，最后git push即可;</p>\n<p>清理Git的Log流程：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建临时分支</span></span><br><span class=\"line\">git checkout --orphan tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加所需提交的文件</span></span><br><span class=\"line\">git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#添加commit信息</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"Clean Log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除master分支</span></span><br><span class=\"line\">git branch -D master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#更名分支</span></span><br><span class=\"line\">git branch -m master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#提交新的master分支代码</span></span><br><span class=\"line\">git push -f origin master</span><br><span class=\"line\">git push --<span class=\"built_in\">set</span>-upstream origin master <span class=\"comment\">#将远程仓库设置为从“origin”跟踪远程分支“master”。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看日志记录就能看见（数量上的变化）</span></span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit b50b234422d6be2fb1af3551d9af2654f28de25f (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class=\"line\">Author: WeiyiGeek &lt;weiyigeek@qq.com&gt;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"项目同时推送github和gitee-多个仓库配置\"><a href=\"#项目同时推送github和gitee-多个仓库配置\" class=\"headerlink\" title=\"项目同时推送github和gitee(多个仓库配置)\"></a>项目同时推送github和gitee(多个仓库配置)</h5><p><strong>Q: git能否支持一个项目同时推送到gitee和github或者其它代码仓库中呢？</strong><br>答案: 当然是YES的，可以参照如下进行配置。</p>\n<p>操作流程(f方法1):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1：打开每个项目的.git文件夹下的config文件，但是需要手动指定源拉取或者上传</span></span><br><span class=\"line\">[remote <span class=\"string\">\"gitee\"</span>]</span><br><span class=\"line\">  url =  git@gitee.com:WeiyiGeek/test.git       </span><br><span class=\"line\">  fetch = +refs/heads/*:refs/remotes/gitee/*</span><br><span class=\"line\">  tagopt = --no-tags</span><br><span class=\"line\"><span class=\"comment\"># 或者命令行</span></span><br><span class=\"line\">git remote add gitee git@gitee.com:WeiyiGeek/test.git</span><br><span class=\"line\">git remote -v  <span class=\"comment\">#执行后可以看见可看到两个仓库</span></span><br><span class=\"line\"><span class=\"comment\">#需要注意，此时推送代码时需要对两个仓库分别执行一次push命令</span></span><br><span class=\"line\">git push </span><br><span class=\"line\">git push gitee master --all</span><br><span class=\"line\">git push gitee master --tags</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>操作流程(方法2-推荐方法，一次性push上传):<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式2.我们可以更改.git下的config文件为</span></span><br><span class=\"line\">[remote <span class=\"string\">\"origin\"</span>]</span><br><span class=\"line\">  url =  git@github.com:WeiyiGeek/test.git</span><br><span class=\"line\">  fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">  url =  git@gitee.com:WeiyiGeek/test.git </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者执行git远程仓库的添加命令</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url --add origin git@gitee.com:WeiyiGeek/test.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程仓库地址是否添加成功</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此时只需执行一次push即可同时推送多个仓库。</span></span><br><span class=\"line\">git push origin master -f</span><br></pre></td></tr></table></figure></p>\n<p><em>两种方法的对比</em>：</p>\n<ul>\n<li>方式1.可以对任意仓库进行pull或者push</li>\n<li>方式2.默认只能从config中的第一个url内的仓库pull代码</li>\n<li>总之一句话：pull代码的话配置1更方便，push代码的话配置2更方便</li>\n</ul>\n<p>注意事项: 如果推送的非标准的22端口需要如下配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[remote <span class=\"string\">\"gitlab\"</span>]</span><br><span class=\"line\">  url = ssh://git@gitlab.weiyigeek.top:2222/WeiyiGeek/blog.git</span><br><span class=\"line\">  fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证</span></span><br><span class=\"line\">&gt; ssh -i ~/.ssh/id_develop -T ssh://git@gitlab.weiyigeek.top:2222</span><br><span class=\"line\">Welcome to GitLab, @WeiyiGeek!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定密钥拉取与上传</span></span><br><span class=\"line\">&gt; ssh-agent zsh</span><br><span class=\"line\">&gt; ssh-add ~/.ssh/id_develop</span><br><span class=\"line\"><span class=\"comment\"># Identity added: /home/weiyigeek/.ssh/id_develop (master@weiyigeek.top)</span></span><br><span class=\"line\">weiyigeek@Ubuntu-PC:~/develop/github-project</span><br><span class=\"line\">&gt; git <span class=\"built_in\">clone</span> ssh://git@gitlab.weiyigeek.top:2222/WeiyiGeek/blog.git</span><br><span class=\"line\"><span class=\"comment\"># 正克隆到 'blog'...</span></span><br><span class=\"line\"><span class=\"comment\"># remote: Enumerating objects: 3839, done.</span></span><br><span class=\"line\"><span class=\"comment\"># remote: Counting objects: 100% (3839/3839), done.</span></span><br><span class=\"line\"><span class=\"comment\"># remote: Compressing objects: 100% (1527/1527), done.</span></span><br><span class=\"line\"><span class=\"comment\"># remote: Total 3839 (delta 1824), reused 3839 (delta 1824), pack-reused 0</span></span><br><span class=\"line\"><span class=\"comment\"># 接收对象中: 100% (3839/3839), 23.15 MiB | 11.33 MiB/s, 完成.</span></span><br><span class=\"line\"><span class=\"comment\"># 处理 delta 中: 100% (1824/1824), 完成.</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"修改-commit-历史\"><a href=\"#修改-commit-历史\" class=\"headerlink\" title=\"修改 commit 历史\"></a>修改 commit 历史</h5><p>使用 git rebase 进行历史修改，假定修改最近 3 条历史，操作步骤如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><br>运行此命令会提供一个提交列表，如下所示其中 commit 记录是时间逆序排列的；<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick f7f3f6d changed my name a bit</span><br><span class=\"line\">pick 310154e updated README formatting and added blame</span><br><span class=\"line\">pick a5f4a0d added cat-file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 710f0f8..a5f4a0d onto 710f0f8</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\">#  p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\">#  e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\">#  s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br></pre></td></tr></table></figure><br>编辑上述列表文件，在需要更改的 commit 前，<code>将 pick 修改为 edit</code> ，如果需要压缩可设置为 squash 保存退出，进入到 rebase 流程；<br>通过<code>git commit --amend --author</code>对历史记录依次修改和持续进行 rebase</p>\n<p><strong>删除所有 commit 中的某些文件</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">git filter-branch --force --index-filter <span class=\"string\">'git rm --cached --ignore-unmatch -r build'</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 触发 GC</span></span><br><span class=\"line\">git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"拉取-commit-最近一次分支\"><a href=\"#拉取-commit-最近一次分支\" class=\"headerlink\" title=\"拉取 commit 最近一次分支\"></a>拉取 commit 最近一次分支</h5><p>我们可以采用如下方法克隆的项目，只拉取包含最近的一次commit的主分支或者次其它分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># depth 用于指定克隆深度，为1即表示只克隆最近一次commit.</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth 1 https://github.com/weiyigeek/xxxxxxx.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置远程其它分支</span></span><br><span class=\"line\">$ git remote <span class=\"built_in\">set</span>-branches origin <span class=\"string\">'remote_branch_name'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拉取远程其它分支最近的一次commit代码到本地</span></span><br><span class=\"line\">$ git fetch --depth 1 origin remote_branch_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到拉取的指定分支</span></span><br><span class=\"line\">$ git checkout remote_branch_name</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"如何撤销git-ommit操作\"><a href=\"#如何撤销git-ommit操作\" class=\"headerlink\" title=\"如何撤销git ommit操作\"></a>如何撤销git ommit操作</h3><p>描述: 通常在远程代码仓库中有修改吗，同时本地有修改并且已经commit, 假如我们在git commit之后想撤回commit，怎么办？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如.添加修改过的文件到暂存区并把所有文件从暂存区提交进本地仓库。</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"本功能全部完成,将提交进本地仓库\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行完commit后，想撤回commit，怎么办？</span></span><br><span class=\"line\"><span class=\"comment\"># 回退到上一个版本, 当然如果想回退第n次可以使用HEAD~n。</span></span><br><span class=\"line\"><span class=\"comment\"># --soft : 不删除工作空间改动代码，撤销commit，不撤销 git add . </span></span><br><span class=\"line\">git reset --soft HEAD^</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --mixed : 不删除工作空间改动代码，撤销commit，并且撤销 git add . 操作</span></span><br><span class=\"line\">git reset --mixed HEAD^ </span><br><span class=\"line\">git reset HEAD^  <span class=\"comment\"># 与上效果一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --hard : 删除工作空间改动代码，撤销commit，撤销git add . 操作(执行时慎重)</span></span><br><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 如果只是commit注释写错了，只是想改一下注释，只需要执行<code>git commit --amend</code>, 此时会进入默认vim编辑器，修改注释完毕后保存就好了。</p>\n<hr>\n<h4 id=\"0x02-Git入坑障碍解决\"><a href=\"#0x02-Git入坑障碍解决\" class=\"headerlink\" title=\"0x02 Git入坑障碍解决\"></a>0x02 Git入坑障碍解决</h4><p><strong>问题1.pull origi.error: The following untracked working tree</strong><br>解决方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方案1：</span></span><br><span class=\"line\">git clean -d  -fx <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#选项解释</span></span><br><span class=\"line\">x  -----删除忽略文件已经对git来说不识别的文件</span><br><span class=\"line\">d  -----删除未被添加到git的路径中的文件</span><br><span class=\"line\">f  -----强制运行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方案2：如果希望保留生产服务器上所做的改动,仅仅并入新配置项:</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\">git pull</span><br><span class=\"line\">git stash pop</span><br><span class=\"line\">git diff -w +文件名 <span class=\"comment\">#来确认代码自动合并的情况.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:</span></span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方案3：第1个问题:解决GIT代码仓库不同步</span></span><br><span class=\"line\">git checkout -f  <span class=\"comment\">#撤销在工作区里面的更改</span></span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>问题2.git提交被拒绝，提示non-fast-forward</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#解决方法（1）：</span></span><br><span class=\"line\">git fetch origin debug  <span class=\"comment\">#获取远程分支debug的修改</span></span><br><span class=\"line\">git merge origin debug  <span class=\"comment\">#合并远程分支debug</span></span><br><span class=\"line\">git pull origin debug  <span class=\"comment\">#更新本地分支 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解决方法（2）：在远程仓库相比现在本地仓库为主的情况下强制推送</span></span><br><span class=\"line\">git push -f origin debug</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>问题3.git升级安装太慢以及报错SSL Timeout</strong><br>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.官网下载安装git最新版本(太麻烦不建议)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.采用VPN进行翻墙更新git版本，采用 git update-git-for-windows 命令进行升级;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.采用host进行本地绑定git更新地址 github.global.ssl.fastly.net，然后采用git update 进行升级即可;</span></span><br><span class=\"line\">在/etc/hosts文件中加入 151.101.229.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>问题4.拷贝已在Github中注册的公钥拷贝到其它服务器上进行连接Github测试</strong><br>问题描述:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ssh</span> -T git@github.com</span><br><span class=\"line\">Warning: Permanently added the RSA host key <span class=\"keyword\">for</span> IP address <span class=\"string\">'13.250.177.223'</span> to the list of known hosts.</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">Permissions 0777 <span class=\"keyword\">for</span> <span class=\"string\">'/root/.ssh/id_rsa'</span> are too open.</span><br><span class=\"line\">It is required that your private key files are NOT accessible by others.</span><br><span class=\"line\">This private key will be ignored.</span><br><span class=\"line\">Load key <span class=\"string\">\"/root/.ssh/id_rsa\"</span>: bad permissions</span><br><span class=\"line\">Permission denied (publickey).</span><br></pre></td></tr></table></figure><br>原因:由于我们上传到服务器中的公钥和密钥的默认权限是644，权限较高所有的用户均可读取这在ssh中是不允许的；<br>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 600 *</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -e <span class=\"string\">\"yes\"</span> | ssh -T git@github.com</span><br><span class=\"line\">Hi WeiyiGeek! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>问题5.使用新密钥时执行 git clone 或者 push 时报<code>The authenticity of host &#39;github.com (192.30.255.112)&#39; can&#39;t be established.</code>解决方法。</strong></p>\n<p>问题描述:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host <span class=\"string\">'github.com (192.30.255.112)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? //输入yes，回车</span></span><br></pre></td></tr></table></figure><br>解决办法: 在随后的提示中输入yes则会在<code>~/.ssh/</code>目录下生成一个<code>known_hosts</code>文件, 或者将(rsa-兼容性较强)新密钥重新加入到Gitlab或者Github仓库中。</p>\n<p><br></p>\n<p><strong>问题6.执行git pull命令同步仓库时报<code>Your local changes to the following files would be overwritten by merge</code>错误</strong><br>问题描述:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: Your <span class=\"built_in\">local</span> changes to the following files would be overwritten by merge:</span><br><span class=\"line\">Please commit your changes or stash them before you merge.</span><br></pre></td></tr></table></figure><br>问题原因: 由于本地代码修改过与remote仓库中代码文件不一致, 导致不能强制更新本地修改。<br>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.使用remote仓库中的代码合并本地代码</span></span><br><span class=\"line\">$ git stash               <span class=\"comment\"># 暂存当前正在进行的工作。</span></span><br><span class=\"line\">$ git pull origin master  <span class=\"comment\"># 拉取服务器的代码</span></span><br><span class=\"line\">$ git stash pop           <span class=\"comment\"># 合并暂存的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.使用remote仓库中的代码覆盖本地代码</span></span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\">HEAD is now at 82aa31c baidu</span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\">From gitee.com:WeiyiGeek/weiyigeek</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\">Updating 82aa31c..e7a451c</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> index.html | 14 ++++++++------</span><br><span class=\"line\"> 1 file changed, 8 insertions(+), 6 deletions(-)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>问题7.执行git pull命令时报 <code>fatal: refusing to merge unrelated histories</code> 错误</strong><br>问题描述: 在本地创建的仓库与Github上的创建的仓库进行关联，当进行git pull时提醒<code>fatal: refusing to merge unrelated histories</code>。<br>问题原因: 上网查到原因是两个分支是两个不同的版本，具有不同的提交历史<br>解决办法: 允许不相关历史提并强制合并。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin master --allow-unrelated-histories</span><br><span class=\"line\">```   </span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">**问题8.执行git push命令时报 `Connection reset by 20.205.243.166 port 22` 错误**</span><br><span class=\"line\"></span><br><span class=\"line\">问题描述: 由于国内网络波动原因，有时需要进行代理访问。</span><br><span class=\"line\">```bash</span><br><span class=\"line\"><span class=\"comment\"># 错误1</span></span><br><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">ssh: connect to host github.com port 22: Connection timed out</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 错误2</span></span><br><span class=\"line\">$ git push -u origin main</span><br><span class=\"line\">kex_exchange_identification: <span class=\"built_in\">read</span>: Connection reset by peer</span><br><span class=\"line\">Connection reset by 20.205.243.166 port 22</span><br><span class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</span><br></pre></td></tr></table></figure><br>解决办法: ssh添加代理搞定的, 如果是 Windows 用户编辑 <code>~/.ssh/config</code> 文件，给文件加上以下内容，重启git bash, 温馨提示具体端口需要根据你的代理软件设置决定。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  ProxyCommand connect -H 127.0.0.1:6789 %h %p</span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[toc]","categories":[{"name":"版本控制","path":"api/categories/版本控制.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}