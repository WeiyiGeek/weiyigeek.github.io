{"title":"常见编程语言对字符编码一览表","slug":"解密编码/字符编码/常见编程语言对字符编码解码一览表","date":"2019-03-21T10:34:30.000Z","updated":"2023-01-31T02:29:10.470Z","url":"2019/3-21-503.html","path":"api/articles/2019/3-21-503.html.json","covers":["https://img.weiyigeek.top/2019/1/20191010221736.png","https://img.weiyigeek.top/2019/1/20191010222117.png","https://img.weiyigeek.top/2019/1/20191016220530.png","https://img.weiyigeek.top/2019/wiz1/20191011231220.png","https://img.weiyigeek.top/2019/wiz1/20191011231221.png","https://img.weiyigeek.top/2019/wiz1/20191011231222.png","https://img.weiyigeek.top/2019/wiz1/20191011231219.png","https://img.weiyigeek.top/2019/wiz1/20191011231215.png","https://img.weiyigeek.top/2019/wiz1/20191011231216.png","https://img.weiyigeek.top/2019/wiz1/20191011231218.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-编程语言编码函数\"><a href=\"#0x00-编程语言编码函数\" class=\"headerlink\" title=\"0x00 编程语言编码函数\"></a>0x00 编程语言编码函数</h4><h5 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h5><p>描述:主要对于 escape , encodeURI 与 encodeURIComponent 区别详解：<br>它们都是用来对URI （RFC-2396）字符串进行编码的全局函数，但是它们的处理方式和使用场景有所不同：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.保留字符（reserved characters）：这类字符是URI中的保留关键字符，它们用于分割URI中的各个部分。这些字符是：<span class=\"string\">\";\"</span> | <span class=\"string\">\"/\"</span> | <span class=\"string\">\"?\"</span> | <span class=\"string\">\":\"</span> | <span class=\"string\">\"@\"</span> | <span class=\"string\">\"&amp;\"</span> | <span class=\"string\">\"=\"</span> | <span class=\"string\">\"+\"</span> | <span class=\"string\">\"$\"</span> | <span class=\"string\">\",\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.Mark字符（mark characters）：这类字符在RFC-2396中特别定义，但是没有特别说明用途，可能是和别的RFC标准相关。 这些字符是：<span class=\"string\">\"-\"</span> | <span class=\"string\">\"_\"</span> | <span class=\"string\">\".\"</span> | <span class=\"string\">\"!\"</span> | <span class=\"string\">\"~\"</span> | <span class=\"string\">\"*\"</span> | <span class=\"string\">\"'\"</span> | <span class=\"string\">\"(\"</span> | <span class=\"string\">\")\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">3.基本字符（alphanum characters）：这类字符是URI中的主体部分，它包括所有的大写字母、小写字母和数字。</span><br><span class=\"line\"></span><br><span class=\"line\">escape不编码字符有69个：                *，+，-，.，/，@，_，0-9，a-z，A-Z</span><br><span class=\"line\">encodeURI不编码字符有82个：             !，<span class=\"comment\">#，$，&amp;，'，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z</span></span><br><span class=\"line\">encodeURIComponent不编码字符有71个：    !，<span class=\"string\">'，(，)，*，-，.，_，~，0-9，a-z，A-Z</span></span><br></pre></td></tr></table></figure><br>实际案例：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#Js编码函数</span></span><br><span class=\"line\">escape(url)</span><br><span class=\"line\"><span class=\"string\">\"https%3A//www.jb51.net/article/109025.htm%3Fname%3Dtest%26web%3Dosrf%3Cscript%3Ealert%28/1/%29%3C/script%3E\"</span></span><br><span class=\"line\">​</span><br><span class=\"line\">encodeURI(url)</span><br><span class=\"line\"><span class=\"string\">\"https://www.jb51.net/article/109025.htm?name=test&amp;web=osrf%3Cscript%3Ealert(/1/)%3C/script%3E\"</span></span><br><span class=\"line\">​</span><br><span class=\"line\">encodeURIComponent(url)</span><br><span class=\"line\"><span class=\"string\">\"https%3A%2F%2Fwww.jb51.net%2Farticle%2F109025.htm%3Fname%3Dtest%26web%3Dosrf%3Cscript%3Ealert(%2F1%2F)%3C%2Fscript%3E\"</span></span><br></pre></td></tr></table></figure></p>\n<p>基础示例2:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们看到 encodeURI 没有编码uri的保留字符 &amp; ，'中'被编码成了 %uFFFD%uFFFD,encodeURIComponent 就编码了保留字符&amp; </span></span><br><span class=\"line\">alert(encodeURIComponent(<span class=\"string\">\"A&amp;T Plastic\"</span>)); <span class=\"comment\">//A%26T%20Plastic</span></span><br><span class=\"line\">alert(escape(<span class=\"string\">\"A&amp;T Plastic\"</span>));  <span class=\"comment\">//A%26T%20Plastic</span></span><br><span class=\"line\">alert(encodeURI(<span class=\"string\">\"A&amp;T Plastic\"</span>));  <span class=\"comment\">//A&amp;T%20Plastic</span></span><br><span class=\"line\">alert(escape(<span class=\"string\">\"A&amp;T Plastic中\"</span>));  <span class=\"comment\">//A%26T%20Plastic%uFFFD%uFFFD</span></span><br></pre></td></tr></table></figure></p>\n<p>总结:编码方式的应用场景</p>\n<ul>\n<li>如果只是处理 get 提交时url地址中的乱码问题，可以使用 encodeURI 来编码整个url；</li>\n<li>如果参数中含有保留字符需要进行编码，应该使用 encodeURIComponent 来编码部分参数；</li>\n<li>如果使用encodeURIComponent来处理中文乱码，那么前端需要使用两次<code>encodeURIComponent(encodeURIComponent(&#39;你好&#39;))</code>，Java后端使用：<code>java.Net.URLDecoder.decode(param,&quot;UTF-8&quot;);</code></li>\n</ul>\n<p><br></p>\n<hr>\n\n<h4 id=\"0x01-编码与解码\"><a href=\"#0x01-编码与解码\" class=\"headerlink\" title=\"0x01 编码与解码\"></a>0x01 编码与解码</h4><h5 id=\"base64-32\"><a href=\"#base64-32\" class=\"headerlink\" title=\"base64/32\"></a>base64/32</h5><ol>\n<li><p>采用Linux中Shell进行base64/32编码和解码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 加解密（默认base64） </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">test</span>|base64 </span><br><span class=\"line\"><span class=\"built_in\">echo</span> dGVzdAo=|base64 -d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#32与64位base编码与解码是不同的：</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> 123456 | base32.exe</span><br><span class=\"line\">GEZDGNBVGYFA====</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> 123456 | base64.exe</span><br><span class=\"line\">MTIzNDU2Cg==</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#批量加密解密：</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#Base64 Encrpty/Decrpty</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> 3&lt;&gt;num.txt</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line&lt;&amp;3;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$line</span> | base64</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(cat 1.txt);<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | base64 -d 1&gt;&gt;te.txt 2&gt;/dev/null</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\"</span> &gt;&gt; te.txt</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20191010221736.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<p><br></p>\n</li>\n<li><p>采用Openssl命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#生成的随机数转换成为base64/32</span></span><br><span class=\"line\">openssl rand -base64 8 <span class=\"comment\">#长度8的倍数</span></span><br><span class=\"line\">+b7WUZwW7R4=</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20191010222117.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ol>\n<p><br></p>\n<h5 id=\"Hex-Dec-Bin\"><a href=\"#Hex-Dec-Bin\" class=\"headerlink\" title=\"Hex/Dec/Bin\"></a>Hex/Dec/Bin</h5><ol start=\"0\">\n<li>Shell实现<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#八进制转换为Ascll</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 60 61 62 63 64 65 66 67 70 71</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span> <span class=\"string\">\"Octal=<span class=\"variable\">$i</span>,Ascll=\\\\<span class=\"variable\">$i</span> \\n\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#十六进制转Ascll</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> 60 61 62 63 64 65 66 67 70 71</span><br><span class=\"line\">&gt; <span class=\"keyword\">do</span>         </span><br><span class=\"line\">&gt;      <span class=\"built_in\">printf</span> <span class=\"string\">\"hex=<span class=\"variable\">$i</span>,Ascll=\\x<span class=\"variable\">$i</span> \\n\"</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20191016220530.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n</li>\n</ol>\n<ol>\n<li>bc命令实现<br>描述：bc是Linux 在命令行下有个强大的计算器工具 <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@WeiGeek ~]<span class=\"comment\"># yum -y install bc   &lt;!--安装命令--&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231220.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"obase=输出进制数;ibase=输入进制数;输入的数字\"</span> | bc</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"obase=16;ibase=10;30\"</span> | bc   <span class=\"comment\">#将10进制的30转换成16进制-</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231221.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231222.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> = 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"usage:<span class=\"variable\">$&#123;0&#125;</span> outputbase inputbase jzvalue\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  oubase=<span class=\"variable\">$1</span></span><br><span class=\"line\">  inbase=<span class=\"variable\">$2</span></span><br><span class=\"line\">  value=<span class=\"variable\">$3</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"obase=<span class=\"variable\">$&#123;oubase&#125;</span>;ibase=<span class=\"variable\">$&#123;inbase&#125;</span>;<span class=\"variable\">$&#123;value&#125;</span>\"</span> | bc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">usage:obase.sh outputbase inputbase jzvalue</span><br><span class=\"line\"><span class=\"comment\">#sh obase.sh 16 10 225</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231219.png\" alt=\"\"></p>\n<p><br></p>\n<ol start=\"2\">\n<li>C语言itoa函数的进制转换：（注意不一定通用，在stdlib.h头文件中）</li>\n</ol>\n<p>同时可以换算其他进制比如7进制 32 进制，更改后面的进制数的十进制即可语法：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//itoa(input变量名, ouput变量名, 进制数);</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> dest[<span class=\"number\">10</span>];</span><br><span class=\"line\">itoa(src, dest, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"二进制 --&gt; %s\\n\"</span>, dest);</span><br></pre></td></tr></table></figure></p>\n<p>代码案例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">33</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter a number: \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;i);</span><br><span class=\"line\"></span><br><span class=\"line\">    itoa(i, buffer, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"decimal: %s\\n\"</span>, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    itoa(i, buffer, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"binary: %s\\n\"</span>, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    itoa(i, buffer, <span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"octal: %s\\n\"</span>, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    itoa(i, buffer, <span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hexadecimal: %s\\n\"</span>, buffer);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231215.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<ol start=\"3\">\n<li>printf函数进行标准进制转换<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"转换的进制为：\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"octal:%o\"</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"decimal:%u\"</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hexadecimal:%x\"</span>,n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231216.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n</li>\n</ol>\n<p>编写一个程序，用递归实现将一个十进制的正整数转换成二进制的形式显示<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/wiz1/20191011231218.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binary</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binary</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">  r = n % <span class=\"number\">2</span>;  <span class=\"comment\">//取余</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">          binary(n / <span class=\"number\">2</span>); <span class=\"comment\">//进行递归</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span> + r); <span class=\"comment\">// '0'=&gt;48 + 1 == '1' (归-精华之所在)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> number;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入一个正整数：\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lu\"</span>, &amp;number);</span><br><span class=\"line\">  binary(number);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","comments":true,"excerpt":"[TOC]","categories":[],"tags":[{"name":"字符编码","path":"api/tags/字符编码.json"}]}