{"title":"SSL与TLS协议原理与证书签名多种生成方式实践指南","slug":"基础知识/Web原理/Web协议/SSL-TLS/SSL与TLS协议原理与证书签名多种生成方式实践指南","date":"2019-10-21T02:34:30.000Z","updated":"2023-01-31T02:29:10.676Z","url":"2019/10-21-12.html","path":"api/articles/2019/10-21-12.html.json","covers":["https://img.weiyigeek.top/2021/5/20220120094056.png"],"content":"<p>[TOC]</p>\n<p>原文地址: SSL与TLS协议原理与证书签名多种生成方式实践指南 (<a href=\"https://mp.weixin.qq.com/s/g-X8UPNwIkuR_Qd2MDvVQw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/g-X8UPNwIkuR_Qd2MDvVQw</a>)</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>简单快速了解<code>HTTP、HTTPS、SSL、TLS</code>概念:</p>\n<ul>\n<li>HTTP 是一个网络协议，是专门用来传输 Web 内容，大部分网站都是通过 HTTP 协议来传输 Web 页面、以及 Web 页面上包含的各种东东（图片、CSS 样式、JS 脚本）。</li>\n<li>SSL 是Secure Sockets Layer的缩写，中文叫做“安全套接层”,它是在上世纪90年代中期，由网景公司设计的, 为了解决http在传输过程中内容会被偷窥（嗅探）和篡改。</li>\n<li>TLS 是 SSL的 标准化，SSL标准化之后的名称改为 TLS（是<code>Transport Layer Security</code>的缩写），中文叫做传输层安全协议。很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。</li>\n<li>HTTPS 协议，说白了就是“HTTP 协议”和“SSL/TLS 协议”的组合。你可以把 HTTPS 大致理解为——HTTP over SSL或HTTP over TLS。</li>\n</ul>\n<h3 id=\"CA-认证原理\"><a href=\"#CA-认证原理\" class=\"headerlink\" title=\"CA 认证原理\"></a>CA 认证原理</h3><p>描述: 通过下面介绍信的例子来介绍CA的原理（转载的）。</p>\n<p><strong>场景1.普通的介绍信</strong><br>想必大伙儿都听说过介绍信的例子吧？假设 A 公司的张三先生要到 B 公司去拜访，但是 B 公司的所有人都不认识他，他咋办捏？常用的办法是带公司开的一张介绍信，在信中说：兹有张三先生前往贵公司办理业务，请给予接洽……云云。然后在信上敲上A公司的公章。</p>\n<p>张三先生到了 B 公司后，把介绍信递给 B 公司的前台李四小姐。李小姐一看介绍信上有 A 公司的公章，而且 A 公司是经常和 B 公司有业务往来的，这位李小姐就相信张先生不是歹人了。</p>\n<p>这里，A公司就是CA证书</p>\n<p><strong>场景2.引入中介机构的介绍信</strong><br>好，回到刚才的话题。如果和 B 公司有业务往来的公司很多，每个公司的公章都不同，那前台就要懂得分辨各种公章，非常滴麻烦。所以，有某个中介公司 C，发现了这个商机。C公司专门开设了一项“代理公章”的业务。</p>\n<p>今后，A 公司的业务员去 B 公司，需要带2个介绍信：</p>\n<p>介绍信1：含有 C 公司的公章及 A 公司的公章。并且特地注明：C 公司信任 A 公司。</p>\n<p>介绍信2：仅含有 A 公司的公章，然后写上：兹有张三先生前往贵公司办理业务，请给予接洽……云云。</p>\n<p>某些不开窍的同学会问了，这样不是增加麻烦了吗？有啥好处捏？</p>\n<p>主要的好处在于，对于接待公司的前台，就不需要记住各个公司的公章分别是啥样子的；他/她只要记住中介公司 C 的公章即可。当他/她拿到两份介绍信之后，先对介绍信1的 C 公章，验明正身；确认无误之后，再比对介绍信1和介绍信2的两个 A 公章是否一致。如果是一样的，那就可以证明介绍信2是可以信任的了。</p>\n<h3 id=\"PKI-公钥基础设施\"><a href=\"#PKI-公钥基础设施\" class=\"headerlink\" title=\"PKI 公钥基础设施\"></a>PKI 公钥基础设施</h3><p>PKI借助数字证书和公钥加密技术提供可信任的网络身份。通常，证书就是一个包含如下身份信息的文件：</p>\n<p>证书所有组织的信息<br>公钥<br>证书颁发组织的信息<br>证书颁发组织授予的权限，如证书有效期、适用的主机名、用途等<br>使用证书颁发组织私钥创建的数字签名</p>\n<p>X.509证书包含三个文件：</p>\n<ul>\n<li>key 是服务器上的私钥文件：用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密;</li>\n<li>csr 是证书签名请求文件：用于提交给证书颁发机构（CA）对证书签名</li>\n<li>crt 是由证书颁发机构（CA）签名后的证书或者是开发者自签名的证书：包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息</li>\n</ul>\n<p>备注：在密码学中，X.509是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等。</p>\n<p>CA(Certification Authority)证书，指的是权威机构给我们颁发的证书。</p>\n<p>密钥就是用来加解密用的文件或者字符串。密钥在非对称加密的领域里，指的是私钥和公钥，他们总是成对出现，其主要作用是加密和解密。常用的加密强度是2048bit。</p>\n<p>RSA即非对称加密算法。非对称加密有两个不一样的密码，一个叫私钥，另一个叫公钥，用其中一个加密的数据只能用另一个密码解开，用自己的都解不了，也就是说用公钥加密的数据只能由私钥解开。</p>\n<p><strong>证书的编码格式</strong><br>PEM(Privacy Enhanced Mail)，通常用于数字证书认证机构（Certificate Authorities，CA），扩展名为.pem, .crt, .cer, 和 .key。内容为Base64编码的ASCII码文件，有类似的头尾标记服务器认证证书。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"-----BEGIN CERTIFICATE-----\"</span></span><br><span class=\"line\"><span class=\"string\">\"-----END CERTIFICATE-----\"</span></span><br></pre></td></tr></table></figure><br>中级认证证书和私钥都可以储存为PEM格式（认证证书其实就是公钥）。Apache 和 Nginx 等类似的服务器使用PEM格式证书。</p>\n<p>DER(Distinguished Encoding Rules)，与 PEM 不同之处在于其使用二进制而不是 Base64 编码的 ASCII。扩展名为.der，但也经常使用.cer用作扩展名，所有类型的认证证书和私钥都可以存储为 DER 格式。Java 使其典型使用平台。</p>\n<p><strong>证书签名请求 CSR</strong><br>CSR(Certificate Signing Request)，它是向 CA 机构申请数字 ××× 书时使用的请求文件。在生成请求文件前，我们需要准备一对对称密钥。私钥信息自己保存，请求中会附上公钥信息以及国家，城市，域名，Email 等信息，CSR 中还会附上签名信息。当我们准备好 CSR 文件后就可以提交给CA机构，等待他们给我们签名，签好名后我们会收到 crt 文件，即证书。</p>\n<p>注意：CSR 并不是证书。而是向权威证书颁发机构获得签名证书的申请。</p>\n<p>把 CSR 交给权威证书颁发机构,权威证书颁发机构对此进行签名,完成。保留好CSR,当权威证书颁发机构颁发的证书过期的时候,你还可以用同样的CSR来申请新的证书, Key 保持不变.</p>\n<p><strong>数字签名</strong><br>数字签名就是”非对称加密+摘要算法”，其目的不是为了加密，而是用来防止他人篡改数据。</p>\n<p>其核心思想是：比如A要给B发送数据，A先用摘要算法得到数据的指纹，然后用A的私钥加密指纹，加密后的指纹就是A的签名，B收到数据和A的签名后，也用同样的摘要算法计算指纹，然后用A公开的公钥解密签名，比较两个指纹，如果相同，说明数据没有被篡改，确实是A发过来的数据。假设C想改A发给B的数据来欺骗B，因为篡改数据后指纹会变，要想跟A的签名里面的指纹一致，就得改签名，但由于没有A的私钥，所以改不了，如果C用自己的私钥生成一个新的签名，B收到数据后用A的公钥根本就解不开。</p>\n<p>常用的摘要算法有MD5、SHA1、SHA256。</p>\n<p>使用私钥对需要传输的文本的摘要进行加密，得到的密文即被称为该次传输过程的签名。</p>\n<p><strong>数字证书和公钥</strong><br>数字证书则是由证书认证机构（CA）对证书申请者真实身份验证之后，用CA的根证书对申请人的一些基本信息以及申请人的公钥进行签名（相当于加盖发证书机 构的公章）后形成的一个数字文件。实际上，数字证书就是经过CA认证过的公钥，除了公钥，还有其他的信息，比如Email，国家，城市，域名等。</p>\n<hr>\n<h2 id=\"0x01-自签名SSL证书生成\"><a href=\"#0x01-自签名SSL证书生成\" class=\"headerlink\" title=\"0x01 自签名SSL证书生成\"></a>0x01 自签名SSL证书生成</h2><p>默认情况下，所有基于Linux和Unix的系统上都存在Openssl实用程序, 我们可以基于此创建自签名证书。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2021/5/20220120094056.png\" alt=\"WeiyiGeek.selfCertificate\" title=\"\" class=\"\">\n                <p>WeiyiGeek.selfCertificate</p>\n            </figure>\n<h3 id=\"1-在线-脚本-生成\"><a href=\"#1-在线-脚本-生成\" class=\"headerlink\" title=\"1.在线(脚本)生成\"></a>1.在线(脚本)生成</h3><p><strong>方式1.脚本生成即一键生成自签名SSL证书和私钥</strong><br>脚本地址: <a href=\"https://github.com/cookcodeblog/OneDayDevOps/blob/master/components/ssl/create_self_signed_cert.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/cookcodeblog/OneDayDevOps/blob/master/components/ssl/create_self_signed_cert.sh</a><br>Syntax:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./create_self_signed_cert.sh <span class=\"string\">\"/C=CN/ST=Chongqing/L=Chongqing/O=xdevops/OU=WeiyiGeek/CN=gitlab.WeiyiGeek.top\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"2-OpenSSL-生成\"><a href=\"#2-OpenSSL-生成\" class=\"headerlink\" title=\"2.OpenSSL 生成\"></a>2.OpenSSL 生成</h3><p><strong>(1) OpenSSL生成带有SubjectAltName的自签名SSL证书</strong><br>描述:适用于安装了OpenSSL的服务器或者Linux;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.验证OpenSSL版本</span></span><br><span class=\"line\">openssl version || apt install openssl -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.生成私钥(需输入4位以上密码)</span></span><br><span class=\"line\"><span class=\"comment\"># genra\t生成RSA私钥</span></span><br><span class=\"line\"><span class=\"comment\"># -des3\tdes3算法</span></span><br><span class=\"line\"><span class=\"comment\"># -out server.key 生成的私钥文件名</span></span><br><span class=\"line\"><span class=\"comment\"># 2048 私钥长度</span></span><br><span class=\"line\">openssl genrsa -des3 -out server.pass.key 2048</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.去除私钥中的密码</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：有密码的私钥是server.pass.key，没有密码的私钥是server.key</span></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> server.pass.key -out server.key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.生成CSR(证书签名请求)</span></span><br><span class=\"line\"><span class=\"comment\"># req 生成证书签名请求</span></span><br><span class=\"line\"><span class=\"comment\"># -new 新生成</span></span><br><span class=\"line\"><span class=\"comment\"># -key 私钥文件</span></span><br><span class=\"line\"><span class=\"comment\"># -out 生成的CSR文件</span></span><br><span class=\"line\"><span class=\"comment\"># -subj 生成CSR证书的参数</span></span><br><span class=\"line\"><span class=\"comment\"># -subj 参数说明如下：</span></span><br><span class=\"line\"><span class=\"comment\"># 字段\t字段含义\t示例</span></span><br><span class=\"line\"><span class=\"comment\"># /C=\tCountry 国家\tCN</span></span><br><span class=\"line\"><span class=\"comment\"># /ST=\tState or Province 省\tChongqing</span></span><br><span class=\"line\"><span class=\"comment\"># /L=\tLocation or City 城市\tGuangzhou</span></span><br><span class=\"line\"><span class=\"comment\"># /O=\tOrganization 组织或企业\tWeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># /OU=\tOrganization Unit 部门\tWeiyiGeek</span></span><br><span class=\"line\"><span class=\"comment\"># /CN=\tCommon Name 域名或IP\tgitlab.WeiyiGeek.top</span></span><br><span class=\"line\">openssl req -new -key server.key -out server.csr -subj <span class=\"string\">\"/C=CN/ST=Chongqing/L=Chongqing/O=xdevops/OU=WeiyiGeek/CN=gitlab.WeiyiGeek.top\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 另外一种方式使用OpenSSL生成带有SubjectAltName的自签名证书</span></span><br><span class=\"line\"><span class=\"comment\"># 首先新建一个配置文件 ssl.conf如下</span></span><br><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span> &gt; server.conf</span><br><span class=\"line\">[ req ]</span><br><span class=\"line\">default_bits       = 2048</span><br><span class=\"line\">distinguished_name = req_distinguished_name</span><br><span class=\"line\">req_extensions     = req_ext</span><br><span class=\"line\"></span><br><span class=\"line\">[ req_distinguished_name ]</span><br><span class=\"line\">countryName                 = Country Name (2 letter code)</span><br><span class=\"line\">countryName_default         = CN</span><br><span class=\"line\">stateOrProvinceName         = State or Province Name (full name)</span><br><span class=\"line\">stateOrProvinceName_default = ChongQing</span><br><span class=\"line\">localityName                = Locality Name (eg, city)</span><br><span class=\"line\">localityName_default        = ChongQing</span><br><span class=\"line\">organizationName            = Organization Name (eg, company)</span><br><span class=\"line\">organizationName_default    = weiyigeek</span><br><span class=\"line\">commonName                  = Common Name (e.g. server FQDN or YOUR name)</span><br><span class=\"line\">commonName_max              = 64</span><br><span class=\"line\">commonName_default          = hub.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\">[ req_ext ]</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1   = weiyigeek.top</span><br><span class=\"line\">DNS.2   = hub.weiyigeek.top</span><br><span class=\"line\">IP      = 10.10.107.201</span><br><span class=\"line\">EOF</span><br><span class=\"line\">openssl req -new -sha256 -out server.csr -key server.key -config server.conf</span><br><span class=\"line\"><span class=\"comment\"># 查看请求签发证书的内容</span></span><br><span class=\"line\"><span class=\"comment\"># openssl req -text -noout -in server.csr</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.生成自签名SSL证书 以及带有 SAN 的SSL证书 （有效期十年）</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> server.csr -signkey server.key -out gitla.bweiyigeek.top.crt</span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> server.csr -signkey server.key -out hub.weiyigeek.top.crt -extensions req_ext -extfile server.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.采用合并的方式获得pem格式证书</span></span><br><span class=\"line\">cat server.crt server.key &gt; server.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.证书内容查看</span></span><br><span class=\"line\">openssl x509 -text -noout -<span class=\"keyword\">in</span> hub.weiyigeek.top.crt</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>(2) 生成CA证书并签发子证书</strong></p>\n<p>步骤 01.生成CA根证书，首先我们需要准备一个CA配置文件.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span> &gt; ca.conf</span><br><span class=\"line\">[ req ]</span><br><span class=\"line\">default_bits       = 4096</span><br><span class=\"line\">distinguished_name = req_distinguished_name</span><br><span class=\"line\"></span><br><span class=\"line\">[ req_distinguished_name ]</span><br><span class=\"line\">countryName                 = Country Name (2 letter code)</span><br><span class=\"line\">countryName_default         = CN</span><br><span class=\"line\">stateOrProvinceName         = State or Province Name (full name)</span><br><span class=\"line\">stateOrProvinceName_default = ChongQing</span><br><span class=\"line\">localityName                = Locality Name (eg, city)</span><br><span class=\"line\">localityName_default        = ChongQing</span><br><span class=\"line\">organizationName            = Organization Name (eg, company)</span><br><span class=\"line\">organizationName_default    = weiyigeek</span><br><span class=\"line\">commonName                  = Common Name (e.g. server FQDN or YOUR name)</span><br><span class=\"line\">commonName_max              = 64</span><br><span class=\"line\">commonName_default          = ca.weiyigeek.top </span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure></p>\n<p>步骤 02.生成ca密钥(ca.key)，并生成ca证书签发请求得到(ca.csr)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out ca.key 4096</span><br><span class=\"line\">openssl req -new -sha256 -out ca.csr -key ca.key -config ca.conf  <span class=\"comment\"># 因为配置文件中已经有默认值了所以此处不用设置-subj参数</span></span><br></pre></td></tr></table></figure></p>\n<p>步骤 03.生成ca根证书有效期十年并得到ca.crt证书<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> ca.csr -signkey ca.key -out ca.crt</span><br></pre></td></tr></table></figure></p>\n<p>步骤 04.准备生成终端用户证书(子证书)，同样首先准备 server.conf 文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;<span class=\"string\">'EOF'</span> &gt; server.conf</span><br><span class=\"line\">[ req ]</span><br><span class=\"line\">default_bits       = 2048</span><br><span class=\"line\">distinguished_name = req_distinguished_name</span><br><span class=\"line\">req_extensions     = req_ext</span><br><span class=\"line\"></span><br><span class=\"line\">[ req_distinguished_name ]</span><br><span class=\"line\">countryName                 = Country Name (2 letter code)</span><br><span class=\"line\">countryName_default         = CN</span><br><span class=\"line\">stateOrProvinceName         = State or Province Name (full name)</span><br><span class=\"line\">stateOrProvinceName_default = ChongQing</span><br><span class=\"line\">localityName                = Locality Name (eg, city)</span><br><span class=\"line\">localityName_default        = ChongQing</span><br><span class=\"line\">organizationName            = Organization Name (eg, company)</span><br><span class=\"line\">organizationName_default    = weiyigeek</span><br><span class=\"line\">commonName                  = Common Name (e.g. server FQDN or YOUR name)</span><br><span class=\"line\">commonName_max              = 64</span><br><span class=\"line\">commonName_default          = www.weiyigeek.top</span><br><span class=\"line\"></span><br><span class=\"line\">[ req_ext ]</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\"></span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">DNS.1   = weiyigeek.top</span><br><span class=\"line\">DNS.2   = www.weiyigeek.top</span><br><span class=\"line\">IP      = 192.168.1.254</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure><br>温馨提示: Chrome 58以后不再使用CN校验地址（就是就是浏览器地址栏URL中的那个地址host）了而是使用SAN,所以此处需要指定subjectAltName。</p>\n<p>步骤 05.生成秘钥以及证书签发请求文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out server.key 2048</span><br><span class=\"line\">openssl req -new -sha256 -out server.csr -key server.key -config server.conf</span><br></pre></td></tr></table></figure></p>\n<p>步骤 06.利用CA证书、密钥进行签发终端用户证书(子证书).<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -days 3650 -CA ca.crt -CAkey ca.key -CAcreateserial -<span class=\"keyword\">in</span> server.csr -out server.crt  -extensions req_ext -extfile server.conf</span><br></pre></td></tr></table></figure></p>\n<p>在服务端配置SSL常规流程:</p>\n<ul>\n<li>1.声明开启HTTPS (SSL认证)</li>\n<li>2.声明侦听443端口（并确保已在防火墙上打开443端口）</li>\n<li>3.复制已签名的SSL证书和私钥到指定位置，并设置正确的文件权限</li>\n<li>4.配置已签名的SSL证书（.crt）的位置</li>\n<li>5.配置已签名的SSL证书私钥（.key）的位置</li>\n<li>6.配置将HTTP请求都重定向到HTTPS</li>\n</ul>\n<p>在浏览器中打开<code>https://&lt;domain_name&gt;</code>来访问。</p>\n<p>在Firefox浏览器中可以添加Security Exception来忽略HTTPS错误警告，Chrome浏览器可以尝试通过导入CA证书的方式来忽略HTTPS错误警告。<br>注意Chrome浏览器可能有导入CA证书后仍然无法访问的问题；</p>\n<p>总结</p>\n<ul>\n<li>1.自签名的SSL证书存在安全隐患，在生产环境上需要购买和使用经权威机构认证和办法的证书。</li>\n<li>2.不同浏览器对自签名SSL证书的检查和限制也有所区别。</li>\n</ul>\n<p>补充参考: <a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/auth/client-certs/README.md#creating-certificate-secrets\" target=\"_blank\" rel=\"noopener\">https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/auth/client-certs/README.md#creating-certificate-secrets</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TLS certificates</span><br><span class=\"line\"></span><br><span class=\"line\">Unless otherwise mentioned, the TLS secret used <span class=\"keyword\">in</span> examples is a 2048 bit RSA key/cert pair with an arbitrarily chosen hostname, created as follows</span><br><span class=\"line\"></span><br><span class=\"line\">$ openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj <span class=\"string\">\"/CN=nginxsvc/O=nginxsvc\"</span></span><br><span class=\"line\">Generating a 2048 bit RSA private key</span><br><span class=\"line\">................+++</span><br><span class=\"line\">................+++</span><br><span class=\"line\">writing new private key to <span class=\"string\">'tls.key'</span></span><br><span class=\"line\">-----</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl create secret tls tls-secret --key tls.key --cert tls.crt</span><br><span class=\"line\">secret <span class=\"string\">\"tls-secret\"</span> created</span><br><span class=\"line\"></span><br><span class=\"line\">Note: If using CA Authentication, described below, you will need to sign the server certificate with the CA.</span><br><span class=\"line\">Client Certificate Authentication</span><br><span class=\"line\"></span><br><span class=\"line\">CA Authentication also known as Mutual Authentication allows both the server and client to verify each others identity via a common CA.</span><br><span class=\"line\"></span><br><span class=\"line\">We have a CA Certificate <span class=\"built_in\">which</span> we obtain usually from a Certificate Authority and use that to sign both our server certificate and client certificate. Then every time we want to access our backend, we must pass the client certificate.</span><br><span class=\"line\"></span><br><span class=\"line\">These instructions are based on the following blog</span><br><span class=\"line\"></span><br><span class=\"line\">Generate the CA Key and Certificate:</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days 356 -nodes -subj <span class=\"string\">'/CN=My Cert Authority'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Generate the Server Key, and Certificate and Sign with the CA Certificate:</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj <span class=\"string\">'/CN=mydomain.com'</span></span><br><span class=\"line\">openssl x509 -req -sha256 -days 365 -<span class=\"keyword\">in</span> server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt</span><br><span class=\"line\"></span><br><span class=\"line\">Generate the Client Key, and Certificate and Sign with the CA Certificate:</span><br><span class=\"line\"></span><br><span class=\"line\">openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj <span class=\"string\">'/CN=My Client'</span></span><br><span class=\"line\">openssl x509 -req -sha256 -days 365 -<span class=\"keyword\">in</span> client.csr -CA ca.crt -CAkey ca.key -set_serial 02 -out client.crt</span><br><span class=\"line\"></span><br><span class=\"line\">Once this is complete you can <span class=\"built_in\">continue</span> to follow the instructions here</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-CFSSL-生成\"><a href=\"#3-CFSSL-生成\" class=\"headerlink\" title=\"3.CFSSL 生成\"></a>3.CFSSL 生成</h3><p>简单介绍: cfssl是CloudFlare开源的一款PKI/TLS工具。CFSSL 包含一个命令行工具和一个用于签名、验证并且捆绑TLS证书的HTTP API 服务, 使用Go语言编写。<br>项目地址：  <a href=\"https://github.com/cloudflare/cfssl\" target=\"_blank\" rel=\"noopener\">https://github.com/cloudflare/cfssl</a><br>下载地址：  <a href=\"https://pkg.cfssl.org/\" target=\"_blank\" rel=\"noopener\">https://pkg.cfssl.org/</a></p>\n<p><strong>CFSSL 组件包括:</strong></p>\n<ul>\n<li>用于生成自定义 TLS PKI 的工具</li>\n<li>cfssl程序，是cfssl的命令行工具</li>\n<li>multirootca程序是可以使用多个签名密钥的证书颁发机构服务器</li>\n<li>mkbundle程序用于构建证书池</li>\n<li>cfssljson程序，从cfssl和multirootca程序获取JSON输出，并将证书，密钥，CSR和bundle写入磁盘</li>\n</ul>\n<p><br/></p>\n<p><strong>cfssl 安装</strong><br>此处我们只安装cfssl工具、cfssljson工具和cfssl-certinfo工具。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cfssl 最新下载地址: https://github.com/cloudflare/cfssl/releases</span></span><br><span class=\"line\">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64 -o /usr/<span class=\"built_in\">local</span>/bin/cfssl</span><br><span class=\"line\">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64 -o /usr/<span class=\"built_in\">local</span>/bin/cfssljson</span><br><span class=\"line\">curl -L https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl-certinfo_1.6.1_linux_amd64 -o /usr/<span class=\"built_in\">local</span>/bin/cfssl-certinfo</span><br><span class=\"line\"><span class=\"comment\"># chmod +x /usr/local/bin/cfssl*</span></span><br></pre></td></tr></table></figure></p>\n<p>温馨提示:  如出现如下警告请注意你的cfssl版本,并将cfssl版本从v1.2更新到v1.6.1(最新版本)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2022/04/27 19:11:37 [WARNING] This certificate lacks a <span class=\"string\">\"hosts\"</span> field. This makes it unsuitable <span class=\"keyword\">for</span></span><br><span class=\"line\">websites. For more information see the Baseline Requirements <span class=\"keyword\">for</span> the Issuance and Management</span><br><span class=\"line\">of Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);</span><br><span class=\"line\">specifically, section 10.2.3 (<span class=\"string\">\"Information Requirements\"</span>).</span><br></pre></td></tr></table></figure></p>\n<p><strong>cfssl 常用子命令</strong><br>描述: cfssl用法参考地址(<a href=\"https://coreos.com/os/docs/latest/generate-self-signed-certificates.html\" target=\"_blank\" rel=\"noopener\">https://coreos.com/os/docs/latest/generate-self-signed-certificates.html</a>)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0) <span class=\"built_in\">print</span>-defaults: 打印默认配置，这个默认配置可以用作模板</span><br><span class=\"line\"></span><br><span class=\"line\">(1) gencert: 生成新的key(密钥)和签名证书.</span><br><span class=\"line\">-initca: 初始化新CA</span><br><span class=\"line\">-ca：指明ca的证书.</span><br><span class=\"line\">-ca-key：指明ca的私钥文件.</span><br><span class=\"line\">-config：指明请求证书的json文件.</span><br><span class=\"line\">-profile：与-config中的profile对应，是指根据config中的profile段来生成证书的相关信息.</span><br><span class=\"line\"></span><br><span class=\"line\">(2) certinfo: 输出给定证书的证书信息， 跟cfssl-certinfo 工具作用一样</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bundle: 创建包含客户端证书的证书包</span><br><span class=\"line\">genkey: 生成一个key(私钥)和CSR(证书签名请求)</span><br><span class=\"line\">scan: 扫描主机问题</span><br><span class=\"line\">revoke: 吊销证书</span><br><span class=\"line\">gencrl: 生成新的证书吊销列表</span><br><span class=\"line\">selfsign: 生成一个新的自签名密钥和 签名证书</span><br><span class=\"line\">serve: 启动一个HTTP API服务</span><br><span class=\"line\">ocspdump: 从cert db 中的所有 OCSP 响应中生成一系列连贯的 OCSP 响应，供 ocspserve 使用</span><br><span class=\"line\">ocspsign: 为给定的CA、Cert和状态签署OCSP响应。返回一个base64编码的OCSP响应</span><br><span class=\"line\">info: 获取有关远程签名者的信息</span><br><span class=\"line\">sign: 签名一个客户端证书，通过给定的CA和CA密钥，和主机名</span><br><span class=\"line\">ocsprefresh: 用所有已知未过期证书的新OCSP响应刷新ocsp_responses表。</span><br><span class=\"line\">ocspserve: 设置一个HTTP服务器，处理来自文件或直接来自数据库的OCSP请求（见RFC 5019）。</span><br></pre></td></tr></table></figure></p>\n<p><strong>cfssljson 常用子命令</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage of cfssljson:</span><br><span class=\"line\">-bare : 来自CFSSL的响应未包装在API标准响应中</span><br><span class=\"line\">-f string: JSON input (default <span class=\"string\">\"-\"</span>)</span><br><span class=\"line\">-stdout: 输出响应Response到终端中，而不是保存到文件。</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h2 id=\"0x03-cfssl-使用实践\"><a href=\"#0x03-cfssl-使用实践\" class=\"headerlink\" title=\"0x03 cfssl 使用实践\"></a>0x03 cfssl 使用实践</h2><p><strong>示例1.使用 CFSSL 创建 CA 认证步骤。</strong></p>\n<p>步骤 01.生成并配置证书生成策略.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.打印config模板文件从而进行修改, 其中有两个配置</span></span><br><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults config &gt; ca-config.json</span><br><span class=\"line\">vim ca-config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"signing\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"default\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"8760h\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"profiles\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"usages\"</span>: [</span><br><span class=\"line\">              <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">\"harbor\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">\"expiry\"</span>: <span class=\"string\">\"87600h\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"usages\"</span>: [</span><br><span class=\"line\">              <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 注意: 该策略文件，有一个default默认的配置和一个profiles，其中profiles可以设置多个profile，例如此处的kubernetes和harbor配置</span></span><br><span class=\"line\"><span class=\"comment\"># 重点参数解析</span></span><br><span class=\"line\">default 默认策略，指定了证书的默认有效期是一年(8760h)</span><br><span class=\"line\">profile 自定义策略配置</span><br><span class=\"line\">  * kubernetes：表示该配置(profile)的用途是为kubernetes生成证书及相关的校验工作</span><br><span class=\"line\">  * signing：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 CA=TRUE</span><br><span class=\"line\">  * server auth：表示可以该CA 对 server 提供的证书进行验证</span><br><span class=\"line\">  * client auth：表示可以用该 CA 对 client 提供的证书进行验证</span><br><span class=\"line\">  * expiry：也表示过期时间，如果不写以default中的为准</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 02.CA证书签名请求配置文件 ca-csr.json 生成与设置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.首先打印csr模板文件输出到ca-csr.json，并进行修改</span></span><br><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults csr &gt; ca-csr.json</span><br><span class=\"line\">vim ca-csr.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"O\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"weiyigeek.top\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.关键参数介绍:</span></span><br><span class=\"line\">CN: Common Name，浏览器使用该字段验证网站是否合法，一般写的是域名，非常重要。浏览器使用该字段验证网站是否合法</span><br><span class=\"line\">key：生成证书的算法</span><br><span class=\"line\">hosts：表示哪些主机名(域名)或者IP可以使用此csr申请的证书，为空或者<span class=\"string\">\"\"</span>表示所有的都可以使用(本例中没有`<span class=\"string\">\"hosts\"</span>: [<span class=\"string\">\"\"</span>]`字段)</span><br><span class=\"line\">names：常见属性设置</span><br><span class=\"line\">  * C: Country， 国家</span><br><span class=\"line\">  * ST: State，州或者是省份</span><br><span class=\"line\">  * L: Locality Name，地区，城市</span><br><span class=\"line\">  * O: Organization Name，组织名称，公司名称(在k8s中常用于指定Group，进行RBAC绑定)</span><br><span class=\"line\">  * OU: Organization Unit Name，组织单位名称，公司部门</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>步骤 03.生成CA证书和私钥(<code>root根证书和私钥</code>)<br>注意: 运行认证中心需要一个 CA 证书和相应的 CA 私钥, 任何知道私钥的人都可以充当CA来颁发证书, 因此私钥的保护至关重要。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.利用CA证书签名请求配置文件 ca-csr.json ，生成CA证书和CA私钥和CSR(证书签名请求):</span></span><br><span class=\"line\"><span class=\"comment\"># cfssl gencert -initca -hostname weiyigeek.top csr.json | cfssljson -bare ca</span></span><br><span class=\"line\">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:40 [INFO] generating a new CA key and certificate from CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:40 [INFO] generate received request</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:40 [INFO] received CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:40 [INFO] generating key: rsa-2048</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:41 [INFO] encoded CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/17 22:02:41 [INFO] signed certificate with serial number 581660836920751122545368670593588896183219270559</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.生成的CA证书、私钥、以及签名请求证书，后续将用于交叉签名或重新签名。</span></span><br><span class=\"line\">/tmp/pki$ ls</span><br><span class=\"line\">ca-config.json  ca.csr(签名请求证书)  ca-csr.json  ca-key.pem(CA私钥) ca.pem (CA证书)</span><br></pre></td></tr></table></figure></p>\n<p>步骤 04.利用certinfo子命令查看证书签名请求信息、证书信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看cert(证书信息):</span></span><br><span class=\"line\">cfssl certinfo -cert ca.pem</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"subject\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"common_name\"</span>: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"organization\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"organizational_unit\"</span>: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"locality\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"province\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek.top\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"issuer\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"common_name\"</span>: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"country\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"organization\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"organizational_unit\"</span>: <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"locality\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"province\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek.top\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"weiyigeek.top\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"serial_number\"</span>: <span class=\"string\">\"581660836920751122545368670593588896183219270559\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"not_before\"</span>: <span class=\"string\">\"2022-01-17T13:58:00Z\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"not_after\"</span>: <span class=\"string\">\"2027-01-16T13:58:00Z\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"sigalg\"</span>: <span class=\"string\">\"SHA256WithRSA\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"authority_key_id\"</span>: <span class=\"string\">\"6A:EC:E5:BA:36:AF:D2:2A:2:35:B3:90:D3:31:7:A7:91:9D:E1:90\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"subject_key_id\"</span>: <span class=\"string\">\"6A:EC:E5:BA:36:AF:D2:2A:2:35:B3:90:D3:31:7:A7:91:9D:E1:90\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"pem\"</span>: <span class=\"string\">\"-----BEGIN CERTIFICATE-----\\n*****证书内容base64编码****\\n-----END CERTIFICATE-----\\n\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看CSR(证书签名请求)信息：</span></span><br><span class=\"line\">cfssl certinfo -csr ca.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者利用 openssl x509 命令查看证书相关信息。</span></span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> ca.pem -text -noout</span><br><span class=\"line\">  <span class=\"comment\"># Certificate:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Data:</span></span><br><span class=\"line\">  <span class=\"comment\">#       Version: 3 (0x2)</span></span><br><span class=\"line\">  <span class=\"comment\">#       Serial Number:</span></span><br><span class=\"line\">  <span class=\"comment\">#           65:e2:92:f1:bc:bd:86:f8:41:c5:ad:f1:cc:aa:46:b2:9f:c2:33:9f</span></span><br><span class=\"line\">  <span class=\"comment\">#       Signature Algorithm: sha256WithRSAEncryption</span></span><br><span class=\"line\">  <span class=\"comment\">#       Issuer: C = CN, ST = ChongQing, L = ChongQing, O = weiyigeek, OU = weiyigeek.top, CN = weiyigeek.top</span></span><br><span class=\"line\">  <span class=\"comment\">#       Validity</span></span><br><span class=\"line\">  <span class=\"comment\">#           Not Before: Jan 17 13:58:00 2022 GMT</span></span><br><span class=\"line\">  <span class=\"comment\">#           Not After : Jan 16 13:58:00 2027 GMT</span></span><br><span class=\"line\">  <span class=\"comment\">#       Subject: C = CN, ST = ChongQing, L = ChongQing, O = weiyigeek, OU = weiyigeek.top, CN = weiyigeek.top</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>示例2.利用CA认证中心证书签发 Kubernetes 集群apiserver认证使用的证书。</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.创建 kubernetes-csr.json 证书配置请求文件。</span></span><br><span class=\"line\">tee kubernetes-csr.json &lt;&lt; <span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"hosts\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"localhost\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"192.168.12.128\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"192.168.12.126\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"192.168.12.127\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.99.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster.local\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"*.kubernetes.master\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.利用 ca-config.json配置中kubernetes模板, 生成 Kubernetes 证书和私钥。</span></span><br><span class=\"line\"><span class=\"comment\"># -config   : 引用的是模板中的默认配置文件，</span></span><br><span class=\"line\"><span class=\"comment\"># -profiles : 是指定特定的使用场景，比如config.json中的kubernetes区域</span></span><br><span class=\"line\">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br><span class=\"line\">  2022/01/18 11:23:02 [INFO] generate received request</span><br><span class=\"line\">  2022/01/18 11:23:02 [INFO] received CSR</span><br><span class=\"line\">  2022/01/18 11:23:02 [INFO] generating key: rsa-2048</span><br><span class=\"line\">  2022/01/18 11:23:02 [INFO] encoded CSR</span><br><span class=\"line\">  2022/01/18 11:23:02 [INFO] signed certificate with serial number 146326072922083487956554573890123805193577034490</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.查看生成的证书与密钥</span></span><br><span class=\"line\">$ ls kubernetes*</span><br><span class=\"line\">  kubernetes.csr  kubernetes-csr.json  kubernetes-key.pem  kubernetes.pem</span><br><span class=\"line\"></span><br><span class=\"line\">$ openssl x509 -<span class=\"keyword\">in</span> kubernetes.pem -noout -text</span><br><span class=\"line\">  Certificate:</span><br><span class=\"line\">      Data:</span><br><span class=\"line\">          Version: 3 (0x2)</span><br><span class=\"line\">          Serial Number:</span><br><span class=\"line\">              19:a1:7c:f0:3e:ab:16:45:9a:c1:77:de:a4:b7:3e:d0:b0:49:f2:fa</span><br><span class=\"line\">          Signature Algorithm: sha256WithRSAEncryption</span><br><span class=\"line\">          Issuer: C = CN, ST = ChongQing, L = ChongQing, O = weiyigeek, OU = weiyigeek.top, CN = weiyigeek.top</span><br><span class=\"line\">          Validity</span><br><span class=\"line\">              Not Before: Jan 18 03:18:00 2022 GMT</span><br><span class=\"line\">              Not After : Jan 16 03:18:00 2032 GMT  <span class=\"comment\"># 证书有效期十年。</span></span><br><span class=\"line\">          Subject: C = CN, ST = ChongQing, L = ChongQing, O = k8s, OU = System, CN = kubernetes</span><br><span class=\"line\">          Subject Public Key Info:</span><br><span class=\"line\">              Public Key Algorithm: rsaEncryption</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.创建 admin 证书请求文件admin-csr.json并生成相应的证书、私钥文件。</span></span><br><span class=\"line\">$ tee admin-csr.json &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"O\"</span>: <span class=\"string\">\"system:masters\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.同样使用相同方法生成kube-proxy证书,创建 kube-proxy-csr.json 证书配置文件。</span></span><br><span class=\"line\">$ tee kube-proxy-csr.json &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"system:kube-proxy\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy.json | cfssljson -bare kube-proxy</span><br><span class=\"line\"><span class=\"comment\"># 此时生成了 kube-proxy-key.pem 和 kube-proxy.pem。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键参数说明:</span></span><br><span class=\"line\">- hosts: 包含的是授权范围，不在此范围的的节点(Master/Node)或者服务使用此证书就会报证书不匹配错误, 其中10.99.0.1是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP。</span><br><span class=\"line\">- apiserver: 该证书属于 apiserver 加了一个 *.kubernetes.master域名以便内部私有 DNS 解析使用，于很多人问过 kubernetes 这几个能不能删掉，答案是不可以的；因为当集群创建好后，default namespace 下会创建一个叫 kubenretes 的svc，有一些组件会直接连接这个 svc 来跟 api 通信的，证书如果不包含可能会出现无法连接的情况。</span><br><span class=\"line\">- 注意组织名称： 例如 admin证书 是用于将来生成管理员用的kubeconfig 配置文件用的，现在我们一般建议使用 RBAC 来对kubernetes 进行角色权限控制， 所以kubernetes 将证书中的CN字段作为User， O 字段作为 Group。</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>示例3.利用CA认证中心证书签发 harbor 仓库证书</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.准备一份harbor证书配置请求文件。</span></span><br><span class=\"line\">tee harbor-csr.json &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"CN\"</span>: <span class=\"string\">\"harbor.weiyigeek.top\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"hosts\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"192.168.12.108\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"harbor.weiyigeek.top\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"size\"</span>: 2048</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"names\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"string\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"L\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"ST\"</span>: <span class=\"string\">\"ChongQing\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"O\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"OU\"</span>: <span class=\"string\">\"weiyigeek.top\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.利用CA签发 harbor 仓库使用的服务端证书。</span></span><br><span class=\"line\">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=harbor harbor-csr.json | cfssljson -bare harbor</span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/18 14:20:23 [INFO] generate received request</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/18 14:20:23 [INFO] received CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/18 14:20:23 [INFO] generating key: rsa-2048</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/18 14:20:23 [INFO] encoded CSR</span></span><br><span class=\"line\">  <span class=\"comment\"># 2022/01/18 14:20:23 [INFO] signed certificate with serial number 633490963371902710405149722919884501418274711654</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.生成的对应的证书签名请求文件(harbor.csr)、证书文件、证书私钥。</span></span><br><span class=\"line\">$ ls harbor*</span><br><span class=\"line\">harbor.csr  harbor-csr.json  harbor-key.pem  harbor.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.证书相关信息查询</span></span><br><span class=\"line\"><span class=\"comment\"># 证书信息查看</span></span><br><span class=\"line\">cfssl certinfo -cert harbor.pem</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 证书签名请求文件查看</span></span><br><span class=\"line\">cfssl certinfo -csr harbor.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在线请求指定域名配置的证书相关信息。</span></span><br><span class=\"line\">$ cfssl certinfo -domain harbor.weiyigeek.top</span><br></pre></td></tr></table></figure></p>\n<p>至此cfssl使用实践完毕!</p>\n","comments":true,"excerpt":"[TOC]原文地址: SSL与TLS协议原理与证书签名多种生成方式实践指南 (https://mp.weixin.qq.com/s/g-X8UPNwIkuR_Qd2MDvVQw)","categories":[{"name":"证书颁发","path":"api/categories/证书颁发.json"}],"tags":[{"name":"SSL-TLS","path":"api/tags/SSL-TLS.json"},{"name":"HTTPS","path":"api/tags/HTTPS.json"}]}