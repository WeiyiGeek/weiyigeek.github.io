{"title":"Java正则表达式","slug":"编程世界/RegularExpression/Java正则表达式","date":"2019-08-22T07:36:20.000Z","updated":"2020-10-10T02:37:48.788Z","url":"2019/8-22-348.html","path":"api/articles/2019/8-22-348.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-快速入门\"><a href=\"#0x00-快速入门\" class=\"headerlink\" title=\"0x00 快速入门\"></a>0x00 快速入门</h4><h5 id=\"目录一览\"><a href=\"#目录一览\" class=\"headerlink\" title=\"目录一览\"></a>目录一览</h5><ul>\n<li>正则表达式的概述和简单使用</li>\n<li>正则表达式的分类及演示</li>\n<li>正则表达式的分割功能及案例</li>\n<li>正则表达式的替换功能</li>\n<li>正则表达式的分组功能</li>\n<li>Pattern和Matcher的概述</li>\n<li>正则表达式的获取功能</li>\n</ul>\n<p><br></p>\n<h5 id=\"概述和正则元字符\"><a href=\"#概述和正则元字符\" class=\"headerlink\" title=\"概述和正则元字符\"></a>概述和正则元字符</h5><p>描述:正则表达式 是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。</p>\n<ul>\n<li>作用:比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的</li>\n</ul>\n<p>正则元字符:<br>0:特殊字符<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x 字符x</span><br><span class=\"line\">\\\\ 转义\\</span><br><span class=\"line\">\\0n The character with octal value 0n (0 &lt;= n &lt;= 7) </span><br><span class=\"line\">\\0nn The character with octal value 0nn (0 &lt;= n &lt;= 7) </span><br><span class=\"line\">\\0mnn The character with octal value 0mnn (0 &lt;= m &lt;= 3, 0 &lt;= n &lt;= 7) </span><br><span class=\"line\">\\xhh 十六进制表示 value 0xhh </span><br><span class=\"line\">\\uhhhh The character with hexadecimal value 0xhhhh </span><br><span class=\"line\">\\x &#123;h...h&#125;十六进制值0xh…h的字符(Character.MIN_CODE_POINT  &lt;= 0xh...h &lt;=  Character.MAX_CODE_POINT) </span><br><span class=\"line\">\\t tab键字符 (<span class=\"string\">'\\u0009'</span>) </span><br><span class=\"line\">\\n 换行字符 (<span class=\"string\">'\\u000A'</span>) </span><br><span class=\"line\">\\r 回车字符 (<span class=\"string\">'\\u000D'</span>) </span><br><span class=\"line\">\\f 换页符(<span class=\"string\">'\\u000C'</span>) </span><br><span class=\"line\">\\a 警铃字符 (<span class=\"string\">'\\u0007'</span>) </span><br><span class=\"line\">\\e 转义字符 (<span class=\"string\">'\\u001B'</span>) </span><br><span class=\"line\">\\cx 与x对应的控制字符,如\\cM (Ctrl+M)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Linebreak匹配器</span></span><br><span class=\"line\">\\R 任何Unicode换行序列,都相当于\\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029]</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>A:字符类<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#字符类运算符的优先级如下，从最高到最低：</span></span><br><span class=\"line\">1.Literal escape     \t\\x</span><br><span class=\"line\">2.Grouping \t[...]</span><br><span class=\"line\">3.Range \ta-z</span><br><span class=\"line\">4.Union \t[a<span class=\"_\">-e</span>][i-u]</span><br><span class=\"line\">5.Intersection \t[a-z&amp;&amp;[aeiou]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#字符类一览表</span></span><br><span class=\"line\">* [abc] | [0-9]  <span class=\"comment\">#a、b 或 c（简单类）或者0到9的字符都包括</span></span><br><span class=\"line\">* [^abc]  <span class=\"comment\">#任何字符，除了 a、b 或 c（否定） </span></span><br><span class=\"line\">* [a-zA-Z] <span class=\"comment\">#a到 z 或 A到 Z，两头的字母包括在内（范围） </span></span><br><span class=\"line\">* [a<span class=\"_\">-d</span>[m-p]]    <span class=\"comment\">#并集 [a-dm-p] (union) </span></span><br><span class=\"line\">* [a-z&amp;&amp;[def]] <span class=\"comment\">#交集</span></span><br><span class=\"line\">* [a-z&amp;&amp;[^bc]] <span class=\"comment\">#补集 [a-z&amp;&amp;[^m-p]];</span></span><br></pre></td></tr></table></figure><br><br></p>\n<p>B:预定义字符类<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* . 任何字符。</span><br><span class=\"line\">* \\d 数字：[0-9]</span><br><span class=\"line\">* \\D 非数字: [^0-9]</span><br><span class=\"line\">* \\w 单词字符：[a-zA-Z_0-9]</span><br><span class=\"line\">* \\W 非单词字符：[^\\w]</span><br><span class=\"line\">* \\h 水平空白字符: [\\t\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000] </span><br><span class=\"line\">* \\H 非水平空白字符:: [^\\h] </span><br><span class=\"line\">* \\v 垂直空格字符:: [\\n\\x0B\\f\\r\\x85\\u2028\\u2029]  </span><br><span class=\"line\">* \\V 非垂直空格字符:: [^\\v] </span><br><span class=\"line\">* \\s 空格字符: [ \\t\\n\\x0B\\f\\r] </span><br><span class=\"line\">* \\S 非空格字符: [^\\s]</span><br></pre></td></tr></table></figure><br><br></p>\n<p>C:Greedy 数量词<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#贪婪量词</span></span><br><span class=\"line\">* X? 一次或一次也没有</span><br><span class=\"line\">* X* 零次或多次</span><br><span class=\"line\">* X+ 一次或多次</span><br><span class=\"line\">* X&#123;n&#125; X恰好 n 次 </span><br><span class=\"line\">* X&#123;n,&#125; X至少 n 次 </span><br><span class=\"line\">* X&#123;n,m&#125; X至少 n 次</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#非贪婪量词</span></span><br><span class=\"line\">X?? X, once or not at all </span><br><span class=\"line\">X*? X, zero or more <span class=\"built_in\">times</span> </span><br><span class=\"line\">X+? X, one or more <span class=\"built_in\">times</span> </span><br><span class=\"line\">X&#123;n&#125;? X,匹配n次或者0次</span><br><span class=\"line\">X&#123;n,&#125;? X,至少n次</span><br><span class=\"line\">X&#123;n,m&#125;? X,至少n次，但不超过m次</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#占有欲强的量词</span></span><br><span class=\"line\">X?+ X, once or not at all </span><br><span class=\"line\">X*+ X, zero or more <span class=\"built_in\">times</span> </span><br><span class=\"line\">X++ X, one or more <span class=\"built_in\">times</span> </span><br><span class=\"line\">X&#123;n&#125;+ X, exactly n <span class=\"built_in\">times</span> </span><br><span class=\"line\">X&#123;n,&#125;+ X, at least n <span class=\"built_in\">times</span> </span><br><span class=\"line\">X&#123;n,m&#125;+ X, at least n but not more than m <span class=\"built_in\">times</span></span><br></pre></td></tr></table></figure></p>\n<p>D:定界匹配符号(Boundary matchers )<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^ 行开头</span><br><span class=\"line\">$ 行结尾</span><br><span class=\"line\">\\b 单词边界</span><br><span class=\"line\">\\B 非单词边界</span><br><span class=\"line\">\\A 输入的开始 (NEW)</span><br><span class=\"line\">\\G 上次匹配结束 (NEW)</span><br><span class=\"line\">\\Z 输入结束符但对于最终终止符，如果有的话  (NEW)</span><br><span class=\"line\">\\z 输入结束 (NEW)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Quotation </span></span><br><span class=\"line\">\\ Nothing, but quotes the following character </span><br><span class=\"line\">\\Q 只是以\\E结尾的引用结束</span><br><span class=\"line\">\\E 只是以\\Q开头的引用结束</span><br></pre></td></tr></table></figure></p>\n<p>E:逻辑操作符(logical Operators)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XY  X后面跟着Y</span><br><span class=\"line\">X|Y X或者Y</span><br><span class=\"line\">(X) X捕获组</span><br></pre></td></tr></table></figure></p>\n<p>F:元组与捕获组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#特殊的结构 Special constructs (named-capturing and non-capturing) </span></span><br><span class=\"line\">(X)       <span class=\"comment\">#常规元组捕获</span></span><br><span class=\"line\">(?&lt;name&gt;X) <span class=\"comment\">#X,名称元组捕获named-capturing group </span></span><br><span class=\"line\">(?:X) X, as a non-capturing group  <span class=\"comment\">#非补货组</span></span><br><span class=\"line\">(?idmsuxU-idmsuxU)  Nothing, but turns match flags i d m s u x U on - off </span><br><span class=\"line\">(?idmsux-idmsux:X)   X, as a non-capturing group with the given flags i d m s u x on - off </span><br><span class=\"line\"></span><br><span class=\"line\">(?=X) X, via zero-width positive lookahead  <span class=\"comment\">#肯定型顺序环视 (从左到右) 当前位置的右边</span></span><br><span class=\"line\">(?!X) X, via zero-width negative lookahead  <span class=\"comment\">#否定型顺序环视</span></span><br><span class=\"line\"></span><br><span class=\"line\">(?&lt;=X) X, via zero-width positive lookbehind  <span class=\"comment\">#肯定型逆序环视 (从右到左) 当前位置的左边</span></span><br><span class=\"line\">(?&lt;!X) X, via zero-width negative lookbehind  <span class=\"comment\">#否定型逆序环视</span></span><br><span class=\"line\"></span><br><span class=\"line\">(?&gt;X) X, as an independent, non-capturing group </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Back references(向后引用)</span></span><br><span class=\"line\">\\n 无论第n个捕获组匹配什么,如([a-z]) 可以采用\\1调用元组捕获的值;</span><br><span class=\"line\">\\k&lt;name&gt; 无论名称捕获组“name”匹配什么;</span><br></pre></td></tr></table></figure></p>\n<p>G:其他扩展元字符字符POSIX字符类<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#POSIX character classes (US-ASCII only) </span></span><br><span class=\"line\">\\p&#123;Lower&#125; A lower-case alphabetic character: [a-z] </span><br><span class=\"line\">\\p&#123;Upper&#125; An upper-case alphabetic character:[A-Z] </span><br><span class=\"line\">\\p&#123;ASCII&#125; All ASCII:[\\x00-\\x7F] </span><br><span class=\"line\">\\p&#123;Alpha&#125; An alphabetic character:[\\p&#123;Lower&#125;\\p&#123;Upper&#125;] </span><br><span class=\"line\">\\p&#123;Digit&#125; A decimal digit: [0-9] </span><br><span class=\"line\">\\p&#123;Alnum&#125; An alphanumeric character:[\\p&#123;Alpha&#125;\\p&#123;Digit&#125;] </span><br><span class=\"line\">\\p&#123;Punct&#125; Punctuation: One of !<span class=\"string\">\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Graph&#125; A visible character: [\\p&#123;Alnum&#125;\\p&#123;Punct&#125;] </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Print&#125; A printable character: [\\p&#123;Graph&#125;\\x20] </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Blank&#125; A space or a tab: [ \\t] </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Cntrl&#125; A control character: [\\x00-\\x1F\\x7F] </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;XDigit&#125; A hexadecimal digit: [0-9a-fA-F] </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Space&#125; A whitespace character: [ \\t\\n\\x0B\\f\\r] </span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">#java.lang.Character classes (simple java character type) </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;javaLowerCase&#125; Equivalent to java.lang.Character.isLowerCase() </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;javaUpperCase&#125; Equivalent to java.lang.Character.isUpperCase() </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;javaWhitespace&#125; Equivalent to java.lang.Character.isWhitespace() </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;javaMirrored&#125; Equivalent to java.lang.Character.isMirrored() </span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">#Classes for Unicode scripts, blocks, categories and binary properties </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;IsLatin&#125; A Latin script character (script) </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;InGreek&#125; A character in the Greek block (block) </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Lu&#125; An uppercase letter (category) </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;IsAlphabetic&#125; An alphabetic character (binary property) </span></span><br><span class=\"line\"><span class=\"string\">\\p&#123;Sc&#125; A currency symbol </span></span><br><span class=\"line\"><span class=\"string\">\\P&#123;InGreek&#125; Any character except one in the Greek block (negation) </span></span><br><span class=\"line\"><span class=\"string\">[\\p&#123;L&#125;&amp;&amp;[^\\p&#123;Lu&#125;]] Any letter except an uppercase letter (subtraction)</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"java类正则方法\"><a href=\"#java类正则方法\" class=\"headerlink\" title=\"java类正则方法\"></a>java类正则方法</h5><p><strong>Pattern类:</strong><br>描述:必须首先将正则表达式（指定为字符串）编译为此类的实例。 然后将所得的图案可以被用来创建一个Matcher对象可以匹配任意character sequences针对正则表达式。 执行匹配的所有状态都驻留在匹配器中，所以许多匹配者可以共享相同的模式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.util.regex.Pattern </span><br><span class=\"line\"><span class=\"comment\">#类定义</span></span><br><span class=\"line\">public final class Pattern</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements Serializable</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#类方法</span></span><br><span class=\"line\">public static Pattern compile(String regex) <span class=\"comment\">#将给定的正则表达式编译成模式。</span></span><br><span class=\"line\"><span class=\"comment\">#参数：regex -要编译的表达 </span></span><br><span class=\"line\">CANON_EQ 使正则等价。  </span><br><span class=\"line\">CASE_INSENSITIVE 启用不区分大小写匹配。  </span><br><span class=\"line\">COMMENTS 允许空格和注释模式。  </span><br><span class=\"line\">DOTALL 使dotall模式。  </span><br><span class=\"line\">LITERAL 启用模式的文本解析。  </span><br><span class=\"line\">MULTILINE 使多行模式。  </span><br><span class=\"line\">UNICODE_CASE 使用Unicode的折盒。  </span><br><span class=\"line\">UNICODE_CHARACTER_CLASS 使用Unicode版本的预定义字符类别和POSIX字符类。  </span><br><span class=\"line\">UNIX_LINES 使UNIX线模式。  </span><br><span class=\"line\"></span><br><span class=\"line\">public static boolean matches(String regex,CharSequence input) <span class=\"comment\">#编译给定的正则表达式，并试图匹配给定的输入反对它。 </span></span><br><span class=\"line\"><span class=\"comment\"># Pattern.compile(regex).matcher(input).matches()  如果一个模式是要多次使用，编译它一次，并重用它将是更有效的比调用该方法，每一次。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public Matcher matcher(CharSequence input)  <span class=\"comment\">#创建一个匹配，将匹配给定的输入对该模式。</span></span><br></pre></td></tr></table></figure><br><br><br><strong>Matcher类:</strong><br>描述：执行匹配操作在一个 character sequence通过解释 Pattern发动机(匹配适配器)。<br>匹配器是通过调用模式的matcher方法从模式创建。一旦创建匹配器可用于执行匹配操作三种不同：</p>\n<ul>\n<li>1.匹配整个输入序列与模式的matches方法的尝试。</li>\n<li>2.匹配输入序列的lookingAt方法的尝试，在起步之初对模式。</li>\n<li>3.find方法扫描输入序列寻找匹配模式下的子序列。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#语法结构</span></span><br><span class=\"line\">public final class Matcher</span><br><span class=\"line\">extends Object</span><br><span class=\"line\">implements MatchResult</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#类常用方法</span></span><br><span class=\"line\">public boolean matches() <span class=\"comment\">#试图将整个区域与模式匹配。如果匹配成功则更多的信息可以通过start，end获得，并group方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public boolean find()  <span class=\"comment\">#试图找到匹配模式的输入序列中的下一个序列。匹配之后没有复位，在不匹配的第一个字符之前的比赛。如果匹配成功则更多的信息可以通过start，end获得，并group方法。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String group()  <span class=\"comment\">#返回由以前的匹配输入序列。对于一个输入序列的匹配M，表达m.group()和s.substring(m start(), m.end())是等价的。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String group(int group)  <span class=\"comment\">#返回被给定组以前的匹配操作在输入序列。 Capturing groups索引从左到右，在一开始。零组表示整个格局所以表达m.group(0)相当于m.group()。</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String group(String name)  <span class=\"comment\">#返回被给定的 named-capturing group之前匹配操作中的输入序列。在捕获组中设置了名称,向后引用的时候便可以直接调用该名称进行捕获调用 </span></span><br><span class=\"line\">groupCount</span><br><span class=\"line\"></span><br><span class=\"line\">public int groupCount() <span class=\"comment\">#返回捕获组在这匹配的模式数。 组零表示的是整个模式的约定。它不包括在这个计数中。</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p><strong>String类正则匹配/替换</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean matches(String regex)   <span class=\"comment\">#告诉是否这个字符串匹配给定 regular expression (这str.matches(正则表达式)产生完全相同的结果的表达形式的方法调用)</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String replaceFirst(String regex,String replacement) <span class=\"comment\">#代替这个字符串的替换，给 regular expression匹配第一个字符串。 (与Pattern.compile(regex).matcher(str).replaceFirst(repl)形式相同)</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String replaceAll(String regex,String replacement) <span class=\"comment\">#每个子串替换该字符串的给予更换，给 regular expression比赛。 (与Pattern.compile(regex).matcher(str).replaceAll(repl) 形式相同)</span></span><br><span class=\"line\"></span><br><span class=\"line\">public String[] split(String regex)  <span class=\"comment\">#将此字符串在给定的 regular expression比赛。 </span></span><br><span class=\"line\">public String[] split(String regex, int <span class=\"built_in\">limit</span>) <span class=\"comment\">#将此字符串在给定的 regular expression比赛，limit分割次数;</span></span><br></pre></td></tr></table></figure></p>\n<hr/>\n\n<h4 id=\"0x01-实际演示\"><a href=\"#0x01-实际演示\" class=\"headerlink\" title=\"0x01 实际演示\"></a>0x01 实际演示</h4><p>案例演示1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  * a:非正则表达式实现 </span></span><br><span class=\"line\"><span class=\"comment\">    * b:正则表达式实现</span></span><br><span class=\"line\"><span class=\"comment\">\t*    需求: 校验qq号码</span></span><br><span class=\"line\"><span class=\"comment\">    * 1:要求必须是5-15位数字</span></span><br><span class=\"line\"><span class=\"comment\">    * 2:0不能开头</span></span><br><span class=\"line\"><span class=\"comment\">    * 3:必须都是数字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.regex;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1_Regex</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.采用非正则表达式实现 param1 String</span></span><br><span class=\"line\">    String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"12345678\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"非正则验证匹配 :  \"</span>+notRegex(str));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2：正则方式String.matches()</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"正则匹配结果 : \"</span> + str.matches(<span class=\"string\">\"^[1-9]\\\\d&#123;4,14&#125;\"</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"正则匹配结果 : \"</span> + <span class=\"string\">\"01234579\"</span>.matches(<span class=\"string\">\"^[1-9]\\\\d&#123;4,14&#125;\"</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">notRegex</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.length() &gt; <span class=\"number\">4</span> &amp;&amp; str.length() &lt; <span class=\"number\">16</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!str.startsWith(<span class=\"string\">\"0\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] arr = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(arr[i] &gt; <span class=\"string\">'0'</span> &amp;&amp; arr[i] &lt; <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">          &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">非正则验证匹配 : <span class=\"literal\">true</span></span><br><span class=\"line\">正则匹配结果 : <span class=\"literal\">true</span></span><br><span class=\"line\">正则匹配结果 : <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>方法案例1:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例1.字符串分割采用正则表达式</span></span><br><span class=\"line\">strSpilt(<span class=\"string\">\"I.LOVE.JAVA\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">strSpilt</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">    String[] arr0 = str.split(<span class=\"string\">\"\\\\.\"</span>);  <span class=\"comment\">//关键点 1</span></span><br><span class=\"line\">    String[] arr1 = str.split(<span class=\"string\">\"[.]\"</span>);  <span class=\"comment\">//关键点 2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">        System.out.println(arr1[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"###########################\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果:</span></span><br><span class=\"line\">I</span><br><span class=\"line\">LOVE</span><br><span class=\"line\">JAVA</span><br><span class=\"line\"></span><br><span class=\"line\">strSpiltInteger(<span class=\"string\">\"91 48 75 76 82 10\"</span>); <span class=\"comment\">//字符串分割并且进行比较排序\t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">strSpiltInteger</span><span class=\"params\">(String st)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        *  分析：</span></span><br><span class=\"line\"><span class=\"comment\">        * 1.将字符串转换成字符串数组</span></span><br><span class=\"line\"><span class=\"comment\">        * 2.将字符串转换成为数字并且存储在一个等长度的int数组中</span></span><br><span class=\"line\"><span class=\"comment\">        * 3.排序</span></span><br><span class=\"line\"><span class=\"comment\">        * 4.将排序后的结构钢遍历并拼接成为一个字符串;</span></span><br><span class=\"line\"><span class=\"comment\">        * */</span></span><br><span class=\"line\">    String[] sArr = st.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] iArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[sArr.length]; <span class=\"comment\">//建立一个整形数组长度为字符串数组长度</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; iArr.length; i++) &#123;</span><br><span class=\"line\">        iArr[i] = Integer.valueOf(sArr[i]);  <span class=\"comment\">//将字符串转换成为数字</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Arrays.sort(iArr);</span><br><span class=\"line\">    </span><br><span class=\"line\">    StringBuilder res = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    res.append(<span class=\"string\">\"[ \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; iArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( i == iArr.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res.append(iArr[i] + <span class=\"string\">\" ]\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.append(iArr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//###########################</span></span><br><span class=\"line\">[ <span class=\"number\">10</span> <span class=\"number\">48</span> <span class=\"number\">75</span> <span class=\"number\">76</span> <span class=\"number\">82</span> <span class=\"number\">91</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例2.正则表达式的替换功能(将数字替换掉)</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"字符串正则替换 : \"</span> + <span class=\"string\">\"We1iyi12Geek556\"</span>.replaceAll(<span class=\"string\">\"\\\\d\"</span>,<span class=\"string\">\"\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//###########################</span></span><br><span class=\"line\">字符串正则替换 : WeiyiGeek</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"正则表达式分组\"><a href=\"#正则表达式分组\" class=\"headerlink\" title=\"正则表达式分组\"></a>正则表达式分组</h5><p>正则表达式的分组功能，捕获组可以通过从左到右计算其开括号来编号。<br>例如在表达式 ((A)(B(C))) 中，存在四个这样的组：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.((A)(B(C))) </span><br><span class=\"line\">2.(A)</span><br><span class=\"line\">3.(B(C)) </span><br><span class=\"line\">4.(C)</span><br></pre></td></tr></table></figure><br>分组之后我们可以利用向后引用元字符串显示被捕获的字符(十分实用);</p>\n<p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.regex;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo3_Regex</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.分组的使用(正则叠词) 开开心心,快快乐乐</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例1-1 : \"</span> + <span class=\"string\">\"开开心心\"</span>.matches(<span class=\"string\">\"(.)\\\\1(.)\\\\2\"</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"示例1-2 : \"</span> + <span class=\"string\">\"开心开心\"</span>.matches(<span class=\"string\">\"(..)\\\\1\"</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.切割需求：请按照叠词切割： \"sdqqfgkkkhjppppkl\";</span></span><br><span class=\"line\">    String str = <span class=\"keyword\">new</span> String(<span class=\"string\">\"sdqqfgkkkhjppppkl\"</span>);</span><br><span class=\"line\">    String[] Arr = str.split(<span class=\"string\">\"(.)\\\\1+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Arr.length; i++) &#123;</span><br><span class=\"line\">      System.out.println(Arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例3.替换需求：我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程将字符串还原成:“我要学编程”。</span></span><br><span class=\"line\">    String s1 = <span class=\"string\">\"我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程\"</span>;</span><br><span class=\"line\">    String res = s1.replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"\"</span>).replaceAll(<span class=\"string\">\"(.)\\\\1\\\\1\"</span>, <span class=\"string\">\"\"</span>);  <span class=\"comment\">//方式1</span></span><br><span class=\"line\">    String res1 = s1.replaceAll(<span class=\"string\">\"\\\\.\"</span>, <span class=\"string\">\"\"</span>).replaceAll(<span class=\"string\">\"(.)\\\\1+\"</span>, <span class=\"string\">\"$1\"</span>);  <span class=\"comment\">//方式2 (这里采用$1代替捕获的值得学习)</span></span><br><span class=\"line\">    System.out.println(res + <span class=\"string\">\"\\n\"</span> + res1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例<span class=\"number\">1</span>-<span class=\"number\">1</span> : <span class=\"keyword\">true</span></span><br><span class=\"line\">示例<span class=\"number\">1</span>-<span class=\"number\">2</span> : <span class=\"keyword\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">sd</span><br><span class=\"line\">fg</span><br><span class=\"line\">hj</span><br><span class=\"line\">kl</span><br><span class=\"line\"></span><br><span class=\"line\">我要学编程</span><br><span class=\"line\">我要学编程</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"Pattern正则类中的方法\"><a href=\"#Pattern正则类中的方法\" class=\"headerlink\" title=\"Pattern正则类中的方法\"></a>Pattern正则类中的方法</h5><p>基础示例:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.weiyigeek.regex;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo4_Regex</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//示例1.Pattern类的简单实用</span></span><br><span class=\"line\">    Pattern p = Pattern.compile(<span class=\"string\">\"[a-z]+\"</span>, Pattern.CASE_INSENSITIVE); <span class=\"comment\">//获取正则表达式不区分大小写 (方式1)</span></span><br><span class=\"line\">    Matcher m = p.matcher(<span class=\"string\">\"AABBB\"</span>); <span class=\"comment\">//获取适配器</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b1 = m.matches();  <span class=\"comment\">//判断是否能进行匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> b2 = Pattern.compile(<span class=\"string\">\"[a-z]+\"</span>).matcher(<span class=\"string\">\"AABBB\"</span>).matches(); <span class=\"comment\">//方法2 链式匹配</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式1 的结果 : \"</span> + b1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"方式2 的结果 : \"</span> + b2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//示例2.Pattern和Matcher的结合使用进行 手机号正则匹配</span></span><br><span class=\"line\">    String s = <span class=\"string\">\"我的手机号是:18983441325, 曾经用过18487258412, 还用过18883420241\"</span>;</span><br><span class=\"line\">    Matcher m1 = Pattern.compile(<span class=\"string\">\"1[456789]\\\\d&#123;9&#125;\"</span>).matcher(s);</span><br><span class=\"line\">    <span class=\"comment\">//注意要先找再获取注意这里的find获取了一个便会从下一个位置进行查找</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"提取到的电话号码:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m1.find())</span><br><span class=\"line\">      System.out.println(m1.group());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式<span class=\"number\">1</span> 的结果 : <span class=\"keyword\">true</span></span><br><span class=\"line\">方式<span class=\"number\">2</span> 的结果 : <span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">提取到的电话号码:</span><br><span class=\"line\"><span class=\"number\">18983441325</span></span><br><span class=\"line\"><span class=\"number\">18487258412</span></span><br><span class=\"line\"><span class=\"number\">18883420241</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"RegularExpression","path":"api/tags/RegularExpression.json"}]}