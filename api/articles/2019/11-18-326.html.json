{"title":"3.PS编程入门基础语法","slug":"编程世界/Powershell/Program/3.PS编程入门基础语法","date":"2019-11-18T13:57:50.000Z","updated":"2022-04-13T02:53:40.884Z","url":"2019/11-18-326.html","path":"api/articles/2019/11-18-326.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-PS-对象类-Object-Class\"><a href=\"#0x00-PS-对象类-Object-Class\" class=\"headerlink\" title=\"0x00 PS 对象类(Object-Class)\"></a>0x00 PS 对象类(Object-Class)</h2><p>描述:我们在学习C++和Java/PHP都遇到过面向对象编程，同样在PS也是基于对象来运行的脚本语言；</p>\n<p><strong>简单的说 <code>对象=属性+方法</code> 组成:</strong></p>\n<ul>\n<li>(1) 属性可以描述一个对象<code>例如一把小刀拥有一些特殊的属性(颜色、制造商等)</code>，对象的属性可以被PS自动转换成文本，并且输出到控制；<ul>\n<li>只读属性:一个构造器中只有Get方法，没有Set方法</li>\n<li>读写属性:一个构造器中只有Get/Set方法<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(0)查看你对象的属性</span></span><br><span class=\"line\"><span class=\"variable\">$Host</span> | Get-Member -MemberType Property </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(1)输出的第一列为对象的属性，第二列为文本形式的属性值</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$host</span>.Version</span><br><span class=\"line\">Major  Minor  Build  Revision  <span class=\"comment\"># 包含 Major，Minor，Build，Revision四个属性</span></span><br><span class=\"line\">-----  -----  -----  --------</span><br><span class=\"line\">2      0      -1     -1        <span class=\"comment\"># 值Value</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$host</span>.Version.Major  <span class=\"comment\">#通过对象属性里面的对象进行调用</span></span><br><span class=\"line\">5</span><br><span class=\"line\">PS &gt; [System.Version]<span class=\"string\">'2019.12.20.1234'</span> <span class=\"comment\">#可以通过这个类型构造新的对象或者进行类型转换</span></span><br><span class=\"line\">Major  Minor  Build  Revision</span><br><span class=\"line\">-----  -----  -----  --------</span><br><span class=\"line\">2019   12     20     1234</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2)$host的CurrentCulture访问当前系统的本地化信息和该信息的类型：</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$Host</span>.CurrentCulture</span><br><span class=\"line\">LCID             Name             DisplayName</span><br><span class=\"line\">----             ----             -----------</span><br><span class=\"line\">2052             zh-CN            中文(中华人民共和国)</span><br><span class=\"line\"><span class=\"comment\">#通过MSDN查看System.Globalization.CultureInfo的构造函数可知，可以将国家代码和国家名称标志字符串转换成一个新的CultureInfo对象。</span></span><br><span class=\"line\">PS &gt; [System.Globalization.CultureInfo]<span class=\"string\">'zh-tw'</span></span><br><span class=\"line\">LCID             Name             DisplayName</span><br><span class=\"line\">----             ----             -----------</span><br><span class=\"line\">1028             zh-TW            中文(繁体，中国台湾)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>(2) 方法定义了一个对象可以做什么事情<code>例如打开计算机</code>，当你把一个对象输出在控制台时它的属性可能会被转换成可视的文本，但是它的方法却不可见<ul>\n<li>标准方法:几乎每个对象都有一些继承自父类的方法，这些方法并不是该对象所特有的方法，而是所有对象共有的方法。</li>\n</ul>\n<ul>\n<li>Equals 比较两个对象是否相同</li>\n<li>GetHashCode 返回一个对象的数字格式的指纹</li>\n<li>GetType 返回一个对象的数据类型</li>\n<li>ToString 将一个对象转换成可读的字符串<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (0) 查看对象的方法</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$Host</span> | Get-Member -MemberType Method</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get_ 和 Set_ 方法</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$Host</span>.get_Version()</span><br><span class=\"line\"><span class=\"comment\"># Major  Minor  Build  Revision</span></span><br><span class=\"line\"><span class=\"comment\"># -----  -----  -----  --------</span></span><br><span class=\"line\"><span class=\"comment\"># 5      1      18362  145</span></span><br><span class=\"line\"><span class=\"variable\">$Host</span>.UI.WriteDebugLine(<span class=\"string\">\"Hello 2012 !\"</span>)  <span class=\"comment\">#实用的调用输出调试(而不像输出错误的信息)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (1) 采用.net对象的静态方法实用,使用Parse方法将一个字符串转换成DateTime类：</span></span><br><span class=\"line\">[System.DateTime]::Parse(<span class=\"string\">\"2012-10-13 23:42:55\"</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 2012年10月13日 23:42:55</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>Tips : Powershell将信息存储在对象中，每个对象都会有一个具体的类型；(例如简单的文本会以System.String类型存储，日期会以System.DateTime类型存储。）</p>\n<p>Tips : 任何.NET对象都可以通过GetType()方法返回它的类型，该类型中有一个FullName属性，可以查看类型的完整名称(例如<code>$date.GetType().FullName</code>)。</p>\n<p><br></p>\n<h3 id=\"1-操作对象\"><a href=\"#1-操作对象\" class=\"headerlink\" title=\"1.操作对象\"></a>1.操作对象</h3><p>描述: 通过New-Object可以创建一个对象，可以通过Add-member添加对象属性，通过下面示例也能学习到调用属性和方法，并且删除我们创建的对象。</p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#(1) New-Object可以创建一个对象,空对象什么都没有，如果调用它不会返回任何东西。</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> = New-Object object  <span class=\"comment\">#空对象</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> </span><br><span class=\"line\">  <span class=\"comment\"># System.Object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(2) 增加对象属性 </span></span><br><span class=\"line\">PS &gt; Add-Member -MemberType NoteProperty -InputObject <span class=\"variable\">$obj</span> -Name Color -Value <span class=\"string\">\"Red\"</span></span><br><span class=\"line\">PS &gt; Add-Member -MemberType NoteProperty -InputObject <span class=\"variable\">$obj</span> -Name Name -Value <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span></span><br><span class=\"line\">  <span class=\"comment\"># Color Name</span></span><br><span class=\"line\">  <span class=\"comment\"># ----- ----</span></span><br><span class=\"line\">  <span class=\"comment\"># Red   WeiyiGeek</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(3) 增加方法 -memberType 选项使用ScriptMethod。</span></span><br><span class=\"line\">PS &gt; Add-member -MemberType ScriptMethod -InputObject <span class=\"variable\">$obj</span> script &#123;<span class=\"string\">\"I'm is function, <span class=\"variable\">$obj</span>.name \"</span>&#125;</span><br><span class=\"line\">PS &gt; Add-Member -memberType ScriptMethod -InputObject <span class=\"variable\">$obj</span> -Name fun -Value &#123; <span class=\"string\">\"I'm whittling now\"</span> &#125;</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> | Add-Member ScriptMethod corkscrew &#123; <span class=\"string\">\"Pop! Cheers!\"</span> &#125; <span class=\"comment\">#直接通过管道增加一个新方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(4)调用属性和方法</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> | get-Member  <span class=\"comment\">#获取对象的属性和方法</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span>.Name</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span>.script()</span><br><span class=\"line\">  <span class=\"comment\"># I'm is function, System.Object.name'</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span>.fun()</span><br><span class=\"line\">  <span class=\"comment\"># I'm whittling now</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$pocketknife</span>.corkscrew()</span><br><span class=\"line\">  <span class=\"comment\"># Pop! Cheers!</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$pocketknife</span>.corkscrew <span class=\"comment\"># 在调用方法时如果没有使用圆括号，方法不会执行但是可以返回方法的基本信息。</span></span><br><span class=\"line\">  <span class=\"comment\"># Script                      :  \"Pop! Cheers!\"</span></span><br><span class=\"line\">  <span class=\"comment\"># OverloadDefinitions : &#123;System.Object corkscrew();&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># MemberType           : ScriptMethod</span></span><br><span class=\"line\">  <span class=\"comment\"># TypeNameOfValue  : System.Object</span></span><br><span class=\"line\">  <span class=\"comment\"># Value                      : System.Object corkscrew();</span></span><br><span class=\"line\">  <span class=\"comment\"># Name                     : corkscrew</span></span><br><span class=\"line\">  <span class=\"comment\"># IsInstance               : True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(5)对象删除调用对象的Delete方法：</span></span><br><span class=\"line\">PS &gt; -Path <span class=\"variable\">$obj</span></span><br><span class=\"line\">  <span class=\"comment\"># True</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span>.Delete()</span><br><span class=\"line\">PS &gt; -Path <span class=\"variable\">$obj</span></span><br><span class=\"line\">  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-对象属性\"><a href=\"#2-对象属性\" class=\"headerlink\" title=\"2.对象属性\"></a>2.对象属性</h3><p>描述：一个对象的属性用来存储数据，反过来这些数据又可以存储其它对象。例如<code>$host</code>有两个比较特别的<code>属性UI和PrivateData</code>。</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 属性中包含对象</span></span><br><span class=\"line\"><span class=\"comment\"># 把$host对象输出到控制台上后，除了UI和PrivateData所有的属性都会被转换成确定的文本：</span></span><br><span class=\"line\"><span class=\"variable\">$Host</span></span><br><span class=\"line\">  <span class=\"comment\"># Name\t\t: ConsoleHost</span></span><br><span class=\"line\">  <span class=\"comment\"># Version         \t: 2.0</span></span><br><span class=\"line\">  <span class=\"comment\"># InstanceId       \t: 7fefa1fa-fb2e-47c7-a867-c13b123da5c2</span></span><br><span class=\"line\">  <span class=\"comment\"># UI               \t: System.Management.Automation.Internal.Host.InternalHostUserInterface</span></span><br><span class=\"line\">  <span class=\"comment\"># PrivateData      \t: Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 属性UI和PrivateData这两个属性中又包含了一个对象：</span></span><br><span class=\"line\"><span class=\"comment\"># “RawUI” 为 “Raw User Interface” 提供了配置Powershell控制台用户界面的接口。</span></span><br><span class=\"line\">PS C:Powershell&gt; <span class=\"variable\">$Host</span>.UI</span><br><span class=\"line\">  <span class=\"comment\"># RawUI</span></span><br><span class=\"line\">  <span class=\"comment\"># -----</span></span><br><span class=\"line\">  <span class=\"comment\"># System.Management.Automation.Internal.Host.InternalHostRawUserInterface</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS C:Powershell&gt; <span class=\"variable\">$Host</span>.UI.RawUI  <span class=\"comment\"># 属性可以读取但是个别却不能更改。</span></span><br><span class=\"line\">  <span class=\"comment\"># ForegroundColor\t: DarkYellow</span></span><br><span class=\"line\">  <span class=\"comment\"># BackgroundColor\t: DarkMagenta</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 只读属性和读写属性</span></span><br><span class=\"line\"><span class=\"comment\"># - 通过简单地修改控制台的背景和前景的颜色，可以发现属性更改可以直接反映到对象上。</span></span><br><span class=\"line\"><span class=\"variable\">$host</span>.ui.rawui.ForegroundColor = <span class=\"string\">\"White\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - KeyAvailable 有的属性不能更改，如果尝试修改就会抛出异常。</span></span><br><span class=\"line\">PS C:Powershell&gt; <span class=\"variable\">$Host</span>.UI.RawUI.KeyAvailable</span><br><span class=\"line\">  <span class=\"comment\"># False</span></span><br><span class=\"line\">PS C:Powershell&gt; <span class=\"variable\">$Host</span>.UI.RawUI.KeyAvailable=<span class=\"variable\">$false</span></span><br><span class=\"line\">  <span class=\"comment\"># “KeyAvailable”为 ReadOnly 属性。</span></span><br><span class=\"line\">  <span class=\"comment\"># 控制台是否接收到了一个按键请求，应当取决于用户的操作，因此该属性拒绝被更改，你只能读取它。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 特殊对象属性对象静态属性和动态属性</span></span><br><span class=\"line\"><span class=\"comment\"># 一个NoteProperty包含了`静态的数据`,一个ScriptProperty中`包含了一段脚本`，通过脚本计算出属性的值;</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span>=New-Object PSobject</span><br><span class=\"line\"><span class=\"comment\"># 静态 () 小括号 | # 动态 &#123;&#125; 代码块</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> | Add-Member -MemberType NoteProperty -Name AddTime -Value (get-date)       </span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span> | Add-Member -MemberType ScriptProperty -Name CurrentTime -Value &#123;get-date&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$obj</span></span><br><span class=\"line\">  <span class=\"comment\"># # CurrentTime属性会自动更新、AddTime则不会。</span></span><br><span class=\"line\">  <span class=\"comment\"># AddTime                 CurrentTime</span></span><br><span class=\"line\">  <span class=\"comment\"># -------                 -----------</span></span><br><span class=\"line\">  <span class=\"comment\"># 2012/1/11 14:35:38      2012/1/11 14:36:35  # 每次执行会进行改变!</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$obj</span>.AddTime</span><br><span class=\"line\">  <span class=\"comment\"># 2021年4月27日 15:54:42</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$obj</span>.CurrentTime</span><br><span class=\"line\">  <span class=\"comment\"># 2021年4月27日 15:57:04</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-对象方法\"><a href=\"#3-对象方法\" class=\"headerlink\" title=\"3.对象方法\"></a>3.对象方法</h3><p>描述:每一个类型都可以包含一些静态的方法，可以通过<code>方括号和类型名称</code>得到类型对象本身;</p>\n<p>基础示例:<br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 动态方法</span></span><br><span class=\"line\"><span class=\"variable\">$Host</span>.GetType()</span><br><span class=\"line\">  <span class=\"comment\"># IsPublic IsSerial Name                                     BaseType</span></span><br><span class=\"line\">  <span class=\"comment\"># -------- -------- ----                                     --------</span></span><br><span class=\"line\">  <span class=\"comment\"># False    False    InternalHost                             System.Management.Automation.Host.PSHost</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 静态方法</span></span><br><span class=\"line\">[System.DateTime] | <span class=\"built_in\">Get-Member</span> -static -memberType *Method</span><br><span class=\"line\">  <span class=\"comment\"># #System.DateTime类支持的静态方法非常实用使用Parse方法将一个字符串转换成DateTime类：</span></span><br><span class=\"line\">  <span class=\"comment\"># [System.DateTime]::Parse(\"2012-10-13 23:42:55\")</span></span><br><span class=\"line\">  <span class=\"comment\"># [System.DateTime]::IsLeapYear(1988) #IsLeapYear方法判断闰年</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (3) 一个方法的多种参数,通过Definition属性查看函数定义</span></span><br><span class=\"line\"><span class=\"variable\">$method</span>=<span class=\"variable\">$Host</span>.UI | <span class=\"built_in\">Get-Member</span> WriteLine</span><br><span class=\"line\"><span class=\"variable\">$method</span>.Definition</span><br><span class=\"line\">  <span class=\"comment\"># System.Void WriteLine(), System.Void WriteLine(System.ConsoleColor foregroundColor, System.ConsoleColor backgroundColor</span></span><br><span class=\"line\">  <span class=\"comment\"># , string value), System.Void WriteLine(string value)</span></span><br><span class=\"line\"><span class=\"variable\">$method</span>.Definition.Replace(<span class=\"string\">\"),\"</span>,<span class=\"string\">\")`n\"</span>) <span class=\"comment\"># 换行输出</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 必须知道这个方法的功能,因为有的命令可能比较危险,例如错误地修改环境变量。</p>\n<p><br></p>\n<h3 id=\"4-对象实例\"><a href=\"#4-对象实例\" class=\"headerlink\" title=\"4.对象实例\"></a>4.对象实例</h3><p>描述: 可以采用类似于Java声明实例化对象类的流程来实现创建对象。</p>\n<ul>\n<li><p>示例1.每一个Powershell命令都会返回一个对象，但是返回的对象不易操作(<code>自动将对象转换成为可视化字符串</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.存储在$FileList变量中的并不是真实的对象，而是一个对象数组，数组可以通过索引访问得到真实的对象。</span></span><br><span class=\"line\"><span class=\"variable\">$FileList</span>=dir</span><br><span class=\"line\"><span class=\"variable\">$obj</span>=(dir)[0]</span><br><span class=\"line\">  <span class=\"comment\"># 目录: C:\\Users\\WeiyiGeek</span></span><br><span class=\"line\">  <span class=\"comment\"># Mode                 LastWriteTime         Length Name</span></span><br><span class=\"line\">  <span class=\"comment\"># ----                 -------------         ------ ----</span></span><br><span class=\"line\">  <span class=\"comment\"># d-----         2019/7/26      8:45                .android</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.使用对象的属性,如果属性的定义列中包含&#123;get;set&#125;表明该属性可以被更新：</span></span><br><span class=\"line\"><span class=\"variable\">$obj</span>.LastAccessTime</span><br><span class=\"line\"><span class=\"comment\"># 2021年4月26日 6:43:51</span></span><br><span class=\"line\"><span class=\"variable\">$obj</span>.LastAccessTime=Get-Date</span><br><span class=\"line\">2021年4月28日 14:21:26</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例2.如果使用构造函数创建一个指定类型的实例对象，该类型必须至少包含一个签名相匹配的构造函数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如-可以通过字符和数字创建一个包含指定个数字符的字符串：</span></span><br><span class=\"line\">New-Object String(<span class=\"string\">'*'</span>,100)</span><br><span class=\"line\">  <span class=\"comment\"># ***********...**************</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Q:为什么支持上面的方法?</p>\n<blockquote>\n<p>答: 原因是String类中包含一个 <code>Void .ctor(Char, Int32)</code> 构造函数<br>查看命令: <code>[String].GetConstructors() | foreach {$_.tostring()}</code></p>\n</blockquote>\n<ul>\n<li>示例3.通过类型转换创建对象即(<code>通过类型转换可以替代New-Object</code>)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将字符串转成时间类型</span></span><br><span class=\"line\">[DateTime]<span class=\"variable\">$date</span>=<span class=\"string\">\"1999-9-1 10:23:44\"</span></span><br><span class=\"line\"><span class=\"variable\">$date</span>.GetType().FullName</span><br><span class=\"line\">System.DateTime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果条件允许也可以直接将对象转换成数组</span></span><br><span class=\"line\">[char[]]<span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\">  <span class=\"comment\"># w</span></span><br><span class=\"line\">  <span class=\"comment\"># e</span></span><br><span class=\"line\">  <span class=\"comment\"># i</span></span><br><span class=\"line\">  <span class=\"comment\"># y</span></span><br><span class=\"line\">  <span class=\"comment\"># i</span></span><br><span class=\"line\">  <span class=\"comment\"># g</span></span><br><span class=\"line\">  <span class=\"comment\"># e</span></span><br><span class=\"line\">  <span class=\"comment\"># e</span></span><br><span class=\"line\">  <span class=\"comment\"># k</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将字符转成ASCII码</span></span><br><span class=\"line\">[int[]][char[]]<span class=\"string\">\"weiyigeek\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 119</span></span><br><span class=\"line\">  <span class=\"comment\"># 101</span></span><br><span class=\"line\">  <span class=\"comment\"># 105</span></span><br><span class=\"line\">  <span class=\"comment\"># 121</span></span><br><span class=\"line\">  <span class=\"comment\"># 105</span></span><br><span class=\"line\">  <span class=\"comment\"># 103</span></span><br><span class=\"line\">  <span class=\"comment\"># 101</span></span><br><span class=\"line\">  <span class=\"comment\"># 101</span></span><br><span class=\"line\">  <span class=\"comment\"># 107</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>示例3.使用.net对象类型进行实例创建<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$LocalName</span>=<span class=\"string\">\"c:\\PS\\Index.php\"</span></span><br><span class=\"line\"><span class=\"variable\">$DownUrlFile</span>=<span class=\"string\">\"https://weiyigeek.com/Index.php\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式1.脚本脚本写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!-Path <span class=\"variable\">$LocalName</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable\">$webClient</span>=New-Object Net.WebClient;<span class=\"variable\">$webClient</span>.DownloadFile(<span class=\"variable\">$DownUrlFile</span>,<span class=\"variable\">$LocalName</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(-Path <span class=\"variable\">$LocalName</span>)&#123;</span><br><span class=\"line\">    Write-Ouput <span class=\"string\">\"下载完成\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.命令格式写法</span></span><br><span class=\"line\">(New-Object Net.WebClient).DownloadFile(<span class=\"variable\">$DownUrlFile</span>,<span class=\"variable\">$LocalName</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"5-加载DLL程序集\"><a href=\"#5-加载DLL程序集\" class=\"headerlink\" title=\"5.加载DLL程序集\"></a>5.加载DLL程序集</h3><p>描述: 在Powershell中加载这个自定义C#类库编译生成的dll,并使用其中的Student类的构造函数生成一个实例，最后调用ToString()方法。</p>\n<ul>\n<li><p>Step 1.自定义一个简单的C#类库编译为Test.dll：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Net;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"built_in\">set</span>; get; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"built_in\">set</span>; get; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Name = name;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Age = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> override <span class=\"built_in\">string</span> <span class=\"title\">ToString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Format(<span class=\"string\">\"Name=&#123;0&#125;;Age=&#123;1&#125;\"</span>, <span class=\"keyword\">this</span>.Name,<span class=\"keyword\">this</span>.Age);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.在PS中加载Test.dll到系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; <span class=\"variable\">$TestDLL</span>=ls .Test.dll</span><br><span class=\"line\">PS &gt; [reflection.assembly]::LoadFile(<span class=\"variable\">$TestDLL</span>.FullName)  <span class=\"comment\">#加载DLL到PS中</span></span><br><span class=\"line\">  <span class=\"comment\"># GAC    Version        Location</span></span><br><span class=\"line\">  <span class=\"comment\"># ---    -------        --------</span></span><br><span class=\"line\">  <span class=\"comment\"># False  v2.0.50727     Test.dll</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 3.使用其中的Student类的构造函数生成一个实例，最后调用ToString()方法。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS &gt; <span class=\"variable\">$stu</span>=<span class=\"built_in\">New-Object</span> Test.Student(<span class=\"string\">'Mosser'</span>,<span class=\"number\">22</span>)  <span class=\"comment\">#创建对象</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$stu</span></span><br><span class=\"line\">  <span class=\"comment\"># Name   Age</span></span><br><span class=\"line\">  <span class=\"comment\"># ----   ---</span></span><br><span class=\"line\">  <span class=\"comment\"># Mosser  22</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$stu</span>.ToString()  <span class=\"comment\">#调用重写的ToString方法</span></span><br><span class=\"line\">  <span class=\"comment\"># Name=Mosser;Age=22</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"6-使用COM对象\"><a href=\"#6-使用COM对象\" class=\"headerlink\" title=\"6.使用COM对象\"></a>6.使用COM对象</h3><p>描述: 作为.NET对象的补充Powershell可以加载和访问COM对象。</p>\n<p>Tips : 常用的COM对象中有:</p>\n<ul>\n<li>WScript.Shell,</li>\n<li>WScript.Network,</li>\n<li>Scripting.FileSystemObject,</li>\n<li>InternetExplorer.Application,</li>\n<li>Word.Application,</li>\n<li>Shell.Application</li>\n</ul>\n<ul>\n<li><p>Step 1.每一个COM对象都有存储在注册表中的唯一标识符，想遍历访问可用的COM对象，可是直接访问注册表。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 显示前10条COM对象的ProgID</span></span><br><span class=\"line\">Get-ChildItem REGISTRY::HKEY_CLASSES_ROOT\\CLSID -include PROGID -recurse | foreach &#123;<span class=\"variable\">$_</span>.GetValue(<span class=\"string\">\"\"</span>)&#125; | select -First 10</span><br><span class=\"line\">  <span class=\"comment\"># file</span></span><br><span class=\"line\">  <span class=\"comment\"># StaticMetafile</span></span><br><span class=\"line\">  <span class=\"comment\"># StaticDib</span></span><br><span class=\"line\">  <span class=\"comment\"># clsid</span></span><br><span class=\"line\">  <span class=\"comment\"># objref</span></span><br><span class=\"line\">  <span class=\"comment\"># ADODB.Command.6.0</span></span><br><span class=\"line\">  <span class=\"comment\"># ADODB.Parameter.6.0</span></span><br><span class=\"line\">  <span class=\"comment\"># ADODB.Connection.6.0</span></span><br><span class=\"line\">  <span class=\"comment\"># ADODB.Recordset.6.0</span></span><br><span class=\"line\">  <span class=\"comment\"># ADODB.Error.6.0</span></span><br><span class=\"line\">  <span class=\"comment\"># DAO.PrivateDBEngine.36</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) 查找指定的COM对象的唯一标识符</span></span><br><span class=\"line\">Get-ChildItem REGISTRY::HKEY_CLASSES_ROOT\\CLSID -include PROGID -recurse | foreach &#123;<span class=\"variable\">$_</span>.GetValue(<span class=\"string\">\"\"</span>)&#125; | Select-String <span class=\"string\">\"WScript\"</span></span><br><span class=\"line\">  <span class=\"comment\"># WScript.Network.1</span></span><br><span class=\"line\">  <span class=\"comment\"># WScript.Shell.1</span></span><br><span class=\"line\">  <span class=\"comment\"># WScript.Shell.1</span></span><br><span class=\"line\">  <span class=\"comment\"># WScript.Network.1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step 2.怎样使用COM对象得到了COM对象的ProgID,就可以使用使用New-Object创建COM对象查看其</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意: 需要指定参数为 -comObject</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$WS</span>=New-Object -ComObject WScript.Network.1</span><br><span class=\"line\">PS &gt; <span class=\"variable\">$WS</span> | Get-Member -me *method               <span class=\"comment\"># 查看方法</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$WS</span>.EnumNetworkDrives()  <span class=\"comment\"># 网络</span></span><br><span class=\"line\">  <span class=\"comment\"># Z:</span></span><br><span class=\"line\">  <span class=\"comment\"># \\\\10.10.17.106\\Work</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$WS</span>.EnumPrinterConnections() <span class=\"comment\"># 打印机</span></span><br><span class=\"line\">  <span class=\"comment\"># Kingsoft Virtual Printer Port</span></span><br><span class=\"line\">  <span class=\"comment\"># 导出为WPS PDF</span></span><br><span class=\"line\">  <span class=\"comment\"># WpsPrinter:</span></span><br><span class=\"line\">  <span class=\"comment\"># 发送到WPS高级打印</span></span><br><span class=\"line\">  <span class=\"comment\"># Brother MFC-3880N Printer</span></span><br><span class=\"line\">PS &gt; <span class=\"variable\">$WS</span> | Get-Member -me *property <span class=\"comment\"># 查看属性</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$WS</span>.UserDomain</span><br><span class=\"line\">  <span class=\"comment\"># WEIYIGEEK</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; <span class=\"variable\">$WS</span>.UserName</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Step3.使用WScript.shell COM对象和它的方法<code>CreateShortcut()</code>做桌面上创建一个Powershell快捷方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS&gt; <span class=\"variable\">$shell</span>=New-Object -ComObject WScript.shell</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>=<span class=\"variable\">$shell</span>.CreateShortcut(<span class=\"string\">\"<span class=\"variable\">$path</span>/Powershell.lnk\"</span>)  </span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>.Description=<span class=\"string\">\"启动Powershell\"</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>.TargetPath=<span class=\"string\">'Powershell.exe'</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>.IconLocation=<span class=\"string\">'Powershell.exe'</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>.WorkingDirectory=<span class=\"variable\">$PROFILE</span></span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span>.Save()</span><br><span class=\"line\">PS&gt; <span class=\"variable\">$link</span></span><br><span class=\"line\">  <span class=\"comment\"># FullName         : C:\\Users\\WeiyiGeek\\Desktop\\Powershell.lnk</span></span><br><span class=\"line\">  <span class=\"comment\"># Arguments        :</span></span><br><span class=\"line\">  <span class=\"comment\"># Description      : 启动Powershell</span></span><br><span class=\"line\">  <span class=\"comment\"># Hotkey           :</span></span><br><span class=\"line\">  <span class=\"comment\"># IconLocation     : Powershell.exe,0</span></span><br><span class=\"line\">  <span class=\"comment\"># RelativePath     :</span></span><br><span class=\"line\">  <span class=\"comment\"># TargetPath       : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Powershell.exe</span></span><br><span class=\"line\">  <span class=\"comment\"># WindowStyle      : 1</span></span><br><span class=\"line\">  <span class=\"comment\"># WorkingDirectory : C:\\Users\\WeiyiGeek\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</span></span><br><span class=\"line\"><span class=\"comment\"># 查看相关属性</span></span><br><span class=\"line\"><span class=\"variable\">$link</span> | get-member</span><br><span class=\"line\">TypeName:System.__ComObject<span class=\"comment\">#&#123;f935dc23-1cf0-11d0-adb9-00c04fd58a0b&#125; </span></span><br><span class=\"line\">TargetPath       Property   string <span class=\"function\"><span class=\"title\">TargetPath</span></span> () &#123;get&#125; &#123;<span class=\"built_in\">set</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">#Get</span></span><br><span class=\"line\"><span class=\"variable\">$link</span>.TargetPath()</span><br><span class=\"line\"><span class=\"comment\">#Set</span></span><br><span class=\"line\"><span class=\"variable\">$link</span>.TargetPath=<span class=\"string\">\"cmd.exe\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Tips : COM对象的和.NET对象相似，所以可是使用<code>Get-Member</code>得到该对象的所有熟悉和方法：</p>\n<hr>\n<h1 id=\"0x01-PS-脚本-Script\"><a href=\"#0x01-PS-脚本-Script\" class=\"headerlink\" title=\"0x01 PS 脚本(Script)\"></a>0x01 PS 脚本(Script)</h1><p>描述: 做过开发的人都知道写得代码量越大其可读性就越差，解决的最好方式就是在写脚本时融入<code>函数(Function)</code>和<code>类库(Class)</code>的概念。</p>\n<ul>\n<li>函数：把实现一些小功能的代码写成一个函数，不仅可以增强代码的可读性，还可以很方便的重用。一旦你创建了一个实现特定功能的函数，也可以下次在其它脚本中使用。</li>\n<li>类库：把需要的函数嵌入进类库中，就不用每次在执行脚本时拷贝函数，并且还可以在需要时扩充它。另外以函数的方式构建类库，还可以让你更专注特定功能的具体实现，降低脚本开发的复杂度。</li>\n</ul>\n<p><strong>基础示例:</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1) 在脚本中使用函数,本示例为通过Factorial函数求阶乘。</span></span><br><span class=\"line\"><span class=\"comment\"># Tips: Powershell中的函数必须先定义后使用。</span></span><br><span class=\"line\"><span class=\"comment\"># MyScript.ps1</span></span><br><span class=\"line\"><span class=\"keyword\">param</span>([int]<span class=\"variable\">$n</span>=$(<span class=\"keyword\">throw</span> <span class=\"string\">\"请输入一个正整数\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">Function</span> Factorial([int]<span class=\"variable\">$n</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"variable\">$total</span>=<span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">1</span>;<span class=\"variable\">$i</span> <span class=\"nomarkup\">-le</span> <span class=\"variable\">$n</span>;<span class=\"variable\">$i</span>++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"variable\">$total</span>*=<span class=\"variable\">$i</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable\">$total</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Factorial <span class=\"variable\">$n</span></span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; .\\test.ps1</span><br><span class=\"line\">  <span class=\"comment\"># 请输入一个正整数</span></span><br><span class=\"line\">  <span class=\"comment\"># 所在位置 \\test.ps1:1 字符: 17</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; .\\test.ps1 <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2) 将脚本分为工作脚本和类库, 可以便于浏览增加可读性并且可以隔离含税使它不容易被修改;</span></span><br><span class=\"line\"><span class=\"comment\"># 将上述的代码中Factorial函数保存在PSLib.ps1之中。</span></span><br><span class=\"line\"><span class=\"keyword\">param</span>([int]<span class=\"variable\">$n</span>=$(<span class=\"keyword\">throw</span> <span class=\"string\">\"请输入一个正整数\"</span>))</span><br><span class=\"line\"><span class=\"comment\"># fa</span></span><br><span class=\"line\">. .PSLib.ps1   </span><br><span class=\"line\"><span class=\"comment\"># 方式2 采用 source .PSLib.ps1</span></span><br><span class=\"line\">Factorial <span class=\"variable\">$n</span></span><br><span class=\"line\">PS E:&gt; .MyScript.ps1 <span class=\"number\">10</span> <span class=\"comment\"># 执行脚本</span></span><br><span class=\"line\">  <span class=\"comment\"># 3628800</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips :脚本在执行时先加载类库中的函数(<code>加载函数类库和执行脚本类似</code>), 只需要在前面增加一个句号中间有空格。</p>\n<p>Tips: 我们可以将类库脚本集中存放常常有两种方式, 但是最好在当前用户的私人目录中存放脚本相对来说比较安全: </p>\n<ul>\n<li>1.一种方法是和工作脚本存放在一起可以使用相对路径。</li>\n<li>2.一种方法是分开存放，加载时就得使用绝对路径了。</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt; cd <span class=\"variable\">$env:APPDATA</span></span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek\\AppData\\Roaming&gt; cd <span class=\"variable\">$env:APPDATA</span>\\PSLib</span><br><span class=\"line\">PS C:\\Users\\WeiyiGeek&gt;copy .PSLib.ps1 <span class=\"variable\">$env:APPDATA</span>\\PSLib</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h2 id=\"脚本参数\"><a href=\"#脚本参数\" class=\"headerlink\" title=\"脚本参数\"></a>脚本参数</h2><p>描述: 在Powershell的脚本中，可以使用自定义的参数列表，通常将参数放在<code>Param()</code>中</p>\n<p><strong>基础语法&amp;参数:</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\">[Cmdletbinding()]</span><br><span class=\"line\"><span class=\"keyword\">param</span>(</span><br><span class=\"line\">[Parameter(Mandatory=<span class=\"literal\">$True</span>)]</span><br><span class=\"line\">[Alias(<span class=\"string\">'DT'</span>)]</span><br><span class=\"line\">[ValidateSet(<span class=\"number\">2</span>,<span class=\"number\">3</span>)]</span><br><span class=\"line\">[int]DiskType</span><br><span class=\"line\">[Boolean]</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">Mandatory 设置为True表示该参数强制输入</span><br><span class=\"line\">Alias 是为该参数设置了一个别名</span><br><span class=\"line\">ValidateSet 是为该参数设置了一个可用值列表</span><br><span class=\"line\">[数据类型] 指定该变量的类型</span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># scriptArg.ps1</span></span><br><span class=\"line\">[Cmdletbinding()]</span><br><span class=\"line\"><span class=\"keyword\">param</span>(</span><br><span class=\"line\">[Parameter(Mandatory=<span class=\"literal\">$True</span>)][String]<span class=\"variable\">$Name</span>,</span><br><span class=\"line\">[Alias(<span class=\"string\">'DT'</span>)]<span class=\"variable\">$AliasDt</span>,</span><br><span class=\"line\">[ValidateSet(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>)]<span class=\"variable\">$Scope</span>,</span><br><span class=\"line\">[ValidateSet(<span class=\"string\">\"My\"</span>,<span class=\"string\">\"Love\"</span>,<span class=\"string\">\"Computer\"</span>)]<span class=\"variable\">$ScopeStr</span>,</span><br><span class=\"line\">[Int]<span class=\"variable\">$DiskType</span>,</span><br><span class=\"line\">[Boolean]<span class=\"variable\">$Flag</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"variable\">$Name</span> <span class=\"variable\">$DiskType</span> <span class=\"variable\">$Flag</span></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"variable\">$AliasDt</span> <span class=\"variable\">$DT</span></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"variable\">$Scope</span> <span class=\"variable\">$ScopeStr</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 脚本执行 &amp; 结果</span></span><br><span class=\"line\">.\\ScriptArgs.ps1 -Name <span class=\"string\">\"WeiyiGeek\"</span> -AliasDt <span class=\"string\">\"PowerShell\"</span> -DiskType <span class=\"number\">1024</span> -Flag <span class=\"number\">0</span> -Scope <span class=\"number\">1</span> -ScopeStr Computer</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek 1024 False</span></span><br><span class=\"line\">  <span class=\"comment\"># PowerShell </span></span><br><span class=\"line\">  <span class=\"comment\"># 1 Computer</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips : 同时在脚本中使用write-verbose输出详细信息，在运行脚本的时候可以使用-verbose就能输出相关信息</p>\n<p><br></p>\n<h2 id=\"脚本选择\"><a href=\"#脚本选择\" class=\"headerlink\" title=\"脚本选择\"></a>脚本选择</h2><p>描述: 这里使用<code>$host.UI.PromptForChoice()方法</code>进行功能的实现,可以先看看方法的定义<code>$host.ui.PromptForChoice</code>;</p>\n<p><strong>简单示例:</strong><br><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) 方式1</span></span><br><span class=\"line\"><span class=\"comment\"># 参数定义(先定义后使用)</span></span><br><span class=\"line\"><span class=\"variable\">$SwitchUser</span> = ([System.Management.Automation.Host.ChoiceDescription]<span class=\"string\">\"&amp;Switchuser\"</span>)</span><br><span class=\"line\"><span class=\"variable\">$LoginOff</span> = ([System.Management.Automation.Host.ChoiceDescription]<span class=\"string\">\"&amp;LoginOff\"</span>)</span><br><span class=\"line\"><span class=\"variable\">$Lock</span> = ([System.Management.Automation.Host.ChoiceDescription]<span class=\"string\">\"&amp;Lock\"</span>)</span><br><span class=\"line\"><span class=\"variable\">$Reboot</span> = ([System.Management.Automation.Host.ChoiceDescription]<span class=\"string\">\"&amp;Reboot\"</span>)</span><br><span class=\"line\"><span class=\"variable\">$Sleep</span> = ([System.Management.Automation.Host.ChoiceDescription]<span class=\"string\">\"&amp;Sleep\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将上述值装入到数组之中</span></span><br><span class=\"line\"><span class=\"variable\">$Selection</span> = [System.Management.Automation.Host.ChoiceDescription[]](<span class=\"variable\">$SwitchUser</span>,<span class=\"variable\">$LoginOff</span>,<span class=\"variable\">$Lock</span>,<span class=\"variable\">$Reboot</span>,<span class=\"variable\">$Sleep</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择菜单设置(1点数组中第二的一个值)</span></span><br><span class=\"line\"><span class=\"variable\">$Answer</span>=<span class=\"variable\">$Host</span>.UI.PromptForChoice(<span class=\"string\">\"接下来做什么事呢?\"</span>,<span class=\"string\">'请选择:'</span> ,<span class=\"variable\">$selection</span> ,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> -NoNewline <span class=\"string\">\"您选择的是：\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"variable\">$Answer</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"number\">0</span> &#123;<span class=\"string\">\"切换用户\"</span>&#125;</span><br><span class=\"line\">  <span class=\"number\">1</span> &#123;<span class=\"string\">\"注销\"</span>&#125;</span><br><span class=\"line\">  <span class=\"number\">2</span> &#123;<span class=\"string\">\"锁定\"</span>&#125;</span><br><span class=\"line\">  <span class=\"number\">3</span> &#123;<span class=\"string\">\"重启\"</span>&#125;</span><br><span class=\"line\">  <span class=\"number\">4</span> &#123;<span class=\"string\">\"休眠\"</span>&#125;</span><br><span class=\"line\">  default &#123;<span class=\"string\">\"正在完成操作请稍等!\"</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接下来做什么事呢?</span><br><span class=\"line\">请选择:</span><br><span class=\"line\">[S] Switchuser  [L] LoginOff  [L] Lock  [R] Reboot  [S] Sleep  [?] 帮助 (默认值为“L”): S</span><br><span class=\"line\">您选择的是：切换用户</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"脚本异常处理\"><a href=\"#脚本异常处理\" class=\"headerlink\" title=\"脚本异常处理\"></a>脚本异常处理</h2><hr>\n<p>使用Write-Debug有两个优势，首先调试信息会自动高亮显示，便于分析。其次，这些调试信息只会在调试模式开启时输出，控制起来更加方便。当然最重要的是这些临时信息无论什么时候也不会混淆在返回值。</p>\n<p>抑制错误信息<br>函数中的错误信息，也有可能作为返回值的一部分，因为默认这些错误信息会直接输出。<br>27<br>Function ErrorTest()<br>{</p>\n<pre><code>#该进程不存在\nStop-Process -Name &quot;www.mossfly.com&quot;\n</code></pre><p>}<br>ErrorTest</p>\n<p>Stop-Process : 找不到名为“<a href=\"http://www.mossfly.com”的进程。请验证该进程名称，然后再次调用\" target=\"_blank\" rel=\"noopener\">www.mossfly.com”的进程。请验证该进程名称，然后再次调用</a> cmdlet。<br>所在位置 C:UsersbaozhenDesktoptest.ps1:6 字符: 17</p>\n<ul>\n<li><p>Stop-Process &lt;&lt;&lt;&lt;  -Name “<a href=\"http://www.mossfly.com&quot;\" target=\"_blank\" rel=\"noopener\">www.mossfly.com&quot;</a></p>\n<ul>\n<li>CategoryInfo          : ObjectNotFound: (<a href=\"http://www.mossfly.com:String\">www.mossfly.com:String</a>) [Stop-P<br>rocess], ProcessCommandException</li>\n<li>FullyQualifiedErrorId : NoProcessFoundForGivenName,Microsoft.PowerShell.<br>Commands.StopProcessCommand</li>\n</ul>\n<p>很明显，类似这样的错误提示信息，对调试程序很重要，但如果你觉得它不重要，特意要隐藏，可以使用$ErrorActionPreference进行设置。</p>\n<p>Function ErrorTest()<br>{<br>#从这里开始隐藏所有的错误信息<br>$ErrorActionPreference=”SilentlyContinue”<br>Stop-Process -Name “<a href=\"http://www.mossfly.com&quot;\" target=\"_blank\" rel=\"noopener\">www.mossfly.com&quot;</a><br>#该进程不存在<br>}</p>\n</li>\n</ul>\n<p>#错误信息不会输出<br>ErrorTest<br>但是上面的做法并不明智，因为这样可能错过其它错误提示。所以最好的方式是处理完后，对$ErrorActionPreference进行复位。<br>Function ErrorTest()<br>{</p>\n<pre><code>#从这里开始隐藏所有的错误信息\n$ErrorActionPreference=&quot;SilentlyContinue&quot;\nStop-Process -Name &quot;www.mossfly.com&quot;\n#该进程不存在\n\n#恢复$ErrorActionPreference,错误开始输出\n$ErrorActionPreference=&quot;Continue&quot;\n\n2/0\n</code></pre><p>}<br>ErrorTest<br>试图除以零。</p>\n<p>所在位置 行:9 字符: 7</p>\n<ul>\n<li>2/ &lt;&lt;&lt;&lt; 0</li>\n<li>CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException</li>\n<li>FullyQualifiedErrorId : RuntimeException</li>\n</ul>\n<p>PowerShell: Try…Catch…Finally 实现方法<br><a href=\"https://www.cnblogs.com/digjim/archive/2012/06/22/2558458.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/digjim/archive/2012/06/22/2558458.html</a></p>\n<p> Powershell错误处理，try catch finally<br><a href=\"https://www.cnblogs.com/micro-chen/p/5941660.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/micro-chen/p/5941660.html</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Powershell","path":"api/tags/Powershell.json"}]}