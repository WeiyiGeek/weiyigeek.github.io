<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeiyiGeek Blog</title>
  
  <subtitle>花开堪折直须折，莫待无花空折枝。</subtitle>
  <link href="https://blog.weiyigeek.top/atom.xml" rel="self"/>
  
  <link href="https://blog.weiyigeek.top/"/>
  <updated>2023-01-09T01:24:47.021Z</updated>
  <id>https://blog.weiyigeek.top/</id>
  
  <author>
    <name>WeiyiGeek</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程世界/前端技术/1.全栈之路-前端基础入门必备知识体系笔记</title>
    <link href="https://blog.weiyigeek.top/2023/1-9-index.html"/>
    <id>https://blog.weiyigeek.top/2023/1-9-index.html</id>
    <published>2023-01-09T01:24:47.021Z</published>
    <updated>2023-01-09T01:24:47.021Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>15.计算机科学导论之数据压缩学习笔记</title>
    <link href="https://blog.weiyigeek.top/2023/1-1-706.html"/>
    <id>https://blog.weiyigeek.top/2023/1-1-706.html</id>
    <published>2023-01-01T08:35:30.000Z</published>
    <updated>2023-01-10T02:22:14.385Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="计算机科学导论学习笔记"><a href="#计算机科学导论学习笔记" class="headerlink" title="计算机科学导论学习笔记"></a>计算机科学导论学习笔记</h1><h2 id="第-5-部分-数据安全与人工智能"><a href="#第-5-部分-数据安全与人工智能" class="headerlink" title="第 5 部分 数据安全与人工智能"></a>第 5 部分 数据安全与人工智能</h2><p>此部分包含第15、16、17和18章，包含了计算机中传输的数据压缩(有损与无损)、网络数据在传输过程中如何保证其数据安全, 讨论计算理论，即哪些是可计算的，哪些是不可计算的，最后介绍当前热门的人工智能(AI)的观点，加深我们对计算机数据处理的的认识，为后续学习扩展基础认识。</p><p>原文地址: </p><a id="more"></a><h3 id="第15章-数据压缩"><a href="#第15章-数据压缩" class="headerlink" title="第15章 数据压缩"></a>第15章 数据压缩</h3><h4 id="15-1-前言简述"><a href="#15-1-前言简述" class="headerlink" title="15.1 前言简述"></a>15.1 前言简述</h4><p>近年来，随着计算机技术以及硬件设备技术飞速发展，改变了我们传输和存储数据的方式。</p><p>例如，光纤电缆使我们能更加快速地传输数据，DVD技术使得在较小物理媒介上存储大量的数据成为可能, 此时人们的要求也正逐渐增加。<br>今天人们希望在更短的时间内下载更多的数据（如看哔哩哔哩视频、抖音、文件下载等），同样，人们也希望能在更小的空间存储更多的数据，即当在同一传输速率下，文件越小则下载越快，所以为了文件能传输更快更小，我们需要对其数据进行压缩传输，这将是本章讲解的重点。</p><p>敲黑板：压缩数据通过部分消除数据中内在的冗余来减少发送或存储的数据量。</p><p>当我们产生数据的同时，冗余也就产生了。通过数据压缩，提高了数据传输和存储的效率，同时保护了数据的完整性。</p><p>数据压缩意味着发送或是存储更少的位数，虽然有很多编码方式用于此目的，通常方法分为两大类<code>无损压缩和有损压缩</code>, 如下图所示两类以及每类中常用的一些方法。</p><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109154203406.png" alt="WeiyiGeek.数据压缩方法" title="" class="">                <p>WeiyiGeek.数据压缩方法</p>            </figure><p><strong>Q: 无损压缩和有损压缩有何区别?</strong></p><ul><li><p>无损压缩方法中: 接收的数据是发送数据的完全复制。</p></li><li><p>有损压缩方法中: 接收的数据并不需要是所发送数据的完全复制。</p><blockquote><p>三种有损压缩方法分别是 JPEG、MPEG和MP3。</p></blockquote></li></ul><p><br/></p><h4 id="15-2-无损压缩"><a href="#15-2-无损压缩" class="headerlink" title="15.2 无损压缩"></a>15.2 无损压缩</h4><p><strong>Q: 什么是无损压缩?</strong></p><blockquote><p>无损压缩是一种数据存储技术，它可以把文件的大小缩小，同时保证文件的完整性和原始质量不变。</p><p>这是一种非常有用的技术，能够节省存储空间，减少上传和下载时间，还可以解决通过网络传输大文件时网络流量的问题。</p></blockquote><p>简单的说： 在无损数据压缩中，数据的完整性是受到保护的，原始数据与压缩和解压后的数据完全一样。</p><p>常见三种无损压缩方法分别是 <code>游程长度编码、赫夫曼编码 和 Lempel Ziv编码</code>。</p><p><br/></p><h5 id="1-游程长度编码"><a href="#1-游程长度编码" class="headerlink" title="(1) 游程长度编码"></a>(1) 游程长度编码</h5><p>它是最简单的压缩方法，可以用来压缩由任何符号组成的数据，它不需要知道字符出现频率的有关知识（赫夫曼编码则需要），并且当数据中由0和1表示时，该方式编码十分有效。</p><p>算法的大致思想是<code>将数据中连续重复出现的符号用一个字符和这个字符重复的次数来代替</code>。</p><p><strong>示例1</strong>，如AAAAAAAA可以用A08来代替，下图中显示此简单压缩方法，注意此处，我们使用固定位数（2位）的数字来表示数。<br><strong>示例2</strong>，在位模式中，如果数据只用两种符号（0和1）,并且一种符号比另一种符号使用更为频繁，那么这种压缩方法就更有效。例如，假设一段数据里面有很多的0而1很少，那么，就可以通过在发送（或存储）时只标记在两个1中间有多少个0来减少数据的位数，注意此处，我们使用4位二进制数（无符号整数）计数。</p><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109155437902.png" alt="WeiyiGeek.游程长度编码示例" title="" class="">                <p>WeiyiGeek.游程长度编码示例</p>            </figure><p>温馨提示：用4位二进制压缩时，如果连续的0多于15个，它们将被分为2组或者更多的组。<br>例如，连续的25个0编码为1111 1010.现在的问题则是：接收者如何知道这是25个0而不是连续15个0后接着1个1,然后再接10个0?答案是，如果第一个计数是1111, 我们就默认下一个4位模式仍然是用于表示连续0的数目。<br>而另一个问题又产生了：假如2 个1之间刚好15个0时又怎么办呢？这种情况下的模式是1111后再紧跟0000。</p><p>总结：在游程长度编码中，重复出现的符号被该符号和表示该符号重复的数字所替换。</p><p><br/></p><h5 id="2-赫夫曼编码"><a href="#2-赫夫曼编码" class="headerlink" title="(2) 赫夫曼编码"></a>(2) 赫夫曼编码</h5><p>赫夫曼编码是一种数据压缩编码技术，它利用变长编码来将信息转换成可编码的数据序列。它把比特表示为0或1，然后根据给定信息的出现次数以及其他一些给定的因素，来定义不同的编码长度。</p><p>例如，如果给定信息出现频率较高，则可以使用更短的编码，而较低频率的信息可以使用更长的编码。</p><p>例如，假设有一篇文本文件只用到了5个字符（A, B, C, D, E），在给每个字符分配位模式前，首先根据每个字符的使用频率给它们分配相应的权值。</p><blockquote><p>假定，字符A出现的频率为17%，字符B出现的频率为12%，字符C出现的频率为12%，字符D出现的频率为27%，字符E出现的频率为32%等</p><p>A - 17 , B - 12 , C - 12 , D - 27，E - 32;</p></blockquote><p>一旦建立了各个字符的权值后，就可以根据这些值构造一棵树，它遵循以下三个基本步骤：</p><p>1）将全部字符排成一排。每个字符现在都是树的最底层节点。</p><p>2）找出权值最小的两个节点并由它们合成第三个节点，产生一棵简单的二层树。新节点的权值由最初的两个节点的权值结合而成。这个节点，在叶子节点的上一层，可以再与其他的节点结合。请记住，选择所结合的两个节点的权值和必须比其他所有可能的选择小。</p><p>3 ）重复步骤2,直到各个层上的所有节点结合成为一棵树。</p><p>当树的构造完成后，利用它来给各个字符分配编码。</p><p>首先，给每个分支分配1位，从根（顶部节点）开始，给左分支分配0,给右分支分配1。</p><p>然后，在其他各个节点重复这一模式。</p><p>此时，字符的编码是这样得到的，首先从根开始，沿着分支到达字符所在的位置，该字符的编码就是所经过的路径上各分支位值的顺序排列。如下图所示，给出了最终的生成树和相对应的编码，注意我们移动了叶子节点以使整棵树更像一棵二叉树。</p><p><img src="E:\githubProject\blogimage\2022\8\image-20230109160530223.png" alt="WeiyiGeek.赫夫曼编码"></p><p>温馨提示: </p><p>首先，出现<code>频率高的字符</code>（A、D和E）的编码要比出现<code>频率低的字符</code>（B和C）的<code>编码短</code>（层级少），此处可以通过比较分配给各个字符的编码适当的位长度看出。</p><p>其次，在这个编码系统中，没有一个编码是其他编码的前缀。图中2位编码00、10或者 11 都不是其他两种编码（<code>010, 011</code>）中任何一个的前缀。换句话说，不存在一个3位编码是以00、10或11开头的，这个特性使得赫夫曼编码是一种即时的编码，后续将会在讨论赫夫曼编码的编码和译码时解释这个问题。</p><p><strong> 1) 编码</strong></p><p>此处，假定也是使用5个字符的编码压缩文档，如下图所示是编码前后的文本<code>EAEBAECDEA</code>。</p><p>首先，注意，即使是这样小的不切实际的编码压缩也有其意义。如果想在不压缩成赫夫曼编码的情况下就发送这个文本，那么需要给每个字符一个3位编码，总共需传送30位，而用赫夫曼编码则只发送22位。</p><p>其次，注意，我们没有在每个字符的编码中间加上分隔符。我们只是一个接一个地写代码。赫夫曼编码的好处就是没有一个编码是其他编码的前缀，这样在编码过程中没有二义性，接收方接收到数据解压缩时也不会产生二义性。</p><p><strong> 2) 解码(译码)</strong></p><p>接收方译码十分容易，当接收方收到前2位数的时候，它不必等收到下一个位就可以译码。它知道应该译码为E。</p><p>其原因是，这两位不是任何3位码前缀（没有11开头的3位码）。同样，当接收方收到下两位时（00）时，它也知道应该翻译为A。再下两位以同样的方式翻译（11 一定是E）。然而，当收到第7和第8位时，计算机知道需要等下一位，<code>因为编码01不在编码表里</code>。当收到下一位（0）时，它将这3位连在一起（010）翻译为B。</p><p>这就是赫夫曼编码称为即时码的原因。译码器可以即时明确地翻译出编码（在最小位数下）。</p><p><img src="E:\githubProject\blogimage\2022\8\image-20230109161639412.png" alt="WeiyiGeek.赫夫曼编码与译码"></p><p>总结:  在赫夫曼编码中，编码的长度是符号频率的函数，出现频率越高的符号相对于出现频率较低的符号编码长度越短（层级更浅）。</p><p><br/></p><h5 id="3-Lempel-Ziv-编码"><a href="#3-Lempel-Ziv-编码" class="headerlink" title="(3) Lempel Ziv 编码"></a>(3) Lempel Ziv 编码</h5><p>Lempel-Ziv (LZ) 编码是由 Abraham Lempel 和 Jacob Ziv (用其开发者名字命名)在 1970 年代末开发的无损数据压缩算法的一类，此算法通常用于压缩和解压缩文件，如归档文件、图像和视频处理文件、文本和图形编辑文件以及音频和视频传输文件。该算法旨在通过创建一本密钥代码表来减少数据的大小，用于对数据进行编码和解码，这些代码是从数据本身生成的，通常用作熵编码的一种形式。</p><p>简单的说，该算法是基于字典的自适应编码的思想，在通信会话的时候它将产生一个字符串字典（一个表），如果接收和发送双方都有这样的字典，那么字符串可以由字典中的索引代替, 以减少通信的数据传输量。</p><p>尽管方案看似简单，但执行起来仍然有些困难。</p><p>首先，怎样为每一次通信会话产生一个字典（由于字符串的长度不定，很难找到通用的字典）？</p><p>其次，接收方怎样获得发送方的字典（如果同时发送字典，就增加了额外的数据，这样，与我们压缩的目的是相悖的）？</p><p>例如，针对 BAABABBBAABBBBAA 这个特殊的字符串进行讨论，使用LZ算法的简单版本，整个过程分为两个阶段，即<code>压缩字符串和解压缩字符串</code>。</p><p><strong>1) 压缩</strong></p><p>此阶段，建立字典索引和压缩字符串。</p><p>首先，算法从未压缩的字符串中选取最小的子字符串，这些子字符串在字典中不存在。</p><p>然后，将这个子字符串复制到字典（作为一个新的记录）并为它分配一个索引值。压缩时，除了最后一个字母之外，其他所有字符被字典中的索引代替。</p><p>最后，将索引和最后一个字母插入压缩字符串，比如ABBB,在字典中找到ABB和它的索引4,得到的压缩字符串就是4B。</p><p><img src="E:\githubProject\blogimage\2022\8\image-20230109163420781.png" alt="WeiyiGeek.Lempel-Ziv-编码示例"></p><p><strong>2) 解压</strong></p><p>解压是压缩的逆过程，该过程从压缩的字符串中取出子字符串，然后尝试按照字典中所列出的记录还原相应的索引号为对应的字符串。</p><p>字典开始为空，之后会逐渐地建立起来，该过程的总体思路是当一个索引号被接收时，在字典中已经存在了与其相应的记录。</p><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109163641532.png" alt="WeiyiGeek.Lempel-Ziv 解码" title="" class="">                <p>WeiyiGeek.Lempel-Ziv 解码</p>            </figure><p>总结：在LZ编码中，重复的字符串或字以变量形式保存，字符串或字用变量的索引号代替，LZ编码在接收方和发送方都需要一个字典和一个算法。</p><p><br/></p><h4 id="15-3-有损压缩"><a href="#15-3-有损压缩" class="headerlink" title="15.3 有损压缩"></a>15.3 有损压缩</h4><p>有损压缩是指在压缩文件的同时，会牺牲一部分文件的质量来节省存储空间，有损压缩的文件在解压缩后，质量会有损失，但这也是为了节省存储空间，所以有损压缩通常用于图像和音频文件。</p><p>常见三种有损压缩方法分别是<code>联合图像专家组（JPEG）用来压缩图片和图像，运动图像专家组（MPEG）用来压缩视频，MPEG第三代音频压缩格式（MP3）则用来压缩声音</code>。</p><h5 id="1-图像压缩-JPEG"><a href="#1-图像压缩-JPEG" class="headerlink" title="(1) 图像压缩-JPEG"></a>(1) 图像压缩-JPEG</h5><p>通过前面学习，我们知道一幅图像可以通过一个二维数组（表）来表示图像元素（像素）, 例如，在JPEG中，一幅灰度图像将被分成许多8X8的像素块，假设图片尺寸<code>640(宽)X480(高)</code>则像素为<code>307 200</code>。</p><ul><li><p>如果图像是灰度的，那么像素可以由一个8位整数（256 个灰度级别）来表示，则<code>307 200像素图片 x 8 位，用2 457 600 位来表示</code>。</p></li><li><p>如果图像是彩色的，每个像素可以由24位表示（3X8位），其中每8位表示RBG颜色系统中的一个颜色，则<code>307 200像素的图片 x 24 位，用7 372 800位来表示</code>。</p></li></ul><p>然而，将图像划分成块的目的是考虑到减少计算量。显而易见，此时每幅图像的数学运算量是单元数的平方。也就是说，整个图像需要<code>307 200^2</code>次运算（<code>94 371 840 000</code>次运算），而如果使用JPEG则需要对每个块进行64^2次运算，总共是<code>64^2X(640/8)X(480/8)</code>,即<code>19 660 800</code> 次运算，这将原来的运算量减少到4800分之一。</p><p>其图像处理简约过程如下所示:</p><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109170609373.png" alt="WeiyiGeek.Jpeg处理过程" title="" class="">                <p>WeiyiGeek.Jpeg处理过程</p>            </figure><p>JPEG的整体思想是将图像变换成一个数的线性（矢量）集合来揭示冗余，这些冗余（缺乏变化的）可以通过使用前面学过的无损压缩的方法来除去。</p><p><strong>1) 离散余弦变换</strong><br><em>Q: 什么是离散余弦变换?</em></p><p>离散余弦变换（<code>Discrete Cosine Transform，DCT</code>）是一类函数变换，可以将一个信号（或图像）转换为其傅里叶变换（或频域）的一种类似形式，即此种变换改变了64个值以使相邻像素之间的关系得以保持，但同时又能够揭示冗余。</p><p>它是一种非常高效的图像压缩技术，具有良好的信号表示性能。它的数学表达式为：</p><p><code>F[u][v] = 2/N * sum(sum(f[x][y]*cos[(2*x+1)*u*(pi/2*N)),(2*y+1)*v*(pi/2*N)))</code></p><p>其中，F[u][v]是变换后的矩阵，f[x][y]是原矩阵，N是矩阵的大小，u,v是矩阵的行和列号。</p><p>为了理解该变换的本质，让我们研究以下三种情况变换后的结果，其中<code>P(x,y)</code>定义了每个块上的值；<code>T（m, n）</code>则定义了变换后的块的值。</p><ul><li>情况1</li></ul><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109172647954.png" alt="WeiyiGeek.情况1" title="" class="">                <p>WeiyiGeek.情况1</p>            </figure><ul><li>情况2</li></ul><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109172711466.png" alt="WeiyiGeek.情况2" title="" class="">                <p>WeiyiGeek.情况2</p>            </figure><ul><li><p>情况3</p><p><img src="E:\githubProject\blogimage\2022\8\image-20230110090944711.png" alt="WeiyiGeek.情况3"></p></li></ul><p>从上述图中可知，转换从P表生成T表，DC值是像素的平均值，AC值显示变化，邻近像素缺少变化的生成0，但需要注意DCT是可逆的。</p><p><strong>2) 量化</strong><br>生成T表后，这些值将被量化以减少需要编码的位数。量化过程用一个常量来除位数，然后舍弃小数部分。这样可以更加减少需要编码的位数。在大多数实现方法中，通过一张量化表（8X8 ）定义了如何量化每个值，其中除数取决于T表位置上的值。这样做可以对每一个特殊的应用程序优化位数和0的个数。<br>注意在整个过程中只有量化阶段是不可逆的。在这里所失去的一些信息是不能恢复的。事实上，JPEG之所以称为有损压缩就是因为量化过程所带来的损失。</p><p><strong>3) 压缩</strong><br>量化后，将表中的值读出并去掉多余的0。但是，为了把0 聚集起来，整个压缩过程以z字形按<code>对角线读取表</code>，而不是按行或列。原因是如果图像没有很好的变化，T表底部的右下角将全为0。</p><p>例如，下图所示JPEG在压缩阶段通常使用游程长度编码来压缩从Z字形线性化读取的位模式。</p><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230109173916196.png" alt="WeiyiGeek.压缩读表" title="" class="">                <p>WeiyiGeek.压缩读表</p>            </figure><p>总结：联合图像专家组(JPEG)是一种用来压缩图形和图像的方法，JPEG过程包括划分块、离散余弦变换、量化以及无损压缩。</p><h5 id="2-视频压缩-MPEG"><a href="#2-视频压缩-MPEG" class="headerlink" title="(2) 视频压缩-MPEG"></a>(2) 视频压缩-MPEG</h5><p>在讲解前，我们需要先了解视频压缩(减少文件大小)有那些方式，其大致如下:</p><ol><li>降低视频的分辨率：主要通过降低水平和垂直像素分辨率来降低视频的分辨率，用较低的分辨率来表现相同的画面，节省视频文件的大小。</li><li>降低视频的帧率：也就是每秒钟播放多少张图像，通常情况下每秒钟播放的帧数越高，画面质量也越高，但是要想节省视频文件大小，可以选择降低帧率来节省视频的文件大小。</li><li>使用编码器压缩视频：视频文件随着视频画面的复杂性会变得越来越大，这种情况下可以使用编码器对视频进行压缩，通常可以采用H.264和H.265等编码器进行压缩，此方法可以明显地节省视频文件的大小。</li></ol><p>今天讲解的<code>运动图像专家组(MPEG,Moving Picture Experts Group)</code>属于其中之一，它是一种专业的图像和视频编码标准，其原理是视频每一帧每个帧都是一幅图像，帧是像素在空间上的组合，视频是一幅接一幅发送的帧的时间组合，而压缩视频，就是对每帧空间上的压缩和对一系列帧时间上的压缩。</p><p><strong>空间压缩:</strong> 每一帧的空间压缩使用JPEG，每一帧都是一幅画可以独立压缩。</p><p><strong>时间压缩:</strong> 在此压缩中多余的镇将被丢弃，一般来说，人类可以感知<code>15-30</code>帧每秒的视频，而视频编辑常用的标准是<code>24-30</code>帧每秒，所以大多数连续帧几乎是一样的。</p><p>例如，一个 20:1 的 Jpeg 压缩图像每帧需要发送 368 640 位，每秒 30 帧则需要传输11 059 200 bit/s，显然我们需要减少该数量。</p><p>为了压缩时间数据，MPEG方法首先把帧分为三类：<code>I-帧、P-帧、B-帧</code>。</p><ul><li><p>I-帧 :即内部编码(I-帧 )，是一个独立帧，该帧与任何其他帧(即在其前发送的帧或者在其后发送的帧)无关。它们以周期性间隔出现(比如:每9个帧中有一个I-帧)。I- 帧必须周期性出现，因为该帧的突然变化将使得其前面的帧和后面的帧不能正常显示。同样，当播放视频的时候，观众可能会随时调整接收机。如果仅仅在播放开始时有一个1- 帧，那么随后调整频道的观众将不能收到完整的画面。I-帧独立于其他帧之外，而且不能由其他帧构造。</p></li><li><p>P-帧:即预(P-帧)与前面的  I-帧或者P-帧有关联。话说，每个P-帧都从前面帧变化而来，不过变化不能覆盖大的部分。</p><p>例如，对于一个快速移动的目标，新变化也许没有记录在P-帧中，P-帧可以通过先前I-帧的或P-帧产生。P-帧携带的信息比其他类型的帧少，而且压缩后会更少。</p></li><li><p>B-帧:即双向帧(B-帧)，与前面和后续的I-帧或P-帧有关系，换句话说，每个B顿都与过去和将来有关系，注意 B-帧不会与另一个 B -帧有关系。</p><p>下图显示了的样本序列以及它们是如何构造的，需注意一下译码，译码过程应该在 B-帧之前接收到 P-帧，基于这个原因，发送的顺序与它们显示在接收应用中的顺序不同。帧发送顺序为:<code>I，P，B，B，P，B，B，I</code>。</p></li></ul><figure class="image-box">                <img src="E:\githubProject\blogimage\2022\8\image-20230110094915001.png" alt="WeiyiGeek.MPEG帧" title="" class="">                <p>WeiyiGeek.MPEG帧</p>            </figure><p><strong>MPEG 编码过程</strong></p><p>分为三个主要步骤：<code>图像或视频的量化、分块和编码</code>。</p><p>1.量化：将图像或视频信号采样，并将所得信号转换成数字，消除不必要的量化误差。</p><p>2.分块：将图像或视频划分为不同的块，以便于编码。</p><p>3.编码：使用现有的压缩算法和编码器，按照设定的标准，将分块的图像或视频信号压缩，生成最终的数据流。</p><p><strong>MPEG 版本</strong></p><p>上面我们讨论的是 MPEG-1版本，除此之外MPEG 有许多版本如下所示：</p><ol><li>MPEG-1：用于CD存储</li><li>MPEG-2：用于DVD存储</li><li>MPEG-3：用于HDTV存储</li><li>MPEG-4：用于多媒体应用，支持包括视频和音频在内的多种媒体格式</li><li>MPEG-7：用于多媒体数据中提取信息和特征的标准，使用XML描述元数据和对视频中所含内容的描述的标准。</li><li>MPEG-21：用于在多媒体环境下分享和交换数据的标准</li></ol><p>总结：运动图像专家组(MPEG)是一种用来压缩视频的方法，MPEG包括空间和时间压缩，前者和JPEG相似，后者则去掉了多余的帧。</p><h5 id="3-音频压缩"><a href="#3-音频压缩" class="headerlink" title="(3) 音频压缩"></a>(3) 音频压缩</h5><p>音频压缩可以用来处理语音和音乐，对于语音，我们需要压缩一个64 kHz的数字化信号，而对于音乐我们需要压缩一个1.411 MHz的信号。</p><p>有两类技术用来进行音频压缩：<code>预测编码</code>和<code>感知编码</code>。</p><ul><li><p>预测编码: 将样本间的差别被编码，而不是对所有的样本值进行编码，通常应用与语言之上，已经定义的标准有<code>GSM （13 kbps）、G.729 （8 kbps）和G.723.3（6.4 kbps 或5.3 kbps）</code>。</p></li><li><p>感知编码: 感知编码是基于心理声学的，心理声学是一门研究人类是如何感知声音的科学，用来创建CD质量音频最常用的压缩技术是基于感知编码技术的，此类型音频至少为1.411 Mbps，MP3 （MPEG第三代音频压缩格式，PS: 它是MPEG标准的一部分:card_index_dividers: ）使用的就是这种技术，MP3使用这两种现象（频率掩盖和时间掩盖）来压缩音频信号，该技术分析音谱并把音谱分成几个组，0位被赋给了那些频率范围被完全掩盖的，小数值的位被赋给了那些频率范围部分被掩盖的。</p><blockquote><p>例如，在一个有高音重金属演出的房间内，我们就不能听见我们舞伴的说话声。在时间掩盖中，一个高音可以短时间内降低我们听觉的灵敏度，甚至在声音停止之后。</p></blockquote></li></ul><p>MP3有三种速率：<code>96 kbps、128 kbps和160 kbps</code>，速率是基于原始模拟音频的频率范围的。</p><p><strong>音频压缩方式</strong></p><p>当前音频压缩方式有那些（PS:我们在前面第二章讨论过）：</p><ol><li><p>MP3（MPEG-1 Layer 3）；</p></li><li><p>AAC（Advanced Audio Coding）；</p></li><li><p>WMA（Windows Media Audio）；</p></li><li><p>OGG（Ogg Vorbis）；</p></li><li><p>FLAC（Free Lossless Audio Codec）；</p></li><li><p>ALAC（Apple Lossless Audio Codec）；</p></li><li><p>ATRAC3（Adaptive Transform Acoustic Coding 3）；</p></li><li><p>WV（WavPack）；</p></li><li><p>APE（Monkey’s Audio）。</p></li></ol><p>总结: MPEG第三代音频压缩格式(MP3)是MPEG标准的一部分。MP3使用感知编码技术压缩CD质量音频。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;计算机科学导论学习笔记&quot;&gt;&lt;a href=&quot;#计算机科学导论学习笔记&quot; class=&quot;headerlink&quot; title=&quot;计算机科学导论学习笔记&quot;&gt;&lt;/a&gt;计算机科学导论学习笔记&lt;/h1&gt;&lt;h2 id=&quot;第-5-部分-数据安全与人工智能&quot;&gt;&lt;a href=&quot;#第-5-部分-数据安全与人工智能&quot; class=&quot;headerlink&quot; title=&quot;第 5 部分 数据安全与人工智能&quot;&gt;&lt;/a&gt;第 5 部分 数据安全与人工智能&lt;/h2&gt;&lt;p&gt;此部分包含第15、16、17和18章，包含了计算机中传输的数据压缩(有损与无损)、网络数据在传输过程中如何保证其数据安全, 讨论计算理论，即哪些是可计算的，哪些是不可计算的，最后介绍当前热门的人工智能(AI)的观点，加深我们对计算机数据处理的的认识，为后续学习扩展基础认识。&lt;/p&gt;
&lt;p&gt;原文地址: &lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://blog.weiyigeek.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="计算机科学导论" scheme="https://blog.weiyigeek.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>23-Kubernetes扩展学习实践笔记</title>
    <link href="https://blog.weiyigeek.top/2022/12-18-691.html"/>
    <id>https://blog.weiyigeek.top/2022/12-18-691.html</id>
    <published>2022-12-18T02:37:47.000Z</published>
    <updated>2023-01-03T13:03:19.928Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-如何优雅将K8S资源清单中的元数据metadata，通过环境变量注入到Pod容器"><a href="#0x00-如何优雅将K8S资源清单中的元数据metadata，通过环境变量注入到Pod容器" class="headerlink" title="0x00 如何优雅将K8S资源清单中的元数据metadata，通过环境变量注入到Pod容器?"></a>0x00 如何优雅将K8S资源清单中的元数据metadata，通过环境变量注入到Pod容器?</h2><p>描述: Kubernetes 自从1.7开始，可以在 pod 的container 内获取pod的spec,metadata 等源数据信息，实际上是使用 downward API 通过环境变量把自身的信息呈现给 Pod 中运行的容器。</p><p>pod一共有三种类型容器:<br>• Infrastructure Container：基础容器，维护整个Pod网络空间 。<br>• InitContainers：初始化容器，先于业务容器开始执行 。<br>• Containers：业务容器，如果有多个通常是并行启动 。</p><p><strong>需求</strong>: 假如你有一个根据主机名词尾缀进行选择要使用GPU资源序号，或者是获取资源控制器生成的Pod相关IP或标签信息，此时都可以使用注入环境变量的方式（希望对大家有帮助）</p><p><strong>目标</strong>：通过使用 env 和 fieldRef，将 k8s 的源数据和容器字段变成环境变量注入到了容器中。</p><p>当前资源控制器env对象 (<code>valueFrom.fieldRef.fieldPath</code>) 支持的注入字段信息如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pod 名称（主机名称）</span></span><br><span class="line">metadata.name</span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">metadata.namespace</span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line">metadata.labels[<span class="string">''</span>]</span><br><span class="line"><span class="comment"># 注释</span></span><br><span class="line">metadata.annotations[<span class="string">''</span>]</span><br><span class="line"><span class="comment"># 节点名词</span></span><br><span class="line">spec.nodeName</span><br><span class="line"><span class="comment"># 服务账户名词</span></span><br><span class="line">spec.serviceAccountName</span><br><span class="line"><span class="comment"># 宿主机IP地址信息</span></span><br><span class="line">status.hostIP</span><br><span class="line"><span class="comment"># Pod IPV4地址信息</span></span><br><span class="line">status.podIP</span><br><span class="line"><span class="comment"># 获取 Pod 的 IPv4 和 IPv6 地址</span></span><br><span class="line">status.podIPs</span><br></pre></td></tr></table></figure></p><p><strong>示例</strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">dapi-envars-fieldref</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">devtest</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">downwardAPI</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line"><span class="attr">    demo:</span> <span class="string">dapi-envars</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">busybox:latest</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">[</span> <span class="string">"sh"</span><span class="string">,</span> <span class="string">"-c"</span><span class="string">]</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">          <span class="string">echo</span> <span class="bullet">-en</span> <span class="string">'\n'</span><span class="string">;</span></span><br><span class="line">          <span class="string">printenv</span> <span class="string">MY_NODE_NAME</span> <span class="string">MY_POD_NAME</span> <span class="string">MY_POD_NAMESPACE;</span></span><br><span class="line">          <span class="string">printenv</span> <span class="string">MY_POD_IP</span> <span class="string">MY_POD_IPS</span> <span class="string">MY_POD_SERVICE_ACCOUNT;</span></span><br><span class="line">          <span class="string">printenv</span> <span class="string">MY_POD_LABELS_APP</span> <span class="string">MY_POD_ANNOTATIONS_DEMO;</span></span><br><span class="line">          <span class="string">printenv</span> <span class="string">MY_CPU_REQUEST</span> <span class="string">MY_CPU_LIMIT;</span></span><br><span class="line">          <span class="string">printenv</span> <span class="string">MY_MEM_REQUEST</span> <span class="string">MY_MEM_LIMIT;</span></span><br><span class="line">          <span class="string">sleep</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line">        <span class="string">done;</span></span><br><span class="line"><span class="attr">      resources:</span></span><br><span class="line"><span class="attr">        requests:</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="string">"32Mi"</span></span><br><span class="line"><span class="attr">          cpu:</span> <span class="string">"125m"</span></span><br><span class="line"><span class="attr">        limits:</span></span><br><span class="line"><span class="attr">          memory:</span> <span class="string">"64Mi"</span></span><br><span class="line"><span class="attr">          cpu:</span> <span class="string">"250m"</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">NODE_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_NODE_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line"><span class="attr">       - name:</span> <span class="string">HOST_IP</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">status.hostIP</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_IP</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_IPS</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">status.podIPs</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_SERVICE_ACCOUNT</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">spec.serviceAccountName</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_LABELS_APP</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.labels['app']</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_POD_ANNOTATIONS_DEMO</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.annotations['demo']</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_CPU_REQUEST</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">requests.cpu</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_CPU_LIMIT</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">limits.cpu</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_MEM_REQUEST</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">requests.memory</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">MY_MEM_LIMIT</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">limits.memory</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>运行Pod后查看注入的环境变量:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">~$ kubectl apply -f <span class="built_in">test</span>-container.yaml</span><br><span class="line">pod/dapi-envars-fieldref created</span><br><span class="line"></span><br><span class="line">~$ kubectl logs -n devtest dapi-envars-fieldref</span><br><span class="line">dapi-envars-fieldref</span><br><span class="line">devtest</span><br><span class="line">10.66.182.247</span><br><span class="line">10.66.182.247</span><br><span class="line">default</span><br><span class="line">downwardAPI</span><br><span class="line">dapi-envars</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">33554432</span><br><span class="line">67108864</span><br><span class="line"></span><br><span class="line">~$ kubectl <span class="built_in">exec</span> -n devtest dapi-envars-fieldref -- printenv</span><br><span class="line">HOSTNAME=dapi-envars-fieldref</span><br><span class="line">MY_MEM_REQUEST=33554432</span><br><span class="line">HOST_IP=192.168.12.226</span><br><span class="line">MY_POD_NAME=dapi-envars-fieldref</span><br><span class="line">MY_POD_NAMESPACE=devtest</span><br><span class="line">MY_POD_IP=10.66.182.247</span><br><span class="line">MY_POD_IPS=10.66.182.247</span><br><span class="line">MY_POD_SERVICE_ACCOUNT=default</span><br><span class="line">MY_POD_ANNOTATIONS_DEMO=dapi-envars</span><br><span class="line">NODE_NAME=weiyigeek-226</span><br><span class="line">MY_POD_LABELS_APP=downwardAPI</span><br><span class="line">MY_CPU_REQUEST=1</span><br><span class="line">MY_CPU_LIMIT=1</span><br><span class="line">MY_MEM_LIMIT=67108864</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>实践示例:</strong> 根据Pod名称截取最后一个<code>-</code>字符后的数字来选择该Pod调用的GPU序号(即使用那一块gpu)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">devtest</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">gpu</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line"><span class="attr">    author:</span> <span class="string">weiyigeek</span></span><br><span class="line"><span class="attr">    blog:</span> <span class="string">blog.weiyigeek.top</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">gpu</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">healthcode-0</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">devtest</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">      use:</span> <span class="string">gpu</span></span><br><span class="line"><span class="attr">  serviceName:</span> <span class="string">"healthcode"</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">healthcode</span></span><br><span class="line"><span class="attr">        use:</span> <span class="string">gpu</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">workdir</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">workspace</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/storage/webapp/project/MultiTravelcodeocr</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">model</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/storage/webapp/project/.EasyOCR</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">img</span></span><br><span class="line"><span class="attr">        hostPath:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/storage/webapp/project/upfile</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">init</span>  <span class="comment"># 使用初始化容器进行相应处理</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">busybox:1.35.0</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        command:</span>  <span class="comment"># 设置 Pod 使用的 GPU 显卡序号</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"echo export CUDA_VISIBLE_DEVICES=$&#123;GPU_DEVICES##*-&#125;&gt; /app/$&#123;GPU_DEVICES&#125;"</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">GPU_DEVICES</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="comment"># - name: CUDA_VISIBLE_DEVICES    # 此种方式不行，env不能直接截取变量</span></span><br><span class="line">        <span class="comment">#   value: $&#123;GPU_DEVICES##*-&#125;</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">workdir</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/app/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">harbor.weiyigeek.top/python/easyocr-healthcode:v1.6.2</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">['/bin/bash',</span> <span class="string">'-c'</span><span class="string">,'source</span> <span class="string">/app/$&#123;HOSTNAME&#125;;</span> <span class="string">echo</span> <span class="string">$&#123;CUDA_VISIBLE_DEVICES&#125;;</span> <span class="string">python</span> <span class="string">./setup.py</span> <span class="bullet">--imgdir=/imgs</span> <span class="bullet">--logdir=</span></span><br><span class="line"><span class="string">/logs</span> <span class="bullet">--gpu=True']</span> <span class="comment"># 加载进行环境变量之中,实际上我们也可以在app容器直接在source命令前echo export CUDA_VISIBLE_DEVICES=$&#123;HOSTNAME##*-&#125;&gt; /app/$&#123;HOSTNAME&#125;使用搞定，总之条条大路通罗马，学习就是思路。</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          resources:</span></span><br><span class="line"><span class="attr">            limits:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">            <span class="comment">#  cpu: "8"</span></span><br><span class="line">            <span class="comment">#  memory: 8Gi</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">workdir</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/app/</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">workspace</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/workspace</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">model</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/root/.EasyOCR</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">img</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/imgs</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个6个pod，每个pod使用对应的GPU，例如0-0则使用0号CPU，0-1则使用1号CPU </span></span><br><span class="line">$ kubectl get pod -n devtest</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">healthcode-0-5   1/1     Running   0          15h </span><br><span class="line">healthcode-0-4   1/1     Running   0          15h</span><br><span class="line">healthcode-0-3   1/1     Running   0          15h</span><br><span class="line">healthcode-0-2   1/1     Running   0          15h</span><br><span class="line">healthcode-0-1   1/1     Running   0          15h</span><br><span class="line">healthcode-0-0   1/1     Running   0          15h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 GPU 服务器使用情况</span></span><br><span class="line">$ nvidia-smi</span><br><span class="line">Fri Dec  9 10:08:32 2022</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 465.19.01    Driver Version: 465.19.01    CUDA Version: 11.3     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|                               |                      |               MIG M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  NVIDIA Tesla V1...  Off  | 00000000:1B:00.0 Off |                    0 |</span><br><span class="line">| N/A   41C    P0    36W / 250W |   6697MiB / 32510MiB |      0%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  NVIDIA Tesla V1...  Off  | 00000000:1D:00.0 Off |                    0 |</span><br><span class="line">| N/A   51C    P0    53W / 250W |   9489MiB / 32510MiB |     14%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   2  NVIDIA Tesla V1...  Off  | 00000000:3D:00.0 Off |                    0 |</span><br><span class="line">| N/A   53C    P0    42W / 250W |   5611MiB / 32510MiB |     20%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   3  NVIDIA Tesla V1...  Off  | 00000000:3F:00.0 Off |                    0 |</span><br><span class="line">| N/A   37C    P0    35W / 250W |  10555MiB / 32510MiB |      0%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   4  NVIDIA Tesla V1...  Off  | 00000000:40:00.0 Off |                    0 |</span><br><span class="line">| N/A   45C    P0    51W / 250W |   5837MiB / 32510MiB |      5%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   5  NVIDIA Tesla V1...  Off  | 00000000:41:00.0 Off |                    0 |</span><br><span class="line">| N/A   37C    P0    37W / 250W |  10483MiB / 32510MiB |      0%      Default |</span><br><span class="line">|                               |                      |                  N/A |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                                  |</span><br><span class="line">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class="line">|        ID   ID                                                   Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|    0   N/A  N/A    167660      C   python                           6693MiB |</span><br><span class="line">|    1   N/A  N/A    166790      C   python                           9485MiB |</span><br><span class="line">|    2   N/A  N/A    165941      C   python                           5607MiB |</span><br><span class="line">|    3   N/A  N/A    165032      C   python                          10551MiB |</span><br><span class="line">|    4   N/A  N/A    164226      C   python                           5833MiB |</span><br><span class="line">|    5   N/A  N/A    163344      C   python                          10479MiB |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure></p><p>参考文章:</p><ul><li><a href="https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Containers" scheme="https://blog.weiyigeek.top/categories/Containers/"/>
    
    <category term="OperationTools" scheme="https://blog.weiyigeek.top/categories/Containers/OperationTools/"/>
    
    
    <category term="k8s" scheme="https://blog.weiyigeek.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>22-kubernetes集群中进行etcd数据快照的备份恢复</title>
    <link href="https://blog.weiyigeek.top/2022/10-15-690.html"/>
    <id>https://blog.weiyigeek.top/2022/10-15-690.html</id>
    <published>2022-10-15T06:36:30.000Z</published>
    <updated>2022-11-13T09:26:33.915Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述：在 Kubernetes 集群中所有操作的资源数据都是存储在 etcd 数据库上, 所以防止集群节点瘫痪未正常工作或在集群迁移时，以及在出现异常的情况下能尽快的恢复集群数据，则我们需要定期针对etcd集群数据进行相应的容灾操作。</p><p>在K8S集群中或者Docker环境中，我们可以非常方便的针对 etcd 数据进行备份，通我们常在一个节点上对 etcd 做快照就能够实现etcd数据的备份，其快照文件包含所有 Kubernetes 状态和关键信息， 有了etcd集群数据备份后，例如在灾难场景(例如丢失所有控制平面节点)下也能快速恢复 Kubernetes 集群，Boss再也不同担心系统起不来呢。</p><p><br/></p><h2 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h2><h3 id="1-安装的二进制-etcdctl"><a href="#1-安装的二进制-etcdctl" class="headerlink" title="1.安装的二进制 etcdctl"></a>1.安装的二进制 etcdctl</h3><p>描述: etcdctl 二进制文件可以在 <code>github.com/coreos/etcd/releases</code> 选择对应的版本下载，例如可以执行以下 <code>install_etcdctl.sh</code> 的脚本，修改其中的版本信息。</p><p>install_etcdctl.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Author: WeiyiGeek</span></span><br><span class="line"><span class="comment"># Description: etcd 与 etcdctl 下载安装</span></span><br><span class="line">ETCD_VER=v3.5.5</span><br><span class="line">ETCD_DIR=etcd-download</span><br><span class="line">DOWNLOAD_URL=https://github.com/coreos/etcd/releases/download</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download</span></span><br><span class="line">mkdir <span class="variable">$&#123;ETCD_DIR&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;ETCD_DIR&#125;</span></span><br><span class="line">wget <span class="variable">$&#123;DOWNLOAD_URL&#125;</span>/<span class="variable">$&#123;ETCD_VER&#125;</span>/etcd-<span class="variable">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz </span><br><span class="line">tar -xzvf etcd-<span class="variable">$&#123;ETCD_VER&#125;</span>-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install</span></span><br><span class="line"><span class="built_in">cd</span> etcd-<span class="variable">$&#123;ETCD_VER&#125;</span>-linux-amd64</span><br><span class="line">cp etcdctl /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure></p><p>验证安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ etcdctl version</span><br><span class="line">etcdctl version: 3.5.5</span><br><span class="line">API version: 3.5</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="2-拉取带有-etcdctl-的-Docker-镜像"><a href="#2-拉取带有-etcdctl-的-Docker-镜像" class="headerlink" title="2.拉取带有 etcdctl 的 Docker 镜像"></a>2.拉取带有 etcdctl 的 Docker 镜像</h3><p>操作流程:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 镜像拉取与容器创建。</span></span><br><span class="line">docker run --rm \</span><br><span class="line">-v /data/backup:/backup      \</span><br><span class="line">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \</span><br><span class="line">--env ETCDCTL_API=3          \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.1-0 \</span><br><span class="line">/bin/sh -c <span class="string">"etcdctl version"</span></span><br></pre></td></tr></table></figure></p><p>安装验证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3.5.1-0: Pulling from google_containers/etcd</span><br><span class="line">e8614d09b7be: Pull complete</span><br><span class="line">45b6afb4a92f: Pull complete</span><br><span class="line">.......</span><br><span class="line">Digest: sha256:64b9ea357325d5db9f8a723dcf503b5a449177b17ac87d69481e126bb724c263</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.1-0</span><br><span class="line">etcdctl version: 3.5.1</span><br><span class="line">API version: 3.5</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="3-Kubernetes-使用-etcdctl-镜像创建Pod"><a href="#3-Kubernetes-使用-etcdctl-镜像创建Pod" class="headerlink" title="3.Kubernetes 使用 etcdctl 镜像创建Pod"></a>3.Kubernetes 使用 etcdctl 镜像创建Pod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 镜像拉取</span></span><br><span class="line">crictl pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.5-0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pod 创建以及安装验证</span></span><br><span class="line">$ kubectl run etcdctl --image=registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.5-0 --<span class="built_in">command</span> -- /usr/<span class="built_in">local</span>/bin/etcdctl version</span><br><span class="line">$ kubectl logs -f etcdctl</span><br><span class="line">etcdctl version: 3.5.5</span><br><span class="line">API version: 3.5</span><br><span class="line">$ kubectl delete pod etcdctl</span><br></pre></td></tr></table></figure><p><br/></p><h2 id="0x02-备份实践"><a href="#0x02-备份实践" class="headerlink" title="0x02 备份实践"></a>0x02 备份实践</h2><h3 id="1-使用二进制安装-etcdctl-客户端工具"><a href="#1-使用二进制安装-etcdctl-客户端工具" class="headerlink" title="1.使用二进制安装 etcdctl 客户端工具"></a>1.使用二进制安装 etcdctl 客户端工具</h3><p>温馨提示: 如果是单节点 Kubernetes 我们只需要对其的 etcd 数据库进行快照备份, 如果是多主多从的集群，我们则需依次备份多个 master 节点中 etcd，防止在备份时etc数据被更改！</p><p>此处实践环境为多master高可用集群节点, 即三主节点、四从工作节点，若你对K8s集群不了解或者项搭建高可用集群的朋友，关注 WeiyiGeek 公众号回复【<code>Kubernetes学习之路汇总</code>】即可获得学习资料：<br><a href="https://www.weiyigeek.top/wechat.html?key=Kubernetes学习之路汇总" target="_blank" rel="noopener">https://www.weiyigeek.top/wechat.html?key=Kubernetes学习之路汇总</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get node</span><br><span class="line">NAME       STATUS   ROLES                  AGE    VERSION</span><br><span class="line">weiyigeek-107   Ready    control-plane,master   279d   v1.23.1</span><br><span class="line">weiyigeek-108   Ready    control-plane,master   278d   v1.23.1</span><br><span class="line">weiyigeek-109   Ready    control-plane,master   278d   v1.23.1</span><br><span class="line">weiyigeek-223   Ready    work                   278d   v1.23.1</span><br><span class="line">weiyigeek-224   Ready    work                   278d   v1.23.1</span><br><span class="line">weiyigeek-225   Ready    work                   279d   v1.23.1</span><br><span class="line">weiyigeek-226   Ready    work                   118d   v1.23.1</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>操作流程：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建etcd快照备份目录</span></span><br><span class="line">$ mkdir -pv /backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看etcd证书</span></span><br><span class="line">$ ls /etc/kubernetes/pki/etcd/</span><br><span class="line">ca.crt  ca.key  healthcheck-client.crt  healthcheck-client.key  peer.crt  peer.key  server.crt  server.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看 etcd 地址以及服务</span></span><br><span class="line">$ kubectl get pod -n kube-system  -o wide | grep <span class="string">"etcd"</span></span><br><span class="line">etcd-weiyigeek-107     1/1     Running   1   279d   192.168.12.107   weiyigeek-107   &lt;none&gt;&lt;none&gt;</span><br><span class="line">etcd-weiyigeek-108     1/1     Running   0   278d   192.168.12.108   weiyigeek-108   &lt;none&gt;&lt;none&gt;</span><br><span class="line">etcd-weiyigeek-109     1/1     Running   0   278d   192.168.12.109   weiyigeek-109   &lt;none&gt;&lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.此时在 107、 108 、109 主节点上查看你监听情况</span></span><br><span class="line">$ netstat -ano | grep <span class="string">"107:2379"</span></span><br><span class="line">tcp        0      0 192.168.12.107:2379     0.0.0.0:*               LISTEN      off (0.00/0/0)</span><br><span class="line">$ netstat -ano | grep <span class="string">"108:2379"</span></span><br><span class="line">tcp        0      0 192.168.12.108:2379     0.0.0.0:*               LISTEN      off (0.00/0/0)</span><br><span class="line">$ netstat -ano | grep <span class="string">"109:2379"</span></span><br><span class="line">tcp        0      0 192.168.12.109:2379     0.0.0.0:*               LISTEN      off (0.00/0/0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 使用etcdctl客户端工具依次备份节点中的数据</span></span><br><span class="line">$ etcdctl --endpoints=https://10.20.176.212:2379 \</span><br><span class="line">--cacert=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \</span><br><span class="line">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \</span><br><span class="line">snapshot save /backup/etcd-snapshot.db</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.020+0800"</span>,<span class="string">"caller"</span>:<span class="string">"snapshot/v3_snapshot.go:65"</span>,<span class="string">"msg"</span>:<span class="string">"created temporary db file"</span>,<span class="string">"path"</span>:<span class="string">"/backup/etcd-snapshot.db.part"</span>&#125;</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.034+0800"</span>,<span class="string">"logger"</span>:<span class="string">"client"</span>,<span class="string">"caller"</span>:<span class="string">"v3/maintenance.go:211"</span>,<span class="string">"msg"</span>:<span class="string">"opened snapshot stream; downloading"</span>&#125;</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.034+0800"</span>,<span class="string">"caller"</span>:<span class="string">"snapshot/v3_snapshot.go:73"</span>,<span class="string">"msg"</span>:<span class="string">"fetching snapshot"</span>,<span class="string">"endpoint"</span>:<span class="string">"https://10.20.176.212:2379"</span>&#125;</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.871+0800"</span>,<span class="string">"logger"</span>:<span class="string">"client"</span>,<span class="string">"caller"</span>:<span class="string">"v3/maintenance.go:219"</span>,<span class="string">"msg"</span>:<span class="string">"completed snapshot read; closing"</span>&#125;</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.946+0800"</span>,<span class="string">"caller"</span>:<span class="string">"snapshot/v3_snapshot.go:88"</span>,<span class="string">"msg"</span>:<span class="string">"fetched snapshot"</span>,<span class="string">"endpoint"</span>:<span class="string">"https://10.20.176.212:2379"</span>,<span class="string">"size"</span>:<span class="string">"112 MB"</span>,<span class="string">"took"</span>:<span class="string">"now"</span>&#125;</span><br><span class="line">&#123;<span class="string">"level"</span>:<span class="string">"info"</span>,<span class="string">"ts"</span>:<span class="string">"2022-10-23T16:32:26.946+0800"</span>,<span class="string">"caller"</span>:<span class="string">"snapshot/v3_snapshot.go:97"</span>,<span class="string">"msg"</span>:<span class="string">"saved"</span>,<span class="string">"path"</span>:<span class="string">"/backup/etcd-snapshot.db"</span>&#125;</span><br><span class="line">Snapshot saved at /backup/etcd-snapshot.db</span><br></pre></td></tr></table></figure></p><p>通过etcdctl查询Kubernetes中etcd数据，由于Kubernetes使用etcd v3版本的API，而且etcd 集群中默认使用tls认证，所以先配置几个环境变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.环境变量</span></span><br><span class="line"><span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CERT=/etc/kubernetes/pki/etcd/peer.crt</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_KEY=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查询集群中所有的key列表</span></span><br><span class="line"><span class="comment"># –-prefix：表示查找所有以/registry为前缀的key</span></span><br><span class="line"><span class="comment"># --keys-only=true：表示只给出key不给出value</span></span><br><span class="line">etcdctl --endpoints=https://10.20.176.212:2379 get /registry --prefix --keys-only=<span class="literal">true</span> | head -n 1</span><br><span class="line">/registry/apiextensions.k8s.io/customresourcedefinitions/bgpconfigurations.crd.projectcalico.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询某个key的值</span></span><br><span class="line"><span class="comment"># -–keys-only=false : 表示要给出value，该参数默认值即为false，</span></span><br><span class="line"><span class="comment"># -w=json ：表示输出json格式</span></span><br><span class="line">etcdctl --endpoints=https://10.20.176.212:2379 get /registry/namespaces/default --prefix --keys-only=<span class="literal">false</span> -w=json | python3 -m json.tool</span><br><span class="line"></span><br><span class="line">etcdctl --endpoints=https://10.20.176.212:2379 get /registry/namespaces/default --prefix --keys-only=<span class="literal">false</span> -w=json | python3 -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"header"</span>: &#123;</span><br><span class="line">      <span class="string">"cluster_id"</span>: 11404821125176160774,</span><br><span class="line">      <span class="string">"member_id"</span>: 7099450421952911102,</span><br><span class="line">      <span class="string">"revision"</span>: 30240109,</span><br><span class="line">      <span class="string">"raft_term"</span>: 3</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"kvs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"key"</span>: <span class="string">"L3JlZ2lzdHJ5L25hbWVzcGFjZXMvZGVmYXVsdA=="</span>,</span><br><span class="line">        <span class="string">"create_revision"</span>: 192,</span><br><span class="line">        <span class="string">"mod_revision"</span>: 192,</span><br><span class="line">        <span class="string">"version"</span>: 1,</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"azhzAAoPCg.......XNwYWNlEGgAiAA=="</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"count"</span>: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.其 Key / Value 都是采用 base64 编码</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"L3JlZ2lzdHJ5L25hbWVzcGFjZXMvZGVmYXVsdA=="</span> | base64 -d</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"azhzAAoPCgJ2MRIJTmFtZXNwYWNlEogCCu0BCgdkZWZhdWx0EgAaACIAKiQ5ZDQyYmYxMy03OGM0LTQ4NzQtOThiYy05NjNlMDg1MDYyZjYyADgAQggIo8yllQYQAFomChtrdWJlcm5ldGVzLmlvL21ldGFkYXRhLm5hbWUSB2RlZmF1bHR6AIoBfQoOa3ViZS1hcGlzZXJ2ZXISBlVwZGF0ZRoCdjEiCAijzKWVBhAAMghGaWVsZHNWMTpJCkd7ImY6bWV0YWRhdGEiOnsiZjpsYWJlbHMiOnsiLiI6e30sImY6a3ViZXJuZXRlcy5pby9tZXRhZGF0YS5uYW1lIjp7fX19fUIAEgwKCmt1YmVybmV0ZXMaCAoGQWN0aXZlGgAiAA=="</span> | base64 -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.实际上述value编码解码后的的内容如下:</span></span><br><span class="line">$ kubectl get ns default -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2022-06-15T04:54:59Z"</span></span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/metadata.name: default</span><br><span class="line">  name: default</span><br><span class="line">  resourceVersion: <span class="string">"192"</span></span><br><span class="line">  uid: 9d42bf13-78c4-4874-98bc-963e085062f6</span><br><span class="line">spec:</span><br><span class="line">  finalizers:</span><br><span class="line">  - kubernetes</span><br><span class="line">status:</span><br><span class="line">  phase: Active</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.Pod 资源信息查看 </span></span><br><span class="line">etcdctl --endpoints=https://10.20.176.212:2379 get /registry/pods/default --prefix --keys-only=<span class="literal">true</span></span><br><span class="line"><span class="comment"># /registry/pods/default/nfs-dev-nfs-subdir-external-provisioner-cf7684f8b-fzl9h</span></span><br><span class="line"><span class="comment"># /registry/pods/default/nfs-local-nfs-subdir-external-provisioner-6f97d44bb8-424tk</span></span><br><span class="line"></span><br><span class="line">etcdctl --endpoints=https://10.20.176.212:2379 get /registry/pods/default --prefix --keys-only=<span class="literal">true</span> -w=json | python3 -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"header"</span>: &#123;</span><br><span class="line">      <span class="string">"cluster_id"</span>: 11404821125176160774,</span><br><span class="line">      <span class="string">"member_id"</span>: 7099450421952911102,</span><br><span class="line">      <span class="string">"revision"</span>: 30442415,</span><br><span class="line">      <span class="string">"raft_term"</span>: 3</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"kvs"</span>: [</span><br><span class="line">      &#123;   <span class="comment"># 实际上该编码是 /registry/pods/default/nfs-dev-nfs-subdir-external-provisioner-cf7684f8b-fzl9h</span></span><br><span class="line">          <span class="string">"key"</span>: <span class="string">"L3JlZ2lzdHJ5L3BvZHMvZGVmYXVsdC9uZnMtZGV2LW5mcy1zdWJkaXItZXh0ZXJuYWwtcHJvdmlzaW9uZXItY2Y3Njg0ZjhiLWZ6bDlo"</span>,  </span><br><span class="line">          <span class="string">"create_revision"</span>: 5510865,</span><br><span class="line">          <span class="string">"mod_revision"</span>: 5510883,</span><br><span class="line">          <span class="string">"version"</span>: 5</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">"key"</span>: <span class="string">"L3JlZ2lzdHJ5L3BvZHMvZGVmYXVsdC9uZnMtbG9jYWwtbmZzLXN1YmRpci1leHRlcm5hbC1wcm92aXNpb25lci02Zjk3ZDQ0YmI4LTQyNHRr"</span>,</span><br><span class="line">          <span class="string">"create_revision"</span>: 5510967,</span><br><span class="line">          <span class="string">"mod_revision"</span>: 5510987,</span><br><span class="line">          <span class="string">"version"</span>: 5</span><br><span class="line">      &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"count"</span>: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br/></p><h3 id="2-使用Docker镜像安装-etcdctl-客户端工具"><a href="#2-使用Docker镜像安装-etcdctl-客户端工具" class="headerlink" title="2.使用Docker镜像安装 etcdctl 客户端工具"></a>2.使用Docker镜像安装 etcdctl 客户端工具</h3><p>描述: 在装有Docker环境的机器,我们可以非常方便的备份K8s集群中的etcd数据库，此处我已经安装好了Docker，若有不了解Docker或者需要搭建Docker环境中童鞋。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.Docker 实践环境</span></span><br><span class="line">$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version           20.10.3</span><br><span class="line">.......</span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.etcd 备份文件存储的目录</span></span><br><span class="line">$ mkdir -vp /backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.执行docker创建容器，在备份数据库后便删除该容器。</span></span><br><span class="line">$ docker run --rm \</span><br><span class="line">-v /backup:/backup  \</span><br><span class="line">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \</span><br><span class="line">--env ETCDCTL_API=3   \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.1-0 \</span><br><span class="line">/bin/sh -c <span class="string">"etcdctl --endpoints=https://192.168.12.107:2379 \</span></span><br><span class="line"><span class="string">--cacert=/etc/kubernetes/pki/etcd/ca.crt  \</span></span><br><span class="line"><span class="string">--key=/etc/kubernetes/pki/etcd/healthcheck-client.key \</span></span><br><span class="line"><span class="string">--cert=/etc/kubernetes/pki/etcd/healthcheck-client.crt \</span></span><br><span class="line"><span class="string">snapshot save /backup/etcd-snapshot.db"</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.63076,"caller":"snapshot/v3_snapshot.go:68","msg":"created temporary db file","path":"/backup/etcd-snapshot.db.part"&#125;</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.6411893,"logger":"client","caller":"v3/maintenance.go:211","msg":"opened snapshot stream; downloading"&#125;</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.6419039,"caller":"snapshot/v3_snapshot.go:76","msg":"fetching snapshot","endpoint":"https://192.168.12.107:2379"&#125;</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.9170482,"logger":"client","caller":"v3/maintenance.go:219","msg":"completed snapshot read; closing"&#125;</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.931862,"caller":"snapshot/v3_snapshot.go:91","msg":"fetched snapshot","endpoint":"https://192.168.12.107:2379","size":"9.0 MB","took":"now"&#125;</span></span><br><span class="line"><span class="comment"># &#123;"level":"info","ts":1666515535.9322069,"caller":"snapshot/v3_snapshot.go:100","msg":"saved","path":"/backup/etcd-snapshot.db"&#125;</span></span><br><span class="line">Snapshot saved at /backup/etcd-snapshot.db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看备份的etcd快照文件</span></span><br><span class="line">ls -alh /backup/etcd-snapshot.db</span><br><span class="line">-rw------- 1 root root 8.6M Oct 23 16:58 /backup/etcd-snapshot.db</span><br></pre></td></tr></table></figure><p>使用 Docker 容器查看 k8s 集群中的etcd数据库中的数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm \</span><br><span class="line">-v /backup:/backup  \</span><br><span class="line">-v /etc/kubernetes/pki/etcd:/etc/kubernetes/pki/etcd \</span><br><span class="line">--env ETCDCTL_API=3   \</span><br><span class="line">--env ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt \</span><br><span class="line">--env ETCDCTL_CERT=/etc/kubernetes/pki/etcd/peer.crt \</span><br><span class="line">--env ETCDCTL_KEY=/etc/kubernetes/pki/etcd/peer.key \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.1-0 \</span><br><span class="line">/bin/sh -c <span class="string">"etcdctl --endpoints=https://192.168.12.107:2379 get /registry/namespaces/default -w=json"</span></span><br></pre></td></tr></table></figure></p><p>执行结果: </p><p><img src="https://img.weiyigeek.top/2022/10/20221023173507.png" alt="WeiyiGeek.Docker容器查询Kubernetes集群中etcd数据库中k/v示例图"></p><p><br></p><h3 id="3-在kubernetes集群中快速创建pod进行手动备份"><a href="#3-在kubernetes集群中快速创建pod进行手动备份" class="headerlink" title="3.在kubernetes集群中快速创建pod进行手动备份"></a>3.在kubernetes集群中快速创建pod进行手动备份</h3><p>准备一个Pod资源清单并部署<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">| kubectl apply -f -</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">etcd-backup</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tool:</span> <span class="string">backup</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.5-0</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sh</span></span><br><span class="line"><span class="bullet">    -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"etcd"</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ETCDCTL_API</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ETCDCTL_CACERT</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"/etc/kubernetes/pki/etcd/ca.crt"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ETCDCTL_CERT</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"/etc/kubernetes/pki/etcd/healthcheck-client.crt"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">ETCDCTL_KEY</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"/etc/kubernetes/pki/etcd/healthcheck-client.key"</span></span><br><span class="line"><span class="attr">    volumeMounts:</span> </span><br><span class="line"><span class="attr">    - name:</span> <span class="string">"pki"</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/etc/kubernetes"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">"backup"</span></span><br><span class="line"><span class="attr">      mountPath:</span> <span class="string">"/backup"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">pki</span></span><br><span class="line"><span class="attr">    hostPath:</span> </span><br><span class="line"><span class="attr">      path:</span> <span class="string">"/etc/kubernetes"</span>          <span class="comment"># 证书目录</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">"DirectoryOrCreate"</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">"backup"</span></span><br><span class="line"><span class="attr">    hostPath:</span>     </span><br><span class="line"><span class="attr">      path:</span> <span class="string">"/storage/dev/backup"</span>      <span class="comment"># 数据备份目录</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">"DirectoryOrCreate"</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  nodeSelector:</span> </span><br><span class="line">    <span class="string">node-role.kubernetes.io/master:</span> <span class="string">""</span> <span class="comment"># 绑定在主节点中</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">pod/etcd-backup</span> <span class="string">created</span></span><br></pre></td></tr></table></figure></p><p><br/></p><p>进入到该Pod终端之中执行相应的备份命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">~$ kubectl <span class="built_in">exec</span> -it etcd-backup sh</span><br><span class="line"><span class="comment"># 快照备份</span></span><br><span class="line">sh-5.1<span class="comment"># export RAND=$RANDOM</span></span><br><span class="line">sh-5.1<span class="comment"># etcdctl --endpoints=https://192.168.12.107:2379 snapshot save /backup/etcd-107-$&#123;RAND&#125;-snapshot.db</span></span><br><span class="line">sh-5.1<span class="comment"># etcdctl --endpoints=https://192.168.12.108:2379 snapshot save /backup/etcd-108-$&#123;RAND&#125;-snapshot.db</span></span><br><span class="line">Snapshot saved at /backup/etcd-108-32616-snapshot.db</span><br><span class="line">sh-5.1<span class="comment"># etcdctl --endpoints=https://192.168.12.109:2379 snapshot save /backup/etcd-109-$&#123;RAND&#125;-snapshot.db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 节点成员</span></span><br><span class="line">sh-5.1<span class="comment"># etcdctl member list --endpoints=https://192.168.12.107:2379 --endpoints=https://192.168.12.108:2379 --endpoints=https://192.168.12.109:2379</span></span><br><span class="line"></span><br><span class="line">2db31a5d67ec1034, started, weiyigeek-108, https://192.168.12.108:2380, https://192.168.12.108:2379, <span class="literal">false</span></span><br><span class="line">42efe7cca897d765, started, weiyigeek-109, https://192.168.12.109:2380, https://192.168.12.109:2379, <span class="literal">false</span></span><br><span class="line">471323846709334f, started, weiyigeek-107, https://192.168.12.107:2380, https://192.168.12.107:2379, <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 节点健康信息</span></span><br><span class="line">sh-5.1<span class="comment"># etcdctl endpoint health --endpoints=https://192.168.12.107:2379 --endpoints=https://192.168.12.108:2379 --endpoints=https://192.168.12.109:2379</span></span><br><span class="line"></span><br><span class="line">https://192.168.12.107:2379 is healthy: successfully committed proposal: took = 11.930331ms</span><br><span class="line">https://192.168.12.109:2379 is healthy: successfully committed proposal: took = 11.930993ms</span><br><span class="line">https://192.168.12.108:2379 is healthy: successfully committed proposal: took = 109.515933ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 节点状态及空间占用信息</span></span><br><span class="line">sh-5.1<span class="comment"># etcdctl endpoint status --endpoints=https://192.168.12.107:2379  --endpoints=https://192.168.12.108:2379  --endpoints=https://192.168.12.109:2379</span></span><br><span class="line"></span><br><span class="line">https://192.168.12.107:2379, 471323846709334f, 3.5.1, 9.2 MB, <span class="literal">false</span>, <span class="literal">false</span>, 4, 71464830, 71464830,</span><br><span class="line">https://192.168.12.108:2379, 2db31a5d67ec1034, 3.5.1, 9.2 MB, <span class="literal">false</span>, <span class="literal">false</span>, 4, 71464830, 71464830,</span><br><span class="line">https://192.168.12.109:2379, 42efe7cca897d765, 3.5.1, 9.2 MB, <span class="literal">true</span>, <span class="literal">false</span>, 4, 71464830, 71464830, <span class="comment"># 此处为主</span></span><br></pre></td></tr></table></figure><p>至此，手动备份etcd集群数据快照完毕!</p><p><br/></p><h3 id="4-在kubernetes集群中使用CronJob资源控制器进行定时备份"><a href="#4-在kubernetes集群中使用CronJob资源控制器进行定时备份" class="headerlink" title="4.在kubernetes集群中使用CronJob资源控制器进行定时备份"></a>4.在kubernetes集群中使用CronJob资源控制器进行定时备份</h3><p>首先准备一个cronJob资源清单：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; etcd-database-backup.yaml &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">apiVersion: batch/v1</span><br><span class="line">kind: CronJob </span><br><span class="line">metadata:</span><br><span class="line">  name: etcd-database-backup</span><br><span class="line">  annotations:</span><br><span class="line">    descript: <span class="string">"etcd数据库定时备份"</span></span><br><span class="line">spec:</span><br><span class="line">  schedule: <span class="string">"*/5 * * * *"</span>   <span class="comment"># 表示每5分钟运行一次</span></span><br><span class="line">  jobTemplate:</span><br><span class="line">    spec:</span><br><span class="line">      template:</span><br><span class="line">        spec:           </span><br><span class="line">          containers:    </span><br><span class="line">          - name: etcdctl</span><br><span class="line">            image: registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.5-0</span><br><span class="line">            env:</span><br><span class="line">            - name: ETCDCTL_API</span><br><span class="line">              value: <span class="string">"3"</span></span><br><span class="line">            - name: ETCDCTL_CACERT</span><br><span class="line">              value: <span class="string">"/etc/kubernetes/pki/etcd/ca.crt"</span></span><br><span class="line">            - name: ETCDCTL_CERT</span><br><span class="line">              value: <span class="string">"/etc/kubernetes/pki/etcd/healthcheck-client.crt"</span></span><br><span class="line">            - name: ETCDCTL_KEY</span><br><span class="line">              value: <span class="string">"/etc/kubernetes/pki/etcd/healthcheck-client.key"</span></span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - /bin/sh </span><br><span class="line">            - -c</span><br><span class="line">            - |</span><br><span class="line">              <span class="built_in">export</span> RAND=<span class="variable">$RANDOM</span></span><br><span class="line">              etcdctl --endpoints=https://192.168.12.107:2379 snapshot save /backup/etcd-107-<span class="variable">$&#123;RAND&#125;</span>-snapshot.db</span><br><span class="line">              etcdctl --endpoints=https://192.168.12.108:2379 snapshot save /backup/etcd-108-<span class="variable">$&#123;RAND&#125;</span>-snapshot.db</span><br><span class="line">              etcdctl --endpoints=https://192.168.12.109:2379 snapshot save /backup/etcd-109-<span class="variable">$&#123;RAND&#125;</span>-snapshot.db</span><br><span class="line">            volumeMounts: </span><br><span class="line">            - name: <span class="string">"pki"</span></span><br><span class="line">              mountPath: <span class="string">"/etc/kubernetes"</span></span><br><span class="line">            - name: <span class="string">"backup"</span></span><br><span class="line">              mountPath: <span class="string">"/backup"</span></span><br><span class="line">            imagePullPolicy: IfNotPresent</span><br><span class="line">          volumes:</span><br><span class="line">          - name: <span class="string">"pki"</span></span><br><span class="line">            hostPath: </span><br><span class="line">              path: <span class="string">"/etc/kubernetes"</span></span><br><span class="line">              <span class="built_in">type</span>: <span class="string">"DirectoryOrCreate"</span></span><br><span class="line">          - name: <span class="string">"backup"</span></span><br><span class="line">            hostPath: </span><br><span class="line">              path: <span class="string">"/storage/dev/backup"</span>  <span class="comment"># 数据备份目录</span></span><br><span class="line">              <span class="built_in">type</span>: <span class="string">"DirectoryOrCreate"</span></span><br><span class="line">          nodeSelector:  <span class="comment"># 将Pod绑定在主节点之中，否则只能将相关证书放在各个节点能访问的nfs共享存储中</span></span><br><span class="line">            node-role.kubernetes.io/master: <span class="string">""</span></span><br><span class="line">          restartPolicy: Never</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>创建cronjob资源清单:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f etcd-database-backup.yaml</span><br><span class="line"><span class="comment"># cronjob.batch/etcd-database-backup created</span></span><br></pre></td></tr></table></figure></p><p>查看创建的cronjob资源及其集群etcd备份:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NAME                                 SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE</span><br><span class="line">cronjob.batch/etcd-database-backup   */5 * * * *   False     0        21s             14m</span><br><span class="line"></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/etcd-database-backup-27776740-rhzkk   0/1     Completed   0          21s</span><br></pre></td></tr></table></figure></p><p>查看定时Pod日志以及备份文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f pod/etcd-database-backup-27776740-rhzkk</span><br><span class="line">Snapshot saved at /backup/etcd-107-25615-snapshot.db</span><br><span class="line">Snapshot saved at /backup/etcd-108-25615-snapshot.db</span><br><span class="line">Snapshot saved at /backup/etcd-109-25615-snapshot.db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ ls -lt <span class="comment"># 显示最新备份的文件按照时间排序</span></span><br><span class="line">total 25M</span><br><span class="line">-rw------- 1 root root 8.6M Oct 24 21:12 etcd-107-25615-snapshot.db</span><br><span class="line">-rw------- 1 root root 7.1M Oct 24 21:12 etcd-108-25615-snapshot.db</span><br><span class="line">-rw------- 1 root root 8.8M Oct 24 21:12 etcd-109-25615-snapshot.db</span><br></pre></td></tr></table></figure></p><p>至此集群中的etcd快照数据备份完毕!</p><p><br/></p><h2 id="0x02-恢复实践"><a href="#0x02-恢复实践" class="headerlink" title="0x02 恢复实践"></a>0x02 恢复实践</h2><h3 id="1-单master节点恢复"><a href="#1-单master节点恢复" class="headerlink" title="1.单master节点恢复"></a>1.单master节点恢复</h3><p>描述: 当单master集群节点资源清单数据丢失时，我们可采用如下方式进行快速恢复数据。</p><p><strong>操作流程:</strong></p><p>温馨提示: 如果是单节点的k8S集群则使用如下命令恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> mv /etc/kubernetes/manifests/ /etc/kubernetes/manifests-backup/</span><br><span class="line"> mv /var/lib/etcd /var/lib/etcd.bak</span><br><span class="line"></span><br><span class="line">ETCDCTL_API=3 etcdctl snapshot restore /backup/etcd-212-32616-snapshot.db  --data-dir=/var/lib/etcd/ --endpoints=https://10.20.176.212:2379  --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key</span><br></pre></td></tr></table></figure><h3 id="2-多master节点恢复"><a href="#2-多master节点恢复" class="headerlink" title="2.多master节点恢复"></a>2.多master节点恢复</h3><p>1.温馨提示，此处的集群etcd数据库是安装在Kubernetes集群之中的，并非外部独立安装部署的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod -n kube-system  etcd-devtest-master-212 etcd-devtest-master-213 etcd-devtest-master-214</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">etcd-devtest-master-212   1/1     Running   3          134d</span><br><span class="line">etcd-devtest-master-213   1/1     Running   0          134d</span><br><span class="line">etcd-devtest-master-214   1/1     Running   0          134d</span><br></pre></td></tr></table></figure></p><p>2.前面我们提到过，在进行恢复前需要查看 etcd 集群当前成员以及监控状态。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etcd 集群成员列表</span></span><br><span class="line">ETCDCTL_API=3 etcdctl member list --endpoints=https://10.20.176.212:2379  --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">6286508b550016fe, started, devtest-master-212, https://10.20.176.212:2380, https://10.20.176.212:2379, <span class="literal">false</span></span><br><span class="line">9dd15f852caf8e05, started, devtest-master-214, https://10.20.176.214:2380, https://10.20.176.214:2379, <span class="literal">false</span></span><br><span class="line">e0f23bd90b7c7c0d, started, devtest-master-213, https://10.20.176.213:2380, https://10.20.176.213:2379, <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 集群节点状态查看主从节点</span></span><br><span class="line">ETCDCTL_API=3 etcdctl endpoint status --endpoints=https://10.20.176.212:2379 --endpoints=https://10.20.176.213:2379 --endpoints=https://10.20.176.214:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key   --write-out table</span><br><span class="line"></span><br><span class="line"><span class="comment"># etcd 集群节点健康信息筛选出不健康的节点</span></span><br><span class="line">ETCDCTL_API=3 etcdctl endpoint health --endpoints=https://10.20.176.212:2379   --endpoints=https://10.20.176.213:2379  --endpoints=https://10.20.176.214:2379  --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">https://10.20.176.212:2379 is healthy: successfully committed proposal: took = 14.686875ms</span><br><span class="line">https://10.20.176.214:2379 is healthy: successfully committed proposal: took = 16.201187ms</span><br><span class="line">https://10.20.176.213:2379 is healthy: successfully committed proposal: took = 18.962462ms</span><br></pre></td></tr></table></figure></p><p>3.停掉所有Master机器的kube-apiserver和etcd ，然后在利用备份进行恢复该节点的etcd数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mv /etc/kubernetes/manifests/ /etc/kubernetes/manifests-backup/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在该节点上删除 /var/lib/etcd</span></span><br><span class="line">mv /var/lib/etcd /var/lib/etcd.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用快照进行恢复,注意etcd集群中可以用同一份snapshot恢复。</span></span><br><span class="line">ETCDCTL_API=3 etcdctl snapshot restore /backup/etcd-212-32616-snapshot.db --data-dir=/var/lib/etcd --name=devtest-master-212 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/peer.crt --key=/etc/kubernetes/pki/etcd/peer.key  --initial-cluster-token=etcd-cluster-0 --initial-cluster=devtest-master-212=https://10.20.176.212:2380,devtest-master-213=https://10.20.176.213:2380,devtest-master-214=https://10.20.176.214:2380  --initial-advertise-peer-urls=https://10.20.176.212:2380</span><br></pre></td></tr></table></figure><p>温馨提示: 当节点加入控制平面 control-plane 后为 <code>API Server、Controller Manager 和 Scheduler</code> 生成静态Pod配置清单，主机上的kubelet服务会监视 <code>/etc/kubernetes/manifests</code>目录中的配置清单的创建、变动和删除等状态变动，并根据变动完成Pod创建、更新或删除操作。因此，这两个阶段创建生成的各配置清单将会启动Master组件的相关Pod</p><p>4.然后启动 etcd 和 apiserver 并查看 pods是否恢复正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 etcd pod</span></span><br><span class="line">$ kubectl get pod -n kube-system -l component=etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看组件健康状态</span></span><br><span class="line">$ kubectl get componentstatuses</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE                         ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>,<span class="string">"reason"</span>:<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="3-K8S集群中etcd数据库节点数据不一致问题解决实践"><a href="#3-K8S集群中etcd数据库节点数据不一致问题解决实践" class="headerlink" title="3.K8S集群中etcd数据库节点数据不一致问题解决实践"></a>3.K8S集群中etcd数据库节点数据不一致问题解决实践</h3><p>发现etcd数据不一致，执行kubectl get pod -n xxx获取的信息资源不一样， etcdctl 直接查询了 etcd 集群状态和集群数据，返回结果显示 3 个节点状态都正常，且 RaftIndex 一致，观察 etcd 的日志也并未发现报错信息，唯一可疑的地方是 3 个节点的 dbsize 差别较大</p><p>etcd 数据不一致 ？</p><p>由于从 kube-apiserver 的日志中同样无法提取出能够帮助解决问题的有用信息，起初我们只能猜测可能是 kube-apiserver 的缓存更新异常导致的。正当我们要从这个切入点去解决问题时，该同事反馈了一个更诡异的问题——自己新创建的 Pod，通过 kubectl查询 Pod 列表，突然消失了！纳尼？这是什么骚操作？经过我们多次测试查询发现，通过 kubectl 来 list pod 列表，该 pod 有时候能查到，有时候查不到。那么问题来了，K8s api 的 list 操作是没有缓存的，数据是 kube-apiserver 直接从 etcd 拉取返回给客户端的，难道是 etcd 本身出了问题？</p><p>众所周知，etcd 本身是一个强一致性的 KV 存储，在写操作成功的情况下，两次读请求不应该读取到不一样的数据。怀着不信邪的态度，我们通过 etcdctl 直接查询了 etcd 集群状态和集群数据，返回结果显示 3 个节点状态都正常，且 RaftIndex 一致，观察 etcd 的日志也并未发现报错信息，唯一可疑的地方是 3 个节点的 dbsize 差别较大。接着，我们又将 client 访问的 endpoint 指定为不同节点地址来查询每个节点的 key 的数量，结果发现 3 个节点返回的 key 的数量不一致，甚至两个不同节点上 Key 的数量差最大可达到几千！而直接通过 etcdctl 查询刚才创建的 Pod，发现访问某些 endpoint 能够查询到该 pod，而访问其他 endpoint 则查不到。至此，基本可以确定 etcd 集群的节点之间确实存在数据不一致现象。</p><p>ETCDCTL_API=3 etcdctl endpoint status –endpoints=<a href="https://192.168.12.108:2379" target="_blank" rel="noopener">https://192.168.12.108:2379</a> –endpoints=<a href="https://192.168.12.107:2379" target="_blank" rel="noopener">https://192.168.12.107:2379</a> –endpoints=<a href="https://192.168.12.109:2379" target="_blank" rel="noopener">https://192.168.12.109:2379</a> –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/peer.crt –key=/etc/kubernetes/pki/etcd/peer.key </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://192.168.12.108:2379, 2db31a5d67ec1034, 3.5.1, 7.4 MB, <span class="literal">false</span>, <span class="literal">false</span>, 4, 72288139, 72288139,</span><br><span class="line">https://192.168.12.107:2379, 471323846709334f, 3.5.1, 9.0 MB, <span class="literal">false</span>, <span class="literal">false</span>, 4, 72288139, 72288139,</span><br><span class="line">https://192.168.12.109:2379, 42efe7cca897d765, 3.5.1, 9.2 MB, <span class="literal">true</span>, <span class="literal">false</span>, 4, 72288139, 72288139,</span><br></pre></td></tr></table></figure><p>root@weiyigeek-107:~# ETCDCTL_API=3  etcdctl get / –prefix –keys-only –endpoints=<a href="https://192.168.12.107:2379" target="_blank" rel="noopener">https://192.168.12.107:2379</a>  –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/peer.crt –key=/etc/kubernetes/pki/etcd/peer.key  | wc -l<br>1620</p><p>root@weiyigeek-107:~# ETCDCTL_API=3  etcdctl get / –prefix –keys-only –endpoints=<a href="https://192.168.12.108:2379" target="_blank" rel="noopener">https://192.168.12.108:2379</a>  –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/peer.crt –key=/etc/kubernetes/pki/etcd/peer.key  | wc -l<br>1620</p><p>root@weiyigeek-107:~# ETCDCTL_API=3  etcdctl get / –prefix –keys-only –endpoints=<a href="https://192.168.12.109:2379" target="_blank" rel="noopener">https://192.168.12.109:2379</a>  –cacert=/etc/kubernetes/pki/etcd/ca.crt –cert=/etc/kubernetes/pki/etcd/peer.crt –key=/etc/kubernetes/pki/etcd/peer.key  | wc -l<br>1620</p><p> l<br>+—————————–+——————+———+———+———–+———–+————+<br>|          ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |<br>+—————————–+——————+———+———+———–+———–+————+<br>| <a href="https://192.168.12.108:2379" target="_blank" rel="noopener">https://192.168.12.108:2379</a> | 2db31a5d67ec1034 |   3.5.1 |  7.4 MB |     false |         4 |   72291872 |<br>| <a href="https://192.168.12.107:2379" target="_blank" rel="noopener">https://192.168.12.107:2379</a> | 471323846709334f |   3.5.1 |  9.0 MB |     false |         4 |   72291872 |<br>| <a href="https://192.168.12.109:2379" target="_blank" rel="noopener">https://192.168.12.109:2379</a> | 42efe7cca897d765 |   3.5.1 |  9.2 MB |      true |         4 |   72291872 |<br>+—————————–+——————+———+———+———–+———–+————+</p><p> ETCDCTL_API=3 etcdctl endpoint status –endpoints=<a href="https://192.168.12.107:2379" target="_blank" rel="noopener">https://192.168.12.107:2379</a>    –endpoints=<a href="https://192.168.12.108:2379" target="_blank" rel="noopener">https://192.168.12.108:2379</a> –endpoints=<a href="https://192.168.12.109:2379" target="_blank" rel="noopener">https://192.168.12.109:2379</a>   –write-out table<br>+—————————–+——————+———+———+———–+————+———–+————+——————–+——–+<br>|          ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+—————————–+——————+———+———+———–+————+———–+————+——————–+——–+<br>| <a href="https://192.168.12.107:2379" target="_blank" rel="noopener">https://192.168.12.107:2379</a> | 471323846709334f |   3.5.1 |  9.0 MB |     false |      false |         4 |   72292452 |           72292452 |        |<br>| <a href="https://192.168.12.108:2379" target="_blank" rel="noopener">https://192.168.12.108:2379</a> | 2db31a5d67ec1034 |   3.5.1 |  7.4 MB |     false |      false |         4 |   72292452 |           72292452 |        |<br>| <a href="https://192.168.12.109:2379" target="_blank" rel="noopener">https://192.168.12.109:2379</a> | 42efe7cca897d765 |   3.5.1 |  9.2 MB |      true |      false |         4 |   72292452 |           72292452 |        |<br>+—————————–+——————+———+———+———–+————+———–+————+——————–+——–+</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Containers" scheme="https://blog.weiyigeek.top/categories/Containers/"/>
    
    <category term="OperationTools" scheme="https://blog.weiyigeek.top/categories/Containers/OperationTools/"/>
    
    
    <category term="k8s" scheme="https://blog.weiyigeek.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>资源分享|每天白嫖两小时微软(Microsoft)学习实验虚拟机</title>
    <link href="https://blog.weiyigeek.top/2022/10-10-689.html"/>
    <id>https://blog.weiyigeek.top/2022/10-10-689.html</id>
    <published>2022-10-10T14:47:25.000Z</published>
    <updated>2022-10-13T08:26:41.054Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述：在逛B站的时候发现可以每天白嫖两小时微软(Microsoft)学习实验虚拟机，对于没有国外VPS的我，又需要上Google查学习资料的我来说，简直是天上掉馅饼，不用白不用，下面简单描述说明一下免费申请使用微软(Microsoft)学习实验虚拟机的流程，</p><p>微软在在财务和运营应用中实施常见集成功能，提供了办公软件集成教学的虚拟机，我们可以利用此Windows虚拟机上外网找学习资料，只是每次只有两小时的时间限制，有可能你所处的地区连接其虚拟机延迟较高，所以白嫖还是得看运气。</p><p>温馨提示: 此 VM 模式提供了一个免费的、基于 Web 的虚拟机环境，微软出于教育目的提供此实验室体验和相关内容，所以大家还是不要滥用以及干非法的事。</p><p>温馨提示: 在实践之前如果你没有微软账户，你需要注册申请一个微软（Microsoft）账号，注册地址：<a href="https://signup.live.com/newuser.aspx" target="_blank" rel="noopener">https://signup.live.com/newuser.aspx</a></p><a id="more"></a><h2 id="0x01-操作流程"><a href="#0x01-操作流程" class="headerlink" title="0x01 操作流程"></a>0x01 操作流程</h2><p>步骤 01.建议使用edge浏览器访问微软在在财务和运营应用中实施常见集成功能学习页面[^1]，可在文章末尾获取该地址，此处我已登录微软学站点。</p><p><br/></p><p>步骤 02.点击选择“启动 VM 模式（<code>Launch VM mode</code>）”或“登录”以在此单元中启动 VM 模式。</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012224644.png" alt="WeiyiGeek.Launch VM mode图" title="" class="">                <p>WeiyiGeek.Launch VM mode图</p>            </figure><p><br/></p><p>步骤 03.等待短暂的几秒钟后，虚拟机便启动成果，此时我们在实验室侧栏上的“资源”选项卡中，选择 MININT 框中“密码”旁边的 T 图标，以便为你输入虚拟机的管理员密码，此时延迟在 400 多左右，对于国内来说这个访问速度还算好的了。</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012225043.png" alt="WeiyiGeek.登录学习虚拟机图" title="" class="">                <p>WeiyiGeek.登录学习虚拟机图</p>            </figure><p><br/></p><p>步骤 04.点击➡箭头即可登录该服务器，然后便可进入查看如下桌面，其服务器以及配置如下,其服务器IP通常在英国。</p><blockquote><p>CPU : Inter Xeon Gload 6230R CPU @ 2.10Ghz (双核 6线程)<br>内存：12G<br>磁盘: 126 GB<br>Ethernet: 10G </p></blockquote><p><img src="https://img.weiyigeek.top/2022/10/20221012225818.png" alt="WeiyiGeek.微软学习机配置图"></p><p><br/></p><p>步骤 05.虽然机器的延迟较高但是上上Google还是没有问题的，但是不能上脸书、推特以及youtobe。</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012231910.png" alt="WeiyiGeek.图" title="" class="">                <p>WeiyiGeek.图</p>            </figure><p><br/></p><p>步骤 06.白嫖后该学习机后，我顺带将我博客站点的Google 广告开启，对于我们计算机爱好者来说有一笔收入支持我博客站点( <a href="https://weiyigeek.top" target="_blank" rel="noopener">https://weiyigeek.top</a> )的运行，还是不错的。</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012231924.png" alt="WeiyiGeek.图" title="" class="">                <p>WeiyiGeek.图</p>            </figure><p><br/></p><p>至此，白嫖实践完毕，请大家多多关注，支持博主哟。</p><p>[^1]: 财务和运营应用中实施常见集成功能学习学习虚拟机: <a href="https://learn.microsoft.com/en-us/training/modules/implement-common-integration-features-finance-ops/10-exercise-1?source=learn" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/training/modules/implement-common-integration-features-finance-ops/10-exercise-1?source=learn</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;描述：在逛B站的时候发现可以每天白嫖两小时微软(Microsoft)学习实验虚拟机，对于没有国外VPS的我，又需要上Google查学习资料的我来说，简直是天上掉馅饼，不用白不用，下面简单描述说明一下免费申请使用微软(Microsoft)学习实验虚拟机的流程，&lt;/p&gt;
&lt;p&gt;微软在在财务和运营应用中实施常见集成功能，提供了办公软件集成教学的虚拟机，我们可以利用此Windows虚拟机上外网找学习资料，只是每次只有两小时的时间限制，有可能你所处的地区连接其虚拟机延迟较高，所以白嫖还是得看运气。&lt;/p&gt;
&lt;p&gt;温馨提示: 此 VM 模式提供了一个免费的、基于 Web 的虚拟机环境，微软出于教育目的提供此实验室体验和相关内容，所以大家还是不要滥用以及干非法的事。&lt;/p&gt;
&lt;p&gt;温馨提示: 在实践之前如果你没有微软账户，你需要注册申请一个微软（Microsoft）账号，注册地址：&lt;a href=&quot;https://signup.live.com/newuser.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://signup.live.com/newuser.aspx&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络资源分享" scheme="https://blog.weiyigeek.top/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="虚拟主机" scheme="https://blog.weiyigeek.top/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>资源分享|免费注册申请永久的eu.org顶级域名创建属于自己的域名,再也不用给博客域名续费了!</title>
    <link href="https://blog.weiyigeek.top/2022/10-9-688.html"/>
    <id>https://blog.weiyigeek.top/2022/10-9-688.html</id>
    <published>2022-10-09T14:47:25.000Z</published>
    <updated>2022-10-13T06:40:53.519Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述：在逛B站的时候发现可以免费注册申请永久的eu.org顶级网域，一想到自己现在域名【weiyigeek.top】后续续费要上百人民币, 所以我随手就马上去注册了一个（白嫖谁不爱），下面将快速申请注册 eu.org 域名注意事项进行说明，帮助需要申请免费 eu.org 域名的朋友。</p><p>EU.org 是一个从1996开始提供免费域名的组织, 其官网地址是 <a href="https://nic.eu.org/" target="_blank" rel="noopener">https://nic.eu.org/</a> ，他帮助学生、爱好者或者非营利组织不用花费购买域名就可能拥有自己的免费域名，虽然 <a href="https://nic.eu.org/" target="_blank" rel="noopener">eu.org</a> 网域切确来说这是一个子域名（Subdomain）或者二级域名，但是根据一些网站的资讯，有许多大型互联网公司，像是 Google, Cloudflare, Bing 等厂商都已经将eu.org域名当成是一个顶级网域了。</p><p>值得注意的是，我们虽然可以进行免费申请，但不要滥用申请，作为申请者应该必须遵守互联网标准(Rfc)，不要利用其来发送垃圾邮件或网络钓鱼以及分发恶意软件，毕竟提供免费的域名的组织，谁也不想其取消免费服务，其次不要多次注册申请占用域名，尽量只是注册需要的域名，通常来说注册两个域名基本就满足日常使用，一个正式站点域名和一个测试站点域名。</p><a id="more"></a><p>EU.org 开域和政策参考地址：<a href="https://nic.eu.org/opendomains.html" target="_blank" rel="noopener">https://nic.eu.org/opendomains.html</a></p><hr><h2 id="0x01-注册申请"><a href="#0x01-注册申请" class="headerlink" title="0x01 注册申请"></a>0x01 注册申请</h2><p>在注册一个eu.org免费域名前，你需要先准备<code>好一个邮箱地址和注册一个Hostry账号</code>才能保证在注册的过程中不会遇到任何的阻碍。</p><ul><li>邮箱地址: google Gmail 、foxmail、QQ 都是可以的邮箱注册（此处相信大家都有邮箱）</li><li>注册Hostry账号以获取免费DNS解析服务（在申请时不建议采用 dnspod ）</li></ul><h3 id="如何注册Hostry获取免费DNS解析服务"><a href="#如何注册Hostry获取免费DNS解析服务" class="headerlink" title="如何注册Hostry获取免费DNS解析服务?"></a>如何注册Hostry获取免费DNS解析服务?</h3><p>描述：HOSTRY 作为一家可靠且成熟的托管服务提供商，HOSTRY为在线企业提供了大量不同的托管选项，专注于内容交付网络（CDN）、虚拟专用服务器（VPS）、专用服务器和其他解决方案，以确保为客户提供高质量的web托管服务。<br>此处我们主要使用 HOSTRY 其 DNS 解析服务来加快域名申请所占用审核的时间，没有选择 dnspod 是因为有可能在申请免费域名验证解析时会产生错误从而增加审核时间，其次是使用 dnspod 需要进行实名认证，所以推荐使用 HOSTRY 在域名审批通过后再使用 dnspod 来进行解析。</p><ol><li>访问 hostry 官网进行注册用户, 注册地址: <a href="https://hostry.com/register/" target="_blank" rel="noopener">https://hostry.com/register/</a>, 输入注册邮箱以及相关的注册信息（反正只用一次信息不一定填真的），然后你再邮箱中会收到一条激活信息进行（<code>ACTIVATE ACCOUNT</code>）即可。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009114727.png" alt="WeiyiGeek.注册hostry" title="" class="">                <p>WeiyiGeek.注册hostry</p>            </figure><p>温馨提示：注册地址邮编自行Google、百度即可。</p><ol start="2"><li>注册完毕后即可进行创建免费的DNS解析，创建地址：<a href="https://hostry.com/products/dns/，其无主机DNS使您的DNS更快、更安全，并且对条目或请求的数量没有限制。" target="_blank" rel="noopener">https://hostry.com/products/dns/，其无主机DNS使您的DNS更快、更安全，并且对条目或请求的数量没有限制。</a><blockquote><p>例如，输入要注册的域名 <code>wygk.eu.org &gt; CREATE</code> 进行创建即可。</p></blockquote></li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009124252.png" alt="WeiyiGeek.创建需要申请的域名解析" title="" class="">                <p>WeiyiGeek.创建需要申请的域名解析</p>            </figure><p>温馨提示：此处需要验证一下eu.org要注册的域名是否被注册过了，如果出现如下图片中的情况表示已注册 (此处这是我已经申请下的免费域名)，验证地址：<a href="https://tool.dnspod.cn/" target="_blank" rel="noopener">https://tool.dnspod.cn/</a></p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009115711.png" alt="WeiyiGeek.dnspod验证eu.org域名是否被注册" title="" class="">                <p>WeiyiGeek.dnspod验证eu.org域名是否被注册</p>            </figure><p>至此，注册完毕!</p><p><br/></p><h3 id="如何注册eu-org域名"><a href="#如何注册eu-org域名" class="headerlink" title="如何注册eu.org域名?"></a>如何注册eu.org域名?</h3><ol><li>在 Google Chrome 或其他浏览器 输入eu.org 然后登入 <a href="https://nic.eu.org/，点击" target="_blank" rel="noopener">https://nic.eu.org/，点击</a> Register 进行创建用户，输入如下账户邮箱、姓名、地址等相关信息,然后将会在邮箱里收到一封验证账户的短信。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009125606.png" alt="WeiyiGeek.注册验证 eu.org 账户" title="" class="">                <p>WeiyiGeek.注册验证 eu.org 账户</p>            </figure><p>温馨提示：输入Name时姓名首字母要大写，并且中间有空格，里面的地址随意在百度中找寻一个英文地址即可。</p><ol start="2"><li>注册成功登录后，点击 new Domain 创建上述自定义的域名，此处还是以<code>wygk.eu.org</code>申请的域名为例，填写如下信息以及NameServers信息，填写完毕后点击submit进行提交。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009131006.png" alt="WeiyiGeek.创建自定义eu.org二级域名" title="" class="">                <p>WeiyiGeek.创建自定义eu.org二级域名</p>            </figure><ol start="3"><li>提交后将进行域名 <code>server names + replies on SOA + replies on NS</code> 认证记录，如出现下图所示则表示申请提交验证域名NS记录成功审核审核下发，我在两天后便收到了成功的邮件信息。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---- Servers and domain names check</span><br><span class="line">Getting IP <span class="keyword">for</span> NS1.HOSTRY.COM: 185.186.246.19</span><br><span class="line">Getting IP <span class="keyword">for</span> NS2.HOSTRY.COM: 206.54.189.187</span><br><span class="line">Getting IP <span class="keyword">for</span> NS3.HOSTRY.COM: 195.123.233.100</span><br><span class="line">Getting IP <span class="keyword">for</span> NS4.HOSTRY.COM: 45.32.157.198</span><br><span class="line"></span><br><span class="line">---- Checking SOA records <span class="keyword">for</span> WYGK.EU.ORG</span><br><span class="line">SOA from NS1.HOSTRY.COM at 185.186.246.19: serial 2022100702 (12.916 ms)</span><br><span class="line">SOA from NS2.HOSTRY.COM at 206.54.189.187: serial 2022100702 (114.235 ms)</span><br><span class="line">SOA from NS3.HOSTRY.COM at 195.123.233.100: serial 2022100702 (74.804 ms)</span><br><span class="line">SOA from NS4.HOSTRY.COM at 45.32.157.198: serial 2022100702 (99.779 ms)</span><br><span class="line"></span><br><span class="line">---- Checking NS records <span class="keyword">for</span> WYGK.EU.ORG</span><br><span class="line">NS from NS1.HOSTRY.COM at 185.186.246.19: ok (12.374 ms)</span><br><span class="line">NS from NS2.HOSTRY.COM at 206.54.189.187: ok (114.638 ms)</span><br><span class="line">NS from NS3.HOSTRY.COM at 195.123.233.100: ok (75.439 ms)</span><br><span class="line">NS from NS4.HOSTRY.COM at 45.32.157.198: ok (101.228 ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">No error, storing <span class="keyword">for</span> validation...  <span class="comment"># 表示申请提交验证域名NS记录成功</span></span><br><span class="line">Saved as request 20221007160025-arf-37642</span><br><span class="line"></span><br><span class="line">Done</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009131635.png" alt="WeiyiGeek.域名申请审核成功" title="" class="">                <p>WeiyiGeek.域名申请审核成功</p>            </figure><hr><h2 id="0x02-解析配置"><a href="#0x02-解析配置" class="headerlink" title="0x02 解析配置"></a>0x02 解析配置</h2><h3 id="如何将注册eu-org域名解析改为Cloudflare并指向Github-Pages"><a href="#如何将注册eu-org域名解析改为Cloudflare并指向Github-Pages" class="headerlink" title="如何将注册eu.org域名解析改为Cloudflare并指向Github Pages?"></a>如何将注册eu.org域名解析改为Cloudflare并指向Github Pages?</h3><p>描述：此处dnspod实名认证不在累述，你不一定要选择dnspod你也可以继续使用HOSTRY提供的免费DNS服务，或者选择Cloudflare提供的DNS解析服务都是可以的，此处以Cloudflare为例（此处假设你已经有了Cloudflare账号，没有的朋友去注册一个即可）。</p><ol><li>访问并登录 cloudflare 面板，地址：<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">https://dash.cloudflare.com/login</a> , 然后添加刚才注册的站点，选择 Free 套餐即可，点击继续。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009132752.png" alt="WeiyiGeek.在cloudflare添加域名" title="" class="">                <p>WeiyiGeek.在cloudflare添加域名</p>            </figure><ol start="2"><li>设置完成后我们需要到 eu.org 注册机构帐户中将,将 HOSTRY 替换为 Cloudflare 的名称服务器。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009133321.png" alt="WeiyiGeek.在注册机构中域名替换为 Cloudflare 的名称服务器" title="" class="">                <p>WeiyiGeek.在注册机构中域名替换为 Cloudflare 的名称服务器</p>            </figure><ol start="3"><li>验证 eu.org 域名修改后的 NameServer 服务器地址。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;nslookup -qt=ns wygk.eu.org</span><br><span class="line">服务器:  public2.alidns.com</span><br><span class="line">Address:  223.6.6.6</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">wygk.eu.org     nameserver = bayan.ns.cloudflare.com</span><br><span class="line">wygk.eu.org     nameserver = vita.ns.cloudflare.com</span><br></pre></td></tr></table></figure><ol start="4"><li>在 DNS 提供商 cloudflare 面板中添加 cname 记录解析，指向我 Github Pages 的 weiyigeek.github.io 博主主页。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt=a www.wygk.eu.org 223.6.6.6</span><br><span class="line">服务器:  public2.alidns.com</span><br><span class="line">Address:  223.6.6.6</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    weiyigeek.github.io</span><br><span class="line">Addresses:  185.199.111.153</span><br><span class="line">          185.199.110.153</span><br><span class="line">          185.199.109.153</span><br><span class="line">          185.199.108.153</span><br><span class="line">Aliases:  www.wygk.eu.org</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="https://www.wygk.eu.org/index.html" target="_blank" rel="noopener">https://www.wygk.eu.org/index.html</a> 站点，至此一个免费的域名申请到使用成果</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009143134.png" alt="WeiyiGeek.免费域名使用" title="" class="">                <p>WeiyiGeek.免费域名使用</p>            </figure><p>至此，实践完毕 !</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;描述：在逛B站的时候发现可以免费注册申请永久的eu.org顶级网域，一想到自己现在域名【weiyigeek.top】后续续费要上百人民币, 所以我随手就马上去注册了一个（白嫖谁不爱），下面将快速申请注册 eu.org 域名注意事项进行说明，帮助需要申请免费 eu.org 域名的朋友。&lt;/p&gt;
&lt;p&gt;EU.org 是一个从1996开始提供免费域名的组织, 其官网地址是 &lt;a href=&quot;https://nic.eu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nic.eu.org/&lt;/a&gt; ，他帮助学生、爱好者或者非营利组织不用花费购买域名就可能拥有自己的免费域名，虽然 &lt;a href=&quot;https://nic.eu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;eu.org&lt;/a&gt; 网域切确来说这是一个子域名（Subdomain）或者二级域名，但是根据一些网站的资讯，有许多大型互联网公司，像是 Google, Cloudflare, Bing 等厂商都已经将eu.org域名当成是一个顶级网域了。&lt;/p&gt;
&lt;p&gt;值得注意的是，我们虽然可以进行免费申请，但不要滥用申请，作为申请者应该必须遵守互联网标准(Rfc)，不要利用其来发送垃圾邮件或网络钓鱼以及分发恶意软件，毕竟提供免费的域名的组织，谁也不想其取消免费服务，其次不要多次注册申请占用域名，尽量只是注册需要的域名，通常来说注册两个域名基本就满足日常使用，一个正式站点域名和一个测试站点域名。&lt;/p&gt;</summary>
    
    
    
    <category term="网络资源分享" scheme="https://blog.weiyigeek.top/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="域名申请" scheme="https://blog.weiyigeek.top/tags/%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/"/>
    
  </entry>
  
  <entry>
    <title>MobaXterm远程连接工具脆弱性</title>
    <link href="https://blog.weiyigeek.top/2022/10-8-688.html"/>
    <id>https://blog.weiyigeek.top/2022/10-8-688.html</id>
    <published>2022-10-08T01:32:30.000Z</published>
    <updated>2022-10-13T08:26:38.804Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p><strong>什么是MobaXterm?</strong></p><blockquote><p>MobaX 术语是远程计算的终极工具箱, 适用于 Windows 的增强型终端，带有 X11 服务器、选项卡式 SSH 客户端、网络工具以及快速监控远程系统运行状况等<br>Enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more</p></blockquote><p>官网地址: <a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/</a></p><p><strong>有什么用?</strong></p><blockquote><p>MobaXterm 提供了所有重要的远程网络工具（SSH，X11，RDP，VNC，FTP，MOSH等）和Unix命令（bash，ls，猫，sed，grep，awk，rsync等）到Windows桌面，在一个便携式exe文件中，开箱即用.</p></blockquote><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012090931.png" alt="WeiyiGeek.MobaXterm图" title="" class="">                <p>WeiyiGeek.MobaXterm图</p>            </figure><p><strong>有那些主要特点?</strong></p><ul><li>嵌入式 X 服务器: 基于 X.org 的完全配置的 X 服务器</li><li>轻松导出显示器 : 显示从远程 Unix 导出到本地窗口</li><li>X11 转发功能: 您的远程显示器使用 SSH 实现安全传输</li><li>带固态混合的选项卡式终端 : 基于 PuTTY，具有抗锯齿字体和宏支持</li><li>视窗上的许多Unix/Linux命令 :基本 Cygwin 命令（bash, grep, awk, sed, rsync,……）</li><li>附加组件和插件 :您可以使用插件扩展 MobaX 术语功能</li><li>多功能会话管理器 :您的所有网络工具都在一个应用程序中：Rdp，Vnc，Ssh，Mosh，X11，…</li><li>便携式轻便应用 : MobaXterm 已被打包为单个可执行文件，不需要管理员权限，您可以从 U 盘启动</li><li>专业应用 : 专业版 MobaX 术语专为安全性和稳定性而设计</li></ul><p>MobaXterm 功能参考：[^features.html] </p><p><strong>版本区别</strong></p><ul><li>Home Edition（家庭版）：免费,基本功能都有知识最多存储12 session、2条 ssh 隧道，4个宏的限制。</li><li>Professional Edition （专业版）：永久$69, 包含家庭全部功能并且无会话限制以及无限数量的隧道和宏，并且可修改配置文件脚本和自定义启动消息和徽标，并且可以直接查看session存储的账号密码。 (花了钱的就是不一样)</li></ul><p>MobaXterm 版本下载地址: [^download.html] </p><p><strong>插件列表与安装</strong><br>为了安装这些插件，只需下载它们并将它们放在与MobaXterm可执行文件相同的目录中即可。</p><p>MobaXterm 插件下载地址: [^plugins.html]</p><hr><h2 id="0x01-使用总结"><a href="#0x01-使用总结" class="headerlink" title="0x01 使用总结"></a>0x01 使用总结</h2><h3 id="1-忘记-MobaXterm-主密码如何重置"><a href="#1-忘记-MobaXterm-主密码如何重置" class="headerlink" title="1.忘记 MobaXterm 主密码如何重置?"></a>1.忘记 MobaXterm 主密码如何重置?</h3><p>描述: 当 MobaXterm 从一台机器复制到另外一台机器上或者重新安装后，需要重新输入主密码（master password），如果此时忘记了则可使用官网提供的 ResetMasterPassword工具进行重置主密码 。</p><p>密码重置工具: <a href="https://mobaxterm.mobatek.net/resetmasterpassword.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/resetmasterpassword.html</a></p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012180455.png" alt="WeiyiGeek.使用ResetMasterPassword工具图" title="" class="">                <p>WeiyiGeek.使用ResetMasterPassword工具图</p>            </figure><p>温馨提示：如果你重新设置你的主控密码使用这个工具，所有你的连接密码之前保存在MobaXterm将会丢失。 </p><hr><h2 id="0x02-脆弱性一览"><a href="#0x02-脆弱性一览" class="headerlink" title="0x02 脆弱性一览"></a>0x02 脆弱性一览</h2><h3 id="1-如何查看MobaXterm中存储的Session密码"><a href="#1-如何查看MobaXterm中存储的Session密码" class="headerlink" title="1.如何查看MobaXterm中存储的Session密码"></a>1.如何查看MobaXterm中存储的Session密码</h3><p>描述: 今天在登录某个服务器时，发现当时修改的某个服务器的密码，无法登陆到服务器(应该是自己修改的密码记错了)，然而我想起当时修改密码时是使用的MobaxTerm，并且记录了其会话密码，我便开心的以为我找到突破口，好在结果是可以登录的，然后我就想查看其存储密码，发现家庭版本居然不能查看保存的明文密码，坑呀.</p><p>在工作中为了方便登录会存储session账户密码，但时间一久就会忘记，如果没有备份密码，此时再想查看密码还真是件麻烦事, 遂有了此篇文章。</p><p><strong>MobaXterm忘记Session密码,如何查看已保存的密码?</strong></p><blockquote><p>通常情况下游两种方式，一种是将其版本升级到 <code>MobaXterm professional Edition</code> 直接查看存储的session密码（No money）, 另外一种是针对家庭版使用基于python的开源工具反向解析密码.</p></blockquote><ul><li>方式1.专业版查看存储的 session 密码, 注意家庭版是不可以使用此方法，必须进行升级</li></ul><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012093355.png" alt="WeiyiGeek.MobaXterm professional Edition 图" title="" class="">                <p>WeiyiGeek.MobaXterm professional Edition 图</p>            </figure><ul><li>方式2.使用 how-does-MobaXterm-encrypt-password 开源工具反向解析密码。<blockquote><p>项目地址: <a href="https://github.com/HyperSine/how-does-MobaXterm-encrypt-password" target="_blank" rel="noopener">https://github.com/HyperSine/how-does-MobaXterm-encrypt-password</a><br>fork 修改代码后的地址（推荐，不是还有进行修改代码）: <a href="https://github.com/WeiyiGeek/how-does-MobaXterm-encrypt-password" target="_blank" rel="noopener">https://github.com/WeiyiGeek/how-does-MobaXterm-encrypt-password</a></p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拉取项目</span></span><br><span class="line">WeiyiGeek@WeiyiGeek MINGW64 ~/Downloads</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/WeiyiGeek/how-does-MobaXterm-encrypt-password.git</span><br><span class="line">$ ls</span><br><span class="line">MobaXtermCipher.py</span><br><span class="line">ShowMobaXterm.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装环境依赖</span></span><br><span class="line"><span class="comment"># 例如，在CentOS上安装 Python3 以及 开源工具依赖模块（此处由于我是Windows的，Python环境都已经配置号楼的，所以我只安装相关依赖模块）</span></span><br><span class="line">yum install -y git</span><br><span class="line">yum install python3</span><br><span class="line">yum install python3-pip</span><br><span class="line">pip3 install pycryto</span><br><span class="line"><span class="comment"># 上一个命令有可能会出错，请使用这个命令</span></span><br><span class="line">pip3 install pycryptodome</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.如果密码是存储在文件中, 可以找到 MobaXterm 安装目录下 MobaXterm.ini 文件，打开后找到Passwords模块，显示格式为: 登录名@ip=加密密码</span></span><br><span class="line">$ dir D:\Program Files\MobaXterm</span><br><span class="line">CygUtils.plugin        MobaXterm.ini  MobaXterm_Personal_20.1.exe</span><br><span class="line">MobaXterm\ backup.zip  MobaXterm.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.如果密码是存储在计算机密码中，可以查看如下【 计算机\HKEY_CURRENT_USER\SOFTWARE\Mobatek\MobaXterm】下的三个注册表地址。</span></span><br><span class="line">&gt; regedit  <span class="comment"># 打开注册表</span></span><br><span class="line">HKEY_CURRENT_USER\SOFTWARE\Mobatek\MobaXterm\C  <span class="comment"># 存储的自己创建认证票据</span></span><br><span class="line">HKEY_CURRENT_USER\SOFTWARE\Mobatek\MobaXterm\M  <span class="comment"># 存储的Master管理员密码(以经过加密的)</span></span><br><span class="line">HKEY_CURRENT_USER\SOFTWARE\Mobatek\MobaXterm\P  <span class="comment"># 存储了使用过程中记录的session会话IP端口，账号密码信息</span></span><br><span class="line"><span class="comment"># 例如，存储 session 会话信息格式</span></span><br><span class="line"><span class="comment"># Name             Type        Data</span></span><br><span class="line"><span class="comment"># example.com      REG_SZ      root:0XROpGmLAYVx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值名称 ：weiyigeek@10.0.30.70</span></span><br><span class="line"><span class="comment"># 数据类型 ：REG_SZ</span></span><br><span class="line"><span class="comment"># 数据值 ：7FzQQ12lpX7g2s8O39zquyQ=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.也可以采用PowerShell命令进行查看</span></span><br><span class="line">Get-Item <span class="string">'HKCU:\SOFTWARE\Mobatek\MobaXterm\'</span></span><br><span class="line"><span class="comment"># 获取 SessionP 值</span></span><br><span class="line">(Get-ItemProperty <span class="string">'HKCU:\SOFTWARE\Mobatek\MobaXterm\'</span>).SessionP</span><br><span class="line">2493068723790</span><br><span class="line"><span class="comment"># Master/自创建的服务器账号密码/session会话记录的账号密码</span></span><br><span class="line">Get-ItemProperty <span class="string">'HKCU:\SOFTWARE\Mobatek\MobaXterm\m'</span></span><br><span class="line">Get-ItemProperty <span class="string">'HKCU:\SOFTWARE\Mobatek\MobaXterm\c'</span></span><br><span class="line">Get-ItemProperty <span class="string">'HKCU:\SOFTWARE\Mobatek\MobaXterm\p'</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012100126.png" alt="WeiyiGeek.MobaXterm注册表图" title="" class="">                <p>WeiyiGeek.MobaXterm注册表图</p>            </figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.开源工具的使用帮助</span></span><br><span class="line"><span class="built_in">cd</span> how-does-MobaXterm-encrypt-password</span><br><span class="line">MobaXtermCipher.py &lt;enc|dec&gt; &lt;-sp SessionP&gt; &lt;plaintext|ciphertext&gt;</span><br><span class="line">MobaXtermCipher.py &lt;enc|dec&gt; &lt;-p master_password&gt; &lt;plaintext|ciphertext&gt;</span><br><span class="line">&lt;-sp SessionP&gt;           The value `SessionP` stored <span class="keyword">in</span> key HKCU\Software\Mobatek\MobaXterm</span><br><span class="line">&lt;-p master_password&gt;     The master password <span class="built_in">set</span> <span class="keyword">in</span> MobaXterm.</span><br><span class="line">&lt;plaintext|ciphertext&gt;   Plaintext string or ciphertext string.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在已知道自己设置Master密码的情况下可直接(此处假设我的 master密码是 weiyigeek)，将 plaintext|ciphertext 接到 -p 指定 master密码参数后。</span></span><br><span class="line">&gt; python MobaXtermCipher.py dec -p weiyigeek 8wCf+h+v2OpB0IrTPg==</span><br><span class="line">Hlwdmm94bngsn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SessionP 加密解密</span></span><br><span class="line">C:\Users\WeiyiGeek\Downloads\how-does-MobaXterm-encrypt-password\python3&gt;python MobaXtermCipher.py enc -sp 2493068723790 weiyigeek</span><br><span class="line">31RwmZeeGndNigeRo0cud++YU8tNF8MTbZcoA3l3ThUnK</span><br><span class="line">C:\Users\WeiyiGeek\Downloads\how-does-MobaXterm-encrypt-password\python3&gt;python MobaXtermCipher.py dec -sp 2493068723790 31RwmZeeGndNigeRo0cud++YU8tNF8MTbZcoA3l3ThUnK</span><br><span class="line">weiyigeek</span><br><span class="line"></span><br><span class="line"><span class="comment"># ShowMobaXterm.py: 所有凭据和密码都可以通过 (注意该脚本只能在 Windows 上运行)</span></span><br><span class="line">python ShowMobaXterm.py</span><br><span class="line">python ShowMobaXterm.py weiyigeek</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012104737.png" alt="WeiyiGeek.ShowMobaXterm.py 图" title="" class="">                <p>WeiyiGeek.ShowMobaXterm.py 图</p>            </figure><p>官方参考地址：<a href="https://github.com/HyperSine/how-does-MobaXterm-encrypt-password#3-example" target="_blank" rel="noopener">https://github.com/HyperSine/how-does-MobaXterm-encrypt-password#3-example</a></p><p>温馨提示：如果在执行 <code>python ShowMobaXterm.py weiyigeek</code> 出现如下错误时，请将第 232 与 231 行的  <code>ConnHostname.encode(&#39;ansi&#39;),  ConnUsername.encode(&#39;ansi&#39;)</code> 删除，如果存储编码错误提示请将 encode 中 ansi 参数变成 uft8编码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-------------------Passwords--------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"ShowMobaXterm.py"</span>, line 232, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    ConnUsername.encode(<span class="string">'ansi'</span>)</span><br><span class="line">TypeError: DecryptPassword() takes 2 positional arguments but 4 were given</span><br></pre></td></tr></table></figure><p>解决办法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ShowMobaXterm.py 中的 229 行</span></span><br><span class="line">ConnPassword = cipher.DecryptPassword(</span><br><span class="line">  Value</span><br><span class="line">).decode(<span class="string">"utf8"</span>,<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有中文编码</span></span><br><span class="line">encode(<span class="string">'ansi'</span>) =&gt; decode(<span class="string">"utf8"</span>,<span class="string">"ignore"</span>)</span><br></pre></td></tr></table></figure></p><p>然后顺手提交了一个 PR。</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/10/20221012214713.png" alt="WeiyiGeek.在源项目中查看提交的PR图" title="" class="">                <p>WeiyiGeek.在源项目中查看提交的PR图</p>            </figure><p>[^features.html]: MobaXterm 功能参考 : <a href="https://mobaxterm.mobatek.net/features.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/features.html</a><br>[^download.html]: MobaXterm 版本下载地址 : <a href="https://mobaxterm.mobatek.net/download.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/download.html</a><br>[^plugins.html]:  MobaXterm 插件下载地址 : <a href="https://mobaxterm.mobatek.net/plugins.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/plugins.html</a> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Vulnerable" scheme="https://blog.weiyigeek.top/categories/Vulnerable/"/>
    
    <category term="Security" scheme="https://blog.weiyigeek.top/categories/Vulnerable/Security/"/>
    
    
    <category term="MobaXterm" scheme="https://blog.weiyigeek.top/tags/MobaXterm/"/>
    
  </entry>
  
  <entry>
    <title>个人规划/Untitled</title>
    <link href="https://blog.weiyigeek.top/2022/10-6-index.html"/>
    <id>https://blog.weiyigeek.top/2022/10-6-index.html</id>
    <published>2022-10-06T03:58:07.936Z</published>
    <updated>2022-10-06T03:58:07.936Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>9.使用RedisInsight工具对Redis集群CURD操作及数据可视化和性能监控</title>
    <link href="https://blog.weiyigeek.top/2022/9-20-686.html"/>
    <id>https://blog.weiyigeek.top/2022/9-20-686.html</id>
    <published>2022-09-20T14:35:30.000Z</published>
    <updated>2022-09-20T14:13:29.028Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-快速介绍"><a href="#0x00-快速介绍" class="headerlink" title="0x00 快速介绍"></a>0x00 快速介绍</h2><p><strong>什么是RedisInsight?</strong></p><blockquote><p>RedisInsight 是一个直观而高效的 Redis GUI (<code>可视化工具</code>)，它提供了设计、开发和优化 Redis 应用程序的功能，查询、分析您的 Redis 数据并与之交互，简化您的 Redis 应用程序开发 。（必备）<br>RedisInsight 现在采用了基于流行的 <code>Electron</code> 框架的全新技术堆栈, 它可以跨平台运行，支持 Linux、Windows 和 MacOS。 </p></blockquote><p><strong>为啥用RedisInsight?</strong><br>描述：RedisInsight 提供直观的 Redis 管理 GUI，有助于优化您在应用程序中对 Redis 的使用，相比于其他可视化工具，其实现的功能更强大、执行效率更改，通用性更好等特定，</p><p>下面列举出 RedisInsight 的亮点功能：</p><ul><li>唯一支持 Redis Cluster 的 GUI 工具；</li><li>可以基于 Browser 的界面来进行搜索键、查看和编辑数据；</li><li>支持基于 SSL/TLS 的连接，同时还可以在界面上进行内存分析；</li><li>支持连接 Redis Open Source、 Redis Stack 、 Redis Enterprise Software 、 Redis Enterprise Cloud 和 Amazon ElastiCache等系统；</li><li>支持自定义扩展插件实现更多功能。</li></ul><p><br/></p><p>RedisInsight 支持的功能：</p><ul><li>直观且高效的 GUI: 允许您与数据库交互、监控和管理您的数据。</li><li>CRUD支持更广泛：允许对列表、哈希、字符串、集、排序集以及流Stream 数据库结构支持 CRUD 。</li><li>多行查询编辑器：进行构建查询、探索结果、优化和快速迭代，支持 JSON 、 Search 、 Graph 、 Streams 、 Time Series 和 RedisGears 。 </li><li>内存分析：通过密钥模式、过期密钥和高级搜索来分析内存使用情况，以识别内存问题， 利用建议来减少内存使用量。 </li><li>命令调试: 识别顶部键、键模式和命令，按集群所有节点的客户端 IP 地址、密钥或命令进行过滤，有效地调试 Lua 脚本，并利用 Redis CLI 提供语法突出显示和自动完成功能，并采用集成帮助来提供直观的即时帮助。</li><li>指标监控：通过界面深入了解实时性能指标、检查慢速命令并管理 Redis 配置。 </li><li>发布/订阅：支持 Redis 发布/订阅，支持订阅频道并将消息发布到频道</li><li>数据浏览：浏览、筛选、可视化您的键值 Redis 数据结构，并查看不同格式（包括 JSON、十六进制、ASCII 等）的键值</li><li>平台兼容：适用于苹果操作系统（包括 M1）、Windows和 Linux</li></ul><p>补充：官方推荐的其他Redis数据库相关工具查看 [ <a href="https://redis.io/docs/tools/" target="_blank" rel="noopener">https://redis.io/docs/tools/</a> ]，当然你也可以可以选择客户端桌面管理工具(例如，AnotherRedisDesktopManage [ <a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager</a> ] )</p><hr><h2 id="0x01-安装部署"><a href="#0x01-安装部署" class="headerlink" title="0x01 安装部署"></a>0x01 安装部署</h2><p>描述：redis-insight 与现在大多数软件一样，有多种安装方式其中用得比较多的就是二进制、源码编译以及容器化部署的方式。</p><h3 id="二进制方式"><a href="#二进制方式" class="headerlink" title="二进制方式"></a>二进制方式</h3><p>描述：我们需要在Redis官方进行下载 redis-insight 二进制包然后进行安装部署，有可能国内下载比较缓慢，此时我已将其打包下来，方便大家下载。</p><p>Redis GUI redis-insight 工具 下载: </p><ul><li><a href="https://share.weiyigeek.top/d/36158960-51461225-1d5ee1?p=2088" target="_blank" rel="noopener">https://share.weiyigeek.top/d/36158960-51461225-1d5ee1?p=2088</a> (访问密码: 2088)</li><li><a href="https://url60.ctfile.com/d/36158960-51461225-1d5ee1?p=2088" target="_blank" rel="noopener">https://url60.ctfile.com/d/36158960-51461225-1d5ee1?p=2088</a> (访问密码: 2088)</li></ul><p><strong>环境依赖</strong></p><table><thead><tr><th style="text-align:center">Requirement</th><th style="text-align:center">Ubuntu</th><th style="text-align:center">MacOS</th><th style="text-align:center">Windows</th></tr></thead><tbody><tr><td style="text-align:center">Operating System</td><td style="text-align:center">Ubuntu 18.04 LTS or later</td><td style="text-align:center">MacOS 10.13 or later</td><td style="text-align:center">Windows 10</td></tr><tr><td style="text-align:center">Memory (RAM)</td><td style="text-align:center">8GB</td><td style="text-align:center">8GB</td><td style="text-align:center">8GB</td></tr><tr><td style="text-align:center">Processor</td><td style="text-align:center">64 bit</td><td style="text-align:center">64 bit</td><td style="text-align:center">32 bit or 64 bit</td></tr></tbody></table><p><br/></p><p><strong>安装环境</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release  -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04.3 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br><span class="line"></span><br><span class="line">$ lscpu  | grep <span class="string">"CPU(s)"</span></span><br><span class="line">CPU(s):                          4</span><br><span class="line">On-line CPU(s) list:             0-3</span><br><span class="line"></span><br><span class="line">$ lsmem  | grep <span class="string">"Total online memory"</span></span><br><span class="line">Total online memory:       8G</span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>安装流程</strong></p><p>步骤 01.官网下载 RedisInsight 上传到 /usr/local/bin 目录 并打开 shell 终端赋予其下载权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mv redisinsight-linux64-1.13.0 redisinsight-linux64</span><br><span class="line">chmod +x redisinsight-linux64</span><br></pre></td></tr></table></figure></p><p>步骤 02.设置Redisinsight启动所需的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.redisinsight</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIHOST=0.0.0.0"</span> &gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIPORT=8081"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIHOMEDIR=~/.redisinsight"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RILOGDIR=~/.redisinsight"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>温馨提示：如果使用了<code>REDISINSIGHT_HOST, REDISINSIGHT_PORT, REDISINSIGHT_HOME_DIR and LOG_DIR</code>等环境变量便会出现如下提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING 2022-09-20 05:56:33,461 redisinsight_startup REDISINSIGHT_HOST, REDISINSIGHT_PORT, REDISINSIGHT_HOME_DIR and LOG_DIR environment variables will be deprecated in the version v1.9.</span><br><span class="line">Please use RIHOST, RIPORT, RIHOMEDIR and RILOGDIR environment variables for setting host, port, db directory and log directory respectively.</span><br></pre></td></tr></table></figure></p><p>步骤 03.启动Redisinsight并后台运行它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  后台运行</span></span><br><span class="line">nohup /usr/<span class="built_in">local</span>/bin/redisinsight-linux64 &gt; ~/.redisinsight/console.log 2&gt;&amp;1 &amp;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">步骤 04.查看 redisinsight 进程运行情况</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">root@weiyigeek:~<span class="comment"># ps aux | grep "redisinsight"</span></span><br><span class="line">root        6592  8.0  0.0   3220  2212 pts/0    S    13:59   0:00 /usr/<span class="built_in">local</span>/bin/redisinsight-linux64</span><br><span class="line">root        6593  8.9  0.9 602080 74616 pts/0    Sl   13:59   0:00 /usr/<span class="built_in">local</span>/bin/redisinsight-linux64</span><br><span class="line">root        6602  0.0  0.0   6432   724 pts/0    S+   13:59   0:00 grep redisinsight</span><br><span class="line">root@weiyigeek:~<span class="comment"># netstat -ano | grep ":8081"</span></span><br><span class="line">tcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN      off (0.00/0/0)</span><br></pre></td></tr></table></figure><p>步骤 05.访问部署的redisinsight站点 <a href="http://10.20.172.201:8081/" target="_blank" rel="noopener">http://10.20.172.201:8081/</a> 进行下一步配置，继续配置你的 Redis 数据库，此处我已经搭建好了一个redis数据库如需搭建请参考此篇文章【<a href="https://blog.weiyigeek.top/2022/4-24-653.html">https://blog.weiyigeek.top/2022/4-24-653.html</a>】，点击连接到 Redis 数据库进入到下一步。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143243.png" alt="WeiyiGeek.redisinsight站点" title="" class="">                <p>WeiyiGeek.redisinsight站点</p>            </figure><p>步骤 06.进行配置Redis数据库信息，此处我是单节点进行演示，输入主机、端口、名称、以及redis密码。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143416.png" alt="WeiyiGeek.配置Redis数据库信息" title="" class="">                <p>WeiyiGeek.配置Redis数据库信息</p>            </figure><p>至此安装配置完成，使用将在后续实践！</p><p><br/></p><h3 id="容器化方式"><a href="#容器化方式" class="headerlink" title="容器化方式"></a>容器化方式</h3><p>描述：当下大多数企业的应用都是在容器环境中运行，所以redis官方也提供了相应容器镜像以及在kubernetes中部署的资源清单，下述将演示在 Kubernetes 上安装 RedisInsight，安装高可用的K8S可以参照此篇文章 【 <a href="https://blog.weiyigeek.top/2022/6-7-664.html">https://blog.weiyigeek.top/2022/6-7-664.html</a> 】</p><p>镜像主页：<a href="https://hub.docker.com/r/redislabs/redisinsight/tags" target="_blank" rel="noopener">https://hub.docker.com/r/redislabs/redisinsight/tags</a><br>镜像名称：<code>docker pull redislabs/redisinsight:1.13.0</code></p><p><strong>部署方式</strong></p><p>步骤 01.在 k8s 集群中创建一个 RedisInsight 部署和服务 YAML 文件资源清单，注意此处我使用了动态存储卷，如果有需要的部署nfs动态存储卷可参考此篇文章（ <a href="https://blog.weiyigeek.top/2022/6-7-664.html">https://blog.weiyigeek.top/2022/6-7-664.html</a> ）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tee</span> <span class="string">redisinsight-1.13.0.yaml</span> <span class="string">&lt;&lt;'EOF'</span></span><br><span class="line"><span class="comment"># RedisInsight service with name 'redisinsight-service'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># RedisInsight persistant storage </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight-pv-claim</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">2</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># RedisInsight deployment with name 'redisinsight'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight</span>   <span class="comment"># deployment name</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span>  <span class="comment"># deployment label</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span>          <span class="comment"># a single replica pod</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Recreate</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">redisinsight</span> <span class="comment"># which pods is the deployment managing, as defined by the pod template</span></span><br><span class="line"><span class="attr">  template:</span>             <span class="comment"># pod template</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">redisinsight</span> <span class="comment"># label for pod/s</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">redisinsight-pv-claim</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">init</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">          command:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-c'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">|</span></span><br><span class="line"><span class="string">                            chown -R 1001 /db</span></span><br><span class="line"><span class="string"></span><span class="attr">          resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/db</span></span><br><span class="line"><span class="attr">          terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">          terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span>  <span class="string">redisinsight</span>                  <span class="comment"># Container name (DNS_LABEL, unique)</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">redislabs/redisinsight:1.13.0</span> <span class="comment"># Hub Image</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span>        <span class="comment"># Pull Policy</span></span><br><span class="line"><span class="attr">          env:</span> </span><br><span class="line"><span class="attr">          - name:</span> <span class="string">RIHOST</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">RIPORT</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">"8001"</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">db</span> </span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/db</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">8001</span>        <span class="comment"># exposed container port and protocol</span></span><br><span class="line"><span class="attr">            protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">          livenessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line">              <span class="string">path</span> <span class="string">:</span> <span class="string">/healthcheck/</span>     <span class="comment"># exposed RI endpoint for healthcheck</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8001</span>               <span class="comment"># exposed container port</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">5</span>      <span class="comment"># number of seconds to wait after the container starts to perform liveness probe</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">5</span>            <span class="comment"># period in seconds after which liveness probe is performed</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">1</span>         <span class="comment"># number of liveness probe failures after which container restarts</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>步骤02.在k8s集群中部署 redisinsight v1.13.0 应用、服务以及持久化卷，查看其部署状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace dev</span><br><span class="line">namespace/dev created</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f redisinsight-1.13.0.yaml</span><br><span class="line">service/redisinsight-service created</span><br><span class="line">persistentvolumeclaim/redisinsight-pv-claim created</span><br><span class="line">deployment.apps/redisinsight created</span><br><span class="line"></span><br><span class="line">$ kubectl get pod,svc -n dev -o wide</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/redisinsight-55d44b5bb-xzggg   1/1     Running   0          3m22s   10.66.182.217   weiyigeek-226   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE     SELECTOR</span><br><span class="line">service/redisinsight-service   LoadBalancer   10.108.198.8   &lt;pending&gt;     80:31793/TCP   3m22s   app=redisinsight</span><br><span class="line"></span><br><span class="line">$ curl -I 10.66.182.217:8001</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口转发</span></span><br><span class="line">$ kubectl -n dev port-forward deployment/redisinsight --address 0.0.0.0 30081:8001</span><br><span class="line">Forwarding from 0.0.0.0:30081 -&gt; 8001</span><br><span class="line">Handling connection <span class="keyword">for</span> 30081</span><br><span class="line">Handling connection <span class="keyword">for</span> 30081</span><br></pre></td></tr></table></figure><p>步骤 03.成功应用并完成部署和服务，我们可通过浏览器访问 192.168.1.107:31793 便可看到如下图所示界面。<br><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143243.png" alt="WeiyiGeek.redisinsight站点" title="" class="">                <p>WeiyiGeek.redisinsight站点</p>            </figure></p><p>至此，在k8s集群中部署完毕</p><hr><h2 id="0x02-实践应用"><a href="#0x02-实践应用" class="headerlink" title="0x02 实践应用"></a>0x02 实践应用</h2><h3 id="1-配置连接的Redis数据库"><a href="#1-配置连接的Redis数据库" class="headerlink" title="1.配置连接的Redis数据库"></a>1.配置连接的Redis数据库</h3><p>描述：在使用任何工具处理数据库之前，必须先添加数据库（Add Database），以便 RedisInsight 可以连接到该数据库，添加独立的 Redis 数据库 这是只有一台 Redis 服务器的 Redis 数据库最简单的设置，当然也支持独立 Redis 集群 Redis Sentinel 或者 具有TLS认证的Redis数据库。<br>注意：目前 RedisInsight 支持 Redis 版本 4 及更高版本。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143416.png" alt="WeiyiGeek.配置Redis数据库信息" title="" class="">                <p>WeiyiGeek.配置Redis数据库信息</p>            </figure><h3 id="2-查看Redis数据库实时统计信息"><a href="#2-查看Redis数据库实时统计信息" class="headerlink" title="2.查看Redis数据库实时统计信息"></a>2.查看Redis数据库实时统计信息</h3><p>描述：点击配置好的Redis数据目标，即可看到如下overview页面</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920173633.png" alt="WeiyiGeek.此Redis数据库的实时统计信息" title="" class="">                <p>WeiyiGeek.此Redis数据库的实时统计信息</p>            </figure><h3 id="3-操作Redis数据库中的数据"><a href="#3-操作Redis数据库中的数据" class="headerlink" title="3.操作Redis数据库中的数据"></a>3.操作Redis数据库中的数据</h3><p>描述: 可以通过使用 Browser（图形） 或者 cli（命令行）进行Redis数据库的CURD，如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920174712.png" alt="WeiyiGeek.Redis数据库的CURD操作" title="" class="">                <p>WeiyiGeek.Redis数据库的CURD操作</p>            </figure><h3 id="4-操作Redis数据库中的流Streams数据"><a href="#4-操作Redis数据库中的流Streams数据" class="headerlink" title="4.操作Redis数据库中的流Streams数据"></a>4.操作Redis数据库中的流Streams数据</h3><p>描述: 可以通过使用 Streams 选项进行 Redis 流操作。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920174755.png" alt="WeiyiGeek.Redis数据库的流操作" title="" class="">                <p>WeiyiGeek.Redis数据库的流操作</p>            </figure><h3 id="5-性能内存、慢查询分析"><a href="#5-性能内存、慢查询分析" class="headerlink" title="5.性能内存、慢查询分析"></a>5.性能内存、慢查询分析</h3><p>描述：RedisInsight 提供了强大的分析功能，支持内存使用分析、分析器(<code>在Redis中执行的命令过程摘要分析</code>)以及慢日志查询。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920180241.png" alt="WeiyiGeek.Redis数据库分析" title="" class="">                <p>WeiyiGeek.Redis数据库分析</p>            </figure><h3 id="6-可视化配置redis数据库"><a href="#6-可视化配置redis数据库" class="headerlink" title="6.可视化配置redis数据库"></a>6.可视化配置redis数据库</h3><p>描述：在Database选项卡中我们可以直接配置Redis数据库，包括其网络配置、通用配置以及快照、配置等等。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920175742.png" alt="WeiyiGeek.在线配置redis数据库" title="" class="">                <p>WeiyiGeek.在线配置redis数据库</p>            </figure><p>当然对应devops来说使用最多的还是CURD以及性能分析以及优化，此工具还是非常方便的，如需解更多其它功能需的朋友，可参考 redisinsight 用户使用文档：<a href="https://docs.redis.com/latest/ri/using-redisinsight/" target="_blank" rel="noopener">https://docs.redis.com/latest/ri/using-redisinsight/</a></p><hr><h2 id="0x03-入坑出坑"><a href="#0x03-入坑出坑" class="headerlink" title="0x03 入坑出坑"></a>0x03 入坑出坑</h2><h3 id="问题1-运行-RedisInsight-v2-linux-x86-64-时出现不存在libatk-1-0-so-0-libatk-bridge-2-0-so-0-libcups-so-2-libgtk-3-so-0等错误"><a href="#问题1-运行-RedisInsight-v2-linux-x86-64-时出现不存在libatk-1-0-so-0-libatk-bridge-2-0-so-0-libcups-so-2-libgtk-3-so-0等错误" class="headerlink" title="问题1.运行 RedisInsight-v2-linux-x86_64 时出现不存在libatk-1.0.so.0/libatk-bridge-2.0.so.0/libcups.so.2/libgtk-3.so.0等错误"></a>问题1.运行 RedisInsight-v2-linux-x86_64 时出现不存在<code>libatk-1.0.so.0/libatk-bridge-2.0.so.0/libcups.so.2/libgtk-3.so.0</code>等错误</h3><ul><li><p>错误信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># wget https://download.redisinsight.redis.com/latest/RedisInsight-v2-linux-x86_64.AppImage</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># mv RedisInsight-v2-linux-x86_64.AppImage RedisInsight</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># chmod +x RedisInsight</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># ./RedisInsight</span></span><br><span class="line">/tmp/.mount_RedisIuCY68M/redisinsight: error <span class="keyword">while</span> loading shared libraries: libatk-1.0.so.0: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisIbwUuBs/redisinsight: error <span class="keyword">while</span> loading shared libraries: libatk-bridge-2.0.so.0: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisIb3qNiD/redisinsight: error <span class="keyword">while</span> loading shared libraries: libcups.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisI9GZsHC/redisinsight: error <span class="keyword">while</span> loading shared libraries: libgtk-3.so.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></li><li><p>解决办法：由于我的测试系统是Ubuntu的则使用apt命令安装错误提示中的依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install libatk1.0-dev</span><br><span class="line">apt install libatk-bridge2.0-dev</span><br><span class="line">apt install libcups2-dev</span><br><span class="line">apt install libgtk-3-dev</span><br></pre></td></tr></table></figure></li></ul><p><br/></p><h3 id="问题2-运行-RedisInsight-v2-linux-x86-64-时出现-root-without-no-sandbox-is-not-supported-错误提示："><a href="#问题2-运行-RedisInsight-v2-linux-x86-64-时出现-root-without-no-sandbox-is-not-supported-错误提示：" class="headerlink" title="问题2.运行 RedisInsight-v2-linux-x86_64 时出现 root without --no-sandbox is not supported 错误提示："></a>问题2.运行 RedisInsight-v2-linux-x86_64 时出现 <code>root without --no-sandbox is not supported</code> 错误提示：</h3><p>错误信息：<code>[0920/133850.852943:FATAL:electron_main_delegate.cc(292)] Running as root without --no-sandbox is not supported. See https://crbug.com/638180.</code><br>解决办法：在低权限用户中执行<code>./RedisInsight</code>启动RedisInsight服务即可。</p><hr><h2 id="0x0n-参考来源"><a href="#0x0n-参考来源" class="headerlink" title="0x0n 参考来源"></a>0x0n 参考来源</h2><p>官网地址：<a href="https://redis.com/redis-enterprise/redis-insight/" target="_blank" rel="noopener">https://redis.com/redis-enterprise/redis-insight/</a><br>项目源码：<a href="https://github.com/RedisInsight/RedisInsight" target="_blank" rel="noopener">https://github.com/RedisInsight/RedisInsight</a><br>项目文档：<a href="https://docs.redis.com/latest/ri" target="_blank" rel="noopener">https://docs.redis.com/latest/ri</a><br>下载地址：<a href="https://redis.com/redis-enterprise/redis-insight/#insight-form" target="_blank" rel="noopener">https://redis.com/redis-enterprise/redis-insight/#insight-form</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://blog.weiyigeek.top/categories/Database/"/>
    
    
    <category term="Redis" scheme="https://blog.weiyigeek.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Kaniko在Kubernetes集群中快速构建推送容器镜像</title>
    <link href="https://blog.weiyigeek.top/2022/9-1-684.html"/>
    <id>https://blog.weiyigeek.top/2022/9-1-684.html</id>
    <published>2022-09-01T09:37:47.000Z</published>
    <updated>2022-09-09T02:45:54.933Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><h3 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h3><h4 id="什么是Kaniko"><a href="#什么是Kaniko" class="headerlink" title="什么是Kaniko?"></a>什么是Kaniko?</h4><blockquote><p>kaniko 是一个在 containerd 或 Kubernetes 集群内从 Dockerfile 构建容器镜像的工具 ( Build Container Images In Kubernetes )。</p></blockquote><figure class="image-box">                <img src="https://raw.githubusercontent.com/GoogleContainerTools/kaniko/main/docs/demo.gif" alt="官方介绍" title="" class="">                <p>官方介绍</p>            </figure><p>温馨提示: kaniko不是谷歌官方发布支持的产品.</p><h4 id="为啥用Kaniko"><a href="#为啥用Kaniko" class="headerlink" title="为啥用Kaniko?"></a>为啥用Kaniko?</h4><blockquote><p>由于 kaniko 不依赖于 Docker 守护进程，并且完全在用户空间中执行 Dockerfile 中的每个命令，这使得能够在轻松或安全地运行在<code>无Docker守护程序的环境</code>（如标准Kubernetes集群 V1.24.x）中构建容器映像。<br>在 Kubernetes V1.24.x 版本之后默认采用 containerd.io 作为缺省的cri，不在支持 docker-shim 意味着我们不需要安装 docker 环境</p></blockquote><h4 id="Kaniko-是如何工作的"><a href="#Kaniko-是如何工作的" class="headerlink" title="Kaniko 是如何工作的?"></a>Kaniko 是如何工作的?</h4><p>kaniko 执行器镜像负责从 Dockerfile 构建镜像并将其推送到注册表，其流程大致如下：</p><ul><li>首先在执行者图像中，我们提取基础镜像的文件系统（Dockerfile 中的 FROM 镜像）。 </li><li>其次我们执行 Dockerfile 中的命令，之后在用户空间中对文件系统进行快照每一个。 </li><li>然后在每个命令之后，我们将一层更改的文件附加到基础 图像（如果有）并更新图像元数据。 </li></ul><h4 id="Kaniko-已知功能问题"><a href="#Kaniko-已知功能问题" class="headerlink" title="Kaniko 已知功能问题"></a>Kaniko 已知功能问题</h4><ul><li>kaniko 不支持构建 Windows 容器。 </li><li>kaniko 不支持 v1 Registry API。(由于其不安全性当前基本都是使用V2协议, 例如 Harbor)</li><li>kaniko 不支持在除官方kaniko映像之外的任何Docker映像中运行二进制Kanico可执行文件（即YMMV）。</li></ul><h4 id="kaniko-构建上下文"><a href="#kaniko-构建上下文" class="headerlink" title="kaniko 构建上下文"></a>kaniko 构建上下文</h4><p>描述: kaniko 的构建上下文与您发送 Docker 守护程序以进行映像构建的构建上下文非常相似；它代表一个包含 Dockerfile 的目录，kaniko 将使用它来构建您的图像。<br>例如, Dockerfile 中的 COPY 命令应该引用构建上下文中的文件, 所以您需要将构建上下文存储在 kaniko 可以访问的位置。 </p><p>目前kaniko 支持以下存储解决方案：</p><ul><li>GCS Bucket</li><li>S3 Bucket</li><li>Azure Blob Storage</li><li>Local Directory</li><li>Local Tar</li><li>Standard Input</li><li>Git Repository</li></ul><p>运行 kaniko 时，使用 <code>--context</code> 带有适当前缀的标志指定构建上下文的位置, 如果您不指定前缀 kaniko 将假定一个本地目录, 该参数可用值：</p><table><thead><tr><th style="text-align:left">Source</th><th>Prefix</th><th>Example</th></tr></thead><tbody><tr><td style="text-align:left">Local Directory</td><td>dir://[path to a directory in the kaniko container]</td><td><code>dir:///workspace</code></td></tr><tr><td style="text-align:left">Local Tar Gz</td><td>tar://[path to a .tar.gz in the kaniko container]</td><td><code>tar://path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Standard Input</td><td>tar://[stdin]</td><td><code>tar://stdin</code></td></tr><tr><td style="text-align:left">GCS Bucket</td><td>gs://[bucket name]/[path to .tar.gz]</td><td><code>gs://kaniko-bucket/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">S3 Bucket</td><td>s3://[bucket name]/[path to .tar.gz]</td><td><code>s3://kaniko-bucket/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Azure Blob Storage</td><td>https://[account].[azureblobhostsuffix]/[container]/[path to .tar.gz]</td><td><code>https://myaccount.blob.core.windows.net/container/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Git Repository</td><td>git://[repository url][#reference][#commit-id]</td><td><code>git://github.com/acme/myproject.git#refs/heads/mybranch#</code></td></tr></tbody></table><p>例如，要使用名为 kaniko-bucket 的 GCS 存储桶，您需要传入 <code>--context=gs://kaniko-bucket/path/to/context.tar.gz</code> 。</p><p>温馨提示：kaniko 允许的唯一标准输入是 <code>.tar.gz</code> 格式, 如果要创建压缩 tar，您可以运行 <code>tar -C &lt;path to build context&gt; -zcvf context.tar.gz .</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ls cache/</span><br><span class="line">Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩上下文目录</span></span><br><span class="line">$ tar -C cache/ -zcvf context.tar.gz .</span><br><span class="line">./</span><br><span class="line">./Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩文件</span></span><br><span class="line">$ tar -ztvf context.tar.gz</span><br><span class="line">drwxr-xr-x root/root         0 2022-09-08 23:03 ./</span><br><span class="line">-rw-r--r-- root/root        52 2022-09-08 23:04 ./Dockerfile</span><br></pre></td></tr></table></figure><h4 id="kaniko-缓存构建"><a href="#kaniko-缓存构建" class="headerlink" title="kaniko 缓存构建"></a>kaniko 缓存构建</h4><ul><li>Caching Layers ：kaniko 可以在远程存储库中缓存由RUN（由flag–cache-RUN-layers配置）和COPY（由flag–cache-COPY-layeers配置）命令创建的层。<blockquote><p>在执行命令之前 kaniko 会检查层的缓存，如果存在 kaniko将拉取并提取缓存层，而不是执行命令。如果没有 kaniko将执行命令，然后将新创建的层推送到缓存。<br>用户可以通过设置 <code>--cache=true</code> 标志选择缓存,并且可以通过<code>--cache-repo</code> 标志提供用于存储缓存层的远程存储库, 如果未提供此标志则将从提供的<code>--destination</code>推断缓存的repo。<br>温馨提示: 在缓存未命中后，kaniko无法从缓存中找到读取层，所有后续层都将在本地构建，而无需咨询缓存。</p></blockquote></li><li>Caching Base Images: kaniko 可以将图像缓存在本地目录中，该目录可以卷装载到KanikoPod中。为此必须首先填充缓存, 我们在 <code>gcr.io/kaniko-project/warmer</code> 提供了一个kaniko缓存预热映像：<blockquote><p>–image : 指定所需任意数量的图像, 填充缓存后 使用与上述相同的 <code>--cache=true</code> 标志选择缓存, 本地缓存的位置通过 <code>--cache-dir</code> 标志提供，默认为 <code>/cache</code> 与缓存预热器一样, 在实践中通常与 Kubernetes 集群和持久缓存卷一起使用。<br>示例： <code>docker run -v $(pwd):/workspace gcr.io/kaniko-project/warmer:latest --cache-dir=/workspace/cache --image=&lt;image to cache&gt; --image=&lt;another image to cache&gt;</code></p></blockquote></li></ul><hr><h2 id="0x01-部署使用"><a href="#0x01-部署使用" class="headerlink" title="0x01 部署使用"></a>0x01 部署使用</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>kaniko 图像镜像</li><li>一个 Kubernetes 集群 或者 一个 Containerd 容器运行环境。</li><li>一个 dockerhub 帐户 用于将构建的图像公开。</li></ul><p><br/></p><h3 id="小试牛刀之在Kubernetes集群中构建并发布镜像"><a href="#小试牛刀之在Kubernetes集群中构建并发布镜像" class="headerlink" title="小试牛刀之在Kubernetes集群中构建并发布镜像"></a>小试牛刀之在Kubernetes集群中构建并发布镜像</h3><p>描述: 此处我们准备在一个K8S集群中使用kaniko提供的镜像，按照提供的Dockerfile指令进行镜像构建，并上传到 docker hub 仓库中，以下为操作流程、</p><p><strong>操作流程</strong><br>步骤 01.首先, 为了加快构建速度, 我们提前在集群中拉取 <code>gcr.io/kaniko-project/executor</code> 镜像到本地, 由于国内无法直接拉取此处我采用这篇<a href="https://blog.weiyigeek.top/2022/6-1-663.html">【使用Aliyun容器镜像服务对海外gcr、quay仓库镜像进行镜像拉取构建】</a> 文章中的方法进行拉取构建国外gcr.io仓库中的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处我已经创建了国内可以访问拉取的 executor 镜像, 不想在Aliyun容器镜像服务中进行创建拉取的朋友可以直接使用如下仓库地址。</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ctr 或者 crictl 进行镜像拉取</span></span><br><span class="line">$ crictl pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line">$ crictl images | grep <span class="string">"kaniko-executor"</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor  latest  da9592dbe1de3   25.8MB</span><br></pre></td></tr></table></figure><p>步骤 02.准备一个 Dockerfile 此处将 <code>registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor</code> 镜像打包上传到hub中作为演示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存放dockerfile目录以及持久化缓存目录</span></span><br><span class="line">mkdir -vp /storage/dev/soft/kaniko/&#123;cache,demo&#125;</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTYPE=kaniko</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>步骤 03.创建一个授权令牌的 Secret , 此处以公共的docker hub为例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:</span></span><br><span class="line">~$ kubectl create secret docker-registry dockerhub --docker-server=&lt;your-registry-server&gt; --docker-username=&lt;your-name&gt; --docker-password=&lt;your-pword&gt; --docker-email=&lt;your-email&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数值:</span></span><br><span class="line"><span class="comment"># &lt;your-registry-server&gt; is your Private Docker Registry FQDN. (https://index.docker.io/v1/ for DockerHub)</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; is your Docker username.</span></span><br><span class="line"><span class="comment"># &lt;your-pword&gt; is your Docker password.</span></span><br><span class="line"><span class="comment"># &lt;your-email&gt; is your Docker email.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建示例: 此 docker-registry 将在 pod.yaml 配置中使用</span></span><br><span class="line">~$ kubectl create secret docker-registry dockerhub \</span><br><span class="line">--docker-server=https://index.docker.io/v1/ \</span><br><span class="line">--docker-username=weiyigeek \</span><br><span class="line">--docker-password=PASSWORD \</span><br><span class="line">--docker-email=master@weiyigeek.top</span><br><span class="line"><span class="comment"># secret/dockerhub created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建的 secrets 情况</span></span><br><span class="line">~$ kubectl get secrets dockerhub</span><br><span class="line">NAME        TYPE                             DATA   AGE</span><br><span class="line">dockerhub   kubernetes.io/dockerconfigjson   1      16s</span><br><span class="line"></span><br><span class="line">~$ kubectl get secrets dockerhub -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: eyJhdXRo*******VhsbE1qQXhPUT09In19fQ==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: dockerhub</span><br></pre></td></tr></table></figure></p><p>步骤 04.创建一个在k8s集群中运行的Pod，其资源清单如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tee</span> <span class="string">kaniko.yaml</span> <span class="string">&lt;&lt;'EOF'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kaniko</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">kaniko</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">DOCKERHUB</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"docker.io"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">AUTHOR</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"weiyigeek"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">IMAGE_NAME</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"kaniko-executor"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">IMAGE_VERSION</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"v1.9.0"</span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">[</span> <span class="string">"--dockerfile=/workspace/dockerfile"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--context=dir://workspace"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--destination=docker.io/weiyigeek/kaniko-executor:v1.9.0"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--cache"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--cache-dir=/cache"</span><span class="string">]</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kaniko-secret</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/kaniko/.docker</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">dockerfile-storage</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/workspace</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kaniko-cache</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/cache</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  nodeSelector:</span></span><br><span class="line">    <span class="string">kubernetes.io/hostname:</span> <span class="string">"weiyigeek-226"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">kaniko-secret</span></span><br><span class="line"><span class="attr">      secret:</span></span><br><span class="line"><span class="attr">        secretName:</span> <span class="string">dockerhub</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">.dockerconfigjson</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">config.json</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">dockerfile-storage</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/storage/dev/soft/kaniko/demo</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">kaniko-cache</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/storage/dev/soft/kaniko/cache</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># args 参数说明</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-dockerfile=/workspace/dockerfile</span>   <span class="comment"># 指定 dockerfile 路径</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-context=dir://workspace</span>            <span class="comment"># 指定构建上下文</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-destination=docker.io/weiyigeek/kaniko-executor:v1.9.0</span>  <span class="comment"># 指定生成镜像的tag</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-cache</span>     <span class="comment"># 使用缓存</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-cache-dir</span> <span class="comment"># 指定缓存目录</span></span><br></pre></td></tr></table></figure><p>温馨提示: kaniko 中的二进制可执行文件 executor 支持的参数详解(<a href="https://github.com/GoogleContainerTools/kaniko/#additional-flags" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/kaniko/#additional-flags</a>)</p><p>步骤 05.执行 <code>kubectl apply</code> 部署资源清单生成运行 pod , 此处通过 <code>kubectl logs</code> 日志命令可以发现kaniko执行镜像构建，以及上传镜像到docker hub之中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kaniko.yaml</span><br><span class="line"><span class="comment"># pod/kaniko created</span></span><br><span class="line"></span><br><span class="line">kubectl logs -f kaniko</span><br><span class="line"><span class="comment"># INFO[0005] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="comment"># INFO[0005] Retrieving image registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest from registry registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="comment"># INFO[0006] Built cross stage deps: map[]</span></span><br><span class="line"><span class="comment"># INFO[0006] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="comment"># INFO[0006] Returning cached image manifest</span></span><br><span class="line"><span class="comment"># INFO[0006] Executing 0 build triggers</span></span><br><span class="line"><span class="comment"># INFO[0006] Building stage 'registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest' [idx: '0', base-idx: '-1']</span></span><br><span class="line"><span class="comment"># INFO[0006] Skipping unpacking as no commands require it.</span></span><br><span class="line"><span class="comment"># INFO[0006] LABEL MAINTAINER=master@weiyigeeek.top BUILDTYPE=kaniko</span></span><br><span class="line"><span class="comment"># INFO[0006] Applying label MAINTAINER=master@weiyigeeek.top</span></span><br><span class="line"><span class="comment"># INFO[0006] Applying label BUILDTYPE=kaniko</span></span><br><span class="line"><span class="comment"># INFO[0006] Pushing image to docker.io/weiyigeek/kaniko-executor:v1.9.0</span></span><br></pre></td></tr></table></figure><p>步骤 06.在客户端中可以使用 docker 或者 ctr 、crictl 命令将上传到hub中的镜像进行拉取, 并且查看hub仓库中的 <code>kaniko-executor:v1.9.0</code> 镜像信息（<a href="https://hub.docker.com/r/weiyigeek/kaniko-executor）。" target="_blank" rel="noopener">https://hub.docker.com/r/weiyigeek/kaniko-executor）。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull weiyigeek/kaniko-executor:v1.9.0</span><br><span class="line">9d4299bbd943: Already exists</span><br><span class="line">..............</span><br><span class="line">a8dae3110e38: Already exists</span><br><span class="line">v1.9.0: Pulling from weiyigeek/kaniko-executor</span><br><span class="line">Digest: sha256:9b0ef02e7650d00d24bbca683e317bc103d6d842311ff13ec6daee60c37b1e62</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> weiyigeek/kaniko-executor:v1.9.0</span><br><span class="line">docker.io/weiyigeek/kaniko-executor:v1.9.0</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908153522.png" alt="WeiyiGeek.K8S集群中kaniko-executor" title="" class="">                <p>WeiyiGeek.K8S集群中kaniko-executor</p>            </figure><p>步骤 07.扩展补充，除了上述方式指定dockerfile文件和上下文外，我们还可以在运行 kaniko 时使用标准输入构建上下文，但需要添加 <code>-i, --interactive</code>参数, 一旦kaniko运行它将从STDIN获取数据，并将构建上下文创建为压缩tar，然后它将在启动映像构建之前解包构建上下文的压缩tar。</p><p>如何使用 .tar.gz 标准输入数据交互运行 kaniko 的完整示例，使用带有临时容器和完全无 docker 环境的 Kubernetes 命令行来进行镜像构建与发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'FROM alpine \nRUN echo "created from standard input"'</span> &gt; Dockerfile | tar -cf - Dockerfile | gzip -9 | kubectl run kaniko-executor \</span><br><span class="line">--rm --stdin=<span class="literal">true</span> \</span><br><span class="line">--image=registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest --restart=Never \</span><br><span class="line">--overrides=<span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "apiVersion": "v1",</span></span><br><span class="line"><span class="string">  "spec": &#123;</span></span><br><span class="line"><span class="string">    "containers": [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-executor",</span></span><br><span class="line"><span class="string">        "image": "registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest",</span></span><br><span class="line"><span class="string">        "stdin": true,</span></span><br><span class="line"><span class="string">        "stdinOnce": true,</span></span><br><span class="line"><span class="string">        "args": [</span></span><br><span class="line"><span class="string">          "--dockerfile=Dockerfile",</span></span><br><span class="line"><span class="string">          "--context=tar://stdin",</span></span><br><span class="line"><span class="string">          "--destination=docker.io/weiyigeek/alpine:v4.2"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "volumeMounts": [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            "name": "kaniko-secret",</span></span><br><span class="line"><span class="string">            "mountPath": "/kaniko/.docker/"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    "nodeSelector": &#123; </span></span><br><span class="line"><span class="string">      "kubernetes.io/hostname": "weiyigeek-226"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "volumes": [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-secret",</span></span><br><span class="line"><span class="string">        "secret": &#123;</span></span><br><span class="line"><span class="string">          "secretName": "dockerhub",</span></span><br><span class="line"><span class="string">          "items": [&#123;"key":".dockerconfigjson", "path": "config.json"&#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "dockerfile-storage",</span></span><br><span class="line"><span class="string">        "hostPath": &#123;</span></span><br><span class="line"><span class="string">          "path": "/storage/dev/soft/kaniko/demo",</span></span><br><span class="line"><span class="string">          "type": "DirectoryOrCreate"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-cache",</span></span><br><span class="line"><span class="string">        "hostPath": &#123;</span></span><br><span class="line"><span class="string">          "path": "/storage/dev/soft/kaniko/cache",</span></span><br><span class="line"><span class="string">          "type": "DirectoryOrCreate"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INFO[0003] Retrieving image manifest alpine</span><br><span class="line">INFO[0003] Retrieving image alpine from registry index.docker.io</span><br><span class="line">INFO[0009] Built cross stage deps: map[]</span><br><span class="line">INFO[0009] Retrieving image manifest alpine</span><br><span class="line">INFO[0009] Returning cached image manifest</span><br><span class="line">INFO[0009] Executing 0 build triggers</span><br><span class="line">INFO[0009] Building stage <span class="string">'alpine'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0009] Unpacking rootfs as cmd RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span> requires it.</span><br><span class="line">INFO[0036] RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span></span><br><span class="line">INFO[0036] Initializing snapshotter ...</span><br><span class="line">INFO[0036] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0036] Cmd: /bin/sh</span><br><span class="line">INFO[0036] Args: [-c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">INFO[0036] Running: [/bin/sh -c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">created from standard input</span><br><span class="line">INFO[0036] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0037] No files were changed, appending empty layer to config. No layer added to image.</span><br><span class="line">INFO[0037] Pushing image to docker.io/weiyigeek/alpine:v4.2</span><br><span class="line">INFO[0042] Pushed index.docker.io/weiyigeek/alpine@sha256:0ef53bcc0a6f261124e5f292fa17041d7e5f81f5542802b89c249351597167e4</span><br><span class="line">pod <span class="string">"kaniko-executor"</span> deleted</span><br></pre></td></tr></table></figure></p><p>至此在 K8s 集群中使用 kaniko 构建镜像简单演示结束。</p><p><br/></p><h3 id="小试牛刀之在Containerd-io中构建并发布镜像"><a href="#小试牛刀之在Containerd-io中构建并发布镜像" class="headerlink" title="小试牛刀之在Containerd.io中构建并发布镜像"></a>小试牛刀之在Containerd.io中构建并发布镜像</h3><p>描述：当我们的环境中只安装了containerd.io 容器运行时没有 Docker 或者 Kubernetes 环境时，我们也可以采用kaniko进行镜像构建与发布，具体操作流程步骤如下：</p><p><strong>环境说明</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04.3 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br><span class="line"></span><br><span class="line">$ containerd -v</span><br><span class="line">containerd containerd.io 1.4.12 7b11cfaabd73bb80907dd23182b9347b4245eb5d</span><br><span class="line"></span><br><span class="line">$ ctr -v</span><br><span class="line">ctr containerd.io 1.4.12</span><br></pre></td></tr></table></figure></p><p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, <span style="color:red">请大家疯狂的star </span>。<br>加固脚本地址:【 <a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p><p>温馨提示：如果你使用的是最新 Ubuntu 22.04 操作系统，并需要对其安全加固和内核优化以满足等保2.0要求可参考如下加固脚本 【<a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/OperatingSystem/Security/Ubuntu" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/OperatingSystem/Security/Ubuntu</a>】。</p><figure class="image-box">                <img src="https://github.com/WeiyiGeek/SecOpsDev/raw/master/OperatingSystem/Security/Ubuntu/Readme.assets/image-20220823143235577.png" alt="Ubuntu 22.04加固脚本示例图" title="" class="">                <p>Ubuntu 22.04加固脚本示例图</p>            </figure><p><br/></p><p><strong>操作流程</strong></p><p>步骤 01.此处假设你已经安装配置好containerd.io了，如果没有安装配置请参考此篇文章【 1.Containerd容器运行时初识与尝试 - <a href="https://blog.weiyigeek.top/2021/6-27-570.html">https://blog.weiyigeek.top/2021/6-27-570.html</a> 】，此处不再累述。</p><p>步骤 02.验证 containerd.io 服务状态以及提前拉取 <code>kaniko-executor:latest</code> 镜像以加快构建速度，此处将镜像拉到默认的名称空间下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status containerd.service</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/containerd.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-09-08 11:48:30 CST; 4h 49min ago</span><br><span class="line">       Docs: https://containerd.io</span><br><span class="line">    Process: 561811 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 561812 (containerd)</span><br><span class="line">      Tasks: 106</span><br><span class="line">     Memory: 4.0G</span><br><span class="line"></span><br><span class="line">$ ctr -n default images pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br></pre></td></tr></table></figure><p>步骤 03.准备登录 hub docker 的账号以及密码，你可以按照下述的流程进行生成config.json文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/&#123;config,demo1&#125;</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/config</span><br><span class="line"><span class="comment"># 生成认证所需的凭据</span></span><br><span class="line"><span class="comment"># BASE64 编码，注意下述为格式为 你的hub账号:你的hub密码</span></span><br><span class="line">AUTH=$(<span class="built_in">echo</span> -n <span class="string">"weiyigeek:password"</span> | base64)</span><br><span class="line"><span class="comment"># BASE64 解码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;AUTH&#125;</span> | base64 -d</span><br><span class="line"><span class="comment"># 使用该方法可以解析变量 AUTH (值得注意)</span></span><br><span class="line">cat &gt; config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"auths"</span>: &#123;</span><br><span class="line">    <span class="string">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"<span class="variable">$&#123;AUTH&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成结果</span></span><br><span class="line">cat config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"auths"</span>: &#123;</span><br><span class="line">    <span class="string">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"d2VpeWlnZ************AxOQ=="</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤 04.准备dockerfile文件，此处将<code>busybox:1.35.0</code>镜像重新构建后上传到我的账户下的hub仓库中，该文件示例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo1</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM docker.io/library/busybox:1.35.0</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=containerd.io;</span><br><span class="line">ENTRYPOINT [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello,busybox"</span>]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>步骤 05.当上述都准备完成后我们便可以执行containerd.io提供的ctr客户端工具直接创建容器，例如如下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctr -n default run --rm --net-host --env DOCKERHUB=docker.io \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/storage/dev/soft/kaniko/config,dst=/kaniko/.docker,options=rbind:ro \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/storage/dev/soft/kaniko/demo1,dst=/workspace,options=rbind:rw \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest kaniko-executor \</span><br><span class="line">/kaniko/executor --dockerfile=/workspace/dockerfile --context=dir://workspace --destination=docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-n 指定名称空间</span><br><span class="line">--rm 在退出容器时删除容器</span><br><span class="line">--net-host 使用主机网络</span><br><span class="line">--env 指定容器内部shell变量</span><br><span class="line">--mount 指定挂载到容器内部的本地文件，src是指定宿主机上文件目录路径，而dst是指定容器内部目录。</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INFO[0002] Retrieving image manifest docker.io/library/busybox:1.35.0</span><br><span class="line">INFO[0002] Retrieving image docker.io/library/busybox:1.35.0 from registry index.docker.io</span><br><span class="line">INFO[0006] Built cross stage deps: map[]</span><br><span class="line">INFO[0006] Retrieving image manifest docker.io/library/busybox:1.35.0</span><br><span class="line">INFO[0006] Returning cached image manifest</span><br><span class="line">INFO[0006] Executing 0 build triggers</span><br><span class="line">INFO[0006] Building stage <span class="string">'docker.io/library/busybox:1.35.0'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0006] Skipping unpacking as no commands require it.</span><br><span class="line">INFO[0006] LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=containerd.io;</span><br><span class="line">INFO[0006] Applying label MAINTAINER=master@weiyigeeek.top</span><br><span class="line">INFO[0006] Applying label BUILDTOOLS=kaniko</span><br><span class="line">INFO[0006] Applying label BUILDENV=containerd.io;</span><br><span class="line">INFO[0006] ENTRYPOINT [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello,busybox"</span>]</span><br><span class="line">INFO[0006] Pushing image to docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line">INFO[0010] Pushed index.docker.io/weiyigeek/busybox@sha256:d6ed480cc7864b9e19b40f09263abfad4689a9244a5abeb2e3eaf14a439cc55f</span><br></pre></td></tr></table></figure></p><p>步骤 06.查看上传到docker hub中 的 busybox:1.35.0 镜像信息以及拉取到本地进行运行测试验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctr -n default images pull docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line">ctr -n default run --rm docker.io/weiyigeek/busybox:1.35.0 busybox</span><br><span class="line">hello,busybox</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908214417.png" alt="WeiyiGeek.在containerd.io进行镜像构建并发布到hub中"></p><p>至此，在containerd.io 环境中，进行镜像构建并发布到hub中实践完毕!</p><p><br/></p><h3 id="小试牛刀之在Docker中使用kaniko构建并发布镜像"><a href="#小试牛刀之在Docker中使用kaniko构建并发布镜像" class="headerlink" title="小试牛刀之在Docker中使用kaniko构建并发布镜像"></a>小试牛刀之在Docker中使用kaniko构建并发布镜像</h3><p>描述：前面说到kaniko的出现实际是为了在没有docker环境的情况之下，按照 Dockerfile 文件中的指令进行镜像构建，不过此处还是简单的介绍一下在docker环境中的使用。 (实际情况中不建议如此多此一举)</p><p>步骤 01.执行如下命令生成 docker hub 认证票据（存储路径为 ~/.docker/config.json）以及提前拉取 kaniko 项目中 executor:latest 镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login -u weiyigeek</span><br><span class="line"><span class="comment"># Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="comment"># Login Succeeded</span></span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br></pre></td></tr></table></figure></p><p>步骤 02.创建 dockerfile 文件其中 FROM 指定 K8S 集群中常用的NFS动态持久卷镜像，我们将其上传到 hub 仓库中的WeiyiGeek账户下面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/demo2</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo2</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=docker;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>步骤 03.使用如下示例命令进行 kaniko-executor 容器的创建运行，并进行镜像构建并上传到公共的docker hub 仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f kaniko-executor</span><br><span class="line">docker run --rm --name kaniko-executor \</span><br><span class="line">    -v <span class="variable">$HOME</span>/.docker/:/kaniko/.docker \</span><br><span class="line">    -v /storage/dev/soft/kaniko/demo2:/workspace \</span><br><span class="line">    registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest \</span><br><span class="line">    --dockerfile=/workspace/dockerfile --context=dir://workspace --destination=docker.io/weiyigeek/nfs-subdir-external-provisioner:latest</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INFO[0002] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0002] Retrieving image registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest from registry registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">INFO[0003] Built cross stage deps: map[]</span><br><span class="line">INFO[0003] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0003] Returning cached image manifest</span><br><span class="line">INFO[0003] Executing 0 build triggers</span><br><span class="line">INFO[0003] Building stage <span class="string">'registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0003] Skipping unpacking as no commands require it.</span><br><span class="line">INFO[0003] LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=docker;</span><br><span class="line">INFO[0003] Applying label MAINTAINER=master@weiyigeeek.top</span><br><span class="line">INFO[0003] Applying label BUILDTOOLS=kaniko</span><br><span class="line">INFO[0003] Applying label BUILDENV=docker;</span><br><span class="line">INFO[0003] Pushing image to docker.io/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0012] Pushed index.docker.io/weiyigeek/nfs-subdir-external-provisioner@sha256:4dc0d27b8fa4608c9e2d8a6f2368d2029df32b9b55f96f27a9218a620ea14828</span><br></pre></td></tr></table></figure><p>步骤 04.查看上传到docker hub 仓库中的 nfs-subdir-external-provisioner:latest 信息 (<a href="https://hub.docker.com/r/weiyigeek/nfs-subdir-external-provisioner" target="_blank" rel="noopener">https://hub.docker.com/r/weiyigeek/nfs-subdir-external-provisioner</a>) 。</p><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908215842.png" alt="WeiyiGeek.在 Docker 中使用 kaniko 进行镜像构建与发布"></p><p>步骤 05.当然我们也可以在安装有docker环境中使用上下文使用标准输入，并采用docker进行创建kaniko-executor容器，从标准输入接收dockerfile文件并进行镜像构建与推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/demo3</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'FROM alpine \nRUN echo "created from standard input"'</span> &gt; Dockerfile | tar -cf - Dockerfile | gzip -9 | docker run \</span><br><span class="line">  --interactive -v /storage/dev/soft/kaniko/demo3:/workspace  -v <span class="variable">$HOME</span>/.docker/:/kaniko/.docker \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest \</span><br><span class="line">  --context tar://stdin \</span><br><span class="line">  --destination=docker.io/weiyigeek/alpine:4.2</span><br></pre></td></tr></table></figure><p>执行结果: 如果在交互运行期间没有数据管道传输，则需要按Ctrl+D自行发送EOF信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] To simulate EOF and <span class="built_in">exit</span>, press <span class="string">'Ctrl+D'</span></span><br><span class="line">INFO[0002] Retrieving image manifest alpine</span><br><span class="line">INFO[0002] Retrieving image alpine from registry index.docker.io</span><br><span class="line">INFO[0005] Built cross stage deps: map[]</span><br><span class="line">INFO[0005] Retrieving image manifest alpine</span><br><span class="line">INFO[0005] Returning cached image manifest</span><br><span class="line">INFO[0005] Executing 0 build triggers</span><br><span class="line">INFO[0005] Building stage <span class="string">'alpine'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0005] Unpacking rootfs as cmd RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span> requires it.</span><br><span class="line">INFO[0008] RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span></span><br><span class="line">INFO[0008] Initializing snapshotter ...</span><br><span class="line">INFO[0008] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0008] Cmd: /bin/sh</span><br><span class="line">INFO[0008] Args: [-c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">INFO[0008] Running: [/bin/sh -c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">created from standard input</span><br><span class="line">INFO[0008] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0008] No files were changed, appending empty layer to config. No layer added to image.</span><br><span class="line">INFO[0008] Pushing image to docker.io/weiyigeek/alpine:4.2</span><br><span class="line">INFO[0016] Pushed index.docker.io/weiyigeek/alpine@sha256:49360dc74ecf57ea94fbec9d7a3b5cf59dfba8aa5e60f8802cc6299e668a3e1e</span><br></pre></td></tr></table></figure></p><p>至此，在 Docker 中使用 kaniko 进行镜像构建与发布实践完毕。</p><hr><h2 id="0x0n-参考来源"><a href="#0x0n-参考来源" class="headerlink" title="0x0n 参考来源"></a>0x0n 参考来源</h2><p>项目地址: <a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/kaniko</a><br>kaniko 图像镜像仓库: gcr.io/kaniko-project/executor<br>kaniko 国内镜像仓库源：<code>weiyigeek/kaniko-executor:latest</code> 或者 <code>registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</code></p><p>首发地址：<br>原文地址: <a href="https://blog.weiyigeek.top/2022/9-1-684.html">https://blog.weiyigeek.top/2022/9-1-684.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.weiyigeek.top/categories/kubernetes/"/>
    
    <category term="Containers" scheme="https://blog.weiyigeek.top/categories/kubernetes/Containers/"/>
    
    <category term="OperationTools" scheme="https://blog.weiyigeek.top/categories/kubernetes/Containers/OperationTools/"/>
    
    
    <category term="Kaniko" scheme="https://blog.weiyigeek.top/tags/Kaniko/"/>
    
  </entry>
  
  <entry>
    <title>Gitalk-基于Github项目issue的评论系统在博客系统中实践</title>
    <link href="https://blog.weiyigeek.top/2022/8-17-682.html"/>
    <id>https://blog.weiyigeek.top/2022/8-17-682.html</id>
    <published>2022-08-17T05:34:30.000Z</published>
    <updated>2022-08-18T01:06:21.774Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-Gitalk-基于Github的评论系统"><a href="#0x00-Gitalk-基于Github的评论系统" class="headerlink" title="0x00 Gitalk - 基于Github的评论系统"></a>0x00 Gitalk - 基于Github的评论系统</h2><p>描述: 我想对于所有使用hexo、Hugo或者WordPress自建博客的博主来说GitTalk应该不陌生，GitTalk通过Github的OpenAPI以及issues功能实现社区评论确实还是很方便的，除开对国内访问速度较慢就没啥毛病，但是考虑到新手朋友此处还是简单介绍一下。</p><h3 id="1-快速介绍"><a href="#1-快速介绍" class="headerlink" title="1.快速介绍"></a>1.快速介绍</h3><p>描述: Gitalk 是一个基于 Github Issue 和 Preact 的现代评论组件。<br>功能： </p><ul><li>使用 github 帐号进行身份验证</li><li>无服务器，所有评论将存储为 github 问题</li><li>个人和组织的github项目都可以用来存储评论</li><li>本地化，支持多国语言 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]</li><li>类似 Facebook 的无干扰模式（可以通过 DistentionFreeMode 选项启用）</li><li>热键提交评论（cmd|ctrl + enter）</li></ul><p>项目地址：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a><br>帮助文档：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p><p>温馨提示: 当前 Gitalk 最新版本为 1.7.2 (Mar 3, 2021), 如后续随着时间推移，可能会有些许变化，建议参考官网（<a href="https://github.com/gitalk/gitalk/tags）" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/tags）</a></p><p><br/></p><h3 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2.安装部署"></a>2.安装部署</h3><p>描述：安装引用Gitalk评论系统的两种方式，</p><p><strong>安装实践</strong></p><ul><li>方式1.在你的HTML页面中使用 link 与 script 标签引入。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式2.使用 npm 安装 gital 模块。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块安装</span></span><br><span class="line">npm i --save gitalk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目导入</span></span><br><span class="line">import <span class="string">'gitalk/dist/gitalk.css'</span></span><br><span class="line">import Gitalk from <span class="string">'gitalk'</span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>配置实践</strong></p><p>首先，您需要为商店评论选择一个公共 github 存储库（已存在或创建一个新存储库），然后创建一个 GitHub 应用程序，如果你没有，点击这里 (<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a>) 注册一个新的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name : BlogTalk</span><br><span class="line">Homepage URL : https://blog.weiyigeek.top</span><br><span class="line">Application description : 欢迎访问 WeiyiGeek blog\<span class="string">'s [blog.weiyigeek.top] talk about , 欢迎留言骚扰哟，亲!</span></span><br><span class="line"><span class="string">Authorization callback URL : https://blog.weiyigeek.top</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817100949.png" alt="WeiyiGeek.Register a new OAuth application" title="" class="">                <p>WeiyiGeek.Register a new OAuth application</p>            </figure><p>注意：您必须在授权回调 URL 字段中指定网站域 url。</p><p>然后，创建完成后你将获取Client ID 与 Client Secret，如下所示：</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817101619.png" alt="WeiyiGeek.application ID and Secret" title="" class="">                <p>WeiyiGeek.application ID and Secret</p>            </figure><p>注意：后续更新修改可以进行访问 <code>Settings/Developer settings</code> ( <a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a> )</p><p>最后，创建一个公共仓库此处我创建的是<a href="https://github.com/WeiyiGeek/blogtalk" target="_blank" rel="noopener">blogtalk</a>，创建完后在项目的(<a href="https://github.com/WeiyiGeek/blogtalk/settings)中启用" target="_blank" rel="noopener">https://github.com/WeiyiGeek/blogtalk/settings)中启用</a> issue 即可</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817102221.png" alt="WeiyiGeek.blogtalk" title="" class="">                <p>WeiyiGeek.blogtalk</p>            </figure><p><br/></p><p><strong>使用方式1.将如下代码添加到您的页面：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">          clientID: <span class="string">'GitHub Application Client ID'</span>,          <span class="comment">// 8d8e96********797026d3</span></span></span><br><span class="line"><span class="actionscript">          clientSecret: <span class="string">'GitHub Application Client Secret'</span>,  <span class="comment">// secrets**********secrets</span></span></span><br><span class="line"><span class="actionscript">          repo: <span class="string">'GitHub repo'</span>,          <span class="comment">// blogtalk</span></span></span><br><span class="line"><span class="actionscript">          owner: <span class="string">'GitHub repo owner'</span>,   <span class="comment">// WeiyiGeek</span></span></span><br><span class="line"><span class="actionscript">          admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>], <span class="comment">// ['WeiyiGeek']</span></span></span><br><span class="line"><span class="actionscript">          id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span></span><br><span class="line"><span class="actionscript">          distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="actionscript">        gitalk.render(<span class="string">'gitalk-container'</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>使用方式2.在React中使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> GitalkComponent <span class="keyword">from</span> <span class="string">"gitalk/dist/gitalk-component"</span>;</span><br><span class="line"><span class="comment">// 并使用类似的组件</span></span><br><span class="line">&lt;GitalkComponent options=&#123;&#123;</span><br><span class="line">  clientID: <span class="string">"..."</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// options below</span></span><br><span class="line">&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>温馨提示: Gitalk 对象实例化参数参考 (<a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener">https://github.com/gitalk/gitalk#options</a>)</p><p><br/></p><h3 id="3-使用实践"><a href="#3-使用实践" class="headerlink" title="3.使用实践"></a>3.使用实践</h3><p><strong>在 Hexo 中使用</strong><br>描述: 此处以我的博客[<a href="https://blog.weiyigeek.top]">https://blog.weiyigeek.top]</a> 为例进行演示配置，此处笔者使用的是 hexo + mellow 主题 , 已经经过二次魔改（有需要该博客主题请在公众号回复【mellow博客主题】或者访问 <a href="https://weiyigeek.top/wechat.html?key=mellow博客主题" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=mellow博客主题</a> ）。</p><ul><li>Step 1.在 Hexo 主题中的 _config.yaml 配置加入如下配置片段。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gittalk 评论系统</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">WeiyiGeek</span>  <span class="comment"># github账号</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">blogtalk</span>    <span class="comment"># 留言仓库</span></span><br><span class="line"><span class="attr">  proxy:</span> <span class="string">/github/login/oauth/access_token</span> <span class="comment"># 反向代理解决跨域问题,后续将会主要讲解哦。</span></span><br><span class="line"><span class="attr">  oauth:</span></span><br><span class="line"><span class="attr">    client_id:</span> <span class="number">8</span><span class="string">d8e965c******97026d3</span>       <span class="comment"># Github App Auth ID </span></span><br><span class="line"><span class="attr">    client_secret:</span> <span class="string">e9c6141cb1f02f721********d01cb4d7a8f069</span> <span class="comment">#  Github App Auth secret</span></span><br><span class="line"><span class="attr">  perPage:</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><ul><li>Step 2.在主题文档引擎中加入如下片段。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实际上是将 &lt;script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"&gt;&lt;/script&gt; js 下载到了本地 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%- url_for(theme_js('/js/plugins/gitalk.min', cache)) %&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%- url_for(theme_js('/js/custom/gitalk.init', cache)) %&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- themes\mellow\source\js\custom\gitalk.init.js --&gt;</span></span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.client_id</span> %&gt;</span>',</span><br><span class="line">  clientSecret: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.client_secret</span> %&gt;</span>',</span><br><span class="line">  repo: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.repo</span> %&gt;</span>',</span><br><span class="line">  owner: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.owner</span> %&gt;</span>',</span><br><span class="line">  admin: ['<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.owner</span> %&gt;</span>'],</span><br><span class="line">  id: location.pathname,</span><br><span class="line">  proxy: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.proxy</span> %&gt;</span>',</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line">&#125;)</span><br><span class="line">#  hexo g 生成静态文件后的样子</span><br><span class="line"># var gitalk = new Gitalk(&#123;</span><br><span class="line">#   clientID: '8d8e965c******97026d3',</span><br><span class="line">#   clientSecret: 'e9c6141cb1f02f721********d01cb4d7a8f069',</span><br><span class="line">#   repo: 'blogtalk',</span><br><span class="line">#   owner: 'WeiyiGeek',</span><br><span class="line">#   admin: ['WeiyiGeek'],</span><br><span class="line">#   id: location.pathname,</span><br><span class="line">#   proxy: '/github/login/oauth/access_token',</span><br><span class="line">#   distractionFreeMode: false</span><br><span class="line"># &#125;)</span><br><span class="line"></span><br><span class="line"># 创建 gitalk-container </span><br><span class="line">gitalk.render('gitalk-container')</span><br></pre></td></tr></table></figure><p>温馨提示: 建议将<code>distractionFreeMode</code>设置为false,因为True真心难看。<br>温馨提示: 为了 Github Apps ID 与 Secrets 的安全，我们需要针对上面 <code>new Gitalk</code> 实例化参数进行js加密混淆 (<a href="http://www.esjson.com/jsEncrypt.html" target="_blank" rel="noopener">http://www.esjson.com/jsEncrypt.html</a>)</p><p><br/></p><h3 id="n-入坑出坑"><a href="#n-入坑出坑" class="headerlink" title="n.入坑出坑"></a>n.入坑出坑</h3><h4 id="1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法"><a href="#1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法" class="headerlink" title="1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法"></a>1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法</h4><p>描述: 在最开始之初我们也是使用官方演示代码中，使用的第三方提供的CORS代理服务，他会默认放行所有CORS请求，但是随着而来的问题是登陆会出现网络错误 Error: Network Error 或者在使用时出现 Forbidden 错误 (<a href="https://github.com/gitalk/gitalk/issues/514" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/514</a>) 。</p><p>目前由于该CORS代理服务遭到滥用，因此做了限制，导致GitTalk失效，在实践中发现如下CORS代理服务其要么有限制要么根本不能使用，所以实践的朋友们就不要像使用如下CORS代理服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限流</span></span><br><span class="line">https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</span><br><span class="line"><span class="comment"># 被墙</span></span><br><span class="line">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure><p>温馨提示: CORS Anywhere 是一个 NodeJS 代理，它将 CORS 标头添加到代理请求中。 项目地址 (<a href="https://github.com/Rob--W/cors-anywhere" target="_blank" rel="noopener">https://github.com/Rob--W/cors-anywhere</a>)</p><p><br/></p><p>在 百度 CSDN 中捡了一圈垃圾之后，还是没有最好的解决方案，然后通过某种方式Google了一下，找到两种替代的方式<code>利用cloudflare worker (不幸得是默认的cf worker的域名workers.dev被墙了)或者 Vercel 搭建在线代理（无vps推荐使用Vercel）</code> 或者 <code>使用VPS中的nginx服务器来反代 https://github.com (比较推荐-当前博主正在使用)</code>。</p><p><strong>方式1.没有VPS或者自己的服务器（想白嫖的）</strong><br>描述: 在 cloudflare (<a href="https://dash.cloudflare.com/login/" target="_blank" rel="noopener">https://dash.cloudflare.com/login/</a>) 上创建一个免费的在线代理来解决gitalk授权登录跨域问题，利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817113313.png" alt="WeiyiGeek.cloudflare-cors-anywhere" title="" class="">                <p>WeiyiGeek.cloudflare-cors-anywhere</p>            </figure><p>创建好之后我们便可编辑其 Worker 服务代码，如下代码也可通过 <a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> 获得。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exclude = [];     <span class="comment">// Regexp for blacklisted urls</span></span><br><span class="line"><span class="keyword">const</span> include = [<span class="regexp">/^https?:\/\/.*weiyigeek\.top$/</span>, /^https?:\/\/localhost/]; <span class="comment">// Regexp for whitelisted origins e.g.</span></span><br><span class="line"><span class="keyword">const</span> apiKeys = &#123;</span><br><span class="line">  EZWTLwVEqFnaycMzdhBz: &#123;</span><br><span class="line">    name: <span class="string">'Test App'</span>,</span><br><span class="line">    expired: <span class="literal">false</span>,</span><br><span class="line">    expiresAt: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2023-01-01'</span>),</span><br><span class="line">    exclude: [], <span class="comment">// Regexp for blacklisted urls</span></span><br><span class="line">    include: [<span class="string">"^http.?://www.weiyigeek.top$"</span>, <span class="string">"weiyigeek.top$"</span>, <span class="string">"^https?://localhost/"</span>], <span class="comment">// Regexp for whitelisted origins</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config is all above this line.</span></span><br><span class="line"><span class="comment">// It should not be necessary to change anything below.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Throws exception on verification failure.</span></span><br><span class="line">  <span class="keyword">const</span> requestApiKey = request.headers.get(<span class="string">'x-cors-proxy-api-key'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(apiKeys).includes(requestApiKey)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">'Invalid authorization key.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (apiKeys[requestApiKey].expired) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">'Expired authorization key.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (apiKeys[requestApiKey].expiresAt &amp;&amp; apiKeys[requestApiKey].expiresAt.getTime() &lt; <span class="built_in">Date</span>.now()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">`Expired authorization key.\nKey was valid until: <span class="subst">$&#123;apiKeys[requestApiKey].expiresAt&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> apiKeys[requestApiKey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRequiredHeadersPresent</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Throws exception on verification failure.</span></span><br><span class="line">  <span class="keyword">if</span> (!request.headers.get(<span class="string">'Origin'</span>) &amp;&amp; !request.headers.get(<span class="string">'x-requested-with'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Missing required request header. Must specify one of: origin,x-requested-with'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UnauthorizedException</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="number">401</span>;</span><br><span class="line">  <span class="keyword">this</span>.statusText = <span class="string">'Unauthorized'</span>;</span><br><span class="line">  <span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BadRequestException</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="number">400</span>;</span><br><span class="line">  <span class="keyword">this</span>.statusText = <span class="string">'Bad Request'</span>;</span><br><span class="line">  <span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isListed</span>(<span class="params">uri, listing</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(uri);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> uri === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> m <span class="keyword">of</span> listing) &#123;</span><br><span class="line">      <span class="keyword">if</span> (uri.match(m) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        returnValue = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//   Decide what to do when Origin is null</span></span><br><span class="line">    returnValue = <span class="literal">true</span>; <span class="comment">// True accepts null origins false rejects them.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fix</span>(<span class="params">myHeaders, request, isOPTIONS</span>) </span>&#123;</span><br><span class="line">  myHeaders.set(<span class="string">'Access-Control-Allow-Origin'</span>, request.headers.get(<span class="string">'Origin'</span>));</span><br><span class="line">  <span class="keyword">if</span> (isOPTIONS) &#123;</span><br><span class="line">    myHeaders.set(<span class="string">'Access-Control-Allow-Methods'</span>, request.headers.get(<span class="string">'access-control-request-method'</span>));</span><br><span class="line">    <span class="keyword">const</span> acrh = request.headers.get(<span class="string">'access-control-request-headers'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (acrh) &#123;</span><br><span class="line">      myHeaders.set(<span class="string">'Access-Control-Allow-Headers'</span>, acrh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myHeaders.delete(<span class="string">'X-Content-Type-Options'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> myHeaders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">requestUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> match = requestUrl.match(<span class="regexp">/^(?:(https?:)?\/\/)?(([^/?]+?)(?::(\d&#123;0,5&#125;)(?=[/?]|$))?)([/?][\S\s]*|$)/i</span>);</span><br><span class="line">  <span class="comment">//                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^</span></span><br><span class="line">  <span class="comment">//                            1:protocol       3:hostname     4:port                 5:path + query string</span></span><br><span class="line">  <span class="comment">//                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line">  <span class="comment">//                                            2:host</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'no match'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'parseURL:match:'</span>, match);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!match[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nothing in match group 1'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^https?:/i</span>.test(requestUrl)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'The pattern at top could mistakenly parse "http:///" as host="http:" and path=///.'</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scheme is omitted.</span></span><br><span class="line">    <span class="keyword">if</span> (requestUrl.lastIndexOf(<span class="string">'//'</span>, <span class="number">0</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'"//" is omitted'</span>);</span><br><span class="line">      requestUrl = <span class="string">'//'</span> + requestUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestUrl = (match[<span class="number">4</span>] === <span class="string">'443'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + requestUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(requestUrl);</span><br><span class="line">  <span class="keyword">if</span> (!parsed.hostname) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'"http://:1/" and "http:/notenoughslashes" could end up here.'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parsed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">proxyRequest</span>(<span class="params">request, activeApiKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOPTIONS = (request.method === <span class="string">'OPTIONS'</span>);</span><br><span class="line">  <span class="keyword">const</span> originUrl = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">const</span> origin = request.headers.get(<span class="string">'Origin'</span>);</span><br><span class="line">  <span class="comment">// ParseURL throws when the url is invalid</span></span><br><span class="line">  <span class="keyword">const</span> fetchUrl = parseURL(request.url.replace(originUrl.origin, <span class="string">''</span>).slice(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Throws if it fails the check</span></span><br><span class="line">  checkRequiredHeadersPresent(request);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Excluding urls which are not allowed as destination urls</span></span><br><span class="line">  <span class="comment">// Exclude origins which are not int he included ones</span></span><br><span class="line">  <span class="keyword">if</span> (isListed(fetchUrl.toString(), [...exclude, ...(activeApiKey?.exclude || [])]) || !isListed(origin, [...include, ...(activeApiKey?.include || [])])) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Origin or Destination URL is not allowed.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> corsHeaders = request.headers.get(<span class="string">'x-cors-headers'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (corsHeaders !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      corsHeaders = <span class="built_in">JSON</span>.parse(corsHeaders);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!originUrl.pathname.startsWith(<span class="string">'/'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Pathname does not start with "/"'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> recvHpaireaders = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> request.headers.entries()) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pair[<span class="number">0</span>].match(<span class="string">'^origin'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'eferer'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^cf-'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^x-forw'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^x-cors-headers'</span>) === <span class="literal">null</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      recvHpaireaders[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (corsHeaders !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> <span class="built_in">Object</span>.entries(corsHeaders)) &#123;</span><br><span class="line">      recvHpaireaders[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newRequest = <span class="keyword">new</span> Request(request, &#123;</span><br><span class="line">    headers: recvHpaireaders,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(fetchUrl, newRequest);</span><br><span class="line">  <span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(response.headers);</span><br><span class="line">  <span class="keyword">const</span> newCorsHeaders = [];</span><br><span class="line">  <span class="keyword">const</span> allh = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> response.headers.entries()) &#123;</span><br><span class="line">    newCorsHeaders.push(pair[<span class="number">0</span>]);</span><br><span class="line">    allh[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newCorsHeaders.push(<span class="string">'cors-received-headers'</span>);</span><br><span class="line">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class="line"></span><br><span class="line">  myHeaders.set(<span class="string">'Access-Control-Expose-Headers'</span>, newCorsHeaders.join(<span class="string">','</span>));</span><br><span class="line"></span><br><span class="line">  myHeaders.set(<span class="string">'cors-received-headers'</span>, <span class="built_in">JSON</span>.stringify(allh));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> body = isOPTIONS ? <span class="literal">null</span> : <span class="keyword">await</span> response.arrayBuffer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(body, &#123;</span><br><span class="line">    headers: myHeaders,</span><br><span class="line">    status: (isOPTIONS ? <span class="number">200</span> : response.status),</span><br><span class="line">    statusText: (isOPTIONS ? <span class="string">'OK'</span> : response.statusText),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">homeRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOPTIONS = (request.method === <span class="string">'OPTIONS'</span>);</span><br><span class="line">  <span class="keyword">const</span> originUrl = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">const</span> origin = request.headers.get(<span class="string">'Origin'</span>);</span><br><span class="line">  <span class="keyword">const</span> remIp = request.headers.get(<span class="string">'CF-Connecting-IP'</span>);</span><br><span class="line">  <span class="keyword">const</span> corsHeaders = request.headers.get(<span class="string">'x-cors-headers'</span>);</span><br><span class="line">  <span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> country = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> colo = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> request.cf !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    country = <span class="keyword">typeof</span> request.cf.country === <span class="string">'undefined'</span> ? <span class="literal">false</span> : request.cf.country;</span><br><span class="line">    colo = <span class="keyword">typeof</span> request.cf.colo === <span class="string">'undefined'</span> ? <span class="literal">false</span> : request.cf.colo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(</span><br><span class="line">    <span class="string">'CLOUDFLARE-CORS-ANYWHERE\n\n'</span></span><br><span class="line">        + <span class="string">'Source:\nhttps://github.com/chrisspiegl/cloudflare-cors-anywhere\n\n'</span></span><br><span class="line">        + <span class="string">'Usage:\n'</span></span><br><span class="line">        + originUrl.origin + <span class="string">'/&#123;uri&#125;\n'</span></span><br><span class="line">        + <span class="string">'Header x-cors-proxy-api-key must be set with valid api key\n'</span></span><br><span class="line">        + <span class="string">'Header origin or x-requested-with must be set\n\n'</span></span><br><span class="line">        <span class="comment">// + 'Limits: 100,000 requests/day\n'</span></span><br><span class="line">        <span class="comment">// + '          1,000 requests/10 minutes\n\n'</span></span><br><span class="line">        + (origin === <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">'Origin: '</span> + origin + <span class="string">'\n'</span>)</span><br><span class="line">        + <span class="string">'Ip: '</span> + remIp + <span class="string">'\n'</span></span><br><span class="line">        + (country ? <span class="string">'Country: '</span> + country + <span class="string">'\n'</span> : <span class="string">''</span>)</span><br><span class="line">        + (colo ? <span class="string">'Datacenter: '</span> + colo + <span class="string">'\n'</span> : <span class="string">''</span>) + <span class="string">'\n'</span></span><br><span class="line">        + ((corsHeaders === <span class="literal">null</span>) ? <span class="string">''</span> : <span class="string">'\nx-cors-headers: '</span> + <span class="built_in">JSON</span>.stringify(corsHeaders)),</span><br><span class="line">    &#123;<span class="attr">status</span>: <span class="number">200</span>, <span class="attr">headers</span>: myHeaders&#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;protocol, pathname&#125; = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="comment">// In the case of a "Basic" authentication, the exchange MUST happen over an HTTPS (TLS) connection to be secure.</span></span><br><span class="line">  <span class="keyword">if</span> (protocol !== <span class="string">'https:'</span> || request.headers.get(<span class="string">'x-forwarded-proto'</span>) !== <span class="string">'https'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Must use a HTTPS connection.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (pathname) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/favicon.ico'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/robots.txt'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;<span class="attr">status</span>: <span class="number">204</span>&#125;);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">      <span class="keyword">return</span> homeRequest(request);</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      <span class="comment">// Not 100% sure if this is a good idea…</span></span><br><span class="line">      <span class="comment">// Right now all OPTIONS requests are just simply replied to because otherwise they fail.</span></span><br><span class="line">      <span class="comment">// This is necessary because apparently, OPTIONS requests do not carry the `x-cors-proxy-api-key` header so this can not be authorized.</span></span><br><span class="line">      <span class="keyword">if</span> (request.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;</span><br><span class="line">          headers: fix(<span class="keyword">new</span> Headers(), request, <span class="literal">true</span>),</span><br><span class="line">          status: <span class="number">200</span>,</span><br><span class="line">          statusText: <span class="string">'OK'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The "x-cors-proxy-api-key" header is sent when authenticated.</span></span><br><span class="line">      <span class="comment">//if (request.headers.has('x-cors-proxy-api-key')) &#123;</span></span><br><span class="line">        <span class="comment">// Throws exception when authorization fails.</span></span><br><span class="line">        <span class="comment">//const activeApiKey = verifyCredentials(request);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only returns this response when no exception is thrown.</span></span><br><span class="line">        <span class="keyword">return</span> proxyRequest(request);</span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Not authenticated.</span></span><br><span class="line">      <span class="comment">//throw new UnauthorizedException('Valid x-cors-proxy-api-key header has to be provided.');</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, <span class="keyword">async</span> event =&gt; &#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    handleRequest(event.request).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> message = error.reason || error.stack || <span class="string">'Unknown Error'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response(message, &#123;</span><br><span class="line">        status: error.status || <span class="number">500</span>,</span><br><span class="line">        statusText: error.statusText || <span class="literal">null</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=UTF-8'</span>,</span><br><span class="line">          <span class="comment">// Disables caching by default.</span></span><br><span class="line">          <span class="string">'Cache-Control'</span>: <span class="string">'no-store'</span>,</span><br><span class="line">          <span class="comment">// Returns the "Content-Length" header for HTTP HEAD requests.</span></span><br><span class="line">          <span class="string">'Content-Length'</span>: message.length,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>部署结果: <a href="https://cors-anywhere.weiyigeek.workers.dev/" target="_blank" rel="noopener">https://cors-anywhere.weiyigeek.workers.dev/</a></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817113707.png" alt="WeiyiGeek.cloudflare-cors-anywhere-code" title="" class="">                <p>WeiyiGeek.cloudflare-cors-anywhere-code</p>            </figure><p>温馨提示: cloudflare 构建无服务器应用程序免费版本每天限额10万次请求，所有为了避免其它 people 恶意使用，请在使用时设置访问白名单, 上述源码来源于 (<a href="https://github.com/chrisspiegl/cloudflare-cors-anywhere)。" target="_blank" rel="noopener">https://github.com/chrisspiegl/cloudflare-cors-anywhere)。</a></p><p>温馨提示: 除了使用 cloudflare 还可以使用 Vercel 免费部署node.js项目解决跨域问题，你可参考该项目 (<a href="https://github.com/Dedicatus546/cors-server" target="_blank" rel="noopener">https://github.com/Dedicatus546/cors-server</a>) ，此处就不在累述。</p><p><br/> </p><p><strong>方式2.有公网VPS、服务器</strong><br>描述: 由于我自己有VPS所以就不借用 cloudflare 与 Vercel，因为其国内网络原因，时而通畅时而有缓慢 , 此处我将使用Nginx服务在blog.conf配置Nginx文件中加入如下location指令片段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https - www.weiyigeek.top</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  listen       443 ssl http2;</span><br><span class="line">  server_name  blog.weiyigeek.top;</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># CORS</span></span><br><span class="line">  add_header Access-Control-Allow-Origin <span class="string">'*.weiyigeek.top'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET,POST,OPTIONS'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gitalk Auth Use</span></span><br><span class="line">  location /github &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      <span class="built_in">return</span> 204;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_pass https://github.com/; <span class="comment"># 注意尾部斜杠不能少</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  error_page  403          /warn/403.html;</span><br><span class="line">  error_page  404          /warn/404.html;</span><br><span class="line">  error_page  500 502 503  /warn/500.html;</span><br><span class="line">  error_page  504          /warn/504.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后检测blog.conf配置以及重载nginx服务 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后修改Hexo 主题中的 _config.yaml 将 Gitalk 的 proxy 配置为 <code>proxy: /github/login/oauth/access_token</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gittalk 评论系统</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  owner: WeiyiGeek  <span class="comment"># github账号</span></span><br><span class="line">  repo: blogtalk    <span class="comment"># 留言仓库</span></span><br><span class="line">  proxy: /github/login/oauth/access_token <span class="comment"># 关键点 （前台请求是https://blog.weiyigeek.top/github/login/oauth/access_token, 而实际请求是https://github.com/login/oauth/access_token，所以解决了跨域问题）</span></span><br><span class="line">  oauth:</span><br><span class="line">    client_id: 8d8e965c******97026d3       <span class="comment"># Github App Auth ID </span></span><br><span class="line">    client_secret: e9c6141cb1f02f721********d01cb4d7a8f069 <span class="comment">#  Github App Auth secret</span></span><br><span class="line">  perPage: 15</span><br></pre></td></tr></table></figure><p>之后，我们需要批量初始每篇文章issue根据其路径<code>/2020/3-20-658.html</code>，此处采用了<code>gitalk-auto-init.js</code>脚本进行批量初始化文章issue。</p><p>温馨提示: 下述 <code>gitalk-auto-init.js</code> 脚本可以通过如下连接( <a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> )进行获取</p><p>脚本依赖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-generator-sitemap</span><br><span class="line">$ npm i -D md5 moment request xml-parser</span><br><span class="line">+ moment@2.29.2</span><br><span class="line">+ request@2.88.2</span><br><span class="line">+ md5@2.3.0</span><br><span class="line">+ xml-parser@1.2.1</span><br><span class="line">added 55 packages from 70 contributors in 8.467s</span><br></pre></td></tr></table></figure></p><p>配置运行:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gitalk-auto-init.js 脚本部分片段</span></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  username: <span class="string">'weiyigeek'</span>,   <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span></span><br><span class="line">  repo: <span class="string">"blogtalk"</span>,         <span class="comment">// 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span></span><br><span class="line">  token: <span class="string">'ghp_wnpWqL********6RIf0NR5iD'</span>,   <span class="comment">// 前面在Github中的 personal access token</span></span><br><span class="line">  sitemap: path.join(__dirname, <span class="string">'./public/sitemap.xml'</span>), <span class="comment">// 自己站点的 sitemap 文件地址</span></span><br><span class="line">  cache: <span class="literal">true</span>, <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class="line">  gitalkCacheFile: path.join(__dirname, <span class="string">'./gitalk-init-cache.json'</span>), <span class="comment">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class="line">  gitalkErrorFile: path.join(__dirname, <span class="string">'./gitalk-init-error.json'</span>), <span class="comment">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sitemap.xml 示例</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;urlset xmlns=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span><br><span class="line">    &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https:<span class="comment">//blog.weiyigeek.top/2020/5-28-588.html&lt;/loc&gt;</span></span><br><span class="line">    &lt;lastmod&gt;<span class="number">2022</span><span class="number">-08</span><span class="number">-15</span>T14:<span class="number">39</span>:<span class="number">08.638</span>Z&lt;<span class="regexp">/lastmod&gt;</span></span><br><span class="line"><span class="regexp">    &lt;title&gt;Ingress-Nginx进阶学习实践扩充配置记录&lt;/</span>title&gt;</span><br><span class="line">  &lt;<span class="regexp">/url&gt;</span></span><br><span class="line"><span class="regexp">    ....</span></span><br><span class="line"><span class="regexp">&lt;/u</span>rlset&gt;</span><br></pre></td></tr></table></figure><br><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817123646.png" alt="WeiyiGeek.批量初始化文章issue" title="" class="">                <p>WeiyiGeek.批量初始化文章issue</p>            </figure></p><p>执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------- 运行结果 ---------</span><br><span class="line"></span><br><span class="line">报错数据： 1 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-error.json。</span><br><span class="line">本次成功： 27 条。</span><br><span class="line">写入缓存： 90 条，已初始化 63 条，本次成功： 27 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-cache.json。</span><br></pre></td></tr></table></figure></p><p>我们也可以通过 blogtalk 项目中 issue (<a href="https://github.com/WeiyiGeek/blogtalk/issues" target="_blank" rel="noopener">https://github.com/WeiyiGeek/blogtalk/issues</a>) 查看初始化结果以及最新评论。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817125424.png" alt="WeiyiGeek.blogtalk-issue" title="" class="">                <p>WeiyiGeek.blogtalk-issue</p>            </figure><p>在初始化issue完成之后，我们可以找到一篇 <a href="https://blog.weiyigeek.top/about/">https://blog.weiyigeek.top/about/</a> 文章进行留言验证。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817124230.png" alt="WeiyiGeek.Gitalk 留言验证" title="" class="">                <p>WeiyiGeek.Gitalk 留言验证</p>            </figure><p><strong>首发地址</strong>: <a href="https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://blog.weiyigeek.top/categories/Blog/"/>
    
    
    <category term="Hexo" scheme="https://blog.weiyigeek.top/tags/Hexo/"/>
    
    <category term="Gitalk" scheme="https://blog.weiyigeek.top/tags/Gitalk/"/>
    
  </entry>
  
  <entry>
    <title>网安等保-Linux服务器之最新Ubuntu-22.04-LTS系统内核优化与安全加固配置脚本分享</title>
    <link href="https://blog.weiyigeek.top/2022/8-13-683.html"/>
    <id>https://blog.weiyigeek.top/2022/8-13-683.html</id>
    <published>2022-08-13T06:36:30.000Z</published>
    <updated>2022-08-26T03:29:56.979Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述: Ubuntu 22.04 LTS 是Canonical于2022年4月21日发布的操作系统，代号为Jammy Jellyfish（果酱水母）, 其采用GNOME电源配置文件和流线型工作空间过渡，提高优化图形驱动程序上的桌面帧速率，使用新的加密算法迁移到OpenSSL v3以提高安全性,并且为内存安全的系统级编程添加了Rus。</p><p>而又由于CentOS发行版在最近几年时内将不在进行维护更新了，所以为了考虑到系统的安全性、可维护性、以及后期运维成本，我们企业内部在2020年时就已经将ubuntu作为主要的服务器系统，所以在我公司新上的业务系统基本采用debian系的发行版服务器来承载基础应用业务，而使用最多当然是Ubuntu此发行版。</p><p>现在 Ubuntu 推出了22.04 ， 想到原来每次都需要手动一台一台的进行主机安全加固以符合等保要求，所以了节约工作时间提高工作效率，有更多时间进行学习进步，则需要将将我们公司所使用的系统基线镜像进行更新迭代，编写适用于ubuntu 22.04系统的安全加固脚本，并且总结此篇文章并在文章末尾附上自动化安全加固脚本，谢谢大家支持。</p><p>此处我依据在我从前编写的 Ubuntu 20.04 系统安全加固脚本中对其根据最新的22.04版本进行更新了等保相关规定策略，以及更新适用最新版本的 Ubuntu，针对脚本进行结构调整，更加方便大家一起参参与维护，若脚本有Bug请大家发送到我的邮箱 <a href="mailto:&#x6d;&#97;&#x73;&#x74;&#x65;&#114;&#64;&#x77;&#x65;&#x69;&#x79;&#x69;&#x67;&#x65;&#101;&#107;&#x2e;&#116;&#x6f;&#112;">&#x6d;&#97;&#x73;&#x74;&#x65;&#114;&#64;&#x77;&#x65;&#x69;&#x79;&#x69;&#x67;&#x65;&#101;&#107;&#x2e;&#116;&#x6f;&#112;</a>。</p><p>想要获取该加固脚本的朋友可以在WX公众号【WeiyiGeek】中回复【ubuntu系统加固】即可获得，或者访问【<a href="https://weiyigeek.top/wechat.html?key=ubuntu%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=ubuntu系统加固</a>】</p><p>​<br><strong>首发地址</strong>: <a href="https://mp.weixin.qq.com/s/dO1bV0tfXKn4ZmqlMcUrrQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dO1bV0tfXKn4ZmqlMcUrrQ</a><br><strong>实践视频</strong>：<a href="https://www.bilibili.com/video/BV1fe4y1o7ov" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fe4y1o7ov</a></p><hr><h2 id="0x01-加固实践"><a href="#0x01-加固实践" class="headerlink" title="0x01 加固实践"></a>0x01 加固实践</h2><p>描述: Ubuntu 22.04 主机系统安全加固的 <code>Ubuntu22.04-InitializeReinforce.sh</code> 脚本相关上的使用说明以及实践。</p><h3 id="book-​-帮助文档"><a href="#book-​-帮助文档" class="headerlink" title=":book:​ 帮助文档"></a>:book:​ 帮助文档</h3><p>描述: 本工具集主要针对于 Ubuntu 22.04 、20.04  LTS 操作系统进行安全加固以及系统初始化操作。</p><p>:hammer_and_wrench: <strong>脚本说明:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@Ubuntu-Security:/home/ubuntu/Ubuntu<span class="comment"># ./Ubuntu22.04-InitializeReinforce.sh</span></span><br><span class="line">     __          __  _       _  _____           _</span><br><span class="line">     \ \        / / (_)     (_)/ ____|         | |</span><br><span class="line">     \ \  /\  / /__ _ _   _ _| |  __  ___  ___| | __</span><br><span class="line">       \ \/  \/ / _ \ | | | | | | |_ |/ _ \/ _ \ |/ /</span><br><span class="line">       \  /\  /  __/ | |_| | | |__| |  __/  __/   &lt;</span><br><span class="line">         \/  \/ \___|_|\__, |_|\_____|\___|\___|_|\_\</span><br><span class="line">                      __/ |</span><br><span class="line">                      |___/</span><br><span class="line">======================================================================</span><br><span class="line">@ Desc: Ubuntu 22.04 Security Reinforce and System initialization</span><br><span class="line">@ Mail bug reports: master@weiyigeek.top or pull request (pr)</span><br><span class="line">@ Author : WeiyiGeek</span><br><span class="line">@ Follow me on Blog   : https://blog.weiyigeek.top/</span><br><span class="line">@ Follow me on Wechat : https://weiyigeek.top/wechat.html?key=欢迎关注</span><br><span class="line">@ Communication group : https://weiyigeek.top/visit.html</span><br><span class="line">======================================================================</span><br><span class="line"></span><br><span class="line">Usage: ./Ubuntu22.04-InitializeReinforce.sh [--start ] [--network] [--<span class="keyword">function</span>] [--clear] [--version] [--<span class="built_in">help</span>]</span><br><span class="line">Option:</span><br><span class="line">  --start            Start System initialization and security reinforcement.</span><br><span class="line">  --network          Configure the system network and DNS resolution server.</span><br><span class="line">  --<span class="keyword">function</span>         PCall the specified shell <span class="keyword">function</span>.</span><br><span class="line">  --clear            Clear all system logs, cache and backup files.</span><br><span class="line">  --version          Print version and <span class="built_in">exit</span>.</span><br><span class="line">  --<span class="built_in">help</span>             Print <span class="built_in">help</span> and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">Mail bug reports or suggestions to &lt;master@weiyigeek.top&gt; or pull request (pr).</span><br><span class="line">current version : 1.0</span><br><span class="line"></span><br><span class="line">WARNING: 温馨提示：使用前先请配置机器上网环境,若没有配置请在 Ubuntu22.04.conf 文件中进行网络配置.</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823140038.png" alt="WeiyiGeek.运行加固脚本" title="" class="">                <p>WeiyiGeek.运行加固脚本</p>            </figure><p><br/></p><p>:atom_symbol:<strong>脚本函数:</strong></p><p>描述: 如下脚本将根据参数在 <code>Ubuntu22.04-InitializeReinforce.sh</code> 分别进行调用执行, 也可采用<code>--function</code>参数进行指定调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">❯ grep -r -n  <span class="string">"函数名称"</span> -A 1 *</span><br><span class="line">scripts/os-base.sh:26:<span class="comment"># 函数名称: base_hostname</span></span><br><span class="line">scripts/os-base.sh-27-<span class="comment"># 函数用途: 主机名称设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:55:<span class="comment"># 函数名称: ubuntu_mirror</span></span><br><span class="line">scripts/os-base.sh-56-<span class="comment"># 函数用途: ubuntu 系统主机软件仓库镜像源</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:126:<span class="comment"># 函数名称: ubuntu_software</span></span><br><span class="line">scripts/os-base.sh-127-<span class="comment"># 函数用途: ubuntu 系统主机内核版本升级以常规软件安装</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:153:<span class="comment"># 函数名称: base_timezone</span></span><br><span class="line">scripts/os-base.sh-154-<span class="comment"># 函数用途: 主机时间同步校准与时区设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:192:<span class="comment"># 函数名称: base_banner</span></span><br><span class="line">scripts/os-base.sh-193-<span class="comment"># 函数用途: 远程本地登陆主机信息展示</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:345:<span class="comment"># 函数名称: base_reboot</span></span><br><span class="line">scripts/os-base.sh-346-<span class="comment"># 函数用途: 是否进行重启或者关闭服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-clean.sh:27:<span class="comment"># 函数名称: system_clean</span></span><br><span class="line">scripts/os-clean.sh-28-<span class="comment"># 函数用途: 删除安全加固过程临时文件清理为基线镜像做准备</span></span><br><span class="line">--</span><br><span class="line">scripts/os-exceptions.sh:26:<span class="comment"># 函数名称: problem_usercrond</span></span><br><span class="line">scripts/os-exceptions.sh-27-<span class="comment"># 函数用途: 解决普通用户定时任务无法定时执行问题</span></span><br><span class="line">--</span><br><span class="line">scripts/os-exceptions.sh:45:<span class="comment"># 函数名称: problem_multipath</span></span><br><span class="line">scripts/os-exceptions.sh-46-<span class="comment"># 函数用途: 解决 ubuntu multipath add missing path 错误</span></span><br><span class="line">--</span><br><span class="line">scripts/os-network.sh:27:<span class="comment"># 函数名称: net_config</span></span><br><span class="line">scripts/os-network.sh-28-<span class="comment"># 函数用途: 主机IP地址与网关设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-network.sh:70:<span class="comment"># 函数名称: net_dns</span></span><br><span class="line">scripts/os-network.sh-71-<span class="comment"># 函数用途: 设置主机DNS解析服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:27:<span class="comment"># 函数名称: optimize_kernel</span></span><br><span class="line">scripts/os-optimize.sh-28-<span class="comment"># 函数用途: 系统内核参数的优化配置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:84:<span class="comment"># 函数名称: resources_limits</span></span><br><span class="line">scripts/os-optimize.sh-85-<span class="comment"># 函数用途: 系统资源文件打开句柄数优化配置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:115:<span class="comment"># 函数名称: swap_partition</span></span><br><span class="line">scripts/os-optimize.sh-116-<span class="comment"># 函数用途: 创建系统swap分区</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:27:<span class="comment"># 函数名称: sec_usercheck</span></span><br><span class="line">scripts/os-security.sh-28-<span class="comment"># 函数用途: 用于锁定或者删除多余的系统账户</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:65:<span class="comment"># 函数名称: sec_userconfig</span></span><br><span class="line">scripts/os-security.sh-66-<span class="comment"># 函数用途: 针对拥有ssh远程登陆权限的用户进行密码口令设置。</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:131:<span class="comment"># 函数名称: sec_passpolicy</span></span><br><span class="line">scripts/os-security.sh-132-<span class="comment"># 函数用途: 用户密码复杂性策略设置 (密码过期周期0~90、到期前15天提示、密码长度至少12、复杂度设置至少有一个大小写、数字、特殊字符、密码三次不能一样、尝试次数为三次）</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:166:<span class="comment"># 函数名称: sec_sshdpolicy</span></span><br><span class="line">scripts/os-security.sh-167-<span class="comment"># 函数用途: 系统sshd服务安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:194:<span class="comment"># 函数名称: sec_loginpolicy</span></span><br><span class="line">scripts/os-security.sh-195-<span class="comment"># 函数用途: 用户登陆安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:230:<span class="comment"># 函数名称: sec_historypolicy</span></span><br><span class="line">scripts/os-security.sh-231-<span class="comment"># 函数用途: 用户终端执行的历史命令记录安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:261:<span class="comment"># 函数名称: sec_grubpolicy</span></span><br><span class="line">scripts/os-security.sh-262-<span class="comment"># 函数用途: 系统 GRUB 安全设置防止物理接触从grub菜单中修改密码</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:304:<span class="comment"># 函数名称: sec_firewallpolicy</span></span><br><span class="line">scripts/os-security.sh-305-<span class="comment"># 函数用途: 系统防火墙策略设置, 建议操作完成后重启计算机.</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:335:<span class="comment"># 函数名称: sec_ctrlaltdel</span></span><br><span class="line">scripts/os-security.sh-336-<span class="comment"># 函数用途: 禁用 ctrl+alt+del 组合键对系统重启 (必须要配置我曾入过坑)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:355:<span class="comment"># 函数名称: sec_recyclebin</span></span><br><span class="line">scripts/os-security.sh-356-<span class="comment"># 函数用途: 设置文件删除回收站别名(防止误删文件)(必须要配置,我曾入过坑)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:405:<span class="comment"># 函数名称: sec_supolicy</span></span><br><span class="line">scripts/os-security.sh-406-<span class="comment"># 函数用途: 切换用户日志记录和切换命令更改名称为SU(可选)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:425:<span class="comment"># 函数名称: sec_privilegepolicy</span></span><br><span class="line">scripts/os-security.sh-426-<span class="comment"># 函数用途: 系统用户sudo权限与文件目录创建权限策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:26:<span class="comment"># 函数名称: svc_apport</span></span><br><span class="line">scripts/os-service.sh-27-<span class="comment"># 函数用途: 禁用烦人的apport错误报告</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:52:<span class="comment"># 函数名称: svc_snapd</span></span><br><span class="line">scripts/os-service.sh-53-<span class="comment"># 函数用途: 不使用snapd容器的环境下禁用或者卸载多余的snap软件及其服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:75:<span class="comment"># 函数名称: svc_cloud-init</span></span><br><span class="line">scripts/os-service.sh-76-<span class="comment"># 函数用途: 非云的环境下禁用或者卸载多余的cloud-init软件及其服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:101:<span class="comment"># 函数名称: svc_debugshell</span></span><br><span class="line">scripts/os-service.sh-102-<span class="comment"># 函数用途: 在系统启动时禁用debug-shell服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:26:<span class="comment"># 函数名称: install_chrony</span></span><br><span class="line">scripts/os-software.sh-27-<span class="comment"># 函数用途: 安装配置 chrony 时间同步服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:79:<span class="comment"># 函数名称: install_java</span></span><br><span class="line">scripts/os-software.sh-80-<span class="comment"># 函数用途: 安装配置java环境</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:110:<span class="comment">## 函数名称: install_docker</span></span><br><span class="line">scripts/os-software.sh-111-<span class="comment">## 函数用途: 在 Ubuntu 主机上安装最新版本的Docker</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:201:<span class="comment">## 函数名称: install_cockercompose</span></span><br><span class="line">scripts/os-software.sh-202-<span class="comment">## 函数用途: 在 Ubuntu 主机上安装最新版本的Dockercompose</span></span><br></pre></td></tr></table></figure><p><br></p><p>​:coffee:​ <strong>配置文件:</strong><br>描述: 在 Ubuntu22.04.conf 配置文件中定义脚本所需的安全策略以及日志、历史记录存放路径, 以模板的初始密码与防火墙配置等，其中最主要的是一定要配置好IP地址，以成功拉取软件仓库中的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">$ vim Ubuntu22.04.conf</span><br><span class="line"><span class="comment"># Show  Script Execute result (Y/N)</span></span><br><span class="line">VAR_VERIFY_RESULT=Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Script vertify timeout (unit s)</span></span><br><span class="line">VAR_VERIFY_TIMEOUT=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Script run time</span></span><br><span class="line">VAR_RUNDATE=$(date +%Y%m%d-%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to logfile.</span></span><br><span class="line">LOGFILE=/var/<span class="built_in">log</span>/weiyigeek-<span class="variable">$&#123;VAR_RUNDATE&#125;</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to Backup directory.</span></span><br><span class="line">BACKUPDIR=/var/<span class="built_in">log</span>/.backup/<span class="variable">$&#123;VAR_RUNDATE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to history record directory.</span></span><br><span class="line">HISTORYDIR=/var/<span class="built_in">log</span>/.<span class="built_in">history</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify su command execute log file path.</span></span><br><span class="line">SU_LOG_FILE=<span class="variable">$&#123;HISTORYDIR&#125;</span>/su.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the hostname</span></span><br><span class="line">VAR_HOSTNAME=<span class="string">"Ubuntu-Security"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the IP/MASK and Gateway</span></span><br><span class="line">VAR_IP=10.20.172.152/24</span><br><span class="line">VAR_GATEWAY=10.20.172.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the DNS server</span></span><br><span class="line"><span class="comment"># DNSPod: 119.29.29.29      Alidns: 223.5.5.5 223.6.6.6</span></span><br><span class="line"><span class="comment"># Google: 8.8.8.8 8.8.4.4   Cloudflare: 1.1.1.1 1.0.0.1</span></span><br><span class="line"><span class="comment"># Internal : Your intranet domain name resolution server</span></span><br><span class="line">VAR_DNS_SERVER=(<span class="string">"223.5.5.5"</span> <span class="string">"223.6.6.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the SSHD server</span></span><br><span class="line">VAR_SSHD_PORT=20221</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the super user and normal user</span></span><br><span class="line"><span class="comment"># 建议将密码设置最小长度10（最好设置为12以上，等保要求），数字、大写字母、小写字母、特殊符号，密码包含三种及以上, 且无规律。</span></span><br><span class="line"><span class="comment"># 温馨提示: 下面设置的密码为初始密码，在系统登陆后会要求更改。</span></span><br><span class="line">VAR_SUPER_USER=root</span><br><span class="line">VAR_SUPER_PASS=R2022.weiyigeek.top</span><br><span class="line"><span class="comment"># normal user</span></span><br><span class="line">VAR_USER_NAME=ubuntu</span><br><span class="line">VAR_USER_PASS=U2022.weiyigeek.top</span><br><span class="line"><span class="comment"># low privilege application users</span></span><br><span class="line">VAR_APP_USER=app</span><br><span class="line">VAR_APP_PASS=A2022.weiyigeek.top</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the NTP server</span></span><br><span class="line">VAR_NTP_SERVER=( <span class="string">"ntp.aliyun.com"</span> <span class="string">"ntp.tencent.com"</span> <span class="string">"192.168.10.254"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the timezone</span></span><br><span class="line">VAR_TIMEZONE=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Password policy</span></span><br><span class="line"><span class="comment"># 默认密码最大使用为90天、过期前15天提示, 密码最小长度为12</span></span><br><span class="line">PASS_MIN_DAYS=1</span><br><span class="line">PASS_MAX_DAYS=90</span><br><span class="line">PASS_WARN_AGE=15</span><br><span class="line">PASS_MIN_LEN=12</span><br><span class="line"><span class="comment"># 默认加密方式为SHA512, 重试次数为3, 新密码与旧密码至少有6个字符不同, 至少包含3种密码类型，不限制密码中包含大写字母、小写字母、数字、特殊符号的最大数量，记住三次旧密码。</span></span><br><span class="line">VAR_PASS_ENCRYPT=SHA512</span><br><span class="line">VAR_PASS_RETRY=3</span><br><span class="line">VAR_PASS_DIFOK=6</span><br><span class="line">VAR_PASS_MINCLASS=3</span><br><span class="line">VAR_PASS_UCREDIT=-1</span><br><span class="line">VAR_PASS_LCREDIT=-1</span><br><span class="line">VAR_PASS_DCREDIT=-1</span><br><span class="line">VAR_PASS_OCREDIT=-1</span><br><span class="line">VAR_PASS_REMEMBER=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止没有主目录的用户登录</span></span><br><span class="line">VAR_DEFAULT_HOME=no</span><br><span class="line"><span class="comment"># 删除用户时禁止同步删除用户组</span></span><br><span class="line">VAR_USERGROUPS_ENAB=no</span><br><span class="line"><span class="comment"># 启用成功登录的日志记录</span></span><br><span class="line">VAR_LOG_OK_LOGINS=yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify file or Dirctory privilege policy</span></span><br><span class="line">VAR_UMASK=022</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify user login failed count policy</span></span><br><span class="line"><span class="comment"># 默认在5分钟之内登陆失败次数超过6次将锁定10分钟,终端超时10分钟</span></span><br><span class="line">VAR_LOGIN_FAIL_COUNT=6</span><br><span class="line">VAR_LOGIN_FAIL_INTERVAL=300</span><br><span class="line">VAR_LOGIN_LOCK_TIME=600</span><br><span class="line">VAR_LOGIN_TIMEOUT=300</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify history record count policy</span></span><br><span class="line">VAR_HISTSIZE=128</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify firewall policy tcp or udp port .</span></span><br><span class="line">VAR_ALLOW_PORT=(<span class="string">"22,80,443,<span class="variable">$&#123;VAR_SSHD_PORT&#125;</span>/tcp"</span> <span class="string">"53/udp"</span>)</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="​-running-​-脚本使用"><a href="#​-running-​-脚本使用" class="headerlink" title="​:running:​ 脚本使用"></a>​:running:​ 脚本使用</h3><ul><li><p>Step 1.上传到需要加固的主机服务器中，此处我上传到ubuntu用户的家目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OperatingSystem\Security&gt; scp -r .\Ubuntu\ ubuntu@10.20.172.152:~</span><br><span class="line">ubuntu@10.20.172.152\<span class="string">'s password:</span></span><br><span class="line"><span class="string">Ubuntu22.04.conf                                                                      100% 2979   976.9KB/s   00:00</span></span><br><span class="line"><span class="string">os-base.sh                                                                            100%   14KB   5.4MB/s   00:00</span></span><br><span class="line"><span class="string">os-clean.sh                                                                           100% 2446     2.1MB/s   00:00</span></span><br><span class="line"><span class="string">os-exceptions.sh                                                                      100% 2634     2.5MB/s   00:00</span></span><br><span class="line"><span class="string">os-info.sh                                                                            100% 1169     1.3MB/s   00:00</span></span><br><span class="line"><span class="string">os-manual.sh                                                                          100% 1860     2.0MB/s   00:00</span></span><br><span class="line"><span class="string">os-network.sh                                                                         100% 3774     1.8MB/s   00:00</span></span><br><span class="line"><span class="string">os-optimize.sh                                                                        100% 7752     3.7MB/s   00:00</span></span><br><span class="line"><span class="string">os-security.sh                                                                        100% 23KB     5.7MB/s   00:00</span></span><br><span class="line"><span class="string">os-service.sh                                                                         100% 3969     2.0MB/s   00:00</span></span><br><span class="line"><span class="string">os-software.sh                                                                        100% 8007     3.3MB/s   00:00</span></span><br><span class="line"><span class="string">Ubuntu22.04-InitializeReinforce.sh                                                    100% 7989     5.0MB/s   00:00</span></span><br></pre></td></tr></table></figure></li><li><p>Step 2.登陆服务器并切换到root用户, 查看 <code>/home/ubuntu</code> 目录下上传的加固版本。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 22 ubuntu@10.20.172.152</span><br><span class="line">ubuntu@Ubuntu-Security:~$ tree Ubuntu/</span><br><span class="line">Ubuntu/</span><br><span class="line">├── Readme.assets</span><br><span class="line">│   ├── image-20220823143235577.png</span><br><span class="line">│   └── image-20220823143354742.png</span><br><span class="line">├── Readme.md</span><br><span class="line">├── Ubuntu22.04-InitializeReinforce.sh</span><br><span class="line">├── config</span><br><span class="line">│   └── Ubuntu22.04.conf</span><br><span class="line">├── example</span><br><span class="line">│   └── 22.04</span><br><span class="line">│       ├── 00-custom-header</span><br><span class="line">│       ├── common-auth</span><br><span class="line">│       ├── common-password</span><br><span class="line">│       ├── issue</span><br><span class="line">│       ├── issue.net</span><br><span class="line">│       ├── login.defs</span><br><span class="line">│       ├── profile</span><br><span class="line">│       ├── resolved.conf</span><br><span class="line">│       ├── sshd_config</span><br><span class="line">│       └── su</span><br><span class="line">└── scripts</span><br><span class="line">    ├── os-base.sh</span><br><span class="line">    ├── os-clean.sh</span><br><span class="line">    ├── os-exceptions.sh</span><br><span class="line">    ├── os-info.sh</span><br><span class="line">    ├── os-manual.sh</span><br><span class="line">    ├── os-network.sh</span><br><span class="line">    ├── os-optimize.sh</span><br><span class="line">    ├── os-security.sh</span><br><span class="line">    ├── os-service.sh</span><br><span class="line">    └── os-software.sh</span><br><span class="line"></span><br><span class="line">ubuntu@Ubuntu-Security:~$ sudo -i</span><br></pre></td></tr></table></figure><ul><li>Step 3.切换root用户后进入 <code>/home/ubuntu/Ubuntu</code>，安全加固脚本存放目录，首先将所有的sh文件赋予可执行去那些，其次需要在 <code>Ubuntu22.04.conf</code> 中进行相应配置，最后运行<code>Ubuntu22.04-InitializeReinforce.sh  --start</code>即可，最后等待系统重启即可。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/Ubuntu</span><br><span class="line">chmod +x -R *</span><br><span class="line">Ubuntu22.04-InitializeReinforce.sh  --start</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823140038.png" alt="WeiyiGeek.运行加固脚本" title="" class="">                <p>WeiyiGeek.运行加固脚本</p>            </figure><ul><li>Step 4.中途请根据需求输入Y/N，然后等待重启即可，在重启后请注意sshd服务端口更改为20221所以此时你需要指定ssh连接端口。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 20221 ubuntu@10.20.172.152  <span class="comment"># Ubuntu22.04.conf 定义的 ubuntu 初始化密码，登陆后会提示你进行更改。</span></span><br><span class="line">su - root  <span class="comment"># 只能有ubuntu用户切换到root用户，其它低权限以及app用户无法通过su进行用户切换</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823115958.png" alt="WeiyiGeek.加固结果" title="" class="">                <p>WeiyiGeek.加固结果</p>            </figure><p>温馨提示: 如果执行到密码更新策略时，选择输入了(N) 否将不会更新其在<code>Ubuntu22.04.conf</code>脚本中定义的密码。</p><p>温馨提示：脚本中默认root密码为R2022.weiyigeek.top。</p><p>温馨提示: 防火墙策略只开放了80，443，22，20221等端口。</p><p><br/></p><p>:hammer_and_wrench: <strong>脚本视频演示:</strong></p><p>[<figure class="image-box">                <img src="https://www.bilibili.com/video/BV1fe4y1o7ov" alt="企业网络安全-等保2.0主机安全测评之Linux-Ubuntu22.04服务器系统安全加固实践与基线系统制作](http://i2.hdslb.com/bfs/archive/a6739f92517a8cd7b0f0e7bbbd1dd610cdf9ab12.jpg)" title="" class="">                <p>企业网络安全-等保2.0主机安全测评之Linux-Ubuntu22.04服务器系统安全加固实践与基线系统制作](http://i2.hdslb.com/bfs/archive/a6739f92517a8cd7b0f0e7bbbd1dd610cdf9ab12.jpg)</p>            </figure></p><iframe src="//player.bilibili.com/player.html?bvid=BV1fe4y1o7ov&cid=813962656&page=1" scrolling="no" border="0" frameborder="no" framespacing="0"></iframe><p>温馨提示: 点击上方图像进行观看视频。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="安全加固" scheme="https://blog.weiyigeek.top/categories/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    
    <category term="Host_Security" scheme="https://blog.weiyigeek.top/categories/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/Host-Security/"/>
    
    
    <category term="Linux" scheme="https://blog.weiyigeek.top/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://blog.weiyigeek.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>十五分钟让你快速学习Markdown语法到精通排版实践</title>
    <link href="https://blog.weiyigeek.top/2022/7-28-675.html"/>
    <id>https://blog.weiyigeek.top/2022/7-28-675.html</id>
    <published>2022-07-27T19:34:30.000Z</published>
    <updated>2022-11-19T12:40:05.939Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><h3 id="Markdown-初识"><a href="#Markdown-初识" class="headerlink" title="Markdown 初识"></a>Markdown 初识</h3><p>描述: Markdown 是一种轻量级标记语言于2004年推出，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。</p><p>Markdown 的目标是实现「易读易写」，通过在文档中的某部分加入特殊的字符，用来修饰文档中的文本，</p><p>博主使用Markdown一段时间以后，才发现Markdown原来那么强大有用、并且能提升工作效率，比如：</p><ul><li>github、stackoverflow、技术论坛</li><li>写博客、写日记、电子书</li><li>编辑微信公众号文章</li><li>编辑日常技术文章</li></ul><p>所以博主将常用的Markdown语法整理处理，方便大家入门学习以及备忘。</p><p><strong>本文来源:</strong> <a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a> :cat:</p><p><br/></p><h3 id="Markdown-特点"><a href="#Markdown-特点" class="headerlink" title="Markdown 特点"></a>Markdown 特点</h3><p>描述: 由 Markdown 语法的目标是：成为一种适用于网络的书写语言，对于我们来说它是兼容 HTML 的。其主要特点 (轻量化、跨平台、易读易写 )</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分，Markdown 的构想不是要使得 HTML 文档更容易书写。</p><p>在我看来， HTML 已经很容易写了，Markdown 的理念是，能让文档更容易读、写和随意改。</p><p>HTML 是一种发布的格式，Markdown 是一种书写的格式，就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写，不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如<code>&lt;div&gt;、&lt;table&gt;、 &lt;pre&gt;、 &lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。</p><p>Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的<code>&lt;p&gt;</code>标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格, 这是一个普通段落。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- # HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MD --&gt;</span></span><br><span class="line"></span><br><span class="line">|Header|</span><br><span class="line">|:------:|</span><br><span class="line">|Foo|</span><br></pre></td></tr></table></figure></p><p>温馨提示: 在 HTML 区块标签间的 Markdown 格式语法将不会被处理，比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用，依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。</p><p><br/></p><p><strong>举例说明：</strong><br>如果比较喜欢 HTML 的 <code>&lt;a&gt; 或 &lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法，和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><p>特殊字符自动转换:<br>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp;符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是<code>(&lt;) &amp;lt;</code>和 <code>(&amp;) &amp;amp;</code>。<br>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成<code>「AT&amp;amp;T」</code>。</p><p>而网址中的 &amp; 字符也要转换，比如你要链接到：<code>http://images.google.com/images?num=30&amp;q=larry+bird</code>, 你必须要把网址转换写为：<code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code>.</p><p>才能放到链接标签的 href 属性里,不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了，如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。</p><p>所以你如果要在文档中插入一个版权符号 ©，你可以这样写：<code>&amp;copy;</code> Markdown 会保留它不动。而若你写<code>AT&amp;T</code>Markdown 就会将它转为：<code>AT&amp;amp;T</code>。</p><p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：<code>4 &lt; 5</code>  Markdown 将会把它转换为： <code>4 &amp;lt; 5</code></p><p>不过需要注意的是，code 范围内，不论是<code>行内</code>还是<code>区块</code>， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><p><br></p><h3 id="Markdown-客户端"><a href="#Markdown-客户端" class="headerlink" title="Markdown 客户端"></a>Markdown 客户端</h3><p>描述: 此节将会根据时间递进（看博主心情）进行更新。</p><p><strong>Mac OS X</strong><br>描述: 我强烈建议你用 Mou 这款免费且十分好用的 Markdown 编辑器，它支持实时预览，既左边是你编辑 Markdown 语言，右边会实时的生成预览效果。不仅如此，Mou 还有一些有趣的偏好设置（Preference），例如主题（Themes）与样式（CSS），它们可以配置出定制化的文本编辑效果与导出效果，如果你对自带的主题与样式不满意还可以到 GitHub 上搜索其它爱好者为 Mou 编写的更多主题样式，导入的方式可以在偏好设置的 Themes 或 CSS 选项中 选择 reload。</p><p><strong>IOS</strong><br>描述: 在端很多 app 早已经支持了 Markdown 录入，例如 Drafts，Day One，iA writer 等，另外 Ulysses for iPad 现在已经上架，可以说是 iOS 平台最好的编辑器了。</p><p><strong>Windows</strong><br>描述: 有两款还算不错，一款叫做 MarkdownPad ，另一款叫做 MarkPad , 不过笔者此处推荐 <code>VSCode + Markdown Preview Enhanced (插件)</code> ，或者使用 Typora (貌似当下收费了)可以找之前不收费的版本, 一般来说使用基础的足够了。 </p><p>MarkdownPad - <a href="http://markdownpad.com/" target="_blank" rel="noopener">http://markdownpad.com/</a><br>typora - <a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a> (比较好用不然也不会收费)</p><p><strong>Web 端</strong></p><ul><li>51CTO / 简书博客 / 博客园 / segmentfault</li><li>dillinger - 漂亮强大，支持md, html, pdf 文件导出，支持dropbox, onedrive，google drive, github. 来自国外，可能不够稳定。</li></ul><p><br/></p><h2 id="0x01-语法学习"><a href="#0x01-语法学习" class="headerlink" title="0x01 语法学习"></a>0x01 语法学习</h2><h3 id="段落换行"><a href="#段落换行" class="headerlink" title="段落换行"></a>段落换行</h3><p>在讲解Markdown语法时我们首先先提一下 <code>段落和换行</code>。</p><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行, 即空白行表示另起一个段落。</p><p>比方说，若某一行只包含空格和制表符，则该行也会被视为空行）, 普通段落不该用空格或制表符来缩进。</p><p>Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成<code>&lt;br/&gt;</code>标签, 所以在换行时你可以通过<code>&lt;br/&gt;</code>进行换行（针对某些MD客户端可能不会生效）。</p><p><strong>换行</strong>: 单一段落( <code>&lt;p&gt;</code>) 用一个空白行, 连续两个空格 会变成一个 <code>&lt;br&gt;</code>, 连续2个回车表示是空行.</p><p><strong>空格</strong>:<br>1）两个全角空格 ：因为一个全角空格（space）的宽度是整整一个汉字，输入两个全角空格正好是两个汉字的宽度。<br>全角空格的输入方法为：一般的中文输入法都是按 shift + space，可以切换到全角模式下，输完后再次按 shift + space 切换回正常输入状态。<br>2）使用特殊占位符 ： 使用特殊占位符，不同占位符所占空白是不一样大的。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp; or &amp;#8194;  表示一个半角的空格</span><br><span class="line">&amp;emsp; or &amp;#8195;  表示一个全角的空格</span><br><span class="line">&amp;emsp;&amp;emsp;       两个全角的空格（用的比较多）</span><br><span class="line">&amp;nbsp; or &amp;#160;   不断行的空白格</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- #解析结果 --&gt;</span></span></span><br><span class="line">  表示一个半角的空格</span><br><span class="line">  表示一个全角的空格</span><br><span class="line">   两个全角的空格（用的比较多）</span><br><span class="line">  不断行的空白格</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="目录标题"><a href="#目录标题" class="headerlink" title="目录标题"></a>目录标题</h3><p>描述: Markdown 支持两种标题的语法，类 Setext 和类 atx 形式, 并且可以使用<code>[TOC]</code>来显示设置标题的文本并带有跳转功能。</p><p><strong>标题-类 Setext</strong>: 是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）,任何数量的 = 和 - 都可以有效果</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p><strong>标题-类 Atx 形式</strong>: 是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）, 例如</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是 H1 #</span></span><br><span class="line"><span class="section">## 这是 H2 ##</span></span><br><span class="line"><span class="section">### 这是 H3 ###</span></span><br><span class="line">....</span><br><span class="line"><span class="section">###### 这是 H6 ######</span></span><br></pre></td></tr></table></figure><p><strong>目录</strong>: 此语法支持根据标题生成文档目录, 注意有得Markdown解析器不区分TOC字母大小写。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line"><span class="section"># Heading</span></span><br><span class="line"><span class="section">## Sub heading 1</span></span><br><span class="line">Some nice text</span><br><span class="line"><span class="section">## Sub heading 2</span></span><br><span class="line">Some even nicer text</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="文字标记、粗体、斜体"><a href="#文字标记、粗体、斜体" class="headerlink" title="文字标记、粗体、斜体"></a>文字标记、粗体、斜体</h3><p><strong>文字标记</strong>: 使用==进行文字的标记，对应者HTML的mark。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 示例2 --&gt;</span></span></span><br><span class="line">==我是带背景的标记==</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mark</span>&gt;</span></span>marked<span class="xml"><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>==我是带背景的标记==</p><p><strong>关键字标记</strong>: 行内代码使用反斜杠`表示，默认不会换行，分别对应html的code，pre标签</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 示例1 --&gt;</span></span></span><br><span class="line"><span class="code">`我是标记`</span></span><br><span class="line">Use the <span class="code">`printf()`</span> function.</span><br></pre></td></tr></table></figure><p>Use the <code>printf()</code> function.  </p><p><br/></p><p><strong>粗体和斜体</strong>：用星号*或者下划线_ (注意无空格)</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这是文字斜体格式*</span>  == <span class="emphasis">_这是文字斜体格式_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这是文字粗体格式**</span>  ==   <span class="strong">__这是文字粗体格式__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***这是文字粗斜体格式**</span>*   ==  <span class="strong">___这是文字粗斜体格式__</span>_</span><br><span class="line"></span><br><span class="line">~~在文字上添加删除线~~</span><br></pre></td></tr></table></figure><p><em>这是文字斜体格式</em>  == <em>这是文字斜体格式</em></p><p><strong>这是文字粗体格式</strong>  ==   <strong>这是文字粗体格式</strong></p><p><strong><em>这是文字粗斜体格式</em></strong>   ==  <strong><em>这是文字粗斜体格式</em></strong></p><p><del>在文字上添加删除线</del></p><p><br/></p><p><strong>文字引用:</strong> 如果需要引用某些内容，可以在第一行加上 <code>“&gt;”和一个空格</code>，表示代码引用还可以嵌套, 并且引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is the first level of quoting.</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; This is nested blockquote. (嵌套的blockquote)</span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; Back to the first level.</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; 引用</span><br><span class="line"> &gt;&gt; 引用中的引用</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 嵌套其它 Markdown --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; ## 这是一个标题。</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 1.   这是第一行列表项。</span></span><br><span class="line"><span class="quote">&gt; 2.   这是第二行列表项。</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 给出一些例子代码：</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; return shell_exec("echo $input | $Markdown_script");</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="上下划线、分割线、上下标"><a href="#上下划线、分割线、上下标" class="headerlink" title="上下划线、分割线、上下标"></a>上下划线、分割线、上下标</h3><p><strong>上、下划线</strong>: 原生没有但是可以借助Latex公式插件进行实现。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- # 上划线 --&gt;</span></span></span><br><span class="line">$\overline&#123;\text&#123;上划线&#125;&#125;$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 下划线 --&gt;</span></span></span><br><span class="line">++inserted++</span><br><span class="line">$\underline&#123;\text&#123;下划线&#125;&#125;$</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ins</span>&gt;</span></span>inserted<span class="xml"><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>分隔线</strong>: 在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格, 下面每种写法都可以建立分隔线：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---  (常用)</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>上、下标</strong>: 我们可以在Markdown使用两个<code>~</code>包含字符渲染下标（sub），使用两个<code>^</code>包含字符渲染上标（sup） 。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H~2~0  =&gt; H<span class="xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>2<span class="xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span>0</span><br><span class="line">29^th^ =&gt; 29<span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>th<span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>渲染结果: H~2~0 / 29^th^</p><p><br/></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>描述: Markdown 支持插入表格。</p><p><strong>基础语法</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">------------ | ------------- | ------------</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure></p><p><strong>表头位置</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">居中 | 靠左 | 靠右</span><br><span class="line">:---------:|:----------|---------:</span><br><span class="line"> https://www.weiyigeek.top | https://blog.weiyigeek.top | https://www.weiyigeek.top</span><br></pre></td></tr></table></figure><p>渲染结果:</p><table><thead><tr><th style="text-align:center">居中</th><th style="text-align:left">靠左</th><th style="text-align:right">靠右</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.weiyigeek.top" target="_blank" rel="noopener">https://www.weiyigeek.top</a></td><td style="text-align:left"><a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a></td><td style="text-align:right"><a href="https://www.weiyigeek.top" target="_blank" rel="noopener">https://www.weiyigeek.top</a></td></tr></tbody></table><p><br></p><h3 id="有序、无序、任务列表"><a href="#有序、无序、任务列表" class="headerlink" title="有序、无序、任务列表"></a>有序、无序、任务列表</h3><p>描述: Markdown 支持有序列表和无序列表, 使用*,+,-加上一个空格来表示 , 可以支持嵌套</p><p><strong>有序列表</strong>: 用<code>数字+英文点+空格来表示</code>, 当列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序项目1</span><br><span class="line"><span class="bullet">2. </span>有序项目2 </span><br><span class="line"><span class="bullet">4. </span>有序项目3</span><br></pre></td></tr></table></figure><p>温馨提示 Markdown会自动的排序从第一个数字顺序，进行递增所以你可以完全不用在意数字的正确性。</p><p><strong>无序列表</strong>: 用星号*、加号+或是减号-在加空格来作为列表标记：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>项目1</span><br><span class="line"><span class="bullet">+ </span>项目2</span><br><span class="line"><span class="bullet">- </span>项目3</span><br></pre></td></tr></table></figure><p>例如，在MD中，你可以选取文字后然后从选单中选择增加引用阶层。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">  Welcome to visit https://weiyigeek.top</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line"></span><br><span class="line">Welcome to visit https://blog.weiyigeek.top</span><br></pre></td></tr></table></figure><p><br></p><p><strong>任务列表</strong>: 如果需要标记某些待办事项，可以使用以下语法：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成的事项1</span><br><span class="line"><span class="bullet">- </span>[ ] 未完成的事项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>[x] 已完成事项1</span><br><span class="line"><span class="bullet">- </span>[x] 已完成事项2</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 未完成的事项2</p></li><li><p>[x] 已完成事项1</p></li></ul><p><br></p><h3 id="链接、锚、缩写、脚注、引用"><a href="#链接、锚、缩写、脚注、引用" class="headerlink" title="链接、锚、缩写、脚注、引用"></a>链接、锚、缩写、脚注、引用</h3><p><strong>行内链接</strong>: 为文字设置href与alt备注或者简写用尖括号&lt;&gt;包裹url，这样生成的url锚文本就是url本身, 但其标签的属性将会 <code>rel=&quot;nofollow&quot;</code>。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">个人主页链接</span>](<span class="link">https://weiyigeek.top "WeiyiGeek"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>自动链接</strong>: Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只需用 &lt; &gt; 包起来，Markdown 就会自动把它转成链接。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">weiyigeek.top</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">master@weiyigeek.top</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>温馨提示: 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：<a href="mailto:&#x6d;&#x61;&#115;&#x74;&#x65;&#x72;&#x40;&#x77;&#101;&#x69;&#x79;&#105;&#103;&#101;&#101;&#107;&#x2e;&#116;&#x6f;&#112;">&#x6d;&#x61;&#115;&#x74;&#x65;&#x72;&#x40;&#x77;&#101;&#x69;&#x79;&#105;&#103;&#101;&#101;&#107;&#x2e;&#116;&#x6f;&#112;</a>。</p><p><br/></p><p><strong>锚标记</strong>：可以把这个标记的链接内容定义出来；链接内容定义的形式为，下面这三种链接的定义都是相同：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例1.链接跳转 --&gt;</span></span></span><br><span class="line">This is [id] reference-style link.</span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例2.数字形式 --&gt;</span></span></span><br><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol">1</span>] than from</span><br><span class="line">[<span class="string">Yahoo</span>][<span class="symbol">2</span>] or [<span class="string">MSN</span>][<span class="symbol">3</span>].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        "Google"</span><br><span class="line">  [2]: http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [3]: http://search.msn.com/    "MSN Search"</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例3.链接名称的方式 --&gt;</span></span></span><br><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol"></span>] than from</span><br><span class="line">[<span class="string">Yahoo</span>][<span class="symbol"></span>] or [<span class="string">MSN</span>][<span class="symbol"></span>].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        "Google"</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [msn]:    http://search.msn.com/    "MSN Search"</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>缩写（abbr）</strong> : 为网页中的文字创建一个描述介绍, 鼠标放在文字上即可。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*[HTML]: Hyper Text Markup Language</span><br><span class="line">*[W3C]:  World Wide Web Consortium </span><br><span class="line">The HTML specification</span><br><span class="line">is maintained by the W3C.</span><br></pre></td></tr></table></figure></p><p>显示结果:<br><em>[HTML]: Hyper Text Markup Language</em>[W3C]:  World Wide Web Consortium<br>The HTML specification<br>is maintained by the W3C.</p><p><br/></p><p><strong>脚注</strong>: <code>[^footnote]</code> 可以是任意英文字符,脚注的内容可以放在文章的任意位置（一般放最后），如果脚注显示在文章末尾；脚注后方的链接可以直接跳转回到加注的地方。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 Markdown[^1] 可以效率的书写文档，直接转换成 HTML[^2], 你可以使用 Typora[^T] 软件。</span><br><span class="line">[<span class="symbol">^1</span>]:<span class="link">Markdown 是一种纯文本标记语言。</span></span><br><span class="line">[<span class="symbol">^2</span>]:<span class="link">HyperText Markup Language 超文本标记语言。</span></span><br><span class="line">[<span class="symbol">^T</span>]:<span class="link">Typora 官网 &lt;https://typora.io/&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示:使用 Markdown[^1] 可以效率的书写文档，直接转换成 HTML[^2], 你可以使用 Typora[^T] 软件。<br>[^1]:Markdown 是一种纯文本标记语言。<br>[^2]:HyperText Markup Language 超文本标记语言。<br>[^T]:Typora 官网 <a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><p><br></p><h3 id="图片、音乐、视频、地图、内容折叠"><a href="#图片、音乐、视频、地图、内容折叠" class="headerlink" title="图片、音乐、视频、地图、内容折叠"></a>图片、音乐、视频、地图、内容折叠</h3><p><strong>图片</strong>: 如果需要插入图片需要给出图片的链接，只是在中括号前加叹号.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1. --&gt;</span></span></span><br><span class="line">![<span class="string">alt_text</span>](<span class="link">https://blog.weiyigeek.top/img/avatar.jpg "WeiyiGeek avatar"</span>)</span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2. --&gt;</span></span></span><br><span class="line">[<span class="symbol">avatar</span>]:<span class="link">https://blog.weiyigeek.top/img/avatar.jpg "WeiyiGeek avatar"</span></span><br><span class="line">![<span class="string">WeiyiGeek</span>][<span class="symbol">avatar</span>]</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>音乐</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1.audio 标签 --&gt;</span></span></span><br><span class="line">​<span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp3"</span> <span class="attr">src</span>=<span class="string">"音频地址"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span></span><br><span class="line">  你的浏览器不支持 audio 标签。</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2.iframe --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1488737309&amp;auto=1&amp;height=66"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式3.embed --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"//music.163.com/style/swf/widget.swf?sid=461544312&amp;type=2&amp;auto=0&amp;width=320&amp;height=66"</span> <span class="attr">width</span>=<span class="string">"340"</span> <span class="attr">height</span>=<span class="string">"86"</span>  <span class="attr">allowNetworking</span>=<span class="string">"all"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>扩展其他插件方式:</p><ul><li><p>MeingJS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - 可以在文章开头添加，或者去修改主题</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/meting@1.1.0/dist/Meting.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章中使用</span></span><br><span class="line">&lt;div class=<span class="string">"aplayer"</span> data-id=<span class="string">"31356499"</span> data-server=<span class="string">"netease"</span> data-type=<span class="string">"song"</span> data-mode=<span class="string">"single"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说</span></span><br><span class="line">data-id    歌曲/专辑/歌单 ID</span><br><span class="line">data-server  netease（网易云音乐）tencent（QQ音乐） xiami（虾米） kugou（酷狗）</span><br><span class="line">data-type    song （单曲） album （专辑） playlist （歌单） search （搜索）</span><br><span class="line">data-mode  random （随机） single （单曲） circulation （列表循环） order （列表）</span><br><span class="line">data-autoplay <span class="literal">false</span>（手动播放） <span class="literal">true</span>（自动播放）</span><br></pre></td></tr></table></figure></li><li><p>Aplay 插件 ：MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm install hexo-tag-aplayer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">title : 曲目标题</span><br><span class="line">author: 曲目作者</span><br><span class="line">url: 音乐文件 URL 地址</span><br><span class="line">picture_url: (可选) 音乐对应的图片地址</span><br><span class="line">narrow: （可选）播放器袖珍风格</span><br><span class="line">autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">width:xxx: (可选) 播放器宽度 (默认: 100%)</span><br><span class="line">lrc:xxx: （可选）歌词文件 URL 地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Hexo 配置文件 _config.yml 中设置：</span></span><br><span class="line">aplayer:</span><br><span class="line">  meting: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Markdown</span></span><br><span class="line">&#123;% meting <span class="string">"391125700"</span> <span class="string">"netease"</span> <span class="string">"playlist"</span> <span class="string">"mutex:false"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> <span class="string">"theme:#ad7a86"</span>%&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">id 必须值 歌曲 id / 播放列表 id / 相册 id / 搜索关键字</span><br><span class="line">server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu</span><br><span class="line"><span class="built_in">type</span> 必须值 song, playlist, album, search, artist</span><br><span class="line">fixed <span class="literal">false</span> 开启固定模式</span><br><span class="line">mini <span class="literal">false</span> 开启迷你模式</span><br><span class="line">loop all 列表循环模式：all, one,none</span><br><span class="line">order list 列表播放模式： list, random</span><br><span class="line">volume 0.7 播放器音量</span><br><span class="line">lrctype 0 歌词格式类型</span><br><span class="line">listfolded <span class="literal">false</span> 指定音乐播放列表是否折叠</span><br><span class="line">storagename metingjs LocalStorage 中存储播放器设定的键名</span><br><span class="line">autoplay <span class="literal">true</span> 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">mutex <span class="literal">true</span> 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">listmaxheight 340px 播放列表的最大长度</span><br><span class="line">preload auto 音乐文件预载入模式，可选项： none, metadata, auto</span><br><span class="line">theme <span class="comment">#ad7a86 播放器风格色彩设置</span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>视频</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1.video 标签, 原生仅支持播放 ogg/mp4/webm 格式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://v2v.cc/320x240.ogg"</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span></span><br><span class="line">  你的浏览器不支持 <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>video<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> 标签。</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2.iframe --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=59317437&amp;bvid=BV1Pt411G7qh&amp;cid=103365806&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>地图:</strong> Markdown 中我们可以利用<code>iframe</code>标签插入各地图功能提供平台的地图Api功能(<a href="https://lbsyun.baidu.com/index.php?title=jspopularGL)。" target="_blank" rel="noopener">https://lbsyun.baidu.com/index.php?title=jspopularGL)。</a></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span></span></span></span><br><span class="line"><span class="xml">  src="https://map.weiyigeek.top/baiduMap.html" </span></span><br><span class="line"><span class="xml">  width="600" </span></span><br><span class="line"><span class="xml">  height="300" </span></span><br><span class="line"><span class="xml">  frameborder="0" </span></span><br><span class="line"><span class="xml">  scrolling="no"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>内容折叠</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>Title<span class="xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line">contents ...</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>结果展示:</p><details> <summary>Title</summary><br>contents …<br></details><p>温馨提示: 内容里面可以嵌套使用 Markdown 语法和 HTML 语法。</p><p><br></p><h3 id="嵌入代码"><a href="#嵌入代码" class="headerlink" title="嵌入代码"></a>嵌入代码</h3><p><strong>代码段落</strong>：则是在每行文字前加4个空格或者1个缩进符<code>[Tab]键</code>表示。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Tab]键 <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span> Tab <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;p&gt; 前面四个空格 &lt;/p&gt;</span></span><br></pre></td></tr></table></figure><pre><code>&lt;p&gt; 前面四个空格 &lt;/p&gt;</code></pre><p><br/></p><p><strong>嵌入代码块</strong>: 以3个反引号`为开始与结束，反引号键一般在键盘按键1左侧，需要在英文状态下输入。</p><ul><li>在反引号之后加上脚本编程语言名称就会进行代码高亮的处理，例如: <code>python、php、go、bash</code>, 不一定所有的Markdown都支持。</li></ul><p>`<code>pythonimport osprint &#39;something&#39; \`</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> <span class="string">'something'</span></span><br></pre></td></tr></table></figure><ul><li>如果语言后面多一个:n，则会显示代码的行号，也是不一定所有的Markdown都支持。</li></ul><p>`<code>ruby:ndef add(a, b)return a + bend\`</code></p><p>温馨提示: 代码的高亮的具体样式是由CSS控制的，由Pygments生成,你可以访问<code>Pygments Styles</code>查看常见的几种风格。</p><p><br/></p><h3 id="特殊符号、Emoji"><a href="#特殊符号、Emoji" class="headerlink" title="特殊符号、Emoji"></a>特殊符号、Emoji</h3><p>描述: 特殊字符是相对于传统或常用的符号外，使用频率较少字符且难以直接输入的符号。比如数学符号；单位符号；制表符等。</p><ul><li>常用排版： ▌▍◆★☆☁➤➜❤➊➋➌</li><li>TodoList： ✅☑✓✔√☓☒✘ㄨ✕✖✗❌❎</li><li>emoji：🌹🍀🌙🍂🍃🌷💎🔥⭐🍄🏆</li></ul><p><br/></p><p><strong>转义：</strong>: 利用反斜杠来插入一些在语法中有其它意义的符号, 例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用标签），你可以在星号的前面加上反斜杠：<code>\*literal asterisks\*</code></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>HTML 符号</strong>: HTML 支持的特殊符号：数学符号 / 希腊字母 / 其他 (<a href="https://www.w3school.com.cn/tags/html_ref_symbols.html" target="_blank" rel="noopener">https://www.w3school.com.cn/tags/html_ref_symbols.html</a>)</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">←left arrow        &amp;larr;&amp;#8592;</span><br><span class="line">↑up arrow        &amp;uarr;&amp;#8593;</span><br><span class="line">→right arrow        &amp;rarr;&amp;#8594;</span><br><span class="line">↓down arrow        &amp;darr;&amp;#8595;</span><br><span class="line">↔left right arrow&amp;harr;&amp;#8596;</span><br><span class="line">↵carriage return arrow&amp;crarr;&amp;#8629;</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>Emoji</strong>: Markdown 是支持Emoji的其语法为<code>:emoji:</code>,所有表情符号名称都是官方 Unicode 字符数据库或 CLDR 名称, 更多官方Emoji参考 (<a href="https://emojipedia.org/)" target="_blank" rel="noopener">https://emojipedia.org/)</a>, Markdown 原生支持的 Emoji 参考 (<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a>) , 值得注意不一定全部浏览器都支持。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:100:</span><br><span class="line">:smile:</span><br><span class="line">:kissing_heart:</span><br><span class="line">:smiley: </span><br><span class="line">:heart:</span><br><span class="line">:one:</span><br><span class="line">:o:</span><br><span class="line">:heavy<span class="emphasis">_check_</span>mark:</span><br><span class="line">:fire:</span><br></pre></td></tr></table></figure><p>结果展示:<br>:100: :smile:    :kissing_heart:    :smiley:    :heart:    :one:    :o:    :heavy_check_mark:    :fire:</p><p><br/></p><h3 id="位置、字体、字号、颜色"><a href="#位置、字体、字号、颜色" class="headerlink" title="位置、字体、字号、颜色"></a>位置、字体、字号、颜色</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>文字居中<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">12</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span></span>null<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>gray<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">      &lt;td bgcolor=#FF4500&gt;背景色是：OrangeRed，十六进制颜色值：#FF4500，rgb(255, 69, 0)&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>渲染结果:</strong></p><p><center>文字居中</center></p><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color=#0099ff size=12 face="黑体">黑体</font></p><p><font color=#00ffff size=3>null</font></p><p><font color=gray size=5>gray</font></p><table><tr><td bgcolor=#FF4500><br>    这里的背景色是：OrangeRed，十六进制颜色值：#FF4500，rgb(255, 69, 0)<br></td></tr></table><p><br/></p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>描述: Markdown 是通过数学公式渲染的插件来解析支持公式的，其中最常用的就是 <code>Katex</code>, 如果主题没有支持，可以在系统设置的 自定义内容页 head： 中加入以下代码：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/katex@0.12.0/dist/katex.min.css&quot; /&gt;</code></p><p>如果需要插入数学公式，可以使用以下语法：<br>`<code>mathE = mc^2U = IR\`</code></p><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E &#x3D; mc^2 \\</span><br><span class="line">U &#x3D; IR</span><br></pre></td></tr></table></figure><p><br></p><p>可以创建行内公式，例如：<code>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</code> 和 <code>$\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$</code></p><p>显示结果：</p><p>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><p>$\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$</p><p><br></p><p>或者块级公式，例如：<code>$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</code></p><p>显示结果：</p><p>$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>例如，一写简单的数学公式<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 平方根 --&gt;</span></span></span><br><span class="line">$\sqrt&#123;3x-1&#125;+(1+x)^2$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 求圆的面积 --&gt;</span></span></span><br><span class="line">$$</span><br><span class="line">S=\pi r^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$ x &#123;=&#125; y^2 + 1 $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\left [ – \frac&#123;\hbar^2&#125;&#123;2 m&#125; \frac&#123;\partial^2&#125;&#123;\partial x^2&#125; + V \right ] \Psi = i \hbar \frac&#123;\partial&#125;&#123;\partial t&#125; \Psi</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><p>显示结果：</p><p>$\sqrt{3x-1}+(1+x)^2$</p><p>$$<br>S=\pi r^2<br>$$</p><p>$$ x {=} y^2 + 1 $$</p><p>$$<br>\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi<br>$$</p><p><br/></p><p><strong>大括号范围表达式</strong><br>描述：在进行数据算法学习时候常常会遇到大括号包含的范围表达式，此时我们可在markdown使用如下方式进行展示公式。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法一： --&gt;</span></span></span><br><span class="line">$$ f(x)=\left\&#123;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">x &amp; = &amp; \cos(t) \\</span><br><span class="line">y &amp; = &amp; \sin(t) \\</span><br><span class="line">z &amp; = &amp; \frac xy</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\right.</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法二： --&gt;</span></span></span><br><span class="line">$$ F^&#123;HLLC&#125;=\left\&#123;</span><br><span class="line">\begin&#123;array&#125;&#123;rcl&#125;</span><br><span class="line">F<span class="emphasis">_L       &amp;      &amp; &#123;0      &lt;      S_</span>L&#125;\\</span><br><span class="line">F^*<span class="emphasis">_L     &amp;      &amp; &#123;S_</span>L \leq 0 <span class="xml"><span class="tag">&lt; <span class="attr">S_M</span>&#125;\\</span></span></span><br><span class="line"><span class="xml">F^*_R     &amp;      &amp; &#123;S_M \leq 0 <span class="tag">&lt; <span class="attr">S_R</span>&#125;\\</span></span></span><br><span class="line"><span class="xml">F_R       &amp;      &amp; &#123;S_R \leq 0&#125;</span></span><br><span class="line"><span class="xml">\end&#123;array&#125; \right. $$</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法三: --&gt;</span></span></span><br><span class="line">$$f(x)=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0&amp; \text&#123;x=0&#125;\\</span><br><span class="line">1&amp; \text&#123;x!=0&#125;</span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p>结果显示：</p><p>方法一：<br>$$ f(x)=\left{<br>\begin{aligned}<br>x &amp; = &amp; \cos(t) \<br>y &amp; = &amp; \sin(t) \<br>z &amp; = &amp; \frac xy<br>\end{aligned}<br>\right.<br>$$</p><p>方法二：<br>$$ F^{HLLC}=\left{<br>\begin{array}{rcl}<br>F_L       &amp;      &amp; {0      &lt;      S_L}\<br>F^<em>_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\<br>F^</em>_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\<br>F_R       &amp;      &amp; {S_R \leq 0}<br>\end{array} \right. $$</p><p>方法三:<br>$$f(x)=<br>\begin{cases}<br>0&amp; \text{x=0}\<br>1&amp; \text{x!=0}<br>\end{cases}$$</p><p><br/></p><p>扩展知识: 有的Markdown解析同时也支持 HTML 属性，需要插件进行支持。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line">(x+1)^2 = \class&#123;hidden&#125;&#123;(x+1)(x+1)&#125; </span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">(x+1)^2 = \cssId&#123;step1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><p>温馨提示: 请注意 Markdown 特殊字符需要使用反斜杠进行转义，因此它们被视为数学而不是 Markdown。 如，<em> 和 _ 分别变为 \</em> 和 _。</p><p><br/></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>支持渲染 Mermaid 图表为 svg 内容，并直接保存渲染后的内容，所以无需在前台引入 Mermaid 插件进行渲染。 </p><p>如果需要插入流程图，可以使用以下语法, 但是需要注意不一定所有Markdown</p><p><strong>横向流程图：</strong></p><ul><li>示例1</li></ul><p>`<code>mermaidgraph LR;A--&gt;BB--&gt;CB--&gt;D\`</code></p><p>渲染结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A--&gt;B</span><br><span class="line">B--&gt;C</span><br><span class="line">B--&gt;D</span><br></pre></td></tr></table></figure></p><ul><li>示例2</li></ul><p>`<code>mermaidgraph LR;  A[Hard edge] --&gt;|Label| B(Round edge)  B --&gt; C{Decision}  C --&gt;|One| D[Result one]  C --&gt;|Two| E[Result two]\`</code></p><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A[Hard edge] --&gt;|Label| B(Round edge)</span><br><span class="line">  B --&gt; C&#123;Decision&#125;</span><br><span class="line">  C --&gt;|One| D[Result one]</span><br><span class="line">  C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>纵向流程图:</strong></p><ul><li>示例1<br>`<code>mermaidgraph TD;A[christmas] --&gt;B(Go shopping)B --&gt; C{Let me think}C --&gt;|One| D[Laptop]C --&gt;|Two| E[iPhone]C --&gt;|Three|F[Car]\`</code></li></ul><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><ul><li>示例2</li></ul><p>`<code>mermaidsequenceDiagram  participant Alice  participant Bob  Alice-&gt;&gt;John: Hello John, how are you?  loop Healthcheck      John-&gt;&gt;John: Fight against hypochondria  end  Note right of John: Rational thoughts &lt;br/&gt;prevail!  John--&gt;&gt;Alice: Great!  John-&gt;&gt;Bob: How about you?  Bob--&gt;&gt;John: Jolly good!\`</code></p><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">  participant Alice</span><br><span class="line">  participant Bob</span><br><span class="line">  Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">  loop Healthcheck</span><br><span class="line">      John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">  end</span><br><span class="line">  Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail!</span><br><span class="line">  John--&gt;&gt;Alice: Great!</span><br><span class="line">  John-&gt;&gt;Bob: How about you?</span><br><span class="line">  Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>代码流程图</strong></p><p>`<code></code>flow<br>st=&gt;start: Start  //start:开始<br>e=&gt;end: End        //end:结束<br>op1=&gt;operation: My Operation    //操作框<br>sub1=&gt;subroutine: My Subroutine   //子程序<br>cond=&gt;condition: Yes or No?  //条件判断框<br>io=&gt;inputoutput: catch something…   //输入输出框</p><p>st-&gt;op1-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op1<br>`<code></code></p><p>渲染效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start  </span><br><span class="line">e&#x3D;&gt;end: End     </span><br><span class="line">op1&#x3D;&gt;operation: My Operation  </span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine </span><br><span class="line">cond&#x3D;&gt;condition: Yes or No? </span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...  </span><br><span class="line">    </span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><p>例如，如果需要插入序列图，可以使用以下语法：<br><strong>示例1</strong></p><p>`<code>mermaidsequenceDiagram  Client-&gt;&gt;Server: How are you?  Server-&gt;&gt;Client: Great!\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Client-&gt;&gt;Server: How are you?</span><br><span class="line">Server-&gt;&gt;Client: Great!</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>示例2</strong><br>`<code>sequenceAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><p><strong>非常注意：</strong></p><ul><li>1) 关键词（start、end、operation、subroutine、condition和inputoutput）后的冒号后要紧跟一个空格。</li><li>2) 使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。</li></ul><p>更多关于流程图的语法说明：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><p><br></p><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><p>描述: 如果需要插入甘特图，可以使用以下语法：</p><p><strong>示例1</strong></p><p>`<code>mermaid  gantt  dateFormat YYYY-MM-DD  section S1  T1: 2014-01-01, 9d  section S2  T2: 2014-01-11, 9d  section S3  T3: 2014-01-02, 9d\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 9d</span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 9d</span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure><p>更多关于时序图的语法说明：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="工作效率" scheme="https://blog.weiyigeek.top/categories/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
    
    <category term="Markdown" scheme="https://blog.weiyigeek.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>NextCloud私有云盘进阶扩展配置使用</title>
    <link href="https://blog.weiyigeek.top/2022/7-22-682.html"/>
    <id>https://blog.weiyigeek.top/2022/7-22-682.html</id>
    <published>2022-07-22T11:35:30.000Z</published>
    <updated>2022-09-09T04:57:25.047Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="0x01-扩展配置"><a href="#0x01-扩展配置" class="headerlink" title="0x01 扩展配置"></a>0x01 扩展配置</h1><h2 id="1-NextCloud之olnyOffice添加中文字体实践"><a href="#1-NextCloud之olnyOffice添加中文字体实践" class="headerlink" title="1.NextCloud之olnyOffice添加中文字体实践"></a>1.NextCloud之olnyOffice添加中文字体实践</h2><p>描述: 在NextCloud安装好olnyOffice插件后，打开示例word文档会发现其没有中文相关的字体，这对于处理企业内部共享办公文档使用中文字体来说是不行，所通过本章帮助遇到相同问题的朋友解决olnyoffice中没有中文字体的问题。</p><p><strong>大致流程:</strong></p><ul><li>1、安装 Docker (在前面已经讲解, 参考地址: <a href="https://blog.weiyigeek.top/2019/5-3-455.html#0x01-Docker-安装实践">https://blog.weiyigeek.top/2019/5-3-455.html#0x01-Docker-安装实践</a> )</li><li>2、部署 Onlyoffice (在前面已经讲解, 参考地址: <a href="https://blog.weiyigeek.top/2020/5-22-100.html#2-Docker安装-推荐">https://blog.weiyigeek.top/2020/5-22-100.html#2-Docker安装-推荐</a>)</li><li>3、删除 Onlyoffice 自带字体 (本节从此处开始实践)</li><li>4、将修改好的字体cp到容器 (或者直接映射到容器custom目录中)</li><li>5、在容器下执行/usr/bin/documentserver-generate-allfonts.sh</li></ul><p><strong>实践流程:</strong></p><ul><li>Step 1.准备文档需要用到的中文字体，此处我已经准备好了办公文档所需的中文方正字体，如需下载地址: <a href="https://share.weiyigeek.top/f/36158960-649385450-ac6168" target="_blank" rel="noopener">https://share.weiyigeek.top/f/36158960-649385450-ac6168</a> (网盘密码回复【onlyoffice中文字体】即获得, 回复地址：<a href="https://weiyigeek.top/wechat.html?key=onlyoffice中文字体" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=onlyoffice中文字体</a> )</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220815144138.png" alt="WeiyiGeek.onlyoffice中文字体" title="" class="">                <p>WeiyiGeek.onlyoffice中文字体</p>            </figure><p><br/></p><ul><li>Step 2.下载完成后上传到部署onlyoffice服务器中，此处我放置在<code>/app/onlyoffice/front/</code>目录之中.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/onlyoffice/front/ &amp;&amp; ls</span><br><span class="line">FZBSJW.TTF   FZDHTJW.TTF  FZHTJW.TTF    FZLSK.ttf    FZS3JW.TTF   FZSTK.TTF    FZXH1K.TTF   FZY3FW.TTF    FZYXK.ttf         方正中等线简体.ttf    方正少儿简体.ttf      方正祥隶简体.ttf     方正艺黑简体.ttf</span><br><span class="line">Fzbsk.ttf    FZDHTK.ttf   FZHTK.TTF     FZMHJW.TTF   FZS3K.ttf    FZSYFW.TTF   FZXKFW.TTF   FZY3JW.TTF    FZZBHFW.TTF       方正书宋简体.ttf      方正平和简体.ttf      方正稚艺简体.ttf     方正行楷简体.ttf</span><br><span class="line">FZCCHFW.TTF  FZFSFW.TTF   FZKANGFW.TTF  FZMHK.ttf    FZSEFW.TTF   FZSYJW.TTF   FZXKJW.TTF   FZY3K.TTF     FZZBHJW.TTF       方正仿宋简体.ttf      方正幼线简体.ttf      方正粗倩简体.ttf     方正超粗黑简体.ttf</span><br><span class="line">FZCCHJW.TTF  FZFSJW.TTF   FZKANGJW.TTF  FZNBSJW.TTF  FZSEJW.TTF   FZSYK.TTF    FZXKK.ttf    FZY4FW.TTF    FZZDXFW.TTF       方正准圆简体.ttf      方正康体简体.ttf      方正粗圆简体.ttf     方正铁筋隶书简体.ttf</span><br><span class="line">FZCCHK.ttf   FZFSK.TTF    FZKANGK.ttf   FZNBSK.ttf   FZSEK.ttf    FZSZFW.TTF   FZXLFW.TTF   FZY4JW.TTF    FZZDXJW.TTF       方正剪纸简体.ttf      方正彩云简体.ttf      方正粗宋简体.ttf     方正隶书简体.ttf</span><br><span class="line">FZCQFW.TTF   FZGLFW.TTF   FZKATFW.TTF   FZNSTFW.TTF  FZSHHFW.TTF  FZSZJW.TTF   FZXQFW.TTF   FZY4K.ttf     FZZDXK.TTF        方正北魏楷书简体.ttf  方正报宋简体.ttf      方正粗活意简体-.ttf  方正隶二简体.ttf</span><br><span class="line">FZCQJW.TTF   FZGLJW.TTF   FZKATJW.TTF   FZNSTJW.TTF  FZSHHJW.TTF  FZSZK.ttf    FZXQJW.TTF   FZYBKSFW.TTF  FZZHYFW.TTF       方正华隶简体.ttf      方正新报宋简体.ttf    方正粗活意简体.ttf   方正隶变简体.ttf</span><br><span class="line">FZCQK.ttf    FZH4FW.TTF   FZKTFW.TTF    FZNSTK.ttf   FZSHJW.TTF   FZWBFW.TTF   FZXQK.ttf    FZYBKSJW.TTF  FZZHYJW.TTF       方正卡通简体.ttf      方正新舒体简体.ttf    方正细倩简体.ttf     方正魏碑简体.ttf</span><br><span class="line">FZCSFW.TTF   FZHCJW.TTF   FZKTJW.TTF    FZPHFW.TTF   FZSHK.ttf    FZWBJW.TTF   FZXSHFW.TTF  FZYBXSFW.TTF  FZZHYK.ttf        方正古隶简体.ttf      方正楷体简体.ttf      方正细圆简体.ttf     方正黄草简体.ttf</span><br><span class="line">FZCSJW.TTF   FZHCK.ttf    FZKTK.TTF     FZPHTFW.TTF  FZSJSFW.TTF  FZWBK.ttf    FZXSHJW.TTF  FZYBXSJW.TTF  FZZKFW.TTF        方正启体简体.ttf      方正毡笔黑简体.ttf    方正细珊瑚简体.ttf   方正黑体简体.TTF</span><br><span class="line">FZCSK.ttf    FZHLFW.TTF   FZL2FW.TTF    FZPHTJW.TTF  FZSJSJW.TTF  FZXBSFW.TTF  FZXSHK.ttf   FZYHFW.TTF    FZZQFW.TTF        方正大标宋简体.ttf    方正水柱简体.ttf      方正细等线简体.ttf</span><br><span class="line">FZCYFW.TTF   FZHLJW.TTF   FZL2JW.TTF    FZPHTK.ttf   FZSJSK.ttf   FZXBSJW.TTF  FZXSSFW.TTF  FZYHJW.TTF    FZZQJW.TTF        方正大黑简体.ttf      方正水黑简体.ttf      方正细黑一简体.ttf</span><br><span class="line">FZCYJW.TTF   FZHLK.ttf    FZL2K.ttf     FZPWFW.TTF   FZSSFW.TTF   FZXBSK.TTF   FZXXLFW.TTF  FZYTFW.TTF    FZZQK.ttf         方正姚体简体.ttf      方正流行体简体.ttf    方正综艺简体.ttf</span><br><span class="line">FZCYK.ttf    FZHPFW.TTF   FZLBFW.TTF    FZPWJW.TTF   FZSSJW.TTF   FZXDXJW.TTF  FZXZTFW.TTF  FZYTJW.TTF    FZZYFW.TTF        方正宋一简体.ttf      方正琥珀简体.ttf      方正美黑简体.ttf</span><br><span class="line">FZDBSFW.TTF  FZHPJW.TTF   FZLBJW.TTF    FZPWK.ttf    FZSSK.TTF    FZXDXK.ttf   FZY1FW.TTF   FZYTK.TTF     FZZYJW.TTF        方正宋三简体.ttf      方正瘦金书简体.ttf    方正胖头鱼简体.ttf</span><br><span class="line">FZDBSJW.TTF  FZHPK.ttf    FZLBK.TTF     FZQTFW.TTF   FZSTFW.TTF   FZXH1FW.TTF  FZY1JW.TTF   FZYXFW.TTF    FZZYK.ttf         方正宋黑简体.ttf      方正硬笔楷书简体.ttf  方正胖娃简体.ttf</span><br><span class="line">FZDBSK.ttf   FZHTFW.TTF   FZLSJW.TTF    FZQTJW.TTF   FZSTJW.TTF   FZXH1JW.TTF  FZY1K.TTF    FZYXJW.TTF    方正中倩简体.ttf  方正小标宋简体.ttf    方正硬笔行书简体.ttf  方正舒体简体.ttf</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 3.此处onlyoffice是采用docker部署的所以我们需要进入到容器内部shell中，删除自带的一些没有字体，为中文字体腾出位置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps | grep <span class="string">"onlyoffice"</span></span><br><span class="line">45a356ff9fce   onlyoffice/documentserver   <span class="string">"/app/ds/run-documen…"</span>   2 months ago   Up 2 months   0.0.0.0:9000-&gt;80/tcp, :::9000-&gt;80/tcp, 0.0.0.0:9001-&gt;443/tcp, :::9001-&gt;443/tcp   onlyoffice</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 45a356ff9fce bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器内部Shell终端</span></span><br><span class="line">$ rm -rf /var/www/onlyoffice/documentserver/core-fonts/*</span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/fonts/truetype &amp;&amp; ls </span><br><span class="line">custom  msttcorefonts liberation dejavu</span><br><span class="line">$ rm -rf liberation/ dejavu/</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 4.复制我准备的中文字体到onlyoffice容器的<code>/usr/share/fonts/truetype/custom</code>目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/onlyoffice/front</span><br><span class="line">docker cp 方正黑体简体.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正楷体简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正仿宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正小标宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正大标宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZKANGFW.TTF  onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZLSJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZPWJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZXQJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZZHYK.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 5.当复制完成后我们又要重新进入onlyoffice容器中，执行<code>/usr/bin/documentserver-generate-allfonts.sh</code>命令生成onlyoffice可用字体。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/documentserver-generate-allfonts.sh</span><br><span class="line">Generating AllFonts.js, please wait...Done</span><br><span class="line">Generating presentation themes, please wait...Done</span><br><span class="line">ds:docservice: stopped</span><br><span class="line">ds:docservice: started</span><br><span class="line">ds:converter: stopped</span><br><span class="line">ds:converter: started</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 6.之后我们便可访问nextcloud网页端进行验证是否支持我们导入的中文字体，例如：</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220815150432.png" alt="WeiyiGeek.字体验证" title="" class="">                <p>WeiyiGeek.字体验证</p>            </figure><p>至此完毕！</p><hr><h1 id="0x01-插件使用"><a href="#0x01-插件使用" class="headerlink" title="0x01 插件使用"></a>0x01 插件使用</h1><h2 id="安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报"><a href="#安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报" class="headerlink" title="安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报"></a>安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报</h2><p>描述：该 Forms 插件基于NextCloud实现自托管简单的调查和问卷调查，其主要功能有问卷表单创建、简单的分享和回复、问卷数据可视化展示与导出，对于内部人员问卷告别互联网<code>上某卷星、以及某问卷</code>吧。</p><p>NextCloud商店地址：<a href="https://apps.nextcloud.com/apps/forms" target="_blank" rel="noopener">https://apps.nextcloud.com/apps/forms</a></p><p>插件项目地址: <a href="https://github.com/nextcloud/forms" target="_blank" rel="noopener">https://github.com/nextcloud/forms</a> </p><p><strong>Form 插件特点</strong></p><ul><li>📝 简单的设计： 没有大量的选择，只有必需品, 当然在移动设备上运行良好。</li></ul><figure class="image-box">                <img src="https://github.com/nextcloud/forms/raw/master/screenshots/forms2.png" alt="简单的分享和回复" title="" class="">                <p>简单的分享和回复</p>            </figure><ul><li>📊 查看和导出结果： 结果可视化，也可以以与 Google 表单使用的相同格式导出为 CSV。</li></ul><figure class="image-box">                <img src="https://github.com/nextcloud/forms/raw/master/screenshots/forms3.png" alt="响应可视化和导出" title="" class="">                <p>响应可视化和导出</p>            </figure><ul><li>🔒 数据尽在掌握！ 与 Google Forms、Typeform、Doodle 等不同，调查信息和回复在您的实例上是保密的，不像一些公共的问卷系统会过渡收集个人信息。</li></ul><p><br/></p><p><strong>Form 安装使用</strong></p><p>步骤 01.此处以离线安装Forms为例, 首先查看我们部署的Nextcloud版本, 点击 头像 -&gt; 关于 -&gt; 将会显示实例版本号 (此处我的实践环境是 V23.0.0)</p><p>步骤 02.访问NextCloud商店中<a href="https://apps.nextcloud.com/apps/forms" target="_blank" rel="noopener">forms插件地址</a>, 找到尾部的<code>Downloads</code>下载对应实例版本支持的forms插件版本，例如，此处下载Nextcloud 23 版本对应 V2.5.1 版本的 forms 插件。</p><blockquote><p>下载地址：<a href="https://github.com/nextcloud/forms/releases/download/v2.5.1/forms.tar.gz" target="_blank" rel="noopener">https://github.com/nextcloud/forms/releases/download/v2.5.1/forms.tar.gz</a></p></blockquote><p>步骤 03.由于进行的是离线安装，则下载完成后需要将该 forms.tar.gz 插件压缩包上传至nextcloud服务器中，此处我使用scp命令上传到家目录，然后在复制或者移动到 nextcloud 安装的apps目录中进行解压, 解压后如下图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 forms.tar.gz ubuntu@doc.weiyigeek.top:~</span><br><span class="line">cp forms.tar.gz /app/nextcloud/data/apps/</span><br><span class="line"><span class="built_in">cd</span> /app/nextcloud/data/apps/ &amp;&amp; tar -zxvf forms.tar.gz</span><br><span class="line">ls /app/nextcloud/data/apps/</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907131344.png" alt="WeiyiGeek.离线安装forms插件" title="" class="">                <p>WeiyiGeek.离线安装forms插件</p>            </figure><p>温馨提示：此处 Nextcloud 是通过 Docker 容器方式安装, 持久化的目录是<code>/app/nextcloud/data/</code>。</p><p>步骤 04.解压完成后使用浏览器访问搭建部署的 nextcloud 应用，此处我的环境地址是 doc.weiyigeek.top ，登录后点击头像 -&gt; + 应用 -&gt; 您的应用 -&gt; 启用 Forms 插件即可，如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907132145.png" alt="WeiyiGeek.启用Forms插件" title="" class="">                <p>WeiyiGeek.启用Forms插件</p>            </figure><p>步骤 05.启用后我们便可以使用Forms创建问卷调查表单了，首先点击头部菜单栏中的 表单图标 -&gt; +新表单 -&gt; 输入表单标题以及描述 -&gt; +添加一个新问题 ，如下图所示：</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907132802.png" alt="WeiyiGeek.使用Forms创建问卷调查表单" title="" class="">                <p>WeiyiGeek.使用Forms创建问卷调查表单</p>            </figure><p>步骤 06.问卷输入完成后点击右上角的共享链接，即可获得问卷调查链接（ <a href="http://doc.weiyigeek.top/apps/forms/3E9cGTcgkoXjnbWS" target="_blank" rel="noopener">http://doc.weiyigeek.top/apps/forms/3E9cGTcgkoXjnbWS</a> ）将其发送到需要统计的人员中即可。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907134430.png" alt="WeiyiGeek.问卷采集" title="" class="">                <p>WeiyiGeek.问卷采集</p>            </figure><p>步骤 07.问卷调查填写结束后,可以在<code>forms</code>表单中查看结果以及可以导出填写结果为CSV格式, 如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907134603.png" alt="WeiyiGeek.查看问卷调查结果" title="" class="">                <p>WeiyiGeek.查看问卷调查结果</p>            </figure><p>在此基础之上，我们也可以针对企业/学校需要了解员工/师生健康情况的需求，设置“每日健康上报”的系统调查表单。</p><figure class="image-box">                <img src="https://img2022.cnblogs.com/blog/2176087/202209/2176087-20220909112837800-1088211719.png" alt="每日健康上报" title="" class="">                <p>每日健康上报</p>            </figure><p>至此完毕! 希望大家玩的开心！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="私有云盘" scheme="https://blog.weiyigeek.top/categories/%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98/"/>
    
    
    <category term="NextCloud" scheme="https://blog.weiyigeek.top/tags/NextCloud/"/>
    
  </entry>
  
  <entry>
    <title>使用WebP-Server-Go无缝转换图片为Google的webp格式让你网站访问加载速度飞起来</title>
    <link href="https://blog.weiyigeek.top/2022/7-18-674.html"/>
    <id>https://blog.weiyigeek.top/2022/7-18-674.html</id>
    <published>2022-07-18T05:36:30.000Z</published>
    <updated>2022-07-30T03:48:54.086Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-快速入门"><a href="#0x00-快速入门" class="headerlink" title="0x00 快速入门"></a>0x00 快速入门</h2><h3 id="WebP-介绍"><a href="#WebP-介绍" class="headerlink" title="WebP 介绍"></a>WebP 介绍</h3><p><strong>什么是 WebP?</strong><br>WebP是由Google推出的一种全新图片文件格式，也是Telegram Stickers 主力使用的文件格式，可为 Web 上的图像提供卓越的无损和有损压缩, 它是在保证原有的图像质量前提下尽可能减少图形体积的一种格式, 使用WebP网站管理员和 Web 开发人员可以创建更小、更丰富的图像，从而使 Web 加载性能的提升更快。</p><ul><li>WebP的有损压缩算法是基于VP8视频格式的帧内编码，并以RIFF作为容器格式。 因此，它是一个具有八位色彩深度和以1:2的比例进行色度子采样的亮度-色度模型（YCbCr 4:2:0）的基于块的转换方案。不含内容的情况下，RIFF容器要求只需20字节的开销，依然能保存额外的元数据(metadata)。</li><li>WebP图像的边长限制为16383像素。</li></ul><p>在 WebP 的官网中，我们可以发现 Google 是这样宣传 WebP 的：<code>WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller than comparable JPEG images at equivalent SSIM quality index</code>.(与 PNG 相比，WebP 无损图像的大小要小 26%。在同等 SSIM 质量指数下，WebP 有损图像比可比较的 JPEG 图像小 25-34%)</p><p>通过是否对图片进行压缩，我们可以分为：</p><ul><li>无压缩。不对图片数据进行压缩处理，能准确地呈现原图片。 BMP 格式就是其中之一。</li><li>无损压缩。压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的尺寸。 png 是其中的代表。</li><li>有损压缩。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的尺寸。 其中的代表是 jpg。</li></ul><p>简单来说，WebP 图片格式的存在，让我们在 WebP 上展示的图片体积可以有较大幅度的缩小，也就带来了加载性能的提升。</p><p><br/></p><p><strong>如何创建(转换)一个webp格式图片?</strong></p><p>要生成一个 WebP 图片非常简单，只需要下载 Google 提供的 cwebp 工具，并且使用 <code>cwebp -q 70 picture_with_alpha.png -o picture_with_alpha.webp</code> 命令就可以转换了, 并且转换出来的 webp 图片比原图会小不少，但是这个是单张图片，我们的目的是让站点的图片可以无痛地以 WebP 格式输出，如果我们的博客上有 100+ 张图片转换该如何操作呢？如果是更多呢？</p><p><br></p><p><strong>需求背景</strong><br>那么开发人员如何优雅的在不替换图片地址的情况下，将图片转为 webp 格式然后输出呢？</p><blockquote><p>答: 此时可以使用 webp-sh 组织最新开源的 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">webp_server_go</a> 项目，其原理是当我们请求一张图片的时候使用 web 代理工具转发到 webp_server_go 应用进行处理，处理完成之后返回 webp 格式的图片，并且会保留处理后的图片以供后面的 Nginx Web访问。</p></blockquote><p><br></p><h3 id="Webp-Server-介绍"><a href="#Webp-Server-介绍" class="headerlink" title="Webp-Server 介绍"></a>Webp-Server 介绍</h3><p><strong>Webp-Server</strong><br>描述: WebP-Server工具，可将您的 JPG/PNG (有损压缩与无损压缩以及常用图片格式) 即时压缩为 WebP 格式，非常高效可以大幅度的减少图片体积，减少出口带宽，提高用户体验。目前支持的图片格式：JPEG、PNG、BMP、GIF（暂时为静态图片。</p><p>例如，使用Webp-Server并争取配置号Nginx代理后，当你访问 <code>https://weiyigeek.top/1.jpg</code> 时，它将作为 image/webp ，而不会更改 URL, 但对于 Safari 用户，将使用原始图像。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220726201430.png" alt="WeiyiGeek.VS WebP-Server" title="" class="">                <p>WeiyiGeek.VS WebP-Server</p>            </figure><p><br/></p><p><strong>支持多开发语言</strong><br>描述: 其实 webp server 有多种语言都实现了，并且这些仓库还都放在了 webp-sh 该 Organizations 下, 但是对于当下Go语言在编程开发语言中流行程度，官方也非常建议使用go开发的webp-server版本，并且其支持多个webp-server Feature。</p><p>Tips: WebP Server is under the GPLv3.</p><p>webp_server_go - 主要更新仓库 当前版本 (WebP Server Go 0.4.5)<br>webp_server_node - 最后更新 2020 年 7 月 6 日<br>webp_server_java - 最后更新 2020 年 3 月 6 日<br>webp_server_python - 最后更新时间 2020 年 3 月 2 日</p><p>温馨提示: 不同版本之间的比较参考地址<a href="https://docs.webp.sh/comparisons" target="_blank" rel="noopener">https://docs.webp.sh/comparisons</a>.</p><p><br/></p><p><strong>Webp-server 的当前问题?</strong></p><ul><li>Safari doesn’t support it. 不支持 Safari。</li><li>Tons of Nginx and JavaScript works. 工作需要依赖于Nginx与JavaScript。</li><li>It need a tool to transfer. 它需要一个工具来传输。</li><li>mod_pagespeed is not easy to use. mod_pagespeed 不好用。</li></ul><p><br/></p><p><strong>学习参考</strong><br>官网地址: <a href="https://webp.sh" target="_blank" rel="noopener">https://webp.sh</a><br>文档说明: <a href="https://docs.webp.sh/" target="_blank" rel="noopener">https://docs.webp.sh/</a><br>项目地址: <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">https://github.com/webp-sh/webp_server_go</a><br>下载地址: <a href="https://github.com/webp-sh/webp_server_go/releases/" target="_blank" rel="noopener">https://github.com/webp-sh/webp_server_go/releases/</a><br>WebP Cloud Services：<a href="https://webp.se/we" target="_blank" rel="noopener">https://webp.se/we</a></p><hr><h2 id="0x01-安装实践"><a href="#0x01-安装实践" class="headerlink" title="0x01 安装实践"></a>0x01 安装实践</h2><h3 id="二进制安装部署"><a href="#二进制安装部署" class="headerlink" title="二进制安装部署"></a>二进制安装部署</h3><p>描述: 此处采用 WebP 服务器的 Go 版本进行实践，此时我已经进行了Nginx的安装配置, 如没有你还安装配置安全的Nginx的读者可以浏览此篇入门文章【<a href="https://blog.weiyigeek.top/2019/9-1-121.html">1.Nginx基础介绍与安装配置实践指南 - https://blog.weiyigeek.top/2019/9-1-121.html</a>】进行学习。</p><p><strong>快速部署</strong><br>Step 1.获取 WebP server-Go 版本的二进制方式进行安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前置环境，您需要安装一些依赖项（AVIF 编码器需要它）：</span></span><br><span class="line">INSTALL_HOME=/opt/webps</span><br><span class="line">WEBP_HOST=127.0.0.1</span><br><span class="line">WEBP_PORT=3333</span><br><span class="line">WEBP_QUALITY=80</span><br><span class="line">IMG_PATH=/usr/share/nginx/html</span><br><span class="line">EXHAUST_PATH=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class="line"></span><br><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/bin/apt ];<span class="keyword">then</span></span><br><span class="line">  apt install libaom-dev -y</span><br><span class="line">  ln -s /usr/lib/x86_64-linux-gnu/libaom.so /usr/lib/x86_64-linux-gnu/libaom.so.3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/bin/yum ];<span class="keyword">then</span></span><br><span class="line">  yum install libaom-devel -y</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载、可执行权限、软连接</span></span><br><span class="line">mkdir -vp <span class="variable">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class="line">wget --no-check-certificate https://github.com/webp-sh/webp_server_go/releases/download/0.4.5/webp-server-linux-amd64-80aa8cb63a85a986f83a88579e8d2b4b -O <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class="line">chmod +x <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class="line">ln -s <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server /usr/<span class="built_in">local</span>/bin/webp-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -dump-config &gt; <span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line">sed -i -e <span class="string">"s#127.0.0.1#<span class="variable">$&#123;WEBP_HOST&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#3333#<span class="variable">$&#123;WEBP_PORT&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#80#<span class="variable">$&#123;WEBP_QUALITY&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#./pics#<span class="variable">$&#123;IMG_PATH&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#./exhaust#<span class="variable">$&#123;EXHAUST_PATH&#125;</span>#"</span> <span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动运行 webp-server 服务 (前台运行)</span></span><br><span class="line"><span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server --config=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br></pre></td></tr></table></figure></p><p><br></p><p>使用参数一览:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webp-server --<span class="built_in">help</span></span><br><span class="line">Usage of webp-server:</span><br><span class="line">  -V    Show version information.</span><br><span class="line">  -config string /path/to/config.json. (Default: ./config.json) (default <span class="string">"config.json"</span>)</span><br><span class="line">  -dump-config  Print sample config.json</span><br><span class="line">  -dump-systemd Print sample systemd service file.</span><br><span class="line">  -<span class="built_in">jobs</span> int     Prefetch thread, default is all. (default 2)</span><br><span class="line">  -prefetch     Prefetch and convert image to webp</span><br><span class="line">  -v    Verbose, <span class="built_in">print</span> out debug info.</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727111423.png" alt="WeiyiGeek.Start webp-server 服务" title="" class="">                <p>WeiyiGeek.Start webp-server 服务</p>            </figure><p>温馨提示: webp-server 默认生成的<code>config.json</code>配置文件实例及其参数解释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /opt/webps/config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="string">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="string">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="string">"IMG_PATH"</span>: <span class="string">"/usr/share/nginx/html"</span>,</span><br><span class="line">  <span class="string">"EXHAUST_PATH"</span>: <span class="string">"/opt/webps/cache"</span>,</span><br><span class="line">  <span class="string">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>],</span><br><span class="line">  <span class="string">"ENABLE_AVIF"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>HOST：一般不修改。</li><li>PORT：webp_server_go 的运行端口。</li><li>QUALITY：转换质量，默认为 80%。</li><li>IMG_PATH：固定格式，可以为 <code>/usr/share/nginx/html</code> 目录路径 或者 Remote Backend 站点 <code>&quot;IMG_PATH&quot;: &quot;https://test.webp.sh&quot;</code></li><li>EXHAUST_PATH：固定格式，/运行 Halo 的用户名/.halo/cache</li><li>ALLOWED_TYPES：需要转换的格式</li></ul><p>温馨提示: 默认情况下<code>&quot;ENABLE_AVIF&quot;: false</code>是禁用 AVIF 支持，因为将图像转换为 AVIF 会消耗 CPU。<br>温馨提示: 使用 <code>prefetch</code> 参数会将您的所有图像转换为 WebP, 如果要在预取时控制要使用的线程，请添加 -jobs=4, 默认情况下它将使用您所有的 CPU 内核。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地 CPU 内核数</span></span><br><span class="line">$ lscpu  | grep <span class="string">"^CPU(s)"</span></span><br><span class="line">CPU(s):   2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 webp 预取时使用的内核数</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -prefetch -<span class="built_in">jobs</span>=1 --config=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line">  <span class="comment"># INFO[2022-07-27 11:47:25][153:main.convertLog()] WebP@80.00%: /usr/local/app/weiyigeek/img/wechat-search.png-&gt;/opt/webps/cache/img/wechat-search.png.1647996506.webp 32641-&gt;12416 38.04% deflated</span></span><br></pre></td></tr></table></figure><p><br/></p><p>Step 2.当然也可使用systemd来管理webp服务，好在 webp 为我们提供标准的 systemd 服务文件, 可使用如下命令进行生成与配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -dump-systemd &gt; /lib/systemd/system/webp-server.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> webp-server.service</span><br><span class="line">systemctl start webp-server.service</span><br></pre></td></tr></table></figure><p>温馨提示: 使用 <code>-dump-systemd</code> 参数生成的配置文件，其中默认的 webp-server 路径为 <code>/opt/webps/webp-server</code>，并且配置文件路径为 <code>/opt/webps/config.json</code>，如果你的安装路径不是上述安装路径请更改<code>/lib/systemd/system/webp-server.service</code>中对应路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat /lib/systemd/system/webp-server.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=WebP Server Go</span><br><span class="line">Documentation=https://github.com/webp-sh/webp_server_go</span><br><span class="line">After=nginx.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">StandardError=journal</span><br><span class="line">WorkingDirectory=/opt/webps</span><br><span class="line">ExecStart=/opt/webps/webp-server --config /opt/webps/config.json</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>扩展补充: 使用Supervisor托管启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[program:webpserver]</span><br><span class="line"><span class="built_in">command</span>=/your/webservergo/path/webp-server-linux-amd64 --config=/your/webservergo/path/config.json</span><br><span class="line">directory=/your/webservergo/path</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=3</span><br><span class="line">startretries=3</span><br><span class="line">stdout_logfile=/your/<span class="built_in">log</span>/path/webpserver.out.log</span><br><span class="line">stderr_logfile=/your/<span class="built_in">log</span>/path/webpserver.err.log</span><br><span class="line">stdout_logfile_maxbytes=2MB</span><br><span class="line">stderr_logfile_maxbytes=2MB</span><br><span class="line">user=root</span><br><span class="line">priority=999</span><br><span class="line">numprocs=1</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br></pre></td></tr></table></figure><p><br></p><p>Step 3.Nginx 配置示例只允许图像发送到 WebP Server Go，其他扩展应该只发送原始文件，让您的 Nginx 访问图片后端代理到 <code>proxy_pass http://localhost:3333/</code>，你的 webp-server 就可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># static.conf</span></span><br><span class="line"><span class="comment"># https - static.weiyigeek.top</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  listen       443 ssl http2;</span><br><span class="line">  server_name  static.weiyigeek.top;</span><br><span class="line"></span><br><span class="line">  charset utf-8;</span><br><span class="line">  access_log /var/<span class="built_in">log</span>/nginx/static/static.log custom buffer=128k flush=3m;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># CORS</span></span><br><span class="line">  add_header Access-Control-Allow-Origin <span class="string">'*.weiyigeek.top'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET,POST'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># HSTS</span></span><br><span class="line">  add_header Strict-Transport-Security <span class="string">"max-age=15768000;includeSubDomains;preload"</span> always;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># XXS-Protection</span></span><br><span class="line">  add_header X-XSS-Protection <span class="string">"1; mode=block"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ssl 证书</span></span><br><span class="line">  ssl_certificate      /root/.acme.sh/weiyigeek.top_ecc/fullchain.cer;</span><br><span class="line">  ssl_certificate_key  /root/.acme.sh/weiyigeek.top_ecc/weiyigeek.top.key;</span><br><span class="line">  ssl_session_cache    shared:MozSSL:10m;</span><br><span class="line">  ssl_session_timeout  1d;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;</span><br><span class="line">  ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 访问规则</span></span><br><span class="line">  location ~* \.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:3333;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_hide_header X-Powered-By;</span><br><span class="line">    proxy_set_header HOST <span class="variable">$http_host</span>;</span><br><span class="line">    add_header Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果您的网站使用 CDN（如 Cloudflare），我们建议您添加一个私有标头以防止 Cloudflare 缓存这些图像，如下例所示</span></span><br><span class="line">  location ^~ /wp-content/uploads/ &#123;</span><br><span class="line">    add_header Cache-Control <span class="string">'private'</span>;</span><br><span class="line">    proxy_pass http://127.0.0.1:3333;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查并重载Nginx配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件是否有问题</span></span><br><span class="line">nginx -t </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载 Nginx 配置</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p><p>温馨提示: 上述配置中我添加了Nginx安全方面的配置，如果你只是测试验证则可以取消上述ssl等安全配置。</p><p><br></p><p>Step 4.重载 nginx 后查看源站图片相应头与通过webp-server图片响应头的区别。</p><ul><li>源站图片地址: <a href="https://www.weiyigeek.top/img/wechat-search.png" target="_blank" rel="noopener">https://www.weiyigeek.top/img/wechat-search.png</a></li><li>webp格式图片地址:  <a href="https://static.weiyigeek.top/img/wechat-search.png" target="_blank" rel="noopener">https://static.weiyigeek.top/img/wechat-search.png</a></li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727142451.png" alt="WeiyiGeek.webp-server images" title="" class="">                <p>WeiyiGeek.webp-server images</p>            </figure><p>温馨提示: WebP Server Go 将呈现以下标头<code>etag</code>和<code>x-compression-rate</code>作为响应, 前者格式为<code>W/&quot;&lt;content length&gt;-&lt;CRC Checksum of the file&gt;&quot;</code>,而后者格式为 <code>size(webp_image)/size(original_image)</code> 如果超过1则返回原图。</p><p><br></p><p>Step 5.我们还可以在webp服务器中支持多路径，仅仅只需要一个创建链接符号 ,例如：<code>ln -s  /app/weiyigeek.gitee.io/img/ /usr/share/nginx/html/blog/</code>，然后在分别访问如下验证区别。</p><ul><li>源站图片地址: <a href="https://blog.weiyigeek.top/img/banner.jpg">https://blog.weiyigeek.top/img/banner.jpg</a></li><li>webp格式图片地址: <a href="https://static.weiyigeek.top/blog/banner.jpg" target="_blank" rel="noopener">https://static.weiyigeek.top/blog/banner.jpg</a></li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727143937.png" alt="WeiyiGeek.webp-server banner" title="" class="">                <p>WeiyiGeek.webp-server banner</p>            </figure><p>从上述两个对比结果中可以看到使用webp-server转换后的图片体积直线下降, 此处以<code>banner.jpg</code>图片文件为例，可以看到从原图98K下降到了17.57K。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原图大小 (98K)</span></span><br><span class="line">$ ls -alh banner.jpg</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 98K Apr 13 20:40 banner.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx Gzip 源站图片大小 80.57KB ~ (原图 98KB) 下载于：220 毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Webp 格式图片大小  17.57 KB ~ (18 kB) 下载于：187 毫秒</span></span><br><span class="line">$ ls /opt/webps/cache/blog</span><br><span class="line">-rw-r--r-- 1 root root  18K Jul 27 14:33 banner.jpg.1649853609.webp</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h3><p>描述: 如果要运行 webp-server insider docker 容器，可以运行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker command</span></span><br><span class="line">docker run -d -p 3333:3333 -v /path/to/pics:/opt/pics --name webp-server webpsh/webp-server-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">tee docker-compose.yml &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  webp:</span><br><span class="line">    image: webpsh/webp-server-go</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./path/to/pics:/opt/pics</span><br><span class="line">      - ./path/to/exhaust:/opt/exhaust</span><br><span class="line">      - ./config.json:/etc/config.json</span><br><span class="line">    ports:</span><br><span class="line">      -  127.0.0.1:3333:3333</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          memory: 200M</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><br></p><hr><h2 id="0x02-博客网站图片资源访问优化实践"><a href="#0x02-博客网站图片资源访问优化实践" class="headerlink" title="0x02 博客网站图片资源访问优化实践"></a>0x02 博客网站图片资源访问优化实践</h2><p>描述: 此处我利用自己的博客网站 (<a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a>) 进行将使用webp_server_go，将网站中的图片优化前后的访问情况进行对比。</p><p>步骤 01.首先将webp_server的config.json文件中<code>IMG_PATH</code>指向我们的博客在Linux中的绝对地址目录，随后重启webp-server.service.</p><p><br/></p><p>步骤 02.然后修改Nginx中针对博客站点的配置(<code>/usr/local/nginx/conf.d/blog.conf</code>)，将图片访问全都代理到本地的3333端口(127.0.0.1:3333)，修改后重载nginx;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ more /usr/<span class="built_in">local</span>/nginx/conf.d/blog.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问规则 (关键部分)</span></span><br><span class="line">location ~* \.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:3333;</span><br><span class="line">  proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  proxy_hide_header X-Powered-By;</span><br><span class="line">  proxy_set_header HOST <span class="variable">$http_host</span>;</span><br><span class="line">  add_header Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置核验 &amp; 重载Nginx</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><br/></p><p>步骤 03.当Nginx重载后我们便可观察开启webp_server访问后端图片与直接访问后端图片网站访问速度的区别（在开启前我已经进行相应的测试截图）。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220728130434.png" alt="WeiyiGeek.优化后访问速度VS" title="" class="">                <p>WeiyiGeek.优化后访问速度VS</p>            </figure><p>从图中我们可以得出在未使用<code>webp_server</code>进行图片转换时其传输的字节数以及完成耗时，都要大于开启<code>webp_server</code>图片转换的站点。</p><p><br/></p><p>步骤 04.为了更加直观的展示 Web 站点性能如何，我们可以使用 Google 的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> 进行分析，并按照分析结果中的优化推荐进行操作。</p><p>站点性能结果地址: <a href="https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top" target="_blank" rel="noopener">https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top</a></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220728131209.png" alt="WeiyiGeek.PageSpeed Insights result" title="" class="">                <p>WeiyiGeek.PageSpeed Insights result</p>            </figure><p>从上述图中可看到左边图为优化前、而右边图则优化后的结果，可知引入 WebP Server Go 可以无缝转换图片为 WebP，可以让站点图片加载速度更快，并且无需更改现有网站上图片资源路径，极大的方便各位博客以及网站站长。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="网站优化" scheme="https://blog.weiyigeek.top/categories/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="webp_server_go" scheme="https://blog.weiyigeek.top/tags/webp-server-go/"/>
    
  </entry>
  
  <entry>
    <title>9.Nginx实践之使用MaxMind的GeoIP2实现处理不同国家或城市的访问最佳实践指南</title>
    <link href="https://blog.weiyigeek.top/2022/7-3-678.html"/>
    <id>https://blog.weiyigeek.top/2022/7-3-678.html</id>
    <published>2022-07-03T07:34:30.000Z</published>
    <updated>2022-08-12T02:38:24.410Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本章目录</strong></p><p>[TOC]</p><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述: 为了实现根据访问者访问我们的网站时根据其IP显示其所属地，也为获取不同地区访问者的IP地址等相关信息为目的，所以在搜索引擎中查找解决方案，在网络上查询到如下几种方案<code>Nginx+GeoIP2、使用收费 IP 识别接口、DNS 根据地域解析</code>，然后经过多方面考究，最终还是使用Nginx+GeoIP2解决方案。</p><a id="more"></a><p><strong>三种解决方案优缺点</strong></p><ul><li><p>[x] Nginx + GeoIP2<br>可以拿到请求 IP 的国家和城市信息然后进行各种个性化 Nginx 配置<br>可以将请求 IP 的地理位置通过 php-fpm 传递 php 程序<br>定时更新 MaxMind 免费数据库（<code>GeoLite2-Country.mmdb + GeoLite2-City.mmdb</code>）完成完美闭环<br>maxmind 公司 2002 年成立至今，靠谱</p></li><li><p>[ ] 使用 IP 识别接口：稳定的需要收费（也不能保证 100% 高可用：限频、响应时间、接口异常等因素），免费的无法保证稳定性，接口远远没有将 GeoLite 数据放在本地稳定</p></li><li><p>[ ] DNS 根据地域解析：cloudflare 收费略贵，国内 cloudxns 已关闭免费服务（免费的东西说变就变，论 planB 的重要性）</p></li></ul><p><br></p><p>所有在本章中，我将向您展示如何搭建与配置一个有效的 Nginx 和 Max Mind GeoIP2/GeoLite2 设置。 从安装部署包的下载、编译安装步骤以及命令使用、包括安装过程中可能会遇到的坑，在最后博主也通过几个实践例子，展示如何使用 GeoIP2 按国家/地区限制对某些 URL 的访问。 </p><p><br></p><p><strong>TIPS:</strong> MaxMind GeoIP 已经被弃用了一段时间。 对于您最新的地理定位需求，请改用 MaxMind GeoIP2（或免费版本的 GeoLite2）。<br><strong>TIPS:</strong> 当前网上大部分Nginx + GeoIP 的教程都是 GeoIP 老版本的已经不适用了当前最新版本的Nginx二进制编译安装，你可参照本章更快的进行实践使用。</p><p><strong>TIPS:</strong> GeoUP 依赖 MaxMind 的 IP 数据，需要频繁更新，所以我们在安装配置后也实现了使用<code>crontab</code>服务，针对其国家城市数据库进行自动化脚本定时更新配置。</p><p>好了，不多说了，下面直接开始实践吧！</p><hr><h2 id="0x01-安装部署"><a href="#0x01-安装部署" class="headerlink" title="0x01 安装部署"></a>0x01 安装部署</h2><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>环境一览:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 宿主机系统</span></span><br><span class="line">$ uname -a</span><br><span class="line">113-Ubuntu SMP Thu Feb 3 18:43:29 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">$ cat /etc/issue.net</span><br><span class="line">Ubuntu 20.04.1 LTS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用软件</span></span><br><span class="line">nginx-1.22.0.tar.gz</span><br><span class="line">libmaxminddb-1.6.0.tar.gz</span><br><span class="line">ngx_http_geoip2_module-3.4.tar.gz</span><br><span class="line">GeoLite2-City_20220802.tar.gz</span><br><span class="line">GeoLite2-Country_20220802.tar.gz</span><br></pre></td></tr></table></figure></p><p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, 请大家疯狂的 star 。<br>加固脚本地址:【 <a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p><p style='color:red'> 为了节省大家的实践时间，我已经把需要用到的源码包上传到空间中，有需要的朋友可以看一下，下载地址: <a href="http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）" target="_blank" rel="noopener">http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）</a><br><br/><br>温馨提示: 如提示证书不对，请点击高级继续访问即可.<br></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220806093220.png" alt="WeiyiGeek.Nginx及其模块下载" title="" class="">                <p>WeiyiGeek.Nginx及其模块下载</p>            </figure><p>原文地址: <a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a></p><p><br/></p><h3 id="libmaxminddb-下载"><a href="#libmaxminddb-下载" class="headerlink" title="libmaxminddb 下载"></a>libmaxminddb 下载</h3><p>描述: 首先安装 libmaxminddb 库，其提供了一个用于读取<code>MaxMind DB</code>文件的C库，包括来自MaxMind的GeoIP2数据库。这是一种自定义二进制格式，旨在促进 IP 地址的快速查找，同时允许在与地址关联的数据类型方面具有极大的灵活性。</p><p>项目地址: <a href="https://github.com/maxmind/libmaxminddb" target="_blank" rel="noopener">https://github.com/maxmind/libmaxminddb</a><br>下载构建:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://github.com/maxmind/libmaxminddb/releases/download/1.6.0/libmaxminddb-1.6.0.tar.gz</span><br><span class="line">tar -zxvf libmaxminddb-1.6.0.tar.gz &amp;&amp; <span class="built_in">cd</span> libmaxminddb-1.6.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">tee -a /etc/ld.so.conf.d/libc.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="comment"># libc default configuration</span></span><br><span class="line">/usr/<span class="built_in">local</span>/lib</span><br><span class="line">EOF</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure></p><p><br></p><p>或使用apt命令进行安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate</span><br></pre></td></tr></table></figure></p><p>上面安装的软件包是：</p><ul><li>libmaxminddb0 libmaxminddb-dev – MaxMind 地理定位数据库</li><li>mmdb-bin – 二进制。 从命令行调用的程序。 使用此命令手动定位 IP。</li><li>geoipupdate – 帮助配置和更新 GeoIP2 / GeoLite2 的软件包。 </li></ul><p><br/></p><h3 id="ngx-http-geoip2-module-下载"><a href="#ngx-http-geoip2-module-下载" class="headerlink" title="ngx_http_geoip2_module 下载"></a>ngx_http_geoip2_module 下载</h3><p>描述: 下载 ngx_http_geoip2_module 使用基于客户端 IP（默认）或特定变量（同时支持 IPv4 和 IPv6）的 <code>maxmind geoip2</code> 数据库中的值创建变量，该模块现在支持nginx流，并且可以以与http模块相同的方式使用。</p><p>项目地址: <a href="https://github.com/leev/ngx_http_geoip2_module/" target="_blank" rel="noopener">https://github.com/leev/ngx_http_geoip2_module/</a><br>下载构建:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://github.com/leev/ngx_http_geoip2_module/archive/refs/tags/3.4.tar.gz -O /usr/<span class="built_in">local</span>/src/ngx_http_geoip2_module-3.4.tar.gz</span><br><span class="line">tar -zxf ngx_http_geoip2_module-3.4.tar.gz &amp;&amp; ls ngx_http_geoip2_module-3.4/</span><br><span class="line">  <span class="comment"># config  LICENSE  ngx_http_geoip2_module.c  ngx_stream_geoip2_module.c  README.md</span></span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>Geoip2 模块语法</strong><br>语法示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP</span></span><br><span class="line">http &#123;</span><br><span class="line">  ...</span><br><span class="line">  geoip2 /etc/maxmind-country.mmdb &#123;</span><br><span class="line">    auto_reload 5m;</span><br><span class="line">    <span class="variable">$geoip2_data_country_code</span> default=US <span class="built_in">source</span>=<span class="variable">$variable_with_ip</span> country iso_code;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Stream</span></span><br><span class="line">stream &#123;</span><br><span class="line">  ...</span><br><span class="line">  geoip2 /etc/maxmind-country.mmdb &#123;</span><br><span class="line">    auto_reload 5m;</span><br><span class="line">    <span class="variable">$geoip2_data_country_code</span> default=US <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country iso_code;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数说明: </p><ul><li><p><code>auto_reload &lt;interval&gt;</code>: 启用自动重新加载将使 nginx 以指定的时间间隔检查数据库的修改时间，如果发生更改则重新加载。</p></li><li><p><code>$variable_name [default=&lt;value] [source=$variable_with_ip] path ...</code>: 如果没有指定【default】参数，则如果未找到该变量将为空，如果没有指定【source】参数 $remote_addr 将用于执行查找。</p></li></ul><p><br/></p><p>从上面语法格式中您是否是一片茫然，不管你是不是反正我第一次看到就茫然了，那 <code>country iso_code</code> 关键字又是从何而来?</p><p>为了解决上面这个疑问，我们在来看看如下操作。 </p><p><br></p><p><strong>mmdblookup 命令</strong><br>描述: 在前面编译安装<code>libmaxminddb</code>库后，我们便可以使用 mmdblookup 工具，查找所需数据的路径（例如：国家/地区名称），以JSON格式返回的，其中continent（洲） 、country (国家) 、registered_country（已注册的国家）对象包含了<code>code/geoname_id/names</code>键：</p><p>GeoLite2-Country.mmdb 库只带有 country 相关数据样本输出<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">$ mmdblookup --file ./GeoLite2-Country.mmdb --ip 223.6.6.6</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"continent"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"code"</span>:</span><br><span class="line">        <span class="string">"AS"</span> &lt;utf8_string&gt;</span><br><span class="line">      <span class="string">"geoname_id"</span>:</span><br><span class="line">        <span class="number">6255147</span> &lt;uint32&gt;</span><br><span class="line">      <span class="string">"names"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"de"</span>:</span><br><span class="line">            <span class="string">"Asien"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"en"</span>:</span><br><span class="line">            <span class="string">"Asia"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"es"</span>:</span><br><span class="line">            <span class="string">"Asia"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"fr"</span>:</span><br><span class="line">            <span class="string">"Asie"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ja"</span>:</span><br><span class="line">            <span class="string">"アジア"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"pt-BR"</span>:</span><br><span class="line">            <span class="string">"Ásia"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ru"</span>:</span><br><span class="line">            <span class="string">"Азия"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"zh-CN"</span>:</span><br><span class="line">            <span class="string">"亚洲"</span> &lt;utf8_string&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="string">"country"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"geoname_id"</span>:</span><br><span class="line">        <span class="number">1814991</span> &lt;uint32&gt;</span><br><span class="line">      <span class="string">"iso_code"</span>:</span><br><span class="line">        <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line">      <span class="string">"names"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"de"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"en"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"es"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"fr"</span>:</span><br><span class="line">            <span class="string">"Chine"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ja"</span>:</span><br><span class="line">            <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"pt-BR"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ru"</span>:</span><br><span class="line">            <span class="string">"Китай"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"zh-CN"</span>:</span><br><span class="line">            <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="string">"registered_country"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"geoname_id"</span>:</span><br><span class="line">        <span class="number">1814991</span> &lt;uint32&gt;</span><br><span class="line">      <span class="string">"iso_code"</span>:</span><br><span class="line">        <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line">      <span class="string">"names"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"de"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"en"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"es"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"fr"</span>:</span><br><span class="line">            <span class="string">"Chine"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ja"</span>:</span><br><span class="line">            <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"pt-BR"</span>:</span><br><span class="line">            <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"ru"</span>:</span><br><span class="line">            <span class="string">"Китай"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"zh-CN"</span>:</span><br><span class="line">            <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>GeoLite2-City.mmdb 库带有 country City 相关数据样本输出 (一般推荐使用该库)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"city"</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"geoname_id"</span>:</span><br><span class="line">          <span class="number">1808926</span> &lt;uint32&gt;</span><br><span class="line">        <span class="string">"names"</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"de"</span>:</span><br><span class="line">              <span class="string">"Hangzhou"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"en"</span>:</span><br><span class="line">              <span class="string">"Hangzhou"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"es"</span>:</span><br><span class="line">              <span class="string">"Hangzhou"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"fr"</span>:</span><br><span class="line">              <span class="string">"Hangzhou"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ja"</span>:</span><br><span class="line">              <span class="string">"杭州市"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"pt-BR"</span>:</span><br><span class="line">              <span class="string">"Hangzhou"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ru"</span>:</span><br><span class="line">              <span class="string">"Ханчжоу"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"zh-CN"</span>:</span><br><span class="line">              <span class="string">"杭州"</span> &lt;utf8_string&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="string">"continent"</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"code"</span>:</span><br><span class="line">          <span class="string">"AS"</span> &lt;utf8_string&gt;</span><br><span class="line">        <span class="string">"geoname_id"</span>:</span><br><span class="line">          <span class="number">6255147</span> &lt;uint32&gt;</span><br><span class="line">        <span class="string">"names"</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"de"</span>:</span><br><span class="line">              <span class="string">"Asien"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"en"</span>:</span><br><span class="line">              <span class="string">"Asia"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"es"</span>:</span><br><span class="line">              <span class="string">"Asia"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"fr"</span>:</span><br><span class="line">              <span class="string">"Asie"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ja"</span>:</span><br><span class="line">              <span class="string">"アジア"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"pt-BR"</span>:</span><br><span class="line">              <span class="string">"Ásia"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ru"</span>:</span><br><span class="line">              <span class="string">"Азия"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"zh-CN"</span>:</span><br><span class="line">              <span class="string">"亚洲"</span> &lt;utf8_string&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="string">"country"</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"geoname_id"</span>:</span><br><span class="line">          <span class="number">1814991</span> &lt;uint32&gt;</span><br><span class="line">        <span class="string">"iso_code"</span>:</span><br><span class="line">          <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line">        <span class="string">"names"</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"de"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"en"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"es"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"fr"</span>:</span><br><span class="line">              <span class="string">"Chine"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ja"</span>:</span><br><span class="line">              <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"pt-BR"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ru"</span>:</span><br><span class="line">              <span class="string">"Китай"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"zh-CN"</span>:</span><br><span class="line">              <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="string">"location"</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"accuracy_radius"</span>:</span><br><span class="line">          <span class="number">1000</span> &lt;uint16&gt;</span><br><span class="line">        <span class="string">"latitude"</span>:</span><br><span class="line">          <span class="number">30.299400</span> &lt;double&gt;</span><br><span class="line">        <span class="string">"longitude"</span>:</span><br><span class="line">          <span class="number">120.161200</span> &lt;double&gt;</span><br><span class="line">        <span class="string">"time_zone"</span>:</span><br><span class="line">          <span class="string">"Asia/Shanghai"</span> &lt;utf8_string&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="string">"registered_country"</span>:</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"geoname_id"</span>:</span><br><span class="line">          <span class="number">1814991</span> &lt;uint32&gt;</span><br><span class="line">        <span class="string">"iso_code"</span>:</span><br><span class="line">          <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line">        <span class="string">"names"</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"de"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"en"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"es"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"fr"</span>:</span><br><span class="line">              <span class="string">"Chine"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ja"</span>:</span><br><span class="line">              <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"pt-BR"</span>:</span><br><span class="line">              <span class="string">"China"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"ru"</span>:</span><br><span class="line">              <span class="string">"Китай"</span> &lt;utf8_string&gt;</span><br><span class="line">            <span class="string">"zh-CN"</span>:</span><br><span class="line">              <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="string">"subdivisions"</span>:</span><br><span class="line">      [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"geoname_id"</span>:</span><br><span class="line">            <span class="number">1784764</span> &lt;uint32&gt;</span><br><span class="line">          <span class="string">"iso_code"</span>:</span><br><span class="line">            <span class="string">"ZJ"</span> &lt;utf8_string&gt;</span><br><span class="line">          <span class="string">"names"</span>:</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">"en"</span>:</span><br><span class="line">                <span class="string">"Zhejiang"</span> &lt;utf8_string&gt;</span><br><span class="line">              <span class="string">"fr"</span>:</span><br><span class="line">                <span class="string">"Province de Zhejiang"</span> &lt;utf8_string&gt;</span><br><span class="line">              <span class="string">"zh-CN"</span>:</span><br><span class="line">                <span class="string">"浙江省"</span> &lt;utf8_string&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>GeoLite2-Country.mmdb 与  GeoLite2-Country.mmdb 对比。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - 国家 ./GeoLite2-Country.mmdb 库</span></span><br><span class="line"><span class="comment"># 如果此时我只想获取 country 的名称可以这样。</span></span><br><span class="line">$ mmdblookup --file ./GeoLite2-Country.mmdb --ip 223.6.6.6 country names zh-CN</span><br><span class="line">  <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line"><span class="comment"># 当然如果你想获取国家的 iso_code 也是同样的。</span></span><br><span class="line">$ mmdblookup --file ./GeoLite2-Country.mmdb --ip 223.6.6.6 country iso_code</span><br><span class="line">  <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 国家、城市库 ./GeoLite2-Country.mmdb 库</span></span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 country names zh-CN</span><br><span class="line">  <span class="string">"中国"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 country iso_code</span><br><span class="line">  <span class="string">"CN"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 continent names zh-CN</span><br><span class="line">  <span class="string">"亚洲"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 subdivisions 0 names zh-CN</span><br><span class="line">  <span class="string">"浙江省"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 subdivisions 0 names iso_code</span><br><span class="line">  <span class="string">"ZJ"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 city names zh-CN</span><br><span class="line">  <span class="string">"杭州"</span> &lt;utf8_string&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 location longitude <span class="comment"># 经度  </span></span><br><span class="line">  120.161200 &lt;double&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 location latitude  <span class="comment"># 纬度</span></span><br><span class="line">  30.299400  &lt;double&gt;</span><br><span class="line">$ mmdblookup --file ./GeoLite2-City.mmdb --ip 223.6.6.6 location time_zone <span class="comment"># 时区</span></span><br><span class="line">  <span class="string">"Asia/Shanghai"</span> &lt;utf8_string&gt;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220803151840.png" alt="WeiyiGeek.mmdblookup获取mmdb库信息" title="" class="">                <p>WeiyiGeek.mmdblookup获取mmdb库信息</p>            </figure><p>上述的两个示例我们可以将其转换为 geoip2 模块定义的nginx变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如只需要国家信息建议使用该库</span></span><br><span class="line">geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-Country.mmdb &#123;</span><br><span class="line">  <span class="variable">$geoip2_data_country</span> <span class="string">"default=China"</span> <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country names en</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如需要获取国家以及省份信息建议使用该库，此处暂不演示使用，在后续实践中再进行介绍和使用。</span></span><br><span class="line">geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-City.mmdb &#123;</span><br><span class="line">  <span class="variable">$geoip2_data_country</span> <span class="string">"default=中国"</span> <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country names zh-CN;  <span class="comment"># 中国</span></span><br><span class="line">  <span class="variable">$geoip2_data_country_code</span> country iso_code;                  <span class="comment"># CN</span></span><br><span class="line">  <span class="variable">$geoip2_data_country_continent</span> continent names zh-CN;        <span class="comment"># 亚洲</span></span><br><span class="line">  <span class="variable">$geoip2_data_country_continent_code</span> continent code;          <span class="comment"># AS</span></span><br><span class="line">  <span class="variable">$geoip2_data_province_name</span> subdivisions 0 names zh-CN;       <span class="comment"># 浙江省</span></span><br><span class="line">  <span class="variable">$geoip2_data_province_isocode</span> subdivisions 0 names iso_code; <span class="comment"># "ZJ"</span></span><br><span class="line">  <span class="variable">$geoip2_data_city</span> city names zh-CN;                         <span class="comment"># 杭州</span></span><br><span class="line">  <span class="variable">$geoip2_data_city_longitude</span> location longitude;              <span class="comment"># 120.161200</span></span><br><span class="line">  <span class="variable">$geoip2_data_city_latitude</span> location latitude;                <span class="comment"># 30.299400</span></span><br><span class="line">  <span class="variable">$geoip2_data_city_time_zone</span> location time_zone;             <span class="comment"># "Asia/Shanghai"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br/></p><p>温馨提示: 当请求来自受信任的地址时，将使用“X-Forwarded-For”请求标头字段中的地址, 并且设置 <code>geoip2_proxy_recursive &lt; on | off &gt;</code> 指令。</p><ul><li>如果递归搜索被禁用，那么将使用“X-Forwarded-For”中发送的最后一个地址，而不是与一个受信任地址匹配的原始客户端地址。 </li><li>如果启用了递归搜索，那么将使用“X-Forwarded-For”中发送的最后一个非信任地址，而不是与可信地址之一匹配的原始客户端地址。</li></ul><p>模块使用参考地址：<a href="https://github.com/leev/ngx_http_geoip2_module/#example-usage" target="_blank" rel="noopener">https://github.com/leev/ngx_http_geoip2_module/#example-usage</a></p><p><br/></p><h3 id="Geoip2-模块编译动态链接库"><a href="#Geoip2-模块编译动态链接库" class="headerlink" title="Geoip2 模块编译动态链接库"></a>Geoip2 模块编译动态链接库</h3><p>描述: 有可能此时你通过源码编译方式安装 Nginx 了 ，那如何加入新的Nginx模块呢? </p><p>答: 那就是重新编译 Nginx 即可，我们不需要执行<code>make install</code>重新安装 Nginx 具体操作如下所示。</p><p>Step 1.执行<code>nginx -v</code>获取原编译构建的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.22.0</span><br><span class="line">built by gcc 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)</span><br><span class="line">built with OpenSSL 1.1.1q  5 Jul 2022</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --with-pcre=../pcre-8.45 ......  --with-ld-opt=-Wl,--as-needed,-O1,--sort-common</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 2.此处补充一点，你完全可按照自身需求使用<code>--add-module</code>进行静态链接库安装，或者使用<code>--add-dynamic-module</code>进行动态链接库安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态链接库安装模块 （绝对或者相对路径）</span></span><br><span class="line">--add-dynamic-module=../ngx_http_geoip2_module-3.4</span><br><span class="line">--add-dynamic-module=/usr/<span class="built_in">local</span>/src/ngx_http_geoip2_module-3.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态链接库生成模块</span></span><br><span class="line">--add-module=../ngx_http_geoip2_module-3.4</span><br></pre></td></tr></table></figure><p><br></p><p>Step 3.将步骤1获取的参数加入到<code>./configure</code>, 并在末尾添加上<code>--add-dynamic-module=/usr/local/src/ngx_http_geoip2_module-3.4</code>, 以重新构建支持 geoip2 模块的 nginx 二进制文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.22.0/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预编译参数</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-pcre=../pcre-8.45 --with-zlib=../zlib-1.2.12 --with-openssl=../openssl-1.1.1q --sbin-path=/usr/sbin/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --lock-path=/var/run/nginx.lock --modules-path=/usr/<span class="built_in">local</span>/nginx/modules --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-threads --with-http_sub_module --with-http_v2_module --with-http_auth_request_module --with-http_realip_module --with-http_secure_link_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_ssl_module --with-http_slice_module --with-http_stub_status_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module --with-mail --with-mail_ssl_module --with-http_addition_module --with-http_random_index_module --with-compat --with-file-aio --with-cc-opt=<span class="string">'-Os -fomit-frame-pointer -g'</span> --with-ld-opt=-Wl,-rpath,/usr/<span class="built_in">local</span>/luajit/lib,--as-needed,-O1,--sort-common --add-module=/usr/<span class="built_in">local</span>/src/ngx_devel_kit-0.3.1 --add-module=/usr/<span class="built_in">local</span>/src/lua-nginx-module-0.10.21 --add-dynamic-module=/usr/<span class="built_in">local</span>/src/<span class="built_in">echo</span>-nginx-module-0.62 --add-dynamic-module=/usr/<span class="built_in">local</span>/src/ngx_http_geoip2_module-3.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译构建</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译后将会在objs目录生成动态链接库，我们需复制到 /usr/local/nginx/modules</span></span><br><span class="line">$ ls objs/*.so</span><br><span class="line">  objs/ngx_http_geoip2_module.so  objs/ngx_stream_geoip2_module.so</span><br><span class="line">$ cp -a objs/*.so /usr/<span class="built_in">local</span>/nginx/modules</span><br><span class="line">$ ls /usr/<span class="built_in">local</span>/nginx/modules</span><br><span class="line">ngx_http_echo_module.so  ngx_http_geoip2_module.so  ngx_stream_geoip2_module.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后使用objs目录中生成的 nginx 二进制文件覆盖 /usr/sbin/nginx</span></span><br><span class="line">$ cp -a objs/nginx /usr/sbin/nginx</span><br><span class="line">$ make upgrade </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后执行此命令验证安装是否成功</span></span><br><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p><br></p><h3 id="GeoLite2-数据库下载"><a href="#GeoLite2-数据库下载" class="headerlink" title="GeoLite2 数据库下载"></a>GeoLite2 数据库下载</h3><p>描述: Nginx 的 <code>ngx_*_geoip2_module</code> 模块依赖于 GeoLite2 数据库, 免费的 GeoLite2 数据库可从 Maxminds 网站获得（需要注册），GeoLite2 数据库基于 IP 地址的数据库和 Web 服务，提供有关地理位置、人口统计和用户以及匿名者的数据。</p><p>如果你想下载与更新 GeoLite2 数据库,您需要拥有 MaxMind 帐户 ID 和许可证密钥, 并且当我们在 nginx 中使用则该 GeoIP2 模块，在我们请求时Nginx时根据IP地址来识别来源国家城市，但是我们需要提前下载载该数据库.</p><p>简单流程: 首先访问 <code>Maxminds</code> 官网，然后注册登陆到用户后台，创建并获取 <code>License Key</code>, 最后下载 GeoLite2 数据库该压缩包，里面包含的是二进制mmdb格式的库文件。</p><p>Maxminds 官网地址: <a href="https://maxmind.com" target="_blank" rel="noopener">https://maxmind.com</a><br>GeoIP2 Web 服务演示（每天25次限额）：<a href="https://www.maxmind.com/en/geoip2-precision-demo?ip_address=223.6.6.6" target="_blank" rel="noopener">https://www.maxmind.com/en/geoip2-precision-demo?ip_address=223.6.6.6</a><br>Locate My IP Address : <a href="https://www.maxmind.com/en/locate-my-ip-address" target="_blank" rel="noopener">https://www.maxmind.com/en/locate-my-ip-address</a></p><p>如果无法登录官网或者你不想注册登陆，也可以下载博主已经从官网下载好的 GeoIP2 数据库。</p><p style='color:red'> GeoLite2 数据库下载地址: <a href="http://share.weiyigeek.top/d/36158960-50280983-746907" target="_blank" rel="noopener">http://share.weiyigeek.top/d/36158960-50280983-746907</a><br>(访问密码: 2088)<br><br/><br>温馨提示: 如提示证书不对，请点击高级继续访问即可.<br></p><p><br/></p><p><strong>实践流程</strong></p><p>Step 1.访问并登陆maxmind.com官网，此处我已经注册了账号，就不在演示如何注册了，如果没有注册的朋友可以安装如下提示进行注册(<a href="https://support.maxmind.com/hc/en-us/articles/4407099783707-Create-an-Account)，相信大家都没问题。" target="_blank" rel="noopener">https://support.maxmind.com/hc/en-us/articles/4407099783707-Create-an-Account)，相信大家都没问题。</a></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220803111300.png" alt="WeiyiGeek.maxmind注册" title="" class="">                <p>WeiyiGeek.maxmind注册</p>            </figure><p><br/></p><p>Step 2.登陆后点击 Account 用户-&gt; Manage License Keys 管理许可 -&gt; 生成许可，然后将会看见 <code>New license key successfully created</code> 提示，其中请记录号 Account/User ID 与 License key ，以备后续使用。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220803111107.png" alt="WeiyiGeek.Manage License Keys" title="" class="">                <p>WeiyiGeek.Manage License Keys</p>            </figure><p><br/></p><p>Step 3.随后点击右边的<code>GeoIP2</code>选项卡中的 <code>Download Files</code>, 你可安装需要下载 <code>Country 国家</code> 或者 <code>City 城市</code>的数据，上述下载连接中我们已经下载了如图中的两个压缩包。</p><p>官方下载地址: <code>https://www.maxmind.com/en/accounts/&lt;your user account id&gt;/geoip/downloads</code></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220803111528.png" alt="WeiyiGeek.官方下载 GeoIP2 数据库" title="" class="">                <p>WeiyiGeek.官方下载 GeoIP2 数据库</p>            </figure><p><br/></p><p>Step 4.下载后上传到Nginx服务器并解压到 <code>/usr/local/GeoIP2</code> 目录之中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若不存在该目录请创建</span></span><br><span class="line">mkdir -vp /usr/<span class="built_in">local</span>/GeoIP2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压数据库</span></span><br><span class="line">ls ~</span><br><span class="line">GeoLite2-City_20220802.tar.gz  GeoLite2-Country_20220802.tar.gz</span><br><span class="line">tar -zxf GeoLite2-City_20220802.tar.gz</span><br><span class="line">tar -zxf GeoLite2-Country_20220802.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 mmdb 文件复制到 /usr/local/GeoIP2 目录下</span></span><br><span class="line">mv GeoLite2-City_20220802/GeoLite2-City.mmdb /usr/<span class="built_in">local</span>/GeoIP2/</span><br><span class="line">mv GeoLite2-Country_20220802/GeoLite2-Country.mmdb /usr/<span class="built_in">local</span>/GeoIP2/</span><br><span class="line">rm -rf GeoLite2-City_20220802/ GeoLite2-Country_20220802/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看解压到 /usr/local/GeoIP2/ 后的 GeoIP2 数据库</span></span><br><span class="line">$ tree /usr/<span class="built_in">local</span>/GeoIP2/</span><br><span class="line">/usr/<span class="built_in">local</span>/GeoIP2/</span><br><span class="line">├── GeoLite2-City.mmdb</span><br><span class="line">└── GeoLite2-Country.mmdb</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 5.验证GeoIP模块部署环境,我们需要针对nginx相关配置文件进行如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.在 nginx.conf 中进行如下几个关键部分配置。</span></span><br><span class="line">$ vim nginx.conf</span><br><span class="line">worker_processes  auto;</span><br><span class="line"><span class="comment"># -- 关键点: 加载 geoip2 模块动态链接库</span></span><br><span class="line">load_module modules/ngx_http_geoip2_module.so;</span><br><span class="line">load_module modules/ngx_stream_geoip2_module.so;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># -- 关键点: 日志格式</span></span><br><span class="line">    log_format demo <span class="string">'$remote_addr - [ $geoip2_country_code $geoip2_data_city_name ] - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                <span class="string">'"$http_user_agent" "$http_x_forwarded_for" rt=$request_time urt=$upstream_response_time'</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment"># -- 关键点: geoip 模块变量绑定</span></span><br><span class="line">    geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-Country.mmdb &#123;</span><br><span class="line">      <span class="variable">$geoip2_country_code</span> country names en;</span><br><span class="line">    &#125;</span><br><span class="line">    geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-City.mmdb &#123;</span><br><span class="line">      <span class="variable">$geoip2_data_country_name</span> country names en;</span><br><span class="line">      <span class="variable">$geoip2_data_country_code</span> default=China <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country iso_code;</span><br><span class="line">      <span class="variable">$geoip2_data_city_name</span> city names en;</span><br><span class="line">      <span class="variable">$geoip2_data_province_name</span> subdivisions 0 names en;</span><br><span class="line">      <span class="variable">$geoip2_data_province_isocode</span> subdivisions 0 iso_code;</span><br><span class="line">      <span class="variable">$geoip2_continent_code</span> continent code;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.在 demo.conf 配置如下 location 以验证 GeoIP。</span></span><br><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">  <span class="comment"># -- 关键点: 访问日志设置</span></span><br><span class="line">  access_log /var/<span class="built_in">log</span>/nginx/demo-<span class="variable">$&#123;logdate&#125;</span>.<span class="built_in">log</span> demo;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># -- 关键点: 该路径显示当前请求访问地址信息</span></span><br><span class="line">  location = /api/v1/info &#123;</span><br><span class="line">     default_type text/plain;</span><br><span class="line">     <span class="built_in">return</span> 200 <span class="string">"<span class="variable">$remote_addr</span>\n geoip2_country_code=<span class="variable">$geoip2_country_code</span>\n geoip2_data_country_name=<span class="variable">$geoip2_data_country_name</span> \n geoip2_data_country_code=<span class="variable">$geoip2_data_country_code</span> \n geoip2_data_city_name=<span class="variable">$geoip2_data_city_name</span> \n geoip2_continent_code=<span class="variable">$geoip2_continent_code</span> \n geoip2_data_province_name=<span class="variable">$geoip2_data_province_name</span> \n geoip2_data_province_isocode=<span class="variable">$geoip2_data_province_isocode</span>"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 6.配置完成后检查nginx配置并重载nginx执行如下命令即可 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后使用浏览器进行访问 <code>http://demo.weiyigeek.top/api/v1/info</code> 验证，将会输入如下信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">222.177.***.***</span><br><span class="line"> geoip2_country_code=China</span><br><span class="line"> geoip2_data_country_name=China </span><br><span class="line"> geoip2_data_country_code=CN </span><br><span class="line"> geoip2_data_city_name= </span><br><span class="line"> geoip2_continent_code=AS </span><br><span class="line"> geoip2_data_province_name= </span><br><span class="line"> geoip2_data_province_isocode=</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220803131616.png" alt="WeiyiGeek.nginx中使用geoip2模块验证" title="" class="">                <p>WeiyiGeek.nginx中使用geoip2模块验证</p>            </figure><p>至此，GeoIP2 模块的所需环境的搭建就完毕了，更多模块示例请参考 <code>ngx_http_geoip2_module</code> 文档 , 下一章节将进行实战讲解该模块的使用。</p><p><br/></p><h3 id="GeoLite2-数据库自动更新"><a href="#GeoLite2-数据库自动更新" class="headerlink" title="GeoLite2 数据库自动更新"></a>GeoLite2 数据库自动更新</h3><p>描述: 为了保证数据库中国家与城市的准确性，我们需要设置cron定时任务来更新MaxMind提供的<code>GeoLite2-Country.mmdb</code>或者<code>GeoLite2-City.mmdb</code>数据库库, 以保证其数据库保持最新。</p><p><br/></p><p><strong>操作流程</strong></p><p>Step 1.使用apt命令帮助配置和更新 GeoIP2 / GeoLite2 的软件包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y geoipupdate</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 2.使用文本编辑器打开并编辑位于 <code>/etc/GeoIP.conf</code> 的 <code>MaxMind GeoIP conf</code> 文件, 使用上述步骤获取的 AccountID 和 LicenseKey 字段信息填入其文件中, 之后便可执行进行地理位置数据库，操作后如下图所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tee /etc/GeoIP.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">AccountID 696302</span><br><span class="line">LicenseKey ycm3xq02oE7QXMOw</span><br><span class="line">EditionIDs GeoLite2-Country GeoLite2-City</span><br><span class="line">DatabaseDirectory /usr/<span class="built_in">local</span>/GeoIP2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">ls -alh /usr/<span class="built_in">local</span>/GeoIP2  <span class="comment"># 手动更新前</span></span><br><span class="line">geoipupdate --stack-trace</span><br><span class="line">ls -alh /usr/<span class="built_in">local</span>/GeoIP2  <span class="comment"># 手动更新后</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220805130137.png" alt="WeiyiGeek.手动更新GeoLite2数据库" title="" class="">                <p>WeiyiGeek.手动更新GeoLite2数据库</p>            </figure><p><br/></p><ul><li>Step 3.为了方便运维管理我们可以创建定时任务自动更新，提高工作效率。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询执行文件绝对路径</span></span><br><span class="line">$ <span class="built_in">which</span> geoipupdate</span><br><span class="line">/usr/bin/geoipupdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每周天的凌晨更新数据库</span></span><br><span class="line">$ crontab -e</span><br><span class="line">0 * * * 6 /usr/<span class="built_in">local</span>/bin/geoipupdate &gt; /var/<span class="built_in">log</span>/geoipupdate.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>官网更新参考地址: <a href="https://dev.maxmind.com/geoip/updating-databases?lang=en" target="_blank" rel="noopener">https://dev.maxmind.com/geoip/updating-databases?lang=en</a>.</p><hr><h2 id="0x02-实践使用"><a href="#0x02-实践使用" class="headerlink" title="0x02 实践使用"></a>0x02 实践使用</h2><h3 id="1-使用GeoIP2模块请求客户端的IP地址国家省份经纬度展示"><a href="#1-使用GeoIP2模块请求客户端的IP地址国家省份经纬度展示" class="headerlink" title="1.使用GeoIP2模块请求客户端的IP地址国家省份经纬度展示"></a>1.使用GeoIP2模块请求客户端的IP地址国家省份经纬度展示</h3><p>描述: 本次实践将根据请求者的国家显示中文或者英文的IP地址位置等相关信息在网页上，通过前面的学习，我们知道 geoip2 在检索有关 geoip 数据库的元数据时，其语法格式为 <code>$variable_name metadata &lt;field&gt;</code>, </p><p><strong>实践流程</strong></p><ul><li>Step 1.编辑Nginx.conf主配置文件在 http 片段中，自定义定义访问日志格式后加入如下两个 geoip2 指令片段。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  .....</span><br><span class="line">  geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-Country.mmdb &#123;</span><br><span class="line">    <span class="comment"># 启用自动重新加载将使 nginx 以指定的时间间隔检查数据库的修改时间，如果发生更改则重新加载。</span></span><br><span class="line">    auto_reload 7d;</span><br><span class="line">    <span class="variable">$geoip2_country_code</span> country names en;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  geoip2 /usr/<span class="built_in">local</span>/GeoIP2/GeoLite2-City.mmdb &#123;</span><br><span class="line">    <span class="comment"># 中国IP访问都显示中文</span></span><br><span class="line">    <span class="variable">$geoip2_data_country</span> <span class="string">"default=中国"</span> <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country names zh-CN;  <span class="comment"># 中国</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_code</span> country iso_code;                  <span class="comment"># CN</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_continent</span> continent names zh-CN;        <span class="comment"># 亚洲</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_continent_code</span> continent code;          <span class="comment"># AS</span></span><br><span class="line">    <span class="variable">$geoip2_data_province_name</span> subdivisions 0 names zh-CN;       <span class="comment"># 浙江省</span></span><br><span class="line">    <span class="variable">$geoip2_data_province_isocode</span> subdivisions 0 names iso_code; <span class="comment"># "ZJ"</span></span><br><span class="line">    <span class="variable">$geoip2_data_city</span> city names zh-CN;                          <span class="comment"># 杭州</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_longitude</span> location longitude;              <span class="comment"># 120.161200</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_latitude</span> location latitude;                <span class="comment"># 30.299400</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_time_zone</span> location time_zone;              <span class="comment"># "Asia/Shanghai"</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 中国以外的访问都是显示英文</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_en</span> <span class="string">"default=United States"</span> <span class="built_in">source</span>=<span class="variable">$remote_addr</span> country names en;  <span class="comment"># United States</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_code</span> country iso_code;                     <span class="comment"># US</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_continent_en</span> continent names en;           <span class="comment"># North America</span></span><br><span class="line">    <span class="variable">$geoip2_data_country_continent_code</span> continent code;             <span class="comment"># NA</span></span><br><span class="line">    <span class="variable">$geoip2_data_province_name_en</span> subdivisions 0 names en;          <span class="comment"># ""</span></span><br><span class="line">    <span class="variable">$geoip2_data_province_isocode</span> subdivisions 0 names iso_code;    <span class="comment"># ""</span></span><br><span class="line">    <span class="variable">$geoip2_data_city</span> city names en;                                <span class="comment"># 杭州</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_longitude</span> location longitude;                 <span class="comment"># 120.161200</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_latitude</span> location latitude;                   <span class="comment"># 30.299400</span></span><br><span class="line">    <span class="variable">$geoip2_data_city_time_zone</span> location time_zone;                 <span class="comment"># "Asia/Shanghai"</span></span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">  </span><br><span class="line">  map <span class="variable">$geoip2_data_country_code</span> <span class="variable">$CN</span> &#123;</span><br><span class="line">    CN yes;</span><br><span class="line">    TW yes;</span><br><span class="line">    HK yes;</span><br><span class="line">    MO yes;</span><br><span class="line">    default no;       </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 2.同样编辑<code>conf.d/demo.conf</code>, 此处使用虚拟主机头(demo.weiyigeek.top)做演, 加入如下指令片段，其主要作用是根据区其地区，使用中英文显示请求者IP地理位置信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ vim conf.d/demo.conf</span><br><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># 精准匹配</span></span><br><span class="line">  location = /api/v1/ip &#123;</span><br><span class="line">    <span class="comment"># 当访问者IP来自 `CN|TW|HK|MO` 时将会以json的形式进行返回中文的IP地址信息。</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$geoip2_data_country_code</span> ~* (CN|TW|HK|MO) )&#123;</span><br><span class="line">      rewrite (.*)  /api/v1/ip/cn last;</span><br><span class="line">    &#125;</span><br><span class="line">    rewrite (.*) /api/v1/ip/en last;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 中文显示</span></span><br><span class="line">  location /api/v1/ip/cn &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">    <span class="built_in">return</span> 200 <span class="string">'&#123;"ip":"$remote_addr","country":&#123;"name": "$geoip2_data_country", "iso_code":  "$geoip2_data_country_code", "continent": "$geoip2_data_country_continent","continent_code": "$geoip2_data_country_continent_code"&#125;,"province":&#123;"name":"$geoip2_data_province_name","iso_code":"$geoip2_data_province_isocode"&#125;,"city":&#123;"name":"$geoip2_data_city","timezone":"$geoip2_data_city_time_zone"&#125;,"location":&#123;"longitude":"$geoip2_data_city_longitude","latitude":"$geoip2_data_city_latitude"&#125;&#125;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 英文显示</span></span><br><span class="line">  location /api/v1/ip/en &#123;</span><br><span class="line">    default_type application/json;</span><br><span class="line">    <span class="built_in">return</span> 200 <span class="string">'&#123;"ip":"$remote_addr","country":&#123;"name": "$geoip2_data_country_en", "iso_code":  "$geoip2_data_country_code", "continent": "$geoip2_data_country_continent_en","continent_code": "$geoip2_data_country_continent_code"&#125;,"province":&#123;"name":"$geoip2_data_province_name_en","iso_code":"$geoip2_data_province_isocode"&#125;,"city":&#123;"name":"$geoip2_data_city","timezone":"$geoip2_data_city_time_zone"&#125;,"location":&#123;"longitude":"$geoip2_data_city_longitude","latitude":"$geoip2_data_city_latitude"&#125;&#125;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>Step 3.配置 nginx 核验与重载 nginx 服务, 此处使用不同的网络使用浏览器进行访问<code>https://demo.weiyigeek.top/api/v1/ip</code>验证, 结果如下图所示:。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t &amp;&amp; nginx -s reload</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220804142610.png" alt="WeiyiGeek.中英文显示IP地址信息" title="" class="">                <p>WeiyiGeek.中英文显示IP地址信息</p>            </figure><p><br/></p><h3 id="2-使用GeoIP2模块静止某一国家地区的IP地址访问网站"><a href="#2-使用GeoIP2模块静止某一国家地区的IP地址访问网站" class="headerlink" title="2.使用GeoIP2模块静止某一国家地区的IP地址访问网站"></a>2.使用GeoIP2模块静止某一国家地区的IP地址访问网站</h3><p>描述: 为了减少国外的攻击，我们可以将指定的地区IP访问进行放行，除此之外的全部拒绝。</p><p><strong>实际流程:</strong></p><ul><li>Step 1.在 nginx.conf 中添加 map 指令并进行如下配置, 预定义了可以访问网站的地区。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">....</span><br><span class="line">  map <span class="variable">$geoip2_data_country_code</span> <span class="variable">$allow_visit</span> &#123;</span><br><span class="line">    CN yes;</span><br><span class="line">    TW yes;</span><br><span class="line">    HK yes;</span><br><span class="line">    MO yes;</span><br><span class="line">    default no;</span><br><span class="line">  &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>温馨提示:<br>1) map 指令是由ngx_http_map_module模块提供的,默认情况下安装 nginx 都会安装该模块.<br>2) map 的主要作用是’创建自定义变量’,通过使用 nginx 的’内置’变量,去’匹配’某些特定规则; 如果匹配成功则设置某个值给自定义变量,而这个’自定义变量’又可以’用作他用’。</p><p><br></p><ul><li>Step 2.在demo.conf配置文件中添加一个访问验证的示例。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问该页面如果$allow_visit变量不为yes则返回403页面,否则返回访问者的IP地区信息。</span></span><br><span class="line">location /allow/html &#123;</span><br><span class="line">  default_type text/html;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$allow_visit</span> != yes ) &#123;</span><br><span class="line">    <span class="built_in">return</span> 403 <span class="string">"IP [ <span class="variable">$remote_addr</span> ] 禁止访问! &lt;br&gt; <span class="variable">$remote_addr</span> - <span class="variable">$geoip2_data_country</span> - <span class="variable">$geoip2_data_country_code</span> - <span class="variable">$geoip2_data_country_continent</span>"</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">return</span> 200 <span class="string">"欢迎IP为 [ <span class="variable">$remote_addr</span> ] 用户进行访问! &lt;br&gt; <span class="variable">$remote_addr</span> - <span class="variable">$geoip2_data_country</span> - <span class="variable">$geoip2_data_country_code</span> - <span class="variable">$geoip2_data_country_continent</span>"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><ul><li>Step 3.同样修改完成后，我们需要针对nginx配置核验与重新加载配置 <code>nginx -t &amp;&amp; nginx -s reload</code> （PS: 后续将不再提示了，想必大家都聊熟于心了）, ，之后分别使用工具进行访问验证，结果如下所示。</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220804150600.png" alt="WeiyiGeek.allow ip visit" title="" class="">                <p>WeiyiGeek.allow ip visit</p>            </figure><hr><h3 id="3-使用GeoIP2模块实现不同国家访问进入不同目录页面"><a href="#3-使用GeoIP2模块实现不同国家访问进入不同目录页面" class="headerlink" title="3.使用GeoIP2模块实现不同国家访问进入不同目录页面"></a>3.使用GeoIP2模块实现不同国家访问进入不同目录页面</h3><p>描述: 在某些时刻我们可能会对不同地区来源访问的客户展示不同的页面，例如国内我就显示中文的页面，而新加坡我就显示英文的页面，这样一来就更加人性化一点。</p><p><strong>示例演示</strong><br>在<code>/usr/local/nginx/html</code>目录中创建<code>ch/en</code>子目录，同时准备两个不同地区访问的测试页面:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tree /usr/<span class="built_in">local</span>/nginx/html</span><br><span class="line">├── ch</span><br><span class="line">│   └── index.html</span><br><span class="line">├── en</span><br><span class="line">│   └── index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ cat ch/index.html</span><br><span class="line">&lt;h1&gt;中文站点&lt;/h1&gt;</span><br><span class="line">&lt;iframe src=<span class="string">"https://blog.weiyigeek.top"</span> frameborder=<span class="string">"0"</span> width=<span class="string">"500"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>Nginx 配置中使用GeoIP处理访问请求。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">....</span><br><span class="line">  map <span class="variable">$geoip2_data_country_code</span> <span class="variable">$lang_ch</span> &#123;</span><br><span class="line">    CN yes;</span><br><span class="line">    TW yes;</span><br><span class="line">    HK yes;</span><br><span class="line">    MO yes;</span><br><span class="line">    default no;</span><br><span class="line">  &#125;</span><br><span class="line">....</span><br><span class="line"> server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  demo.weiyigeek.top;</span><br><span class="line">    location / &#123;</span><br><span class="line">      <span class="built_in">set</span> <span class="variable">$rootpath</span> html/ch; <span class="comment"># 关键点设置一个根目录变量。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$lang_ch</span> = no) &#123; </span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$rootpath</span> html/en;</span><br><span class="line">      &#125;</span><br><span class="line">      add_header program-path <span class="variable">$rootpath</span>; <span class="comment"># 关键点写入到响应头中。</span></span><br><span class="line">      add_header country-code <span class="variable">$geoip2_data_country_code</span>;</span><br><span class="line">      root <span class="variable">$rootpath</span>;</span><br><span class="line">      index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问结果: </p><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220804194143.png" alt="WeiyiGeek.GeoIP2处理不同国家的请求"></p><hr><h2 id="0x0n-入坑出坑"><a href="#0x0n-入坑出坑" class="headerlink" title="0x0n 入坑出坑"></a>0x0n 入坑出坑</h2><h3 id="问题1-非二进制方式安装Nginx-GeoIP过程中可能会出现的错误问题如下，也帮大家列举出解决办法。"><a href="#问题1-非二进制方式安装Nginx-GeoIP过程中可能会出现的错误问题如下，也帮大家列举出解决办法。" class="headerlink" title="问题1.非二进制方式安装Nginx GeoIP过程中可能会出现的错误问题如下，也帮大家列举出解决办法。"></a>问题1.非二进制方式安装Nginx GeoIP过程中可能会出现的错误问题如下，也帮大家列举出解决办法。</h3><p>错误信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">错误1：./configure: error: C compiler cc is not found。</span><br><span class="line">错误2：./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">错误3：./configure: error: the HTTP gzip module requires the zlib library.</span><br><span class="line">错误4：./configure: error: the HTTP XSLT module requires the libxml2/libxslt。</span><br><span class="line">错误5：./configure: error: the HTTP image filter module requires the GD library.</span><br><span class="line">错误6：./configure: error: SSL modules require the OpenSSL library.</span><br></pre></td></tr></table></figure></p><p>解决办法: <code>sudo apt install gcc libpcre3 libpcre3-dev zlib1g-dev libxslt-dev libgd-dev libssl-dev</code></p><h3 id="问题2-如果在进行Nginx编译时出现-configure-error-the-GeoIP-module-requires-the-GeoIP-library-You-can-either-do-not-enable-the-module-or-install-the-library-问题提示时解决方法。"><a href="#问题2-如果在进行Nginx编译时出现-configure-error-the-GeoIP-module-requires-the-GeoIP-library-You-can-either-do-not-enable-the-module-or-install-the-library-问题提示时解决方法。" class="headerlink" title="问题2: 如果在进行Nginx编译时出现 ./configure: error: the GeoIP module requires the GeoIP library.You can either do not enable the module or install the library. 问题提示时解决方法。"></a>问题2: 如果在进行Nginx编译时出现 <code>./configure: error: the GeoIP module requires the GeoIP library.You can either do not enable the module or install the library.</code> 问题提示时解决方法。</h3><p>解决方式: 可以执行如下命令<code>apt install -y libgeoip-dev</code>命令进行解决。</p><p>原文地址: <a href="https://blog.weiyigeek.top/2022/7-3-678.html">https://blog.weiyigeek.top/2022/7-3-678.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;本章目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;描述: 为了实现根据访问者访问我们的网站时根据其IP显示其所属地，也为获取不同地区访问者的IP地址等相关信息为目的，所以在搜索引擎中查找解决方案，在网络上查询到如下几种方案&lt;code&gt;Nginx+GeoIP2、使用收费 IP 识别接口、DNS 根据地域解析&lt;/code&gt;，然后经过多方面考究，最终还是使用Nginx+GeoIP2解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="运维实践" scheme="https://blog.weiyigeek.top/categories/%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Nginx" scheme="https://blog.weiyigeek.top/tags/Nginx/"/>
    
    <category term="webp" scheme="https://blog.weiyigeek.top/tags/webp/"/>
    
  </entry>
  
  <entry>
    <title>8.Nginx实践之请求图片转换为Google推出的webp格式转换工具实践</title>
    <link href="https://blog.weiyigeek.top/2022/7-3-677.html"/>
    <id>https://blog.weiyigeek.top/2022/7-3-677.html</id>
    <published>2022-07-03T05:34:30.000Z</published>
    <updated>2022-08-10T08:04:43.606Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本章目录</strong></p><p>[TOC]</p><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述: 最近公司业务中有这么一个需求就是在保证图像的清晰度的情况下, 减少其体积大小使得减轻外部请求流量带宽对网关的请访问压力，同时提高用户访问体验。所以在进行前期需求、运维成本等综合分析后，还是建议将图片格式转为Google推出的一种现代图像格式 Webp，考虑到 WebP图片已经是一种趋势了，现在已经有很知名的网站支持了这种格式的图片，当然你也可以使用 Google 出品的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式(比较吃配置)。</p><p>所以本章将主要针对webp格式的转换的相关命令进行实践使用，如果不想使用 Nginx+PageSpeed 模块，我们也可使用 Nginx+Lua 脚本针对请求非webp格式的图片进行自动转换后，并按照指定的分辨率进行显示。</p><a id="more"></a><p><br/></p><h3 id="WebP-介绍"><a href="#WebP-介绍" class="headerlink" title="WebP 介绍"></a>WebP 介绍</h3><p><strong>An image format for the Web</strong><br>描述: WebP 由Google推出的一种现代图像格式，可为Web上的图像提供卓越的无损和有损压缩。与PNG相比WebP无损图像的尺寸小26%，WebP有损图像比同等SSIM质量指数下的同类JPEG图像小25-34%, 而无损 WebP 支持透明度（也称为 alpha 通道），而额外字节数仅为 22%。对于可接受有损 RGB 压缩的情况，有损 WebP 还支持透明度，通常提供比 PNG 小三倍的文件大小。</p><p>温馨提示: 目前支持 <code>PNG / JPEG / GIF /PNM (PGM, PPM, PAM),/ TIFF</code>等图片格式转换为webp格式。</p><p>官网地址: <a href="https://developers.google.com/speed/webp" target="_blank" rel="noopener">https://developers.google.com/speed/webp</a></p><p><br/> </p><p><strong>Webp 有何优点?</strong></p><blockquote><p>答: 使用WebP，网站管理员和Web开发人员可以创建更小，更丰富的图像，从而使Web解析访问更快。<br>WebP 可在 <code>Google Chrome，Safari，Firefox，Edge，Opera</code> 等主流浏览器以及许多其他工具和软件库(C/C++/Go/Python)中得到原生支持。</p></blockquote><p><br/></p><p><strong>WebP 是如何工作的?</strong></p><blockquote><p>答： 有损WebP压缩使用预测编码对图像进行编码，与VP8视频编解码器压缩视频中关键帧的方法相同, 预测编码使用相邻像素块中的值来预测块中的数值，然后仅对差值进行编码。<br>而无损WebP压缩使用已经看到的图像片段，以便准确地重建新像素，如果没有发现有趣的匹配，它也可以使用本地调色板。</p></blockquote><p><strong>TIPS:</strong> WebP文件由VP8或VP8L图像数据以及基于RIFF的容器组成.</p><hr><h2 id="0X01-部署安装"><a href="#0X01-部署安装" class="headerlink" title="0X01 部署安装"></a>0X01 部署安装</h2><h3 id="实践环境说明"><a href="#实践环境说明" class="headerlink" title="实践环境说明"></a>实践环境说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统</span></span><br><span class="line">~$ cat /etc/issue.net</span><br><span class="line">Ubuntu 20.04.3 LTS</span><br><span class="line">~$ uname -a</span><br><span class="line">Linux weiyigeek.top 5.4.0-92-generic <span class="comment">#103-Ubuntu SMP Fri Nov 26 16:13:00 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件</span></span><br><span class="line">libwebp-1.2.3.tar.gz</span><br></pre></td></tr></table></figure><p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, 请大家疯狂的 star 。<br>加固脚本地址:【 <a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p><p style='color:red'> 为了节省大家的实践时间，我已经把需要用到的源码包上传到空间中，有需要的朋友可以看一下，下载地址: <a href="http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）" target="_blank" rel="noopener">http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）</a><br><br/>温馨提示: 如提示证书不对，请点击高级继续访问即可.</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220806093220.png" alt="WeiyiGeek.Nginx及其模块下载" title="" class="">                <p>WeiyiGeek.Nginx及其模块下载</p>            </figure><p><br/></p><h3 id="WebP-工具库安装"><a href="#WebP-工具库安装" class="headerlink" title="WebP 工具库安装"></a>WebP 工具库安装</h3><p>Webp 包括轻量级编码和解码库libwebp[^libwebp]和命令行工具[cwebp][^cwebp]和[dwebp][^dwebp]，用于将多种互联网图像与WebP格式相互转换，以及用于查看，复用和动画化WebP图像的工具，完整的源代码可在<a href="https://developers.google.com/speed/webp/download" target="_blank" rel="noopener">下载页面</a>上获得。</p><p>除此之外，我们还可下载适用于Linux、Windows或macOS的预编译cwebp转换工具（<a href="https://developers.google.com/speed/webp/docs/precompiled），将您喜爱的收藏从PNG和JPEG转换为WebP。" target="_blank" rel="noopener">https://developers.google.com/speed/webp/docs/precompiled），将您喜爱的收藏从PNG和JPEG转换为WebP。</a></p><p><br/></p><h4 id="二进制包方式安装"><a href="#二进制包方式安装" class="headerlink" title="二进制包方式安装"></a>二进制包方式安装</h4><p>描述: 用于Linux、Windows和macOS的预编译WebP实用程序和库。它们包括：</p><ul><li>libwebp 库 : 可用于将WebP编码或解码添加到程序中 (windows/Linux)。</li><li><a href="https://developers.google.com/speed/webp/docs/cwebp" target="_blank" rel="noopener">cwebp</a> : WebP编码器工具</li><li><a href="https://developers.google.com/speed/webp/docs/dwebp" target="_blank" rel="noopener">dwebp</a> : WebP解码器工具</li><li><a href="https://developers.google.com/speed/webp/docs/vwebp" target="_blank" rel="noopener">vwebp</a> : WebP文件查看器</li><li><a href="https://developers.google.com/speed/webp/docs/webpmux" target="_blank" rel="noopener">webpmux</a> : WebP复用工具</li><li><a href="https://developers.google.com/speed/webp/docs/gif2webp" target="_blank" rel="noopener">gif2webp</a>: 用于将GIF图像转换为WebP的工具</li></ul><p><br></p><p><strong>系统软件源方式</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian、Ubuntu</span></span><br><span class="line">sudo apt-get install webp</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install libwebp-tools webp</span><br></pre></td></tr></table></figure></p><p><br/></p><h4 id="源代码编译方式安装"><a href="#源代码编译方式安装" class="headerlink" title="源代码编译方式安装"></a>源代码编译方式安装</h4><p>描述: libwebp 是谷歌官方提供的webp格式图片parser以及解码的库，以下记录在Ubuntu 20.04编译<code>libwebp</code>及其安装webp相关工具的过程。</p><p>项目地址: <a href="https://github.com/webmproject/libwebp" target="_blank" rel="noopener">https://github.com/webmproject/libwebp</a><br>下载地址: <a href="https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html" target="_blank" rel="noopener">https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html</a></p><p>Step 1.要从<code>source code</code>进行构建，我们首先必须下载源码的压缩包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget -c https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.3.tar.gz </span><br><span class="line">tar -zxf libwebp-1.2.3.tar.gz  &amp;&amp; <span class="built_in">cd</span> libwebp-1.2.3/</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 2.在Ubuntu系统中安装编译libwebp前以及webp相关工具编译构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prerequisites: a compiler (e.g., gcc), make, autoconf, automake, libtool.</span></span><br><span class="line">apt install -y gcc make autoconf automake libtool</span><br><span class="line"><span class="comment"># support webp、jpeg、tiff、gif</span></span><br><span class="line">apt install -y libwebp-dev libjpeg-dev libpng-dev libtiff-dev libgif-dev </span><br><span class="line"><span class="comment"># support vwebp</span></span><br><span class="line">apt install -y freeglut3-dev mesa-common-dev </span><br><span class="line"><span class="comment"># 预编译参数</span></span><br><span class="line">./configure --<span class="built_in">enable</span>-libwebpdecoder --<span class="built_in">enable</span>-libwebpextras  --<span class="built_in">enable</span>-swap-16bit-csp</span><br><span class="line"><span class="comment"># 自动编译构建</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220731112616.png" alt="WeiyiGeek.build libwebp" title="" class="">                <p>WeiyiGeek.build libwebp</p>            </figure><p><strong>温馨提示:</strong> 当你从git源代码构建时需要运行autogen.sh生成配置脚本 (When building from git sources, you will need to run autogen.sh to generate the<br>configure script.)</p><p><strong>温馨提示:</strong> 如果在执行时出现如下错误 <code>cwebp: error while loading shared libraries: libwebpdemux.so.2: cannot open shared object file: No such file or directory</code>，我们可以执行如下命令进行解决该问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/local/lib"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/lib</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">tee -a /etc/ld.so.conf.d/libc.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="comment"># libc default configuration</span></span><br><span class="line">/usr/<span class="built_in">local</span>/lib</span><br><span class="line">EOF</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 3.在完成后您应该在如下目录中<code>/usr/local/bin/</code>，使用ls命令查看下述几个命令.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/<span class="built_in">local</span>/bin/*webp*</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/cwebp</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/dwebp</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/gif2webp</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/vwebp</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webpmux</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/img2webp  </span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webpinfo</span><br></pre></td></tr></table></figure></p><p><strong>命令介绍</strong>:</p><ul><li>cwebp: 用于将jpeg、png或TIFF编码格式图片转为webp格式图片。(可以理解为编码)</li><li>dwebp: 用于将webp格式图片转换为png格式图片</li><li>vwebp: 用于播放webp动图和静图的工具</li><li>webpmux: 用于 WebP复用工具</li><li>gif2webp：用于将GIF图像转换为WebP的工具</li><li>img2webp：用于从一系列输入图像创建动画WebP文件。</li><li>webpinfo: 打印WebP文件的区块级结构以及基本的完整性检查。</li></ul><p><br></p><p>Step 4.验证安装的相关工具并进行查看其版本号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ cwebp -version</span><br><span class="line">1.2.3</span><br><span class="line">~$ dwebp -version</span><br><span class="line">1.2.3</span><br></pre></td></tr></table></figure><p>好的，二进制部署在此处实践部署到此就结束了。</p><p><br/></p><p>补充说明: 其它发行版可以从源码进行编译构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (1) tiff 扩展图像格式的支持 </span></span><br><span class="line">apt install -y libtiff-dev</span><br><span class="line">http://download.osgeo.org/libtiff/</span><br><span class="line">wget -c http://download.osgeo.org/libtiff/tiff-4.4.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># (2) gif 图像格式的一个核心库,用于处理GIF的库和实用程序,giflib是一个用于读取和写入gif图像的库。</span></span><br><span class="line">apt install -y libgif-dev</span><br><span class="line">https://sourceforge.net/projects/giflib/files/latest/download</span><br><span class="line">wget -c https://onboardcloud.dl.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz</span><br></pre></td></tr></table></figure><hr><h2 id="0x02-工具命令浅析"><a href="#0x02-工具命令浅析" class="headerlink" title="0x02 工具命令浅析"></a>0x02 工具命令浅析</h2><h3 id="cwebp-命令-转换-webp-图片格式"><a href="#cwebp-命令-转换-webp-图片格式" class="headerlink" title="cwebp 命令 - 转换 webp 图片格式"></a>cwebp 命令 - 转换 webp 图片格式</h3><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage:</span></span><br><span class="line"> cwebp [-preset &lt;...&gt;] [options] in_file [-o out_file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line">  -q &lt;<span class="built_in">float</span>&gt; ............. quality factor (0:small..100:big), default=75 <span class="comment"># 图形质量</span></span><br><span class="line">  -alpha_q &lt;int&gt; ......... transparency-compression quality (0..100),</span><br><span class="line">                           default=100</span><br><span class="line">  -preset &lt;string&gt; ....... preset setting, one of:</span><br><span class="line">                            default, photo, picture,</span><br><span class="line">                            drawing, icon, text</span><br><span class="line">     -preset must come first, as it overwrites other parameters</span><br><span class="line">  -z &lt;int&gt; ............... activates lossless preset with given</span><br><span class="line">                           level <span class="keyword">in</span> [0:fast, ..., 9:slowest]</span><br><span class="line"></span><br><span class="line">  -m &lt;int&gt; ............... compression method (0=fast, 6=slowest), default=4</span><br><span class="line">  -segments &lt;int&gt; ........ number of segments to use (1..4), default=4</span><br><span class="line">  -size &lt;int&gt; ............ target size (<span class="keyword">in</span> bytes)                             <span class="comment"># 目标尺寸</span></span><br><span class="line">  -psnr &lt;<span class="built_in">float</span>&gt; .......... target PSNR (<span class="keyword">in</span> dB. typically: 42)                 <span class="comment"># 目标PSN</span></span><br><span class="line">  -s &lt;int&gt; &lt;int&gt; ......... input size (width x height) <span class="keyword">for</span> YUV</span><br><span class="line">  -sns &lt;int&gt; ............. spatial noise shaping (0:off, 100:max), default=50 <span class="comment"># 空间噪声整形</span></span><br><span class="line">  -f &lt;int&gt; ............... filter strength (0=off..100), default=60           <span class="comment"># 过滤器强度</span></span><br><span class="line">  -sharpness &lt;int&gt; ....... filter sharpness (0:most .. 7:least sharp), default=0</span><br><span class="line">  -strong ................ use strong filter instead of simple (default)</span><br><span class="line">  -nostrong .............. use simple filter instead of strong</span><br><span class="line">  -sharp_yuv ............. use sharper (and slower) RGB-&gt;YUV conversion</span><br><span class="line">  -partition_limit &lt;int&gt; . <span class="built_in">limit</span> quality to fit the 512k <span class="built_in">limit</span> on the first partition (0=no degradation ... 100=full)</span><br><span class="line">  -pass &lt;int&gt; ............ analysis pass number (1..10)</span><br><span class="line">  -qrange &lt;min&gt; &lt;max&gt; .... specifies the permissible quality range(default: 0 100)</span><br><span class="line">  -crop &lt;x&gt; &lt;y&gt; &lt;w&gt; &lt;h&gt; .. crop picture with the given rectangle</span><br><span class="line">  -resize &lt;w&gt; &lt;h&gt; ........ resize picture (*after* any cropping)             <span class="comment"># 调整图片大小（*任意裁剪后）</span></span><br><span class="line">  -mt .................... use multi-threading <span class="keyword">if</span> available</span><br><span class="line">  -low_memory ............ reduce memory usage (slower encoding)</span><br><span class="line">  -map &lt;int&gt; ............. <span class="built_in">print</span> map of extra info</span><br><span class="line">  -print_psnr ............ prints averaged PSNR distortion</span><br><span class="line">  -print_ssim ............ prints averaged SSIM distortion</span><br><span class="line">  -print_lsim ............ prints <span class="built_in">local</span>-similarity distortion</span><br><span class="line">  -d &lt;file.pgm&gt; .......... dump the compressed output (PGM file)</span><br><span class="line">  -alpha_method &lt;int&gt; .... transparency-compression method (0..1), default=1</span><br><span class="line">  -alpha_filter &lt;string&gt; . predictive filtering <span class="keyword">for</span> alpha plane,one of: none, fast (default) or best</span><br><span class="line">  -exact ................. preserve RGB values <span class="keyword">in</span> transparent area, default=off</span><br><span class="line">  -blend_alpha &lt;hex&gt; ..... blend colors against background color</span><br><span class="line">                           expressed as RGB values written <span class="keyword">in</span></span><br><span class="line">                           hexadecimal, e.g. 0xc0e0d0 <span class="keyword">for</span> red=0xc0</span><br><span class="line">                           green=0xe0 and blue=0xd0</span><br><span class="line">  -noalpha ............... discard any transparency information</span><br><span class="line">  -lossless .............. encode image losslessly, default=off <span class="comment"># 无损编码图像，默认为关闭</span></span><br><span class="line">  -near_lossless &lt;int&gt; ... use near-lossless image preprocessing (0..100=off), default=100</span><br><span class="line">  -hint &lt;string&gt; ......... specify image characteristics hint,one of: photo, picture or graph <span class="comment"># 指定图像特征提示，图片、图片或图形之一</span></span><br><span class="line">  -metadata &lt;string&gt; ..... comma separated list of metadata tocopy from the input to the output <span class="keyword">if</span> present. Valid values: all, none (default), exif, icc, xmp</span><br><span class="line"></span><br><span class="line">  -short ................. condense printed message</span><br><span class="line">  -quiet ................. don\<span class="string">'t print anything</span></span><br><span class="line"><span class="string">  -version ............... print version number and exit</span></span><br><span class="line"><span class="string">  -noasm ................. disable all assembly optimizations</span></span><br><span class="line"><span class="string">  -v ..................... verbose, e.g. print encoding/decoding times</span></span><br><span class="line"><span class="string">  -progress .............. report encoding progress</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Experimental Options:</span></span><br><span class="line"><span class="string">  -jpeg_like ............. roughly match expected JPEG size</span></span><br><span class="line"><span class="string">  -af .................... auto-adjust filter strength</span></span><br><span class="line"><span class="string">  -pre &lt;int&gt; ............. pre-processing filter</span></span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>实践案例:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.图形质量为75，将 picture.png 转换为 picture.webp</span></span><br><span class="line">$ cwebp -o picture.webp -- picture.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.图形质量为80，将 pictimageure.png 转换为 image.webp</span></span><br><span class="line">$ cwebp -q 80 image.png -o image.webp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.空间噪声整形为70，过滤器强度为50，尺寸大小为 60000 bytes</span></span><br><span class="line">$ cwebp -sns 70 -f 50 -size 60000 image.png -o image.webp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.无损压缩 wechat-search.png 为 wechat-search.png</span></span><br><span class="line">$ cwebp -lossless wechat-search.png -o image_lossless.webp</span><br><span class="line">  <span class="comment"># Saving file 'image_lossless.webp'</span></span><br><span class="line">  <span class="comment"># File:      wechat-search.png</span></span><br><span class="line">  <span class="comment"># Dimension: 438 x 200</span></span><br><span class="line">  <span class="comment"># Output:    16582 bytes (1.51 bpp)</span></span><br><span class="line">  <span class="comment"># Lossless-ARGB compressed size: 16582 bytes</span></span><br><span class="line">  <span class="comment">#   * Header size: 787 bytes, image data size: 15770</span></span><br><span class="line">  <span class="comment">#   * Lossless features used: SUBTRACT-GREEN</span></span><br><span class="line">  <span class="comment">#   * Precision Bits: histogram=3 transform=3 cache=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.调整图片大小（*任意裁剪后）</span></span><br><span class="line">$ cwebp -resize 216 100  wechat-search.png -o image_resize.webp</span><br><span class="line">  <span class="comment"># Saving file 'image_resize.webp'</span></span><br><span class="line">  <span class="comment"># File:      wechat-search.png</span></span><br><span class="line">  <span class="comment"># Dimension: 216 x 100</span></span><br><span class="line">  <span class="comment"># Output:    4246 bytes Y-U-V-All-PSNR 39.27 42.31 39.42   39.68 dB</span></span><br><span class="line">  <span class="comment">#             (1.57 bpp)</span></span><br><span class="line">  <span class="comment"># block count:  intra4:         58  (59.18%)</span></span><br><span class="line">  <span class="comment">#               intra16:        40  (40.82%)</span></span><br><span class="line">  <span class="comment">#               skipped:         9  (9.18%)</span></span><br><span class="line">  <span class="comment"># bytes used:  header:            202  (4.8%)</span></span><br><span class="line">  <span class="comment">#               mode-partition:    331  (7.8%)</span></span><br><span class="line">  <span class="comment">#   Residuals bytes  |segment 1|segment 2|segment 3|segment 4|  total</span></span><br><span class="line">  <span class="comment">#     macroblocks:  |      13%|      16%|      45%|      26%|      98</span></span><br><span class="line">  <span class="comment">#       quantizer:  |      36 |      30 |      25 |      17 |</span></span><br><span class="line">  <span class="comment">#     filter level:  |      11 |       6 |       5 |       2 |</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.遍历某一目录中的图片格式进行批量转换为.webp格式图片到某一目录。</span></span><br><span class="line"><span class="comment"># 单个文件类型转换</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(find /tmp -name *.png; <span class="keyword">do</span> png_suffix=<span class="variable">$&#123;i/.png/.webp&#125;</span>; /usr/<span class="built_in">local</span>/bin/cwebp -q 80 <span class="variable">$i</span> -o <span class="variable">$&#123;png_suffix/image/convert&#125;</span>; <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 多个文件类型转换</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(find /tmp -name *.png -o -name *.jpg -o -name *.jpeg -o -name *.tiff); <span class="keyword">do</span> </span><br><span class="line">img_pathname=<span class="variable">$&#123;i%%.*&#125;</span>; /usr/<span class="built_in">local</span>/bin/cwebp -short -q 80  <span class="variable">$i</span> -o <span class="variable">$&#123;img_pathname/image/convert&#125;</span>.webp ; </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── convert</span><br><span class="line">│   ├── 1.webp</span><br><span class="line">│   └── 2.webp</span><br><span class="line">└── image</span><br><span class="line">    ├── 1.jpg</span><br><span class="line">    └── 2.png</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="dwebp-命令-将webp格式转换为png格式-解码"><a href="#dwebp-命令-将webp格式转换为png格式-解码" class="headerlink" title="dwebp 命令 - 将webp格式转换为png格式(解码)"></a>dwebp 命令 - 将webp格式转换为png格式(解码)</h3><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Usage: dwebp in_file [options] [-o out_file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用以下选项转换为其他图像格式：</span></span><br><span class="line">  -pam ......... save the raw RGBA samples as a color PAM</span><br><span class="line">  -ppm ......... save the raw RGB samples as a color PPM</span><br><span class="line">  -bmp ......... save as uncompressed BMP format</span><br><span class="line">  -tiff ........ save as uncompressed TIFF format</span><br><span class="line">  -pgm ......... save the raw YUV samples as a grayscale PGM file with IMC4 layout</span><br><span class="line">  -yuv ......... save the raw YUV samples <span class="keyword">in</span> flat layout</span><br><span class="line"> Other options are:</span><br><span class="line">  -version ..... <span class="built_in">print</span> version number and <span class="built_in">exit</span></span><br><span class="line">  -nofancy ..... don<span class="string">'t use the fancy YUV420 upscaler</span></span><br><span class="line"><span class="string">  -nofilter .... disable in-loop filtering</span></span><br><span class="line"><span class="string">  -nodither .... disable dithering</span></span><br><span class="line"><span class="string">  -dither &lt;d&gt; .. dithering strength (in 0..100)       # 抖动强度（0..100）</span></span><br><span class="line"><span class="string">  -alpha_dither  use alpha-plane dithering if needed  # 如果需要，使用alpha平面抖动</span></span><br><span class="line"><span class="string">  -mt .......... use multi-threading                  # 使用多线程</span></span><br><span class="line"><span class="string">  -crop &lt;x&gt; &lt;y&gt; &lt;w&gt; &lt;h&gt; ... crop output with the given rectangle  # 使用给定矩形裁剪输出</span></span><br><span class="line"><span class="string">  -resize &lt;w&gt; &lt;h&gt; ......... resize output (*after* any cropping)  # 尺寸大小</span></span><br><span class="line"><span class="string">  -flip ........ flip the output vertically                       # 垂直翻转输出</span></span><br><span class="line"><span class="string">  -alpha ....... only save the alpha plane                        # 仅保存alpha平面</span></span><br><span class="line"><span class="string">  -incremental . use incremental decoding (useful for tests)</span></span><br><span class="line"><span class="string">  -v ........... verbose (e.g. print encoding/decoding times)</span></span><br><span class="line"><span class="string">  -quiet ....... quiet mode, don'</span>t <span class="built_in">print</span> anything</span><br><span class="line">  -noasm ....... <span class="built_in">disable</span> all assembly optimizations</span><br></pre></td></tr></table></figure></p><p><strong>简单示例:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.Using dwebp to Convert Images from the WebP Format</span></span><br><span class="line">dwebp image.webp -o image.png</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Decoded image.webp. Dimensions: 493 x 424 . Format: lossy. Now saving...</span></span><br><span class="line">  <span class="comment"># Saved file image.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.webp图垂直翻转输出</span></span><br><span class="line">dwebp image.webp -flip -o image.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.解码为ppm格式</span></span><br><span class="line">dwebp picture.webp -ppm -o output.ppm</span><br><span class="line">dwebp -o output.ppm -- ---picture.webp</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="gif2webp-命令-将gif格式图片转换为webp格式"><a href="#gif2webp-命令-将gif格式图片转换为webp格式" class="headerlink" title="gif2webp 命令 - 将gif格式图片转换为webp格式"></a>gif2webp 命令 - 将gif格式图片转换为webp格式</h3><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage:</span></span><br><span class="line">  gif2webp [options] gif_file -o webp_file</span><br><span class="line"><span class="comment"># Options:</span></span><br><span class="line">  -h / -<span class="built_in">help</span> ............. this <span class="built_in">help</span></span><br><span class="line">  -lossy ................. encode image using lossy compression</span><br><span class="line">  -mixed ................. 混合压缩模式：通过启发式选择每帧的有损或无损压缩来优化图像的压缩。此全局选项禁用本地选项和 -lossy、lossless。</span><br><span class="line">  -q &lt;<span class="built_in">float</span>&gt; ............. quality factor (0:small..100:big)</span><br><span class="line">  -m &lt;int&gt; ............... compression method (0=fast, 6=slowest)</span><br><span class="line">  -min_size .............. 对图像进行编码以实现最小尺寸。这将禁用关键帧插入并选取参数，从而获得每个帧的最小输出。默认情况下，它使用无损压缩，但可以与-q、-m、-lossy、-mixed选项组合使用。</span><br><span class="line">  -kmin &lt;int&gt; ............ </span><br><span class="line">  -kmax &lt;int&gt; ............ 指定输出动画中连续关键帧（可独立解码帧）之间的最小和最大距离。该工具将根据需要将一些关键帧插入到输出动画中，以便满足此条件。</span><br><span class="line">  -f &lt;int&gt; ............... filter strength (0=off..100)</span><br><span class="line">  -metadata &lt;string&gt; ..... comma separated list of metadata to copy from the input to the output <span class="keyword">if</span> present Valid values: all, none, icc, xmp (default)</span><br><span class="line">  -loop_compatibility .... 指定动画应循环的次数，使用0意味着“无限期循环”</span><br><span class="line">  -mt .................... use multi-threading <span class="keyword">if</span> available</span><br><span class="line">  -version ............... <span class="built_in">print</span> version number and <span class="built_in">exit</span></span><br><span class="line">  -v ..................... verbose</span><br><span class="line">  -quiet ................. don<span class="string">'t print anything</span></span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>简单实例:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gif2webp - converts a GIF image to a WebP image</span></span><br><span class="line">gif2webp picture.gif -o picture.webp</span><br><span class="line">gif2webp -q 70 picture.gif -o picture.webp</span><br><span class="line">gif2webp -lossy -m 3 picture.gif -o picture_lossy.webp</span><br><span class="line">gif2webp -lossy -f 50 picture.gif -o picture.webp</span><br><span class="line">gif2webp -min_size -q 30 -o picture.webp -- ---picture.gif</span><br><span class="line">cat picture.gif | gif2webp -o - -- - &gt; output.webp</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="img2webp-命令-从一系列输入图像创建动画WebP文件。"><a href="#img2webp-命令-从一系列输入图像创建动画WebP文件。" class="headerlink" title="img2webp 命令 - 从一系列输入图像创建动画WebP文件。"></a>img2webp 命令 - 从一系列输入图像创建动画WebP文件。</h3><p><strong>语法参数</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage:</span></span><br><span class="line">  img2webp [file_options] [[frame_options] frame_file]...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩选项</span></span><br><span class="line">-o string ：指定输出 WebP 文件的名称。</span><br><span class="line">-min_size ： 对图像进行编码以实现最小尺寸</span><br><span class="line">-kmin int</span><br><span class="line">-kmax int ：指定输出动画中连续关键帧（可独立解码帧）之间的最小和最大距离。</span><br><span class="line">-mixed：混合压缩模式：通过启发式选择每帧的有损或无损压缩来优化图像的压缩。</span><br><span class="line">-loop int ：指定动画应循环的次数，使用0意味着“无限期循环”。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帧选项</span></span><br><span class="line">-d int 以毫秒为单位指定图像持续时间。</span><br><span class="line">-lossless, -lossy 使用无损或有损压缩模式压缩下一个图像。默认模式为无损。</span><br><span class="line">-q <span class="built_in">float</span> 指定介于 0 和 100 之间的压缩因子。默认值为 75。</span><br><span class="line">-m int 指定要使用的压缩方法。此参数控制编码速度与压缩文件大小和质量之间的权衡。可能的值范围为 0 到 6。默认值为 4。</span><br></pre></td></tr></table></figure></p><p>TIPS: 其支持的输入格式为 <code>WebP, JPEG, PNG, PNM (PGM, PPM, PAM), TIFF</code>.</p><p><br/></p><p><strong>简单实例:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.将 in0.png 、in1.jpg、in2.tiff组合为 webp 格式的动态图片。</span></span><br><span class="line">img2webp -loop 2 in0.png -lossy in1.jpg -d 80 in2.tiff -o out.webp</span><br></pre></td></tr></table></figure></p><p><br/></p><h3 id="webpmux-命令-从非动画WebP图像中创建动画WebP文件"><a href="#webpmux-命令-从非动画WebP图像中创建动画WebP文件" class="headerlink" title="webpmux 命令 - 从非动画WebP图像中创建动画WebP文件"></a>webpmux 命令 - 从非动画WebP图像中创建动画WebP文件</h3><p>描述: 从非动画WebP图像中创建动画WebP文件，从动画WebP图片中提取帧，以及管理XMP/EXIF元数据和ICC配置文件。</p><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Usage:</span></span><br><span class="line">webpmux -get GET_OPTIONS INPUT -o OUTPUT</span><br><span class="line">webpmux -<span class="built_in">set</span> SET_OPTIONS INPUT -o OUTPUT</span><br><span class="line">webpmux -strip STRIP_OPTIONS INPUT -o OUTPUT</span><br><span class="line">webpmux -frame FRAME_OPTIONS [ -frame ... ] [ -loop LOOP_COUNT ] [ -bgcolor BACKGROUND_COLOR ] -o OUTPUT</span><br><span class="line">webpmux -duration DURATION OPTIONS [ -duration ... ] INPUT -o OUTPUT</span><br><span class="line">webpmux -info INPUT</span><br><span class="line"></span><br><span class="line"><span class="comment"># GET_OPTIONS (-get):</span></span><br><span class="line">  icc    Get ICC profile.</span><br><span class="line">  exif   Get EXIF metadata.</span><br><span class="line">  xmp    Get XMP metadata.</span><br><span class="line">  frame n  Get nth frame from an animated image. (n = 0 has a special meaning: last frame).</span><br><span class="line"></span><br><span class="line"><span class="comment"># SET_OPTIONS (-set):</span></span><br><span class="line">  loop loop_count : Set loop count on an animated file.</span><br><span class="line">    <span class="comment"># Where: 'loop_count' must be in range [0, 65535].</span></span><br><span class="line">  bgcolor A,R,G,B : Set the background color of the canvas on an animated file.</span><br><span class="line">    <span class="comment"># where:  'A',  'R', 'G' and 'B' are integers in the range 0 to 255 specifying the Alpha, Red, Green and Blue component values respectively.</span></span><br><span class="line">  icc file.icc : Set ICC profile.</span><br><span class="line">    <span class="comment"># Where: 'file.icc' contains the ICC profile to be set.</span></span><br><span class="line">  exif file.exif : Set EXIF metadata.</span><br><span class="line">    <span class="comment"># Where: 'file.exif' contains the EXIF metadata to be set.</span></span><br><span class="line">  xmp file.xmp : Set XMP metadata.</span><br><span class="line">    <span class="comment"># Where: 'file.xmp' contains the XMP metadata to be set.</span></span><br></pre></td></tr></table></figure></p><p><strong>示例演示:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpmux -get exif test.webp -o test.webp.txt</span><br><span class="line">webpmux -get frame 0 test.webp -o test.webp.txt</span><br></pre></td></tr></table></figure></p><p><br/></p><h3 id="webpinfo-命令-打印出WebP文件的块级结构以及基本的完整性检查。"><a href="#webpinfo-命令-打印出WebP文件的块级结构以及基本的完整性检查。" class="headerlink" title="webpinfo 命令 - 打印出WebP文件的块级结构以及基本的完整性检查。"></a>webpinfo 命令 - 打印出WebP文件的块级结构以及基本的完整性检查。</h3><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Usage: webpinfo [options] in_files</span><br><span class="line">Options:</span><br><span class="line">  -version ........... Print version number and <span class="built_in">exit</span>.</span><br><span class="line">  -quiet ............. Do not show chunk parsing information.</span><br><span class="line">  -diag .............. Show parsing error diagnosis.(显示分析错误诊断)</span><br><span class="line">  -summary ........... Show chunk stats summary.(显示块统计信息摘要)</span><br><span class="line">  -bitstream_info .... Parse bitstream header.(解析位流头)</span><br></pre></td></tr></table></figure></p><p><strong>使用案例:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.显示指定webp摘要信息</span></span><br><span class="line">$ webpinfo -diag -summary wechat-search.webp</span><br><span class="line">  File: wechat-search.webp</span><br><span class="line">  RIFF HEADER:</span><br><span class="line">    File size:  11298</span><br><span class="line">  Chunk VP8  at offset     12, length  11286</span><br><span class="line">    Width: 438</span><br><span class="line">    Height: 200</span><br><span class="line">    Alpha: 0</span><br><span class="line">    Animation: 0</span><br><span class="line">    Format: Lossy (1)</span><br><span class="line">  Summary:</span><br><span class="line">  Number of frames: 1</span><br><span class="line">  Chunk <span class="built_in">type</span>  :  VP8 VP8L VP8X ALPH ANIM ANMF(VP8 /VP8L/ALPH) ICCP EXIF  XMP</span><br><span class="line">  Chunk counts:    1    0    0    0    0    0    0    0    0     0    0    0</span><br><span class="line">  No error detected.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.解析指定webp文件的比特流头</span></span><br><span class="line">$ webpinfo -bitstream_info input_file_1.webp input_file_2.webp</span><br><span class="line">File: input_file_1.webp</span><br><span class="line">RIFF HEADER:</span><br><span class="line">  File size:  11076</span><br><span class="line">Chunk VP8  at offset     12, length  11064</span><br><span class="line">  Width: 493</span><br><span class="line">  Height: 424</span><br><span class="line">  Alpha: 0</span><br><span class="line">  Animation: 0</span><br><span class="line">  Format: Lossy (1)</span><br><span class="line">  Parsing lossy bitstream...</span><br><span class="line">  Key frame:        Yes</span><br><span class="line">  Profile:          0</span><br><span class="line">  Display:          Yes</span><br><span class="line">  Part. 0 length:   1619</span><br><span class="line">  Width:            493</span><br><span class="line">  X scale:          0</span><br><span class="line">  Height:           424</span><br><span class="line">  Y scale:          0</span><br><span class="line">  Color space:      0</span><br><span class="line">  Clamp <span class="built_in">type</span>:       0</span><br><span class="line">  Use segment:      1</span><br><span class="line">  Update map:       1</span><br><span class="line">  Update data:      1</span><br><span class="line">  Absolute delta:   1</span><br><span class="line">  Quantizer:        27 27 23 17</span><br><span class="line">  Filter strength:  8 6 5 2</span><br><span class="line">  Prob segment:     35 55 40</span><br><span class="line">  Simple filter:    0</span><br><span class="line">  Level:            8</span><br><span class="line">  Sharpness:        0</span><br><span class="line">  Use lf delta:     0</span><br><span class="line">  Total partitions: 1</span><br><span class="line">  Base Q:           27</span><br><span class="line">  DQ Y1 DC:         0</span><br><span class="line">  DQ Y2 DC:         0</span><br><span class="line">  DQ Y2 AC:         0</span><br><span class="line">  DQ UV DC:         -2</span><br><span class="line">  DQ UV AC:         -3</span><br><span class="line">File: input_file_2.webp</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="vwebp-命令-解压缩WebP文件并将其显示在窗口中"><a href="#vwebp-命令-解压缩WebP文件并将其显示在窗口中" class="headerlink" title="vwebp 命令 - 解压缩WebP文件并将其显示在窗口中"></a>vwebp 命令 - 解压缩WebP文件并将其显示在窗口中</h3><p><strong>语法参数:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vwebp [options] input_file.webp</span><br><span class="line"><span class="comment"># Options are:</span></span><br><span class="line">  -version ..... <span class="built_in">print</span> version number and <span class="built_in">exit</span></span><br><span class="line">  -noicc ....... don<span class="string">'t use the icc profile if present</span></span><br><span class="line"><span class="string">  -nofancy ..... don'</span>t use the fancy YUV420 upscaler</span><br><span class="line">  -nofilter .... <span class="built_in">disable</span> <span class="keyword">in</span>-loop filtering</span><br><span class="line">  -dither &lt;int&gt;  dithering strength (0..100), default=50</span><br><span class="line">  -noalphadither <span class="built_in">disable</span> alpha plane dithering</span><br><span class="line">  -usebgcolor .. display background color</span><br><span class="line">  -mt .......... use multi-threading</span><br><span class="line">  -info ........ <span class="built_in">print</span> info</span><br><span class="line">  -h ........... this <span class="built_in">help</span> message</span><br><span class="line"></span><br><span class="line"><span class="comment"># Keyboard shortcuts:</span></span><br><span class="line">  <span class="string">'c'</span> ................ toggle use of color profile</span><br><span class="line">  <span class="string">'b'</span> ................ toggle background color display</span><br><span class="line">  <span class="string">'i'</span> ................ overlay file information</span><br><span class="line">  <span class="string">'d'</span> ................ <span class="built_in">disable</span> blending &amp; disposal (debug)</span><br><span class="line">  <span class="string">'q'</span> / <span class="string">'Q'</span> / ESC .... quit</span><br></pre></td></tr></table></figure></p><p><strong>使用示例:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vwebp picture.webp</span><br><span class="line">vwebp picture.webp -mt -dither 0</span><br><span class="line">vwebp -- ---picture.webp</span><br></pre></td></tr></table></figure></p><hr><h2 id="0x03-企业实践"><a href="#0x03-企业实践" class="headerlink" title="0x03 企业实践"></a>0x03 企业实践</h2><h3 id="1-请求访问Nginx服务器中承载的不同分辨率WebP格式图片。"><a href="#1-请求访问Nginx服务器中承载的不同分辨率WebP格式图片。" class="headerlink" title="1.请求访问Nginx服务器中承载的不同分辨率WebP格式图片。"></a>1.请求访问Nginx服务器中承载的不同分辨率WebP格式图片。</h3><p>描述: 在请求中指定图片分辨率大小，如何让Nginx识别指定的分辨率值并返回指定分辨率大小的webp图形资源。</p><blockquote><p>答案当然可以从下述文章实践中找到答案，此前我们需要确定源代码编译nginx参数中是否启用了<code>--with-http_image_filter_module</code>该模块，如果没有启动则需要重新构建Nginx，具体操作如下所示。<br><code>nginx -V</code> 验证该其<code>configure arguments:</code>中是否存在<code>http_image_filter</code>模块。</p></blockquote><p>温馨提示: 进行 Nginx 的源代码编译安装步骤流程可以参考我前面此篇文章【 <a href="https://blog.weiyigeek.top/2022/7-2-676.html">https://blog.weiyigeek.top/2022/7-2-676.html</a> 】 或者【 <a href="https://mp.weixin.qq.com/s/u-zb-BxG6VyaLY4EQLKlOQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/u-zb-BxG6VyaLY4EQLKlOQ</a> 】直达。</p><p>此处演示在已安装Nginx环境下使用<code>--with-http_image_filter_module</code>参数生成模块动态链接库，当然你也可直接编译进nginx，不过笔者还是推荐前者。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --<span class="built_in">help</span> | grep <span class="string">"image_filter_module"</span></span><br><span class="line">--with-http_image_filter_module         <span class="comment"># enable ngx_http_image_filter_module</span></span><br><span class="line">--with-http_image_filter_module=dynamic <span class="comment"># enable dynamic ngx_http_image_filter_module</span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>实践流程:</strong></p><ul><li>Step 1.实践项目web准备，此处采用我的主页作为展示，首先从gitee中拉取weiyigeek主页项目到本地<code>/app/html/</code>目录中.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /app/html/ &amp;&amp; <span class="built_in">cd</span> /app/html/</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/WeiyiGeek/weiyigeek.git</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 2.获取当前Nginx配置编译参数，并添加<code>http_image_filter</code>模块为动态链接。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前编译参数</span></span><br><span class="line">nginx -V </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 http_image_filter 模块并重新配置参数，进行编译构建</span></span><br><span class="line"><span class="comment"># ./configure [上述获取的编译参数] --with-http_image_filter_module=dynamic</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.22.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-pcre=../pcre-8.45 --with-zlib=../zlib-1.2.12 --with-openssl=../openssl-1.1.1q --sbin-path=/usr/sbin/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --lock-path=/var/run/nginx.lock --modules-path=/usr/<span class="built_in">local</span>/nginx/modules --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-threads --with-http_sub_module --with-http_v2_module --with-http_auth_request_module --with-http_realip_module --with-http_secure_link_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_ssl_module --with-http_slice_module --with-http_stub_status_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module --with-mail --with-mail_ssl_module --with-http_addition_module --with-http_random_index_module --with-compat --with-file-aio --with-cc-opt=<span class="string">'-Os -fomit-frame-pointer -g'</span> --with-ld-opt=-Wl,-rpath,/usr/<span class="built_in">local</span>/luajit/lib,--as-needed,-O1,--sort-common --add-module=/usr/<span class="built_in">local</span>/src/ngx_devel_kit-0.3.1 --add-module=/usr/<span class="built_in">local</span>/src/lua-nginx-module-0.10.21 --add-dynamic-module=/usr/<span class="built_in">local</span>/src/<span class="built_in">echo</span>-nginx-module-0.62 --add-dynamic-module=/usr/<span class="built_in">local</span>/src/ngx_http_geoip2_module-3.4 --with-http_image_filter_module=dynamic</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><br/></p><p>温馨提示: 当编译 Nginx 时报<code>checking for LuaJIT 2.x ... not found, ./configure: error: unsupported LuaJIT version; ngx_http_lua_module requires LuaJIT 2.x.</code> 错误时的解决办法。</p><p>问题描述: tell nginx’s build system where to find LuaJIT 2.1<br>解决办法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时生效</span></span><br><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/luajit/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/luajit/include/luajit-2.1</span><br></pre></td></tr></table></figure></p><p><br/></p><p>温馨提示: 如出现GD库没有部署即<code>./configure: error: the HTTP image filter module requires the GD library. You can either do not enable the module or install the libraries.</code>提示可以按照如下方式进行解决。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y libgd-dev</span><br></pre></td></tr></table></figure></p><p><br/></p><ul><li>Step 3.当执行make命令后你会发现在objs目录中生成了<code>ngx_http_image_filter_module.so</code>，此处我们需要将生成nginx二进制文件复制到/usr/sbin目录,并将动态链接库放入的modules目录中。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/src/nginx-1.22.0<span class="comment"># ls objs/</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/src/nginx-1.22.0<span class="comment"># cp objs/nginx /usr/sbin/nginx</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/src/nginx-1.22.0<span class="comment"># cp objs/ngx_http_image_filter_module.so /usr/local/nginx/modules/</span></span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 4.加载<code>ngx_http_image_filter_module</code>模块到nginx，并在demo.conf配置一个简单示例。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/nginx.conf</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 加载动态模块</span></span><br><span class="line">load_module modules/ngx_http_image_filter_module.so;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ tee /usr/<span class="built_in">local</span>/nginx/conf.d/demo.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  demo.weiyigeek.top;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  access_log /var/<span class="built_in">log</span>/nginx/demo-access.log main buffer=128k flush=1m;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root /app/html/weiyigeek;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">location ~* /img/(.+)_(\d+)x(\d+)\.(jpg|jpeg|gif|png|webp)$ &#123;</span><br><span class="line">    <span class="comment"># 如果图形不存在则显示根目录下的404.png图像。 </span></span><br><span class="line">    try_files /<span class="variable">$1</span>.<span class="variable">$4</span>  /404.png;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$width</span> <span class="variable">$2</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$height</span> <span class="variable">$3</span>;</span><br><span class="line">    image_filter resize <span class="variable">$width</span> <span class="variable">$height</span>;</span><br><span class="line">    image_filter_buffer 5M;</span><br><span class="line">    image_filter_interlace on;</span><br><span class="line">    image_filter_jpeg_quality 80;</span><br><span class="line">    expires 1d;</span><br><span class="line">    add_header <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">    add_header <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">    add_header <span class="string">'Image-Filter'</span> <span class="string">"Name <span class="variable">$1</span>.<span class="variable">$4</span>,<span class="variable">$width</span> x <span class="variable">$height</span>"</span>;</span><br><span class="line">    <span class="built_in">alias</span> /app/html/weiyigeek/img;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[^libwebp]: WebpAPI帮助文档 https://developers.google.com/speed/webp/docs/api </span><br><span class="line">[^cwebp]: cwebp帮助文档 https://developers.google.com/speed/webp/docs/cwebp</span><br><span class="line">[^dwebp]: dwebp帮助文档 https://developers.google.com/speed/webp/docs/dwebp</span><br></pre></td></tr></table></figure></li></ul><p>温馨提示: <code>root 指令</code>与<code>alias 指令</code>的区别，root 可以让访问 /images/ 路径时，访问到 /User/WeiyiGeek/Desktop/images，若是将 root 替换为 alias，则访问的是 /User/WeiyiGeek/Desktop/；其中 /User/WeiyiGeek/Desktop/ 是本机中的绝对路径。</p><p>温馨提示: 上述<code>image_filter</code>配置简单解析位于location上下文中，该模块 （0.7.54+） 是一个过滤器，用于转换 JPEG、GIF、PNG 和 WebP 格式的图像，其模块  <a href="https://nginx.org/en/docs/http/ngx_http_image_filter_module.html" target="_blank" rel="noopener">Module ngx_http_image_filter_module 文档参考(nginx.org)</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用图形过滤器</span></span><br><span class="line">image_filter off;</span><br><span class="line"><span class="comment"># 确保响应是 JPEG、GIF、PNG 或 WebP 格式的图像。否则将返回 415（不支持的媒体类型）错误。</span></span><br><span class="line">image_filter <span class="built_in">test</span>;</span><br><span class="line"><span class="comment"># 以 JSON 格式输出有关图像的信息，如果错误则输出为 &#123;&#125;</span></span><br><span class="line">image_filter size;</span><br><span class="line"><span class="comment"># 将图像逆时针旋转指定的度数; 可为变量</span></span><br><span class="line">image_filter rotate 90 | 180 | 270;</span><br><span class="line"><span class="comment"># 按比例将图像减小到指定大小</span></span><br><span class="line">image_filter resize width height;</span><br><span class="line"><span class="comment"># 按比例将图像缩小到较大的侧尺寸，并在另一侧裁剪无关的边缘。</span></span><br><span class="line">image_filter crop width height;</span><br><span class="line"><span class="comment"># 设置图片缓冲区的最大大小，大小超过设定值，服务器将返回错误415。</span></span><br><span class="line">image_filter_buffer size;</span><br><span class="line"><span class="comment"># 如果启用最终图像将隔行扫描对于JPEG，最终图像将采用“渐进式JPEG”格式。</span></span><br><span class="line">image_filter_interlace on | off;</span><br><span class="line"><span class="comment"># jpeg 、webp 格式图形质量设置（1~100），较小的值通常意味着较低的图像质量和较少的数据传输。最大建议值为95。参数值可以包含变量</span></span><br><span class="line">image_filter_jpeg_quality quality;</span><br><span class="line">image_filter_webp_quality quality;</span><br><span class="line"><span class="comment"># 提高最终图像的清晰度，锐度百分比可以超过100。零值禁用锐化</span></span><br><span class="line">image_filter_sharpen percent;</span><br><span class="line"><span class="comment"># 定义在转换 GIF 图像或具有调色板指定颜色的 PNG 图像时是否应保留透明度。透明度的损失会导致图像质量更好。PNG 中的 Alpha 通道透明度始终保留。</span></span><br><span class="line">image_filter_transparency on|off;</span><br></pre></td></tr></table></figure><p>温馨提示： 此模块需要依赖与<a href="http://libgd.org" target="_blank" rel="noopener">libgd</a> 库，建议使用最新的可用版本的库。</p><p><br/></p><ul><li>Step 5.配置检查与重载Nginx服务进程 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后通过浏览器分别访问验证 <code>http://demo.weiyigeek.top/img/i-banner.png</code> 与 <code>http://demo.weiyigeek.top/img/i-banner_1080x520.png</code> ，查看其图片尺寸是否有变化，结果如下图所示。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls /app/html/weiyigeek/img/</span><br><span class="line">alipay.jpg  bg.jpg  bg.png  i-banner.png  wechat-gzh.jpg  wechat-scan.png  wechat-search.png  wechat-search-white.png  weiyigeek.jpg  weiyigeek.png</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220808230050.png" alt="WeiyiGeek.image_filter resize png" title="" class="">                <p>WeiyiGeek.image_filter resize png</p>            </figure><p><br/></p><ul><li>Step 6.在步骤五的实践中你会发现虽然在进行图片过滤器时设置了图像质量，从原图的1.3MB到现在的639KB，但是是否还是感觉此图片体积稍大，此时我们便可请出本章主人公webp转换工具cwebp，将png图片图片转换为webp格式图片。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cwebp -q 80 i-banner.png -o i-banner.webp</span><br><span class="line">Saving file <span class="string">'i-banner.webp'</span></span><br><span class="line">File:      i-banner.png</span><br><span class="line">Dimension: 1772 x 903</span><br><span class="line">Output:    61096 bytes Y-U-V-All-PSNR 45.57 49.64 49.89   46.57 dB</span><br><span class="line">           (0.31 bpp)</span><br><span class="line">block count:  intra4:       2308  (36.48%)</span><br><span class="line">              intra16:      4019  (63.52%)</span><br><span class="line">              skipped:      1469  (23.22%)</span><br><span class="line">bytes used:  header:            499  (0.8%)</span><br><span class="line">             mode-partition:  10154  (16.6%)</span><br><span class="line"> Residuals bytes  |segment 1|segment 2|segment 3|segment 4|  total</span><br><span class="line">    macroblocks:  |       1%|       4%|      10%|      85%|    6327</span><br><span class="line">      quantizer:  |      27 |      27 |      23 |      18 |</span><br><span class="line">   filter level:  |       8 |       5 |      25 |      21 |</span><br><span class="line"></span><br><span class="line">$ ls  -lah i-banner.*</span><br><span class="line">-rw-r--r-- 1 root root 1.3M Aug  8 15:00 i-banner.png</span><br><span class="line">-rw-r--r-- 1 root root  60K Aug  8 23:07 i-banner.webp</span><br></pre></td></tr></table></figure><p>在设置质量为80后，转换后你会发现体积从1.3M一下就降到了60kb，可以看到其体积极大优化了在互联网上传播速度。</p><p><br/></p><ul><li>Step 7.同样图片过滤器也可以处理webp格式的图形文件，这一点模块官网已经说明，我们直接使用上述转换后的i-banner.webp图形进行验证，同样分别访问 <code>http://demo.weiyigeek.top/img/i-banner.webp</code> 与 <code>http://demo.weiyigeek.top/img/i-banner_1080x520.webp</code>, 查看其图片尺寸是否有变化，结果如下图所示。</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220808231417.png" alt="WeiyiGeek.image_filter resize web" title="" class="">                <p>WeiyiGeek.image_filter resize web</p>            </figure><p>从上图中可以看出原始的webp的图形大小的尺寸为 1772x903 大小为 61kb，而经过图片过滤器后按照其纵横比设置为了 1021x520 其大小也降为 24.9 kb。</p><p><br/></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;本章目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;描述: 最近公司业务中有这么一个需求就是在保证图像的清晰度的情况下, 减少其体积大小使得减轻外部请求流量带宽对网关的请访问压力，同时提高用户访问体验。所以在进行前期需求、运维成本等综合分析后，还是建议将图片格式转为Google推出的一种现代图像格式 Webp，考虑到 WebP图片已经是一种趋势了，现在已经有很知名的网站支持了这种格式的图片，当然你也可以使用 Google 出品的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式(比较吃配置)。&lt;/p&gt;
&lt;p&gt;所以本章将主要针对webp格式的转换的相关命令进行实践使用，如果不想使用 Nginx+PageSpeed 模块，我们也可使用 Nginx+Lua 脚本针对请求非webp格式的图片进行自动转换后，并按照指定的分辨率进行显示。&lt;/p&gt;</summary>
    
    
    
    <category term="运维实践" scheme="https://blog.weiyigeek.top/categories/%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Nginx" scheme="https://blog.weiyigeek.top/tags/Nginx/"/>
    
    <category term="webp" scheme="https://blog.weiyigeek.top/tags/webp/"/>
    
  </entry>
  
  <entry>
    <title>7.Nginx实践之使用Lua-nginx模块脚本连接Redis数据库读取静态资源并隐式展现</title>
    <link href="https://blog.weiyigeek.top/2022/7-2-676.html"/>
    <id>https://blog.weiyigeek.top/2022/7-2-676.html</id>
    <published>2022-07-02T05:34:30.000Z</published>
    <updated>2022-09-08T07:41:17.197Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本章目录</strong></p><p>[TOC]</p><hr><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p><strong>为啥有此篇文章?</strong><br>描述: 在进行公司的图片存储解决方案研究中，最开始准备使用的是FastDFS，但是经过深思熟虑，以及后期运维成本考虑还是放弃了，只能转而使用存储直接存放图片文件，直接请求效率提示杠杠的，但如何最大限度保证业务安全以及减少业务对数据库增删改查的压力? 在 Google 、Github一番查找后发现可以直接使用 Nginx + Lua 进行访问数据进行获取静态资源信息，而不用业务系统进行访问数据库直接获取静态资源路径，而显式的展现资源真实暴露给外部，非常容易被批量抓取。</p><p>其次笔者在实践中发现当前搜索到的安装部署Nginx+Lua可能已将不适用最新稳定版本的Nginx版本，基本上都是 1.15.x ~ 1.18.x，对于当前Nginx 1.22.0 版本来说显然是太老了。<br>所以本章就该问题进行 <code>Nginx + Lua + Redis</code> 模块环境的安装以及简单的实践，希望能帮助到各位有相同需求的Person。</p><a id="more"></a><p><br/></p><p><strong>基础知识:</strong></p><ul><li>Nginx: 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务, 其三大核心功能，包含静态资源、反向代理、api模块扩展，对于lua脚本的扩展，例如由lua-nginx-module模块，就是api模块扩展的一部分，并且nginx可以通过lua脚本直接调用redis服务器；</li><li>Lua: 是一种功能强大，高效，轻量级，可嵌入的脚本语言，非常容易嵌入到我们应用程序中, 它用于各种应用程序，从游戏到Web应用程序和图像处理。 </li><li>lua-nginx-module : 该模块是 OpenResty 的核心组件，目录是将lua的功能嵌入到Nginx http服务器中。</li><li>lua-resty-redis : 该模块是在 OpenResty 项目下基于 cosocket API 的 ngx_lua 的 Lua redis 客户端驱动。</li></ul><p><br/></p><p>温馨提示: 如果不是现有业务大量使用Nginx进行承载不能直接替换其它优秀的解决方案，只能一步一步来，从而转入 <code>OpenResty</code> 或者 <code>caddy</code> 搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>原文地址: <a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a></p><hr><h3 id="知识引入"><a href="#知识引入" class="headerlink" title="知识引入"></a>知识引入</h3><p><strong>Nginx 的指令的都是安装执行顺序的吗?</strong></p><blockquote><p>答: 既然我都这样问了答案则是显而易见的，这也是大多数新手频繁遇到的一个困惑，当然也困惑了笔者，否则我也不会这样问。</p></blockquote><p>那我们下来来看这么一个示例: (验证此示例你可能需要先按照下一章的【0x01 部署环境】进行准备相关环境), 此时你可能会说输出不就是<code>WeiyiGeek</code>吗?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /sequence_demo_1 &#123;</span><br><span class="line"> <span class="built_in">set</span> <span class="variable">$a</span> Weiyi;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"> <span class="built_in">set</span> <span class="variable">$a</span> Geek;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但如果请求该URL你会发现实时并非如此。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl http:&#x2F;&#x2F;demo.weiyigeek.top&#x2F;sequence_demo_1</span><br><span class="line">Geek</span><br><span class="line">Geek</span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>那为什么出现了这种不合常理的现象呢？</strong></p><blockquote><p>答: 为了解释此现象, 我们不得不介绍Nginx的请求处理的11阶段，分别是post-read、server-rewrite、find-config、rewrite、post-rewrite、preaccess、access、post-access、precontent、content以及log，其中3个比较常见的按照执行时的先后顺序依次是rewrite阶段、access阶段以及content阶段。<br>Nginx 配置指令一般只会注册并运行在其中的某一个处理阶段，比如 <code>set</code> 指令就是在<code>rewrite</code>阶段运行的，而<code>echo</code>指令只会在<code>content</code>阶段运行, 在一次请求处理流程中<code>rewrite</code>阶段总是在content阶段之前执行。</p></blockquote><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220802164753.png" alt="WeiyiGeek.Nginx的请求处理的11阶段" title="" class="">                <p>WeiyiGeek.Nginx的请求处理的11阶段</p>            </figure><p>因此，属于rewrite阶段的配置指令（示例中的set）总是会无条件地在content阶段的配置指令（示例中的echo）之前执行，即便是<code>echo</code>指令出现在<code>set</code>指令的前面, 上面例子中的指令按照请求处理阶段的先后次序排序，实际的执行次序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /sequence_demo_1 &#123;</span><br><span class="line"> <span class="comment"># rewrite阶段的配置指令，执行在前面</span></span><br><span class="line"> <span class="built_in">set</span> <span class="variable">$a</span> Weiyi;</span><br><span class="line"> <span class="built_in">set</span> <span class="variable">$a</span> Geek ;</span><br><span class="line"> <span class="comment"># content阶段的配置指令，执行在后面</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，输出的结果就是Weiyi Geek了。</p><p><br></p><h3 id="Lua模块指令阶段"><a href="#Lua模块指令阶段" class="headerlink" title="Lua模块指令阶段"></a>Lua模块指令阶段</h3><p><strong>各阶段使用Lua模块指令</strong><br>描述: 由于本章 Nginx 也是使用 OpenResty Lua 模块实现的解析Lua脚本,所以其指令我们也需要做一个简单了解，对于后续学习有非常大的帮助。</p><p>指令语法: <a href="https://github.com/openresty/lua-nginx-module#synopsis" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module#synopsis</a></p><p>使用Lua来构建nginx脚本就是通过一条条指令来完成的，指令常用于指定 Lua 代码是什么时候执行的以及如何使用运行的结果，lua 指令分为配置指令、控制指令, 而控制指令分为两种方式。</p><ul><li>lua脚本块 ：<code>*_by_lua_block</code></li><li>lua脚本文件 ：<code>*_by_lua_file</code></li></ul><p>下图展示了指令执行的顺序：从上至下：初始化、重写/访问、内容处理、日志输出四个阶段</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220802171007.png" alt="WeiyiGeek.ngx-lua-order" title="" class="">                <p>WeiyiGeek.ngx-lua-order</p>            </figure><p><br/></p><p><strong>lua-nginx-module Directives Document（Lua Nginx 模块指令文档）:</strong></p><ul><li><a href="https://github.com/openresty/lua-nginx-module#lua_load_resty_core" target="_blank" rel="noopener">lua_load_resty_core</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_capture_error_log" target="_blank" rel="noopener">lua_capture_error_log</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_use_default_type" target="_blank" rel="noopener">lua_use_default_type</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_malloc_trim" target="_blank" rel="noopener">lua_malloc_trim</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_code_cache" target="_blank" rel="noopener">lua_code_cache</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_thread_cache_max_entries" target="_blank" rel="noopener">lua_thread_cache_max_entries</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_regex_cache_max_entries" target="_blank" rel="noopener">lua_regex_cache_max_entries</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_regex_match_limit" target="_blank" rel="noopener">lua_regex_match_limit</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_package_path" target="_blank" rel="noopener">lua_package_path</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_package_cpath" target="_blank" rel="noopener">lua_package_cpath</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_by_lua" target="_blank" rel="noopener">init_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_by_lua_block" target="_blank" rel="noopener">init_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_by_lua_file" target="_blank" rel="noopener">init_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_worker_by_lua" target="_blank" rel="noopener">init_worker_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_worker_by_lua_block" target="_blank" rel="noopener">init_worker_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#init_worker_by_lua_file" target="_blank" rel="noopener">init_worker_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#exit_worker_by_lua_block" target="_blank" rel="noopener">exit_worker_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#exit_worker_by_lua_file" target="_blank" rel="noopener">exit_worker_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#set_by_lua" target="_blank" rel="noopener">set_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#set_by_lua_block" target="_blank" rel="noopener">set_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#set_by_lua_file" target="_blank" rel="noopener">set_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#content_by_lua" target="_blank" rel="noopener">content_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#content_by_lua_block" target="_blank" rel="noopener">content_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#content_by_lua_file" target="_blank" rel="noopener">content_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#server_rewrite_by_lua_block" target="_blank" rel="noopener">server_rewrite_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#server_rewrite_by_lua_file" target="_blank" rel="noopener">server_rewrite_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#rewrite_by_lua" target="_blank" rel="noopener">rewrite_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#rewrite_by_lua_block" target="_blank" rel="noopener">rewrite_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#rewrite_by_lua_file" target="_blank" rel="noopener">rewrite_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#access_by_lua" target="_blank" rel="noopener">access_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#access_by_lua_block" target="_blank" rel="noopener">access_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#access_by_lua_file" target="_blank" rel="noopener">access_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#header_filter_by_lua" target="_blank" rel="noopener">header_filter_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#header_filter_by_lua_block" target="_blank" rel="noopener">header_filter_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#header_filter_by_lua_file" target="_blank" rel="noopener">header_filter_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#body_filter_by_lua" target="_blank" rel="noopener">body_filter_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#body_filter_by_lua_block" target="_blank" rel="noopener">body_filter_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#body_filter_by_lua_file" target="_blank" rel="noopener">body_filter_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#log_by_lua" target="_blank" rel="noopener">log_by_lua</a></li><li><a href="https://github.com/openresty/lua-nginx-module#log_by_lua_block" target="_blank" rel="noopener">log_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#log_by_lua_file" target="_blank" rel="noopener">log_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#balancer_by_lua_block" target="_blank" rel="noopener">balancer_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#balancer_by_lua_file" target="_blank" rel="noopener">balancer_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_need_request_body" target="_blank" rel="noopener">lua_need_request_body</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_client_hello_by_lua_block" target="_blank" rel="noopener">ssl_client_hello_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_client_hello_by_lua_file" target="_blank" rel="noopener">ssl_client_hello_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_certificate_by_lua_block" target="_blank" rel="noopener">ssl_certificate_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_certificate_by_lua_file" target="_blank" rel="noopener">ssl_certificate_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_session_fetch_by_lua_block" target="_blank" rel="noopener">ssl_session_fetch_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_session_fetch_by_lua_file" target="_blank" rel="noopener">ssl_session_fetch_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_session_store_by_lua_block" target="_blank" rel="noopener">ssl_session_store_by_lua_block</a></li><li><a href="https://github.com/openresty/lua-nginx-module#ssl_session_store_by_lua_file" target="_blank" rel="noopener">ssl_session_store_by_lua_file</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_shared_dict" target="_blank" rel="noopener">lua_shared_dict</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_connect_timeout" target="_blank" rel="noopener">lua_socket_connect_timeout</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_send_timeout" target="_blank" rel="noopener">lua_socket_send_timeout</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_send_lowat" target="_blank" rel="noopener">lua_socket_send_lowat</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_read_timeout" target="_blank" rel="noopener">lua_socket_read_timeout</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_buffer_size" target="_blank" rel="noopener">lua_socket_buffer_size</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_pool_size" target="_blank" rel="noopener">lua_socket_pool_size</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_keepalive_timeout" target="_blank" rel="noopener">lua_socket_keepalive_timeout</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_socket_log_errors" target="_blank" rel="noopener">lua_socket_log_errors</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_ciphers" target="_blank" rel="noopener">lua_ssl_ciphers</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_crl" target="_blank" rel="noopener">lua_ssl_crl</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_protocols" target="_blank" rel="noopener">lua_ssl_protocols</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_trusted_certificate" target="_blank" rel="noopener">lua_ssl_trusted_certificate</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_verify_depth" target="_blank" rel="noopener">lua_ssl_verify_depth</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_ssl_conf_command" target="_blank" rel="noopener">lua_ssl_conf_command</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_http10_buffering" target="_blank" rel="noopener">lua_http10_buffering</a></li><li><a href="https://github.com/openresty/lua-nginx-module#rewrite_by_lua_no_postpone" target="_blank" rel="noopener">rewrite_by_lua_no_postpone</a></li><li><a href="https://github.com/openresty/lua-nginx-module#access_by_lua_no_postpone" target="_blank" rel="noopener">access_by_lua_no_postpone</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_transform_underscores_in_response_headers" target="_blank" rel="noopener">lua_transform_underscores_in_response_headers</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_check_client_abort" target="_blank" rel="noopener">lua_check_client_abort</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_max_pending_timers" target="_blank" rel="noopener">lua_max_pending_timers</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_max_running_timers" target="_blank" rel="noopener">lua_max_running_timers</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_sa_restart" target="_blank" rel="noopener">lua_sa_restart</a></li><li><a href="https://github.com/openresty/lua-nginx-module#lua_worker_thread_vm_pool_size" target="_blank" rel="noopener">lua_worker_thread_vm_pool_size</a></li></ul><p><br></p><p>值得注意的是Nginx可以提前终止请求（至少），这意味着跳过正常运行的阶段，例如重写或访问阶段。这也意味着，不管运行的后期阶段（例如log_by_lua）将无法访问通常在这些阶段中设置的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">400 (Bad Request)</span><br><span class="line">405 (Not Allowed)</span><br><span class="line">408 (Request Timeout)</span><br><span class="line">413 (Request Entity Too Large)</span><br><span class="line">414 (Request URI Too Large)</span><br><span class="line">494 (Request Headers Too Large)</span><br><span class="line">499 (Client Closed Request)</span><br><span class="line">500 (Internal Server Error)</span><br><span class="line">501 (Not Implemented)</span><br></pre></td></tr></table></figure><p>好了，此处就只是先简单点一下，在后续实践中您在回过头来看即可。</p><hr><h2 id="0x01-部署环境"><a href="#0x01-部署环境" class="headerlink" title="0x01 部署环境"></a>0x01 部署环境</h2><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><p><strong>环境描述:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line">$ cat /etc/issue.net</span><br><span class="line">Ubuntu 20.04.3 LTS</span><br><span class="line">$ uname -a</span><br><span class="line">Linux weiyigeek.top 5.4.0-92-generic \<span class="comment">#103-Ubuntu SMP Fri Nov 26 16:13:00 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件版本</span></span><br><span class="line">Nginx - 1.22.0  (stable 版本) </span><br><span class="line">pcre - 8.45</span><br><span class="line">zlib - 1.2.12</span><br><span class="line">Lua - 5.4</span><br><span class="line">openssl - 1.1.1q</span><br><span class="line">ngx_devel_kit - v0.3.1</span><br><span class="line">lua-nginx-module - v0.10.21</span><br><span class="line"><span class="built_in">echo</span>-nginx-module - v0.62</span><br><span class="line">lua-resty-core - v0.1.23</span><br><span class="line">lua-resty-lrucache - v0.13</span><br><span class="line">lua-resty-redis - v0.29</span><br></pre></td></tr></table></figure></p><p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, 请大家疯狂的 star 。<br>加固脚本地址:【 <a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p><p style='color:red'><br>为了节省大家的实践时间，我已经把需要用到的源码包上传到空间中，有需要的朋友可以看一下，下载地址: (<a href="http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088)（访问密码：2088）" target="_blank" rel="noopener">http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088)（访问密码：2088）</a><br><br/>温馨提示: 如提示证书不对，请点击高级继续访问即可.</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220806093220.png" alt="WeiyiGeek.Nginx及其模块下载" title="" class="">                <p>WeiyiGeek.Nginx及其模块下载</p>            </figure><p><br></p><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><p><strong>源代码编译构建</strong><br>Step 1.在 Ubuntu 20.04 LTS 系统安装编译所需环境.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y gcc g++ make perl net-tools</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 2.下载 Nginx、PCRE、zlib、OpenSSL 源代码包，并编译构建 <code>PCRE、zlib、OpenSSL</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment"># Nginx 轻量级的Web代理服务器。</span></span><br><span class="line"><span class="comment"># 官网: https://nginx.org/en/download.html</span></span><br><span class="line">wget -c https://nginx.org/download/nginx-1.22.0.tar.gz -O /usr/<span class="built_in">local</span>/src/nginx-1.22.0.tar.gz</span><br><span class="line">tar -zxf nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># PCRE – 支持正则表达式，NGINX Core 和 Rewrite 模块需要</span></span><br><span class="line"><span class="comment"># 官网： http://pcre.org/</span></span><br><span class="line">wget -c https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.bz2</span><br><span class="line">tar -jxf pcre-8.45.tar.bz2 &amp;&amp; <span class="built_in">cd</span> pcre-8.45</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># zlib – 支持标头压缩, NGINX Gzip 模块需要。</span></span><br><span class="line"><span class="comment"># 官网：http://www.zlib.net/</span></span><br><span class="line">wget -c http://www.zlib.net/zlib-1.2.12.tar.gz</span><br><span class="line">tar -zxf zlib-1.2.12.tar.gz &amp;&amp; <span class="built_in">cd</span> zlib-1.2.12</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenSSL – 支持 HTTPS 协议, NGINX SSL 模块和其他模块需要。</span></span><br><span class="line"><span class="comment"># 官网: https://www.openssl.org/source/</span></span><br><span class="line">wget -c https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1q.tar.gz</span><br><span class="line">tar -zxf openssl-1.1.1q.tar.gz &amp;&amp; <span class="built_in">cd</span> openssl-1.1.1q</span><br><span class="line">./config --prefix=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/openssl/bin/openssl /usr/<span class="built_in">local</span>/bin/openssl</span><br><span class="line"><span class="comment"># lib 库加载到系统</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/openssl/lib"</span> &gt;&gt; /etc/ld.so.conf.d/libc.conf</span><br><span class="line">ldconfig</span><br><span class="line"><span class="comment"># 执行命令验证系统的 OpenSSL 版本</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/openssl version</span><br><span class="line">OpenSSL 1.1.1q 5 Jul 2022</span><br></pre></td></tr></table></figure></p><p>温馨提示: 如<code>./configure</code>未指定<code>--prefix</code>参数的将会直接安装在<code>/usr/local</code>目录下的bin、lib、share等子目录中。</p><p><br/></p><p>Step 3.下载编译构建Lua解析器以及Nginx所需的开发工具包和Lua模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment"># ngx_devel_kit - 是Nginx开发工具包，实际上可以看做一个Nginx模块，它添加了额外的通用工具，模块开发人员可以在自己的模块中使用这些工具。</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/simpl/ngx_devel_kit</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/vision5/ngx_devel_kit</span></span><br><span class="line">wget -c https://github.com/vision5/ngx_devel_kit/archive/refs/tags/v0.3.1.tar.gz -O ngx_devel_kit-v0.3.1.tar.gz</span><br><span class="line">tar -zxf ngx_devel_kit-v0.3.1.tar.gz &amp;&amp; ls ngx_devel_kit-0.3.1</span><br><span class="line">  <span class="comment"># auto  config  docs  examples  LICENSE  ngx_auto_lib_core  notes  objs  patches  README_AUTO_LIB.md  README.md  src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lua-nginx-module - 将Lua的强大功能嵌入到NGINX HTTP服务器中</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/lua-nginx-module</span></span><br><span class="line">wget -c https://github.com/openresty/lua-nginx-module/archive/refs/tags/v0.10.21.tar.gz -O /usr/<span class="built_in">local</span>/src/lua-nginx-module-v0.10.21.tar.gz</span><br><span class="line">tar -zxf lua-nginx-module-v0.10.21.tar.gz &amp;&amp; ls lua-nginx-module-0.10.21</span><br><span class="line">  <span class="comment"># config  doc  dtrace  misc  README.markdown  src  t  tapset  util  valgrind.suppress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo-nginx-module - 一个Nginx的输出模块，用于将“echo”、“sleep”、“time”等功能引入Nginx的配置文件, 此模块不随Nginx源一起分发。</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/echo-nginx-module</span></span><br><span class="line">wget --no-check-certificate -c https://github.com/openresty/<span class="built_in">echo</span>-nginx-module/archive/refs/tags/v0.62.tar.gz -O /usr/<span class="built_in">local</span>/src/<span class="built_in">echo</span>-nginx-module-v0.62.tar.gz</span><br><span class="line">tar -zxf <span class="built_in">echo</span>-nginx-module-v0.62.tar.gz &amp;&amp; ls <span class="built_in">echo</span>-nginx-module-0.62</span><br><span class="line">  <span class="comment"># config  LICENSE  README.markdown  src  t  util  valgrind.suppress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># luajit2 - lua 解析器 LuaJIT 2 OpenResty 的分支，且注意解析器的Lua版本为5.1</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/luajit2 </span></span><br><span class="line">wget -c  https://github.com/openresty/luajit2/archive/refs/tags/v2.1-20220411.tar.gz -O /usr/<span class="built_in">local</span>/src/luajit2-v2.1-20220411.tar.gz</span><br><span class="line">tar -zxvf luajit2-v2.1-20220411.tar.gz &amp;&amp; <span class="built_in">cd</span> luajit2-2.1-20220411</span><br><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/luajit &amp;&amp; make install PREFIX=/usr/<span class="built_in">local</span>/luajit</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/luajit/bin/luajit /usr/<span class="built_in">local</span>/bin/luajit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库设置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/luajit/lib"</span> &gt;&gt; /etc/ld.so.conf.d/libc.conf</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时生效</span></span><br><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/luajit/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/luajit/include/luajit-2.1</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/luajit -v</span><br><span class="line">  <span class="comment"># LuaJIT 2.1.0-beta3 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/</span></span><br></pre></td></tr></table></figure></p><p>温馨提示: 上述 lua 解析器此处采用的是 LuaJIT 官方的 OpenResty 分支, 而不是 luajit 的主分支<code>https://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz</code>，后面入坑出坑会解释为啥这样做。</p><p><br/></p><p>Step 4.为了使Nginx可以连接到redis数据库中执行一些列操作，此处借助于lua-nginx-module模块下载并解压所需的lua-resty-core、lua-resty-lrucache、lua-resty-redis。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment"># 基于 FFI 的 lua-nginx-module API</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/lua-resty-core</span></span><br><span class="line">wget -c https://github.com/openresty/lua-resty-core/archive/refs/tags/v0.1.23.tar.gz -O /usr/<span class="built_in">local</span>/src/lua-resty-core.tar.gz</span><br><span class="line">tar -zxvf lua-resty-core.tar.gz &amp;&amp; ls lua-resty-core-0.1.23</span><br><span class="line">  <span class="comment"># dist.ini  lib  Makefile  README.markdown  t  valgrind.suppress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 LuaJIT FFI 的 Lua-land LRU Cache</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/lua-resty-lrucache</span></span><br><span class="line">wget -c https://github.com/openresty/lua-resty-lrucache/archive/refs/tags/v0.13.tar.gz -O /usr/<span class="built_in">local</span>/src/lua-resty-lrucache-v0.13.tar.gz</span><br><span class="line">tar -zxvf lua-resty-lrucache-v0.13.tar.gz &amp;&amp; ls lua-resty-lrucache-0.13/</span><br><span class="line">  <span class="comment"># dist.ini  lib  Makefile  README.markdown  t  valgrind.suppress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 cosocket API 的 ngx_lua 的 Lua redis 客户端驱动</span></span><br><span class="line"><span class="comment"># 项目地址: https://github.com/openresty/lua-resty-redis</span></span><br><span class="line">wget -c https://github.com/openresty/lua-resty-redis/archive/refs/tags/v0.29.tar.gz -O /usr/<span class="built_in">local</span>/src/lua-resty-redis-v0.29.tar.gz</span><br><span class="line">tar -zxvf lua-resty-redis-v0.29.tar.gz &amp;&amp; ls lua-resty-redis-0.29/</span><br><span class="line"><span class="comment"># 在使用时可将lua脚本放入到nginx配置目录中。</span></span><br><span class="line">mkdir -vp /usr/<span class="built_in">local</span>/nginx/lua/</span><br><span class="line">cp -a  /usr/<span class="built_in">local</span>/src/lua-resty-redis-0.29/lib /usr/<span class="built_in">local</span>/nginx/lua/</span><br><span class="line"><span class="comment"># 以树形结构显示该目录</span></span><br><span class="line">$ tree /usr/<span class="built_in">local</span>/nginx/lua/</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/lua/</span><br><span class="line">├── hello.lua</span><br><span class="line">└── lib</span><br><span class="line">    └── resty</span><br><span class="line">        └── redis.lua</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 5.在上面步骤操作完毕之后，我们便可以进行nginx编译安装了，构建流程如下(在博主的前面讲解的Nginx系列教程就已经有详细讲述 【[Nginx进阶学习之最佳配置实践指南][<a href="https://blog.weiyigeek.top/2019/9-1-124.html]】，此处就不在大篇幅累述了)">https://blog.weiyigeek.top/2019/9-1-124.html]】，此处就不在大篇幅累述了)</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建允许用户和组,不需要家目录不登录bash</span></span><br><span class="line">useradd -M -s /sbin/nologin nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Nginx 所需目录</span></span><br><span class="line">sudo mkdir -vp /usr/<span class="built_in">local</span>/nginx/&#123;module,modules,lua&#125; /var/cache/nginx/&#123;client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp&#125;</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.22.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx 预编译参数设置</span></span><br><span class="line">./configure \</span><br><span class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--user=nginx --group=nginx \</span><br><span class="line">--with-pcre=../pcre-8.45 \</span><br><span class="line">--with-zlib=../zlib-1.2.12 \</span><br><span class="line">--with-openssl=../openssl-1.1.1q \</span><br><span class="line">--sbin-path=/usr/sbin/nginx \</span><br><span class="line">--conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf \</span><br><span class="line">--pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid \</span><br><span class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</span><br><span class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</span><br><span class="line">--lock-path=/var/run/nginx.lock \</span><br><span class="line">--modules-path=/usr/<span class="built_in">local</span>/nginx/modules \</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp \</span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \</span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \</span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \</span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-http_sub_module --with-http_v2_module \</span><br><span class="line">--with-http_auth_request_module --with-http_realip_module --with-http_secure_link_module \</span><br><span class="line">--with-http_gunzip_module --with-http_gzip_static_module --with-http_ssl_module \</span><br><span class="line">--with-http_slice_module --with-http_stub_status_module --with-http_image_filter_module \</span><br><span class="line">--with-http_dav_module --with-http_flv_module --with-http_mp4_module \</span><br><span class="line">--with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module \</span><br><span class="line">--with-mail --with-mail_ssl_module \</span><br><span class="line">--with-http_addition_module --with-http_random_index_module \</span><br><span class="line">--with-compat --with-file-aio \</span><br><span class="line">--with-cc-opt=<span class="string">'-Os -fomit-frame-pointer -g'</span>  \</span><br><span class="line">--with-ld-opt=<span class="string">'-Wl,-rpath,/usr/local/luajit/lib,--as-needed,-O1,--sort-common'</span> \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/ngx_devel_kit-0.3.1 \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/lua-nginx-module-0.10.21 \</span><br><span class="line">--add-dynamic-module=/usr/<span class="built_in">local</span>/src/<span class="built_in">echo</span>-nginx-module-0.62 \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译构建安装</span></span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><p>温馨提示: 上述 <code>./configure</code> 编译配置中使用静态链接库方式来添加<code>ngx_devel_kit-0.3.1/lua-nginx-module-0.10.21</code>模块， 又为了演示加入动态链接库的使用方式，此处使用<code>--add-dynamic-module</code>参数指定<code>echo-nginx-module-0.62</code>的解压目录，如果使用动态连接库的方式加载模块将会在后续实践中展示。</p><p><strong>构建结果:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configure 结果</span></span><br><span class="line">Configuration summary</span><br><span class="line">  <span class="comment"># + using threads</span></span><br><span class="line">  <span class="comment"># + using PCRE library: ../pcre-8.45</span></span><br><span class="line">  <span class="comment"># + using OpenSSL library: ../openssl-1.1.1q</span></span><br><span class="line">  <span class="comment"># + using zlib library: ../zlib-1.2.12</span></span><br><span class="line">  <span class="comment"># nginx path prefix: "/usr/local/nginx"</span></span><br><span class="line">  <span class="comment"># ....................................</span></span><br><span class="line">  <span class="comment"># nginx http scgi temporary files: "/var/cache/nginx/scgi_temp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make 构建安装后提示lib动态链接库地址。</span></span><br><span class="line">- add LIBDIR to the <span class="string">'LD_LIBRARY_PATH'</span> environment variable during execution</span><br><span class="line">- add LIBDIR to the <span class="string">'LD_RUN_PATH'</span> environment variable during linking</span><br><span class="line">- use the <span class="string">'-Wl,-rpath -Wl,LIBDIR'</span> linker flag <span class="comment"># 或者在编译是添加依赖的Lib目录。</span></span><br><span class="line">- have your system administrator add LIBDIR to <span class="string">'/etc/ld.so.conf'</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/src/nginx-1.22.0<span class="comment"># ls objs/</span></span><br><span class="line">  <span class="comment"># ls objs/</span></span><br><span class="line">  <span class="comment"># addon         ngx_auto_config.h               </span></span><br><span class="line">  <span class="comment"># autoconf.err  ngx_auto_headers.h              </span></span><br><span class="line">  <span class="comment"># Makefile      ngx_http_echo_module_modules.c  </span></span><br><span class="line">  <span class="comment"># nginx         ngx_http_echo_module_modules.o  </span></span><br><span class="line">  <span class="comment"># ngx_modules.c src</span></span><br><span class="line">  <span class="comment"># nginx.8       ngx_http_echo_module.so   ngx_modules.o</span></span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220730231815.png" alt="WeiyiGeek.build Nginx" title="" class="">                <p>WeiyiGeek.build Nginx</p>            </figure><p><br/></p><p>Step 6.在Nginx安装部署成功后，为了验证Nginx + Lua安装环境，我们需要再 nginx 主配置文件入口配置如下关键内容，注意下面带有文字注释部分。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ grep -v <span class="string">"^#|^$|#"</span>  /usr/<span class="built_in">local</span>/nginx/conf.d/nginx.conf</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">  worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">  include       mime.types;</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line">  <span class="comment"># 去除 log_format 前者的注释符 `#`</span></span><br><span class="line">  log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                    <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                    <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">  sendfile        on;</span><br><span class="line">  keepalive_timeout  65;</span><br><span class="line">  <span class="comment"># lua 包模块依赖路径</span></span><br><span class="line">  lua_package_path <span class="string">'/usr/local/src/lua-resty-core-0.1.23/lib/?.lua;/usr/local/src/lua-resty-lrucache-0.13/lib/?.lua;'</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># 添加加载nginx家目录下的conf.d/目录子配置文件 (通配符)</span></span><br><span class="line">  include conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后再创建子配置目录与demo.weiyigeek.top站点配置demo.conf文件中，添加如下server字段内容片段。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/nginx/conf.d</span><br><span class="line">tee /usr/<span class="built_in">local</span>/nginx/conf.d/demo.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="comment"># https - demo.weiyigeek.top</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  demo.weiyigeek.top;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  access_log /var/<span class="built_in">log</span>/nginx/demo-access.log main buffer=128k flush=1m;</span><br><span class="line">  <span class="comment"># 方式1.content_by_lua_block lua 片段</span></span><br><span class="line">  location /hello-lua &#123;</span><br><span class="line">    default_type <span class="string">'text/plain'</span>;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">      ngx.say(<span class="string">"Hello World! Lua &amp; Nginx ."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 方式2.content_by_lua_file lua 脚本文件路径</span></span><br><span class="line">  location /hello-lua-file &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    content_by_lua_file ./lua/hello.lua;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 方式3.access_by_lua 在请求访问阶段处理用于访问控制。</span></span><br><span class="line">  location /hello-lua-access &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    access_by_lua <span class="string">'</span></span><br><span class="line"><span class="string">      local message = "403 - Hello World! Lua &amp; Nginx  access_by_lua"</span></span><br><span class="line"><span class="string">      ngx.say(message)</span></span><br><span class="line"><span class="string">    '</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 方式4.content_by_lua 在内容处理阶段接受请求并输出响应。</span></span><br><span class="line">  location /hello-lua-content &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    content_by_lua <span class="string">"ngx.print('Hello World!')"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>温馨提示：<code>access_by_lua</code>与 <code>content_by_lua</code> 的区别是对于Nginx请求的不同处理阶段，前者是访问阶段处理用于访问控制(适用于<code>http、server、location、location if</code>)，后者内容处理器接受请求并输出响应，适用于<code>location、location if</code></p><p><br/></p><p>Step 7.上述配置完成后为了验证配置文件是否存在问题，可执行如下命令如果显示 successful 表示配置没有问题，之后就可重载 nginx 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -t </span><br><span class="line">  <span class="comment"># nginx: the configuration file /usr/local/nginx/nginx.conf syntax is ok</span></span><br><span class="line">  <span class="comment"># nginx: configuration file /usr/local/nginx/nginx.conf test is successful</span></span><br><span class="line"></span><br><span class="line">$ /usr/sbin/nginx -s reload</span><br><span class="line">$ ps -ef | grep <span class="string">"nginx"</span></span><br><span class="line">  <span class="comment"># root      244962       1  0 16:40 ?        00:00:00 nginx: master process nginx</span></span><br><span class="line">  <span class="comment"># nginx     245707  244962  0 21:42 ?        00:00:00 nginx: worker process</span></span><br><span class="line">  <span class="comment"># root      245710  245523  0 21:42 pts/0    00:00:00 grep nginx</span></span><br></pre></td></tr></table></figure><p><br/></p><p>Step 8.验证基本的Nginx+Lua环境，我们访问上述配置文件中的域名和子目录，访问结果如下图所示则表示环境OK，否则请排查错误或者查看是否存在下述的入坑出坑中相关问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"host:demo.weiyigeek.top"</span> 10.20.172.201/hello-lua</span><br><span class="line">Hello World! Lua &amp; Nginx .</span><br><span class="line"></span><br><span class="line">curl -H <span class="string">"host:demo.weiyigeek.top"</span> 10.20.172.201/hello-lua-file</span><br><span class="line">&lt;h2&gt; Hello world! Lua &amp; Nginx with Hello.lua. &lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">curl -H <span class="string">"host:demo.weiyigeek.top"</span> 10.20.172.201/hello-lua-access</span><br><span class="line">Hello World! Lua &amp; Nginx  access_by_lua</span><br><span class="line"></span><br><span class="line">curl -H <span class="string">"host:demo.weiyigeek.top"</span> 10.20.172.201/hello-lua-content</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220731215547.png" alt="WeiyiGeek.demo.weiyigeek.top" title="" class="">                <p>WeiyiGeek.demo.weiyigeek.top</p>            </figure><p><br/></p><p><strong>知识扩展</strong>: 编译构建nginx后我们可通过<code>nginx -V</code>命令查看曾经<code>./configure</code>预编译参数的设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br><span class="line">nginx version: nginx/1.22.0</span><br><span class="line">built by gcc 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)</span><br><span class="line">built with OpenSSL 1.1.1q  5 Jul 2022</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx  </span><br><span class="line">....</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/lua-nginx-module-0.10.21 --add-dynamic-module=/usr/<span class="built_in">local</span>/src/<span class="built_in">echo</span>-nginx-module-0.62 -</span><br></pre></td></tr></table></figure></p><hr><h2 id="0x02-使用实践"><a href="#0x02-使用实践" class="headerlink" title="0x02 使用实践"></a>0x02 使用实践</h2><h3 id="1-Nginx-实践使用-echo-nginx-module-模块之动态加载链接库"><a href="#1-Nginx-实践使用-echo-nginx-module-模块之动态加载链接库" class="headerlink" title="1.Nginx 实践使用 echo-nginx-module 模块之动态加载链接库"></a>1.Nginx 实践使用 echo-nginx-module 模块之动态加载链接库</h3><p>描述: 从 NGINX 1.9.11 开始，您还可以将此模块编译为动态模块，方法是在上面的 <code>./configure</code> 命令行中使用 <code>--add-dynamic-module=PATH</code> 选项而不是<code>--add-module=PATH</code>选项，然后你可以通过 <code>load_module</code> 指令在你的 <code>nginx.conf</code> 中显式加载模块，注意必须在 <code>events{}</code> 片段之前.</p><p>模块语法: <a href="https://github.com/openresty/echo-nginx-module#synopsis" target="_blank" rel="noopener">https://github.com/openresty/echo-nginx-module#synopsis</a></p><p>Step 1.在<code>Nginx.conf</code>文件中配置<code>load_module</code>指令以动态加载 <code>echo-nginx-module</code> 模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1.绝对路径</span></span><br><span class="line">load_module /usr/<span class="built_in">local</span>/nginx/modules/ngx_http_echo_module.so;</span><br><span class="line"><span class="comment"># 方式2.相对路径</span></span><br><span class="line">load_module ./modules/ngx_http_echo_module.so;</span><br><span class="line">.....</span><br><span class="line">events &#123;</span><br><span class="line">  worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br/></p><p>Step 2.同样在<code>demo.conf</code>文件中的进行该模块常规的使用实践。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ cat conf.d/demo.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># 示例1.常规输出(注意文本类型则网页中反馈展现数据也不相同)。</span></span><br><span class="line">  location /nginx-module/<span class="built_in">echo</span> &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"&lt;b&gt;Domain: demo.weiyigeek.top&lt;/b&gt; &lt;br/&gt;"</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hello World! by ngx_http_echo_module.so"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 示例2.请求延时显示以及重置时间定时器。</span></span><br><span class="line">  location /nginx-module/timed &#123;</span><br><span class="line">    default_type <span class="string">'text/plain'</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hello World! by ngx_http_echo_module.so \r"</span>;</span><br><span class="line">    echo_reset_timer;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"1.takes about <span class="variable">$echo_timer_elapsed</span> sec \r"</span>;</span><br><span class="line">    echo_flush;</span><br><span class="line">    echo_sleep 2.5;  <span class="comment"># in sec</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"2.takes about <span class="variable">$echo_timer_elapsed</span> sec."</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"End"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 示例3.Body文档前后插入数据以及在中部插嵌入反向代理网站源码。</span></span><br><span class="line">  location /nginx-module/body &#123;</span><br><span class="line">    resolver 223.6.6.6;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hello World! by ngx_http_echo_module.so"</span>;</span><br><span class="line">    echo_before_body <span class="string">'Blog - '</span>;</span><br><span class="line">    proxy_pass <span class="variable">$scheme</span>://www.weiyigeek.top:<span class="variable">$server_port</span>/index.html;</span><br><span class="line">    echo_before_body <span class="string">'www.WeiyiGeek.top'</span>;</span><br><span class="line">    echo_after_body <span class="string">'[END]'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 示例4.多次输出同一个字符串以及显示客户端请求header与请求body主体参数</span></span><br><span class="line">  location /nginx-module/duplicate &#123;</span><br><span class="line">    default_type <span class="string">'text/plain'</span>;</span><br><span class="line">    echo_duplicate 3 <span class="string">"--"</span>;</span><br><span class="line">    echo_duplicate 1 <span class="string">"\rHello World! by ngx_http_echo_module.so \r\r"</span>;</span><br><span class="line">    <span class="comment"># echo_duplicate 1000_000 "Hello World! by ngx_http_echo_module.so";</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\r"</span>;</span><br><span class="line">    echo_duplicate 1 <span class="variable">$echo_client_request_headers</span>;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\r"</span>;</span><br><span class="line">    echo_read_request_body;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\r"</span>;</span><br><span class="line">    echo_request_body;</span><br><span class="line">    echo_duplicate 3 <span class="string">"--"</span>;</span><br><span class="line">    <span class="built_in">echo</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 示例5.正则匹配请求参数，注意`$arg_var`后面的var是可以自定义设置，此处为flag参数。</span></span><br><span class="line">  location ^~ /nginx-module/<span class="keyword">if</span> &#123;</span><br><span class="line">    default_type <span class="string">'text/plain'</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$res</span> default;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$arg_flag</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$arg_flag</span> ~* <span class="string">'^a'</span>) &#123;</span><br><span class="line">      <span class="built_in">set</span> <span class="variable">$res</span> change;</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$arg_flag</span>, <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$res</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充 echo_subrequest_async 异步请求</strong><br>描述: 使用 HTTP 方法、可选的 url 参数（或查询字符串）和可选的请求主体发起异步子请求，请求主体可以定义为字符串或包含主体的文件的路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /multi will yields</span></span><br><span class="line"> <span class="comment">#   querystring: foo=Foo</span></span><br><span class="line"> <span class="comment">#   method: POST</span></span><br><span class="line"> <span class="comment">#   body: hi</span></span><br><span class="line"> <span class="comment">#   content length: 2</span></span><br><span class="line"> <span class="comment">#   ///</span></span><br><span class="line"> <span class="comment">#   querystring: bar=Bar</span></span><br><span class="line"> <span class="comment">#   method: PUT</span></span><br><span class="line"> <span class="comment">#   body: hello</span></span><br><span class="line"> <span class="comment">#   content length: 5</span></span><br><span class="line"> <span class="comment">#   ///</span></span><br><span class="line"> location /multi &#123;</span><br><span class="line">     echo_subrequest_async POST <span class="string">'/sub'</span> -q <span class="string">'foo=Foo'</span> -b <span class="string">'hi'</span>;</span><br><span class="line">     echo_subrequest_async PUT <span class="string">'/sub'</span> -q <span class="string">'bar=Bar'</span> -b <span class="string">'hello'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> location /sub &#123;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"querystring: <span class="variable">$query_string</span>"</span>;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"method: <span class="variable">$echo_request_method</span>"</span>;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"body: <span class="variable">$echo_request_body</span>"</span>;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"content length: <span class="variable">$http_content_length</span>"</span>;</span><br><span class="line">     <span class="built_in">echo</span> <span class="string">'///'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 3.完成配置后重载nginx服务, 通过浏览器访问上述路径验证模块使用与输出，效果如下图所示:</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220801143605.png" alt="WeiyiGeek.use ngx_http_echo_module" title="" class="">                <p>WeiyiGeek.use ngx_http_echo_module</p>            </figure><p>该模块的其它使用请参考其项目地址Readme文档，此处演示了如何加载动态链接库到nginx,并且使用链接库中的模块。</p><p><br/></p><h3 id="2-Nginx-实践使用-lua-resty-redis-模块连接-Redis-进行数据操作与展示"><a href="#2-Nginx-实践使用-lua-resty-redis-模块连接-Redis-进行数据操作与展示" class="headerlink" title="2.Nginx 实践使用 lua-resty-redis 模块连接 Redis 进行数据操作与展示"></a>2.Nginx 实践使用 lua-resty-redis 模块连接 Redis 进行数据操作与展示</h3><p>描述: 前面环境部署中已下载 ngx_lua_nginx 模块的 Redis 客户端驱动程序Lua库, 下面将演示如何在 Nginx 基于 ngx_lua_nginx 模块连接到Redis内存数据库进行相应数据查找，好了本小节就直奔主题。</p><p>语法参考: <a href="https://github.com/openresty/lua-resty-redis#synopsis" target="_blank" rel="noopener">https://github.com/openresty/lua-resty-redis#synopsis</a></p><p><strong>废话不多说，实践出真知</strong></p><p>Step 1.在前面环境安装中我们解压在 ngx_lua_nginx 模块使用 Redis 客户端驱动程序Lua库，并将其 Lib 目录复制到 <code>/usr/local/nginx/lua/</code> 目录中，其次我也准备了Redis数据库环境，针对安装部署步骤就不在详述了, 想要快速安装的朋友可以参考我的此篇文章【[Redis内存数据库环境快速搭建部署][<a href="https://blog.weiyigeek.top/2022/4-24-653.html]】。">https://blog.weiyigeek.top/2022/4-24-653.html]】。</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ tree /usr/<span class="built_in">local</span>/nginx/lua/lib/</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/lua/lib/</span><br><span class="line">└── resty</span><br><span class="line">    └── redis.lua</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 数据库 &amp; 为了演示数据准备两个Key即domain/blog</span></span><br><span class="line">192.168.1.22 6379 weiyigeek.top</span><br><span class="line">/data <span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; auth  weiyigeek.top</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> domain www.weiyigeek.top </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> blog blog.weiyigeek.top</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 2.想要在Nginx使用该<code>redis.lua</code>链接到数据库，首先我们需要在<code>nginx.conf</code>配置文件中加入该lua包路径<code>/usr/local/nginx/lua/lib/</code>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;lua_package_path&quot; &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">lua_package_path &#39;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;lua&#x2F;lib&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;src&#x2F;lua-resty-core-0.1.23&#x2F;lib&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;src&#x2F;lua-resty-lrucache-0.13&#x2F;lib&#x2F;?.lua;&#39;</span><br></pre></td></tr></table></figure></p><p><br/></p><p>Step 3.此处也是在 <code>demo.conf</code> 中进行配置使用Redis客户端驱动程序Lua库，连接到Redis数据库中, 此处为了方便演示就直接在该配置文件<code>content_by_lua_block</code> 代码块中使用lua语法，在企业生产实践环境中一定要将其写入到lua文件文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/nginx/conf.d/demo.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">  location /redis/get &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$key</span> <span class="variable">$arg_key</span>;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">      -- <span class="comment"># 引入resty.redis模块与创建实例化对象</span></span><br><span class="line">      <span class="built_in">local</span> redis = require <span class="string">"resty.redis"</span></span><br><span class="line">      <span class="built_in">local</span> client = redis:new()</span><br><span class="line">      <span class="built_in">local</span> REDIS_HOST = <span class="string">"192.168.1.22"</span></span><br><span class="line">      <span class="built_in">local</span> REDIS_PROT = 6379</span><br><span class="line">      <span class="built_in">local</span> REDIS_AUTH = <span class="string">"weiyigeek.top"</span></span><br><span class="line">      -- <span class="comment"># ngx.log(ngx.ERR, ngx.var.key)</span></span><br><span class="line">      -- <span class="comment"># 分别设置连接、发送和读取超时阈值（以毫秒为单位），用于后续套接字操作。</span></span><br><span class="line">      client:set_timeouts(1000, 1000, 1000)</span><br><span class="line">  </span><br><span class="line">      -- <span class="comment"># 创建链接对象, 连接到Redis数据库</span></span><br><span class="line">      ngx.say(<span class="string">"1.connect redis server..... &lt;br&gt;"</span>);</span><br><span class="line">      <span class="built_in">local</span> ok, err = client:connect(REDIS_HOST, REDIS_PROT)</span><br><span class="line">      <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">      end</span><br><span class="line">  </span><br><span class="line">      -- <span class="comment"># 认证</span></span><br><span class="line">      ngx.say(<span class="string">"2.auth redis server..... &lt;br&gt;"</span>);</span><br><span class="line">      <span class="built_in">local</span> res, err = client:auth(REDIS_AUTH)</span><br><span class="line">      <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"failed to authenticate: "</span>, err)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">      end</span><br><span class="line">  </span><br><span class="line">      -- <span class="comment"># 获取指定请求键值</span></span><br><span class="line">      ngx.say(<span class="string">"3.get custom KV for redis server, Key = "</span>,ngx.var.key,<span class="string">" &lt;br&gt;"</span>);</span><br><span class="line">      <span class="built_in">local</span> res, err = client:get(ngx.var.key)</span><br><span class="line">      <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">          ngx.say(<span class="string">"failed to get key: "</span>, err)</span><br><span class="line">          <span class="built_in">return</span></span><br><span class="line">      end</span><br><span class="line">      <span class="keyword">if</span> res == ngx.null <span class="keyword">then</span></span><br><span class="line">          ngx.say(<span class="string">"key not found."</span>)</span><br><span class="line">          <span class="built_in">return</span></span><br><span class="line">      end</span><br><span class="line"></span><br><span class="line">      -- <span class="comment"># 输出结果</span></span><br><span class="line">      ngx.say(<span class="string">"&lt;b style='color:red'&gt;4.result value: "</span>,res,<span class="string">"&lt;/b&gt;&lt;br/&gt;"</span>)</span><br><span class="line"></span><br><span class="line">      -- <span class="comment"># 使用完毕后立即关闭销毁Redis连接(短连接可以如此使用,如果是长链接建议回收该连接池对象即可)</span></span><br><span class="line">      <span class="built_in">local</span> ok, err = client:close()</span><br><span class="line">      <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"failed to close: "</span>, err)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        ngx.say(<span class="string">"5.just close the Redis connection right away &lt;br/&gt;"</span>)</span><br><span class="line">      end</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220801161649.png" alt="WeiyiGeek.Lua-redis-demo1" title="" class="">                <p>WeiyiGeek.Lua-redis-demo1</p>            </figure><p><br/></p><p>Step 5.在演示一个示例，我们可以一次性执行多个redis操作命令 lua-resty-redis 库支持pipeline提交，下面我们演示使用 <code>content_by_lua_file</code> 关键字指定连接操作redis的lua脚本地址(<code>/usr/local/nginx/lua/custom/nginx-redis.lua</code>)实践, 该方式在线上环境中推荐使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 操作 redis 数据库的 lua 脚本示例。</span></span><br><span class="line">tee /usr/<span class="built_in">local</span>/nginx/lua/custom/nginx-redis.lua &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">-- <span class="comment"># 引入resty.redis模块与创建实例化对象</span></span><br><span class="line"><span class="built_in">local</span> redis = require <span class="string">"resty.redis"</span></span><br><span class="line"><span class="built_in">local</span> client = redis:new()</span><br><span class="line"><span class="built_in">local</span> REDIS_HOST = <span class="string">"192.168.1.22"</span></span><br><span class="line"><span class="built_in">local</span> REDIS_PROT = 6379</span><br><span class="line"><span class="built_in">local</span> REDIS_AUTH = <span class="string">"weiyigeek.top"</span></span><br><span class="line">-- <span class="comment"># ngx.log(ngx.ERR, ngx.var.key)</span></span><br><span class="line">-- <span class="comment"># 分别设置连接、发送和读取超时阈值（以毫秒为单位），用于后续套接字操作。</span></span><br><span class="line">client:set_timeouts(1000, 1000, 1000)</span><br><span class="line"></span><br><span class="line">-- <span class="comment"># 验证请求的参数是否存在</span></span><br><span class="line"><span class="keyword">if</span> (ngx.var.key == ngx.null and ngx.var.value == ngx.null) </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"Request parameters : key + value not found!"</span>)</span><br><span class="line">  ngx.exit(404)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- <span class="comment"># 创建链接对象, 连接到Redis数据库</span></span><br><span class="line">ngx.say(<span class="string">"1.connect redis server..... &lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">local</span> ok, err = client:connect(REDIS_HOST, REDIS_PROT)</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- <span class="comment"># 认证</span></span><br><span class="line">ngx.say(<span class="string">"2.auth redis server..... &lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">local</span> res, err = client:auth(REDIS_AUTH)</span><br><span class="line"><span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to authenticate: "</span>, err)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- <span class="comment"># 使用 pipeline 通道方式进行redis 数据库操作</span></span><br><span class="line">client:init_pipeline()</span><br><span class="line">client:<span class="built_in">set</span>(ngx.var.key, ngx.var.value)</span><br><span class="line">client:get(ngx.var.key)</span><br><span class="line">client:get(<span class="string">"domain"</span>)</span><br><span class="line"><span class="built_in">local</span> results, err = client:commit_pipeline()</span><br><span class="line"><span class="keyword">if</span> not results <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to commit the pipelined requests: "</span>, err)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 结果遍历</span><br><span class="line"><span class="keyword">for</span> i, res <span class="keyword">in</span> ipairs(results) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span>(res) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> res[1] == <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">          ngx.say(<span class="string">"failed to run command "</span>, i, <span class="string">": "</span>, res[2],<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        -- process the table value</span><br><span class="line">        ngx.say(<span class="string">"3) 3."</span>,i, <span class="string">": "</span>, res[2],<span class="string">"&lt;br/&gt;"</span>)</span><br><span class="line">      end</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    -- process the scalar value</span><br><span class="line">    ngx.say(<span class="string">"&lt;p style='color:red'&gt;3) "</span>,i,<span class="string">"---"</span>,res,<span class="string">"&lt;/p&gt;"</span>)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 将当前 Redis 连接立即放入 ngx_lua cosocket 连接池（将其放入大小为100的连接池中，最大空闲时间为10秒）。</span><br><span class="line"><span class="built_in">local</span> ok, err = client:set_keepalive(10000, 100)</span><br><span class="line"><span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">  ngx.say(<span class="string">"failed to set keepalive: "</span>, err)</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">end</span><br><span class="line">ngx.say(<span class="string">"4.将当前 Redis 连接立即放入 ngx_lua cosocket 连接池&lt;br/&gt;"</span>)</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 配置 demo.conf 文件 同样在 server 片段中加入如下 location 片段。</span></span><br><span class="line">server &#123;</span><br><span class="line">....</span><br><span class="line">  location /redis/pipeline &#123;</span><br><span class="line">    default_type <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="comment"># 获取请求参数中key的值与value的值并存放到nginx环境变量中</span></span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$key</span> <span class="variable">$arg_key</span>;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$value</span> <span class="variable">$arg_value</span>;</span><br><span class="line">    <span class="comment"># 调用并执行指定的lua脚本</span></span><br><span class="line">    content_by_lua_file ./lua/custom/nginx-redis.lua;</span><br><span class="line">  &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置完成后我们便可以重载nginx，并使用访问浏览器访问上述路径，例如: <code>http://demo.weiyigeek.top/redis/pipeline?key=name&amp;value=WeiyiGeek</code>，此处我演示的结果如下图所示。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220801174916.png" alt="WeiyiGeek.lua-redis-pipeline" title="" class="">                <p>WeiyiGeek.lua-redis-pipeline</p>            </figure><p><br></p><h3 id="3-Nginx-实践读取Redis数据库中图片绑定对应键值并进行图片展示"><a href="#3-Nginx-实践读取Redis数据库中图片绑定对应键值并进行图片展示" class="headerlink" title="3.Nginx 实践读取Redis数据库中图片绑定对应键值并进行图片展示"></a>3.Nginx 实践读取Redis数据库中图片绑定对应键值并进行图片展示</h3><p>描述: 假如在这样一个场景中，为了避免恶意用户遍历有规律的图片进行下载，那如何解决这个问题呢?</p><p>方法是有得但也不限于本节实践的案例，此处我们可以将其图片名称或者图片md5值存入到Redis数据库中作为Key，而实际的图片路径作为Value，在请求时我们将该md5值作为参数进行传入，经过 Nginx 对请求参数的处理，使用前面的方式在 Lua 脚本中连接Redis，并将URL传递的md5参数作为key进行get查询，并将查询到的图片路径，反馈给set指令设置的变量之中，然后我们便可以通过 proxy_pass 进行代理访问(地址栏中的url不会变化，保证实际的图片路径)，或者也可以加上一个头<code>Content-Disposition</code>直接进行图片下载。</p><p>不在多说废话了,只有实践才是王道。</p><p><strong>实践流程:</strong></p><ul><li>Step 1.准备一个图片目录以及放入几张图片进行演示，此处你可以使用图片名称md5也可使用图形文件本身md5效验值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ tree /usr/<span class="built_in">local</span>/nginx/html/</span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/html/</span><br><span class="line">├── 50x.html</span><br><span class="line">├── images</span><br><span class="line">│   ├── 1562941454569.jpeg</span><br><span class="line">│   ├── 1562941454570.jpeg</span><br><span class="line">│   └── 1562941454571.png</span><br><span class="line">└── index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的MD5值</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/html/images<span class="comment"># md5sum * | awk '&#123;print "set "$1" "$2&#125;'</span></span><br><span class="line"><span class="built_in">set</span> 6fad4c2466dc7f61fb055021ec65324d  1562941454569.jpeg</span><br><span class="line"><span class="built_in">set</span> 611877180883388de4752ded33a81165  1562941454570.jpeg</span><br><span class="line"><span class="built_in">set</span> 6636d52bfbe068177df5219edf4dd456  1562941454571.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入KV到redis数据库中</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 6fad4c2466dc7f61fb055021ec65324d 1562941454569.jpeg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 611877180883388de4752ded33a81165 1562941454570.jpeg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> 6636d52bfbe068177df5219edf4dd456 1562941454571.png</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>Step 2.在<code>demo.conf</code>文件中的<code>server</code>片段中增加 <code>location</code> 片段，其中进行如下配置:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ vim conf.d/demo.conf</span><br><span class="line">server &#123;</span><br><span class="line">......</span><br><span class="line"> location = /api/v2/images/get &#123;</span><br><span class="line">   resolver 223.6.6.6;</span><br><span class="line">   <span class="built_in">set</span> <span class="variable">$key</span> <span class="variable">$arg_md5sum</span>;</span><br><span class="line">   <span class="built_in">set</span> <span class="variable">$name</span> <span class="string">""</span>;</span><br><span class="line">   access_by_lua_block &#123;</span><br><span class="line">    <span class="built_in">local</span> redis = require <span class="string">"resty.redis"</span></span><br><span class="line">    <span class="built_in">local</span> client = redis:new()</span><br><span class="line">    <span class="built_in">local</span> REDIS_HOST = <span class="string">"192.168.1.22"</span></span><br><span class="line">    <span class="built_in">local</span> REDIS_PROT = 6379</span><br><span class="line">    <span class="built_in">local</span> REDIS_AUTH = <span class="string">"weiyigeek.top"</span></span><br><span class="line">    client:set_timeouts(1000, 1000, 1000)</span><br><span class="line">    <span class="built_in">local</span> ok, err = client:connect(REDIS_HOST, REDIS_PROT)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> res, err = client:auth(REDIS_AUTH)</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to authenticate: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> res, err = client:get(ngx.var.key)</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"failed to get key: "</span>, err)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">if</span> res == ngx.null <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"key not found."</span>)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      -- <span class="comment"># 关键点将redis中指定键的值赋予给nginx指定变量</span></span><br><span class="line">      ngx.var.name = res</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> ok, err = client:set_keepalive(10000, 100)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to set keepalive: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">   &#125;</span><br><span class="line">   proxy_pass <span class="variable">$scheme</span>://<span class="variable">$server_name</span>/images/<span class="variable">$name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在配置完成后我们重载 Nginx，然后利用浏览器进行访问如上URL，例如<code>http://demo.weiyigeek.top/api/v2/images/get?md5sum=6636d52bfbe068177df5219edf4dd456</code>，执行结果如下所示:</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220802145343.png" alt="WeiyiGeek.access_by_lua_block-proxy_pass" title="" class="">                <p>WeiyiGeek.access_by_lua_block-proxy_pass</p>            </figure><p><br/></p><ul><li>Step 3.如果我们想通过浏览器访问上述地址就直接弹出源文件名称进行下载的，我们则可以在 <code>proxy_pass</code> 片段后加上如下 <code>header</code> 头: <code>add_header Content-Disposition &quot;attachment;filename=$name&quot;;</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">proxy_pass <span class="variable">$scheme</span>://<span class="variable">$server_name</span>/images/<span class="variable">$name</span>;</span><br><span class="line">add_header Content-Disposition <span class="string">"attachment;filename=<span class="variable">$name</span>"</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载Nginx后利用CURL访问该URL</span></span><br><span class="line">$ curl -I http://demo.weiyigeek.top/api/v2/images/get?md5sum=6636d52bfbe068177df5219edf4dd456</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.22.0</span><br><span class="line">Date: Tue, 02 Aug 2022 02:23:12 GMT</span><br><span class="line">Content-Type: image/png</span><br><span class="line">Content-Length: 32641</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Last-Modified: Wed, 23 Mar 2022 00:48:26 GMT</span><br><span class="line">ETag: <span class="string">"623a6e5a-7f81"</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Disposition: attachment;filename=1562941454571.png</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220802150239.png" alt="WeiyiGeek.proxy_pass-Content-Disposition" title="" class="">                <p>WeiyiGeek.proxy_pass-Content-Disposition</p>            </figure><p><br/></p><ul><li>Step 4.当然，你也可使用<code>rewrite_by_lua_block</code>代码块包含Lua可直接或者图片路径，然后使用<code>ngx.redirect()</code>方法进行跳转。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$ vim conf.d/demo.conf</span><br><span class="line">server &#123;</span><br><span class="line">......</span><br><span class="line"> location = /api/v1/images/get &#123;</span><br><span class="line">  resolver 223.6.6.6;</span><br><span class="line">  <span class="built_in">set</span> <span class="variable">$key</span> <span class="variable">$arg_md5sum</span>;</span><br><span class="line">  rewrite_by_lua_block &#123;</span><br><span class="line">    <span class="built_in">local</span> redis = require <span class="string">"resty.redis"</span></span><br><span class="line">    <span class="built_in">local</span> client = redis:new()</span><br><span class="line">    <span class="built_in">local</span> REDIS_HOST = <span class="string">"192.168.1.22"</span></span><br><span class="line">    <span class="built_in">local</span> REDIS_PROT = 6379</span><br><span class="line">    <span class="built_in">local</span> REDIS_AUTH = <span class="string">"weiyigeek.top"</span></span><br><span class="line">    client:set_timeouts(1000, 1000, 1000)</span><br><span class="line">    <span class="built_in">local</span> ok, err = client:connect(REDIS_HOST, REDIS_PROT)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> res, err = client:auth(REDIS_AUTH)</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to authenticate: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> res, err = client:get(ngx.var.key)</span><br><span class="line">    <span class="keyword">if</span> not res <span class="keyword">then</span></span><br><span class="line">        ngx.say(<span class="string">"failed to get key: "</span>, err)</span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">if</span> res == ngx.null <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"key not found."</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      -- <span class="comment"># 关键点图片格式化。</span></span><br><span class="line">      <span class="built_in">return</span> ngx.redirect(string.format(<span class="string">"%s%s"</span>,<span class="string">"/images/"</span>,res))</span><br><span class="line">    end</span><br><span class="line">    <span class="built_in">local</span> ok, err = client:set_keepalive(10000, 100)</span><br><span class="line">    <span class="keyword">if</span> not ok <span class="keyword">then</span></span><br><span class="line">      ngx.say(<span class="string">"failed to set keepalive: "</span>, err)</span><br><span class="line">      <span class="built_in">return</span></span><br><span class="line">    end</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment"># 若没有匹配搭配到进行跳转进行跳转则访问首页</span></span><br><span class="line">   proxy_pass <span class="variable">$scheme</span>://<span class="variable">$server_name</span>/index.html;</span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220802153937.png" alt="WeiyiGeek.rewrite_by_lua_block+ngx.redirect" title="" class="">                <p>WeiyiGeek.rewrite_by_lua_block+ngx.redirect</p>            </figure><p>好了，本章实践就到此处了，更多的奇技淫巧尽在 [weiyigeek] 公众号.</p><hr><h2 id="0x03-扩展补充"><a href="#0x03-扩展补充" class="headerlink" title="0x03 扩展补充"></a>0x03 扩展补充</h2><p><strong>示例1.使用 ngx.location.capture() 请求内部接口</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">location = /auth &#123;</span><br><span class="line">  internal;</span><br><span class="line">  retur 200 <span class="string">'&#123;"status":"$auth_status"&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处根据业务的需求来写正则表达式，一定要个 redis 里的 KEY  对应上</span></span><br><span class="line">location  ~/[0-9].*\.(gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">  <span class="built_in">set</span> <span class="variable">$target</span> <span class="string">''</span>;</span><br><span class="line">  access_by_lua <span class="string">'</span></span><br><span class="line"><span class="string">  # 使用 nginx 的内部参数 ngx.var.uri 来获取请求的 uri 地址，如 /000001.jpg</span></span><br><span class="line"><span class="string">    local key = ngx.var.uri</span></span><br><span class="line"><span class="string">  # 根据正则匹配到 KEY ，从 redis 数据库里获取文件 ID (路径和文件名)</span></span><br><span class="line"><span class="string">    local res = ngx.location.capture(</span></span><br><span class="line"><span class="string">        "/Redis", &#123; args = &#123; key = key &#125; &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    if res.status ~= 200 then</span></span><br><span class="line"><span class="string">        ngx.log(ngx.ERR, "Redis server returned bad status: ",res.status)</span></span><br><span class="line"><span class="string">        ngx.exit(res.status)</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    if not res.body then</span></span><br><span class="line"><span class="string">        ngx.log(ngx.ERR, "Redis returned empty body")</span></span><br><span class="line"><span class="string">        ngx.exit(500)</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">    local parser = require "Redis.parser"</span></span><br><span class="line"><span class="string">    local filename, typ = parser.parse_reply(res.body)</span></span><br><span class="line"><span class="string">    if typ ~= parser.BULK_REPLY or not server then</span></span><br><span class="line"><span class="string">        ngx.log(ngx.ERR, "bad Redis response: ", res.body)</span></span><br><span class="line"><span class="string">        ngx.exit(500)</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">    ngx.var.target = filename</span></span><br><span class="line"><span class="string">  '</span>;</span><br><span class="line">    proxy_pass http://10.20.172.196/<span class="variable">$target</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>示例2.Nginx在reponse返回的cookie中设置HttpOnly</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">local</span> cookies = ngx.header.set_cookie</span><br><span class="line"><span class="keyword">if</span> cookies <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(cookies) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> pairs(cookies) <span class="keyword">do</span></span><br><span class="line">            cookies[k] = v .. <span class="string">"; HttpOnly"</span></span><br><span class="line">            ngx.header.set_cookie = cookies</span><br><span class="line">        end</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">local</span> cookiesStr = cookies .. <span class="string">"; HttpOnly"</span></span><br><span class="line">        ngx.header.set_cookie = cookiesStr;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><br>以上脚本的含义：</p><ul><li>获取 nginx 响应信息中的cookie信息</li><li>如果cookie信息为空，则直接跳过，如果不为空则判断是多个 cookie 还是单个 cookie 返回</li><li>如果是多个 cookie 的话，则遍历数组，每个 cookie 字符串拼接 ‘; HttpOnly’ 的字符串</li><li>如果是单个 cookie 的话，则直接拼接 ‘; HttpOnly’ 的字符串</li></ul><hr><h2 id="0x0n-入坑出坑"><a href="#0x0n-入坑出坑" class="headerlink" title="0x0n 入坑出坑"></a>0x0n 入坑出坑</h2><h3 id="问题1-当编译-Nginx-时报checking-for-LuaJIT-2-x-not-found-configure-error-unsupported-LuaJIT-version-ngx-http-lua-module-requires-LuaJIT-2-x-错误时的解决办法。"><a href="#问题1-当编译-Nginx-时报checking-for-LuaJIT-2-x-not-found-configure-error-unsupported-LuaJIT-version-ngx-http-lua-module-requires-LuaJIT-2-x-错误时的解决办法。" class="headerlink" title="问题1. 当编译 Nginx 时报checking for LuaJIT 2.x ... not found, ./configure: error: unsupported LuaJIT version; ngx_http_lua_module requires LuaJIT 2.x. 错误时的解决办法。"></a>问题1. 当编译 Nginx 时报<code>checking for LuaJIT 2.x ... not found, ./configure: error: unsupported LuaJIT version; ngx_http_lua_module requires LuaJIT 2.x.</code> 错误时的解决办法。</h3><p>问题描述: tell nginx’s build system where to find LuaJIT 2.1<br>解决办法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时生效</span></span><br><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/luajit/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/luajit/include/luajit-2.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line">tee -a /etc/profile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/luajit/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/luajit/include/luajit-2.1</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><p><br/></p><h3 id="问题2-在使用luajit官方主分支LuaJIT-2-1-0-beta3提供LuaJIT安装部署出现nginx-alert-detected-a-LuaJIT-version-which-is-not-OpenResty-39-s-以及nginx-alert-failed-to-load-the-39-resty-core-39-module警告。"><a href="#问题2-在使用luajit官方主分支LuaJIT-2-1-0-beta3提供LuaJIT安装部署出现nginx-alert-detected-a-LuaJIT-version-which-is-not-OpenResty-39-s-以及nginx-alert-failed-to-load-the-39-resty-core-39-module警告。" class="headerlink" title="问题2.在使用luajit官方主分支LuaJIT-2.1.0-beta3提供LuaJIT安装部署出现nginx: [alert] detected a LuaJIT version which is not OpenResty&#39;s;以及nginx: [alert] failed to load the &#39;resty.core&#39; module警告。"></a>问题2.在使用luajit官方主分支<code>LuaJIT-2.1.0-beta3</code>提供LuaJIT安装部署出现<code>nginx: [alert] detected a LuaJIT version which is not OpenResty&#39;s;</code>以及<code>nginx: [alert] failed to load the &#39;resty.core&#39; module</code>警告。</h3><p>错误信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/sbin/nginx </span><br><span class="line">nginx: [alert] detected a LuaJIT version <span class="built_in">which</span> is not OpenResty<span class="string">'s; many optimizations will be disabled and performance will be compromised (see https://github.com/openresty/luajit2 for OpenResty'</span>s LuaJIT or, even better, consider using the OpenResty releases from https://openresty.org/en/download.html)</span><br><span class="line">nginx: [alert] failed to load the <span class="string">'resty.core'</span> module (https://github.com/openresty/lua-resty-core); ensure you are using an OpenResty release from https://openresty.org/en/download.html (reason: module <span class="string">'resty.core'</span> not found:</span><br><span class="line">  no field package.preload[<span class="string">'resty.core'</span>]</span><br><span class="line">  no file <span class="string">'./resty/core.lua'</span></span><br><span class="line">  no file <span class="string">'/usr/local/share/luajit-2.1.0-beta3/resty/core.lua'</span></span><br><span class="line">  no file <span class="string">'/usr/local/share/lua/5.1/resty/core.lua'</span></span><br><span class="line">  no file <span class="string">'/usr/local/share/lua/5.1/resty/core/init.lua'</span></span><br><span class="line">  no file <span class="string">'./resty/core.so'</span></span><br><span class="line">  no file <span class="string">'/usr/local/lib/lua/5.1/resty/core.so'</span></span><br><span class="line">  no file <span class="string">'/usr/local/lib/lua/5.1/loadall.so'</span></span><br><span class="line">  no file <span class="string">'./resty.so'</span></span><br><span class="line">  no file <span class="string">'/usr/local/lib/lua/5.1/resty.so'</span></span><br><span class="line">  no file <span class="string">'/usr/local/lib/lua/5.1/loadall.so'</span>) <span class="keyword">in</span> /usr/<span class="built_in">local</span>/nginx/nginx.conf:117</span><br></pre></td></tr></table></figure><br><br></p><p>问题原因1: 提示LuaJIT的版本不匹配OpenResty’s内核版本, 让我不要用这个luajit版本，可以用openresty提供的luajit优化版本，或者干脆直接用openresty,下面将安装卸载luajit官网版本，下载openresty提供的luajit优化版本（即上面环境安装已经实践了，按照上面版本进行安装一般不会存在该问题）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你可能会进行 Lua 脚本解释器的安装 LuaJIT </span></span><br><span class="line">http://luajit.org/download.html</span><br><span class="line">wget -c https://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz</span><br><span class="line">tar -zxf LuaJIT-2.1.0-beta3.tar.gz &amp;&amp; <span class="built_in">cd</span> LuaJIT-2.1.0-beta3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -sf /usr/<span class="built_in">local</span>/bin/luajit-2.1.0-beta3 /usr/<span class="built_in">local</span>/bin/luajit</span><br><span class="line"><span class="comment"># 卸载LuaJIT官网主分支版本，然后重新安装openresty提供的luajit优化版即可</span></span><br><span class="line">make uninstall</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure></p><p>问题原因2: 提示加载’resty.core’模块失败，其解决办法，按照<code>https://github.com/openresty/lua-nginx-module/issues/1509</code>上面所说,  安装<code>lua-resty-core</code>和依赖文件<code>lua-resty-lrucache</code>解决问题，即我前面实践中已经进行此部分操作，若不会操作请上翻到 【安装部署】标题进行查看。</p><hr><p>原文地址: <a href="https://blog.weiyigeek.top/2022/7-2-676.html">https://blog.weiyigeek.top/2022/7-2-676.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;本章目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;为啥有此篇文章?&lt;/strong&gt;&lt;br&gt;描述: 在进行公司的图片存储解决方案研究中，最开始准备使用的是FastDFS，但是经过深思熟虑，以及后期运维成本考虑还是放弃了，只能转而使用存储直接存放图片文件，直接请求效率提示杠杠的，但如何最大限度保证业务安全以及减少业务对数据库增删改查的压力? 在 Google 、Github一番查找后发现可以直接使用 Nginx + Lua 进行访问数据进行获取静态资源信息，而不用业务系统进行访问数据库直接获取静态资源路径，而显式的展现资源真实暴露给外部，非常容易被批量抓取。&lt;/p&gt;
&lt;p&gt;其次笔者在实践中发现当前搜索到的安装部署Nginx+Lua可能已将不适用最新稳定版本的Nginx版本，基本上都是 1.15.x ~ 1.18.x，对于当前Nginx 1.22.0 版本来说显然是太老了。&lt;br&gt;所以本章就该问题进行 &lt;code&gt;Nginx + Lua + Redis&lt;/code&gt; 模块环境的安装以及简单的实践，希望能帮助到各位有相同需求的Person。&lt;/p&gt;</summary>
    
    
    
    <category term="运维实践" scheme="https://blog.weiyigeek.top/categories/%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Nginx" scheme="https://blog.weiyigeek.top/tags/Nginx/"/>
    
    <category term="Lua" scheme="https://blog.weiyigeek.top/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>宝德PowerLeader服务器基础知识与管理</title>
    <link href="https://blog.weiyigeek.top/2022/6-21-659.html"/>
    <id>https://blog.weiyigeek.top/2022/6-21-659.html</id>
    <published>2022-06-21T11:35:30.000Z</published>
    <updated>2022-07-18T09:35:13.092Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述: 由于公司买的GPU服务器是采用宝德PowerLeader主板和invida的tesla-v100, 所以本章为了方便更好的运维, 用的此篇文章。</p><p>宝德PowerLeader官网: <a href="http://www.powerleader.com.cn/" target="_blank" rel="noopener">http://www.powerleader.com.cn/</a><br>保修查询: <a href="http://www.powerleader.com.cn/about_51.html?cid=51" target="_blank" rel="noopener">http://www.powerleader.com.cn/about_51.html?cid=51</a></p><hr><h2 id="0x01-常用实践"><a href="#0x01-常用实践" class="headerlink" title="0x01 常用实践"></a>0x01 常用实践</h2><h3 id="1-配置BMC管理口地址"><a href="#1-配置BMC管理口地址" class="headerlink" title="1.配置BMC管理口地址"></a>1.配置BMC管理口地址</h3><p>描述: 服务器支持远程管理, 我们可以按照需要进行相应IP地址的配置, 再也不用每次都跑到机房去了。</p><p>宝德PowerLeader缺省配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BMC 管理地址: https://192.168.255.254</span><br><span class="line">管理用户: ADMIN</span><br><span class="line">管理密码: Admin123@pl</span><br><span class="line"></span><br><span class="line">操作系统用户名: root</span><br><span class="line">操作系统密码: 11111111</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527143103.png" alt="WeiyiGeek.宝德服务器管理平台" title="" class="">                <p>WeiyiGeek.宝德服务器管理平台</p>            </figure><p>宝德PowerLeader服务器管理平台界面:</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527143214.png" alt="WeiyiGeek.管理平台界面" title="" class="">                <p>WeiyiGeek.管理平台界面</p>            </figure><p>访问 Configuration -&gt; 点击 Network (See the MAC address or change network settings, including dynamic and static IP assignment.) -&gt; 设置 IPv4 Setting </p><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220527143437.png" alt="WeiyiGeek.BMC管理口地址设置"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="HardwareServer" scheme="https://blog.weiyigeek.top/categories/HardwareServer/"/>
    
    
    <category term="PowerLeader" scheme="https://blog.weiyigeek.top/tags/PowerLeader/"/>
    
  </entry>
  
  <entry>
    <title>Grafana之Loki日志聚合系统入门介绍与企业实践</title>
    <link href="https://blog.weiyigeek.top/2022/6-15-667.html"/>
    <id>https://blog.weiyigeek.top/2022/6-15-667.html</id>
    <published>2022-06-15T11:34:30.000Z</published>
    <updated>2022-07-22T08:44:46.329Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-快速入门"><a href="#0x00-快速入门" class="headerlink" title="0x00 快速入门"></a>0x00 快速入门</h2><h3 id="1-什么是-Loki"><a href="#1-什么是-Loki" class="headerlink" title="1.什么是 Loki ?"></a>1.什么是 Loki ?</h3><p>描述：在对公司容器的日志存储查询方案进行设计的时候，发现主流的 <code>ELK (Elasticsearch, Logstash, Kibana)</code> 或者 <code>EFK (Elasticsearch, Filebeat or Fluentd, Kibana)</code> 比较重，再加上现阶段对于 ES 复杂的搜索功能很多都用不上，最终选择了 Grafana 开源的 Loki 日志系统即 PLG 日志解决方案。</p><p>本篇文章将主要介绍使用 Loki 实现 Kubernetes 容器日志监控的相关知识，感兴趣的朋友一起看看吧!</p><p><strong>本章完整原文首发地址</strong>: <a href="https://mp.weixin.qq.com/s/zRg9ePFbVKyLxgy-K2TJHg" target="_blank" rel="noopener">如何使用Grafana+Loki+Promtail日志聚合系统针对Kubernetes集群中Pods应用日志采集搜索展示-https://mp.weixin.qq.com/s/zRg9ePFbVKyLxgy-K2TJHg</a></p><p><br/></p><p><strong>什么是 Grafana Loki?</strong></p><blockquote><p>官方介绍: Like Prometheus, but for logs.<br>Grafana Loki 是一个日志聚合系统，旨在存储和查询来自所有应用程序和基础架构的日志。<br>Grafana Loki 项目由 Grafana Labs 团队开发，并在 2018 年的 KubeCon 上发布 (在 AGPLv3 许可下发布), 其基于 Go 语言实现，它是一个受 Prometheus 启发的水平可扩展，高可用性，多租户的日志聚合系统, 其相对比于ELK更加轻量级，它的设计非常具有成本效益且易于操作。</p></blockquote><p><br/></p><p><strong>那 Loki 与 Promethus 区别在什么地方呢?</strong></p><blockquote><p>答:Loki 与 Prometheus 的不同之处在于专注于日志而不是指标，并且通过推送而不是拉取来传递日志。 </p></blockquote><p>在生产实践环境中 Loki 常常与 Grafana 联合使用, 提供了一种界面化对 Loki 中存储的日志进行查询并可视化查询结果的方法，所以 Grafana Labs提供的另一个日志解决方案 PLG 目前也逐渐变得流行起来。</p><p>PLG 架构为 <code>Promtail + Loki + Grafana</code> 的组合，整体架构图下所示：</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220715163301.png" alt="WeiyiGeek.PLG" title="" class="">                <p>WeiyiGeek.PLG</p>            </figure><p>其中所有组件说明:</p><ul><li>Grafana 大家应该都比较熟悉，它是一款开源的可视化和分析软件，它允许用户查询、可视化、警告和探索监控指标.</li><li>Loki 是一组可以组成一个功能齐全的日志堆栈组件, 负责存储日志和处理查询。</li><li>Promtail 是一个日志收集的代理, 其类似于 ELk 中的 filebeat 的 日志采集端 agent，负责收集日志并将其发送给 Loki。</li></ul><p><br/></p><h3 id="2-为什么要使用-Grafana-Loki"><a href="#2-为什么要使用-Grafana-Loki" class="headerlink" title="2.为什么要使用 Grafana Loki?"></a>2.为什么要使用 Grafana Loki?</h3><p>描述：Loki 采用了一种独特的方法，它只索引元数据而不是日志行的全文，并且为每个日志流设置一组标签，Loki 的最小索引方法意味着在 Loki 中存储同一组日志所需的存储空间比其他解决方案少得多，例如下图</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220714165431.png" alt="WeiyiGeek.Loki-元数据" title="" class="">                <p>WeiyiGeek.Loki-元数据</p>            </figure><p>温馨提示: 从图纸中可以看到Loki针对时间戳和标签键值对进行了索引, 这极大的方便我们进行日志查询。</p><p><strong>Loki 优点介绍</strong></p><ul><li>容易上手， 因为您可以使用各种客户端从任何来源以任何格式发送日志。</li><li>对象存储持久化, 意味着您可以获得 PB 级规模、高吞吐量和经济高效且耐用的存储。</li><li>告警通知, 可以通过采用的日志对比预定的告警阈值进行相应告警通知。</li><li>灵活的日志格式, 为您提供更大的灵活性和在查询时进行格式设置的选项。</li><li>实时跟踪应用日志, 以查看进入系统的日志、每隔特定时间更新日志、查看特定日期的日志等。 </li><li>云原生环境集成, 可以非常方便的与 Prometheus、Grafana 和 K8s 原生集成.</li></ul><p><br/></p><p><strong>与其他日志聚合系统相比</strong></p><ul><li>不像ELK对日志进行全文索引, 通过存储压缩的非结构化日志和仅索引元数据Loki 操作更简单，运行成本更低、效率也提升了。</li><li>使用已在 Prometheus 中使用的相同标签对日志流进行索引和分组，使您能够使用已在 Prometheus 中使用的相同标签在指标和日志之间无缝切换。</li><li>特别适合存储 Kubernetes Pod 日志, Pod 标签等元数据会被自动抓取和索引。</li><li>在 Grafana 中有原生支持（需要 Grafana v6.0）。</li></ul><p><br/></p><p>在 Loki 架构中类比与 EFK 几个概念：</p><ul><li>Grafana：相当于 EFK 中的 Kibana ，用于 UI 的展示。</li><li>Loki：相当于 EFK 中的 ElasticSearch ，用于存储日志和处理查询。</li><li>Promtail：相当于 EFK 中的 Filebeat/Fluentd ，用于采集日志并将其发送给 Loki 。</li><li>LogQL：Loki 提供的日志查询语言，类似 Prometheus 的 PromQL，而且 Loki 支持 LogQL 查询直接转换为 Prometheus 指标。</li></ul><p><br/></p><h3 id="3-Grafana-Loki-是如何工作的"><a href="#3-Grafana-Loki-是如何工作的" class="headerlink" title="3.Grafana Loki 是如何工作的?"></a>3.Grafana Loki 是如何工作的?</h3><p>描述: 我们可以官方图示中看出 Grafana Loki 的工作流程。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220714170644.png" alt="WeiyiGeek.Grafana Loki工作流程" title="" class="">                <p>WeiyiGeek.Grafana Loki工作流程</p>            </figure><p>步骤 01.Promtail 是专门为 Loki 构建的日志收集器，我们使用 Promtail 拉入任何日志，它使用与 Prometheus 相同的服务发现功能，并包括在将日志摄取到 Loki 之前标记、转换和过滤日志的类似功能。 </p><p>步骤 02.promtail 将采集到的日志存储在 Loki 存储空间中，Loki 不索引日志文本，只将时间戳与标签进行索引，这不仅可以降低成本，还意味着可以在 Loki 接收到的几毫秒内查询日志行。 </p><p>步骤 03.使用 Grfana 接入 Loki 数据源, 然后直接在 Grafana 中运行 LogQL 查询，以将您的日志与其他数据源一起可视化，或者使用 LogCLI 来显示查询到可视化数据。</p><p>步骤 04.最后我们还可以为 Loki 设置警报规则以评估传入的日志数据，配置 Loki 以将生成的警报发送到 Prometheus Alertmanager 中，从而进行告警。</p><p><br/></p><h3 id="4-Grafana-Loki-架构简述"><a href="#4-Grafana-Loki-架构简述" class="headerlink" title="4.Grafana Loki 架构简述"></a>4.Grafana Loki 架构简述</h3><p>描述: Loki 整体架构也是由不同的组件来协同完成日志收集、索引、存储等工作的各个组件如下图所示。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220715164422.png" alt="WeiyiGeek.Loki Architecture" title="" class="">                <p>WeiyiGeek.Loki Architecture</p>            </figure><p><strong>架构图剖析:</strong><br>Loki 采用读写分离架构，关键组件有：</p><ul><li><p>Distributor 分发器（日志分发）：日志数据传输的“第一站”，Distributor 分发器接收到日志数据后，根据元数据和 hash 算法，将日志分批并行地发送到多个 Ingester 接收器上</p></li><li><p>Ingester 接收器（日志持久化）：接收器是一个有状态的组件，在日志进入时对其进行 gzip 压缩操作，并负责构建和刷新 chunck 块，当 chunk 块达到一定的数量或者时间后，就会刷新 chunk 块和对应的 Index 索引存储到数据库中</p></li><li><p>Querier 查询器 (查询解析)：给定一个时间范围和标签选择器，Querier 查询器可以从数据库中查看 Index 索引以确定哪些 chunck 块匹配，并通过 greps 将结果显示出来，它还会直接从 Ingester 接收器获取尚未刷新的最新数据</p></li><li><p>Query Frontend 查询前端（查询API）：查询前端是一个可选的组件，运行在 Querier 查询器之前，起到缓存，均衡调度的功能，用于加速日志查询</p></li><li><p>Ruler 预警规则: Ruler 规则规定了何种情况向 altermanger 发送，其语法规则近似于 Prometheus Alertmanager 中告警规则。</p></li><li><p>Object Store：存储采集到的日志index索引与Chunks。</p></li><li><p>Memcaches: 缓存写入、查询结果，加快查询效率。</p></li><li><p>Cluster Services: 包含 compactor 与 consul 服务发现组件。</p></li></ul><p>温馨提示: 我们可以通过 loki 二进制的 <code>-target</code> 参数指定运行角色<code>(querier/inester/query-frontend/distributor)</code>.</p><p><br></p><h3 id="5-Grafana-Loki-参考来源"><a href="#5-Grafana-Loki-参考来源" class="headerlink" title="5.Grafana Loki 参考来源"></a>5.Grafana Loki 参考来源</h3><p>官方地址：<a href="https://grafana.com/oss/loki/" target="_blank" rel="noopener">https://grafana.com/oss/loki/</a></p><p>项目地址: <a href="https://github.com/grafana/loki" target="_blank" rel="noopener">https://github.com/grafana/loki</a></p><p>开始: <a href="https://grafana.com/docs/loki/latest/getting-started/" target="_blank" rel="noopener">https://grafana.com/docs/loki/latest/getting-started/</a></p><p>安装参考: <a href="https://grafana.com/docs/loki/latest/installation/" target="_blank" rel="noopener">https://grafana.com/docs/loki/latest/installation/</a></p><hr><h2 id="0x01-安装部署"><a href="#0x01-安装部署" class="headerlink" title="0x01 安装部署"></a>0x01 安装部署</h2><p>描述: 我们可以使用多种方式进行安装 Loki 和 Promtail 组件，其中最常用的是使用 Helm 部署微服务、使用 Helm 进行简单的可扩展部署、通过 Docker 或 Docker Compose 安装、在本地安装和运行或者从源代码安装。</p><p><strong>常规使用</strong><br>Step 1.下载并安装 Loki 和 Promtail。<br>Step 2.下载两个程序的配置文件。<br>Step 3.启动 Loki。<br>Step 4.更新 Promtail 配置文件，让您的日志进入 Loki。<br>Step 5.开始在Grafana中浏览日志。</p><p><br/></p><p><strong>Loki 三种部署方式</strong></p><blockquote><p>单体模式 <code>(Monolithic mode)</code>，ALL IN ONE : Loki 支持单一进程模式，可在一个进程中运行所有必需的组件。单进程模式非常适合测试 Loki 或以小规模运行。不过尽管每个组件都以相同的进程运行，但它们仍将通过本地网络相互连接进行组件之间的通信（grpc）。使用 Helm 部署就是采用的该模式。</p></blockquote><blockquote><p>简单可扩展模式 <code>(Simple scalable deployment mode)</code>: 如果您每天的日志量超过几百 GB，或者如果您想分离读写关注点， Loki 提供了简单的可扩展部署模式, 该模式下每天存储的日志量可到TB级别，其分离读写路径有以下优点通过提供专用节点提高写入路径的可用性，可单独扩展的读取路径以按需添加/删除查询性能。</p></blockquote><blockquote><p>微服务模式 <code>(Microservices mode)</code>：为了实现水平可伸缩性，Loki 支持组件拆分为单独的组件分开部署，从而使它们彼此独立地扩展。每个组件都产生一个用于内部请求的 gRPC 服务器和一个用于外部 API 请求的 HTTP 服务，所有组件都带有 HTTP 服务器，但是大多数只暴露就绪接口、运行状况和指标端点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含的组件</span></span><br><span class="line">distributor</span><br><span class="line">ingester </span><br><span class="line">querier</span><br><span class="line">query-scheduler</span><br><span class="line">query-frontend</span><br><span class="line">index-gateway</span><br><span class="line">ruler</span><br><span class="line">compactor</span><br></pre></td></tr></table></figure></p></blockquote><p>三种部署模式参考: <a href="https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/" target="_blank" rel="noopener">https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/</a></p><p><br/></p><h3 id="以-二进制方式-安装-Loki-与-Promtail"><a href="#以-二进制方式-安装-Loki-与-Promtail" class="headerlink" title="以 二进制方式 安装 Loki 与 Promtail"></a>以 二进制方式 安装 Loki 与 Promtail</h3><p>描述: 在进行容器化部署时，建议初学者先使用单节点主机模式部署各个组件，熟悉一下整个流程，然后在进行容器化部署。 </p><p><strong>实践环境</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ cat /etc/issue.net</span><br><span class="line">Ubuntu 20.04.4 LTS</span><br><span class="line">~$ uname -a</span><br><span class="line">Linux devtest-102 5.4.0-59-generic <span class="comment">#65-Ubuntu SMP Thu Dec 10 12:01:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></p><p><strong>实践步骤</strong></p><ul><li>Step 1.下载 Loki 与 Promtail 最新而二进制文件并准备安装配置文件, 当前最新版本release查看(<a href="https://github.com/grafana/loki/releases/)。" target="_blank" rel="noopener">https://github.com/grafana/loki/releases/)。</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mkdir -vp /usr/<span class="built_in">local</span>/loki/&#123;config,data&#125;; mkdir -vp /usr/<span class="built_in">local</span>/loki/data/&#123;loki,promtail&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/loki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载二进制包</span></span><br><span class="line">LOKI_VERSION=v2.6.0</span><br><span class="line">curl -O -L https://github.com/grafana/loki/releases/download/<span class="variable">$&#123;LOKI_VERSION&#125;</span>/loki-linux-amd64.zip</span><br><span class="line">curl -O -L https://github.com/grafana/loki/releases/download/<span class="variable">$&#123;LOKI_VERSION&#125;</span>/promtail-linux-amd64.zip</span><br><span class="line">curl -O -L https://github.com/grafana/loki/releases/download/<span class="variable">$&#123;LOKI_VERSION&#125;</span>/logcli-linux-amd64.zip</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">logcli-linux-amd64.zip  loki-linux-amd64.zip  promtail-linux-amd64.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压与可执行权限赋予</span></span><br><span class="line">unzip <span class="string">"loki-linux-amd64.zip"</span></span><br><span class="line">unzip promtail-linux-amd64.zip</span><br><span class="line">unzip logcli-linux-amd64.zip</span><br><span class="line"></span><br><span class="line">chmod a+x logcli-linux-amd64 loki-linux-amd64 promtail-linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软连接创建</span></span><br><span class="line">ln -s $(<span class="built_in">pwd</span>)/loki-linux-amd64 /usr/<span class="built_in">local</span>/bin/loki</span><br><span class="line">ln -s $(<span class="built_in">pwd</span>)/promtail-linux-amd64 /usr/<span class="built_in">local</span>/bin/promtail</span><br><span class="line">ln -s $(<span class="built_in">pwd</span>)/logcli-linux-amd64 /usr/<span class="built_in">local</span>/bin/logcli</span><br></pre></td></tr></table></figure></li></ul><p><br/></p><ul><li>Step 2.使用 systemd 管理 loki 与 Promtail 准备的服务器清单如下。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/loki.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=loki.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/loki/loki-linux-amd64 -log.level=info -target all -config.file=/usr/<span class="built_in">local</span>/loki/config/loki-config.yaml</span><br><span class="line">WorkingDirectory=/usr/<span class="built_in">local</span>/loki/</span><br><span class="line">LimitMEMLOCK=infinity</span><br><span class="line">LimitNPROC=65536</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /usr/lib/systemd/system/promtail.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=promtail.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/loki/promtail-linux-amd64 -config.file=/usr/<span class="built_in">local</span>/loki/config/promtail.conf</span><br><span class="line">WorkingDirectory=/usr/<span class="built_in">local</span>/loki/</span><br><span class="line">LimitMEMLOCK=infinity</span><br><span class="line">LimitNPROC=65536</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>扩展补充: 我们也可使用 supervisor 管理进程, Supervisor 是Python编写的 Client/Server 模式的系统，通过supervisor，可以对类Unix操作系统的进程进行监控和管理,可以方便地进行进程集中管理，并监控进程的状态, 当程序异常退出时，可以自动拉起程序，起到守护进程的作用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo yum install epel-release -y</span><br><span class="line">sudo yum install supervisor -y </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内存、进程、文件限制</span></span><br><span class="line">sed -i <span class="string">'/forking/a LimitNOFILE=65536'</span> /usr/lib/systemd/system/supervisord.service;</span><br><span class="line">sed -i <span class="string">'/forking/a LimitNPROC=65536'</span> /usr/lib/systemd/system/supervisord.service;</span><br><span class="line">sed -i <span class="string">'/forking/a LimitMEMLOCK=infinity'</span> /usr/lib/systemd/system/supervisord.service;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动，启动服务</span></span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> supervisord</span><br><span class="line">systemctl start supervisord</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 supervisor 管理 loki进程</span></span><br><span class="line">mkdir -vp /usr/<span class="built_in">local</span>/loki/&#123;loki,promtail,config&#125; /var/<span class="built_in">log</span>/loki/ </span><br><span class="line">cat &lt;&lt;EOF&gt; /etc/supervisord.d/loki.ini</span><br><span class="line">[program:loki]</span><br><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/loki/loki-linux-amd64 -log.level=info -target all -config.file=/usr/<span class="built_in">local</span>/loki/config/loki-config.yaml</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/loki/loki_err.log</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/loki/loki_out.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=INT</span><br><span class="line">startsecs=10</span><br><span class="line">startretries=3</span><br><span class="line">directory=/usr/<span class="built_in">local</span>/loki/</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/supervisord.d/promtail.ini</span><br><span class="line">[program:promtail]</span><br><span class="line"><span class="built_in">command</span>=/usr/<span class="built_in">local</span>/loki/promtail-linux-amd64 -config.expand-env=<span class="literal">true</span> -config.file=/usr/<span class="built_in">local</span>/loki/config/promtail.conf</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/loki/promtail_err.log</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/loki/promtail_out.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=INT</span><br><span class="line">startsecs=10</span><br><span class="line">startretries=3</span><br><span class="line">directory=/usr/<span class="built_in">local</span>/loki/</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 3.Loki 配置文件(loki-config.yaml) 与 promtail 配置文件(promtail.conf) 分别如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">tee /usr/<span class="built_in">local</span>/loki/config/loki-config.yaml &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">auth_enabled: <span class="literal">false</span></span><br><span class="line">server:</span><br><span class="line">  http_listen_port: 3100</span><br><span class="line">  grpc_listen_port: 9096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志接收器，配置ingester的生命周期将如何运行以及在何处注册以进行发现</span></span><br><span class="line">ingester:</span><br><span class="line">  wal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    dir: /usr/<span class="built_in">local</span>/loki/data/loki/wal</span><br><span class="line">  lifecycler:</span><br><span class="line">    address: 127.0.0.1</span><br><span class="line">    ring:</span><br><span class="line">      kvstore:</span><br><span class="line">        store: inmemory</span><br><span class="line">      replication_factor: 1</span><br><span class="line">    final_sleep: 0s</span><br><span class="line">  chunk_idle_period: 1h        <span class="comment"># 此时未接收到新日志的任何区块都将被刷新</span></span><br><span class="line">  max_chunk_age: 1h            <span class="comment"># 所有区块在达到该年龄时都将被刷新，默认值为1h</span></span><br><span class="line">  chunk_target_size: 10485760  <span class="comment"># Loki将尝试构建高达1.5MB的块，如果首先达到  chunk_idle_period or max_chunk_age 值则刷新。</span></span><br><span class="line">  chunk_retain_period: 30s     <span class="comment"># 如果使用索引缓存，则必须大于索引读缓存TTL（默认索引读缓存TTL为5m）</span></span><br><span class="line">  max_transfer_retries: 0      <span class="comment"># 禁用区块传输</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 块索引架构配置</span></span><br><span class="line">schema_config:</span><br><span class="line">  configs:</span><br><span class="line">    - from: 2022-07-15</span><br><span class="line">      store: boltdb-shipper</span><br><span class="line">      object_store: filesystem</span><br><span class="line">      schema: v11</span><br><span class="line">      index:</span><br><span class="line">        prefix: index_</span><br><span class="line">        period: 24h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储配置</span></span><br><span class="line">storage_config:</span><br><span class="line">  boltdb_shipper:</span><br><span class="line">    active_index_directory: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-active</span><br><span class="line">    cache_location: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-cache</span><br><span class="line">    cache_ttl: 24h   <span class="comment"># 缓存周期与存储空间成正比关系。</span></span><br><span class="line">    shared_store: filesystem</span><br><span class="line">  filesystem:</span><br><span class="line">    directory: /usr/<span class="built_in">local</span>/loki/data/loki/chunks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩配置</span></span><br><span class="line">compactor:</span><br><span class="line">  working_directory: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-compactor</span><br><span class="line">  shared_store: filesystem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制配置</span></span><br><span class="line">limits_config:</span><br><span class="line">  enforce_metric_name: <span class="literal">false</span></span><br><span class="line">  reject_old_samples: <span class="literal">true</span></span><br><span class="line">  reject_old_samples_max_age: 168h</span><br><span class="line">  <span class="comment"># 每秒允许promtail传输200MB，默认为4</span></span><br><span class="line">  ingestion_rate_mb: 200</span><br><span class="line">  <span class="comment"># ingestion_burst_size_mb: 400</span></span><br><span class="line">  <span class="comment"># max_streams_per_user: 0</span></span><br><span class="line">  <span class="comment"># max_chunks_per_query: 20000000</span></span><br><span class="line">  <span class="comment"># max_query_parallelism: 140</span></span><br><span class="line">  <span class="comment"># max_query_series: 5000</span></span><br><span class="line">  <span class="comment"># cardinality_limit: 1000000</span></span><br><span class="line">  <span class="comment"># max_streams_matchers_per_query: 10000</span></span><br><span class="line"></span><br><span class="line">chunk_store_config:</span><br><span class="line">  max_look_back_period: 0s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据保留时间， 等保要求应用日志需存放180天以上，此处保存为26周。</span></span><br><span class="line">table_manager:</span><br><span class="line">  retention_deletes_enabled: <span class="literal">true</span></span><br><span class="line">  retention_period: 4368h</span><br><span class="line"></span><br><span class="line"><span class="comment"># prometheus 告警配置</span></span><br><span class="line">ruler:</span><br><span class="line">  storage:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">    <span class="built_in">local</span>:</span><br><span class="line">      directory: /usr/<span class="built_in">local</span>/loki/data/loki/rules</span><br><span class="line">  rule_path: /usr/<span class="built_in">local</span>/loki/data/loki/rules-temp</span><br><span class="line">  alertmanager_url: http://10.0.30.200:9093</span><br><span class="line">  ring:</span><br><span class="line">    kvstore:</span><br><span class="line">      store: inmemory</span><br><span class="line">  enable_api: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">tee /usr/<span class="built_in">local</span>/loki/config/promtail.conf &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">server:</span><br><span class="line">  log_level: error</span><br><span class="line">  http_listen_address: 0.0.0.0</span><br><span class="line">  http_listen_port: 9080</span><br><span class="line">  grpc_listen_port: 0   </span><br><span class="line">  <span class="comment"># gRPC服务侦听端口(0表示随机端口)</span></span><br><span class="line"><span class="comment"># 记录日志位置</span></span><br><span class="line">positions:</span><br><span class="line">  filename: /usr/<span class="built_in">local</span>/loki/data/promtail/positions.yaml</span><br><span class="line"><span class="comment"># Loki API 地址服务</span></span><br><span class="line">client:</span><br><span class="line">  url: http://localhost:3100/loki/api/v1/push</span><br><span class="line"><span class="comment"># 抓取配置</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: system</span><br><span class="line">    pipeline_stages:</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost</span><br><span class="line">      labels:</span><br><span class="line">        job: systemd-logs</span><br><span class="line">        host: 10.20.176.102</span><br><span class="line">        __path__: /var/<span class="built_in">log</span>/*.<span class="built_in">log</span></span><br><span class="line">  - job_name: messages</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost</span><br><span class="line">      labels:</span><br><span class="line">        job: messages-logs</span><br><span class="line">        host: 10.20.176.102</span><br><span class="line">        __path__: /var/<span class="built_in">log</span>/messages</span><br><span class="line">  - job_name: dmesg</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - localhost</span><br><span class="line">      labels:</span><br><span class="line">        job: dmesg-logs</span><br><span class="line">        host: 10.20.176.102</span><br><span class="line">        __path__: /var/<span class="built_in">log</span>/dmesg</span><br><span class="line">  - job_name: journal</span><br><span class="line">    journal:</span><br><span class="line">      max_age: 12h</span><br><span class="line">      <span class="comment"># 从进程开始读取并发送最近12小时的数据至Loki</span></span><br><span class="line">      labels:</span><br><span class="line">        job: systemd-journal</span><br><span class="line">    relabel_configs:</span><br><span class="line">      - source_labels: [<span class="string">'__journal__systemd_unit'</span>]</span><br><span class="line">        target_label: <span class="string">'unit'</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Loki 的报警规则</span></span><br><span class="line"><span class="comment"># “fake”是Loki以单租户模式运行时默认的租户Id, 所以安装上述配置需要在/usr/local/loki/data/loki/rules/目录下创建一个fake目录并将 rules.yaml 规则文件放在该目录下。</span></span><br><span class="line">mkdir -vp /usr/<span class="built_in">local</span>/loki/data/loki/rules/fake</span><br><span class="line">tee /usr/<span class="built_in">local</span>/loki/data/loki/rules/fake/rules.yaml &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">groups:</span><br><span class="line">- name: service OutOfMemoryError</span><br><span class="line">  rules:</span><br><span class="line">    <span class="comment"># 关键字监控报警</span></span><br><span class="line">    - alert: loki check words java.lang.OutOfMemoryError</span><br><span class="line">      expr: sum by (env, hostname, log_type, filename) (count_over_time(&#123;env=~<span class="string">"\\w+"</span>&#125; |= <span class="string">"java.lang.OutOfMemoryError"</span> [5m]) &gt; 0)</span><br><span class="line">      labels:</span><br><span class="line">        severity: critical</span><br><span class="line">      annotations:</span><br><span class="line">        description: <span class="string">'&#123;&#123;$labels.env&#125;&#125; &#123;&#123;$labels.hostname&#125;&#125; file &#123;&#123;$labels.filename&#125;&#125; has  &#123;&#123; $value &#125;&#125; error'</span></span><br><span class="line">        summary: java.lang.OutOfMemoryError</span><br><span class="line">    <span class="comment"># java 程序日志性能报警</span></span><br><span class="line">    - alert: loki java full gc count check</span><br><span class="line">      expr: sum by (env, hostname, log_type, filename) (count_over_time(&#123;env=~<span class="string">"\\w+"</span>&#125; |= <span class="string">"Full GC (Allocation"</span> [5m]) &gt; 5)</span><br><span class="line">      labels:</span><br><span class="line">        severity: warning</span><br><span class="line">      annotations:</span><br><span class="line">        description: <span class="string">'&#123;&#123;$labels.env&#125;&#125; &#123;&#123;$labels.hostname&#125;&#125; &#123;&#123;$labels.filename&#125;&#125; &#123;&#123; $value &#125;&#125;'</span></span><br><span class="line">        summary: java full gc count check</span><br><span class="line">    <span class="comment"># 使用正则表达式报警</span></span><br><span class="line">    - alert: dbperform slowlog sql 慢查询</span><br><span class="line">      expr: <span class="string">'sum by (env, hostname, log_type, filename) (count_over_time(&#123;env=~"\\w+"&#125; |~ "time: [1-9]\\d&#123;4,&#125;" [5m]) &gt; 5)'</span></span><br><span class="line">      labels:</span><br><span class="line">        severity: warning</span><br><span class="line">      annotations:</span><br><span class="line">        description: <span class="string">'&#123;&#123;$labels.env&#125;&#125; &#123;&#123;$labels.hostname&#125;&#125; file &#123;&#123;$labels.filename&#125;&#125; has  &#123;&#123; $value &#125;&#125; error'</span></span><br><span class="line">        summary: sql slowlog</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>温馨提示: 关于labels，官网建议labels个数越少越好，过多的labels将会影响Loki日志的检索速度。</p><p><br/></p><ul><li>Step 4.设置Loki与Promtail服务开机启动并启动服务。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> loki.service;systemctl <span class="built_in">enable</span> promtail.service</span><br><span class="line">systemctl restart loki.service promtail.service</span><br><span class="line"></span><br><span class="line">$ systemctl status loki.service</span><br><span class="line">● loki.service</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/loki.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2022-07-16 04:39:52 UTC; 26s ago</span><br><span class="line">   Main PID: 174310 (loki-linux-amd6)</span><br><span class="line">      Tasks: 11 (<span class="built_in">limit</span>: 19112)</span><br><span class="line">     Memory: 16.8M</span><br><span class="line">     CGroup: /system.slice/loki.service</span><br><span class="line">             └─174310 /usr/<span class="built_in">local</span>/loki/loki-linux-amd64 -log.level=info -target all -config.file=/usr/<span class="built_in">local</span>/loki/config/loki-config.yaml</span><br><span class="line"></span><br><span class="line">$ systemctl status promtail.service</span><br><span class="line">● promtail.service</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/promtail.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Sat 2022-07-16 04:41:50 UTC; 47s ago</span><br><span class="line">   Main PID: 174401 (promtail-linux-)</span><br><span class="line">      Tasks: 15 (<span class="built_in">limit</span>: 19112)</span><br><span class="line">     Memory: 70.7M</span><br><span class="line">     CGroup: /system.slice/promtail.service</span><br><span class="line">             └─174401 /usr/<span class="built_in">local</span>/loki/promtail-linux-amd64 -config.file=/usr/<span class="built_in">local</span>/loki/config/promtail.conf</span><br><span class="line"></span><br><span class="line">Jul 16 04:41:50 devtest-102 systemd[1]: Started promtail.service.</span><br></pre></td></tr></table></figure></li></ul><p>分别访问Loki与Promtail监听服务部署结果验证如下命令与下图:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://10.20.176.102:3100/loki/api/v1/labels</span><br><span class="line">&#123;<span class="string">"status"</span>:<span class="string">"success"</span>,<span class="string">"data"</span>:[<span class="string">"filename"</span>,<span class="string">"host"</span>,<span class="string">"job"</span>,<span class="string">"unit"</span>]&#125;</span><br></pre></td></tr></table></figure><br><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220716125817.png" alt="WeiyiGeek.loki-API与Promtail" title="" class="">                <p>WeiyiGeek.loki-API与Promtail</p>            </figure></p><p>温馨提示: 在启动Loki后当其日志中出现<code>component=ruler</code>关键字集群rules时以及在<code>/usr/local/loki/data/loki/rules-temp/fake/</code>自动生成<code>rules.yaml</code>表示告警规则已经加载成功。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ journalctl -u loki.service | grep <span class="string">"component=ruler"</span></span><br><span class="line">Jul 17 08:35:12 devtest-102 loki-linux-amd64[178834]: level=info ts=2022-07-17T08:35:12.851099815Z <span class="built_in">caller</span>=metrics.go:133 component=ruler org_id=fake latency=fast query=<span class="string">"sum by(env,hostname,log_type,filename)((count_over_time(&#123;env=~\"\\\\w+\"&#125; |= \"java.lang.OutOfMemoryError\"[5m]) &gt; 0))"</span> query_type=metric range_type=instant length=0s step=0s duration=3.590441ms status=200 <span class="built_in">limit</span>=0 returned_lines=0 throughput=0B total_bytes=0B total_entries=0 queue_time=0s subqueries=1</span><br></pre></td></tr></table></figure></p><p><br/></p><ul><li>Step 5.使用K8S快速安装部署快速搭建 grafana 可视化平台, 当然你也可以选择Dokcer请参考此篇文字《Grafana可视化快速入门》(<a href="https://blog.weiyigeek.top/2019/5-17-39.html">https://blog.weiyigeek.top/2019/5-17-39.html</a>)</li></ul><p><br/></p><ul><li>Step 6.使用 Grafana 显示 Loki 与 Promtail 采集的日志, 添加 Loki 数据源。</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220716131137.png" alt="WeiyiGeek.Loki 数据源" title="" class="">                <p>WeiyiGeek.Loki 数据源</p>            </figure><p><br/></p><ul><li>Step 7.使用 Explore 显示 Loki 采集的数据，例如 查询的表达式为<code>{filename=&quot;/var/log/auth.log&quot;}</code>, 当然我们也可使用其它标签进行查看对应服务采集到的日志。</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220716131749.png" alt="WeiyiGeek.Loki 采集的数据展示" title="" class="">                <p>WeiyiGeek.Loki 采集的数据展示</p>            </figure><p><br/></p><ul><li>Step 8.除了使用Gafana查询Loki之外，它还提供了linux终端的查询客户端<code>logcli</code>, 下面简单实践一下上面logcli客户端命令的使用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看指定Loki采集的标签</span></span><br><span class="line">$ logcli labels --addr=<span class="string">"http://localhost:3100"</span> <span class="comment"># 或者 logcli labels -q </span></span><br><span class="line">http://localhost:3100/loki/api/v1/labels?end=1657983404379212368&amp;start=1657979804379212368</span><br><span class="line">filename</span><br><span class="line">host</span><br><span class="line">job</span><br><span class="line">unit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看指定标签详情</span></span><br><span class="line">$ logcli labels filename --addr=<span class="string">"http://localhost:3100"</span></span><br><span class="line">http://localhost:3100/loki/api/v1/label/filename/values?end=1657983492060973446&amp;start=1657979892060973446</span><br><span class="line">/var/<span class="built_in">log</span>/auth.log</span><br><span class="line">/var/<span class="built_in">log</span>/bootstrap.log</span><br><span class="line">/var/<span class="built_in">log</span>/cloud-init-output.log</span><br><span class="line">/var/<span class="built_in">log</span>/cloud-init.log</span><br><span class="line">/var/<span class="built_in">log</span>/dmesg</span><br><span class="line">/var/<span class="built_in">log</span>/dpkg.log</span><br><span class="line">/var/<span class="built_in">log</span>/fail2ban.log</span><br><span class="line">/var/<span class="built_in">log</span>/ubuntu-advantage-timer.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-network.1.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-network.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-vmsvc-root.1.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-vmsvc-root.2.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-vmsvc-root.3.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-vmsvc-root.log</span><br><span class="line">/var/<span class="built_in">log</span>/vmware-vmtoolsd-root.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看指定标签下的日志，最大显示行数为100，每批次限制5条</span></span><br><span class="line">logcli query <span class="string">'&#123;host="10.20.176.102",filename="/var/log/auth.log"&#125;'</span> --<span class="built_in">limit</span> 100 --batch 5 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.指定时间输出日志并指定中国时间输出,--from 和--to 后面的时间需要符合IETF RFC-3339[4]格式</span></span><br><span class="line">logcli query <span class="string">'&#123;host="10.20.176.102",filename="/var/log/auth.log"&#125;'</span> --<span class="built_in">limit</span>=10000 --from=<span class="string">"2022-03-12T14:00:05+08:00"</span>  --to=<span class="string">"2022-03-18T14:30:05+08:00"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.logcli query同样支持Logql语法</span></span><br><span class="line">logcli query <span class="string">'&#123;host="10.20.176.102",filename="/var/log/auth.log"&#125;|="ssh"'</span> --<span class="built_in">limit</span>=10000 --since=2h --timezone=UTC --output jsonl</span><br><span class="line">  <span class="comment"># http://localhost:3100/loki/api/v1/query_range?direction=BACKWARD&amp;end=1658022708817779154&amp;limit=1000&amp;query=%7Bhost%3D%2210.20.176.102%22%2Cfilename%3D%22%2Fvar%2Flog%2Fauth.log%22%7D%7C%3D%22ssh%22&amp;start=1658015508817779154</span></span><br><span class="line">  <span class="comment"># Common labels: &#123;filename="/var/log/auth.log", host="10.20.176.102", job="systemd-logs"&#125;</span></span><br><span class="line">  <span class="comment"># &#123;"labels":&#123;&#125;,"line":"Jul 17 01:40:41 devtest-102 sshd[176420]: pam_unix(sshd:session): session opened for user weiyigeek by (uid=0)","timestamp":"2022-07-17T01:40:41.611039896Z"&#125;</span></span><br><span class="line">  <span class="comment"># &#123;"labels":&#123;&#125;,"line":"Jul 17 01:40:41 devtest-102 sshd[176420]: Accepted publickey for weiyigeek from 10.20.176.101 port 18792 ssh2: ED25519 SHA256:9ayZkGn8V1koh8rm8MsYIh16hOTtpg+cZJdqSdJsTfM","timestamp":"2022-07-17T01:40:41.611004156Z"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取所有标签的摘要信息, 此处获取filename为/var/log/auth.log的日志流信息</span></span><br><span class="line">logcli series <span class="string">'&#123;&#125;'</span> -q --analyze-labels</span><br><span class="line">  <span class="comment"># Total Streams:  9</span></span><br><span class="line">  <span class="comment"># Unique Labels:  4</span></span><br><span class="line">  <span class="comment"># Label Name  Unique Values  Found In Streams</span></span><br><span class="line">  <span class="comment"># unit        8              8</span></span><br><span class="line">  <span class="comment"># job         2              9</span></span><br><span class="line">  <span class="comment"># host        1              1</span></span><br><span class="line">  <span class="comment"># filename    1              1</span></span><br><span class="line">logcli series <span class="string">'&#123;filename="/var/log/auth.log"&#125;'</span> -q  <span class="comment"># 显示相关联的标签</span></span><br><span class="line">  <span class="comment"># &#123;filename="/var/log/auth.log", host="10.20.176.102", job="systemd-logs"&#125;</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220716230005.png" alt="WeiyiGeek.logcli简单使用" title="" class="">                <p>WeiyiGeek.logcli简单使用</p>            </figure><p><br/></p><h3 id="以-Helm3-在K8S集群里安装-Loki-与-Promtail"><a href="#以-Helm3-在K8S集群里安装-Loki-与-Promtail" class="headerlink" title="以 Helm3 在K8S集群里安装 Loki 与 Promtail"></a>以 Helm3 在K8S集群里安装 Loki 与 Promtail</h3><p><strong>环境说明</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~$ kubectl get node</span><br><span class="line">NAME                 STATUS   ROLES                  AGE   VERSION</span><br><span class="line">devtest-master-212   Ready    control-plane,master   32d   v1.23.7</span><br><span class="line">devtest-master-213   Ready    control-plane,master   32d   v1.23.7</span><br><span class="line">devtest-master-214   Ready    control-plane,master   32d   v1.23.7</span><br><span class="line">devtest-work-215     Ready    work                   32d   v1.23.7</span><br><span class="line"></span><br><span class="line">~$ helm3 version</span><br><span class="line">version.BuildInfo&#123;Version:<span class="string">"v3.9.0"</span>, GitCommit:<span class="string">"7ceeda6c585217a19a1131663d8cd1f7d641b2a7"</span>, GitTreeState:<span class="string">"clean"</span>, GoVersion:<span class="string">"go1.17.5"</span>&#125;</span><br><span class="line"></span><br><span class="line">~$ helm3 search repo grafana | egrep <span class="string">"loki|promtail"</span></span><br><span class="line">grafana/loki                            2.13.1          v2.6.0          Loki: like Prometheus, but <span class="keyword">for</span> logs.</span><br><span class="line">......</span><br><span class="line">grafana/promtail                        6.2.1           2.6.0           Promtail is an agent <span class="built_in">which</span> ships the contents o...</span><br></pre></td></tr></table></figure></p><p><strong>安装部署</strong></p><p>描述: 以 Helm 部署 Loki (StatefulSet 方式) 和 Promtail（DaemonSet 方式）采集 k8s pod 应用的日志为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.Add Loki’s chart repository to Helm:</span></span><br><span class="line">helm repo add grafana https://grafana.github.io/helm-charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.Update the chart repository and list Loki or Promtail</span></span><br><span class="line">helm repo update &amp;&amp; helm search repo grafana/loki</span><br><span class="line">helm search repo -l grafana/promtail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.Download Loki’s and Promtail chart in local (拉取图表到本地并解压)</span></span><br><span class="line">helm pull grafana/loki --untar --version 2.13.1     <span class="comment"># 2.13.1</span></span><br><span class="line">helm pull grafana/promtail --untar --version 6.2.1  <span class="comment"># 6.2.1</span></span><br></pre></td></tr></table></figure><p><strong>loki values.yaml 配置文件:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.Loki 图表配置文件</span></span><br><span class="line">/storage/dev/webapp/logging/loki<span class="comment"># ls</span></span><br><span class="line">Chart.yaml  README.md  templates  values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># values.yaml (主要部分)</span></span><br><span class="line">$ grep -E -v <span class="string">"^$|#"</span> values.yaml</span><br><span class="line">image:</span><br><span class="line">  repository: grafana/loki</span><br><span class="line">  tag: 2.6.0</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line">......</span><br><span class="line">tracing:</span><br><span class="line">  jaegerAgentHost:</span><br><span class="line">config:</span><br><span class="line">  auth_enabled: <span class="literal">false</span></span><br><span class="line">  memberlist:</span><br><span class="line">    join_members:</span><br><span class="line">      - <span class="string">'&#123;&#123; include "loki.fullname" . &#125;&#125;-memberlist'</span></span><br><span class="line">  ingester:</span><br><span class="line">    chunk_idle_period: 3m</span><br><span class="line">    chunk_block_size: 262144</span><br><span class="line">    chunk_retain_period: 1m</span><br><span class="line">    max_transfer_retries: 0</span><br><span class="line">    wal:</span><br><span class="line">      dir: /usr/<span class="built_in">local</span>/loki/data/loki/wal</span><br><span class="line">    lifecycler:</span><br><span class="line">      ring:</span><br><span class="line">        replication_factor: 1</span><br><span class="line">  limits_config:</span><br><span class="line">    enforce_metric_name: <span class="literal">false</span></span><br><span class="line">    reject_old_samples: <span class="literal">true</span>            <span class="comment"># 关键点: 是否拒绝老样本</span></span><br><span class="line">    reject_old_samples_max_age: 168h    <span class="comment"># 关键点: 168小时之前的样本将会被删除</span></span><br><span class="line">    max_entries_limit_per_query: 5000</span><br><span class="line">  schema_config:</span><br><span class="line">    configs:</span><br><span class="line">    - from: 2022-07-15   <span class="comment"># 关键点: 索引架构配置</span></span><br><span class="line">      store: boltdb-shipper</span><br><span class="line">      object_store: filesystem</span><br><span class="line">      schema: v11</span><br><span class="line">      index:</span><br><span class="line">        prefix: index_</span><br><span class="line">        period: 24h</span><br><span class="line">  server:</span><br><span class="line">    http_listen_port: 3100</span><br><span class="line">    grpc_listen_port: 9095</span><br><span class="line">  storage_config:</span><br><span class="line">    boltdb_shipper:</span><br><span class="line">      active_index_directory: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-active  <span class="comment"># 关键点: 索引存储目录</span></span><br><span class="line">      cache_location: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-cache</span><br><span class="line">      shared_store: filesystem</span><br><span class="line">    filesystem:</span><br><span class="line">      directory: /usr/<span class="built_in">local</span>/loki/data/loki/chunks     <span class="comment"># 关键点: 块存储路径</span></span><br><span class="line">  chunk_store_config:</span><br><span class="line">    max_look_back_period: 0s</span><br><span class="line">  table_manager:</span><br><span class="line">    retention_deletes_enabled: <span class="literal">true</span>  <span class="comment"># 关键点: 启用循环删除</span></span><br><span class="line">    retention_period: 4368h          <span class="comment"># 关键点: 日志保留期限为180天以上且必须是168的倍数约定于26周*168</span></span><br><span class="line">  compactor:</span><br><span class="line">    working_directory: /usr/<span class="built_in">local</span>/loki/data/loki/boltdb-shipper-compactor</span><br><span class="line">    shared_store: filesystem</span><br><span class="line">....</span><br><span class="line">persistence:</span><br><span class="line">  enabled: <span class="literal">true</span>  <span class="comment"># 关键点: 启用持久化卷</span></span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  size: 10Gi</span><br><span class="line">  labels: &#123;&#125;</span><br><span class="line">  annotations: &#123;&#125;</span><br><span class="line">  storageClassName: nfs-dev</span><br><span class="line">podLabels:       <span class="comment"># 关键点: pod 标签</span></span><br><span class="line">  app: <span class="string">"loki"</span></span><br><span class="line">rbac:            <span class="comment"># 关键点: rbac 权限创建</span></span><br><span class="line">  create: <span class="literal">true</span></span><br><span class="line">  pspEnabled: <span class="literal">true</span></span><br><span class="line">resources:       <span class="comment"># 关键点: 资源限制</span></span><br><span class="line">  limits:    </span><br><span class="line">    cpu: 1</span><br><span class="line">    memory: 2Gi</span><br><span class="line">  requests:</span><br><span class="line">    cpu: 100m</span><br><span class="line">    memory: 128Mi</span><br><span class="line">serviceMonitor:</span><br><span class="line">  enabled: <span class="literal">true</span>   <span class="comment">#  关键点: 启用服务监控即 Promethus 抓取指标</span></span><br><span class="line">  interval: 10s</span><br><span class="line">  additionalLabels: &#123;&#125;</span><br><span class="line">  annotations: &#123;&#125;</span><br><span class="line">  scrapeTimeout: 10s</span><br><span class="line">  path: /metrics</span><br><span class="line">  prometheusRule:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">    additionalLabels: &#123;&#125;</span><br><span class="line">    rules: []</span><br></pre></td></tr></table></figure></p><p>温馨提示: Loki 更多配置项解析参考地址 <a href="https://grafana.com/docs/loki/latest/configuration。" target="_blank" rel="noopener">https://grafana.com/docs/loki/latest/configuration。</a></p><p>温馨提示: Storage中bolt-shipper与bolt的区别, Loki2.0版本之后，对于使用boltdb存储索引部分做了较大的重构，采用新的boltdb-shipper模式，可以让Loki的索引存储在S3上，而彻底摆脱Cassandra或者谷歌的BigTable。此后服务的横向扩展将变得更加容易。详见：<a href="https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/" target="_blank" rel="noopener">https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/</a></p><p><br/></p><p><strong>promtail values.yaml 配置文件:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.promtail 图表配置文件。</span></span><br><span class="line">/storage/dev/webapp/logging/promtail<span class="comment"># ls</span></span><br><span class="line">Chart.yaml  ci  README.md  README.md.gotmpl  templates  values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># values.yaml</span></span><br><span class="line">daemonset:      <span class="comment"># 关键点: 采用 daemonset 资源清单部署 promtail。</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">.....</span><br><span class="line">defaultVolumes:</span><br><span class="line">  - name: run</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /run/promtail</span><br><span class="line">  - name: containers</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/lib/docker/containers</span><br><span class="line">  - name: pods</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /var/<span class="built_in">log</span>/pods</span><br><span class="line">defaultVolumeMounts:</span><br><span class="line">  - name: run</span><br><span class="line">    mountPath: /run/promtail</span><br><span class="line">  - name: containers</span><br><span class="line">    mountPath: /var/lib/docker/containers</span><br><span class="line">    readOnly: <span class="literal">true</span></span><br><span class="line">  - name: pods</span><br><span class="line">    mountPath: /var/<span class="built_in">log</span>/pods</span><br><span class="line">    readOnly: <span class="literal">true</span></span><br><span class="line">extraVolumes:</span><br><span class="line">  - name: host-time  <span class="comment"># 关键点: promtail 采集时间时区设置</span></span><br><span class="line">    hostPath:</span><br><span class="line">      path: /etc/localtime</span><br><span class="line">extraVolumeMounts:</span><br><span class="line">  - name: host-time</span><br><span class="line">    mountPath: /etc/localtime</span><br><span class="line">......</span><br><span class="line">config:</span><br><span class="line">  logLevel: error  <span class="comment"># 关键点: 日志等级我调整为了error。</span></span><br><span class="line">  serverPort: 3101</span><br><span class="line">  clients:         <span class="comment"># 关键点: loki 服务 api 地址 , 此处采用 svc 服务名称。</span></span><br><span class="line">    - url: http://loki:3100/loki/api/v1/push</span><br><span class="line"> .....</span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>开始在K8S中部署 Loki 与 Promtail</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.create namespace </span></span><br><span class="line">kubectl create ns logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.安装 loki 指定前面pull下载到本地的图表目录 loki/</span></span><br><span class="line">helm install --namespace logging loki loki/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.安装 promtail 指定前面pull下载到本地的图表目录 promtail/</span></span><br><span class="line">helm install --namespace logging promtail loki/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.查看 helm 的部署情况</span></span><br><span class="line">helm list -n logging</span><br><span class="line">  <span class="comment"># NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION</span></span><br><span class="line">  <span class="comment"># loki            logging         1               2022-07-15 10:23:45.694349558 +0800 CST deployed        loki-2.13.1     v2.6.0</span></span><br><span class="line">  <span class="comment"># promtail        logging         1               2022-07-15 10:33:30.229611294 +0800 CST deployed        promtail-6.2.1  2.6.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看资源清单部署状态</span></span><br><span class="line">$ kubectl get sts,daemonsets.apps,pod,svc -n logging</span><br><span class="line">NAME                    READY   AGE</span><br><span class="line">statefulset.apps/loki   1/1     4h55m</span><br><span class="line"></span><br><span class="line">NAME                      DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE</span><br><span class="line">daemonset.apps/promtail   4         4         4       4            4           &lt;none&gt;          4h45m</span><br><span class="line"></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/loki-0           1/1     Running   0          4h55m</span><br><span class="line">pod/promtail-75xzp   1/1     Running   0          4h45m</span><br><span class="line">pod/promtail-hjttw   1/1     Running   0          4h45m</span><br><span class="line">pod/promtail-z9tcn   1/1     Running   0          4h45m</span><br><span class="line">pod/promtail-zr4hq   1/1     Running   0          4h45m</span><br><span class="line"></span><br><span class="line">NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/loki              ClusterIP   10.102.118.31   &lt;none&gt;        3100/TCP   4h55m</span><br><span class="line">service/loki-headless     ClusterIP   None            &lt;none&gt;        3100/TCP   4h55m</span><br><span class="line">service/loki-memberlist   ClusterIP   None            &lt;none&gt;        7946/TCP   4h55m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.访问 Loki api 接口验证。</span></span><br><span class="line">root@devtest-master-212:/storage/dev/webapp/logging<span class="comment"># curl 10.102.118.31:3100/loki/api/v1/labels</span></span><br><span class="line">    <span class="comment"># &#123;"status":"success","data":["app","component","container","filename","instance","job","namespace","node_name","pod","stream"]&#125;</span></span><br><span class="line"></span><br><span class="line">root@devtest-master-212:/storage/dev/webapp/logging<span class="comment"># curl -s 10.102.118.31:3100/metrics | head -n 10</span></span><br><span class="line"><span class="comment"># HELP cortex_distributor_ingester_clients The current number of ingester clients.</span></span><br><span class="line"><span class="comment"># TYPE cortex_distributor_ingester_clients gauge</span></span><br><span class="line">cortex_distributor_ingester_clients 2</span><br><span class="line"><span class="comment"># HELP cortex_dns_failures_total The number of DNS lookup failures</span></span><br><span class="line"><span class="comment"># TYPE cortex_dns_failures_total counter</span></span><br><span class="line">cortex_dns_failures_total&#123;name=<span class="string">"memberlist"</span>&#125; 0</span><br><span class="line"><span class="comment"># HELP cortex_dns_lookups_total The number of DNS lookups resolutions attempts</span></span><br><span class="line"><span class="comment"># TYPE cortex_dns_lookups_total counter</span></span><br><span class="line">cortex_dns_lookups_total&#123;name=<span class="string">"memberlist"</span>&#125; 0</span><br><span class="line"><span class="comment"># HELP cortex_frontend_query_range_duration_seconds Total time spent in seconds doing query range requests.</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="0x02-实践使用"><a href="#0x02-实践使用" class="headerlink" title="0x02 实践使用"></a>0x02 实践使用</h2><h3 id="使用-Grafana-连接到-Loki-数据源"><a href="#使用-Grafana-连接到-Loki-数据源" class="headerlink" title="使用 Grafana 连接到 Loki 数据源"></a>使用 Grafana 连接到 Loki 数据源</h3><p>此处<code>Grafana</code>的安装可以参考Grafana可视化快速入门[<a href="https://blog.weiyigeek.top/2019/5-17-39.html]">https://blog.weiyigeek.top/2019/5-17-39.html]</a>.</p><p>此处 Grafana 我也是安装在K8S集群中, 所以我们可以直接采用SVC名称服务(<code>loki.logging.svc:3100</code>-服务名称.名称空间.svc) 的方式接入Loki。</p><p>点击 设置⚙齿轮 -&gt; Data Sources -&gt; Loki -&gt; 在 HTTP 选项下输入 <code>http://loki.logging.svc:3100</code> -&gt; 在 Maximum lines 最大显示行数为 5000 -&gt; 最后点击 <code>Save &amp; test</code>, 如出现下图提示则表示连接配置成功。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220715152942.png" alt="WeiyiGeek.add Loki Data Sources" title="" class="">                <p>WeiyiGeek.add Loki Data Sources</p>            </figure><p>点击 Explore -&gt; 选择 Loki (默认其实会选择) -&gt; 在 Log Browser 选择查看指定标签的日志 -&gt; 例如，此处查看 <code>{app=&quot;loki&quot;}</code> 标签日志。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220715153245.png" alt="WeiyiGeek.Explore Loki日志查看" title="" class="">                <p>WeiyiGeek.Explore Loki日志查看</p>            </figure><p><br/></p><p>温馨提示: 在 Grafana 9.0 中，你将在 Explore 中看到一个全新的可视化查询生成器界面，允许任何人编写、编辑和理解一个查询的作用。你已经熟悉的 Explore 界面现在增加了切换字段，可以选择在<code>文本编辑模式（Code）</code>或<code>可视化生成器模式（Builder）</code>中编写 PromQL 查询。当你选择 Builder 模式时，一个新的可视化界面允许你通过多词搜索下拉菜单选择感兴趣的指标来制作你的查询。</p><p><br></p><h3 id="使用-Grafana-Dashboard-显示集群中-pods-日志"><a href="#使用-Grafana-Dashboard-显示集群中-pods-日志" class="headerlink" title="使用 Grafana Dashboard 显示集群中 pods 日志"></a>使用 Grafana Dashboard 显示集群中 pods 日志</h3><p>描述: grafana dashboard 商城 (<a href="https://grafana.com/grafana/dashboards/?plcmt=footer&amp;search=Loki" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/?plcmt=footer&amp;search=Loki</a>) 中提供需要关于Loki的Dashboard数据显示面板。</p><p>其中 Lok i常用的 Dashboard 如下:</p><ul><li><a href="https://grafana.com/grafana/dashboards/12611" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/12611</a></li><li><a href="https://grafana.com/grafana/dashboards/13639" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/13639</a></li><li><a href="https://grafana.com/grafana/dashboards/13186" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/13186</a> (推荐)</li><li><a href="https://grafana.com/grafana/dashboards/15141" target="_blank" rel="noopener">https://grafana.com/grafana/dashboards/15141</a> (推荐)</li></ul><p>Grafana 添加 Dashboar -&gt; 左边菜单应用 -&gt; +Import -&gt; 在 Import via grafana.com 下输入 15141 -&gt; 点击 Load -&gt; 然后选择我们添加的Loki数据源即可。</p><p>最后我们便可查看到如下界面选择查看对应Labels标签的日志:</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220717151642.png" alt="WeiyiGeek.Loki Kubernetes Logs" title="" class="">                <p>WeiyiGeek.Loki Kubernetes Logs</p>            </figure><p><br/></p><p><strong>扩展: 使用 Grafana Loki 进行日志告警</strong><br>Loki 支持三种模式创建日志告警：</p><ul><li>在 Promtail 中的 pipeline 管道的 metrics 的阶段，根据需求增加一个监控指标，然后使用 Prometheus 结合 Alertmanager 完成监控报警。</li><li>通过 Loki 自带的报警功能（ Ruler 组件）可以持续查询一个 rules 规则，并将超过阈值的事件推送给 AlertManager 或者其他 Webhook 服务。</li><li>将 LogQL 查询转换为 Prometheus 指标。可以通过 Grafana 自带的 <code>Alert rules &amp; notifications</code>，定义有关 LogQL 指标的报警，推送到 <code>Notification channels（ Prometheus Alertmanager ， Webhook ）</code>等</li></ul><p>以下主要介绍 LogQL 转化为 Prometheus 指标的方式实现告警。</p><p>首先，在 Grafana 添加 Prometheus 数据源，URL 只需要填入 <code>http://loki.logging.svc:3100</code> 即可将 LogQL 查询转换为 Prometheus 指标。</p><p>然后, 在告警规则配置中配置 Notification channels 。</p><p>之后, 新建一个 Dashboard ，配置一个面板，例如：当 nginx 出现 404 状态码，触发告警：</p><p>至此，在Kubernetes集群中查看Pod应用日志到此结束。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="日志聚合" scheme="https://blog.weiyigeek.top/categories/%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88/"/>
    
    
    <category term="Grafana" scheme="https://blog.weiyigeek.top/tags/Grafana/"/>
    
  </entry>
  
</feed>
