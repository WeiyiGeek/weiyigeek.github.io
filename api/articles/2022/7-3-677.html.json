{"title":"8.Nginx实践之请求图片转换为Google推出的webp格式转换工具实践","slug":"系统运维/Application/Web/WebApp/Nginx/8.Nginx实践之请求图片转换为Google推出的webp格式转换工具实践","date":"2022-07-03T05:34:30.000Z","updated":"2023-01-31T02:29:10.469Z","url":"2022/7-3-677.html","path":"api/articles/2022/7-3-677.html.json","covers":["https://img.weiyigeek.top/2022/5/20220806093220.png","https://img.weiyigeek.top/2022/5/20220731112616.png","https://img.weiyigeek.top/2022/5/20220808230050.png","https://img.weiyigeek.top/2022/5/20220808231417.png"],"content":"<p><strong>本章目录</strong></p>\n<p>[TOC]</p>\n<h2 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h2><p>描述: 最近公司业务中有这么一个需求就是在保证图像的清晰度的情况下, 减少其体积大小使得减轻外部请求流量带宽对网关的请访问压力，同时提高用户访问体验。所以在进行前期需求、运维成本等综合分析后，还是建议将图片格式转为Google推出的一种现代图像格式 Webp，考虑到 WebP图片已经是一种趋势了，现在已经有很知名的网站支持了这种格式的图片，当然你也可以使用 Google 出品的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式(比较吃配置)。</p>\n<p>所以本章将主要针对webp格式的转换的相关命令进行实践使用，如果不想使用 Nginx+PageSpeed 模块，我们也可使用 Nginx+Lua 脚本针对请求非webp格式的图片进行自动转换后，并按照指定的分辨率进行显示。</p>\n<a id=\"more\"></a>\n<p><br/></p>\n<h3 id=\"WebP-介绍\"><a href=\"#WebP-介绍\" class=\"headerlink\" title=\"WebP 介绍\"></a>WebP 介绍</h3><p><strong>An image format for the Web</strong><br>描述: WebP 由Google推出的一种现代图像格式，可为Web上的图像提供卓越的无损和有损压缩。与PNG相比WebP无损图像的尺寸小26%，WebP有损图像比同等SSIM质量指数下的同类JPEG图像小25-34%, 而无损 WebP 支持透明度（也称为 alpha 通道），而额外字节数仅为 22%。对于可接受有损 RGB 压缩的情况，有损 WebP 还支持透明度，通常提供比 PNG 小三倍的文件大小。</p>\n<p>温馨提示: 目前支持 <code>PNG / JPEG / GIF /PNM (PGM, PPM, PAM),/ TIFF</code>等图片格式转换为webp格式。</p>\n<p>官网地址: <a href=\"https://developers.google.com/speed/webp\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/speed/webp</a></p>\n<p><br/> </p>\n<p><strong>Webp 有何优点?</strong></p>\n<blockquote>\n<p>答: 使用WebP，网站管理员和Web开发人员可以创建更小，更丰富的图像，从而使Web解析访问更快。<br>WebP 可在 <code>Google Chrome，Safari，Firefox，Edge，Opera</code> 等主流浏览器以及许多其他工具和软件库(C/C++/Go/Python)中得到原生支持。</p>\n</blockquote>\n<p><br/></p>\n<p><strong>WebP 是如何工作的?</strong></p>\n<blockquote>\n<p>答： 有损WebP压缩使用预测编码对图像进行编码，与VP8视频编解码器压缩视频中关键帧的方法相同, 预测编码使用相邻像素块中的值来预测块中的数值，然后仅对差值进行编码。<br>而无损WebP压缩使用已经看到的图像片段，以便准确地重建新像素，如果没有发现有趣的匹配，它也可以使用本地调色板。</p>\n</blockquote>\n<p><strong>TIPS:</strong> WebP文件由VP8或VP8L图像数据以及基于RIFF的容器组成.</p>\n<hr>\n<h2 id=\"0X01-部署安装\"><a href=\"#0X01-部署安装\" class=\"headerlink\" title=\"0X01 部署安装\"></a>0X01 部署安装</h2><h3 id=\"实践环境说明\"><a href=\"#实践环境说明\" class=\"headerlink\" title=\"实践环境说明\"></a>实践环境说明</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 系统</span></span><br><span class=\"line\">~$ cat /etc/issue.net</span><br><span class=\"line\">Ubuntu 20.04.3 LTS</span><br><span class=\"line\">~$ uname -a</span><br><span class=\"line\">Linux weiyigeek.top 5.4.0-92-generic <span class=\"comment\">#103-Ubuntu SMP Fri Nov 26 16:13:00 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 软件</span></span><br><span class=\"line\">libwebp-1.2.3.tar.gz</span><br></pre></td></tr></table></figure>\n<p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href=\"https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh\" target=\"_blank\" rel=\"noopener\">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, 请大家疯狂的 star 。<br>加固脚本地址:【 <a href=\"https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p>\n<p style='color:red'> 为了节省大家的实践时间，我已经把需要用到的源码包上传到空间中，有需要的朋友可以看一下，下载地址: <a href=\"http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）\" target=\"_blank\" rel=\"noopener\">http://share.weiyigeek.top/d/36158960-50338508-7c5982?p=2088（访问密码：2088）</a><br><br/>温馨提示: 如提示证书不对，请点击高级继续访问即可.</p>\n\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220806093220.png\" alt=\"WeiyiGeek.Nginx及其模块下载\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Nginx及其模块下载</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"WebP-工具库安装\"><a href=\"#WebP-工具库安装\" class=\"headerlink\" title=\"WebP 工具库安装\"></a>WebP 工具库安装</h3><p>Webp 包括轻量级编码和解码库libwebp[^libwebp]和命令行工具[cwebp][^cwebp]和[dwebp][^dwebp]，用于将多种互联网图像与WebP格式相互转换，以及用于查看，复用和动画化WebP图像的工具，完整的源代码可在<a href=\"https://developers.google.com/speed/webp/download\" target=\"_blank\" rel=\"noopener\">下载页面</a>上获得。</p>\n<p>除此之外，我们还可下载适用于Linux、Windows或macOS的预编译cwebp转换工具（<a href=\"https://developers.google.com/speed/webp/docs/precompiled），将您喜爱的收藏从PNG和JPEG转换为WebP。\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/speed/webp/docs/precompiled），将您喜爱的收藏从PNG和JPEG转换为WebP。</a></p>\n<p><br/></p>\n<h4 id=\"二进制包方式安装\"><a href=\"#二进制包方式安装\" class=\"headerlink\" title=\"二进制包方式安装\"></a>二进制包方式安装</h4><p>描述: 用于Linux、Windows和macOS的预编译WebP实用程序和库。它们包括：</p>\n<ul>\n<li>libwebp 库 : 可用于将WebP编码或解码添加到程序中 (windows/Linux)。</li>\n<li><a href=\"https://developers.google.com/speed/webp/docs/cwebp\" target=\"_blank\" rel=\"noopener\">cwebp</a> : WebP编码器工具</li>\n<li><a href=\"https://developers.google.com/speed/webp/docs/dwebp\" target=\"_blank\" rel=\"noopener\">dwebp</a> : WebP解码器工具</li>\n<li><a href=\"https://developers.google.com/speed/webp/docs/vwebp\" target=\"_blank\" rel=\"noopener\">vwebp</a> : WebP文件查看器</li>\n<li><a href=\"https://developers.google.com/speed/webp/docs/webpmux\" target=\"_blank\" rel=\"noopener\">webpmux</a> : WebP复用工具</li>\n<li><a href=\"https://developers.google.com/speed/webp/docs/gif2webp\" target=\"_blank\" rel=\"noopener\">gif2webp</a>: 用于将GIF图像转换为WebP的工具</li>\n</ul>\n<p><br></p>\n<p><strong>系统软件源方式</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Debian、Ubuntu</span></span><br><span class=\"line\">sudo apt-get install webp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CentOS</span></span><br><span class=\"line\">yum install libwebp-tools webp</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"源代码编译方式安装\"><a href=\"#源代码编译方式安装\" class=\"headerlink\" title=\"源代码编译方式安装\"></a>源代码编译方式安装</h4><p>描述: libwebp 是谷歌官方提供的webp格式图片parser以及解码的库，以下记录在Ubuntu 20.04编译<code>libwebp</code>及其安装webp相关工具的过程。</p>\n<p>项目地址: <a href=\"https://github.com/webmproject/libwebp\" target=\"_blank\" rel=\"noopener\">https://github.com/webmproject/libwebp</a><br>下载地址: <a href=\"https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html\" target=\"_blank\" rel=\"noopener\">https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html</a></p>\n<p>Step 1.要从<code>source code</code>进行构建，我们首先必须下载源码的压缩包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src</span><br><span class=\"line\">wget -c https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.3.tar.gz </span><br><span class=\"line\">tar -zxf libwebp-1.2.3.tar.gz  &amp;&amp; <span class=\"built_in\">cd</span> libwebp-1.2.3/</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>Step 2.在Ubuntu系统中安装编译libwebp前以及webp相关工具编译构建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Prerequisites: a compiler (e.g., gcc), make, autoconf, automake, libtool.</span></span><br><span class=\"line\">apt install -y gcc make autoconf automake libtool</span><br><span class=\"line\"><span class=\"comment\"># support webp、jpeg、tiff、gif</span></span><br><span class=\"line\">apt install -y libwebp-dev libjpeg-dev libpng-dev libtiff-dev libgif-dev </span><br><span class=\"line\"><span class=\"comment\"># support vwebp</span></span><br><span class=\"line\">apt install -y freeglut3-dev mesa-common-dev </span><br><span class=\"line\"><span class=\"comment\"># 预编译参数</span></span><br><span class=\"line\">./configure --<span class=\"built_in\">enable</span>-libwebpdecoder --<span class=\"built_in\">enable</span>-libwebpextras  --<span class=\"built_in\">enable</span>-swap-16bit-csp</span><br><span class=\"line\"><span class=\"comment\"># 自动编译构建</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220731112616.png\" alt=\"WeiyiGeek.build libwebp\" title=\"\" class=\"\">\n                <p>WeiyiGeek.build libwebp</p>\n            </figure>\n<p><strong>温馨提示:</strong> 当你从git源代码构建时需要运行autogen.sh生成配置脚本 (When building from git sources, you will need to run autogen.sh to generate the<br>configure script.)</p>\n<p><strong>温馨提示:</strong> 如果在执行时出现如下错误 <code>cwebp: error while loading shared libraries: libwebpdemux.so.2: cannot open shared object file: No such file or directory</code>，我们可以执行如下命令进行解决该问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:/usr/local/lib\"</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">export</span> LD_LIBRARY_PATH=<span class=\"variable\">$LD_LIBRARY_PATH</span>:/usr/<span class=\"built_in\">local</span>/lib</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LD_LIBRARY_PATH</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2</span></span><br><span class=\"line\">tee -a /etc/ld.so.conf.d/libc.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\"><span class=\"comment\"># libc default configuration</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/lib</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>Step 3.在完成后您应该在如下目录中<code>/usr/local/bin/</code>，使用ls命令查看下述几个命令.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/<span class=\"built_in\">local</span>/bin/*webp*</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/cwebp</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/dwebp</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/gif2webp</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/vwebp</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/webpmux</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/img2webp  </span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/webpinfo</span><br></pre></td></tr></table></figure></p>\n<p><strong>命令介绍</strong>:</p>\n<ul>\n<li>cwebp: 用于将jpeg、png或TIFF编码格式图片转为webp格式图片。(可以理解为编码)</li>\n<li>dwebp: 用于将webp格式图片转换为png格式图片</li>\n<li>vwebp: 用于播放webp动图和静图的工具</li>\n<li>webpmux: 用于 WebP复用工具</li>\n<li>gif2webp：用于将GIF图像转换为WebP的工具</li>\n<li>img2webp：用于从一系列输入图像创建动画WebP文件。</li>\n<li>webpinfo: 打印WebP文件的区块级结构以及基本的完整性检查。</li>\n</ul>\n<p><br></p>\n<p>Step 4.验证安装的相关工具并进行查看其版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ cwebp -version</span><br><span class=\"line\">1.2.3</span><br><span class=\"line\">~$ dwebp -version</span><br><span class=\"line\">1.2.3</span><br></pre></td></tr></table></figure>\n<p>好的，二进制部署在此处实践部署到此就结束了。</p>\n<p><br/></p>\n<p>补充说明: 其它发行版可以从源码进行编译构建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># (1) tiff 扩展图像格式的支持 </span></span><br><span class=\"line\">apt install -y libtiff-dev</span><br><span class=\"line\">http://download.osgeo.org/libtiff/</span><br><span class=\"line\">wget -c http://download.osgeo.org/libtiff/tiff-4.4.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (2) gif 图像格式的一个核心库,用于处理GIF的库和实用程序,giflib是一个用于读取和写入gif图像的库。</span></span><br><span class=\"line\">apt install -y libgif-dev</span><br><span class=\"line\">https://sourceforge.net/projects/giflib/files/latest/download</span><br><span class=\"line\">wget -c https://onboardcloud.dl.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x02-工具命令浅析\"><a href=\"#0x02-工具命令浅析\" class=\"headerlink\" title=\"0x02 工具命令浅析\"></a>0x02 工具命令浅析</h2><h3 id=\"cwebp-命令-转换-webp-图片格式\"><a href=\"#cwebp-命令-转换-webp-图片格式\" class=\"headerlink\" title=\"cwebp 命令 - 转换 webp 图片格式\"></a>cwebp 命令 - 转换 webp 图片格式</h3><p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\"> cwebp [-preset &lt;...&gt;] [options] in_file [-o out_file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Options:</span></span><br><span class=\"line\">  -q &lt;<span class=\"built_in\">float</span>&gt; ............. quality factor (0:small..100:big), default=75 <span class=\"comment\"># 图形质量</span></span><br><span class=\"line\">  -alpha_q &lt;int&gt; ......... transparency-compression quality (0..100),</span><br><span class=\"line\">                           default=100</span><br><span class=\"line\">  -preset &lt;string&gt; ....... preset setting, one of:</span><br><span class=\"line\">                            default, photo, picture,</span><br><span class=\"line\">                            drawing, icon, text</span><br><span class=\"line\">     -preset must come first, as it overwrites other parameters</span><br><span class=\"line\">  -z &lt;int&gt; ............... activates lossless preset with given</span><br><span class=\"line\">                           level <span class=\"keyword\">in</span> [0:fast, ..., 9:slowest]</span><br><span class=\"line\"></span><br><span class=\"line\">  -m &lt;int&gt; ............... compression method (0=fast, 6=slowest), default=4</span><br><span class=\"line\">  -segments &lt;int&gt; ........ number of segments to use (1..4), default=4</span><br><span class=\"line\">  -size &lt;int&gt; ............ target size (<span class=\"keyword\">in</span> bytes)                             <span class=\"comment\"># 目标尺寸</span></span><br><span class=\"line\">  -psnr &lt;<span class=\"built_in\">float</span>&gt; .......... target PSNR (<span class=\"keyword\">in</span> dB. typically: 42)                 <span class=\"comment\"># 目标PSN</span></span><br><span class=\"line\">  -s &lt;int&gt; &lt;int&gt; ......... input size (width x height) <span class=\"keyword\">for</span> YUV</span><br><span class=\"line\">  -sns &lt;int&gt; ............. spatial noise shaping (0:off, 100:max), default=50 <span class=\"comment\"># 空间噪声整形</span></span><br><span class=\"line\">  -f &lt;int&gt; ............... filter strength (0=off..100), default=60           <span class=\"comment\"># 过滤器强度</span></span><br><span class=\"line\">  -sharpness &lt;int&gt; ....... filter sharpness (0:most .. 7:least sharp), default=0</span><br><span class=\"line\">  -strong ................ use strong filter instead of simple (default)</span><br><span class=\"line\">  -nostrong .............. use simple filter instead of strong</span><br><span class=\"line\">  -sharp_yuv ............. use sharper (and slower) RGB-&gt;YUV conversion</span><br><span class=\"line\">  -partition_limit &lt;int&gt; . <span class=\"built_in\">limit</span> quality to fit the 512k <span class=\"built_in\">limit</span> on the first partition (0=no degradation ... 100=full)</span><br><span class=\"line\">  -pass &lt;int&gt; ............ analysis pass number (1..10)</span><br><span class=\"line\">  -qrange &lt;min&gt; &lt;max&gt; .... specifies the permissible quality range(default: 0 100)</span><br><span class=\"line\">  -crop &lt;x&gt; &lt;y&gt; &lt;w&gt; &lt;h&gt; .. crop picture with the given rectangle</span><br><span class=\"line\">  -resize &lt;w&gt; &lt;h&gt; ........ resize picture (*after* any cropping)             <span class=\"comment\"># 调整图片大小（*任意裁剪后）</span></span><br><span class=\"line\">  -mt .................... use multi-threading <span class=\"keyword\">if</span> available</span><br><span class=\"line\">  -low_memory ............ reduce memory usage (slower encoding)</span><br><span class=\"line\">  -map &lt;int&gt; ............. <span class=\"built_in\">print</span> map of extra info</span><br><span class=\"line\">  -print_psnr ............ prints averaged PSNR distortion</span><br><span class=\"line\">  -print_ssim ............ prints averaged SSIM distortion</span><br><span class=\"line\">  -print_lsim ............ prints <span class=\"built_in\">local</span>-similarity distortion</span><br><span class=\"line\">  -d &lt;file.pgm&gt; .......... dump the compressed output (PGM file)</span><br><span class=\"line\">  -alpha_method &lt;int&gt; .... transparency-compression method (0..1), default=1</span><br><span class=\"line\">  -alpha_filter &lt;string&gt; . predictive filtering <span class=\"keyword\">for</span> alpha plane,one of: none, fast (default) or best</span><br><span class=\"line\">  -exact ................. preserve RGB values <span class=\"keyword\">in</span> transparent area, default=off</span><br><span class=\"line\">  -blend_alpha &lt;hex&gt; ..... blend colors against background color</span><br><span class=\"line\">                           expressed as RGB values written <span class=\"keyword\">in</span></span><br><span class=\"line\">                           hexadecimal, e.g. 0xc0e0d0 <span class=\"keyword\">for</span> red=0xc0</span><br><span class=\"line\">                           green=0xe0 and blue=0xd0</span><br><span class=\"line\">  -noalpha ............... discard any transparency information</span><br><span class=\"line\">  -lossless .............. encode image losslessly, default=off <span class=\"comment\"># 无损编码图像，默认为关闭</span></span><br><span class=\"line\">  -near_lossless &lt;int&gt; ... use near-lossless image preprocessing (0..100=off), default=100</span><br><span class=\"line\">  -hint &lt;string&gt; ......... specify image characteristics hint,one of: photo, picture or graph <span class=\"comment\"># 指定图像特征提示，图片、图片或图形之一</span></span><br><span class=\"line\">  -metadata &lt;string&gt; ..... comma separated list of metadata tocopy from the input to the output <span class=\"keyword\">if</span> present. Valid values: all, none (default), exif, icc, xmp</span><br><span class=\"line\"></span><br><span class=\"line\">  -short ................. condense printed message</span><br><span class=\"line\">  -quiet ................. don\\<span class=\"string\">'t print anything</span></span><br><span class=\"line\"><span class=\"string\">  -version ............... print version number and exit</span></span><br><span class=\"line\"><span class=\"string\">  -noasm ................. disable all assembly optimizations</span></span><br><span class=\"line\"><span class=\"string\">  -v ..................... verbose, e.g. print encoding/decoding times</span></span><br><span class=\"line\"><span class=\"string\">  -progress .............. report encoding progress</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Experimental Options:</span></span><br><span class=\"line\"><span class=\"string\">  -jpeg_like ............. roughly match expected JPEG size</span></span><br><span class=\"line\"><span class=\"string\">  -af .................... auto-adjust filter strength</span></span><br><span class=\"line\"><span class=\"string\">  -pre &lt;int&gt; ............. pre-processing filter</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>实践案例:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.图形质量为75，将 picture.png 转换为 picture.webp</span></span><br><span class=\"line\">$ cwebp -o picture.webp -- picture.png</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.图形质量为80，将 pictimageure.png 转换为 image.webp</span></span><br><span class=\"line\">$ cwebp -q 80 image.png -o image.webp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.空间噪声整形为70，过滤器强度为50，尺寸大小为 60000 bytes</span></span><br><span class=\"line\">$ cwebp -sns 70 -f 50 -size 60000 image.png -o image.webp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.无损压缩 wechat-search.png 为 wechat-search.png</span></span><br><span class=\"line\">$ cwebp -lossless wechat-search.png -o image_lossless.webp</span><br><span class=\"line\">  <span class=\"comment\"># Saving file 'image_lossless.webp'</span></span><br><span class=\"line\">  <span class=\"comment\"># File:      wechat-search.png</span></span><br><span class=\"line\">  <span class=\"comment\"># Dimension: 438 x 200</span></span><br><span class=\"line\">  <span class=\"comment\"># Output:    16582 bytes (1.51 bpp)</span></span><br><span class=\"line\">  <span class=\"comment\"># Lossless-ARGB compressed size: 16582 bytes</span></span><br><span class=\"line\">  <span class=\"comment\">#   * Header size: 787 bytes, image data size: 15770</span></span><br><span class=\"line\">  <span class=\"comment\">#   * Lossless features used: SUBTRACT-GREEN</span></span><br><span class=\"line\">  <span class=\"comment\">#   * Precision Bits: histogram=3 transform=3 cache=10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.调整图片大小（*任意裁剪后）</span></span><br><span class=\"line\">$ cwebp -resize 216 100  wechat-search.png -o image_resize.webp</span><br><span class=\"line\">  <span class=\"comment\"># Saving file 'image_resize.webp'</span></span><br><span class=\"line\">  <span class=\"comment\"># File:      wechat-search.png</span></span><br><span class=\"line\">  <span class=\"comment\"># Dimension: 216 x 100</span></span><br><span class=\"line\">  <span class=\"comment\"># Output:    4246 bytes Y-U-V-All-PSNR 39.27 42.31 39.42   39.68 dB</span></span><br><span class=\"line\">  <span class=\"comment\">#             (1.57 bpp)</span></span><br><span class=\"line\">  <span class=\"comment\"># block count:  intra4:         58  (59.18%)</span></span><br><span class=\"line\">  <span class=\"comment\">#               intra16:        40  (40.82%)</span></span><br><span class=\"line\">  <span class=\"comment\">#               skipped:         9  (9.18%)</span></span><br><span class=\"line\">  <span class=\"comment\"># bytes used:  header:            202  (4.8%)</span></span><br><span class=\"line\">  <span class=\"comment\">#               mode-partition:    331  (7.8%)</span></span><br><span class=\"line\">  <span class=\"comment\">#   Residuals bytes  |segment 1|segment 2|segment 3|segment 4|  total</span></span><br><span class=\"line\">  <span class=\"comment\">#     macroblocks:  |      13%|      16%|      45%|      26%|      98</span></span><br><span class=\"line\">  <span class=\"comment\">#       quantizer:  |      36 |      30 |      25 |      17 |</span></span><br><span class=\"line\">  <span class=\"comment\">#     filter level:  |      11 |       6 |       5 |       2 |</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.遍历某一目录中的图片格式进行批量转换为.webp格式图片到某一目录。</span></span><br><span class=\"line\"><span class=\"comment\"># 单个文件类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(find /tmp -name *.png; <span class=\"keyword\">do</span> png_suffix=<span class=\"variable\">$&#123;i/.png/.webp&#125;</span>; /usr/<span class=\"built_in\">local</span>/bin/cwebp -q 80 <span class=\"variable\">$i</span> -o <span class=\"variable\">$&#123;png_suffix/image/convert&#125;</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\"># 多个文件类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(find /tmp -name *.png -o -name *.jpg -o -name *.jpeg -o -name *.tiff); <span class=\"keyword\">do</span> </span><br><span class=\"line\">img_pathname=<span class=\"variable\">$&#123;i%%.*&#125;</span>; /usr/<span class=\"built_in\">local</span>/bin/cwebp -short -q 80  <span class=\"variable\">$i</span> -o <span class=\"variable\">$&#123;img_pathname/image/convert&#125;</span>.webp ; </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ tree .</span><br><span class=\"line\">.</span><br><span class=\"line\">├── convert</span><br><span class=\"line\">│   ├── 1.webp</span><br><span class=\"line\">│   └── 2.webp</span><br><span class=\"line\">└── image</span><br><span class=\"line\">    ├── 1.jpg</span><br><span class=\"line\">    └── 2.png</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"dwebp-命令-将webp格式转换为png格式-解码\"><a href=\"#dwebp-命令-将webp格式转换为png格式-解码\" class=\"headerlink\" title=\"dwebp 命令 - 将webp格式转换为png格式(解码)\"></a>dwebp 命令 - 将webp格式转换为png格式(解码)</h3><p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: dwebp in_file [options] [-o out_file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用以下选项转换为其他图像格式：</span></span><br><span class=\"line\">  -pam ......... save the raw RGBA samples as a color PAM</span><br><span class=\"line\">  -ppm ......... save the raw RGB samples as a color PPM</span><br><span class=\"line\">  -bmp ......... save as uncompressed BMP format</span><br><span class=\"line\">  -tiff ........ save as uncompressed TIFF format</span><br><span class=\"line\">  -pgm ......... save the raw YUV samples as a grayscale PGM file with IMC4 layout</span><br><span class=\"line\">  -yuv ......... save the raw YUV samples <span class=\"keyword\">in</span> flat layout</span><br><span class=\"line\"> Other options are:</span><br><span class=\"line\">  -version ..... <span class=\"built_in\">print</span> version number and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -nofancy ..... don<span class=\"string\">'t use the fancy YUV420 upscaler</span></span><br><span class=\"line\"><span class=\"string\">  -nofilter .... disable in-loop filtering</span></span><br><span class=\"line\"><span class=\"string\">  -nodither .... disable dithering</span></span><br><span class=\"line\"><span class=\"string\">  -dither &lt;d&gt; .. dithering strength (in 0..100)       # 抖动强度（0..100）</span></span><br><span class=\"line\"><span class=\"string\">  -alpha_dither  use alpha-plane dithering if needed  # 如果需要，使用alpha平面抖动</span></span><br><span class=\"line\"><span class=\"string\">  -mt .......... use multi-threading                  # 使用多线程</span></span><br><span class=\"line\"><span class=\"string\">  -crop &lt;x&gt; &lt;y&gt; &lt;w&gt; &lt;h&gt; ... crop output with the given rectangle  # 使用给定矩形裁剪输出</span></span><br><span class=\"line\"><span class=\"string\">  -resize &lt;w&gt; &lt;h&gt; ......... resize output (*after* any cropping)  # 尺寸大小</span></span><br><span class=\"line\"><span class=\"string\">  -flip ........ flip the output vertically                       # 垂直翻转输出</span></span><br><span class=\"line\"><span class=\"string\">  -alpha ....... only save the alpha plane                        # 仅保存alpha平面</span></span><br><span class=\"line\"><span class=\"string\">  -incremental . use incremental decoding (useful for tests)</span></span><br><span class=\"line\"><span class=\"string\">  -v ........... verbose (e.g. print encoding/decoding times)</span></span><br><span class=\"line\"><span class=\"string\">  -quiet ....... quiet mode, don'</span>t <span class=\"built_in\">print</span> anything</span><br><span class=\"line\">  -noasm ....... <span class=\"built_in\">disable</span> all assembly optimizations</span><br></pre></td></tr></table></figure></p>\n<p><strong>简单示例:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.Using dwebp to Convert Images from the WebP Format</span></span><br><span class=\"line\">dwebp image.webp -o image.png</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Decoded image.webp. Dimensions: 493 x 424 . Format: lossy. Now saving...</span></span><br><span class=\"line\">  <span class=\"comment\"># Saved file image.png</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.webp图垂直翻转输出</span></span><br><span class=\"line\">dwebp image.webp -flip -o image.png</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.解码为ppm格式</span></span><br><span class=\"line\">dwebp picture.webp -ppm -o output.ppm</span><br><span class=\"line\">dwebp -o output.ppm -- ---picture.webp</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"gif2webp-命令-将gif格式图片转换为webp格式\"><a href=\"#gif2webp-命令-将gif格式图片转换为webp格式\" class=\"headerlink\" title=\"gif2webp 命令 - 将gif格式图片转换为webp格式\"></a>gif2webp 命令 - 将gif格式图片转换为webp格式</h3><p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\">  gif2webp [options] gif_file -o webp_file</span><br><span class=\"line\"><span class=\"comment\"># Options:</span></span><br><span class=\"line\">  -h / -<span class=\"built_in\">help</span> ............. this <span class=\"built_in\">help</span></span><br><span class=\"line\">  -lossy ................. encode image using lossy compression</span><br><span class=\"line\">  -mixed ................. 混合压缩模式：通过启发式选择每帧的有损或无损压缩来优化图像的压缩。此全局选项禁用本地选项和 -lossy、lossless。</span><br><span class=\"line\">  -q &lt;<span class=\"built_in\">float</span>&gt; ............. quality factor (0:small..100:big)</span><br><span class=\"line\">  -m &lt;int&gt; ............... compression method (0=fast, 6=slowest)</span><br><span class=\"line\">  -min_size .............. 对图像进行编码以实现最小尺寸。这将禁用关键帧插入并选取参数，从而获得每个帧的最小输出。默认情况下，它使用无损压缩，但可以与-q、-m、-lossy、-mixed选项组合使用。</span><br><span class=\"line\">  -kmin &lt;int&gt; ............ </span><br><span class=\"line\">  -kmax &lt;int&gt; ............ 指定输出动画中连续关键帧（可独立解码帧）之间的最小和最大距离。该工具将根据需要将一些关键帧插入到输出动画中，以便满足此条件。</span><br><span class=\"line\">  -f &lt;int&gt; ............... filter strength (0=off..100)</span><br><span class=\"line\">  -metadata &lt;string&gt; ..... comma separated list of metadata to copy from the input to the output <span class=\"keyword\">if</span> present Valid values: all, none, icc, xmp (default)</span><br><span class=\"line\">  -loop_compatibility .... 指定动画应循环的次数，使用0意味着“无限期循环”</span><br><span class=\"line\">  -mt .................... use multi-threading <span class=\"keyword\">if</span> available</span><br><span class=\"line\">  -version ............... <span class=\"built_in\">print</span> version number and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -v ..................... verbose</span><br><span class=\"line\">  -quiet ................. don<span class=\"string\">'t print anything</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>简单实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># gif2webp - converts a GIF image to a WebP image</span></span><br><span class=\"line\">gif2webp picture.gif -o picture.webp</span><br><span class=\"line\">gif2webp -q 70 picture.gif -o picture.webp</span><br><span class=\"line\">gif2webp -lossy -m 3 picture.gif -o picture_lossy.webp</span><br><span class=\"line\">gif2webp -lossy -f 50 picture.gif -o picture.webp</span><br><span class=\"line\">gif2webp -min_size -q 30 -o picture.webp -- ---picture.gif</span><br><span class=\"line\">cat picture.gif | gif2webp -o - -- - &gt; output.webp</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"img2webp-命令-从一系列输入图像创建动画WebP文件。\"><a href=\"#img2webp-命令-从一系列输入图像创建动画WebP文件。\" class=\"headerlink\" title=\"img2webp 命令 - 从一系列输入图像创建动画WebP文件。\"></a>img2webp 命令 - 从一系列输入图像创建动画WebP文件。</h3><p><strong>语法参数</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\">  img2webp [file_options] [[frame_options] frame_file]...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩选项</span></span><br><span class=\"line\">-o string ：指定输出 WebP 文件的名称。</span><br><span class=\"line\">-min_size ： 对图像进行编码以实现最小尺寸</span><br><span class=\"line\">-kmin int</span><br><span class=\"line\">-kmax int ：指定输出动画中连续关键帧（可独立解码帧）之间的最小和最大距离。</span><br><span class=\"line\">-mixed：混合压缩模式：通过启发式选择每帧的有损或无损压缩来优化图像的压缩。</span><br><span class=\"line\">-loop int ：指定动画应循环的次数，使用0意味着“无限期循环”。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 帧选项</span></span><br><span class=\"line\">-d int 以毫秒为单位指定图像持续时间。</span><br><span class=\"line\">-lossless, -lossy 使用无损或有损压缩模式压缩下一个图像。默认模式为无损。</span><br><span class=\"line\">-q <span class=\"built_in\">float</span> 指定介于 0 和 100 之间的压缩因子。默认值为 75。</span><br><span class=\"line\">-m int 指定要使用的压缩方法。此参数控制编码速度与压缩文件大小和质量之间的权衡。可能的值范围为 0 到 6。默认值为 4。</span><br></pre></td></tr></table></figure></p>\n<p>TIPS: 其支持的输入格式为 <code>WebP, JPEG, PNG, PNM (PGM, PPM, PAM), TIFF</code>.</p>\n<p><br/></p>\n<p><strong>简单实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.将 in0.png 、in1.jpg、in2.tiff组合为 webp 格式的动态图片。</span></span><br><span class=\"line\">img2webp -loop 2 in0.png -lossy in1.jpg -d 80 in2.tiff -o out.webp</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"webpmux-命令-从非动画WebP图像中创建动画WebP文件\"><a href=\"#webpmux-命令-从非动画WebP图像中创建动画WebP文件\" class=\"headerlink\" title=\"webpmux 命令 - 从非动画WebP图像中创建动画WebP文件\"></a>webpmux 命令 - 从非动画WebP图像中创建动画WebP文件</h3><p>描述: 从非动画WebP图像中创建动画WebP文件，从动画WebP图片中提取帧，以及管理XMP/EXIF元数据和ICC配置文件。</p>\n<p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage:</span></span><br><span class=\"line\">webpmux -get GET_OPTIONS INPUT -o OUTPUT</span><br><span class=\"line\">webpmux -<span class=\"built_in\">set</span> SET_OPTIONS INPUT -o OUTPUT</span><br><span class=\"line\">webpmux -strip STRIP_OPTIONS INPUT -o OUTPUT</span><br><span class=\"line\">webpmux -frame FRAME_OPTIONS [ -frame ... ] [ -loop LOOP_COUNT ] [ -bgcolor BACKGROUND_COLOR ] -o OUTPUT</span><br><span class=\"line\">webpmux -duration DURATION OPTIONS [ -duration ... ] INPUT -o OUTPUT</span><br><span class=\"line\">webpmux -info INPUT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GET_OPTIONS (-get):</span></span><br><span class=\"line\">  icc    Get ICC profile.</span><br><span class=\"line\">  exif   Get EXIF metadata.</span><br><span class=\"line\">  xmp    Get XMP metadata.</span><br><span class=\"line\">  frame n  Get nth frame from an animated image. (n = 0 has a special meaning: last frame).</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SET_OPTIONS (-set):</span></span><br><span class=\"line\">  loop loop_count : Set loop count on an animated file.</span><br><span class=\"line\">    <span class=\"comment\"># Where: 'loop_count' must be in range [0, 65535].</span></span><br><span class=\"line\">  bgcolor A,R,G,B : Set the background color of the canvas on an animated file.</span><br><span class=\"line\">    <span class=\"comment\"># where:  'A',  'R', 'G' and 'B' are integers in the range 0 to 255 specifying the Alpha, Red, Green and Blue component values respectively.</span></span><br><span class=\"line\">  icc file.icc : Set ICC profile.</span><br><span class=\"line\">    <span class=\"comment\"># Where: 'file.icc' contains the ICC profile to be set.</span></span><br><span class=\"line\">  exif file.exif : Set EXIF metadata.</span><br><span class=\"line\">    <span class=\"comment\"># Where: 'file.exif' contains the EXIF metadata to be set.</span></span><br><span class=\"line\">  xmp file.xmp : Set XMP metadata.</span><br><span class=\"line\">    <span class=\"comment\"># Where: 'file.xmp' contains the XMP metadata to be set.</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>示例演示:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpmux -get exif test.webp -o test.webp.txt</span><br><span class=\"line\">webpmux -get frame 0 test.webp -o test.webp.txt</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"webpinfo-命令-打印出WebP文件的块级结构以及基本的完整性检查。\"><a href=\"#webpinfo-命令-打印出WebP文件的块级结构以及基本的完整性检查。\" class=\"headerlink\" title=\"webpinfo 命令 - 打印出WebP文件的块级结构以及基本的完整性检查。\"></a>webpinfo 命令 - 打印出WebP文件的块级结构以及基本的完整性检查。</h3><p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: webpinfo [options] in_files</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -version ........... Print version number and <span class=\"built_in\">exit</span>.</span><br><span class=\"line\">  -quiet ............. Do not show chunk parsing information.</span><br><span class=\"line\">  -diag .............. Show parsing error diagnosis.(显示分析错误诊断)</span><br><span class=\"line\">  -summary ........... Show chunk stats summary.(显示块统计信息摘要)</span><br><span class=\"line\">  -bitstream_info .... Parse bitstream header.(解析位流头)</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用案例:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.显示指定webp摘要信息</span></span><br><span class=\"line\">$ webpinfo -diag -summary wechat-search.webp</span><br><span class=\"line\">  File: wechat-search.webp</span><br><span class=\"line\">  RIFF HEADER:</span><br><span class=\"line\">    File size:  11298</span><br><span class=\"line\">  Chunk VP8  at offset     12, length  11286</span><br><span class=\"line\">    Width: 438</span><br><span class=\"line\">    Height: 200</span><br><span class=\"line\">    Alpha: 0</span><br><span class=\"line\">    Animation: 0</span><br><span class=\"line\">    Format: Lossy (1)</span><br><span class=\"line\">  Summary:</span><br><span class=\"line\">  Number of frames: 1</span><br><span class=\"line\">  Chunk <span class=\"built_in\">type</span>  :  VP8 VP8L VP8X ALPH ANIM ANMF(VP8 /VP8L/ALPH) ICCP EXIF  XMP</span><br><span class=\"line\">  Chunk counts:    1    0    0    0    0    0    0    0    0     0    0    0</span><br><span class=\"line\">  No error detected.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.解析指定webp文件的比特流头</span></span><br><span class=\"line\">$ webpinfo -bitstream_info input_file_1.webp input_file_2.webp</span><br><span class=\"line\">File: input_file_1.webp</span><br><span class=\"line\">RIFF HEADER:</span><br><span class=\"line\">  File size:  11076</span><br><span class=\"line\">Chunk VP8  at offset     12, length  11064</span><br><span class=\"line\">  Width: 493</span><br><span class=\"line\">  Height: 424</span><br><span class=\"line\">  Alpha: 0</span><br><span class=\"line\">  Animation: 0</span><br><span class=\"line\">  Format: Lossy (1)</span><br><span class=\"line\">  Parsing lossy bitstream...</span><br><span class=\"line\">  Key frame:        Yes</span><br><span class=\"line\">  Profile:          0</span><br><span class=\"line\">  Display:          Yes</span><br><span class=\"line\">  Part. 0 length:   1619</span><br><span class=\"line\">  Width:            493</span><br><span class=\"line\">  X scale:          0</span><br><span class=\"line\">  Height:           424</span><br><span class=\"line\">  Y scale:          0</span><br><span class=\"line\">  Color space:      0</span><br><span class=\"line\">  Clamp <span class=\"built_in\">type</span>:       0</span><br><span class=\"line\">  Use segment:      1</span><br><span class=\"line\">  Update map:       1</span><br><span class=\"line\">  Update data:      1</span><br><span class=\"line\">  Absolute delta:   1</span><br><span class=\"line\">  Quantizer:        27 27 23 17</span><br><span class=\"line\">  Filter strength:  8 6 5 2</span><br><span class=\"line\">  Prob segment:     35 55 40</span><br><span class=\"line\">  Simple filter:    0</span><br><span class=\"line\">  Level:            8</span><br><span class=\"line\">  Sharpness:        0</span><br><span class=\"line\">  Use lf delta:     0</span><br><span class=\"line\">  Total partitions: 1</span><br><span class=\"line\">  Base Q:           27</span><br><span class=\"line\">  DQ Y1 DC:         0</span><br><span class=\"line\">  DQ Y2 DC:         0</span><br><span class=\"line\">  DQ Y2 AC:         0</span><br><span class=\"line\">  DQ UV DC:         -2</span><br><span class=\"line\">  DQ UV AC:         -3</span><br><span class=\"line\">File: input_file_2.webp</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"vwebp-命令-解压缩WebP文件并将其显示在窗口中\"><a href=\"#vwebp-命令-解压缩WebP文件并将其显示在窗口中\" class=\"headerlink\" title=\"vwebp 命令 - 解压缩WebP文件并将其显示在窗口中\"></a>vwebp 命令 - 解压缩WebP文件并将其显示在窗口中</h3><p><strong>语法参数:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vwebp [options] input_file.webp</span><br><span class=\"line\"><span class=\"comment\"># Options are:</span></span><br><span class=\"line\">  -version ..... <span class=\"built_in\">print</span> version number and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -noicc ....... don<span class=\"string\">'t use the icc profile if present</span></span><br><span class=\"line\"><span class=\"string\">  -nofancy ..... don'</span>t use the fancy YUV420 upscaler</span><br><span class=\"line\">  -nofilter .... <span class=\"built_in\">disable</span> <span class=\"keyword\">in</span>-loop filtering</span><br><span class=\"line\">  -dither &lt;int&gt;  dithering strength (0..100), default=50</span><br><span class=\"line\">  -noalphadither <span class=\"built_in\">disable</span> alpha plane dithering</span><br><span class=\"line\">  -usebgcolor .. display background color</span><br><span class=\"line\">  -mt .......... use multi-threading</span><br><span class=\"line\">  -info ........ <span class=\"built_in\">print</span> info</span><br><span class=\"line\">  -h ........... this <span class=\"built_in\">help</span> message</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keyboard shortcuts:</span></span><br><span class=\"line\">  <span class=\"string\">'c'</span> ................ toggle use of color profile</span><br><span class=\"line\">  <span class=\"string\">'b'</span> ................ toggle background color display</span><br><span class=\"line\">  <span class=\"string\">'i'</span> ................ overlay file information</span><br><span class=\"line\">  <span class=\"string\">'d'</span> ................ <span class=\"built_in\">disable</span> blending &amp; disposal (debug)</span><br><span class=\"line\">  <span class=\"string\">'q'</span> / <span class=\"string\">'Q'</span> / ESC .... quit</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vwebp picture.webp</span><br><span class=\"line\">vwebp picture.webp -mt -dither 0</span><br><span class=\"line\">vwebp -- ---picture.webp</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x03-企业实践\"><a href=\"#0x03-企业实践\" class=\"headerlink\" title=\"0x03 企业实践\"></a>0x03 企业实践</h2><h3 id=\"1-请求访问Nginx服务器中承载的不同分辨率WebP格式图片。\"><a href=\"#1-请求访问Nginx服务器中承载的不同分辨率WebP格式图片。\" class=\"headerlink\" title=\"1.请求访问Nginx服务器中承载的不同分辨率WebP格式图片。\"></a>1.请求访问Nginx服务器中承载的不同分辨率WebP格式图片。</h3><p>描述: 在请求中指定图片分辨率大小，如何让Nginx识别指定的分辨率值并返回指定分辨率大小的webp图形资源。</p>\n<blockquote>\n<p>答案当然可以从下述文章实践中找到答案，此前我们需要确定源代码编译nginx参数中是否启用了<code>--with-http_image_filter_module</code>该模块，如果没有启动则需要重新构建Nginx，具体操作如下所示。<br><code>nginx -V</code> 验证该其<code>configure arguments:</code>中是否存在<code>http_image_filter</code>模块。</p>\n</blockquote>\n<p>温馨提示: 进行 Nginx 的源代码编译安装步骤流程可以参考我前面此篇文章【 <a href=\"https://blog.weiyigeek.top/2022/7-2-676.html\">https://blog.weiyigeek.top/2022/7-2-676.html</a> 】 或者【 <a href=\"https://mp.weixin.qq.com/s/u-zb-BxG6VyaLY4EQLKlOQ\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/u-zb-BxG6VyaLY4EQLKlOQ</a> 】直达。</p>\n<p>此处演示在已安装Nginx环境下使用<code>--with-http_image_filter_module</code>参数生成模块动态链接库，当然你也可直接编译进nginx，不过笔者还是推荐前者。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --<span class=\"built_in\">help</span> | grep <span class=\"string\">\"image_filter_module\"</span></span><br><span class=\"line\">--with-http_image_filter_module         <span class=\"comment\"># enable ngx_http_image_filter_module</span></span><br><span class=\"line\">--with-http_image_filter_module=dynamic <span class=\"comment\"># enable dynamic ngx_http_image_filter_module</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p><strong>实践流程:</strong></p>\n<ul>\n<li>Step 1.实践项目web准备，此处采用我的主页作为展示，首先从gitee中拉取weiyigeek主页项目到本地<code>/app/html/</code>目录中.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /app/html/ &amp;&amp; <span class=\"built_in\">cd</span> /app/html/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://gitee.com/WeiyiGeek/weiyigeek.git</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<ul>\n<li>Step 2.获取当前Nginx配置编译参数，并添加<code>http_image_filter</code>模块为动态链接。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前编译参数</span></span><br><span class=\"line\">nginx -V </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启用 http_image_filter 模块并重新配置参数，进行编译构建</span></span><br><span class=\"line\"><span class=\"comment\"># ./configure [上述获取的编译参数] --with-http_image_filter_module=dynamic</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src/nginx-1.22.0</span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --user=nginx --group=nginx --with-pcre=../pcre-8.45 --with-zlib=../zlib-1.2.12 --with-openssl=../openssl-1.1.1q --sbin-path=/usr/sbin/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --lock-path=/var/run/nginx.lock --modules-path=/usr/<span class=\"built_in\">local</span>/nginx/modules --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-threads --with-http_sub_module --with-http_v2_module --with-http_auth_request_module --with-http_realip_module --with-http_secure_link_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_ssl_module --with-http_slice_module --with-http_stub_status_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-stream_geoip_module --with-mail --with-mail_ssl_module --with-http_addition_module --with-http_random_index_module --with-compat --with-file-aio --with-cc-opt=<span class=\"string\">'-Os -fomit-frame-pointer -g'</span> --with-ld-opt=-Wl,-rpath,/usr/<span class=\"built_in\">local</span>/luajit/lib,--as-needed,-O1,--sort-common --add-module=/usr/<span class=\"built_in\">local</span>/src/ngx_devel_kit-0.3.1 --add-module=/usr/<span class=\"built_in\">local</span>/src/lua-nginx-module-0.10.21 --add-dynamic-module=/usr/<span class=\"built_in\">local</span>/src/<span class=\"built_in\">echo</span>-nginx-module-0.62 --add-dynamic-module=/usr/<span class=\"built_in\">local</span>/src/ngx_http_geoip2_module-3.4 --with-http_image_filter_module=dynamic</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>温馨提示: 当编译 Nginx 时报<code>checking for LuaJIT 2.x ... not found, ./configure: error: unsupported LuaJIT version; ngx_http_lua_module requires LuaJIT 2.x.</code> 错误时的解决办法。</p>\n<p>问题描述: tell nginx’s build system where to find LuaJIT 2.1<br>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时生效</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_LIB=/usr/<span class=\"built_in\">local</span>/luajit/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_INC=/usr/<span class=\"built_in\">local</span>/luajit/include/luajit-2.1</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>温馨提示: 如出现GD库没有部署即<code>./configure: error: the HTTP image filter module requires the GD library. You can either do not enable the module or install the libraries.</code>提示可以按照如下方式进行解决。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y libgd-dev</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<ul>\n<li>Step 3.当执行make命令后你会发现在objs目录中生成了<code>ngx_http_image_filter_module.so</code>，此处我们需要将生成nginx二进制文件复制到/usr/sbin目录,并将动态链接库放入的modules目录中。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@weiyigeek:/usr/<span class=\"built_in\">local</span>/src/nginx-1.22.0<span class=\"comment\"># ls objs/</span></span><br><span class=\"line\">root@weiyigeek:/usr/<span class=\"built_in\">local</span>/src/nginx-1.22.0<span class=\"comment\"># cp objs/nginx /usr/sbin/nginx</span></span><br><span class=\"line\">root@weiyigeek:/usr/<span class=\"built_in\">local</span>/src/nginx-1.22.0<span class=\"comment\"># cp objs/ngx_http_image_filter_module.so /usr/local/nginx/modules/</span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<ul>\n<li>Step 4.加载<code>ngx_http_image_filter_module</code>模块到nginx，并在demo.conf配置一个简单示例。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /usr/<span class=\"built_in\">local</span>/nginx/nginx.conf</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 加载动态模块</span></span><br><span class=\"line\">load_module modules/ngx_http_image_filter_module.so;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">$ tee /usr/<span class=\"built_in\">local</span>/nginx/conf.d/demo.conf &lt;&lt;<span class=\"string\">'EOF'</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen       80;</span><br><span class=\"line\">  server_name  demo.weiyigeek.top;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\">  access_log /var/<span class=\"built_in\">log</span>/nginx/demo-access.log main buffer=128k flush=1m;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    root /app/html/weiyigeek;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~* /img/(.+)_(\\d+)x(\\d+)\\.(jpg|jpeg|gif|png|webp)$ &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 如果图形不存在则显示根目录下的404.png图像。 </span></span><br><span class=\"line\">    try_files /<span class=\"variable\">$1</span>.<span class=\"variable\">$4</span>  /404.png;</span><br><span class=\"line\">    <span class=\"built_in\">set</span> <span class=\"variable\">$width</span> <span class=\"variable\">$2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">set</span> <span class=\"variable\">$height</span> <span class=\"variable\">$3</span>;</span><br><span class=\"line\">    image_filter resize <span class=\"variable\">$width</span> <span class=\"variable\">$height</span>;</span><br><span class=\"line\">    image_filter_buffer 5M;</span><br><span class=\"line\">    image_filter_interlace on;</span><br><span class=\"line\">    image_filter_jpeg_quality 80;</span><br><span class=\"line\">    expires 1d;</span><br><span class=\"line\">    add_header <span class=\"string\">'Access-Control-Allow-Origin'</span> <span class=\"string\">'*'</span>;</span><br><span class=\"line\">    add_header <span class=\"string\">'Access-Control-Allow-Credentials'</span> <span class=\"string\">'true'</span>;</span><br><span class=\"line\">    add_header <span class=\"string\">'Image-Filter'</span> <span class=\"string\">\"Name <span class=\"variable\">$1</span>.<span class=\"variable\">$4</span>,<span class=\"variable\">$width</span> x <span class=\"variable\">$height</span>\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">alias</span> /app/html/weiyigeek/img;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">[^libwebp]: WebpAPI帮助文档 https://developers.google.com/speed/webp/docs/api </span><br><span class=\"line\">[^cwebp]: cwebp帮助文档 https://developers.google.com/speed/webp/docs/cwebp</span><br><span class=\"line\">[^dwebp]: dwebp帮助文档 https://developers.google.com/speed/webp/docs/dwebp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: <code>root 指令</code>与<code>alias 指令</code>的区别，root 可以让访问 /images/ 路径时，访问到 /User/WeiyiGeek/Desktop/images，若是将 root 替换为 alias，则访问的是 /User/WeiyiGeek/Desktop/；其中 /User/WeiyiGeek/Desktop/ 是本机中的绝对路径。</p>\n<p>温馨提示: 上述<code>image_filter</code>配置简单解析位于location上下文中，该模块 （0.7.54+） 是一个过滤器，用于转换 JPEG、GIF、PNG 和 WebP 格式的图像，其模块  <a href=\"https://nginx.org/en/docs/http/ngx_http_image_filter_module.html\" target=\"_blank\" rel=\"noopener\">Module ngx_http_image_filter_module 文档参考(nginx.org)</a>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用图形过滤器</span></span><br><span class=\"line\">image_filter off;</span><br><span class=\"line\"><span class=\"comment\"># 确保响应是 JPEG、GIF、PNG 或 WebP 格式的图像。否则将返回 415（不支持的媒体类型）错误。</span></span><br><span class=\"line\">image_filter <span class=\"built_in\">test</span>;</span><br><span class=\"line\"><span class=\"comment\"># 以 JSON 格式输出有关图像的信息，如果错误则输出为 &#123;&#125;</span></span><br><span class=\"line\">image_filter size;</span><br><span class=\"line\"><span class=\"comment\"># 将图像逆时针旋转指定的度数; 可为变量</span></span><br><span class=\"line\">image_filter rotate 90 | 180 | 270;</span><br><span class=\"line\"><span class=\"comment\"># 按比例将图像减小到指定大小</span></span><br><span class=\"line\">image_filter resize width height;</span><br><span class=\"line\"><span class=\"comment\"># 按比例将图像缩小到较大的侧尺寸，并在另一侧裁剪无关的边缘。</span></span><br><span class=\"line\">image_filter crop width height;</span><br><span class=\"line\"><span class=\"comment\"># 设置图片缓冲区的最大大小，大小超过设定值，服务器将返回错误415。</span></span><br><span class=\"line\">image_filter_buffer size;</span><br><span class=\"line\"><span class=\"comment\"># 如果启用最终图像将隔行扫描对于JPEG，最终图像将采用“渐进式JPEG”格式。</span></span><br><span class=\"line\">image_filter_interlace on | off;</span><br><span class=\"line\"><span class=\"comment\"># jpeg 、webp 格式图形质量设置（1~100），较小的值通常意味着较低的图像质量和较少的数据传输。最大建议值为95。参数值可以包含变量</span></span><br><span class=\"line\">image_filter_jpeg_quality quality;</span><br><span class=\"line\">image_filter_webp_quality quality;</span><br><span class=\"line\"><span class=\"comment\"># 提高最终图像的清晰度，锐度百分比可以超过100。零值禁用锐化</span></span><br><span class=\"line\">image_filter_sharpen percent;</span><br><span class=\"line\"><span class=\"comment\"># 定义在转换 GIF 图像或具有调色板指定颜色的 PNG 图像时是否应保留透明度。透明度的损失会导致图像质量更好。PNG 中的 Alpha 通道透明度始终保留。</span></span><br><span class=\"line\">image_filter_transparency on|off;</span><br></pre></td></tr></table></figure>\n<p>温馨提示： 此模块需要依赖与<a href=\"http://libgd.org\" target=\"_blank\" rel=\"noopener\">libgd</a> 库，建议使用最新的可用版本的库。</p>\n<p><br/></p>\n<ul>\n<li>Step 5.配置检查与重载Nginx服务进程 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后通过浏览器分别访问验证 <code>http://demo.weiyigeek.top/img/i-banner.png</code> 与 <code>http://demo.weiyigeek.top/img/i-banner_1080x520.png</code> ，查看其图片尺寸是否有变化，结果如下图所示。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls /app/html/weiyigeek/img/</span><br><span class=\"line\">alipay.jpg  bg.jpg  bg.png  i-banner.png  wechat-gzh.jpg  wechat-scan.png  wechat-search.png  wechat-search-white.png  weiyigeek.jpg  weiyigeek.png</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220808230050.png\" alt=\"WeiyiGeek.image_filter resize png\" title=\"\" class=\"\">\n                <p>WeiyiGeek.image_filter resize png</p>\n            </figure>\n<p><br/></p>\n<ul>\n<li>Step 6.在步骤五的实践中你会发现虽然在进行图片过滤器时设置了图像质量，从原图的1.3MB到现在的639KB，但是是否还是感觉此图片体积稍大，此时我们便可请出本章主人公webp转换工具cwebp，将png图片图片转换为webp格式图片。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cwebp -q 80 i-banner.png -o i-banner.webp</span><br><span class=\"line\">Saving file <span class=\"string\">'i-banner.webp'</span></span><br><span class=\"line\">File:      i-banner.png</span><br><span class=\"line\">Dimension: 1772 x 903</span><br><span class=\"line\">Output:    61096 bytes Y-U-V-All-PSNR 45.57 49.64 49.89   46.57 dB</span><br><span class=\"line\">           (0.31 bpp)</span><br><span class=\"line\">block count:  intra4:       2308  (36.48%)</span><br><span class=\"line\">              intra16:      4019  (63.52%)</span><br><span class=\"line\">              skipped:      1469  (23.22%)</span><br><span class=\"line\">bytes used:  header:            499  (0.8%)</span><br><span class=\"line\">             mode-partition:  10154  (16.6%)</span><br><span class=\"line\"> Residuals bytes  |segment 1|segment 2|segment 3|segment 4|  total</span><br><span class=\"line\">    macroblocks:  |       1%|       4%|      10%|      85%|    6327</span><br><span class=\"line\">      quantizer:  |      27 |      27 |      23 |      18 |</span><br><span class=\"line\">   filter level:  |       8 |       5 |      25 |      21 |</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls  -lah i-banner.*</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3M Aug  8 15:00 i-banner.png</span><br><span class=\"line\">-rw-r--r-- 1 root root  60K Aug  8 23:07 i-banner.webp</span><br></pre></td></tr></table></figure>\n<p>在设置质量为80后，转换后你会发现体积从1.3M一下就降到了60kb，可以看到其体积极大优化了在互联网上传播速度。</p>\n<p><br/></p>\n<ul>\n<li>Step 7.同样图片过滤器也可以处理webp格式的图形文件，这一点模块官网已经说明，我们直接使用上述转换后的i-banner.webp图形进行验证，同样分别访问 <code>http://demo.weiyigeek.top/img/i-banner.webp</code> 与 <code>http://demo.weiyigeek.top/img/i-banner_1080x520.webp</code>, 查看其图片尺寸是否有变化，结果如下图所示。</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220808231417.png\" alt=\"WeiyiGeek.image_filter resize web\" title=\"\" class=\"\">\n                <p>WeiyiGeek.image_filter resize web</p>\n            </figure>\n<p>从上图中可以看出原始的webp的图形大小的尺寸为 1772x903 大小为 61kb，而经过图片过滤器后按照其纵横比设置为了 1021x520 其大小也降为 24.9 kb。</p>\n<p><br/></p>\n","comments":true,"excerpt":"本章目录[TOC]0x00 前言简述描述: 最近公司业务中有这么一个需求就是在保证图像的清晰度的情况下, 减少其体积大小使得减轻外部请求流量带宽对网关的请访问压力，同时提高用户访问体验。所以在进行前期需求、运维成本等综合分析后，还是建议将图片格式转为Google推出的一种现代图像格式 Webp，考虑到 WebP图片已经是一种趋势了，现在已经有很知名的网站支持了这种格式的图片，当然你也可以使用 Google 出品的PageSpeed模块有一个功能，会自动将图像转换成WebP格式或者是浏览器所支持的其它格式(比较吃配置)。所以本章将主要针对webp格式的转换的相关命令进行实践使用，如果不想使用 Nginx+PageSpeed 模块，我们也可使用 Nginx+Lua 脚本针对请求非webp格式的图片进行自动转换后，并按照指定的分辨率进行显示。","categories":[{"name":"运维实践","path":"api/categories/运维实践.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"webp","path":"api/tags/webp.json"}]}