{"title":"1.Go语言之标准库学习记录(1)","slug":"编程世界/Go/Package/1.Go语言之标准库学习记录(1)","date":"2020-04-23T03:16:58.000Z","updated":"2022-03-29T05:39:06.304Z","url":"2020/4-23-602.html","path":"api/articles/2020/4-23-602.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210803113812.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-引言说明\"><a href=\"#0x00-引言说明\" class=\"headerlink\" title=\"0x00 引言说明\"></a>0x00 引言说明</h2><p>描述: 我们进行Go语言编程之中当遇到不熟悉的内置函数时, 可以采用<code>go doc builtin [builtinFunName]</code>查看go语言内置函数。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> builtin <span class=\"comment\">// import \"builtin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">println</span><span class=\"params\">(args ...Type)</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">The</span> <span class=\"title\">println</span> <span class=\"title\">built</span>-<span class=\"title\">in</span> <span class=\"title\">function</span> <span class=\"title\">formats</span> <span class=\"title\">its</span> <span class=\"title\">arguments</span> <span class=\"title\">in</span> <span class=\"title\">an</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">implementation</span>-<span class=\"title\">specific</span> <span class=\"title\">way</span> <span class=\"title\">and</span> <span class=\"title\">writes</span> <span class=\"title\">the</span> <span class=\"title\">result</span> <span class=\"title\">to</span> <span class=\"title\">standard</span> <span class=\"title\">error</span>. <span class=\"title\">Spaces</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">are</span> <span class=\"title\">always</span> <span class=\"title\">added</span> <span class=\"title\">between</span> <span class=\"title\">arguments</span> <span class=\"title\">and</span> <span class=\"title\">a</span> <span class=\"title\">newline</span> <span class=\"title\">is</span> <span class=\"title\">appended</span>. <span class=\"title\">Println</span> <span class=\"title\">is</span></span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">useful</span> <span class=\"title\">for</span> <span class=\"title\">bootstrapping</span> <span class=\"title\">and</span> <span class=\"title\">debugging</span>; <span class=\"title\">it</span> <span class=\"title\">is</span> <span class=\"title\">not</span> <span class=\"title\">guaranteed</span> <span class=\"title\">to</span> <span class=\"title\">stay</span> <span class=\"title\">in</span> <span class=\"title\">the</span> <span class=\"title\">language</span>.</span></span><br></pre></td></tr></table></figure></p>\n<p>或者参考【Golang标准库文档】：<a href=\"https://studygolang.com/pkgdoc\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/pkgdoc</a></p>\n<hr>\n<h2 id=\"0x00-fmt-格式标准库\"><a href=\"#0x00-fmt-格式标准库\" class=\"headerlink\" title=\"0x00 fmt.格式标准库\"></a>0x00 fmt.格式标准库</h2><p>描述: 本文介绍了fmtb包的一些常用函数。</p>\n<p><strong>fmt 包</strong> : fmt包实现了类似C语言<code>printf</code>和<code>scanf</code>的格式化I/O。主要分为向外输出内容和获取输入内容两大部分。</p>\n<h3 id=\"1-标准输出\"><a href=\"#1-标准输出\" class=\"headerlink\" title=\"1.标准输出\"></a>1.标准输出</h3><p>标准库fmt提供了以下几种输出相关函数。</p>\n<h4 id=\"Print\"><a href=\"#Print\" class=\"headerlink\" title=\"Print\"></a>Print</h4><p>描述: <code>Print</code>系列函数会将内容输出到系统的标准输出，区别在于<code>Print</code>函数直接输出内容，<code>Printf</code>函数支持格式化输出字符串，<code>Println</code>函数会在输出内容的结尾添加一个换行符。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Print</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Printf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Println</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<p>举个简单的例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">\"在终端打印该信息。\"</span>)</span><br><span class=\"line\">  name := <span class=\"string\">\"WeiyiGeek-Go语言学习\"</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"我是：%s\\n\"</span>, name)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"在终端打印单独一行显示\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行上面的代码输出：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在终端打印该信息。我是：WeiyiGeek-Go语言学习</span><br><span class=\"line\">在终端打印单独一行显示</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h4 id=\"Fprint\"><a href=\"#Fprint\" class=\"headerlink\" title=\"Fprint\"></a>Fprint</h4><p><code>Fprint</code>系列函数会将内容输出到一个<code>io.Writer</code>接口类型的变量<code>w</code>中，我们通常用这个函数往文件中写入内容。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fprint</span><span class=\"params\">(w io.Writer, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Fprintf</span><span class=\"params\">(w io.Writer, format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Fprintln</span><span class=\"params\">(w io.Writer, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>举个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 向标准输出写入内容</span></span><br><span class=\"line\">fmt.Fprintln(os.Stdout, <span class=\"string\">\"向标准输出写入内容\"</span>)</span><br><span class=\"line\">fileObj, err := os.OpenFile(<span class=\"string\">\"./xx.txt\"</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class=\"number\">0644</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"打开文件出错，err:\"</span>, err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">name := <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\"><span class=\"comment\">// 向打开的文件句柄中写入内容</span></span><br><span class=\"line\">fmt.Fprintf(fileObj, <span class=\"string\">\"往文件中写如信息：%s\"</span>, name)</span><br></pre></td></tr></table></figure><br>注意，只要满足<code>io.Writer</code>接口的类型都支持写入。</p>\n<p><br/></p>\n<h4 id=\"Sprint\"><a href=\"#Sprint\" class=\"headerlink\" title=\"Sprint\"></a>Sprint</h4><p><code>Sprint</code>系列函数会把传入的数据生成并返回一个字符串。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sprint</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Sprintf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Sprintln</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">string</span></span></span><br></pre></td></tr></table></figure>\n<p>简单的示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 := fmt.Sprint(<span class=\"string\">\"WeiyiGeek\"</span>)</span><br><span class=\"line\">name := <span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">age := <span class=\"number\">18</span></span><br><span class=\"line\">s2 := fmt.Sprintf(<span class=\"string\">\"name:%s,age:%d\"</span>, name, age)</span><br><span class=\"line\">s3 := fmt.Sprintln(<span class=\"string\">\"WeiyiGeek\"</span>)</span><br><span class=\"line\">fmt.Println(s1, s2, s3)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"Errorf\"><a href=\"#Errorf\" class=\"headerlink\" title=\"Errorf\"></a>Errorf</h4><p><code>Errorf</code>函数根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Errorf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span></span><br></pre></td></tr></table></figure>\n<p>通常使用这种方式来自定义错误类型，例如：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := fmt.Errorf(<span class=\"string\">\"这是一个错误\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Go1.13版本为<code>fmt.Errorf</code>函数新加了一个<code>%w</code>占位符用来生成一个可以包裹Error的Wrapping Error。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e := errors.New(<span class=\"string\">\"原始错误e\"</span>)</span><br><span class=\"line\">w := fmt.Errorf(<span class=\"string\">\"Wrap了一个错误%w\"</span>, e)  <span class=\"comment\">// Wrap了一个错误原始错误e</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h3 id=\"2-标准输入\"><a href=\"#2-标准输入\" class=\"headerlink\" title=\"2.标准输入\"></a>2.标准输入</h3><p>Go语言<code>fmt</code>包下有<code>fmt.Scan</code>、<code>fmt.Scanf</code>、<code>fmt.Scanln</code>三个函数，可以在程序运行过程中从标准输入获取用户的输入。</p>\n<h4 id=\"fmt-Scan\"><a href=\"#fmt-Scan\" class=\"headerlink\" title=\"fmt.Scan\"></a>fmt.Scan</h4><p>函数定签名如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scan</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Scan从标准输入扫描文本，读取由空白符分隔的值保存到传递给本函数的参数中，换行符视为空白符。</li>\n<li>本函数返回成功扫描的数据个数和遇到的任何错误。如果读取的数据个数比提供的参数少，会返回一个错误报告原因。</li>\n</ul>\n<p>具体代码示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    name    <span class=\"keyword\">string</span></span><br><span class=\"line\">    age     <span class=\"keyword\">int</span></span><br><span class=\"line\">    married <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  fmt.Scan(&amp;name, &amp;age, &amp;married)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"扫描结果 name:%s age:%d married:%t \\n\"</span>, name, age, married)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上面的代码编译后在终端执行，在终端依次输入<code>小王子</code>、<code>28</code>和<code>false</code>使用空格分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./scan_demo </span><br><span class=\"line\">小王子 28 <span class=\"literal\">false</span></span><br><span class=\"line\">扫描结果 name:小王子 age:28 married:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><code>fmt.Scan</code>从标准输入中扫描用户输入的数据，将以空白符分隔的数据分别存入指定的参数。</p>\n<h4 id=\"fmt-Scanf\"><a href=\"#fmt-Scanf\" class=\"headerlink\" title=\"fmt.Scanf\"></a>fmt.Scanf</h4><p>函数签名如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scanf</span><span class=\"params\">(format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Scanf从标准输入扫描文本，根据format参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</li>\n<li>本函数返回成功扫描的数据个数和遇到的任何错误。</li>\n</ul>\n<p>代码示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    name    <span class=\"keyword\">string</span></span><br><span class=\"line\">    age     <span class=\"keyword\">int</span></span><br><span class=\"line\">    married <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  fmt.Scanf(<span class=\"string\">\"1:%s 2:%d 3:%t\"</span>, &amp;name, &amp;age, &amp;married)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"扫描结果 name:%s age:%d married:%t \\n\"</span>, name, age, married)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上面的代码编译后在终端执行，在终端按照指定的格式依次输入<code>小王子</code>、<code>28</code>和<code>false</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./scan_demo </span><br><span class=\"line\">1:小王子 2:28 3:<span class=\"literal\">false</span></span><br><span class=\"line\">扫描结果 name:小王子 age:28 married:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><code>fmt.Scanf</code>不同于<code>fmt.Scan</code>简单的以空格作为输入数据的分隔符，<code>fmt.Scanf</code>为输入数据指定了具体的输入内容格式，只有按照格式输入数据才会被扫描并存入对应变量。</p>\n<p>例如，我们还是按照上个示例中以空格分隔的方式输入，<code>fmt.Scanf</code>就不能正确扫描到输入的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./scan_demo </span><br><span class=\"line\">小王子 28 <span class=\"literal\">false</span></span><br><span class=\"line\">扫描结果 name: age:0 married:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"fmt-Scanln\"><a href=\"#fmt-Scanln\" class=\"headerlink\" title=\"fmt.Scanln\"></a>fmt.Scanln</h4><p>函数签名如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scanln</span><span class=\"params\">(a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Scanln类似Scan，它在遇到换行时才停止扫描。最后一个数据后面必须有换行或者到达结束位置。</li>\n<li>本函数返回成功扫描的数据个数和遇到的任何错误。</li>\n</ul>\n<p>具体代码示例如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    name    <span class=\"keyword\">string</span></span><br><span class=\"line\">    age     <span class=\"keyword\">int</span></span><br><span class=\"line\">    married <span class=\"keyword\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  fmt.Scanln(&amp;name, &amp;age, &amp;married)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"扫描结果 name:%s age:%d married:%t \\n\"</span>, name, age, married)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上面的代码编译后在终端执行，在终端依次输入<code>小王子</code>、<code>28</code>和<code>false</code>使用空格分隔。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./scan_demo </span><br><span class=\"line\">小王子 28 <span class=\"literal\">false</span></span><br><span class=\"line\">扫描结果 name:小王子 age:28 married:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><code>fmt.Scanln</code>遇到回车就结束扫描了，这个比较常用。</p>\n<h4 id=\"bufio-NewReader\"><a href=\"#bufio-NewReader\" class=\"headerlink\" title=\"bufio.NewReader\"></a>bufio.NewReader</h4><p>有时候我们想完整获取输入的内容，而输入的内容可能包含空格，这种情况下可以使用<code>bufio</code>包来实现。示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bufioDemo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  reader := bufio.NewReader(os.Stdin) <span class=\"comment\">// 从标准输入生成读对象</span></span><br><span class=\"line\">  fmt.Print(<span class=\"string\">\"请输入内容：\"</span>)</span><br><span class=\"line\">  text, _ := reader.ReadString(<span class=\"string\">'\\n'</span>) <span class=\"comment\">// 读到换行</span></span><br><span class=\"line\">  text = strings.TrimSpace(text)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%#v\\n\"</span>, text)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"Fscan-系列\"><a href=\"#Fscan-系列\" class=\"headerlink\" title=\"Fscan 系列\"></a>Fscan 系列</h4><p>描述: 这几个函数功能分别类似于<code>fmt.Scan</code>、<code>fmt.Scanf</code>、<code>fmt.Scanln</code>三个函数，只不过它们不是从标准输入中读取数据而是从<code>io.Reader</code>中读取数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fscan</span><span class=\"params\">(r io.Reader, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Fscanln</span><span class=\"params\">(r io.Reader, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Fscanf</span><span class=\"params\">(r io.Reader, format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h4 id=\"Sscan-系列\"><a href=\"#Sscan-系列\" class=\"headerlink\" title=\"Sscan 系列\"></a>Sscan 系列</h4><p>描述: 这几个函数功能分别类似于<code>fmt.Scan</code>、<code>fmt.Scanf</code>、<code>fmt.Scanln</code>三个函数，只不过它们不是从标准输入中读取数据而是从指定字符串中读取数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sscan</span><span class=\"params\">(str <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Sscanln</span><span class=\"params\">(str <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Sscanf</span><span class=\"params\">(str <span class=\"keyword\">string</span>, format <span class=\"keyword\">string</span>, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<p>示例演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name <span class=\"keyword\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> age <span class=\"keyword\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> boolean_value <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">  n, err := fmt.Sscan(<span class=\"string\">\"WeiyiGeek 18 true\"</span>,</span><br><span class=\"line\">    &amp;name, &amp;age, &amp;boolean_value)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%d:%s, %d, %t\"</span>, n, name, age, boolean_value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span>:WeiyiGeek, <span class=\"number\">18</span>, <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><br></p>\n<h3 id=\"3-格式化占位符\"><a href=\"#3-格式化占位符\" class=\"headerlink\" title=\"3.格式化占位符\"></a>3.格式化占位符</h3><p>描述: <code>*printf</code>系列函数都支持format格式化参数，在这里我们按照占位符将被替换的变量类型划分，方便查询和记忆。</p>\n<h4 id=\"通用占位符\"><a href=\"#通用占位符\" class=\"headerlink\" title=\"通用占位符\"></a>通用占位符</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%v</td>\n<td>值的默认格式表示</td>\n</tr>\n<tr>\n<td>%+v</td>\n<td>类似%v，但输出结构体时会添加字段名</td>\n</tr>\n<tr>\n<td>%#v</td>\n<td>值的Go语法表示</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>打印值的类型</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>百分号</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">o := <span class=\"keyword\">struct</span>&#123; name <span class=\"keyword\">string</span> &#125;&#123;<span class=\"string\">\"小王子\"</span>&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%v\\n\"</span>, o)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%#v\\n\"</span>, o)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%T\\n\"</span>, o)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"100%%\\n\"</span>)</span><br></pre></td></tr></table></figure><br>输出结果如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">100</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">&#123;小王子&#125;</span><br><span class=\"line\">struct &#123; name string &#125;&#123;name:<span class=\"string\">\"小王子\"</span>&#125;</span><br><span class=\"line\">struct &#123; name string &#125;</span><br><span class=\"line\">100%</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"布尔型\"><a href=\"#布尔型\" class=\"headerlink\" title=\"布尔型\"></a>布尔型</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%t</td>\n<td>true或false</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%b</td>\n<td>表示为二进制</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>该值对应的unicode码值</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>表示为十进制</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>表示为八进制</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>表示为十六进制，使用a-f</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>表示为十六进制，使用A-F</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>表示为Unicode格式：U+1234，等价于”U+%04X”</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n := <span class=\"number\">65</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%b\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%c\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%d\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%o\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"0x%x\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"0X%X\\n\"</span>, n)</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000001</span><br><span class=\"line\">A</span><br><span class=\"line\">65</span><br><span class=\"line\">101</span><br><span class=\"line\">0x41</span><br><span class=\"line\">0X41</span><br></pre></td></tr></table></figure>\n<h4 id=\"浮点数与复数\"><a href=\"#浮点数与复数\" class=\"headerlink\" title=\"浮点数与复数\"></a>浮点数与复数</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%b</td>\n<td>无小数部分、二进制指数的科学计数法，如-123456p-78</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>科学计数法，如-1234.456e+78</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>科学计数法，如-1234.456E+78</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>有小数部分但无指数部分，如123.456</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>等价于%f</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f := <span class=\"number\">12.34</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%b\\n\"</span>, f)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%e\\n\"</span>, f)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%E\\n\"</span>, f)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%f\\n\"</span>, f)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%g\\n\"</span>, f)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%G\\n\"</span>, f)</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6946802425218990p-49</span><br><span class=\"line\">1.234000e+01</span><br><span class=\"line\">1.234000E+01</span><br><span class=\"line\">12.340000</span><br><span class=\"line\">12.34</span><br><span class=\"line\">12.34</span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串和-byte\"><a href=\"#字符串和-byte\" class=\"headerlink\" title=\"字符串和[]byte\"></a>字符串和[]byte</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%s</td>\n<td>直接输出字符串或者[]byte</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>每个字节用两字符十六进制数表示（使用a-f</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>每个字节用两字符十六进制数表示（使用A-F）</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"小王子\"</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%q\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%x\\n\"</span>, s)  <span class=\"comment\">// 小写</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%X\\n\"</span>, s)  <span class=\"comment\">// 大写</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小王子</span><br><span class=\"line\"><span class=\"string\">\"小王子\"</span></span><br><span class=\"line\">e5b08fe78e8be5ad90</span><br><span class=\"line\">E5B08FE78E8BE5AD90</span><br></pre></td></tr></table></figure>\n<h4 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%p</td>\n<td>表示为十六进制，并加上前导的0x</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := <span class=\"number\">10</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%p\\n\"</span>, &amp;a)  <span class=\"comment\">// 变量a的地址</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%#p\\n\"</span>, &amp;a)</span><br></pre></td></tr></table></figure><br>输出结果如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0xc000094000</span><br><span class=\"line\">c000094000</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"宽度标识符\"><a href=\"#宽度标识符\" class=\"headerlink\" title=\"宽度标识符\"></a>宽度标识符</h4><p>宽度通过一个紧跟在百分号后面的十进制数指定，如果未指定宽度，则表示值时除必需之外不作填充。精度通过（可选的）宽度后跟点号后跟的十进制数指定。如果未指定精度，会使用默认精度；如果点号后没有跟数字，表示精度为0。</p>\n<p>举例如下：</p>\n<table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%f</td>\n<td>默认宽度，默认精度</td>\n</tr>\n<tr>\n<td>%9f</td>\n<td>宽度9，默认精度</td>\n</tr>\n<tr>\n<td>%.2f</td>\n<td>默认宽度，精度2</td>\n</tr>\n<tr>\n<td>%9.2f</td>\n<td>宽度9，精度2</td>\n</tr>\n<tr>\n<td>%9.f</td>\n<td>宽度9，精度0</td>\n</tr>\n</tbody>\n</table>\n<p>示例代码如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n := <span class=\"number\">12.34</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%f\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%9f\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%.2f\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%9.2f\\n\"</span>, n)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%9.f\\n\"</span>, n)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12.340000</span><br><span class=\"line\">12.340000</span><br><span class=\"line\">12.34</span><br><span class=\"line\">    12.34</span><br><span class=\"line\">       12</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他flag\"><a href=\"#其他flag\" class=\"headerlink\" title=\"其他flag\"></a>其他flag</h4><table>\n<thead>\n<tr>\n<th>占位符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>’+’</td>\n<td>总是输出数值的正负号；对%q（%+q）会生成全部是ASCII字符的输出（通过转义）；</td>\n</tr>\n<tr>\n<td>’ ‘</td>\n<td>对数值，正数前加空格而负数前加负号；对字符串<code>采用%x或%X时（% x或% X）</code>会给各打印的字节之间加空格</td>\n</tr>\n<tr>\n<td>’-’</td>\n<td>在输出右边填充空白而不是默认的左边（即从默认的右对齐切换为左对齐）；</td>\n</tr>\n<tr>\n<td>’#’</td>\n<td>八进制数前加0（%#o），十六进制数前加<code>0x（%#x）或0X（%#X）</code>，指针去掉前面的<code>0x（%#p）对%q（%#q），对%U（%#U）</code>会输出空格和单引号括起来的go字面值；</td>\n</tr>\n<tr>\n<td>‘0’</td>\n<td>使用0而不是空格填充，对于数值类型会把填充的0放在正负号后面；</td>\n</tr>\n</tbody>\n</table>\n<p>举个例子：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"小王子\"</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%5s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%-5s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%5.7s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%-5.7s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%5.2s\\n\"</span>, s)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%05s\\n\"</span>, s)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小王子</span><br><span class=\"line\">  小王子</span><br><span class=\"line\">小王子  </span><br><span class=\"line\">  小王子</span><br><span class=\"line\">小王子  </span><br><span class=\"line\">   小王</span><br><span class=\"line\">00小王子</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x01-os-命令标准库\"><a href=\"#0x01-os-命令标准库\" class=\"headerlink\" title=\"0x01 os.命令标准库\"></a>0x01 os.命令标准库</h2><h3 id=\"1-命令行参数\"><a href=\"#1-命令行参数\" class=\"headerlink\" title=\"1.命令行参数\"></a>1.命令行参数</h3><p>描述: 如果你只是简单的想要获取命令行参数，可以像下面的代码示例一样使用<code>os.Args</code>来获取命令行参数。</p>\n<p>Tips : <code>os.Args</code> 是一个存储命令行参数的字符串切片，它的第一个元素是执行文件的名称。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//os.Args demo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//os.Args 是一个 []string</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, arg := <span class=\"keyword\">range</span> os.Args &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">\"args[%d]=%v\\n\"</span>, index, arg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将上面的代码执行<code>go build -o &quot;args_demo&quot;</code>编译之后，执行：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./args_demo a b c d</span><br><span class=\"line\">args[<span class=\"number\">0</span>]=./args_demo</span><br><span class=\"line\">args[<span class=\"number\">1</span>]=a</span><br><span class=\"line\">args[<span class=\"number\">2</span>]=b</span><br><span class=\"line\">args[<span class=\"number\">3</span>]=c</span><br><span class=\"line\">args[<span class=\"number\">4</span>]=d</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"2-文件操作参数\"><a href=\"#2-文件操作参数\" class=\"headerlink\" title=\"2.文件操作参数\"></a>2.文件操作参数</h3><p>我们可以使用<code>os.Open()</code>与<code>os.Openfile()</code>方法读取或者写入、创建文件。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个只读的文化句柄</span></span><br><span class=\"line\">file, err := os.Open(<span class=\"string\">\"./onlyread.txt\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"open file failed!, err:\"</span>, err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个可写入文件句柄</span></span><br><span class=\"line\">file, err := os.OpenFile(<span class=\"string\">\"./write.txt\"</span>, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, <span class=\"number\">0644</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"open write file failed!, err:\"</span>, err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件重命名</span></span><br><span class=\"line\">os.Rename(<span class=\"string\">\"./write.txt\"</span>,<span class=\"string\">\"./write.txt.bak\"</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-flag-参数标准库\"><a href=\"#0x02-flag-参数标准库\" class=\"headerlink\" title=\"0x02 flag.参数标准库\"></a>0x02 flag.参数标准库</h2><p>描述: Go语言内置的flag包实现了命令行参数的解析，flag包使得开发命令行工具更为简单。<br>文档参考: <a href=\"https://studygolang.com/pkgdoc\" target=\"_blank\" rel=\"noopener\">https://studygolang.com/pkgdoc</a></p>\n<h3 id=\"1-导入与参数类型\"><a href=\"#1-导入与参数类型\" class=\"headerlink\" title=\"1.导入与参数类型\"></a>1.导入与参数类型</h3><p>描述: 同样要想使用我们需要先导入其包。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> flag</span><br></pre></td></tr></table></figure></p>\n<p>参数类型: flag 包支持的命令行参数类型有 <code>bool、int、int64、uint、uint64、float float64、string、duration</code></p>\n<table>\n<thead>\n<tr>\n<th>flag参数</th>\n<th>有效值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符串flag</td>\n<td>合法字符串</td>\n</tr>\n<tr>\n<td>整数flag</td>\n<td>1234、0664、0x1234等类型，也可以是负数。</td>\n</tr>\n<tr>\n<td>浮点数flag</td>\n<td>合法浮点数</td>\n</tr>\n<tr>\n<td>bool类型flag</td>\n<td>1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False。</td>\n</tr>\n<tr>\n<td>时间段flag</td>\n<td>任何合法的时间段字符串。如”300ms”、”-1.5h”、”2h45m”。 合法的单位有”ns”、”us” 、“µs”、”ms”、”s”、”m”、”h”。</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<h3 id=\"2-定义命令行参数\"><a href=\"#2-定义命令行参数\" class=\"headerlink\" title=\"2.定义命令行参数\"></a>2.定义命令行参数</h3><p>描述: 有以下两种常用的定义命令行flag参数的方法。</p>\n<h4 id=\"flag-Type\"><a href=\"#flag-Type\" class=\"headerlink\" title=\"flag.Type()\"></a>flag.Type()</h4><p>基本格式如下：<code>flag.Type(flag名, 默认值, 帮助信息)*Type</code> 例如: 我们要定义姓名、年龄、婚否三个命令行参数，我们可以按如下方式定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name := flag.String(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"姓名\"</span>) <span class=\"comment\">// 返回的是指针变量</span></span><br><span class=\"line\">age := flag.Int(<span class=\"string\">\"age\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">married := flag.Bool(<span class=\"string\">\"married\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"婚否\"</span>)</span><br><span class=\"line\">delay := flag.Duration(<span class=\"string\">\"d\"</span>, <span class=\"number\">0</span>, <span class=\"string\">\"时间间隔\"</span>) <span class=\"comment\">// 注意:时间参数需要指定合法单位。</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是，此时<code>name</code>、<code>age</code>、<code>married</code>、<code>delay</code>均为对应类型的指针，在输出时需要加取地址符(<code>*</code>)。</p>\n<p><br/></p>\n<h4 id=\"flag-TypeVar\"><a href=\"#flag-TypeVar\" class=\"headerlink\" title=\"flag.TypeVar()\"></a>flag.TypeVar()</h4><p>基本格式如下： <code>flag.TypeVar(Type指针, flag名, 默认值, 帮助信息)</code> 例如: 我们要定义姓名、年龄、婚否三个命令行参数，我们可以按如下方式定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> married <span class=\"keyword\">bool</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay time.Duration</span><br><span class=\"line\"><span class=\"comment\">// 已下方式是常用的非常重要，它将传入的参数与指定变量名称地址进行绑定。</span></span><br><span class=\"line\">flag.StringVar(&amp;name, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">flag.IntVar(&amp;age, <span class=\"string\">\"age\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">flag.BoolVar(&amp;married, <span class=\"string\">\"married\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"婚否\"</span>)</span><br><span class=\"line\">flag.DurationVar(&amp;delay, <span class=\"string\">\"d\"</span>, <span class=\"number\">0</span>, <span class=\"string\">\"时间间隔\"</span>)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"flag-Parse\"><a href=\"#flag-Parse\" class=\"headerlink\" title=\"flag.Parse()\"></a>flag.Parse()</h4><p>描述: 通过以上两种方法定义好命令行flag参数后，需要通过调用<code>flag.Parse()</code>来对命令行参数进行解析，并将其赋值给对应的变量。</p>\n<p>支持的命令行参数格式有以下几种：</p>\n<ul>\n<li><code>-flag xxx</code> （使用空格，一个<code>-</code>符号）</li>\n<li><code>--flag xxx</code> （使用空格，两个<code>-</code>符号）</li>\n<li><code>-flag=xxx</code> （使用等号，一个<code>-</code>符号）</li>\n<li><code>--flag=xxx</code> （使用等号，两个<code>-</code>符号）</li>\n</ul>\n<p>其中，布尔类型的参数必须使用等号的方式指定。</p>\n<p>Flag 解析在第一个非flag参数（<code>单个&#39;-&#39;不是flag参数</code>）之前停止，或者在终止符<code>–</code>之后停止。</p>\n<p><br></p>\n<h3 id=\"3-其它方法\"><a href=\"#3-其它方法\" class=\"headerlink\" title=\"3.其它方法\"></a>3.其它方法</h3><p>描述：下述该<code>Flag</code>的方法可以帮助我们查看<code>其它参数</code>和<code>参数数量</code>。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag.Args()  <span class=\"comment\">// 返回命令行参数后的其他参数，以[]string类型</span></span><br><span class=\"line\">flag.NArg()  <span class=\"comment\">// 返回命令行参数后的其他参数个数</span></span><br><span class=\"line\">flag.NFlag() <span class=\"comment\">// 返回使用的命令行参数个数</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>完整示例:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义命令行参数方式</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    name <span class=\"keyword\">string</span></span><br><span class=\"line\">    age <span class=\"keyword\">int</span></span><br><span class=\"line\">    married <span class=\"keyword\">bool</span></span><br><span class=\"line\">    delay time.Duration</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"comment\">// 如没有参数参入则采用默认设置的参数</span></span><br><span class=\"line\">  flag.StringVar(&amp;name, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"张三\"</span>, <span class=\"string\">\"姓名\"</span>)</span><br><span class=\"line\">  flag.IntVar(&amp;age, <span class=\"string\">\"age\"</span>, <span class=\"number\">18</span>, <span class=\"string\">\"年龄\"</span>)</span><br><span class=\"line\">  flag.BoolVar(&amp;married, <span class=\"string\">\"married\"</span>, <span class=\"literal\">false</span>, <span class=\"string\">\"婚否\"</span>)</span><br><span class=\"line\">  flag.DurationVar(&amp;delay, <span class=\"string\">\"delay\"</span>, <span class=\"number\">0</span>, <span class=\"string\">\"延迟的时间间隔\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析命令行参数</span></span><br><span class=\"line\">  flag.Parse()</span><br><span class=\"line\">  fmt.Println(name, age, married, delay)</span><br><span class=\"line\">  <span class=\"comment\">//返回命令行参数后的其他参数</span></span><br><span class=\"line\">  fmt.Println(flag.Args())</span><br><span class=\"line\">  <span class=\"comment\">//返回命令行参数后的其他参数个数</span></span><br><span class=\"line\">  fmt.Println(flag.NArg())</span><br><span class=\"line\">  <span class=\"comment\">//返回使用的命令行参数个数</span></span><br><span class=\"line\">  fmt.Println(flag.NFlag())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>命令行参数使用提示:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  package go build -o flag</span><br><span class=\"line\">$ ./flag -<span class=\"built_in\">help</span></span><br><span class=\"line\">  <span class=\"comment\"># Usage of ./flag:</span></span><br><span class=\"line\">  <span class=\"comment\">#   -age int</span></span><br><span class=\"line\">  <span class=\"comment\">#         年龄 (default 18)</span></span><br><span class=\"line\">  <span class=\"comment\">#   -d duration</span></span><br><span class=\"line\">  <span class=\"comment\">#         时间间隔</span></span><br><span class=\"line\">  <span class=\"comment\">#   -married</span></span><br><span class=\"line\">  <span class=\"comment\">#         婚否</span></span><br><span class=\"line\">  <span class=\"comment\">#   -name string</span></span><br><span class=\"line\">  <span class=\"comment\">#         姓名 (default \"张三\")</span></span><br><span class=\"line\">➜  package ./flag -name <span class=\"string\">\"WeiyiGeek\"</span> -age 18 -d=1h30m -married=<span class=\"literal\">false</span> other1 other2</span><br><span class=\"line\">  <span class=\"comment\"># WeiyiGeek 18 false 1h30m0s   // 传入参数</span></span><br><span class=\"line\">  <span class=\"comment\"># [other1 other2]              // 未设置的参数(--flag)</span></span><br><span class=\"line\">  <span class=\"comment\"># 2                            // 未设置的参数(--flag)的个数</span></span><br><span class=\"line\">  <span class=\"comment\"># 4                            // 传入参数的个数</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x03-log-日志标准库\"><a href=\"#0x03-log-日志标准库\" class=\"headerlink\" title=\"0x03 log.日志标准库\"></a>0x03 log.日志标准库</h2><p>描述: 无论是软件开发的调试阶段还是软件上线之后的运行阶段，日志一直都是非常重要的一个环节，我们也应该养成在程序中记录日志的好习惯。</p>\n<p>描述: Go语言内置的log包实现了简单的日志服务, 本文介绍了标准库log的基本使用。</p>\n<h3 id=\"1-使用Logger\"><a href=\"#1-使用Logger\" class=\"headerlink\" title=\"1.使用Logger\"></a>1.使用Logger</h3><p>描述: log包定义了Logger类型，该类型提供了一些格式化输出的方法。本包也提供了一个预定义的“标准”logger，可以通过调用<code>函数Print系列(Print|Printf|Println）</code>、<code>Fatal系列（Fatal|Fatalf|Fatalln）</code>、和<code>Panic系列（Panic|Panicf|Panicln）</code>来使用，比自行创建一个logger对象更容易使用。</p>\n<p>例如，我们可以像下面的代码一样直接通过log包来调用上面提到的方法，默认它们会将日志信息打印到终端界面：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">  v := <span class=\"string\">\"很普通的\"</span></span><br><span class=\"line\">  log.Printf(<span class=\"string\">\"这是一条%s日志。\\n\"</span>, v)</span><br><span class=\"line\">  log.Fatalln(<span class=\"string\">\"这是一条会触发fatal的日志。\"</span>)</span><br><span class=\"line\">  log.Panicln(<span class=\"string\">\"这是一条会触发panic的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译并执行上面的代码会得到如下输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2017/06/19 14:04:17 这是一条很普通的日志。</span><br><span class=\"line\">2017/06/19 14:04:17 这是一条很普通的日志。</span><br><span class=\"line\">2017/06/19 14:04:17 这是一条会触发fatal的日志。</span><br></pre></td></tr></table></figure></p>\n<p>Tips : logger 会打印每条日志信息的日期、时间，默认输出到系统的标准错误。<br>Tips : Fatal 系列函数会在写入日志信息后调用 <code>os.Exit(1)</code>。<br>Tips : Panic 系列函数会在写入日志信息后调用 <code>panic</code>。</p>\n<p><br/></p>\n<h3 id=\"2-配置Logger\"><a href=\"#2-配置Logger\" class=\"headerlink\" title=\"2.配置Logger\"></a>2.配置Logger</h3><p><strong>标准配置</strong><br>描述: 默认情况下的logger只会提供日志的时间信息，但是很多情况下我们希望得到更多信息，比如记录该日志的文件名和行号等。log标准库中为我们提供了定制这些设置的方法。</p>\n<p>Tips : log 标准库中的<code>Flags</code>函数会返回标准logger的输出配置，而SetFlags函数用来设置标准logger的输出配置。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Flags</span><span class=\"params\">()</span> <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">SetFlags</span><span class=\"params\">(flag <span class=\"keyword\">int</span>)</span></span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>flag 选项</strong><br>描述: log标准库提供了如下的flag选项，它们是一系列定义好的常量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  <span class=\"comment\">// 控制输出日志信息的细节，不能控制输出的顺序和格式。</span></span><br><span class=\"line\">  <span class=\"comment\">// 输出的日志在每一项后会有一个冒号分隔：例如 2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message</span></span><br><span class=\"line\">  Ldate         = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span>     <span class=\"comment\">// 日期：2009/01/23</span></span><br><span class=\"line\">  Ltime                         <span class=\"comment\">// 时间：01:23:23</span></span><br><span class=\"line\">  Lmicroseconds                 <span class=\"comment\">// 微秒级别的时间：01:23:23.123123（用于增强Ltime位）</span></span><br><span class=\"line\">  Llongfile                     <span class=\"comment\">// 文件全路径名+行号： /a/b/c/d.go:23</span></span><br><span class=\"line\">  Lshortfile                    <span class=\"comment\">// 文件名+行号：d.go:23（会覆盖掉Llongfile）</span></span><br><span class=\"line\">  LUTC                          <span class=\"comment\">// 使用UTC时间</span></span><br><span class=\"line\">  LstdFlags     = Ldate | Ltime <span class=\"comment\">// 标准logger的初始值</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>下面我们在记录日志之前先设置一下标准logger的输出选项如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">  log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译执行后得到的输出结果如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2017</span>/<span class=\"number\">06</span>/<span class=\"number\">19</span> <span class=\"number\">14</span>:<span class=\"number\">05</span>:<span class=\"number\">17.494943</span> .../log_demo/main.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>: 这是一条很普通的日志。</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>配置日志前缀</strong><br>描述: log标准库中还提供了关于日志信息前缀的两个方法：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Prefix</span><span class=\"params\">()</span> <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">SetPrefix</span><span class=\"params\">(prefix <span class=\"keyword\">string</span>)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>其中Prefix函数用来查看标准logger的输出前缀，SetPrefix函数用来设置输出前缀。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">  log.SetPrefix(<span class=\"string\">\"[小王子]\"</span>)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码输出如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[小王子]<span class=\"number\">2017</span>/<span class=\"number\">06</span>/<span class=\"number\">19</span> <span class=\"number\">14</span>:<span class=\"number\">05</span>:<span class=\"number\">57.940542</span> .../log_demo/main.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>: 这是一条很普通的日志。</span><br></pre></td></tr></table></figure></p>\n<p>Tips : 这样我们就能够在代码中为我们的日志信息添加指定的前缀，方便之后对日志信息进行检索和处理。</p>\n<p><br></p>\n<p><strong>配置日志输出位置</strong><br>描述: <code>SetOutput 函数</code>用来设置标准logger的输出目的地，默认是标准错误输出。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func SetOutput(w io.Writer)</span><br></pre></td></tr></table></figure></p>\n<p>例如，下面的代码会把日志输出到同目录下的xx.log文件中。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  logFile, err := os.OpenFile(<span class=\"string\">\"./xx.log\"</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class=\"number\">0644</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"open log file failed, err:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.SetOutput(logFile)</span><br><span class=\"line\">  log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">  log.SetPrefix(<span class=\"string\">\"[小王子]\"</span>)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是一条很普通的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br></p>\n<p>如果你要使用标准的logger，我们通常会把上面的配置操作写到init函数中。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  logFile, err := os.OpenFile(<span class=\"string\">\"./xx.log\"</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class=\"number\">0644</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"open log file failed, err:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.SetOutput(logFile)</span><br><span class=\"line\">  log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"3-创建Logger\"><a href=\"#3-创建Logger\" class=\"headerlink\" title=\"3.创建Logger\"></a>3.创建Logger</h3><p>描述: log标准库中还提供了一个创建新logger对象的构造函数–New，支持我们创建自己的logger示例。</p>\n<p>New 函数的签名如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func New(out io.Writer, prefix string, flag int) *Logger</span><br></pre></td></tr></table></figure></p>\n<p>New 创建一个Logger对象。其中参数out设置日志信息写入的目的地。参数prefix会添加到生成的每一条日志前面。参数flag定义日志的属性（时间、文件等）。</p>\n<p>举个例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\">  logger := log.New(os.Stdout, <span class=\"string\">\"&lt;New&gt;\"</span>, log.Lshortfile|log.Ldate|log.Ltime)</span><br><span class=\"line\">  logger.Println(<span class=\"string\">\"这是自定义的logger记录的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将上面的代码编译执行之后，得到结果如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;New&gt;2017/06/19 14:06:51 main.go:34: 这是自定义的logger记录的日志。</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"4-总结说明\"><a href=\"#4-总结说明\" class=\"headerlink\" title=\"4.总结说明\"></a>4.总结说明</h3><p>描述: Go内置的log库功能有限，例如无法满足记录不同级别日志的情况，我们在实际的项目中根据自己的需要选择使用第三方的日志库，如<a href=\"https://github.com/sirupsen/logrus\" target=\"_blank\" rel=\"noopener\">logrus</a>、<a href=\"https://github.com/uber-go/zap\" target=\"_blank\" rel=\"noopener\">zap</a>等。</p>\n<p>案例演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"log\"</span></span><br><span class=\"line\">  <span class=\"string\">\"os\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">delay</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  time.Sleep(time.Duration(<span class=\"number\">1</span>) * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  v := <span class=\"string\">\"信息警告提示\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 常规信息</span></span><br><span class=\"line\">  log.Printf(<span class=\"string\">\"[-] 此处是这一条的日志信息 ：%s 。\\n\"</span>, v)</span><br><span class=\"line\">  delay()</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"[-] 这是一条换行的日志信息。\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Flag 选项</span></span><br><span class=\"line\">  log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ltime | log.Ldate)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"[-] 这是换行的日志信息(Flag 选项)。\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 配置日志前缀</span></span><br><span class=\"line\">  log.SetPrefix(<span class=\"string\">\"[WeiyiGeek] \"</span>)</span><br><span class=\"line\">  log.Println(<span class=\"string\">\"这是换行的日志信息(配置日志前缀)。\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建 logger 使用示例</span></span><br><span class=\"line\">  logger := log.New(os.Stdout, <span class=\"string\">\"[New-WeiGeek] \"</span>, log.Lshortfile|log.Ldate|log.Ltime)</span><br><span class=\"line\">  logger.Println(<span class=\"string\">\"这是自定义的logger记录的日志。\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 配置日志输出</span></span><br><span class=\"line\">  logFile, err := os.OpenFile(<span class=\"string\">\"./Logger.log\"</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class=\"number\">0644</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"open log file failed, err:\"</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.SetOutput(logFile)               <span class=\"comment\">// 每次执行不会覆盖其内容，而会向其追加内容。</span></span><br><span class=\"line\">  log.Println(<span class=\"string\">\"[-] 这是要配置日志输出到文件之中（1）\"</span>) <span class=\"comment\">// 会输出到 /Logger.log</span></span><br><span class=\"line\">  log.Println(<span class=\"string\">\"[-] 这是要配置日志输出到文件之中（2）\"</span>) <span class=\"comment\">// 会输出到 /Logger.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行 Panicln 则会exit</span></span><br><span class=\"line\">  delay()</span><br><span class=\"line\">  log.Fatalln(<span class=\"string\">\"[-] 这是一条会触发fatal的日志。\"</span>) <span class=\"comment\">// 会输出到 /Logger.log</span></span><br><span class=\"line\">  delay()</span><br><span class=\"line\">  log.Panicln(<span class=\"string\">\"[-] 这是一条会触发panic的日志。\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat Logger.log</span><br><span class=\"line\">[WeiyiGeek] <span class=\"number\">2021</span>/<span class=\"number\">08</span>/<span class=\"number\">03</span> <span class=\"number\">11</span>:<span class=\"number\">35</span>:<span class=\"number\">29.482279</span> /home/weiyigeek/app/project/<span class=\"keyword\">go</span>/src/weiyigeek.top/studygo/<span class=\"keyword\">package</span>/<span class=\"number\">02l</span>ogger.<span class=\"keyword\">go</span>:<span class=\"number\">41</span>: [-] 这是要配置日志输出到文件之中（<span class=\"number\">1</span>）</span><br><span class=\"line\">[WeiyiGeek] <span class=\"number\">2021</span>/<span class=\"number\">08</span>/<span class=\"number\">03</span> <span class=\"number\">11</span>:<span class=\"number\">35</span>:<span class=\"number\">29.482338</span> /home/weiyigeek/app/project/<span class=\"keyword\">go</span>/src/weiyigeek.top/studygo/<span class=\"keyword\">package</span>/<span class=\"number\">02l</span>ogger.<span class=\"keyword\">go</span>:<span class=\"number\">42</span>: [-] 这是要配置日志输出到文件之中（<span class=\"number\">2</span>）</span><br><span class=\"line\">[WeiyiGeek] <span class=\"number\">2021</span>/<span class=\"number\">08</span>/<span class=\"number\">03</span> <span class=\"number\">11</span>:<span class=\"number\">35</span>:<span class=\"number\">30.482714</span> /home/weiyigeek/app/project/<span class=\"keyword\">go</span>/src/weiyigeek.top/studygo/<span class=\"keyword\">package</span>/<span class=\"number\">02l</span>ogger.<span class=\"keyword\">go</span>:<span class=\"number\">46</span>: [-] 这是一条会触发fatal的日志。</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2021/5/20210803113812.png\" alt=\"WeiyiGeek.Logger日志输出\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Logger日志输出</p>\n            </figure></p>\n<hr>\n<h2 id=\"0x04-time-时间标准库\"><a href=\"#0x04-time-时间标准库\" class=\"headerlink\" title=\"0x04 time.时间标准库\"></a>0x04 time.时间标准库</h2><p>描述: 本文主要介绍了Go语言内置的time包的基本用法，time包提供了时间的显示和测量用的函数。</p>\n<p>Time 报预定义的版式，其定义的时间为<code>2006年1月2号 15点04分05秒</code>是Go语言诞生的日子。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  ANSIC       = <span class=\"string\">\"Mon Jan _2 15:04:05 2006\"</span></span><br><span class=\"line\">  UnixDate    = <span class=\"string\">\"Mon Jan _2 15:04:05 MST 2006\"</span></span><br><span class=\"line\">  RubyDate    = <span class=\"string\">\"Mon Jan 02 15:04:05 -0700 2006\"</span></span><br><span class=\"line\">  RFC822      = <span class=\"string\">\"02 Jan 06 15:04 MST\"</span></span><br><span class=\"line\">  RFC822Z     = <span class=\"string\">\"02 Jan 06 15:04 -0700\"</span>            <span class=\"comment\">// 使用数字表示时区的RFC822</span></span><br><span class=\"line\">  RFC850      = <span class=\"string\">\"Monday, 02-Jan-06 15:04:05 MST\"</span></span><br><span class=\"line\">  RFC1123     = <span class=\"string\">\"Mon, 02 Jan 2006 15:04:05 MST\"</span></span><br><span class=\"line\">  RFC1123Z    = <span class=\"string\">\"Mon, 02 Jan 2006 15:04:05 -0700\"</span>  <span class=\"comment\">// 使用数字表示时区的RFC1123</span></span><br><span class=\"line\">  RFC3339     = <span class=\"string\">\"2006-01-02T15:04:05Z07:00\"</span></span><br><span class=\"line\">  RFC3339Nano = <span class=\"string\">\"2006-01-02T15:04:05.999999999Z07:00\"</span></span><br><span class=\"line\">  Kitchen     = <span class=\"string\">\"3:04PM\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方便的时间戳</span></span><br><span class=\"line\">  Stamp      = <span class=\"string\">\"Jan _2 15:04:05\"</span></span><br><span class=\"line\">  StampMilli = <span class=\"string\">\"Jan _2 15:04:05.000\"</span></span><br><span class=\"line\">  StampMicro = <span class=\"string\">\"Jan _2 15:04:05.000000\"</span></span><br><span class=\"line\">  StampNano  = <span class=\"string\">\"Jan _2 15:04:05.000000000\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以获取输出其定义常量</span></span><br><span class=\"line\">fmt.Println(time.ANSIC) # Mon Jan _2 <span class=\"number\">15</span>:<span class=\"number\">04</span>:<span class=\"number\">05</span> <span class=\"number\">2006</span></span><br></pre></td></tr></table></figure></p>\n<p>Tips: 日历的计算采用的是公历。</p>\n<h3 id=\"1-时间类型\"><a href=\"#1-时间类型\" class=\"headerlink\" title=\"1.时间类型\"></a>1.时间类型</h3><p>描述: 我们可以通过<code>time.Now()</code>函数获取当前的时间对象，然后获取时间对象的<code>年月日时分秒</code>等信息。</p>\n<p><strong>示例代码如下：</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输出当前时间</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Current Localtion Time is ：%v, \\nUTC Time is: %v\\n\"</span>, now.Local(), now.UTC())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 分别获取当前时间的年月日/时分秒</span></span><br><span class=\"line\">  year := now.Year()     <span class=\"comment\">//年</span></span><br><span class=\"line\">  month := now.Month()   <span class=\"comment\">//月</span></span><br><span class=\"line\">  day := now.Day()       <span class=\"comment\">//日</span></span><br><span class=\"line\">  hour := now.Hour()     <span class=\"comment\">//小时</span></span><br><span class=\"line\">  minute := now.Minute() <span class=\"comment\">//分钟</span></span><br><span class=\"line\">  second := now.Second() <span class=\"comment\">//秒</span></span><br><span class=\"line\">  y, m, d := now.Date()  <span class=\"comment\">//年月日</span></span><br><span class=\"line\">  week := now.Weekday()  <span class=\"comment\">//周</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Current Localtion Time Format: %d-%02d-%02d %02d:%02d:%02d\\n\"</span>, year, month, day, hour, minute, second)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Year : %d ,Month : %v ,Day : %d ,WeekDay : %v\\n\"</span>, y, m, d, week)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// === 执行结果 ===</span></span><br><span class=\"line\">Current Localtion Time is ：<span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">45</span>:<span class=\"number\">41.295602237</span> +<span class=\"number\">0800</span> CST, </span><br><span class=\"line\">UTC Time is: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">04</span>:<span class=\"number\">45</span>:<span class=\"number\">41.295602237</span> +<span class=\"number\">0000</span> UTC</span><br><span class=\"line\">Current Localtion Time Format: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">45</span>:<span class=\"number\">41</span></span><br><span class=\"line\">Year : <span class=\"number\">2021</span> ,Month : September ,Day : <span class=\"number\">27</span> ,WeekDay : Monday</span><br></pre></td></tr></table></figure><br><br/></p>\n<h3 id=\"2-时间戳\"><a href=\"#2-时间戳\" class=\"headerlink\" title=\"2.时间戳\"></a>2.时间戳</h3><p>描述: 时间戳是自1970年1月1日（00:00:00）至当前时间的总毫秒数与时区无关,它也被称为Unix时间戳（UnixTimestamp）,我们可以使用<code>time.Unix()函数</code>将时间戳转为时间格式。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # Unix创建一个本地时间，对应sec和nsec表示的Unix时间（从January 1, 1970 UTC至该时间的秒数和纳秒数）。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Unix</span><span class=\"params\">(sec <span class=\"keyword\">int64</span>, nsec <span class=\"keyword\">int64</span>)</span> <span class=\"title\">Time</span></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">nsec</span>的值在[0, 999999999]范围外是合法的。</span></span><br></pre></td></tr></table></figure>\n<p><strong>代码演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取当前时间</span></span><br><span class=\"line\">now := time.Now()</span><br><span class=\"line\">timestamp1 := now.Unix()     <span class=\"comment\">//时间戳</span></span><br><span class=\"line\">timestamp2 := now.UnixNano() <span class=\"comment\">//纳秒时间戳</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"current timestamp : %v\\n\"</span>, timestamp1)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"current timestamp nanosecond: %v\\n\"</span>, timestamp2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将时间戳转为时间格式(秒数，纳秒数)</span></span><br><span class=\"line\">timeObj := time.Unix(timestamp1, <span class=\"number\">0</span>)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"时间戳转换后的时间 :\"</span>, timeObj)</span><br><span class=\"line\">year := timeObj.Year()     <span class=\"comment\">//年</span></span><br><span class=\"line\">month := timeObj.Month()   <span class=\"comment\">//月</span></span><br><span class=\"line\">day := timeObj.Day()       <span class=\"comment\">//日</span></span><br><span class=\"line\">hour := timeObj.Hour()     <span class=\"comment\">//小时</span></span><br><span class=\"line\">minute := timeObj.Minute() <span class=\"comment\">//分钟</span></span><br><span class=\"line\">second := timeObj.Second() <span class=\"comment\">//秒</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"格式化后 ：%d-%02d-%02d %02d:%02d:%02d\\n\"</span>, year, month, day, hour, minute, second)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==== 执行结果 ====</span></span><br><span class=\"line\">current timestamp : <span class=\"number\">1632718244</span></span><br><span class=\"line\">current timestamp nanosecond: <span class=\"number\">1632718244062677557</span></span><br><span class=\"line\">时间戳转换后的时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">50</span>:<span class=\"number\">44</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">格式化后 ：<span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">50</span>:<span class=\"number\">44</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"3-时间间隔\"><a href=\"#3-时间间隔\" class=\"headerlink\" title=\"3.时间间隔\"></a>3.时间间隔</h3><p>描述: time.Duration是time包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位。<br>time.Duration表示一段时间间隔，可表示的最长时间段大约290年。</p>\n<p>time包中定义的时间间隔类型的常量如下：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  Nanosecond  Duration = <span class=\"number\">1</span></span><br><span class=\"line\">  Microsecond          = <span class=\"number\">1000</span> * Nanosecond</span><br><span class=\"line\">  Millisecond          = <span class=\"number\">1000</span> * Microsecond</span><br><span class=\"line\">  Second               = <span class=\"number\">1000</span> * Millisecond</span><br><span class=\"line\">  Minute               = <span class=\"number\">60</span> * Second</span><br><span class=\"line\">  Hour                 = <span class=\"number\">60</span> * Minute</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>例如：time.Duration表示1纳秒，time.Second表示1秒。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo3</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(time.Nanosecond)</span><br><span class=\"line\">  fmt.Println(time.Microsecond)</span><br><span class=\"line\">  fmt.Println(time.Millisecond)</span><br><span class=\"line\">  fmt.Println(time.Second)</span><br><span class=\"line\">  fmt.Println(time.Minute)</span><br><span class=\"line\">  fmt.Println(time.Hour)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果:</span></span><br><span class=\"line\"><span class=\"number\">1</span>ns</span><br><span class=\"line\"><span class=\"number\">1</span>µs</span><br><span class=\"line\"><span class=\"number\">1</span>ms</span><br><span class=\"line\"><span class=\"number\">1s</span></span><br><span class=\"line\"><span class=\"number\">1</span>m0s</span><br><span class=\"line\"><span class=\"number\">1</span>h0m0s</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"4-时间时区\"><a href=\"#4-时间时区\" class=\"headerlink\" title=\"4.时间时区\"></a>4.时间时区</h3><p>描述: 默认输出的时间为 UTC 世界协调时间，我们可以设置CST 中部标准时间 <code>(Central Standard Time)</code> , 而中国属于东八区，我们需要在上述时间+8小时，我们可以利用如下方法。</p>\n<p><strong>GMT、UTC、DST、CST时区代表的意义</strong></p>\n<ul>\n<li><p>GMT：Greenwich Mean Time (格林威治标准时间); 英国伦敦格林威治定为0°经线开始的地方，地球每15°经度 被分为一个时区，共分为24个时区，相邻时区相差一小时；例: 中国北京位于东八区，GMT时间比北京时间慢8小时。</p>\n</li>\n<li><p>UTC: Coordinated Universal Time (世界协调时间)；经严谨计算得到的时间，精确到秒，误差在0.9s以内， 是比GMT更为精确的世界时间</p>\n</li>\n<li><p>DST: Daylight Saving Time (夏季节约时间) 即夏令时；是为了利用夏天充足的光照而将时间调早一个小时，北美、欧洲的许多国家实行夏令时；</p>\n</li>\n<li><p>CST: Central Standard Time (中部标准时间) 四个不同时区的缩写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Central Standard Time (USA) UT-6:00 美国标准时间</span><br><span class=\"line\">Central Standard Time (Australia) UT+9:30 澳大利亚标准时间</span><br><span class=\"line\">China Standard Time UT+8:00 中国标准时间</span><br><span class=\"line\">Cuba Standard Time UT-4:00 古巴标准时间</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>代码演示:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo4</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// UTC &amp; CST &amp; 本地时间 并返回与t关联的时区信息。</span></span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"UTC 世界协调时间 : %v,时区信息: %v\\n\"</span>, now.UTC(), now.UTC().Location())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cst = time.FixedZone(<span class=\"string\">\"CST\"</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  cstnow := time.Now().In(cst)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"CST 中部标准时间 : %v,时区信息: %v\\n\"</span>, cstnow, cstnow.Location())</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"将UTC时间转化为当地时间 : %v,时区信息: %v\\n\\n\"</span>, now.Local(), now.Location())</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 中国北京时间东八区</span></span><br><span class=\"line\">  <span class=\"comment\">// 方式1.FixedZone</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> utcZone = time.FixedZone(<span class=\"string\">\"UTC\"</span>, <span class=\"number\">8</span>*<span class=\"number\">3600</span>)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"北京时间 : %v\\n\"</span>, now.In(utcZone))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 方式2.LoadLocation 设置地区</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cstZone, _ = time.LoadLocation(<span class=\"string\">\"Asia/Shanghai\"</span>) <span class=\"comment\">//上海</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"北京时间 : %v\\n\"</span>, now.In(cstZone))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 输出当前格林威治时间和该时区相对于UTC的时间偏移量（单位秒）</span></span><br><span class=\"line\">  name, offset := now.In(utcZone).Zone()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"当前时间时区名称:\"</span>, name, <span class=\"string\">\" 对于UTC的时间偏移量:\"</span>, offset)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前操作系统本地时区</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"当前操作系统本地时区\"</span>,time.Local)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>执行结果:</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UTC 世界协调时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">04</span>:<span class=\"number\">58</span>:<span class=\"number\">11.866995694</span> +<span class=\"number\">0000</span> UTC,时区信息: UTC</span><br><span class=\"line\">CST 中部标准时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">04</span>:<span class=\"number\">58</span>:<span class=\"number\">11.867088566</span> +<span class=\"number\">0000</span> CST,时区信息: CST</span><br><span class=\"line\">将UTC时间转化为当地时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">58</span>:<span class=\"number\">11.866995694</span> +<span class=\"number\">0800</span> CST,时区信息: Local</span><br><span class=\"line\"></span><br><span class=\"line\">北京时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">58</span>:<span class=\"number\">11.866995694</span> +<span class=\"number\">0800</span> UTC</span><br><span class=\"line\">北京时间 : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">58</span>:<span class=\"number\">11.866995694</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">当前时间时区名称: UTC  对于UTC的时间偏移量: <span class=\"number\">28800</span></span><br><span class=\"line\">当前操作系统本地时区: Local</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"5-时间操作\"><a href=\"#5-时间操作\" class=\"headerlink\" title=\"5.时间操作\"></a>5.时间操作</h3><p><strong>Add</strong><br>描述: 我们在日常的编码过程中可能会遇到要求时间+时间间隔的需求，Go语言的时间对象有提供Add方法如下：<br>语法:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span> <span class=\"title\">Add</span><span class=\"params\">(d Duration)</span> <span class=\"title\">Time</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Sub</strong><br>描述: 求两个时间之间的差值，返回一个时间段t-u。</p>\n<p>如果结果超出了Duration可以表示的最大值/最小值，将返回最大值/最小值。要获取时间点t-d（d为Duration），可以使用t.Add(-d)。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span> <span class=\"title\">Sub</span><span class=\"params\">(u Time)</span> <span class=\"title\">Duration</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>Equal</strong><br>描述: 判断两个时间是否相同，会考虑时区的影响，因此不同时区标准的时间也可以正确比较。本方法和用t==u不同，这种方法还会比较地点和时区信息。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span> <span class=\"title\">Equal</span><span class=\"params\">(u Time)</span> <span class=\"title\">bool</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Before</strong><br>如果t代表的时间点在u之前，返回真；否则返回假。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span> <span class=\"title\">Before</span><span class=\"params\">(u Time)</span> <span class=\"title\">bool</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>After</strong><br>如果t代表的时间点在u之后，返回真；否则返回假。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t Time)</span> <span class=\"title\">After</span><span class=\"params\">(u Time)</span> <span class=\"title\">bool</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>代码示例</strong><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo5</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  <span class=\"comment\">// 1.求一个小时之后的时间</span></span><br><span class=\"line\">  later := now.Add(time.Hour) <span class=\"comment\">// 当前时间加1小时后的时间</span></span><br><span class=\"line\">  tomorrow := now.Add(time.Hour * <span class=\"number\">24</span>) <span class=\"comment\">// 当前时间加1天后的时间</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"later :\"</span>, later, <span class=\"string\">\"\\ntomorrow: \"</span>, tomorrow)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"later :\"</span>, later)</span><br><span class=\"line\">  <span class=\"comment\">// 2.当前时间与later的差值</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Sub :\"</span>, now.Sub(later))</span><br><span class=\"line\">  <span class=\"comment\">// 3.当前时间与later是否相等</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Equal :\"</span>, now.Equal(later))</span><br><span class=\"line\">  <span class=\"comment\">// 3.当前时间是否在later之前</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Before :\"</span>, now.Before(later))</span><br><span class=\"line\">  <span class=\"comment\">// 3.当前时间是否在later之后</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"After :\"</span>, now.After(later))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">later : <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">04</span>:<span class=\"number\">53.94642009</span> +<span class=\"number\">0800</span> CST m=+<span class=\"number\">3600.000091915</span> </span><br><span class=\"line\">tomorrow:  <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-28</span> <span class=\"number\">13</span>:<span class=\"number\">04</span>:<span class=\"number\">53.94642009</span> +<span class=\"number\">0800</span> CST m=+<span class=\"number\">86400.000091915</span></span><br><span class=\"line\">Sub : <span class=\"number\">-1</span>h0m0s</span><br><span class=\"line\">Equal : <span class=\"literal\">false</span></span><br><span class=\"line\">Before : <span class=\"literal\">true</span></span><br><span class=\"line\">After : <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"6-定时器\"><a href=\"#6-定时器\" class=\"headerlink\" title=\"6.定时器\"></a>6.定时器</h3><p>描述: 使用<code>time.Tick(时间间隔)</code>来设置定时器以及使用<code>time.Sleep(Duration)</code>函数来延迟执行，定时器的本质上是一个通道（channel）。</p>\n<p>Duration 时间间隔可选参数:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.Nanosecond</span><br><span class=\"line\">time.Microsecond</span><br><span class=\"line\">time.Millisecond</span><br><span class=\"line\">time.Second</span><br><span class=\"line\">time.Minute</span><br><span class=\"line\">time.Hour</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>示例演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo6</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ticker := time.Tick(time.Second) <span class=\"comment\">//定义一个1秒间隔的定时器</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> ticker &#123;</span><br><span class=\"line\">    fmt.Println(i)              <span class=\"comment\">//每秒都会执行的任务</span></span><br><span class=\"line\">    time.Sleep(time.Second * <span class=\"number\">5</span>) <span class=\"comment\">//休眠5S执行，注意不能直接传递5，除了前面这种方式你还可以利用显示强转整数5 time.Duration(5);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行结果:</span><br><span class=\"line\">➜  Time <span class=\"keyword\">go</span> run timeDemo.<span class=\"keyword\">go</span>      </span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">03</span>:<span class=\"number\">35</span>:<span class=\"number\">58.640028069</span> +<span class=\"number\">0000</span> UTC m=+<span class=\"number\">1.000158842</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">03</span>:<span class=\"number\">35</span>:<span class=\"number\">59.64011495</span> +<span class=\"number\">0000</span> UTC m=+<span class=\"number\">2.000245738</span>  # 特殊点(第二执行未经过<span class=\"number\">5</span>S)</span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">03</span>:<span class=\"number\">36</span>:<span class=\"number\">04.640065081</span> +<span class=\"number\">0000</span> UTC m=+<span class=\"number\">7.000195859</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">03</span>:<span class=\"number\">36</span>:<span class=\"number\">09.640302389</span> +<span class=\"number\">0000</span> UTC m=+<span class=\"number\">12.000433177</span></span><br><span class=\"line\"><span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">03</span>:<span class=\"number\">36</span>:<span class=\"number\">14.640070051</span> +<span class=\"number\">0000</span> UTC m=+<span class=\"number\">17.000200829</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"7-时间格式化\"><a href=\"#7-时间格式化\" class=\"headerlink\" title=\"7. 时间格式化\"></a>7. 时间格式化</h3><p>描述: 时间类型有一个自带的方法<code>Format</code>进行格式化，需要注意的是Go语言中格式化时间模板不是常见的<code>Y-m-d H:M:S</code>而是使用Go的诞生时间<code>2006年1月2号15点04分（记忆口诀为2006 1 2 3 4）</code>, 也许这就是技术人员的浪漫吧。</p>\n<p>补充：如果想格式化为12小时方式，需指定<code>PM</code>。</p>\n<p><strong>Foramt|格式化</strong><br>描述: 格式化时间是把Go语言中的时间对象，转换成为字符串类型的时间。</p>\n<p>代码演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo7</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 当前UTC时间</span></span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  <span class=\"comment\">// 设置时区为Asia/Shanghai</span></span><br><span class=\"line\">  loc, err := time.LoadLocation(<span class=\"string\">\"Asia/Shanghai\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"北京时间 :\"</span>, now.In(loc), <span class=\"string\">\"\\n地点时区 :\"</span>, loc)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.时间格式化</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式1 :\"</span>, now.Format(<span class=\"string\">\"2006/01/02\"</span>))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式2 :\"</span>, now.Format(<span class=\"string\">\"2006/01/02 15:04\"</span>))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式3 :\"</span>, now.Format(<span class=\"string\">\"15:04 2006/01/02\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 24小时制</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式4 :\"</span>, now.Format(<span class=\"string\">\"2006-01-02 15:04:05.000 Mon Jan\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 12小时制</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式5 :\"</span>, now.Format(<span class=\"string\">\"2006-01-02 03:04:05.000 PM\"</span>))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"格式6 :\"</span>, now.Format(<span class=\"string\">\"2006-01-02 03:04:05.000 PM Mon Jan\"</span>))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"Kitchen 格式 :\"</span>, now.Format(time.Kitchen))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 时区展示</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"RFC1123 格式 :\"</span>, now.Format(time.RFC1123))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"RFC1123 格式 :\"</span>, now.Format(time.RFC1123Z))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"RFC3339 格式 :\"</span>, now.Format(time.RFC3339))</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"RFC3339Nano 格式 :\"</span>, now.Format(time.RFC3339Nano))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">北京时间 : 2021-09-27 14:15:42.716506733 +0800 CST </span><br><span class=\"line\">地点时区 : Asia/Shanghai</span><br><span class=\"line\">格式1 : 2021/09/27</span><br><span class=\"line\">格式2 : 2021/09/27 14:15</span><br><span class=\"line\">格式3 : 14:15 2021/09/27</span><br><span class=\"line\">格式4 : 2021-09-27 14:15:42.716 Mon Sep</span><br><span class=\"line\">格式5 : 2021-09-27 02:15:42.716 PM</span><br><span class=\"line\">格式6 : 2021-09-27 02:15:42.716 PM Mon Sep</span><br><span class=\"line\">Kitchen 格式 : 2:15PM</span><br><span class=\"line\">RFC1123 格式 : Mon, 27 Sep 2021 14:15:42 CST</span><br><span class=\"line\">RFC1123 格式 : Mon, 27 Sep 2021 14:15:42 +0800</span><br><span class=\"line\">RFC3339 格式 : 2021-09-27T14:15:42+08:00</span><br><span class=\"line\">RFC3339Nano 格式 : 2021-09-27T14:15:42.716506733+08:00</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>Parse|解析字符串格式</strong><br>描述: 将时间字符串解析为时间对象。</p>\n<p>通过time.Parse将时间字符串转化为时间类型对象默认是UTC时间, 而通过time.ParseInLocation我们可以指定时区得到CST时间。</p>\n<p><br/></p>\n<p>代码演示:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo8</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1.时间与时区设置</span></span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  loc, _ := time.LoadLocation(<span class=\"string\">\"Asia/Shanghai\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 2.按照指定时区和指定格式解析字符串时间</span></span><br><span class=\"line\">  timeObj1, _ := time.Parse(<span class=\"string\">\"2006-01-02 15:04:05\"</span>, <span class=\"string\">\"2021-09-27 14:15:20\"</span>)</span><br><span class=\"line\">  timeObj2, _ := time.ParseInLocation(<span class=\"string\">\"2006/01/02 15:04:05\"</span>, <span class=\"string\">\"2021/09/27 14:15:20\"</span>, time.Local) <span class=\"comment\">// 操作系统本地时区</span></span><br><span class=\"line\">  timeObj3, _ := time.ParseInLocation(<span class=\"string\">\"2006/01/02 15:04:05\"</span>, <span class=\"string\">\"2021/09/27 14:15:20\"</span>, loc)        <span class=\"comment\">// 指定时区</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"Now: %v\\ntimeObj1: %v\\ntimeObj2: %v\\ntimeObj3: %v\\n\"</span>, now.Local(), timeObj1, timeObj2, timeObj3)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将当地时区转化为UTC时间</span></span><br><span class=\"line\">  utcLocal := timeObj3.UTC()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"将当地时区转化为UTC时间:\"</span>, utcLocal)</span><br><span class=\"line\">  <span class=\"comment\">// 将UTC时间转化为当地时间(+8)</span></span><br><span class=\"line\">  localTime := utcLocal.Local()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"将UTC时间转化为当地时间:\"</span>, localTime)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 3.相互转换后的时间进行对比.</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"相互转换后的时间进行对比:\"</span>, utcLocal.Equal(localTime))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 4.输入的时间字符串与当前时间的相差时间.</span></span><br><span class=\"line\">  d := timeObj3.Sub(now)</span><br><span class=\"line\">  <span class=\"comment\">// 可以看到timeObj 时间 与 当前时间 相差 33 分钟 55 秒</span></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"看到timeObj 时间 与 当前时间 相差:\"</span>, d.String())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>执行结果：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Now: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">49</span>:<span class=\"number\">15.392828987</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">timeObj1: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">15</span>:<span class=\"number\">20</span> +<span class=\"number\">0000</span> UTC</span><br><span class=\"line\">timeObj2: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">15</span>:<span class=\"number\">20</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">timeObj3: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">15</span>:<span class=\"number\">20</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">将当地时区转化为UTC时间: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">06</span>:<span class=\"number\">15</span>:<span class=\"number\">20</span> +<span class=\"number\">0000</span> UTC</span><br><span class=\"line\">将UTC时间转化为当地时间: <span class=\"number\">2021</span><span class=\"number\">-09</span><span class=\"number\">-27</span> <span class=\"number\">14</span>:<span class=\"number\">15</span>:<span class=\"number\">20</span> +<span class=\"number\">0800</span> CST</span><br><span class=\"line\">相互转换后的时间进行对比: <span class=\"literal\">true</span></span><br><span class=\"line\">看到timeObj3 时间 与 当前时间 相差: <span class=\"number\">-33</span>m55<span class=\"number\">.392828987s</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"8-时间处理常用\"><a href=\"#8-时间处理常用\" class=\"headerlink\" title=\"8.时间处理常用\"></a>8.时间处理常用</h3><ul>\n<li><p>(0) 按照str格式化时间(Go诞生之日口诀:6-1-2-3-4-5)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//格式化时间格式</span></span><br><span class=\"line\">fmt.Println(time.Now().Format(<span class=\"string\">\"2006-01-02 15:04:05\"</span>))</span><br><span class=\"line\"><span class=\"comment\">//调用结果: 2021-04-30 13:15:02</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(1) UTC时间互换标准时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//UTC时间转标准时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *DataSearch)</span> <span class=\"title\">UTCTransLocal</span><span class=\"params\">(utcTime <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  t, _ := time.Parse(<span class=\"string\">\"2006-01-02T15:04:05.000+08:00\"</span>, utcTime)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> t.Local().Format(<span class=\"string\">\"2006-01-02 15:04:05\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">t1 := UTCTransLocal(<span class=\"string\">\"2021-04-29T14:11:08.000+08:00\"</span>)</span><br><span class=\"line\">fmt.Println(t1) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用结果: 2021-04-29 22:11:08</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(2) 标准时间转UTC时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标准时间转UTC时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *DataSearch)</span> <span class=\"title\">LocalTransUTC</span><span class=\"params\">(localTime <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  t, _ := time.ParseInLocation(<span class=\"string\">\"2006-01-02 15:04:05\"</span>, localTime, time.Local)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> t.UTC().Format(<span class=\"string\">\"2006-01-02T15:04:05.000+08:00\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t2 := LocalTransUTC(<span class=\"string\">\"2021-04-29 22:11:08\"</span>)</span><br><span class=\"line\">fmt.Println(t2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用结果：  2021-04-29T14:11:08.000+08:00</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(3) str格式化时间转时间戳</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the_time, err := time.Parse(<span class=\"string\">\"2006-01-02 15:04:05\"</span>, <span class=\"string\">\"2020-04-29 22:11:08\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    unix_time := the_time.Unix()</span><br><span class=\"line\">  fmt.Println(unix_time)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(the_time)</span><br><span class=\"line\"><span class=\"comment\">//调用结果： 1588198268</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(4) 时间戳转str格式化时间</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str_time := time.Unix(<span class=\"number\">1588224111</span>, <span class=\"number\">0</span>).Format(<span class=\"string\">\"2006-01-02 15:04:05\"</span>)</span><br><span class=\"line\">fmt.Println(str_time)</span><br><span class=\"line\"><span class=\"comment\">//调用结果：2020-04-30 13:21:51</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}