{"title":"2.Redis数据库基础数据类型介绍与使用","slug":"数据存储/Redis/2.Redis数据库基础数据类型介绍与使用","date":"2020-05-17T11:34:30.000Z","updated":"2023-01-31T02:29:07.993Z","url":"2020/5-17-50.html","path":"api/articles/2020/5-17-50.html.json","covers":["https://img.weiyigeek.top/2019/20190418232047.png","https://img.weiyigeek.top/2019/20190417212047.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x01-Redis-数据类型\"><a href=\"#0x01-Redis-数据类型\" class=\"headerlink\" title=\"0x01 Redis 数据类型\"></a>0x01 Redis 数据类型</h2><p>描述: Redis常见五种数据类型：<code>string（字符串）,hash（哈希）,list（列表）,set（集合）及zset(Sorted set 有序集合)</code>。</p>\n<p>其还支持其它类型例如<code>Bit arrays (or simply bitmaps)(处理位数组一样处理字符串值)、HyperLogLogs(概率数据)、Streams类型(抽象日志)</code>。</p>\n<p>参考地址: <a href=\"https://redis.io/topics/data-types-intro\" target=\"_blank\" rel=\"noopener\">https://redis.io/topics/data-types-intro</a></p>\n<p><br></p>\n<h3 id=\"Key-管理\"><a href=\"#Key-管理\" class=\"headerlink\" title=\"Key 管理\"></a>Key 管理</h3><p>描述：键命令用于管理 redis 的键<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; keys p*  <span class=\"comment\">#查找所有符合给定模式 pattern 的 key </span></span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"php\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">set</span> <span class=\"built_in\">test</span> redis <span class=\"comment\">#设置键</span></span><br><span class=\"line\">&gt; del <span class=\"built_in\">test</span>  <span class=\"comment\">#删除键</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">type</span> php     <span class=\"comment\">#返回 key 所储存的值的类型</span></span><br><span class=\"line\">string</span><br><span class=\"line\">&gt; exists <span class=\"built_in\">test</span>  <span class=\"comment\">#检查给定 key 是否存在。</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; dump <span class=\"built_in\">test</span>  <span class=\"comment\">#序列化给定 key,返回序列化之后的值</span></span><br><span class=\"line\"><span class=\"string\">\"\\x00\\x05redis\\t\\x00\\x15\\xa2\\xf8=\\xb6\\xa9\\xde\\x90\"</span></span><br><span class=\"line\">&gt; MOVE <span class=\"built_in\">test</span> 1   <span class=\"comment\">#将 test移动到数据库 1 中(select 1)</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; expire python 600  <span class=\"comment\">#expire test1 60 #设置 key 的过期时间,key 过期后将不再可用。单位以秒计</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; PTTL python  <span class=\"comment\"># 以毫秒为单位返回 key 的剩余的过期时间</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 592072</span><br><span class=\"line\">&gt; TTL python   <span class=\"comment\"># 以秒为单位,返回给定 key 的剩余生存时间(TTL, time to live)</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 583</span><br><span class=\"line\">&gt; EXPIREAT runoobkey 1293840000  <span class=\"comment\">#以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; pexpire <span class=\"built_in\">test</span> 6000  <span class=\"comment\">#设置key过期毫秒数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; PEXPIREAT runoobkey 1555555555005  <span class=\"comment\">#unix类型毫秒数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; persist <span class=\"built_in\">test</span>   <span class=\"comment\">#移除 key 的生存时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; randomkey            <span class=\"comment\"># 从当前数据库中随机返回一个 key \"php\"</span></span><br><span class=\"line\">&gt; rename key python    <span class=\"comment\"># 修改 key 的名称 OK 如果存储则覆盖</span></span><br><span class=\"line\">&gt; renamenx key newksy  <span class=\"comment\"># 仅当 newkey 不存在时,将 key 改名为 newkey 。存在则返回0</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"String-字符串\"><a href=\"#String-字符串\" class=\"headerlink\" title=\"String (字符串)\"></a>String (字符串)</h3><p>描述: String 是 redis 最基本的类型(是二进制安全的) 且字符串类型的值最大能存储 512MB 。</p>\n<p><strong>基于语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)SET key value    <span class=\"comment\"># 设置指定 key 的值</span></span><br><span class=\"line\">(2)GET key          <span class=\"comment\"># 获取指定 key 的值。</span></span><br><span class=\"line\">(3)GETRANGE key start end   <span class=\"comment\"># 返回 key 中字符串值的子字符</span></span><br><span class=\"line\">(4)GETSET key value         <span class=\"comment\"># 将给定 key 的值设为 value ,并返回 key 的旧值(old value)。</span></span><br><span class=\"line\">(5)GETBIT key offset        <span class=\"comment\"># 对 key 所储存的字符串值,获取指定偏移量上的位(bit)。</span></span><br><span class=\"line\">(6)MGET key1 \\[key2..]      <span class=\"comment\"># 获取所有(一个或多个)给定 key 的值。</span></span><br><span class=\"line\">(7)SETBIT key offset value  <span class=\"comment\"># 对 key 所储存的字符串值,设置或清除指定偏移量上的位(bit)。</span></span><br><span class=\"line\">(8)SETEX key seconds value  <span class=\"comment\"># 将值 value 关联到 key ,并将 key 的过期时间设为 seconds (以秒为单位)。</span></span><br><span class=\"line\">(9)SETNX key value             <span class=\"comment\"># 只有在 key 不存在时设置 key 的值。</span></span><br><span class=\"line\">(10)SETRANGE key offset value  <span class=\"comment\"># 用 value 参数覆写给定 key 所储存的字符串值,从偏移量 offset 开始。</span></span><br><span class=\"line\">(11)STRLEN key  <span class=\"comment\"># 返回 key 所储存的字符串值的长度。</span></span><br><span class=\"line\">(12)MSET key value [key value ...]    <span class=\"comment\"># 同时设置一个或多个 key-value 对。</span></span><br><span class=\"line\">(13)MSETNX key value [key value ...]  <span class=\"comment\"># 同时设置一个或多个 key-value 对,当且仅当所有给定 key 都不存在。</span></span><br><span class=\"line\">(14)PSETEX key milliseconds value     <span class=\"comment\"># 这个命令和 SETEX 命令相似,但它以毫秒为单位设置 key 的生存时间,而不是像 SETEX 命令那样,以秒为单位。</span></span><br><span class=\"line\">(15)INCR key    <span class=\"comment\"># 将 key 中储存的数字值增一。</span></span><br><span class=\"line\">(16)INCRBY key increment  <span class=\"comment\"># 将 key 所储存的值加上给定的增量值（increment） 。</span></span><br><span class=\"line\">(17)INCRBYFLOAT key increment  <span class=\"comment\"># 将 key 所储存的值加上给定的浮点增量值（increment） 。</span></span><br><span class=\"line\">(18)DECR key    <span class=\"comment\"># 将 key 中储存的数字值减一。</span></span><br><span class=\"line\">(19)DECRBY key decrement  <span class=\"comment\"># key 所储存的值减去给定的减量值（decrement） 。</span></span><br><span class=\"line\">(20)APPEND key value      <span class=\"comment\"># 如果 key 已经存在并且是一个字符串, APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>使用示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###### 字符串基础 #######</span></span><br><span class=\"line\">&gt; SET name <span class=\"string\">\"runoob\"</span></span><br><span class=\"line\">&gt; GET name   <span class=\"comment\"># \"runoob\"</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">type</span> name  <span class=\"comment\"># string</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">set</span> <span class=\"built_in\">test</span> stringdemo  <span class=\"comment\"># ok</span></span><br><span class=\"line\">&gt; getrange <span class=\"built_in\">test</span> 0 4    <span class=\"comment\"># \"strin\" 截取字符串</span></span><br><span class=\"line\">&gt; strlen <span class=\"built_in\">test</span>          <span class=\"comment\"># 该键得value字符串长度(integer) 10</span></span><br><span class=\"line\">&gt; getset stringdemo stringdemo  <span class=\"comment\"># \"test\" 获取值然后再设置键值</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; setex demo 15 <span class=\"string\">\"value15seconds\"</span>     <span class=\"comment\"># OK 设置键值15s后销毁  #\"seconds15\"</span></span><br><span class=\"line\">&gt; psetex key4 10000 <span class=\"string\">\"value10seconds\"</span> <span class=\"comment\"># OK 设置键值10s后销毁  (毫秒)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; setnx demo1 demo1          <span class=\"comment\"># (integer) 1 只有在 key 不存在时设置 key 的值。</span></span><br><span class=\"line\">&gt; setrange demo1 2 weiyigeek <span class=\"comment\"># (integer) 11  从0开始偏移插入在2处 \"deweiyigeek\"</span></span><br><span class=\"line\">&gt; APPEND key1 valuakey1      <span class=\"comment\"># (integer) 15 在key得value后添加valuakey1字符串</span></span><br><span class=\"line\">&gt; get key1                   <span class=\"comment\"># \"value1valuakey1\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&gt; mset key1 value1 key2 value2  <span class=\"comment\"># 设置多个键值 OK</span></span><br><span class=\"line\">&gt; mget key1 key2                <span class=\"comment\"># 获取多个键值</span></span><br><span class=\"line\">1) <span class=\"string\">\"value1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"value2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; msetnx key2 value2 key3 value3  <span class=\"comment\"># 设置多个键值当键不存在则返回1,否则存在不建立键值并返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###### 字符串计算 #######</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">set</span> key5 1  <span class=\"comment\">#OK</span></span><br><span class=\"line\">&gt; incr key5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">&gt; incr key5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">&gt; incrby key5 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">&gt; incrbyfloat key5 4.5   <span class=\"comment\">#注意浮点类型计算只能在incrbyfloat才行</span></span><br><span class=\"line\"><span class=\"string\">\"10.5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">set</span> key6 10 <span class=\"comment\">#OK</span></span><br><span class=\"line\">&gt; decr key6</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 9</span><br><span class=\"line\">&gt; decrby key6 5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">&gt; strlen key1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 15</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># getbit/setbit 用于对 key 所储存的字符串值,获取指定设置偏移量上的位(bit)。</span></span><br><span class=\"line\"><span class=\"comment\"># 对不存在的 key 或者不存在的 offset 进行 GETBIT, 返回 0</span></span><br><span class=\"line\">redis&gt; EXISTS bit</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">redis&gt; GETBIT bit 10086</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对已存在的 offset 进行 GETBIT</span></span><br><span class=\"line\">redis&gt; SETBIT bit 10086 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">redis&gt; GETBIT bit 10086</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Hash-哈希\"><a href=\"#Hash-哈希\" class=\"headerlink\" title=\"Hash (哈希)\"></a>Hash (哈希)</h3><p>描述：hash 是一个键值(key=&gt;value)对集合,是一个string类型的 field 和 value 的映射表,hash 特别适合用于存储对象,每个 hash 可以存储 <code>2^32 -1</code>键值对（40多亿）。</p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) HDEL key field1 \\[field2]         <span class=\"comment\"># 删除一个或多个哈希表字段</span></span><br><span class=\"line\">(2) HEXISTS key field                 <span class=\"comment\"># 查看哈希表 key 中,指定的字段是否存在。</span></span><br><span class=\"line\">(3) HGET key field                    <span class=\"comment\"># 获取存储在哈希表中指定字段的值。</span></span><br><span class=\"line\">(4) HGETALL key                       <span class=\"comment\"># 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class=\"line\">(5) HINCRBY key field increment       <span class=\"comment\"># 为哈希表 key 中的指定字段的整数值加上增量 increment 。</span></span><br><span class=\"line\">(6) HINCRBYFLOAT key field increment  <span class=\"comment\"># 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</span></span><br><span class=\"line\">(7) HKEYS key    <span class=\"comment\"># 获取所有哈希表中的字段</span></span><br><span class=\"line\">(8) HLEN key     <span class=\"comment\"># 获取哈希表中字段的数量</span></span><br><span class=\"line\">(9) HMGET key field1 \\[field2]                <span class=\"comment\"># 获取所有给定字段的值</span></span><br><span class=\"line\">(10)HMSET key field1 value1 [field2 value2 ]  <span class=\"comment\"># 同时将多个 field-value (域-值)对设置到哈希表 key 中。</span></span><br><span class=\"line\">(11)HSET key field value    <span class=\"comment\"># 将哈希表 key 中的字段 field 的值设为 value 。</span></span><br><span class=\"line\">(12)HSETNX key field value  <span class=\"comment\"># 只有在字段 field 不存在时,设置哈希表字段的值。</span></span><br><span class=\"line\">(14)HVALS key               <span class=\"comment\"># 取哈希表中所有值</span></span><br><span class=\"line\">(15)HSCAN key cursor [MATCH pattern] [COUNT count]  <span class=\"comment\"># 迭代哈希表中的键值对。</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>使用示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####### 哈希表基础使用 #######</span></span><br><span class=\"line\"><span class=\"comment\">#Redis HMSET, HGET 命令,HMSET 设置了两个 field=&gt;value 对, HGET 获取对应 field 对应的 value。</span></span><br><span class=\"line\">&gt; HSET hash1 field1 <span class=\"string\">\"hello\"</span>  <span class=\"comment\">#(integer) 1</span></span><br><span class=\"line\">&gt; HMSET hash1 field2 <span class=\"string\">\"world\"</span>  field3 <span class=\"string\">\"redis\"</span>  <span class=\"comment\">#OK</span></span><br><span class=\"line\">&gt; hkeys hash1     <span class=\"comment\"># 获取键里存储的字段</span></span><br><span class=\"line\">1) <span class=\"string\">\"field1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"field2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"field3\"</span></span><br><span class=\"line\">&gt; hlen hash1     <span class=\"comment\"># (integer) 3  键里得字段数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hexists hash1 field1  <span class=\"comment\"># (integer) 1</span></span><br><span class=\"line\">&gt; hget hash1 field1     <span class=\"comment\"># \"hello\"  查看键里面得字段值</span></span><br><span class=\"line\">&gt; hmget hash1 field1 field2  <span class=\"comment\">#获取在哈希表中指定 key与字段得值</span></span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"world\"</span></span><br><span class=\"line\">&gt; HSETNX hash1 field4 <span class=\"string\">\"study\"</span>  <span class=\"comment\"># (integer) 1 不存在则建立存在则报错</span></span><br><span class=\"line\">&gt; hvals hash1      <span class=\"comment\"># 获取哈希表中所有值</span></span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"world\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"study\"</span></span><br><span class=\"line\">&gt; hgetall hash1    <span class=\"comment\"># 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class=\"line\">1) <span class=\"string\">\"field1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"field2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"world\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"field3\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hdel hash1 field4  <span class=\"comment\"># 删除hash表键中的字段</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; hdel hash1 field5</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####### 哈希表的计算 #######</span></span><br><span class=\"line\">&gt; hset hash2 field1 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; hincrby hash2 field1 3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">&gt; hincrbyfloat hash2 field1 3</span><br><span class=\"line\"><span class=\"string\">\"7\"</span></span><br><span class=\"line\">&gt; hincrbyfloat hash2 field1 3.5</span><br><span class=\"line\"><span class=\"string\">\"10.5\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"List-列表\"><a href=\"#List-列表\" class=\"headerlink\" title=\"List (列表)\"></a>List (列表)</h3><p>描述: Redis 列表是简单的字符串列表,按照插入顺序排序(类似于栈);你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。 </p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) BLPOP key1 [key2 ] timeout  <span class=\"comment\">#移出并获取列表的第一个元素, 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br><span class=\"line\">(2) BRPOP key1 [key2 ] timeout  <span class=\"comment\">#移出并获取列表的最后一个元素, 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br><span class=\"line\">(3) BRPOPLPUSH <span class=\"built_in\">source</span> destination timeout  <span class=\"comment\">#从列表中弹出一个值,将弹出的元素插入到另外一个列表中并返回它如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span></span><br><span class=\"line\">(4) LINDEX key index <span class=\"comment\">#通过索引获取列表中的元素</span></span><br><span class=\"line\">(5)\tLINSERT key BEFORE|AFTER pivot value  <span class=\"comment\">#在列表的元素前或者后插入元素</span></span><br><span class=\"line\">(6) LLEN key <span class=\"comment\">#获取列表长度</span></span><br><span class=\"line\">(7)\tLPOP key <span class=\"comment\">#移出并获取列表的第一个元素</span></span><br><span class=\"line\">(8)\tLPUSH key value1 \\[value2]  <span class=\"comment\">#将一个或多个值插入到列表头部 (后进排头)</span></span><br><span class=\"line\">(9) LPUSHX key value  <span class=\"comment\">#将一个值插入到已存在的列表头部</span></span><br><span class=\"line\">(10) LRANGE key start stop <span class=\"comment\">#获取列表指定范围内的元素</span></span><br><span class=\"line\">(11) LREM key count value  <span class=\"comment\">#移除列表元素</span></span><br><span class=\"line\">(12) LSET key index value  <span class=\"comment\">#通过索引设置列表元素的值</span></span><br><span class=\"line\">(13) LTRIM key start stop   <span class=\"comment\">#对一个列表进行修剪(trim),就是说,让列表只保留指定区间内的元素,不在指定区间之内的元素都将被删除。</span></span><br><span class=\"line\">(14) RPOP key <span class=\"comment\">#移除列表的最后一个元素,返回值为移除的元素。</span></span><br><span class=\"line\">(15) RPOPLPUSH <span class=\"built_in\">source</span> destination  <span class=\"comment\">#移除列表的最后一个元素,并将该元素添加到另一个列表并返回</span></span><br><span class=\"line\">(16) RPUSH key value1 \\[value2] <span class=\"comment\">#在列表中添加一个或多个值 (按前后顺序添加)</span></span><br><span class=\"line\">(17) RPUSHX key value  <span class=\"comment\">#为已存在的列表添加值</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>基础格式</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]&gt; lpush list1 1 2 3      <span class=\"comment\"># 每次从头开始插入元素 向右边移动 头部添加</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">[1]&gt; lpushx list1 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">[1]&gt; llen list1             <span class=\"comment\"># 列表长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\"></span><br><span class=\"line\">[1]&gt; rpush list2 0 1 2 3 4  <span class=\"comment\"># 按顺序插入</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">[1]&gt; rpushx list2 5  <span class=\"comment\"># 在尾部添加</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">[1]&gt; lset list2 5 7  <span class=\"comment\"># 将第六的一个元素值改成7 (注意这里索引修改必须是存在)</span></span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下标 0 表示列表的第一个元素,以 1 表示列表的第二个元素,</span></span><br><span class=\"line\"><span class=\"comment\">#使用负数下标,以 -1 表示列表的最后一个元素, -2 表示列表的倒数第二个元素,以此类推。 </span></span><br><span class=\"line\">[1]&gt; lrange list1 0  4</span><br><span class=\"line\">1) <span class=\"string\">\"0\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">[1]&gt; lrange list2 0  5</span><br><span class=\"line\">1) <span class=\"string\">\"0\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"4\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"7\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[1]&gt; lpop list1    <span class=\"comment\"># 弹出头部元素</span></span><br><span class=\"line\"><span class=\"string\">\"0\"</span></span><br><span class=\"line\">[1]&gt; rpop list1   <span class=\"comment\"># 弹出尾部元素</span></span><br><span class=\"line\"><span class=\"string\">\"1\"</span></span><br><span class=\"line\">[1]&gt; blpop list1 10  <span class=\"comment\">#移出并获取列表的第一个元素</span></span><br><span class=\"line\">1) <span class=\"string\">\"list1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">[1]&gt; brpop list1 10 <span class=\"comment\">#移出并获取列表的最后一个元素</span></span><br><span class=\"line\">1) <span class=\"string\">\"list1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[1]&gt; lindex list2 0 <span class=\"comment\"># 通过索引获取列表中的元素</span></span><br><span class=\"line\"><span class=\"string\">\"0\"</span></span><br><span class=\"line\">[1]&gt; lindex list2 5</span><br><span class=\"line\"><span class=\"string\">\"5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从列表中取出最后一个元素,并插入到另外一个列表的头部</span></span><br><span class=\"line\">redis&gt; BRPOPLPUSH list1 list2 500   <span class=\"comment\"># msg非空列表</span></span><br><span class=\"line\"><span class=\"string\">\"hello moto\"</span>                        <span class=\"comment\"># 弹出元素的值</span></span><br><span class=\"line\">(3.38s)                             <span class=\"comment\"># 等待时长</span></span><br><span class=\"line\">redis&gt; LLEN list2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; LRANGE list2 0 0</span><br><span class=\"line\">1) <span class=\"string\">\"hello moto\"</span></span><br><span class=\"line\">redis&gt; BRPOPLPUSH msg list2 1 <span class=\"comment\">#msg为空列表</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">(1.34s)</span><br><span class=\"line\"></span><br><span class=\"line\">[1]&gt; rpoplpush list2 list3  <span class=\"comment\">#移除列表的最后一个元素,并将该元素添加到另一个列表并返回</span></span><br><span class=\"line\"><span class=\"string\">\"4\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#【重点】在列表的元素前或者后插入元素</span></span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"World\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; LINSERT mylist BEFORE <span class=\"string\">\"World\"</span> <span class=\"string\">\"There\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">redis&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"There\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"World\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[重点]让列表只保留指定区间内的元素,不在指定区间之内的元素都将被删除 。</span></span><br><span class=\"line\">redis &gt; RPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis &gt; RPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis &gt; RPUSH mylist <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">redis &gt; RPUSH mylist <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">redis &gt; LTRIM mylist 1 -1</span><br><span class=\"line\">OK</span><br><span class=\"line\">redis &gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"bar\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[重点]移除列表元素 返回被移除元素的数量。列表不存在时返回 0 。</span></span><br><span class=\"line\">  <span class=\"comment\"># COUNT 的值可以是以下几种：</span></span><br><span class=\"line\">  <span class=\"comment\"># count &gt; 0 : 从表头开始向表尾搜索,移除与 VALUE 相等的元素,数量为 COUNT 。</span></span><br><span class=\"line\">  <span class=\"comment\"># count &lt; 0 : 从表尾开始向表头搜索,移除与 VALUE 相等的元素,数量为 COUNT 的绝对值。</span></span><br><span class=\"line\">  <span class=\"comment\"># count = 0 : 移除表中所有与 VALUE 相等的值。</span></span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"foo\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">redis&gt; RPUSH mylist <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">redis&gt; LREM mylist -2 <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis&gt; LRANGE mylist 0 -1</span><br><span class=\"line\">1) <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"foo\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"Set-集合\"><a href=\"#Set-集合\" class=\"headerlink\" title=\"Set (集合)\"></a>Set (集合)</h3><p>描述: Set是string类型的无序集合,集合是通过哈希表实现的,所以添加,删除,查找的复杂度都是O(1),集合成员是唯一的所以集合中不能出现重复的数据; 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。 </p>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) SADD key member1 [member2] <span class=\"comment\">#向集合添加一个或多个成员</span></span><br><span class=\"line\">(2) SCARD key   <span class=\"comment\">#获取集合的成员数(类似于llen)</span></span><br><span class=\"line\">(3) SDIFF key1 [key2]  <span class=\"comment\">#返回给定所有集合的差集</span></span><br><span class=\"line\">(4) SDIFFSTORE destination key1 [key2]  <span class=\"comment\">#返回给定所有集合的差集并存储在 destination 中</span></span><br><span class=\"line\">(5) SINTER key1 [key2]  <span class=\"comment\">#返回给定所有集合的交集</span></span><br><span class=\"line\">(6) SINTERSTORE destination key1 [key2]  <span class=\"comment\">#返回给定所有集合的交集并存储在 destination 中</span></span><br><span class=\"line\">(7) SISMEMBER key member  <span class=\"comment\">#判断 member 元素是否是集合 key 的成员</span></span><br><span class=\"line\">(8) SMEMBERS key  <span class=\"comment\">#返回集合中的所有成员</span></span><br><span class=\"line\">(9) SMOVE <span class=\"built_in\">source</span> destination member  <span class=\"comment\">#将 member 元素从 source 集合移动到 destination 集合</span></span><br><span class=\"line\">(10) SPOP key <span class=\"comment\">#移除并返回集合中的一个随机元素</span></span><br><span class=\"line\">(11) SRANDMEMBER key [count]  <span class=\"comment\">#返回集合中一个或多个随机数</span></span><br><span class=\"line\">(12) SREM key member1 [member2] <span class=\"comment\">#移除集合中一个或多个成员</span></span><br><span class=\"line\">(13) SUNION key1 [key2]   <span class=\"comment\">#返回所有给定集合的并集</span></span><br><span class=\"line\">(14) SUNIONSTORE destination key1 [key2]  <span class=\"comment\">#所有给定集合的并集存储在 destination 集合中</span></span><br><span class=\"line\">(15) SSCAN key cursor [MATCH pattern] [COUNT count]  <span class=\"comment\">#迭代集合中的元素</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sadd key member #添加一个 string 元素到 key 对应的 set 集合中成功返回1,如果元素已经在集合中返回 0,如果 </span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; sadd set1 1 2 3 4 5 6  <span class=\"comment\">#(integer) 添加 6 个元素</span></span><br><span class=\"line\">[2]&gt; sadd set2 1 3 5 7 9   <span class=\"comment\">#(integer) 添加 5 个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; scard set1   <span class=\"comment\">#集合中元素的个数</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">[2]&gt; sismember set1 1  <span class=\"comment\">#判断元素是不是在该集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">[2]&gt; sismember set1 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; sdiff set1 set2  <span class=\"comment\">#差集</span></span><br><span class=\"line\">1) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"4\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">[2]&gt; sdiffstore set3 set1 set2  <span class=\"comment\"># 将set1与set2差集存入set3中 (integer) 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; sinter set1 set2  <span class=\"comment\">#交集</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">[2]&gt; sinterstore set4 set1 set2 <span class=\"comment\"># 将set1与set2交集存入set4中 (integer) 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; smove set1 set4 2  <span class=\"comment\">#将集合set1中的元素为2的移动到set4集合中 (integer) 1</span></span><br><span class=\"line\">[2]&gt; smembers set4  <span class=\"comment\">#显示集合中的元素</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; spop set1  <span class=\"comment\">#移除并返回集合中的一个随机元素  \"4\"</span></span><br><span class=\"line\">[2]&gt; srandmember set1 10  <span class=\"comment\">#显示集合中指定的个数的元素值</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">[2]&gt; srandmember set1 1</span><br><span class=\"line\">1) <span class=\"string\">\"6\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; srem set1 1 3     <span class=\"comment\"># 删除set1集合中的1和3两个元素  (integer) 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; sunion set1 set2  <span class=\"comment\"># 并集</span></span><br><span class=\"line\">1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"7\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"9\"</span></span><br><span class=\"line\">[2]&gt; sunionstore set5 set1 set2  <span class=\"comment\"># (integer) 6 并集 同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">[2]&gt; sscan set5 1 match *   <span class=\"comment\"># 迭代集合中的元素</span></span><br><span class=\"line\">1) <span class=\"string\">\"0\"</span></span><br><span class=\"line\">2) 1) <span class=\"string\">\"1\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\">   3) <span class=\"string\">\"5\"</span></span><br><span class=\"line\">   4) <span class=\"string\">\"6\"</span></span><br><span class=\"line\">   5) <span class=\"string\">\"7\"</span></span><br><span class=\"line\">   6) <span class=\"string\">\"9\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"Zset-sorted-set-有序集合\"><a href=\"#Zset-sorted-set-有序集合\" class=\"headerlink\" title=\"Zset (sorted set 有序集合)\"></a>Zset (sorted set 有序集合)</h3><p>描述: Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员,集合是通过哈希表实现的;</p>\n<ul>\n<li>不同的是每个元素都会关联一个double类型的分数</li>\n<li>redis正是通过分数来为集合中的成员进行从小到大的排序</li>\n<li>zset的成员是唯一的,但分数(score)却可以重复</li>\n<li>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</li>\n</ul>\n<p>其实在<code>redis sorted sets</code>里面当items内容大于64的时候同时使用了hash和skiplist两种设计实现。这也会为了排序和查找性能做的优化,所以如上可知： </p>\n<ul>\n<li>添加和删除都需要修改skiplist,所以复杂度为O(log(n))。 </li>\n<li>但是如果仅仅是查找元素的话可以直接使用hash,其复杂度为O(1) </li>\n<li>其他的range操作复杂度一般为O(log(n))</li>\n<li>当然如果是小于64的时候,因为是采用了ziplist的设计,其时间复杂度为O(n)</li>\n</ul>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1) ZADD key score1 member1 [score2 member2]  <span class=\"comment\">#向有序集合添加一个或多个成员,或者更新已存在成员的分数</span></span><br><span class=\"line\">(2) ZCARD key <span class=\"comment\">#获取有序集合的成员数</span></span><br><span class=\"line\">(3) ZCOUNT key min max  <span class=\"comment\">#计算在有序集合中指定区间分数的成员数</span></span><br><span class=\"line\">(4) ZINCRBY key increment member  <span class=\"comment\">#有序集合中对指定成员的分数加上增量 increment</span></span><br><span class=\"line\">(5) ZINTERSTORE destination numkeys key [key ...]  <span class=\"comment\">#计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span></span><br><span class=\"line\">(6) ZLEXCOUNT key min max  <span class=\"comment\">#在有序集合中计算指定字典区间内成员数量</span></span><br><span class=\"line\">(7) ZRANGE key start stop \\[WITHSCORES]  <span class=\"comment\">#通过索引区间返回有序集合成指定区间内的成员,\\[分数从低到高]</span></span><br><span class=\"line\">(8) ZRANGEBYLEX key min max [LIMIT offset count]  <span class=\"comment\">#通过字典区间返回有序集合的成员</span></span><br><span class=\"line\">(9) ZRANGEBYSCORE key min max \\[WITHSCORES] \\[LIMIT]  <span class=\"comment\">#通过分数返回有序集合指定区间内的成员</span></span><br><span class=\"line\">(10)ZRANK key member  <span class=\"comment\">#返回有序集合中指定成员的索引</span></span><br><span class=\"line\">(11)ZREM key member [member ...]  <span class=\"comment\">#移除有序集合中的一个或多个成员</span></span><br><span class=\"line\">(12)ZREMRANGEBYLEX key min max  <span class=\"comment\">#移除有序集合中给定的字典区间的所有成员</span></span><br><span class=\"line\">(13)ZREMRANGEBYRANK key start stop <span class=\"comment\">#移除有序集合中给定的排名区间的所有成员</span></span><br><span class=\"line\">(14)ZREMRANGEBYSCORE key min max  <span class=\"comment\">#移除有序集合中给定的分数区间的所有成员</span></span><br><span class=\"line\">(15)ZREVRANGE key start stop \\[WITHSCORES]  <span class=\"comment\">#返回有序集中指定区间内的成员,通过索引,\\[分数从高到底]</span></span><br><span class=\"line\">(16)ZREVRANGEBYSCORE key max min \\[WITHSCORES]  <span class=\"comment\">#返回有序集中指定分数区间内的成员,分数从高到低排序</span></span><br><span class=\"line\">(17)ZREVRANK key member <span class=\"comment\">#返回有序集合中指定成员的排名,有序集成员按分数值递减(从大到小)排序</span></span><br><span class=\"line\">(18)ZSCORE key member  <span class=\"comment\">#返回有序集中,成员的分数值</span></span><br><span class=\"line\">(19)ZUNIONSTORE destination numkeys key [key ...]  <span class=\"comment\">#计算给定的一个或多个有序集的并集,并存储在新的 key 中</span></span><br><span class=\"line\">(20)ZSCAN key cursor [MATCH pattern] [COUNT count]  <span class=\"comment\">#迭代有序集合中的元素（包括元素成员和元素分值）</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#有序集合(重点)</span></span><br><span class=\"line\">[3]&gt; zadd zset 1 redis 1 python 1 php  <span class=\"comment\"># (integer) 3 建立有序集合</span></span><br><span class=\"line\">[3]&gt; zadd zset 2 java 2 javascript 2 node.js  <span class=\"comment\">#继续添加有序集合</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">[3]&gt; zcard zset    <span class=\"comment\">#获取有序集合的成员数  (integer) 6</span></span><br><span class=\"line\">[3]&gt; zcount zset 0 2  <span class=\"comment\">#计算在有序集合中指定区间分数的成员数 (integer) 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zincrby zset 1 redis  <span class=\"comment\"># increment \"2\" 有序集合中对指定成员的分数加上增量</span></span><br><span class=\"line\">[3]&gt; zrank zset redis      <span class=\"comment\">#(integer) 5  返回有序集合中指定成员的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zincrby zset 7 redis  <span class=\"comment\">#redis元素分数继续+7  \"9\"</span></span><br><span class=\"line\">[3]&gt; zlexcount zset 0 6   <span class=\"comment\">#这时有序集合分数区间只有 (integer) 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zrange zset 0 -1 withscores <span class=\"comment\">#显示有序列表中的所有元素 withscores(显示分数)</span></span><br><span class=\"line\"> 1) <span class=\"string\">\"php\"</span></span><br><span class=\"line\"> 2) <span class=\"string\">\"1\"</span></span><br><span class=\"line\"> 3) <span class=\"string\">\"python\"</span></span><br><span class=\"line\"> 4) <span class=\"string\">\"1\"</span></span><br><span class=\"line\"> 5) <span class=\"string\">\"java\"</span></span><br><span class=\"line\"> 6) <span class=\"string\">\"2\"</span></span><br><span class=\"line\"> 7) <span class=\"string\">\"javascript\"</span></span><br><span class=\"line\"> 8) <span class=\"string\">\"2\"</span></span><br><span class=\"line\"> 9) <span class=\"string\">\"node.js\"</span></span><br><span class=\"line\">10) <span class=\"string\">\"2\"</span></span><br><span class=\"line\">11) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\">12) <span class=\"string\">\"9\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zrangebyscore zset 0 2  <span class=\"comment\">#通过分数返回有序集合指定区间内的成员</span></span><br><span class=\"line\">1) <span class=\"string\">\"php\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"java\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"javascript\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"node.js\"</span></span><br><span class=\"line\">[3]&gt; zrangebyscore zset 9 9</span><br><span class=\"line\">1) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zadd zset 0 php 1 php2 2 php3 3 php4  <span class=\"comment\">#添加有序集合元素(integer) 4</span></span><br><span class=\"line\">[3]&gt; zrevrange zset 0 5 withscores  <span class=\"comment\">##返回有序集中指定区间内的成员,通过索引,分数从高到底 </span></span><br><span class=\"line\"> 1) <span class=\"string\">\"php4\"</span></span><br><span class=\"line\"> 2) <span class=\"string\">\"3\"</span></span><br><span class=\"line\"> 3) <span class=\"string\">\"php3\"</span></span><br><span class=\"line\"> 4) <span class=\"string\">\"2\"</span></span><br><span class=\"line\"> 5) <span class=\"string\">\"node.js\"</span></span><br><span class=\"line\"> 6) <span class=\"string\">\"2\"</span></span><br><span class=\"line\"> 7) <span class=\"string\">\"php2\"</span></span><br><span class=\"line\"> 8) <span class=\"string\">\"1\"</span></span><br><span class=\"line\"> 9) <span class=\"string\">\"php\"</span></span><br><span class=\"line\">10) <span class=\"string\">\"0\"</span></span><br><span class=\"line\">[3]&gt; zrevrangebyscore zset 0 -1 <span class=\"comment\">#返回有序集中指定分数区间内的成员,分数从高到低排序</span></span><br><span class=\"line\">1) <span class=\"string\">\"php\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zrevrank zset php  <span class=\"comment\">#返回有序集合中指定成员的排名,有序集成员按分数值递减(从大到小)排序</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">[4]&gt; zscore zset node.js <span class=\"comment\">#返回有序集中,成员的分数值</span></span><br><span class=\"line\"><span class=\"string\">\"2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zrem zset redis  <span class=\"comment\">#删除有序列表中指定元素 返回1  (integer) 1</span></span><br><span class=\"line\">[3]&gt; zrem zset redis  <span class=\"comment\">#不存在列表中返回0 (integer) 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">[3]&gt; zremrangebyrank zset 0 1  <span class=\"comment\">#移除有序集合中给定的字典区间的所有成员 (integer) 2</span></span><br><span class=\"line\">[3]&gt; zremrangebyrank zset 0 1  <span class=\"comment\">#(integer) 2 后面的成员回向前面补齐</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># Zlexcount 命令在计算有序集合中指定字典区间内成员数量</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">redis &gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">redis &gt; ZADD myzset 0 f 0 g</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">redis &gt; ZLEXCOUNT myzset - +</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">redis &gt; ZLEXCOUNT myzset [b [f</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># [重点]:通过字典区间返回有序集合的成员。 </span></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">redis &gt; ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">redis &gt; ZRANGEBYLEX myzset - [c</span><br><span class=\"line\">1) <span class=\"string\">\"a\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"b\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"c\"</span></span><br><span class=\"line\">redis &gt; ZRANGEBYLEX myzset - (c</span><br><span class=\"line\">1) <span class=\"string\">\"a\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"b\"</span></span><br><span class=\"line\">redis &gt; ZRANGEBYLEX myzset [aaa (g</span><br><span class=\"line\">1) <span class=\"string\">\"b\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"c\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"d\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"e\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"f\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"># [重点]:给定的一个或多个有序集的交集,其中给定 key 的数量必须以 numkeys 参数指定,并将该交集(结果集)储存到 destination 。 </span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 有序集 mid_test</span></span><br><span class=\"line\">redis &gt; ZADD mid_test 70 <span class=\"string\">\"Li Lei\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis &gt; ZADD mid_test 70 <span class=\"string\">\"Han Meimei\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis &gt; ZADD mid_test 99.5 <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 另一个有序集 fin_test</span></span><br><span class=\"line\">redis &gt; ZADD fin_test 88 <span class=\"string\">\"Li Lei\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis &gt; ZADD fin_test 75 <span class=\"string\">\"Han Meimei\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">redis &gt; ZADD fin_test 99.5 <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">redis &gt; ZINTERSTORE sum_point 2 mid_test fin_test <span class=\"comment\"># 交集 (integer) 3</span></span><br><span class=\"line\"><span class=\"comment\"># 显示有序集内所有成员及其分数值</span></span><br><span class=\"line\">redis &gt; ZRANGE sum_point 0 -1 WITHSCORES     </span><br><span class=\"line\">1) <span class=\"string\">\"Han Meimei\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"145\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"Li Lei\"</span></span><br><span class=\"line\">4) <span class=\"string\">\"158\"</span></span><br><span class=\"line\">5) <span class=\"string\">\"Tom\"</span></span><br><span class=\"line\">6) <span class=\"string\">\"199\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"HyperLogLog-基数统计\"><a href=\"#HyperLogLog-基数统计\" class=\"headerlink\" title=\"HyperLogLog (基数统计)\"></a>HyperLogLog (基数统计)</h3><p>描述: 在2.8.9版本添加了HyperLogLog结构是是用来做基数统计的算法;</p>\n<p><em>Q:什么是基数?</em><br>答:比如数据集 {1, 3, 5, 7, 5, 7, 8}, 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5;基数估计就是在误差可接受的范围内,快速计算基数。 </p>\n<p><em>HyperLogLog 的优点:</em></p>\n<ul>\n<li>输入元素的数量或者体积非常非常大时,计算基数所需的空间总是固定的、并且是很小的。</li>\n<li>每个 HyperLogLog 键只需要花费 12 KB 内存,就可以计算接近 2^64 个不同元素的基数</li>\n<li>根据输入元素来计算基数,而不会储存输入元素本身,所以 HyperLogLog 不能像集合那样,返回输入的各个元素</li>\n</ul>\n<p><strong>基础语法:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) PFADD key element [element ...]  <span class=\"comment\"># 添加指定元素到 HyperLogLog 中。</span></span><br><span class=\"line\">2) PFCOUNT key [key ...]              <span class=\"comment\">#  返回给定 HyperLogLog 的基数估算值。</span></span><br><span class=\"line\">3) PFMERGE destkey sourcekey [sourcekey ...]  <span class=\"comment\">#将多个 HyperLogLog 合并为一个 HyperLogLog</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>基础示例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[5]&gt; pfadd hyper <span class=\"string\">\"redis\"</span> <span class=\"string\">\"mongodb\"</span> <span class=\"string\">\"mysql\"</span> <span class=\"string\">\"python\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">[5]&gt; pfadd <span class=\"built_in\">log</span> <span class=\"string\">\"java\"</span> <span class=\"string\">\"javascript\"</span> <span class=\"string\">\"web\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">[5]&gt; pfcount hyper <span class=\"built_in\">log</span>  <span class=\"comment\">#基数估算值 </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">[5]&gt; pfcount hyper   <span class=\"comment\">#基数估算值 </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4 </span><br><span class=\"line\">[5]&gt; pfmerge descLog hyper <span class=\"built_in\">log</span>   <span class=\"comment\">#将两个keys进行合并到descLog</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[5]&gt; pfcount descLog</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"0x02-Redis-进阶学习\"><a href=\"#0x02-Redis-进阶学习\" class=\"headerlink\" title=\"0x02 Redis 进阶学习\"></a>0x02 Redis 进阶学习</h2><h3 id=\"1-选择数据库号\"><a href=\"#1-选择数据库号\" class=\"headerlink\" title=\"1.选择数据库号\"></a>1.选择数据库号</h3><p>描述: Redis支持多个数据库,并且每个数据库的数据是隔离的不能共享,并且基于单机才有,如果是集群就没有数据库的概念。</p>\n<p>Tips: Redis是一个字典结构的存储服务器,而实际上一个Redis实例提供了多个用来存储数据的字典,客户端可以指定将数据存储在哪个字典中。</p>\n<p>这与我们熟知的在一个关系数据库实例中可以创建多个数据库类似,所以可以将其中的每个字典都理解成一个独立的数据库。</p>\n<ul>\n<li>每个数据库对外都是一个从0..15(默认16个)开始的递增数字命名,</li>\n<li>Redis默认支持16个数据库（可以通过配置文件支持更多无上限）, 可以通过配置databases来修改这一数字。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">databases 16</span><br></pre></td></tr></table></figure></li>\n<li>客户端与Redis建立连接后会自动选择0号数据库,当然我们可以指定库连接。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -n 1</span><br><span class=\"line\">127.0.0.1:6379[1]&gt; ping</span><br></pre></td></tr></table></figure></li>\n<li>可以随时使用SELECT命令更换数据库,<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis&gt; SELECT 1  <span class=\"comment\"># 选择1号数据库</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">redis [1] &gt; GET foo</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>补充说明:</strong><br>描述：然而这些以数字命名的数据库又与我们理解的数据库有所区别</p>\n<ul>\n<li>首先Redis不支持自定义数据库的名字,每个数据库都以编号命名,开发者必须自己记录哪些数据库存储了哪些数据。</li>\n<li>另外Redis也不支持为每个数据库设置不同的访问密码,所以一个客户端要么可以访问全部数据库,要么连一个数据库也没有权限访问。</li>\n<li>最重要的一点是多个数据库之间并不是完全隔离的,比如FLUSHALL命令可以清空一个Redis实例中所有数据库中的数据。</li>\n</ul>\n<p>综上所述 redis 数据库 更像是一种命名空间,而不适宜存储不同应用程序的数据。</p>\n<p>比如：可以使用0号数据库存储某个应用生产环境中的数据,使用1号数据库存储测试环境中的数据,但不适宜使用0号数据库存储A应用的数据而使用1号数据库B应用的数据,<code>不同的应用应该使用不同的Redis实例存储数据</code>。</p>\n<p><br/></p>\n<h3 id=\"2-Redis-发布订阅\"><a href=\"#2-Redis-发布订阅\" class=\"headerlink\" title=\"2.Redis 发布订阅\"></a>2.Redis 发布订阅</h3><p><strong>Q: 什么是pub/sub?</strong><br>答:Pub/Sub功能（means Publish, Subscribe）即发布及订阅功能,基于事件的系统中，Pub/Sub是目前广泛使用的通信模型，它采用事件作为基本的通信机制，提供大规模系统所要求的松散耦合的交互模式;</p>\n<p>Tips: 同样 Redis 的 pub/sub 是一种消息通信模式，主要的目的是解除消息发布者和消息订阅者之间的耦合,Redis 作为一个 <code>pub/sub</code>的 server, 在订阅者和发布者之间起到了消息路由的功能。</p>\n<p>描述: 类似于MQTT协议一样,Redis也支持发布订阅(pub/sub)消息通信模式(发送者(pub)发送消息,订阅者(sub)接收消息),Redis客户端可以订阅任意数量的频道</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190418232047.png\" alt=\"WeiyiGeek.redis发布订阅\" title=\"\" class=\"\">\n                <p>WeiyiGeek.redis发布订阅</p>\n            </figure>\n<p><strong>基础语法:</strong></p>\n<ul>\n<li>(1) PSUBSCRIBE pattern [pattern …]  #订阅一个或多个符合给定模式的频道。<code>(可以采用通配符)</code></li>\n<li><p>(5) SUBSCRIBE channel [channel …]   #订阅给定的一个或多个频道的信息。</p>\n</li>\n<li><p>(2) PUBSUB subcommand [argument [argument …]]  #查看订阅与发布系统状态。</p>\n</li>\n<li><p>(3) PUBLISH channel message  #将信息发送到指定的频道。</p>\n</li>\n<li><p>(6) UNSUBSCRIBE [channel [channel …]]  #指退订给定的频道。</p>\n</li>\n<li>(4) PUNSUBSCRIBE [pattern [pattern …]]  #退订所有给定模式的频道。</li>\n</ul>\n<p><strong>基础实例:</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终端1 (订阅频道)</span></span><br><span class=\"line\">[6]&gt; subscribe redisChat</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redisChat\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redisChat\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"Redis pub/sub\"</span></span><br><span class=\"line\">1) <span class=\"string\">\"message\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redisChat\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"Hello World!MQTT\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终端2 (发布频道)</span></span><br><span class=\"line\">192.168.1.100:6379&gt; publish redisChat <span class=\"string\">\"Redis pub/sub\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">192.168.1.100:6379&gt; publish redisChat <span class=\"string\">\"Hello World!MQTT\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">192.168.1.100:6379&gt; publish redisChat <span class=\"string\">\"Hello World!Redis Channel\"</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">192.168.1.100:6379&gt; pubsub CHANNELS redis* <span class=\"comment\">#命令用于查看订阅与发布系统状态</span></span><br><span class=\"line\">1) <span class=\"string\">\"redisChat\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终端3 (订阅频道)</span></span><br><span class=\"line\">[6]&gt; psubscribe redis*  <span class=\"comment\">#通配符(匹配redis以及redis字符串拼接的发布频道)</span></span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">\"subscribe\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redis*\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"><span class=\"string\">\"Hello World!Redis  Channel\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h3 id=\"3-Redis-事物处理\"><a href=\"#3-Redis-事物处理\" class=\"headerlink\" title=\"3.Redis 事物处理\"></a>3.Redis 事物处理</h3><p>描述: 事务可以一次执行多个命令, 并且带有以下两个重要的保证：</p>\n<ul>\n<li>批量操作在发送 EXEC 命令前被放入队列缓存。</li>\n<li>收到 EXEC 命令后进入事务执行,事务中任意命令执行失败,其余的命令依然被执行。</li>\n<li>在事务执行过程,其他客户端提交的命令请求不会插入到事务执行命令序列中。</li>\n</ul>\n<p>一个事务从开始到执行会经历以下三个阶段：</p>\n<ul>\n<li>1) 开始事务</li>\n<li>2) 命令入队</li>\n<li>3) 执行事务</li>\n</ul>\n<p><br/></p>\n<p>以下命令是实现事务的基石:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1)MULTI    <span class=\"comment\"># 标记一个事务块的开始 == `BEGIN TRANSACTION`</span></span><br><span class=\"line\">(2)EXEC     <span class=\"comment\"># 提交执行所有事务块内的命令 == `COMMIT`</span></span><br><span class=\"line\">(3)DISCARD  <span class=\"comment\"># 取消事务,放弃执行事务块内的所有命令 == `ROLLBACK`</span></span><br><span class=\"line\">(4)WATCH key [key ...] <span class=\"comment\"># 监视一个(或多个) key,如果在事务执行之前这个(或这些) key 被其他命令所改动,那么事务将被打断</span></span><br><span class=\"line\">(5)UNWATCH 取消 WATCH 命令对所有 key 的监视。</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>Redis事务特征：</strong></p>\n<ul>\n<li>1.在事务执行中所有命令都将会被串行化的顺序执行(<code>效率低但是由于操作的是内存所以忽略不计</code>)，并且在该事务执行期间Redis不会再为其它客户端的请求提供任何服务(<code>保证了事务中的所有命令被原子执行</code>);</li>\n<li>2.在事务执行失败后其后面的命令任然会继续执行，此点与关系型数据库事务相比有些许不同</li>\n<li>3.在事务执行中命令MULTI可以看做关系型数据库中<code>BEGIN TRANSACTION</code>,而EXEC与DISCARD命令来提交/回滚事务内的所有操作等同于<code>COMMIT 与 ROLLBACK</code> 语句;</li>\n<li>4.在事务执行过程中如果Client与Server出现通讯故障并导致网络断开，其后所执行的语句将不会被服务器指向，但是如果网络中断事件发生在EXEC命令之后则任然执行;</li>\n<li>5.在事务执行中使用Append-Only模式此时Redis会调用系统函数write将该事务内的所有写操作在本次调用中全部写入硬盘;但是如果在写入过程中出现系统崩溃导致数据写不完整，此时在Redis重启后会进行一致性检测如果发现问题将会提示;</li>\n</ul>\n<p>PSTips: 当Redis进行错误提示我们可以利用<code>Redis-check-aof</code>工具帮助我们定位到数据不一致的错误，并将已经写入部分数据进行回滚，之后重启数据库即可;</p>\n<p><br/></p>\n<p><strong>示例1.事务处理提交</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 它先以 MULTI 开始一个事务, 然后将多个命令入队到事务中, 最后由 EXEC 命令触发事务, 一并执行事务中的所有命令</span></span><br><span class=\"line\">192.168.1.100:6379[7]&gt; multi  <span class=\"comment\">#开启事务</span></span><br><span class=\"line\">192.168.1.100:6379[7]&gt; <span class=\"built_in\">set</span> book-name <span class=\"string\">\"redis 入门到放弃\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">192.168.1.100:6379[7]&gt; get book-name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">192.168.1.100:6379[7]&gt; sadd tag <span class=\"string\">\"redis\"</span> <span class=\"string\">\"数据库\"</span> <span class=\"string\">\"基础入门\"</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">192.168.1.100:6379[7]&gt; smembers tag</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">192.168.1.100:6379[7]&gt; <span class=\"built_in\">exec</span>  <span class=\"comment\">#触发事务(将建立的k-v写入)</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) <span class=\"string\">\"redis \\xe5\\x85\\xa5\\xe9\\x97\\xa8\\xe5\\x88\\xb0\\xe6\\x94\\xbe\\xe5\\xbc\\x83\"</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">4) 1) <span class=\"string\">\"\\xe6\\x95\\xb0\\xe6\\x8d\\xae\\xe5\\xba\\x93\"</span></span><br><span class=\"line\">   2) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\">   3) <span class=\"string\">\"\\xe5\\x9f\\xba\\xe7\\xa1\\x80\\xe5\\x85\\xa5\\xe9\\x97\\xa8\\xef\\xbc\\xe2\\x80\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>示例2.事务处理回滚</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; SELECT 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">[1]&gt; <span class=\"built_in\">set</span> name WeiyiGeek</span><br><span class=\"line\">OK</span><br><span class=\"line\">[1]&gt; get name</span><br><span class=\"line\"><span class=\"string\">\"WeiyiGeek\"</span></span><br><span class=\"line\">[1]&gt; MULTI</span><br><span class=\"line\">OK </span><br><span class=\"line\">[1]&gt; <span class=\"built_in\">set</span> name Redis  <span class=\"comment\">#在事务中重新设置name键值</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">[1]&gt; get name</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">[1]&gt; DISCARD  <span class=\"comment\">#不提交事务即回滚</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">[1]&gt; get name  <span class=\"comment\">#显示事务开启前的name键值</span></span><br><span class=\"line\"><span class=\"string\">\"WeiyiGeek\"</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>示例3.失败命令自动剔除执行案例</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">set</span> num 10</span><br><span class=\"line\">OK</span><br><span class=\"line\">&gt; get num</span><br><span class=\"line\"><span class=\"string\">\"10\"</span></span><br><span class=\"line\">&gt; MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\">&gt; INCRBY num 5</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">&gt; INCRBY num x  <span class=\"comment\">#异常加值</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">&gt; INCRBY num 5  <span class=\"comment\"># 15 + 5</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 15</span><br><span class=\"line\">2) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range  <span class=\"comment\">#当事务提交后执行所有操作当操作异常时候将被忽略;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 20</span><br><span class=\"line\">&gt; get num</span><br><span class=\"line\"><span class=\"string\">\"20\"</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"0x03-使用场景\"><a href=\"#0x03-使用场景\" class=\"headerlink\" title=\"0x03 使用场景\"></a>0x03 使用场景</h2><p>描述:复习Redis的五种数据类型:<code>String、List、Hash、Set、Sorted-set</code>, 前面我们简单的了解了一下Redis各个使用操作，这一部分我们主要来说说Redis的应用场景;</p>\n<h3 id=\"List-类型\"><a href=\"#List-类型\" class=\"headerlink\" title=\"List 类型\"></a>List 类型</h3><p><strong>(1) 取最新N个数据操作</strong><br>描述:比如一篇文章的评论只显示最新的5000千条评论的ID放在Redis的List集合之中，并将超出集合部分从数据库中获取;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 向List集合中插入值</span></span><br><span class=\"line\">LPUSH latest.comments ID</span><br><span class=\"line\"><span class=\"comment\"># 保存最近5000千个ID值</span></span><br><span class=\"line\">LTRIM latest.comments 0 5000</span><br></pre></td></tr></table></figure></p>\n<p><strong>(2) 构建队列系统</strong><br>描述:可以使用list可以构建队列，使用sorted set 甚至可以构建有优先级的队列系统;</p>\n<p><br/></p>\n<h3 id=\"Set-类型\"><a href=\"#Set-类型\" class=\"headerlink\" title=\"Set 类型\"></a>Set 类型</h3><p><strong>(1) Uniq操作获取某段时间所有数据排重置</strong><br>描述:将输入放入set集合即可，所有的数据将会自动排重；</p>\n<p><br/></p>\n<h3 id=\"Zset-类型\"><a href=\"#Zset-类型\" class=\"headerlink\" title=\"Zset 类型\"></a>Zset 类型</h3><p><strong>(1) 排行榜应用TOP N操作</strong><br>描述:此处需要按照次数进行排序，所以此时我们需要采用<code>sorted set</code>类型，将您需要排序的key名称以及其具体数据设置成相应的value，每次只需要执行ZADD命令即可;</p>\n<p><br/></p>\n<p><strong>(2) 需要精准设定过期时间应用</strong><br>描述:可以将上面说到的<code>sorted set</code>类型的score值设置成为过期时间的时间戳,就可以通过过期时间排序以及定时清除过期数据;</p>\n<p><br/></p>\n<h3 id=\"Incr、Decr\"><a href=\"#Incr、Decr\" class=\"headerlink\" title=\"Incr、Decr\"></a>Incr、Decr</h3><p><strong>(1) 事物统计</strong><br>描述:可以统计在线人数由于Redis命令是原子性的，您可以轻松利用<code>INCR与DECR命令</code>来构建计算统计系统</p>\n<p><br/></p>\n<h3 id=\"means-Publish-Subscribe\"><a href=\"#means-Publish-Subscribe\" class=\"headerlink\" title=\"means Publish, Subscribe\"></a>means Publish, Subscribe</h3><p><strong>(1) 在线聊天室</strong><br>描述: 可以利用订阅与发布实现一个,类似于在网页中在线聊天程序。</p>\n<p><br/></p>\n<h3 id=\"示例演示\"><a href=\"#示例演示\" class=\"headerlink\" title=\"示例演示\"></a>示例演示</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># List 列表: 可以用来存储用户UID</span></span><br><span class=\"line\"><span class=\"comment\"># hash 哈希:用来存储用户的信息</span></span><br><span class=\"line\"><span class=\"comment\"># set  集合用来查看共同好友(唯一性)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串 #</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">set</span> Weiyi Geek  <span class=\"comment\"># OK</span></span><br><span class=\"line\">&gt; get Weiyi       <span class=\"comment\">#\"Geek\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HASH #</span></span><br><span class=\"line\">&gt; hmset <span class=\"built_in\">hash</span> love1 <span class=\"string\">\"Python\"</span> love2 <span class=\"string\">\"C++\"</span>   <span class=\"comment\">#注意键不能同名 OK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表 #</span></span><br><span class=\"line\">&gt; lpush list redis</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; lpush list python</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">&gt; lrange list 0 10</span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合 #</span></span><br><span class=\"line\">&gt; sadd run redis</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; sadd run redis1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; sadd run redis2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; smembers run</span><br><span class=\"line\">1) <span class=\"string\">\"redis2\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redis1\"</span></span><br><span class=\"line\">3) <span class=\"string\">\"redis\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有序集合 #</span></span><br><span class=\"line\">&gt; zadd <span class=\"built_in\">test</span> 0 redis</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; zadd <span class=\"built_in\">test</span> 0 python</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">&gt; zrangebyscore runoob 0 1000  <span class=\"comment\">#当请求没有键不会报错(注意)</span></span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\">&gt; zrangebyscore <span class=\"built_in\">test</span> 0 1000</span><br><span class=\"line\">1) <span class=\"string\">\"python\"</span></span><br><span class=\"line\">2) <span class=\"string\">\"redis\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190417212047.png\" alt=\"WeiyiGeek.数据类型应用场景\" title=\"\" class=\"\">\n                <p>WeiyiGeek.数据类型应用场景</p>\n            </figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"Redis","path":"api/tags/Redis.json"}]}