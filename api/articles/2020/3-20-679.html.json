{"title":"Python3日志记录模块","slug":"编程世界/Python/模块函数/Python3日志记录模块","date":"2020-03-20T13:34:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2020/3-20-679.html","path":"api/articles/2020/3-20-679.html.json","covers":["https://img.weiyigeek.top/2022/5/20220810091524.png","https://img.weiyigeek.top/2022/5/20220810092104.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-logging-模块\"><a href=\"#0x00-logging-模块\" class=\"headerlink\" title=\"0x00 logging 模块\"></a>0x00 logging 模块</h2><h3 id=\"1-基础简述\"><a href=\"#1-基础简述\" class=\"headerlink\" title=\"1.基础简述\"></a>1.基础简述</h3><p>描述: Logging 库是非常常用的记录日志库，通过logging模块存储各种格式的日志，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚、日志按时分秒进行切割等.</p>\n<p>模块导入: <code>import logging</code><br>模块参考:  <a href=\"https://docs.python.org/3/library/logging.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/logging.html</a></p>\n<p><strong>模块优点</strong></p>\n<ol>\n<li>你可以控制消息的级别，过滤掉那些并不重要的消息。</li>\n<li>你可决定输出到什么地方，以及怎么输出。有许多的重要性别级可供选择，debug、info、warning、error 以及 critical。通过赋予 logger 或者 handler 不同的级别，你就可以只输出错误消息到特定的记录文件中，或者在调试时只记录调试信息。</li>\n</ol>\n<p><br></p>\n<p><strong>日志级别</strong><br>描述: 以下描述了标准水平及其适用性（按严重程度的增加顺序）, 严重程度的级别依次是<code>DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</code><br>温馨提示: 当进行日志输出时，如定义了最低日志记录等级，则只会记录严重程度在其之上的日志。</p>\n<p><br></p>\n<p><strong>格式化日志信息</strong><br>描述: Logging 模块有一系列可以用做格式化的属性，如<code>format=&#39;%(asctime)s %(levelname)s:%(message)s&#39;</code>，如下：</p>\n<table>\n<thead>\n<tr>\n<th>Attribute name</th>\n<th>Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>args</td>\n<td>You shouldn’t need to format this yourself.</td>\n<td>The tuple of arguments merged into msg to produce message, or a dict whose  values are used for the merge (when there is only one argument, and it  is a dictionary).</td>\n</tr>\n<tr>\n<td>asctime</td>\n<td>%(asctime)s</td>\n<td>Human-readable time when the LogRecord was created. By default this is of the form  ‘2003-07-08 16:49:45,896’ (the numbers after the comma are millisecond  portion of the time).</td>\n</tr>\n<tr>\n<td>created</td>\n<td>%(created)f</td>\n<td>Time when the LogRecord was created (as returned by time.time()).</td>\n</tr>\n<tr>\n<td>exc_info</td>\n<td>You shouldn’t need to format this yourself.</td>\n<td>Exception tuple (à la sys.exc_info) or, if no exception has occurred, None.</td>\n</tr>\n<tr>\n<td>filename</td>\n<td>%(filename)s</td>\n<td>Filename portion of pathname.</td>\n</tr>\n<tr>\n<td>funcName</td>\n<td>%(funcName)s</td>\n<td>Name of function containing the logging call.</td>\n</tr>\n<tr>\n<td>levelname</td>\n<td>%(levelname)s</td>\n<td>Text logging level for the message (‘DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’).</td>\n</tr>\n<tr>\n<td>levelno</td>\n<td>%(levelno)s</td>\n<td>Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>%(lineno)d</td>\n<td>Source line number where the logging call was issued (if available).</td>\n</tr>\n<tr>\n<td>message</td>\n<td>%(message)s</td>\n<td>The logged message, computed as msg % args. This is set when Formatter.format() is invoked.</td>\n</tr>\n<tr>\n<td>module</td>\n<td>%(module)s</td>\n<td>Module (name portion of filename).</td>\n</tr>\n<tr>\n<td>msecs</td>\n<td>%(msecs)d</td>\n<td>Millisecond portion of the time when the LogRecord was created.</td>\n</tr>\n<tr>\n<td>msg</td>\n<td>You shouldn’t need to format this yourself.</td>\n<td>The format string passed in the original logging call. Merged with args to  produce message, or an arbitrary object (see Using arbitrary objects as  messages).</td>\n</tr>\n<tr>\n<td>name</td>\n<td>%(name)s</td>\n<td>Name of the logger used to log the call.</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>%(pathname)s</td>\n<td>Full pathname of the source file where the logging call was issued (if available).</td>\n</tr>\n<tr>\n<td>process</td>\n<td>%(process)d</td>\n<td>Process ID (if available).</td>\n</tr>\n<tr>\n<td>processName</td>\n<td>%(processName)s</td>\n<td>Process name (if available).</td>\n</tr>\n<tr>\n<td>relativeCreated</td>\n<td>%(relativeCreated)d</td>\n<td>Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.</td>\n</tr>\n<tr>\n<td>stack_info</td>\n<td>You shouldn’t need to format this yourself.</td>\n<td>Stack frame information (where available) from the bottom of the stack in the current thread, up to and including the stack frame of the logging call which resulted in the creation of this record.</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>%(thread)d</td>\n<td>Thread ID (if available).</td>\n</tr>\n<tr>\n<td>threadName</td>\n<td>%(threadName)s</td>\n<td>Thread name (if available).</td>\n</tr>\n</tbody>\n</table>\n<p><br/></p>\n<h3 id=\"2-语法参数\"><a href=\"#2-语法参数\" class=\"headerlink\" title=\"2.语法参数\"></a>2.语法参数</h3><p>描述: logging库提供了模块化的方法和几个组件, 下列列出了模块定义的基础类和函数</p>\n<ul>\n<li>Loggers ：记录器公开应用程序代码直接使用的接口。</li>\n<li>Handlers ：处理程序将日志记录（由记录器创建）发送到相应的目标。</li>\n<li>Filters ：过滤器提供了更细粒度的工具，用于确定要输出哪些日志记录。</li>\n<li>Formatters： 格式化程序指定最终输出中日志记录的布局。</li>\n</ul>\n<p><strong>简单示例:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1、创建一个logger</span></span><br><span class=\"line\">logger = logging.getLogger(__name__) <span class=\"comment\"># 创建 logger </span></span><br><span class=\"line\">logger.setLevel(logging.DEBUG)   <span class=\"comment\"># 写入内容的严重级别</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Handler方法有很多下面主要介绍两种：StreamHandler 和 FileHandler </span></span><br><span class=\"line\"><span class=\"comment\"># 2、创建一个handler，用于写入日志文件</span></span><br><span class=\"line\">fh=logging.FileHandler(<span class=\"string\">'test.log'</span>, encoding=<span class=\"string\">\"utf-8\"</span>) <span class=\"comment\"># 将日志写入到test.log文件 </span></span><br><span class=\"line\">fh.setLevel(logging.DEBUG) <span class=\"comment\"># 并且需要指定写入的内容严重级别</span></span><br><span class=\"line\"><span class=\"comment\"># 再创建一个handler，用于输出到控制台</span></span><br><span class=\"line\">ch=logging.StreamHandler() <span class=\"comment\"># 将日志写入控制台</span></span><br><span class=\"line\">ch.setLevel(logging.DEBUG) <span class=\"comment\"># 并且需要指定写入的内容严重级别</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3、定义handler的输出格式（formatter）</span></span><br><span class=\"line\">formatter = logging.Formatter(<span class=\"string\">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4、给handler添加formatter</span></span><br><span class=\"line\">fh.setFormatter(formatter)</span><br><span class=\"line\">ch.setFormatter(formatter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5、给logger添加handler</span></span><br><span class=\"line\">logger.addHandler(fh)</span><br><span class=\"line\">logger.addHandler(ch)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6、进行日志输出</span></span><br><span class=\"line\">logger.info(<span class=\"string\">\"这是一条INFO级别的信息,来自 【WeiyiGeek.top】 触发。\"</span>)</span><br><span class=\"line\">logger.debug(<span class=\"string\">'debug message'</span>)</span><br><span class=\"line\">logger.info(<span class=\"string\">'info message'</span>)</span><br><span class=\"line\">logger.warning(<span class=\"string\">'warn message'</span>)</span><br><span class=\"line\">logger.error(<span class=\"string\">'error message'</span>)</span><br><span class=\"line\">logger.critical(<span class=\"string\">'critical message'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220810091524.png\" alt=\"WeiyiGeek.同时输出到文件或者终端中\" title=\"\" class=\"\">\n                <p>WeiyiGeek.同时输出到文件或者终端中</p>\n            </figure>\n<p><br/></p>\n<p><strong>那么为什么后续在定义Handler时又做了一次set Level操作呢？</strong></p>\n<p>原因是：<strong>Logger中设置的级别决定它将传递给Handler的消息严重性。每个Handler设置的setLevel()决定了该处理程序将发送哪些消息</strong>（记住：日志中消息是分严重程度的，当确定严重级别是某个层级时，该层级以下的消息不被发送或者记录，该层级以上的消息才被发送或者记录）。</p>\n<p>温馨提示: 写入文件的三种filemode，即<code>r (只读)</code>/<code>w (覆盖)</code>/<code>a (默认)</code></p>\n<p>温馨提示: Logger 整个操作流（官网上down下来的）.</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/5/20220810092104.png\" alt=\"WeiyiGeek.Logger 操作流\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Logger 操作流</p>\n            </figure>\n<p><br/></p>\n<h3 id=\"3-动手实践\"><a href=\"#3-动手实践\" class=\"headerlink\" title=\"3.动手实践\"></a>3.动手实践</h3><h4 id=\"1-简单入门例子\"><a href=\"#1-简单入门例子\" class=\"headerlink\" title=\"(1) 简单入门例子\"></a>(1) 简单入门例子</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"comment\"># 日志写入目录</span></span><br><span class=\"line\">os.chdir(<span class=\"string\">\"/tmp/\"</span>) </span><br><span class=\"line\">logging.basicConfig(format=<span class=\"string\">'%(asctime)s - %(name)s - %(levelname)s - %(message)ss'</span>, filename=<span class=\"string\">'example.log'</span>, level=logging.DEBUG) </span><br><span class=\"line\"><span class=\"comment\"># 注意：上面level设置的是显示的最低严重级别，小于level设置的最低严重级别将不会打印出来</span></span><br><span class=\"line\">logging.debug(<span class=\"string\">'Debug, This message should go to the log file'</span>)</span><br><span class=\"line\">logging.info(<span class=\"string\">'Info, So should this'</span>)</span><br><span class=\"line\">logging.warning(<span class=\"string\">'Warn, And this, too'</span>)</span><br><span class=\"line\">logging.error(<span class=\"string\">'Error, And non-ASCII stuff, too'</span>)</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<h3 id=\"2-实践之按日志大小分割\"><a href=\"#2-实践之按日志大小分割\" class=\"headerlink\" title=\"(2) 实践之按日志大小分割\"></a>(2) 实践之按日志大小分割</h3><p>描述: python 提供了两个处理器，方便我们分割文件：</p>\n<ul>\n<li><p><code>logging.handlers.RotatingFileHandler</code> -&gt; 按照大小自动分割日志文件，一旦达到指定的大小重新生成文件</p>\n</li>\n<li><p><code>logging.handlers.TimedRotatingFileHandler</code> -&gt; 按照时间自动分割日志文件</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置日志的记录等级</span></span><br><span class=\"line\">logging.basicConfig(level=logging.DEBUG)  <span class=\"comment\"># 调试debug级</span></span><br><span class=\"line\"><span class=\"comment\"># 创建日志记录器，指明日志保存的路径、每个日志文件的最大大小、保存的日志文件个数上限</span></span><br><span class=\"line\">file_log_handler = RotatingFileHandler(<span class=\"string\">\"logs/weiyigeek.top.log\"</span>, maxBytes=1024 * 1024 * 100, backupCount=10, encoding=<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 创建日志记录的格式 日志等级 输入日志信息的文件名 行数 日志信息</span></span><br><span class=\"line\">formatter = logging.Formatter(<span class=\"string\">'%(levelname)s %(filename)s:%(lineno)d %(message)s'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 为刚创建的日志记录器设置日志记录格式</span></span><br><span class=\"line\">file_log_handler.setFormatter(formatter)</span><br><span class=\"line\"><span class=\"comment\"># 为全局的日志工具对象（flask app使用的）添加日志记录器</span></span><br><span class=\"line\">logging.getLogger().addHandler(file_log_handler)</span><br></pre></td></tr></table></figure>\n<p>执行效果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a----         2022/8/10     13:46             79 weiyigeek.top.log</span><br><span class=\"line\">-a----         2022/8/10     13:45            878 weiyigeek.top.1</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"3-实践之日志按天分割\"><a href=\"#3-实践之日志按天分割\" class=\"headerlink\" title=\"(3) 实践之日志按天分割\"></a>(3) 实践之日志按天分割</h3><p>描述: 本示例代码可以将日志按天切割以及分别输出到<code>_info.log</code>与<code>_error.log</code>里面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">from</span> logging.handlers <span class=\"keyword\">import</span> TimedRotatingFileHandler</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_PATH = <span class=\"string\">\"log\"</span></span><br><span class=\"line\">LOG_INFO = <span class=\"string\">'_info.log'</span></span><br><span class=\"line\">LOG_ERROR = <span class=\"string\">'_error.log'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">logger</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, prefix_name = <span class=\"string\">\"flask\"</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> os.path.exists(LOG_PATH)):</span><br><span class=\"line\">      os.makedirs(LOG_PATH)</span><br><span class=\"line\"></span><br><span class=\"line\">    self.prefix = prefix_name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建logger日志对象</span></span><br><span class=\"line\">    self.info_logger = logging.getLogger(<span class=\"string\">\"info\"</span>)</span><br><span class=\"line\">    self.error_logger = logging.getLogger(<span class=\"string\">\"error\"</span>)</span><br><span class=\"line\">    self.stream_logger = logging.getLogger(<span class=\"string\">\"stream\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 日志的最低输出级别</span></span><br><span class=\"line\">    self.info_logger.setLevel(logging.DEBUG)</span><br><span class=\"line\">    self.error_logger.setLevel(logging.ERROR)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 日志格式化</span></span><br><span class=\"line\">    self.format = logging.Formatter(<span class=\"string\">'[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'</span> <span class=\"string\">'[%(levelname)s] : %(message)s'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 按照时间切割文件 Handler 配置</span></span><br><span class=\"line\">    TimeFileHandlerINFO = TimedRotatingFileHandler(<span class=\"string\">\"%s/%s%s\"</span> % (LOG_PATH, prefix_name, LOG_INFO), when=<span class=\"string\">'MIDNIGHT'</span>, encoding=<span class=\"string\">\"utf-8\"</span>, backupCount=<span class=\"number\">8760</span>, delay=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    TimeFileHandlerINFO.suffix = <span class=\"string\">\"%Y-%m-%d.log\"</span></span><br><span class=\"line\">    TimeFileHandlerERROR = TimedRotatingFileHandler(<span class=\"string\">\"%s/%s%s\"</span> % (LOG_PATH, prefix_name, LOG_ERROR), when=<span class=\"string\">'MIDNIGHT'</span>, encoding=<span class=\"string\">\"utf-8\"</span>, backupCount=<span class=\"number\">8760</span>, delay=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    TimeFileHandlerERROR.suffix = <span class=\"string\">\"%Y-%m-%d.log\"</span></span><br><span class=\"line\">    LoggerStream = logging.StreamHandler()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 设置日志格式化</span></span><br><span class=\"line\">    TimeFileHandlerINFO.setFormatter(self.format)</span><br><span class=\"line\">    TimeFileHandlerERROR.setFormatter(self.format)</span><br><span class=\"line\">    LoggerStream.setFormatter(self.format)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加设置的句柄</span></span><br><span class=\"line\">    self.info_logger.addHandler(TimeFileHandlerINFO)</span><br><span class=\"line\">    self.info_logger.addHandler(LoggerStream)</span><br><span class=\"line\">    self.error_logger.addHandler(TimeFileHandlerERROR)</span><br><span class=\"line\">    self.error_logger.addHandler(LoggerStream)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">debug</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.debug(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.info(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warn</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.info_logger.warning(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.error(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fatal</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.fatal(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">critical</span><span class=\"params\">(self, msg, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    self.error_logger.critical(msg, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">log = logger(<span class=\"string\">\"weiyigeek\"</span>)</span><br><span class=\"line\">log.debug(<span class=\"string\">\"debug-test \"</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">\"info-test\"</span>)</span><br><span class=\"line\">log.warn(<span class=\"string\">\"wrning-test\"</span>)</span><br><span class=\"line\">log.error(<span class=\"string\">\"error - test\"</span>)</span><br><span class=\"line\">log.fatal(<span class=\"string\">\"fatal - test\"</span>)</span><br><span class=\"line\">log.critical(<span class=\"string\">\"critical - test\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果:</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python .\\logger.py</span><br><span class=\"line\">[2022-08-10 10:21:21,068][MainThread:22372][task_id:info][logger.py:49][DEBUG] : debug-test</span><br><span class=\"line\">[2022-08-10 10:21:21,069][MainThread:22372][task_id:info][logger.py:52][INFO] : info-test</span><br><span class=\"line\">[2022-08-10 10:21:21,069][MainThread:22372][task_id:info][logger.py:55][WARNING] : wrning-test</span><br><span class=\"line\">[2022-08-10 10:21:21,070][MainThread:22372][task_id:error][logger.py:58][ERROR] : error - <span class=\"built_in\">test</span></span><br><span class=\"line\">[2022-08-10 10:21:21,070][MainThread:22372][task_id:error][logger.py:61][CRITICAL] : fatal - <span class=\"built_in\">test</span></span><br><span class=\"line\">[2022-08-10 10:21:21,070][MainThread:22372][task_id:error][logger.py:64][CRITICAL] : critical - <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成的文件</span></span><br><span class=\"line\">/mnt/d/Study/Project/<span class=\"built_in\">log</span>$ ls</span><br><span class=\"line\">weiyigeek_error.log</span><br><span class=\"line\">weiyigeek_error.log.2022-08-09.log</span><br><span class=\"line\"></span><br><span class=\"line\">weiyigeek_info.log</span><br><span class=\"line\">weiyigeek_info.log.2022-08-09.log</span><br></pre></td></tr></table></figure>\n<p>补充说明: 上述代码中 when是一个字符串用于描述滚动周期的基本单位，字符串的值及意义如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'S'</span>: Seconds</span><br><span class=\"line\"><span class=\"string\">'M'</span>: Minutes</span><br><span class=\"line\"><span class=\"string\">'H'</span>: Hours</span><br><span class=\"line\"><span class=\"string\">'D'</span>: Days</span><br><span class=\"line\"><span class=\"string\">'W'</span>: Week day (0=Monday)</span><br><span class=\"line\"><span class=\"string\">'midnight'</span>: Roll over at midnight</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h3 id=\"4-补充示例\"><a href=\"#4-补充示例\" class=\"headerlink\" title=\"(4) 补充示例\"></a>(4) 补充示例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask.logging <span class=\"keyword\">import</span> default_handler</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> logging.handlers <span class=\"keyword\">import</span> RotatingFileHandler</span><br><span class=\"line\"><span class=\"keyword\">from</span> logging <span class=\"keyword\">import</span> StreamHandler</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_PATH = os.path.join(BASE_DIR, <span class=\"string\">'logs'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">LOG_PATH_ERROR = os.path.join(LOG_PATH, <span class=\"string\">'error.log'</span>)</span><br><span class=\"line\">LOG_PATH_INFO = os.path.join(LOG_PATH, <span class=\"string\">'info.log'</span>)</span><br><span class=\"line\">LOG_PATH_ALL = os.path.join(LOG_PATH, <span class=\"string\">'all.log'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志文件最大 100MB</span></span><br><span class=\"line\">LOG_FILE_MAX_BYTES = <span class=\"number\">100</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"comment\"># 轮转数量是 10 个</span></span><br><span class=\"line\">LOG_FILE_BACKUP_COUNT = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_app</span><span class=\"params\">(self, app)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 移除默认的handler</span></span><br><span class=\"line\">        app.logger.removeHandler(default_handler)</span><br><span class=\"line\"></span><br><span class=\"line\">        formatter = logging.Formatter(</span><br><span class=\"line\">            <span class=\"string\">'%(asctime)s [%(thread)d:%(threadName)s] [%(filename)s:%(module)s:%(funcName)s] '</span></span><br><span class=\"line\">            <span class=\"string\">'[%(levelname)s]: %(message)s'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 将日志输出到文件</span></span><br><span class=\"line\">        <span class=\"comment\"># 1 MB = 1024 * 1024 bytes</span></span><br><span class=\"line\">        <span class=\"comment\"># 此处设置日志文件大小为500MB，超过500MB自动开始写入新的日志文件，历史文件归档</span></span><br><span class=\"line\">        file_handler = RotatingFileHandler(</span><br><span class=\"line\">            filename=LOG_PATH_ALL,</span><br><span class=\"line\">            mode=<span class=\"string\">'a'</span>,</span><br><span class=\"line\">            maxBytes=LOG_FILE_MAX_BYTES,</span><br><span class=\"line\">            backupCount=LOG_FILE_BACKUP_COUNT,</span><br><span class=\"line\">            encoding=<span class=\"string\">'utf-8'</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        file_handler.setFormatter(formatter)</span><br><span class=\"line\">        file_handler.setLevel(logging.INFO)</span><br><span class=\"line\"></span><br><span class=\"line\">        stream_handler = StreamHandler()</span><br><span class=\"line\">        stream_handler.setFormatter(formatter)</span><br><span class=\"line\">        stream_handler.setLevel(logging.INFO)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> logger <span class=\"keyword\">in</span> (</span><br><span class=\"line\">        <span class=\"comment\"># 这里自己还可以添加更多的日志模块，具体请参阅Flask官方文档</span></span><br><span class=\"line\">                app.logger,</span><br><span class=\"line\">                logging.getLogger(<span class=\"string\">'sqlalchemy'</span>),</span><br><span class=\"line\">                logging.getLogger(<span class=\"string\">'werkzeug'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        ):</span><br><span class=\"line\">            logger.addHandler(file_handler)</span><br><span class=\"line\">            logger.addHandler(stream_handler)</span><br></pre></td></tr></table></figure>\n<p>扩展文件中添加log模块：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> log <span class=\"keyword\">import</span> Logger</span><br><span class=\"line\"></span><br><span class=\"line\">logger = Logger()</span><br></pre></td></tr></table></figure>","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Python3","path":"api/tags/Python3.json"}]}