{"title":"Python3入门学习二.md","slug":"编程世界/Python/基础学习/1.Python3基础入门学习笔记(二)","date":"2019-03-19T05:34:30.000Z","updated":"2022-08-31T08:08:44.757Z","url":"2019/3-19-335.html","path":"api/articles/2019/3-19-335.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031901.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031902.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031903.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031904.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031905.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031906.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031907.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031908.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031909.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031910.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031911.png"],"content":"<p>[TOC]</p>\n<h3 id=\"5-数据类型转换\"><a href=\"#5-数据类型转换\" class=\"headerlink\" title=\"5.数据类型转换\"></a>5.数据类型转换</h3><p>数据类型的转换你只需要将数据类型作为函数名即可，还有几个内置函数可以执行数据之间的转换，这些函数返回一个新的对象，表示转换的值；</p>\n<p><em>数据类型转换函数列表：</em><br>int(x [,base = 10])  #将x转换为一个整数类型,或者指定一个进制类型进行转换成为整形(返回整型数据)<br>float(x)              #函数用于将整数和字符串转换成浮点数<br>str(x)    #将对象 x 转换为字符串<br><a id=\"more\"></a><br>complex(real [ ,imag ])  #用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数(如果第一个参数为字符串，则不需要指定第二个参数。。)<br>repr(x)   #将对象 x 转换为表达式字符串,为供解释器读取的形式;<br>tuple(s)  #将序列 s 转换为一个元组<br>list(s)   #将序列 s 转换为一个列表<br>set(s)    #转换为可变集合<br>dict(d)   #创建一个字典d必须是一个序列 (key,value)元组。<br>chr(x)    #将一个整数转换为一个字符<br>hex(x)    #将一个整数转换为一个十六进制字符串<br>oct(x)    #将一个整数转换为一个八进制字符串<br>ord(x)    #将一个字符转换为它的ASCII整数值<br>frozenset(s)  #返回一个冻结的集合，冻结后集合不能再添加或删除任何元素,参数iterable-可迭代的对象，比如列表、字典、元组等等。</p>\n<p>案例：数据类型转换函数使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:数值类型转换内置函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"整形 : 0xa=\"</span>,int(<span class=\"string\">'0xa'</span>,<span class=\"number\">16</span>),<span class=\"string\">\" 0x12=\"</span>,int(<span class=\"string\">'12'</span>,<span class=\"number\">16</span>),<span class=\"string\">\" 010=\"</span>,int(<span class=\"string\">'10'</span>,<span class=\"number\">8</span>)) </span><br><span class=\"line\">                                        <span class=\"comment\">#以16进制转换为整形,和8进制转换成为整形</span></span><br><span class=\"line\">print(<span class=\"string\">\"浮点 :\"</span>,float(<span class=\"string\">'123'</span>),float(<span class=\"number\">1</span>))  <span class=\"comment\">#浮点类型</span></span><br><span class=\"line\">print(<span class=\"string\">\"复数 :\"</span>,complex(<span class=\"number\">1</span>,<span class=\"number\">2</span>),complex(<span class=\"string\">\"1+2j\"</span>))  <span class=\"comment\">#转化一个字符串或数为复数 </span></span><br><span class=\"line\"><span class=\"comment\">#注意:这个地方在\"+\"号两边不能有空格，也就是不能写成\"1 + 2j\"，应该是\"1+2j\"，否则会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">cdict = dict(zip([<span class=\"string\">'one'</span>, <span class=\"string\">'two'</span>, <span class=\"string\">'three'</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))   <span class=\"comment\"># 映射函数方式来构造字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(str(cdict))  <span class=\"comment\"># 将对象转化为字符串形式。</span></span><br><span class=\"line\">print(repr(cdict))  <span class=\"comment\"># 将对象转化为供解释器读取的形式。</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(eval(<span class=\"string\">' 2 ** 2'</span>),eval(<span class=\"string\">'pow(2,2)'</span>))  <span class=\"comment\"># 执行一个字符串表达式,可以执行python的一些数学函数和计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(set(<span class=\"string\">'runoob'</span>),set(<span class=\"string\">'google'</span>))       <span class=\"comment\"># 集合中重复的值被删除 set</span></span><br><span class=\"line\">print(frozenset(range(<span class=\"number\">10</span>)))              <span class=\"comment\"># 生成一个新的不可变集合 set</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(chr(<span class=\"number\">48</span>),chr(<span class=\"number\">65</span>),chr(<span class=\"number\">97</span>))       <span class=\"comment\">#将ASCII码 ==&gt; 字符</span></span><br><span class=\"line\">print(ord(<span class=\"string\">'0'</span>),ord(<span class=\"string\">'A'</span>),ord(<span class=\"string\">'a'</span>))    <span class=\"comment\">#将字符  ==&gt; ASCII</span></span><br><span class=\"line\">print(hex(<span class=\"number\">255</span>),hex(<span class=\"number\">15</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"255 oct =\"</span>,oct(<span class=\"number\">255</span>),<span class=\"string\">\"10 oct =\"</span>,oct(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031901.png\" alt=\"Python数据类型转换函数使用\" title=\"\" class=\"\">\n                <p>Python数据类型转换函数使用</p>\n            </figure></p>\n<h3 id=\"6-操作符以及优先级\"><a href=\"#6-操作符以及优先级\" class=\"headerlink\" title=\"6.操作符以及优先级\"></a>6.操作符以及优先级</h3><p><strong>Q:  什么是运算符？</strong><br>A：让变量进行加减乘除四则运算；</p>\n<h4 id=\"运算符及其优先级\"><a href=\"#运算符及其优先级\" class=\"headerlink\" title=\"运算符及其优先级:\"></a>运算符及其优先级:</h4><ul>\n<li>算术运算符</li>\n<li>右移/左移运算符</li>\n<li>位运算符</li>\n<li>比较（关系）运算符 </li>\n<li>等于运算符</li>\n<li>赋值运算符</li>\n<li>身份运算符</li>\n<li>成员运算符</li>\n<li>逻辑运算符<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031902.png\" alt=\"Python优先级\" title=\"\" class=\"\">\n                <p>Python优先级</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031903.png\" alt=\"Python优先级详细\" title=\"\" class=\"\">\n                <p>Python优先级详细</p>\n            </figure>\n</li>\n</ul>\n<blockquote>\n<p>Python中的按位运算法：<br>按位运算符是把数字看作二进制来进行计算的。</p>\n</blockquote>\n<p><code>&amp;</code>    按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0。<br><code>|</code>    按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。<br><code>^</code>    按位异或运算符：当两对应的二进位相异时，结果为1<br><code>~</code>    按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。（~x 类似于 -x-1 ，在一个有符号二进制数的补码形式）。</p>\n<p><code>&lt;&lt;</code> 左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。<br><code>&gt;&gt;</code> 右移动运算符：把 “ &gt;&gt; “左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数 。</p>\n<blockquote>\n<p>Python语言支持逻辑运算符：（类似玉C语言短路求值 &amp;&amp; ）</p>\n</blockquote>\n<p>x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。<br>x or y    布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。<br>not x     布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</p>\n<blockquote>\n<p>Python成员运算符：</p>\n</blockquote>\n<p>包含了一系列的成员，包括字符串，列表或元组。<br>in            如果在指定的序列中找到值返回 True，否则返回 False。<br>not in    如果在指定的序列中没有找到值返回 True，否则返回 False。     </p>\n<blockquote>\n<p>Python身份运算符：</p>\n</blockquote>\n<p>is 是判断两个标识符是不是引用自一个对象<br>        x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False<br>is not 是判断两个标识符是不是引用自不同对象<br>    x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 </p>\n<p>案例：Python各种操作符<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:特殊运算符号验证demo</span></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"Python算术运算符\"\"\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"2 / 4 = \"</span>, <span class=\"number\">2</span> / <span class=\"number\">4</span>)   <span class=\"comment\">#除法 , 得到浮点数</span></span><br><span class=\"line\">print(<span class=\"string\">\"2 // 4 = \"</span>,<span class=\"number\">2</span> // <span class=\"number\">4</span>)  <span class=\"comment\">#除法 , 得到整数</span></span><br><span class=\"line\">print(<span class=\"string\">\"2 ** 4 = \"</span>,<span class=\"number\">2</span> ** <span class=\"number\">4</span>)  <span class=\"comment\">#乘方 ，(优先级最高)</span></span><br><span class=\"line\">print(<span class=\"string\">\"5 % 4 = \"</span>,<span class=\"number\">5</span> % <span class=\"number\">4</span>)   <span class=\"comment\">#取余 ，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"比较运算符###</span></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a == b ):</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"1 - a 等于 b\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"1 - a 不等于 b\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"赋值运算符###</span></span><br><span class=\"line\">c = a + b</span><br><span class=\"line\">c += <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">\"C值为：\"</span>,c)</span><br><span class=\"line\">c **= c</span><br><span class=\"line\">print(<span class=\"string\">\"C值为：\"</span>,c)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"Python位运算\"\"\"</span></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">8</span></span><br><span class=\"line\">print(<span class=\"string\">\"a&amp;b = \"</span>, a&amp;b)  <span class=\"comment\">#与</span></span><br><span class=\"line\">print(<span class=\"string\">\"a|b = \"</span>, a|b)  <span class=\"comment\">#或</span></span><br><span class=\"line\">print(<span class=\"string\">\"a^b = \"</span>, a^b)  <span class=\"comment\">#亦或</span></span><br><span class=\"line\">print(<span class=\"string\">\"~a = \"</span>, ~a)    <span class=\"comment\">#取反</span></span><br><span class=\"line\">print(<span class=\"string\">\"a&lt;&lt;2 = \"</span>, a&lt;&lt;<span class=\"number\">2</span>)   <span class=\"comment\">#左移动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"Python逻辑运算符\"\"\"</span></span><br><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\">print((a <span class=\"keyword\">and</span> b))  <span class=\"comment\">#如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</span></span><br><span class=\"line\">print((a <span class=\"keyword\">or</span> b))   <span class=\"comment\">#如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</span></span><br><span class=\"line\">print(<span class=\"keyword\">not</span>(a <span class=\"keyword\">or</span> b)) <span class=\"comment\"># 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"Python成员运算符\"\"\"</span></span><br><span class=\"line\">a = <span class=\"number\">10</span></span><br><span class=\"line\">b = <span class=\"number\">5</span></span><br><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ]</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a <span class=\"keyword\">in</span> list):</span><br><span class=\"line\">    print(<span class=\"string\">\"a 在list列表里面\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"a 不在list列表里面\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(b <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list):</span><br><span class=\"line\">    print(<span class=\"string\">\"a 不在list列表里面\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"b 在list列表里面\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"Python成员运算符\"\"\"</span></span><br><span class=\"line\">a = <span class=\"number\">20</span></span><br><span class=\"line\">b = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a <span class=\"keyword\">is</span> b ):</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"1 - a 和 b 有相同的标识\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"1 - a 和 b 没有相同的标识\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#注： id() 函数用于获取对象内存地址</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( id(a) == id(b) ):</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"2 - a 和 b 有相同的标识\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"2 - a 和 b 没有相同的标识\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a,b,c,d,e = <span class=\"number\">20</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">#\"\"\"算术运算符优先级验证\"\"\" </span></span><br><span class=\"line\">e = (a + b) * c / d       <span class=\"comment\">#( 30 * 15 ) / 5</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"(a + b) * c / d 运算结果为：\"</span>,  e)</span><br><span class=\"line\"> </span><br><span class=\"line\">e = ((a + b) * c) / d     <span class=\"comment\"># (30 * 15 ) / 5</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"((a + b) * c) / d 运算结果为：\"</span>,  e)</span><br><span class=\"line\"> </span><br><span class=\"line\">e = (a + b) * (c / d);    <span class=\"comment\"># (30) * (15/5)</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"(a + b) * (c / d) 运算结果为：\"</span>,  e)</span><br><span class=\"line\"> </span><br><span class=\"line\">e = a + b * c / d;      <span class=\"comment\">#  20 + (150/5)</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (<span class=\"string\">\"a + (b * c) / d 运算结果为：\"</span>,  e)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031904.png\" alt=\"Python各种操作符案例\" title=\"\" class=\"\">\n                <p>Python各种操作符案例</p>\n            </figure></p>\n<p><em>注意事项:</em><br>1)数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。<br>2)在混合计算时，Python会把整型转换成为浮点数。<br>3)is 与 == 区别，前者用于判断两个变量引用对象是否为同一个， 后者用于判断引用变量的值是否相等。<br>4)逻辑运算符是 not、and 、or优先级<br>5)幂指数 ** 比左侧的优先级高,比右侧的优先级低<br>6)使用 (x&gt;y)-(x &lt; y) 来判断x/y是否相同，如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</p>\n<h3 id=\"7-Python流程控制语法\"><a href=\"#7-Python流程控制语法\" class=\"headerlink\" title=\"7.Python流程控制语法\"></a>7.Python流程控制语法</h3><h4 id=\"7-1-条件控制与循环\"><a href=\"#7-1-条件控制与循环\" class=\"headerlink\" title=\"7.1 条件控制与循环\"></a>7.1 条件控制与循环</h4><h5 id=\"7-1-1-分支语句：if-elif-else\"><a href=\"#7-1-1-分支语句：if-elif-else\" class=\"headerlink\" title=\"7.1.1 分支语句：if elif else\"></a>7.1.1 分支语句：if elif else</h5><p><strong>分支语法：</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> 表达式:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 表达式:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 方式2.三元（三目）操作符    </span></span><br><span class=\"line\"><span class=\"comment\"># Python 是一种极简主义的编程语言，它没有引入? :这个新的运算符，而是使用已有的 if else 关键字来实现相同的功能。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果条件为真时候将x值赋给small，为假时候将y值赋给small</span></span><br><span class=\"line\">x <span class=\"keyword\">if</span> 条件 <span class=\"keyword\">else</span> y  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># else 语句</span></span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"keyword\">else</span> 语句跟 <span class=\"keyword\">if</span> 语句搭，构成“要么怎样，要么不怎样”的语境</span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"keyword\">else</span> 语句跟 <span class=\"keyword\">for</span> / <span class=\"keyword\">while</span> 语句搭，构成“干完了能怎样，干不完就别想怎样”的语境</span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"keyword\">else</span> 语句跟 <span class=\"keyword\">try</span> 语句搭构成“没有问题，那就干吧”的语境</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意事项：</strong><br>1) 由于Python中无{}包含代码块，而是采用缩进的方式来判别执行的代码块；<br>2) 与for/while语句搭配时候,只有在循环正常执行完成后才会执行 else 语句块的内容<br>3) 三目运算符是可以嵌套, 但需要注意 if 和 else 的配对使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> c <span class=\"keyword\">if</span> c&gt;d <span class=\"keyword\">else</span> d</span><br><span class=\"line\">a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> ( c <span class=\"keyword\">if</span> c&gt;d <span class=\"keyword\">else</span> d )</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"7-1-2-循环语句：while-for-else…\"><a href=\"#7-1-2-循环语句：while-for-else…\" class=\"headerlink\" title=\"7.1.2 循环语句：while , for..else…\"></a>7.1.2 循环语句：while , for..else…</h5><blockquote>\n<p>退出循环关键字：break，continue,及其循环语法:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while （表达式条件):</span><br><span class=\"line\">          为真则执行代码块</span><br><span class=\"line\">else:</span><br><span class=\"line\">        语句为 false 时执行该 else 的语句块： </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">for 变量 in 表达式:</span><br><span class=\"line\">          循环体</span><br><span class=\"line\">else:</span><br><span class=\"line\">          它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行,但循环被break终止时不执行。</span><br></pre></td></tr></table></figure>\n<p>案例：条件控制于循环语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#功能:分支与循环</span></span><br><span class=\"line\"><span class=\"comment\">#-----------if 语句-----------------</span></span><br><span class=\"line\">guess = <span class=\"number\">8</span></span><br><span class=\"line\">temp = int(input(<span class=\"string\">\"请输入一个1-10数值:\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">if</span> guess == temp:</span><br><span class=\"line\">    print(<span class=\"string\">\"恭喜您,输入的数值刚好\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> guess &gt; temp:</span><br><span class=\"line\">    print(<span class=\"string\">\"太遗憾了,输入的数值小于它\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"太遗憾了,输入的数值大于它\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#【实例】使用 Python 三目运算符判断</span></span><br><span class=\"line\">x,y = <span class=\"number\">1</span>,<span class=\"number\">3</span></span><br><span class=\"line\">print(<span class=\"string\">\"#三元(三目)运算符 ：\"</span>,end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">print( x <span class=\"keyword\">if</span> x &gt; <span class=\"number\">3</span> <span class=\"keyword\">else</span> y )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#【实例】使用 Python 三目运算符判断两个数字的关系： </span></span><br><span class=\"line\">a = int( input(<span class=\"string\">\"Input a: \"</span>) )</span><br><span class=\"line\">b = int( input(<span class=\"string\">\"Input b: \"</span>) )</span><br><span class=\"line\">print(<span class=\"string\">\"a大于b\"</span>) <span class=\"keyword\">if</span> a&gt;b <span class=\"keyword\">else</span> ( print(<span class=\"string\">\"a小于b\"</span>) <span class=\"keyword\">if</span> a&lt;b <span class=\"keyword\">else</span> print(<span class=\"string\">\"a等于b\"</span>) )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#------------while 语句---------------</span></span><br><span class=\"line\"><span class=\"comment\"># Fibonacci series: 斐波纳契数列 （两个元素的总和确定了下一个数）</span></span><br><span class=\"line\">a,b = <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">    print(b,end=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    a,b = b, a+b</span><br><span class=\"line\">print(<span class=\"string\">\"\\n\\n\"</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>): <span class=\"keyword\">print</span> (<span class=\"string\">'Python!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#采用while ..else 进行素数的计算</span></span><br><span class=\"line\">count  = <span class=\"number\">11</span> / <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">while</span> count &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">       <span class=\"keyword\">if</span> num % count == <span class=\"number\">0</span>:</span><br><span class=\"line\">             print(<span class=\"string\">\"%d 最大约数是%d \"</span> %（<span class=\"number\">11</span>,count))</span><br><span class=\"line\">             <span class=\"keyword\">break</span>   <span class=\"comment\">#利用break跳出不执行else</span></span><br><span class=\"line\">             count -= <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">             print(<span class=\"string\">\"%d是素数\"</span> <span class=\"number\">11</span>)   <span class=\"comment\">#循环穷尽（为假的时候，执行遇到break不会执行）</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#------------for 语句---------------</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"python\"</span>:</span><br><span class=\"line\">  print(i,end=<span class=\"string\">\"|\"</span>)  <span class=\"comment\">#依次打印字母并以 | 分割</span></span><br><span class=\"line\">print()   </span><br><span class=\"line\"></span><br><span class=\"line\">sites = [<span class=\"string\">\"baidu\"</span>,<span class=\"string\">\"Google\"</span>,<span class=\"string\">\"Runoob\"</span>,<span class=\"string\">\"taobao\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> sites:</span><br><span class=\"line\">    print(i,end=<span class=\"string\">\",\"</span>)       <span class=\"comment\">#打印出列表的值</span></span><br><span class=\"line\">print()   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(sites)):  <span class=\"comment\">#或列表的长度 4 生成(0 - 3);</span></span><br><span class=\"line\">    print(i,sites[i],len(sites[i]))  <span class=\"comment\">#索引,列表中以索引下标的元素,元素的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">print()   </span><br><span class=\"line\"><span class=\"comment\">#查询是否为质数 2 - 10 那些是质数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,x):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x % y == <span class=\"number\">0</span>:</span><br><span class=\"line\">            print(x,<span class=\"string\">'等于'</span>,y , <span class=\"string\">'*'</span>, x // y)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\">#循环中找到元素,它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行,但循环被break终止时不执行。 </span></span><br><span class=\"line\">        print(x,<span class=\"string\">'是质数'</span>)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031905.png\" alt=\"Python条件控制于循环案例\" title=\"\" class=\"\">\n                <p>Python条件控制于循环案例</p>\n            </figure></p>\n<h5 id=\"7-1-3-空语句：pass\"><a href=\"#7-1-3-空语句：pass\" class=\"headerlink\" title=\"7.1.3 空语句：pass\"></a>7.1.3 空语句：pass</h5><p>Python pass是空语句，是为了保持程序结构的完整性，pass 不做任何事情，一般用做占位语句，如下实例:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  <span class=\"comment\"># 等待键盘中断 (Ctrl+C)</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#最小的类:</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEmptyClass</span>:</span></span><br><span class=\"line\">   <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-迭代器与生成器\"><a href=\"#8-迭代器与生成器\" class=\"headerlink\" title=\"8.迭代器与生成器\"></a>8.迭代器与生成器</h3><h4 id=\"8-1-迭代器-iter\"><a href=\"#8-1-迭代器-iter\" class=\"headerlink\" title=\"8.1 迭代器 iter\"></a>8.1 迭代器 iter</h4><p>迭代是Python最强大的功能之一是访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象;迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束，且只能往前不会后退。<br>迭代器参数：列表/字典 </p>\n<p>迭代器有两个基本的方法：iter() 和 next()。</p>\n<blockquote>\n<p>创建一个迭代器，使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() ；并且<strong>iter</strong>() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成,防止出现无限循环的情况。</p>\n</blockquote>\n<p>案例:迭代器(魔术方法)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># 功能：迭代器与生成器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys          <span class=\"comment\">#引入 sys 模块</span></span><br><span class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">it = iter(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#** 方法1 for **#</span></span><br><span class=\"line\"><span class=\"comment\">## 其实 for 语句实现与iter迭代器差不多 ##</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    print(<span class=\"string\">\"值\"</span>, x, end=<span class=\"string\">\", \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"\\n---------------------------\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#***方法2 next**#</span></span><br><span class=\"line\">it = iter(list)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(next(it), end=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:     <span class=\"comment\"># StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况;</span></span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#**方法3 迭代器 - 魔法方法 **#</span></span><br><span class=\"line\"><span class=\"comment\"># 创建一个返回数字的迭代器，初始值为 0，逐步递增 1：运行四次</span></span><br><span class=\"line\"><span class=\"comment\">#魔法方法案例(1)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span>  <span class=\"comment\">#魔法方法</span></span><br><span class=\"line\">        self.a = <span class=\"number\">0</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span>  <span class=\"comment\">#当</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">                x = self.a</span><br><span class=\"line\">                self.a += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> x</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"string\">'迭代结束'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = iter(myclass)  <span class=\"comment\"># 实际触发了__iter__ 中 a = 0</span></span><br><span class=\"line\">print(next(myiter), end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#运行1次 next</span></span><br><span class=\"line\">print(next(myiter), end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#运行2次 next</span></span><br><span class=\"line\">print(next(myiter), end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#运行3次 next</span></span><br><span class=\"line\">print(next(myiter), end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#运行4次 next</span></span><br><span class=\"line\">print(next(myiter))  <span class=\"comment\">#第五次运行next由于条件(或抛出 StopIteration 退出迭代)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#案例二：采用魔法方法实现斐波那契数列</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fibs</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.a = <span class=\"number\">0</span></span><br><span class=\"line\">        self.b = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self   <span class=\"comment\">#返回它本身由于它自身就是迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.a, self.b = self.b,self.a + self.b</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.a   <span class=\"comment\">#a就是下一个斐波那契的值</span></span><br><span class=\"line\">    <span class=\"comment\"># def __next__(self):</span></span><br><span class=\"line\">    <span class=\"comment\">#     self.a, self.b = self.b,self.a + self.b</span></span><br><span class=\"line\">    <span class=\"comment\">#     if self.a &gt; 10:</span></span><br><span class=\"line\">    <span class=\"comment\">#         raise StopIteration   #表示</span></span><br><span class=\"line\">    <span class=\"comment\">#     return self.a</span></span><br><span class=\"line\"></span><br><span class=\"line\">fibs = Fibs()</span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> fibs:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> each &lt; <span class=\"number\">20</span>: <span class=\"comment\">#返回</span></span><br><span class=\"line\">        print(each, end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#######################</span></span><br><span class=\"line\"><span class=\"comment\"># $ python demo3.24.py</span></span><br><span class=\"line\"><span class=\"comment\"># 0 1 2 3 迭代结束</span></span><br><span class=\"line\"><span class=\"comment\"># 1 1 2 3 5 8 13</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031906.png\" alt=\"Python迭代器案例\" title=\"\" class=\"\">\n                <p>Python迭代器案例</p>\n            </figure>\n<h4 id=\"8-2-生成器-yield\"><a href=\"#8-2-生成器-yield\" class=\"headerlink\" title=\"8.2 生成器 yield\"></a>8.2 生成器 yield</h4><p>使用yield的函数被称为生成器（generator）,跟普通函数不同的是,生成器是一个返回迭代器的函数;只能用于迭代操作,更简单点理解生成器就是一个迭代器。<br><em>不同之处：</em>就是协同程序(可以运行的独立函数调用,函数可以暂停或者挂起,并在需要的地方从程序离开的地方继续或者重新开始)</p>\n<blockquote>\n<p>重点：调用一个生成器函数，返回的是一个迭代器对象。<br>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>\n</blockquote>\n<p>案例：生成器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：生成器yield</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#案例1：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gener</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"生成器被执行!\"</span>,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>  <span class=\"comment\">#运行第一next 暂停在这里</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>  <span class=\"comment\">#运行第二next 显示二</span></span><br><span class=\"line\"></span><br><span class=\"line\">my = gener()</span><br><span class=\"line\">next(my)  <span class=\"comment\"># 成器被执行! 2</span></span><br><span class=\"line\">next(my)  <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法2：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\">#当 counter == 10 结束（即算出10次数）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a  <span class=\"comment\">#生成器进行返回</span></span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        print(next(f), end=<span class=\"string\">\" \"</span>) <span class=\"comment\">#一次返回一个斐波那契数列 0 1 1 2 3 5 8 13 21 34 55</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方法3：for循环会自动解析Stopiteration异常并结束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fbli</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\">    b = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        a, b = b, a+b</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> fbli():  <span class=\"comment\">#each 及是 返回生成器 a的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> each &lt;= <span class=\"number\">55</span>:</span><br><span class=\"line\">        print(each,end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">########## 执行结果 ##########</span></span><br><span class=\"line\"><span class=\"comment\"># 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-Python-函数\"><a href=\"#9-Python-函数\" class=\"headerlink\" title=\"9.Python 函数\"></a>9.Python 函数</h3><h4 id=\"9-1-函数定义语法\"><a href=\"#9-1-函数定义语法\" class=\"headerlink\" title=\"9.1 函数定义语法\"></a>9.1 函数定义语法</h4><p>函数能提高应用的模块性，和代码的重复利用率可以进行自我调用，用户自己建立的函数叫用户自定义函数；<br>函数function，对象object，模块moudule。</p>\n<p><em>函数与过程：</em> 过程（procedure）是简单的，特殊并且没有返回值的，一般的编程语言都把函数和过程分开。<br>但Python事实上只有函数没有过程，函数是有返回值的，当函数中无return语句返回的时候，将返回None类型。但Python可以返回多个值、利用列表【多种类型共存】或者元组；</p>\n<p><em>Q：如何定义一个函数？</em><br>A：以下是简单的规则：<br>    1.函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()，函数内容以冒号起始，并且缩进。<br>    2.任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。<br>    3.函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。即 ‘’’函数说明’’’<br>    4.return [ 表达式 ] 结束函数，选择性地返回一个值给调用方，如果不带表达式的return相当于返回 None。</p>\n<p>函数语法:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#.__doc__ (函数的默认属性,他是一个特殊的属性,特殊属性格式就是这样)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名<span class=\"params\">(形参列表)</span>:</span></span><br><span class=\"line\">      <span class=\"string\">'函数文档 ：通过 函数名.__doc__调用'</span> </span><br><span class=\"line\">      函数体</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#(形参) formal parameters</span></span><br><span class=\"line\"><span class=\"comment\">#(实参) actual parameters</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">first</span><span class=\"params\">(name=<span class=\"string\">\"default\"</span>)</span>:</span></span><br><span class=\"line\">       <span class=\"string\">'函数定义过程中name是形参'</span> <span class=\"comment\">#因为ta只是一个形式，表示占据一个参数位置。</span></span><br><span class=\"line\">       print(name,<span class=\"string\">\"这时候name的值是实参，因为他是具体的参数值！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"hello world\"</span>)     <span class=\"comment\">#由于这里没有return 语句，将返回None</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>temp = hello()     <span class=\"comment\">#将函数的值返回给temp</span></span><br><span class=\"line\">hello world    </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>temp                    <span class=\"comment\">#但是temp并没有return返回值</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(temp)   </span><br><span class=\"line\"><span class=\"literal\">None</span>                             <span class=\"comment\">#Print-Temp时候返回了None类型</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(temp)</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">NoneType</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">def</span> <span class=\"title\">back</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">\"Python\"</span>,<span class=\"string\">\"Flash\"</span>, <span class=\"number\">3.1415926</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>back()</span><br><span class=\"line\">[<span class=\"string\">'Python'</span>, <span class=\"string\">'Flash'</span>, <span class=\"number\">3.1415926</span>]     <span class=\"comment\">#返回列表</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&gt;&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">back</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Python\"</span>,<span class=\"string\">\"Flash\"</span>, <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>back()</span><br><span class=\"line\">(<span class=\"string\">'Python'</span>, <span class=\"string\">'Flash'</span>, <span class=\"number\">3.1415926</span>)   <span class=\"comment\">#返回元组</span></span><br></pre></td></tr></table></figure><br>默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。</p>\n<p>函数实例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class=\"line\">#功能：实现函数功能</span><br><span class=\"line\"></span><br><span class=\"line\">def fun(num1,num2):</span><br><span class=\"line\">    &#39;函数功能：求出两个数之和&#39;  #通过 函数名.__doc__调用函数文档</span><br><span class=\"line\">    return num1 + num2        #用return返回参数或者程序运行的结果</span><br><span class=\"line\"></span><br><span class=\"line\">def saypython(name&#x3D;&#39;小甲鱼&#39;,words&#x3D;&quot;改变时间&quot;):  #设置默认参数，当未给函数赋值的时候显示</span><br><span class=\"line\">    &#39;函数文档：我们的心声&#39;</span><br><span class=\"line\">    print(name + &#39; 想 -&gt;&#39; + words)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;1 + 2 &#x3D;&quot;,fun(1,2))</span><br><span class=\"line\">print(&quot;函数说明：(&quot;,fun.__doc__,end&#x3D;&quot;)\\n-------------&quot;)</span><br><span class=\"line\">print(&quot;我&quot;,saypython(&#39;weiyigeek&#39;,&#39;改变世界&#39;))  #由于无return语句则返回none</span><br><span class=\"line\"></span><br><span class=\"line\">saypython(&#39;weiyigeek&#39;,&#39;改变世界&#39;)</span><br><span class=\"line\">saypython()  #采用函数默认参数,便可以不带参数运行,因为有内置可选参数 name&#x3D;&#39;小甲鱼&#39;,words&#x3D;&quot;改变时间&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;函数说明：(&quot;,fun.__doc__,end&#x3D;&quot;)\\n&quot;)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031907.png\" alt=\"Python函数定义案例\" title=\"\" class=\"\">\n                <p>Python函数定义案例</p>\n            </figure></p>\n<h4 id=\"9-2-函数参数详述\"><a href=\"#9-2-函数参数详述\" class=\"headerlink\" title=\"9.2 函数参数详述\"></a>9.2 函数参数详述</h4><p>python 函数的参数传递：</p>\n<ul>\n<li>不可变类型：类似 c++ 的值传递，整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。</li>\n<li>可变类型：类似 c++ 的引用传递，如列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响</li>\n</ul>\n<p>以下是调用函数时可使用的正式参数类型：</p>\n<ul>\n<li>必需参数， def printme(argv,argv1)<br>= 关键字参数，函数调用使用关键字参数来确定传入的参数值(无需顺序输入，采用关键字即可) printme(argv1= 1024,argv = 1)</li>\n<li>默认参数，def printme(argv = 1024)</li>\n<li>不定长参数，需要一个函数能处理比当初声明时更多的参数 (重点)</li>\n</ul>\n<blockquote>\n<p>可变参数运用在不确定有多个参数之间：<br>（1）加了单个星号 <em> 形参名，如（</em>params）会打包成为元组（tuple），如果在函数调用时没有指定参数，它就是一个空元组，我们也可以不向函数传递未命名的变量。<br>（2）加了两个星号 <strong> 形参名，如（</strong>params）会以字典（dict）的形式导入</p>\n</blockquote>\n<p>函数参数案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：函数参数</span></span><br><span class=\"line\"><span class=\"comment\">#例如：其实PRINT()就自带收集参数*Objects</span></span><br><span class=\"line\"><span class=\"comment\">#print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#/*不可变对象**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ChangeInt</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    a = <span class=\"number\">10</span></span><br><span class=\"line\">    print(<span class=\"string\">\"(不可变)函数内：\"</span>,a) <span class=\"comment\">#结果是 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br><span class=\"line\">ChangeInt(b)</span><br><span class=\"line\">print(<span class=\"string\">\"(不可变)函数外：\"</span>,b,end=<span class=\"string\">\"\\n\\n\"</span>) <span class=\"comment\">#结果是 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#/*可变对象**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">changeme</span><span class=\"params\">(mylist)</span>:</span></span><br><span class=\"line\">    mylist.append([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])  <span class=\"comment\">#这时候传入列表已经被改变了</span></span><br><span class=\"line\">    print(<span class=\"string\">\"(可变)函数内取值 :\"</span>,mylist)  </span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">mlist = [<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">changeme(mlist)</span><br><span class=\"line\">print(<span class=\"string\">\"(可变)函数外取值 :\"</span>,mlist)  <span class=\"comment\">#列表已改变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/*** 可变参数(*) 与 关键字参数 **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(*params,exp=<span class=\"string\">\"weiyi\"</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"参数长度 :\"</span>,len(params),<span class=\"string\">\" 第二个参数：\"</span>,params[<span class=\"number\">1</span>],<span class=\"string\">\"Name :\"</span>,exp)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> params:</span><br><span class=\"line\">        print(var,end=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"string\">\"爱您\"</span>,<span class=\"number\">1024</span>,<span class=\"number\">1</span>,exp=<span class=\"string\">'weiyigeek'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/*** 可变参数(**) **/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printmm</span><span class=\"params\">(arg1,**vardict)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'函数文档：形式参数为字典类型'</span></span><br><span class=\"line\">    print(<span class=\"string\">\"\\n\\n输出 arg1：\"</span>,arg1)</span><br><span class=\"line\">    print(<span class=\"string\">\"输出 vardict 字典 :\"</span>,vardict)</span><br><span class=\"line\"></span><br><span class=\"line\">printmm(<span class=\"string\">'test'</span>,a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/*** 单个星号的使用  (注意)**/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">star</span><span class=\"params\">(a,b,*,c)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"a :\"</span>,a ,<span class=\"string\">\" b:\"</span>,b ,<span class=\"string\">' c:'</span>, c)</span><br><span class=\"line\"></span><br><span class=\"line\">star(<span class=\"number\">1</span>,<span class=\"number\">2</span>,c=<span class=\"number\">1024</span>)  <span class=\"comment\">#c必须进行指定关键字传入值，否则会报错</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031908.png\" alt=\"Python函数参数案例\" title=\"\" class=\"\">\n                <p>Python函数参数案例</p>\n            </figure></p>\n<p><em>注意事项：</em><br>1) Python一切皆对象，严格意义上我们不能说是值传递还是引用传递，我们应该说不可变对象和可变对象。<br>2) 声明函数时，参数中星号 * 可以单独出现，但是星号后的参数必须用关键字传入。</p>\n<h4 id=\"9-3-匿名函数\"><a href=\"#9-3-匿名函数\" class=\"headerlink\" title=\"9.3 匿名函数\"></a>9.3 匿名函数</h4><p>python 使用 lambda 来创建匿名函数，所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。<br>lambda 表达式好处：使得代码更加精简，不需要考虑命名控制，简化代码可读性。</p>\n<p>Q：如何建立一个匿名函数？<br>A :lambda 只是一个表达式，函数体比 def 简单很多。<br>   lambda 函数的语法只包含一个语句，如下：<br>   lambda [arg1 [ ,arg2,…..argn ]]:expression</p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：使用匿名函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#函数定义</span></span><br><span class=\"line\">sum = <span class=\"keyword\">lambda</span> arg1,arg2: arg1 + arg2</span><br><span class=\"line\">sum.__doc__ = <span class=\"string\">'函数文档'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用匿名函数</span></span><br><span class=\"line\">print(<span class=\"string\">\"1 + 99 相加后的值 :\"</span>,sum(<span class=\"number\">1</span>,<span class=\"number\">99</span>))</span><br><span class=\"line\">print(sum.__doc__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进阶用法和BIF内置函数filter/map的使用</span></span><br><span class=\"line\"><span class=\"comment\">#匿名函数进阶 (设置过滤函数，返回可以不可以整除2的数值)</span></span><br><span class=\"line\">show = list(filter(<span class=\"keyword\">lambda</span> x: x % <span class=\"number\">2</span>,range(<span class=\"number\">10</span>)))</span><br><span class=\"line\">print(show)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进行map映射显示被%2整除后的结果。</span></span><br><span class=\"line\">show = list(map(<span class=\"keyword\">lambda</span> x:x % <span class=\"number\">2</span>,range(<span class=\"number\">10</span>)))</span><br><span class=\"line\">print(show)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031909.png\" alt=\"Python字典案例\" title=\"\" class=\"\">\n                <p>Python字典案例</p>\n            </figure></p>\n<p><em>注意事项：</em><br>1) lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。<br>2) lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。<br>3) 虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p>\n<h4 id=\"9-4-函数变量作用域\"><a href=\"#9-4-函数变量作用域\" class=\"headerlink\" title=\"9.4 函数变量作用域\"></a>9.4 函数变量作用域</h4><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的，变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称，作用域一共有4种分别是：</p>\n<ul>\n<li>局部变量（Local Variable），只有在函数内部中进行访问使用。<pre><code>E （Enclosing） 闭包函数外的函数中\n</code></pre></li>\n<li>全局变量（Global Varable）， 在可以在整个程序范围内访问。<pre><code>B （Built-in） 内置作用域（内置函数所在模块的范围）\n</code></pre></li>\n</ul>\n<p>以的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g_count &#x3D; 0  # 全局作用域</span><br><span class=\"line\">def outer():</span><br><span class=\"line\">    o_count &#x3D; 1  # 闭包函数外的函数中</span><br><span class=\"line\">    def inner():</span><br><span class=\"line\">        i_count &#x3D; 2  # 局部作用域</span><br><span class=\"line\">#内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。</span><br></pre></td></tr></table></figure></p>\n<p>如果在函数中修改全局变量便会出现，新建一个与全局变量相同名字的局部变量，并将全局变量的值赋给它，修改得其实是局部变量的值，而全局变量里面的值没有任何更改。</p>\n<p>案例：函数作用域<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#代码功能：全局与局部变量Variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#msg 变量定义在 if 语句块中，但外部还是可以访问的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = <span class=\"string\">\"I am from Weiyigeek\"</span></span><br><span class=\"line\">print(<span class=\"string\">\"\\nmsg 变量定义在 if 语句块中，但外部还是可以访问的:\"</span>,msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discount</span><span class=\"params\">(price,rate)</span>:</span></span><br><span class=\"line\">    final_price = price * rate   <span class=\"comment\">#局部变量</span></span><br><span class=\"line\">   <span class=\"comment\"># print(\"这里试图打印全局变量old_price的值(回报错):\",old_price)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    local_price = <span class=\"number\">100</span>    <span class=\"comment\">#定义在函数中,则它就是局部变量,外部不能访问</span></span><br><span class=\"line\">    print(<span class=\"string\">\"局部变量local_price :\"</span>,local_price)   <span class=\"comment\"># 100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    old_price = <span class=\"number\">50</span></span><br><span class=\"line\">    print(<span class=\"string\">\"函数内修改后old_price的值是1 :\"</span>,old_price)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> final_price</span><br><span class=\"line\"></span><br><span class=\"line\">old_price = float(input(<span class=\"string\">'请输入原价：'</span>))</span><br><span class=\"line\">rate = float(input(<span class=\"string\">'请输入则扣率: '</span>))</span><br><span class=\"line\">new_price = discount(old_price,rate)</span><br><span class=\"line\">print(<span class=\"string\">'函数外修改后的old_price的值是2 :'</span>,old_price)</span><br><span class=\"line\">print(<span class=\"string\">'打折后的价格 :'</span>,new_price)</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031910.png\" alt=\"Python函数作用域案例\" title=\"\" class=\"\">\n                <p>Python函数作用域案例</p>\n            </figure></p>\n<p><em>注意事项：</em><br>1) 尽量不要去在函数中更改全局变量，而且慎用全局变量。<br>2) Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域。<br>3) 其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问。</p>\n<h6 id=\"9-4-1-函数变量作用域关键字\"><a href=\"#9-4-1-函数变量作用域关键字\" class=\"headerlink\" title=\"9.4.1 函数变量作用域关键字\"></a>9.4.1 函数变量作用域关键字</h6><p>描述：Python为了保护全局变量引入了{ 屏蔽(Shadowing) }，当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。</p>\n<blockquote>\n<p>global 和 nonlocal关键字：</p>\n</blockquote>\n<p>global关键字可以在定义的函数中更改全局变量(global variable)，如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了</p>\n<p>案例: 作用域关键字<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：全局变量作用域和非全局作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"global\"\"\"</span></span><br><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> num  <span class=\"comment\"># 需要使用 global 关键字声明</span></span><br><span class=\"line\">    print(<span class=\"string\">\"global:\"</span>,num,end=<span class=\"string\">\",\"</span>) </span><br><span class=\"line\">    num = <span class=\"number\">123</span></span><br><span class=\"line\">    print(num,end=<span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    num += <span class=\"number\">133</span></span><br><span class=\"line\">fun1()</span><br><span class=\"line\">print(num)  </span><br><span class=\"line\"><span class=\"comment\">#global: 1,123,256</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"nonlocal\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outer</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    num = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">nonlocal</span> num   <span class=\"comment\"># nonlocal关键字声明</span></span><br><span class=\"line\">        num = <span class=\"number\">100</span></span><br><span class=\"line\">        print(<span class=\"string\">\"nonlocal:\"</span>,num,end=<span class=\"string\">\" | \"</span>)</span><br><span class=\"line\">        num *= <span class=\"number\">10.24</span></span><br><span class=\"line\">    inner()</span><br><span class=\"line\">    print(num,end=<span class=\"string\">\" | \"</span>)</span><br><span class=\"line\">outer()</span><br><span class=\"line\">print(num)  <span class=\"comment\">#这里的num没有变化由于outer函数中没有使用global关键字</span></span><br><span class=\"line\"><span class=\"comment\">#nonlocal: 100 | 1024.0 | 256</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"9-5-内嵌函数和闭包\"><a href=\"#9-5-内嵌函数和闭包\" class=\"headerlink\" title=\"9.5 内嵌函数和闭包\"></a>9.5 内嵌函数和闭包</h4><p>Python中函数中可以内嵌函数定义与使用，还能在全局变量不适用的时候可以考虑使用闭包更稳定和安全。<br>容器(container),比如前面的所有数组(array)=列表(list)，元组(tuple)</p>\n<p>案例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class=\"line\">#功能：内嵌函数与闭包使用</span><br><span class=\"line\"></span><br><span class=\"line\">#&quot;&quot;&quot; 内嵌函数 &quot;&quot;&quot;</span><br><span class=\"line\">def fun1():</span><br><span class=\"line\">    print(&quot;Fun1 主函数被调用&quot;)</span><br><span class=\"line\">    def fun2():</span><br><span class=\"line\">        print(&quot;Fun2 内嵌函数正在被调用\\n&quot;)</span><br><span class=\"line\">    fun2()  #内部函数（内嵌函数）,只能由fun1()调用</span><br><span class=\"line\"></span><br><span class=\"line\">fun1()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#&quot;&quot;&quot;闭包&quot;&quot;&quot;</span><br><span class=\"line\">def funX(x):</span><br><span class=\"line\">    def funY(y):</span><br><span class=\"line\">        return x * y</span><br><span class=\"line\">    return funY</span><br><span class=\"line\"></span><br><span class=\"line\">i &#x3D; funX(8)</span><br><span class=\"line\">print(&quot;i的类型 :&quot;,type(i))</span><br><span class=\"line\">print(&quot;8 * 5 &#x3D;&quot;,i(5)) #  40 由于前面已经赋值给x了,后面得就给了y&#x3D;5.</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">#类似于：</span><br><span class=\"line\">def funX(x):</span><br><span class=\"line\">    def funY(y):</span><br><span class=\"line\">        return x * y</span><br><span class=\"line\">    return funY(2)</span><br><span class=\"line\">&gt;&gt;&gt; funX(3)</span><br><span class=\"line\">6</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#&quot;&quot;&quot;闭包进阶（采用类似于数数组的方式 -- 列表(传入的是地址)）&quot;&quot;&quot;</span><br><span class=\"line\">def demo1(arg):</span><br><span class=\"line\">    x &#x3D; [arg]</span><br><span class=\"line\">    def demo2():</span><br><span class=\"line\">        #采用 nonlocal 关键字也行</span><br><span class=\"line\">        x[0] **&#x3D; x[0]  #采用这样的方式进行取值列表 (**幂运算) | 不引用局部变量(Local variable),采用数组的方式进行暗渡成仓.</span><br><span class=\"line\">        return x[0]</span><br><span class=\"line\">    return demo2()</span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;2 ** 2 &#x3D;&quot;,demo1(2),&quot;  -  5 ** 5 &#x3D;&quot;,demo1(5))</span><br><span class=\"line\"></span><br><span class=\"line\">#&quot;&quot;&quot;一个闭包的典型案例&quot;&quot;&quot;</span><br><span class=\"line\">def funA():</span><br><span class=\"line\">    x &#x3D; 5</span><br><span class=\"line\">    def funB():</span><br><span class=\"line\">        nonlocal x   #&#x2F;&#x2F;把x强制表示不是局部变量local variable</span><br><span class=\"line\">        x +&#x3D; 13</span><br><span class=\"line\">        return x </span><br><span class=\"line\">    return funB</span><br><span class=\"line\"></span><br><span class=\"line\">a &#x3D; funA()  #当 a 第一次被赋值后,只要没被重新赋值,funA()就没被释放,也就是说局部变量x就没有被重新初始化。</span><br><span class=\"line\">print(&quot;第一次调用：&quot;,a(),&quot;第二次调用：&quot;,a(),&quot;第三次调用：&quot;,a())</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/2019031911.png\" alt=\"Python内嵌函数和闭包\" title=\"\" class=\"\">\n                <p>Python内嵌函数和闭包</p>\n            </figure></p>\n","comments":true,"excerpt":"[TOC]5.数据类型转换数据类型的转换你只需要将数据类型作为函数名即可，还有几个内置函数可以执行数据之间的转换，这些函数返回一个新的对象，表示转换的值；数据类型转换函数列表：<br>int(x [,base = 10])  #将x转换为一个整数类型,或者指定一个进制类型进行转换成为整形(返回整型数据)<br>float(x)              #函数用于将整数和字符串转换成浮点数<br>str(x)    #将对象 x 转换为字符串<br>","categories":[{"name":"Python3","path":"api/categories/Python3.json"}],"tags":[{"name":"编程入门学习","path":"api/tags/编程入门学习.json"}]}