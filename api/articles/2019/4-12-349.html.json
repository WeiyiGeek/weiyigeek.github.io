{"title":"Python3 正则表达式特殊符号及用法.md","slug":"编程世界/RegularExpression/Python正则表达式","date":"2019-04-12T07:36:30.000Z","updated":"2020-10-10T02:37:48.806Z","url":"2019/4-12-349.html","path":"api/articles/2019/4-12-349.html.json","covers":null,"content":"<p>[TOC]</p>\n<p>正则表达式（Regular expressions 也称为 REs,或 regexes 或 regex patterns）本质上是一个微小的且高度专业化的编程语言。<br>它被嵌入到 Python 中并通过 re 模块提供给程序猿使用;而且Python 的正则表达式引擎是用 C 语言写的，所以效率是极高的。<br><a id=\"more\"></a></p>\n<h4 id=\"0x00-Python正则符号分类\"><a href=\"#0x00-Python正则符号分类\" class=\"headerlink\" title=\"0x00 Python正则符号分类\"></a>0x00 Python正则符号分类</h4><p>正则表达式的强大之处在于特殊符号的应用，特殊符号定义了字符集合、子组匹配、模式重复次数。<br>正是这些特殊符号使得一个正则表达式可以匹配字符串集合而不只是一个字符串。</p>\n<h5 id=\"1-元字符\"><a href=\"#1-元字符\" class=\"headerlink\" title=\"1.元字符\"></a>1.元字符</h5><p>下边是元字符的完整列表它们不匹配任何字符,只是简单地表示成功或失败，因此这些字符也称之为零宽断言。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.   ^   $   *   +   ?   &#123; &#125;   [ ]   \\   |   ( )</span><br></pre></td></tr></table></figure></p>\n<p><em>元字符详情解释:</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. <span class=\"comment\">#表示匹配除了换行符外的任何字符注：通过设置 re.DOTALL 标志可以使 . 匹配任何字符（包含换行符）】</span></span><br><span class=\"line\">| <span class=\"comment\">#A | B，表示匹配正则表达式 A 或者 B</span></span><br><span class=\"line\">^ <span class=\"comment\">#匹配字符串的开头 (补充在 [^a-2] 和 [a-z^] 代表不同意思)，设置了 re.MULTILINE 标志，^ 也匹配换行符之后的位置】</span></span><br><span class=\"line\">$ <span class=\"comment\">#匹配字符串的末尾,设置了 re.MULTILINE 标志，$ 也匹配换行符之前的位置】</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\ </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\"> 1. 将一个普通字符变成特殊字符，例如 \\d 表示匹配所有十进制数字 (补充：这是个重点)</span></span><br><span class=\"line\"><span class=\"string\"> 2. 解除元字符的特殊功能，例如 \\. 表示匹配点号本身</span></span><br><span class=\"line\"><span class=\"string\"> 3. 引用序号对应的子组所匹配的字符串</span></span><br><span class=\"line\"><span class=\"string\"> 4.注意，'\\' + 元字符的组合可以解除元字符的特殊功能 (如 \\? = '?')</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...] </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">字符类，匹配所包含的任意一个字符 (补充 [.] 这时.就是一个点)</span></span><br><span class=\"line\"><span class=\"string\">注1：连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符</span></span><br><span class=\"line\"><span class=\"string\">注2：特殊字符仅有反斜线 \\ 保持特殊含义，用于转义字符。其它特殊字符如 *、+、? 等均作为普通字符匹配</span></span><br><span class=\"line\"><span class=\"string\">注3：脱字符 ^ 如果出现在首位则表示匹配不包含其中的任意字符；如果 ^ 出现在字符串中间就仅作为普通字符匹配</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;M,N&#125; </span><br><span class=\"line\"><span class=\"string\">''' M 和 N 均为非负整数，其中 M &lt;= N，表示前边的 RE 匹配 M ~ N 次</span></span><br><span class=\"line\"><span class=\"string\">    注1：&#123;M,&#125; 表示至少匹配 M 次</span></span><br><span class=\"line\"><span class=\"string\">    注2：&#123;,N&#125; 等价于 &#123;0,N&#125;</span></span><br><span class=\"line\"><span class=\"string\">    注3：&#123;N&#125; 表示需要匹配 N 次</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">* <span class=\"comment\">#匹配前面的子表达式零次或多次，等价于 &#123;0,&#125;</span></span><br><span class=\"line\">+ <span class=\"comment\">#匹配前面的子表达式一次或多次，等价于 &#123;1,&#125;】</span></span><br><span class=\"line\">? #匹配前面的子表达式零次或一次，等价于 &#123;0,1&#125;】</span><br><span class=\"line\"></span><br><span class=\"line\">*?, +?, ?? #默认情况下匹配模式是贪婪模式即会尽可能多地匹配符合规则的字符串;.*?、+? 和 ?? 表示启用对应的非贪婪模式。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;M,N&#125;? #同上，启用非贪婪模式，即只匹配 M 次(最小次数)</span><br><span class=\"line\"></span><br><span class=\"line\">(...) <span class=\"comment\">#匹配圆括号中的正则表达式，或者指定一个子组的开始和结束位置注：子组的内容可以在匹配之后被 \\数字 再次引用</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>正则表达式难点在于贪婪模式,元组与自组的匹配;</li>\n</ul>\n<h5 id=\"2-特殊字符\"><a href=\"#2-特殊字符\" class=\"headerlink\" title=\"2.特殊字符\"></a>2.特殊字符</h5><p>下边列举了由字符 ‘\\’ 和另一个字符组成的特殊含义。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\序号   <span class=\"comment\">#重点与难点</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\\1...\\9 #匹配第n个分组的内容</span></span><br><span class=\"line\"><span class=\"string\">1. 引用序号对应的子组所匹配的字符串，子组的序号从 1 开始计算 (会进行细细讲解)</span></span><br><span class=\"line\"><span class=\"string\">2. 如果序号是以 0 开头，或者 3 个数字的长度。那么不会被用于引用对应的子组，而是用于匹配八进制数字所表示的 ASCII 码值对应的字符</span></span><br><span class=\"line\"><span class=\"string\">举个栗子：(.+) \\1 会匹配 \"FishC FishC\" 或 \"55 55\"，但不会匹配 \"FishCFishC\"（注意，因为子组后边还有一个空格）</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\A  <span class=\"comment\">#匹配字符串开始位置</span></span><br><span class=\"line\">\\Z  <span class=\"comment\">#匹配字符串结束位置，如果是存在换行,只匹配到换行前的结束字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\b  <span class=\"comment\">#匹匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。</span></span><br><span class=\"line\">\\B  <span class=\"comment\">#匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\d  <span class=\"comment\">#匹配任意数字，等价于 [0-9]对于 8 位（bytes 类型）模式：匹配 [0-9] 中任何一个数字</span></span><br><span class=\"line\">\\D  <span class=\"comment\">#匹配非数字等价于 [^0-9]其实就是与 \\d 相反</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\s  <span class=\"comment\">#str 类型模式：的空白字符包括 [ \\t\\n\\r\\f\\v] 以及其他空白字符</span></span><br><span class=\"line\">\\S  <span class=\"comment\">#匹配任何非空白字符，其实就是与 \\s 相反;如果开启了 re.ASCII 标志，则相当于匹配 [^ \\t\\n\\r\\f\\v]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\w  <span class=\"comment\">#匹配数字字母下划线 [a-zA-Z0-9_]</span></span><br><span class=\"line\">\\W  <span class=\"comment\">#匹配非数字字母下划线其实就是与 \\w 相反；如果开启了 re.ASCII 标志，则相当于 [^a-zA-Z0-9_]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''转义符号'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">正则表达式还支持大部分 Python 字符串的转义符号：\\a，\\b，\\f，\\n，\\r，\\t，\\u，\\U，\\v，\\x，\\\\</span><br><span class=\"line\">注<span class=\"number\">1</span>：\\b 通常用于匹配一个单词边界，只有在字符类中才表示“退格”</span><br><span class=\"line\">注<span class=\"number\">2</span>：\\u 和 \\U 只有在 Unicode 模式下才会被识别</span><br><span class=\"line\">注<span class=\"number\">3</span>：八进制转义（\\数字）是有限制的，如果第一个数字是 <span class=\"number\">0</span>，或者如果有 <span class=\"number\">3</span> 个八进制数字，那么就被认为是八进制数；其他情况则被认为是子组引用；至于字符串，八进制转义总是最多只能是 <span class=\"number\">3</span> 个数字的长度</span><br></pre></td></tr></table></figure>\n<p>正则基础案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">#正则匹配案例</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########（1）元符号 ################</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'.'</span>,<span class=\"string\">'www.baidu.com'</span>)  <span class=\"comment\">#match='w' #匹配任意一个字符</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'\\.'</span>,<span class=\"string\">'baidu.com'</span>)     <span class=\"comment\">#match='.'</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'[.]'</span>,<span class=\"string\">'baidu.com'</span>)    <span class=\"comment\">#同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.search(<span class=\"string\">r'BAI(C|D)U'</span>,<span class=\"string\">'BAIDU.com'</span>)    <span class=\"comment\"># match='BAIDU'</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.search(<span class=\"string\">r'^Regular'</span>,<span class=\"string\">'Regular Expression'</span>)      <span class=\"comment\"># match='Regular'</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'Expression$'</span>,<span class=\"string\">'Regular Expression'</span>)   <span class=\"comment\"># match='Expression'</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.search(<span class=\"string\">r'[a-z]*'</span>,<span class=\"string\">'love.com'</span>)  <span class=\"comment\"># match='love'</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'[a-z]'</span>,<span class=\"string\">'love.com'</span>)  <span class=\"comment\"># ['l', 'o', 'v', 'e', 'c', 'o', 'm']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.search(<span class=\"string\">r'chat*'</span>,<span class=\"string\">\"Im chatweb\"</span>)      <span class=\"comment\"># 实际建议使用</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'chat&#123;0,&#125;'</span>,<span class=\"string\">\"Im chatweb\"</span>)  <span class=\"comment\"># match='chat'</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'web+'</span>,<span class=\"string\">\"web.web.com\"</span>)     <span class=\"comment\"># 实际建议使用</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'web&#123;1,&#125;'</span>,<span class=\"string\">\"Im chatweb\"</span>)   <span class=\"comment\"># ['web', 'web']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'web?'</span>,<span class=\"string\">\"webchatweb\"</span>)        <span class=\"comment\"># 实际建议使用</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'web&#123;0,1&#125;'</span>,<span class=\"string\">\"webchatweb\"</span>)    <span class=\"comment\"># ['web', 'web']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'(weiyi)&#123;0,2&#125;'</span>,<span class=\"string\">\"weiyi weiyi\"</span>)    <span class=\"comment\"># 配置连续出现两次 ['weiyi', '', 'weiyi', '']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'[\\n]'</span>,<span class=\"string\">\"This is a\\n\"</span>)          <span class=\"comment\"># ['\\n']</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'[^a-z]'</span>,<span class=\"string\">\"weiyigeek.github.io\\n\"</span>)   <span class=\"comment\"># 排除 a-z ['W', 'G', '.', '\\n']</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'[a-z^]'</span>,<span class=\"string\">\"weiyigeek.github.io\\n\"</span>)   <span class=\"comment\"># 排除 A-Z ['e', 'i', 'y', 'i', 'e', 'e', 'k', 'c', 'l', 'u', 'b']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#贪婪模式</span></span><br><span class=\"line\">re.search(<span class=\"string\">r\"&lt;.+&gt;\"</span>,<span class=\"string\">\"&lt;html&gt;&lt;title&gt;我是标题&lt;/title&gt;&lt;/html&gt;\"</span>)  <span class=\"comment\">#match='&lt;html&gt;&lt;title&gt;我是标题&lt;/title&gt;&lt;/html&gt;'</span></span><br><span class=\"line\">re.search(<span class=\"string\">r\"&lt;.+?&gt;\"</span>,<span class=\"string\">\"&lt;html&gt;&lt;title&gt;我是标题&lt;/title&gt;&lt;/html&gt;\"</span>) <span class=\"comment\">#&lt;re.Match object; span=(0, 6), match='&lt;html&gt;'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###########（2）特殊符号 ################</span></span><br><span class=\"line\">re.search(<span class=\"string\">r'\\145'</span>,<span class=\"string\">'12e213llo.com'</span>)         <span class=\"comment\"># &lt;re.Match object; span=(2, 3), match='e'&gt;</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'\\bweiyi\\b'</span>,<span class=\"string\">'www.weiyi.com'</span>)   <span class=\"comment\"># ['weiyi']</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'\\bweiyi\\b'</span>,<span class=\"string\">'www. weiyi_.com'</span>)  <span class=\"comment\">#[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'\\dweiyi\\b'</span>,<span class=\"string\">'1024weiyi.com'</span>)  <span class=\"comment\">#'4weiyi']  #单词边界匹配 weiyi love</span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'\\sweiyi\\b'</span>,<span class=\"string\">'\\tweiyi.com'</span>)    <span class=\"comment\">#['\\tweiyi']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.findall(<span class=\"string\">r'(\\w+) \\1'</span>,<span class=\"string\">'FishC FishC.com'</span>)      <span class=\"comment\">#['FishC']  #注意里面空格的不同 表示匹配两次相同的字符后面是 </span></span><br><span class=\"line\">re.findall(<span class=\"string\">r'(\\w+)\\1'</span>,<span class=\"string\">'FishCFishC.com'</span>)        <span class=\"comment\">#['FishC']</span></span><br><span class=\"line\"></span><br><span class=\"line\">re.search(<span class=\"string\">r'[0-9]&#123;0,3&#125;?'</span>,<span class=\"string\">'123weiyiGeek123.com'</span>)  <span class=\"comment\">#&lt;re.Match object; span=(0, 0), match=''&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>注意\\数字这个模式(支持八进制),与其他元字符连用的时候需要一定的注意</li>\n</ul>\n<h5 id=\"3-分组\"><a href=\"#3-分组\" class=\"headerlink\" title=\"3.分组\"></a>3.分组</h5><p>在正则表达式中，使用元字符 ( ) 来划分组,它们将包含在内部的表达式组合在一起，所以你可以对一个组的内容使用重复操作的元字符*?+等;<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">############################## 重点.START ############################################</span></span><br><span class=\"line\">(?...) #? 开头的表示为正则表达式的扩展语法（下边这些是 Python 支持的所有扩展语法</span><br><span class=\"line\">(?aiLmsux)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">1. (? 后可以紧跟着 'a'，'i'，'L'，'m'，'s'，'u'，'x' 中的一个或多个字符，只能在正则表达式的开头使用</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">2. 每一个字符对应一种匹配标志，包含这些字符将会影响整个正则表达式的规则</span></span><br><span class=\"line\"><span class=\"string\">re-A（只匹配 ASCII 字符），</span></span><br><span class=\"line\"><span class=\"string\">re-I（忽略大小写），</span></span><br><span class=\"line\"><span class=\"string\">re-L（区域设置），本地化识别(local-aware)</span></span><br><span class=\"line\"><span class=\"string\">re-M（多行模式）, </span></span><br><span class=\"line\"><span class=\"string\">re-S（. 匹配任何符号），</span></span><br><span class=\"line\"><span class=\"string\">re-X（详细表达式）</span></span><br><span class=\"line\"><span class=\"string\">re-U (根据Unicode字符集解析字符，该标志影响\\w \\W \\b \\B)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">3. 当你不想通过 re.compile() 设置正则表达式标志这种方法就非常有用啦（注意点）</span></span><br><span class=\"line\"><span class=\"string\">注意，由于 (?x) 决定正则表达式如何被解析，所以它应该总是被放在最前边（最多允许前边有空白符）。</span></span><br><span class=\"line\"><span class=\"string\">如果 (?x) 的前边是非空白字符，那么 (?x) 就发挥不了作用了。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">(?:...)  #非捕获组，即该子组匹配的字符串无法从后边获取(后面会用到)</span><br><span class=\"line\">(?P&lt;name&gt;...)  #命名组,通过组的名字（name）即可访问到子组匹配的字符串 （注意点）</span><br><span class=\"line\">(?P=name)      #反向引用一个命名组，它匹配指定命名组匹配的任何内容</span><br><span class=\"line\">(?#...)    #注释，括号中的内容将被忽略</span><br><span class=\"line\"></span><br><span class=\"line\">(?=...)    </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">前向肯定断言。如果当前包含的正则表达式（这里以 ... 表示）在当前位置成功匹配则代表成功，否则失败。</span></span><br><span class=\"line\"><span class=\"string\">一旦该部分正则表达式被匹配引擎尝试过，就不会继续进行匹配了；剩下的模式在此断言开始的地方继续尝试。</span></span><br><span class=\"line\"><span class=\"string\">'''</span>             </span><br><span class=\"line\">(?!...)   #前向否定断言。这跟前向肯定断言相反（不匹配则表示成功，匹配表示失败）。</span><br><span class=\"line\">(?&lt;=...)  #后向肯定断言。跟前向肯定断言一样，只是方向相反。</span><br><span class=\"line\">(?&lt;!...)  #后向否定断言。跟前向肯定断言一样，只是方向相反。</span><br><span class=\"line\"></span><br><span class=\"line\">(?(id/name)yes-pattern|no-pattern)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t1. 如果子组的序号或名字存在的话，则尝试 yes-pattern 匹配模式；否则尝试 no-pattern 匹配模式</span></span><br><span class=\"line\"><span class=\"string\">    2. no-pattern 是可选的</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举个栗子：love(?=weiyi) 只匹配字符串后边紧跟着 \"weiyi\" 的字符串 \"love\" (括号里面都不会输出,但会进行匹配)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'love(?=weiyi)'</span>,<span class=\"string\">'loveweiyi stusdy'</span>)  <span class=\"comment\">#匹配前</span></span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">4</span>), match=<span class=\"string\">'love'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举个栗子：weiyi(?!\\.com) 只匹配字符串后边不是 \".com\" 的字符串 \"weiyi\" (括号里面都不会输出,但会进行匹配)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'weiyi(?!\\.com)'</span>,<span class=\"string\">'weiyi.club'</span>)  <span class=\"comment\">#匹配前</span></span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">5</span>), match=<span class=\"string\">'weiyi'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举个栗子：(?&lt;=weiyi)\\.com 只匹配字符串前边是 \"weiyi\" 的字符串 \".com\" (括号里面都不会输出,但会进行匹配)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'(?&lt;=weiyi)\\.com'</span>,<span class=\"string\">'weiyi.com'</span>)  <span class=\"comment\">#匹配后</span></span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">5</span>, <span class=\"number\">9</span>), match=<span class=\"string\">'.com'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举个栗子：(?&lt;!weiyi)\\.com 只匹配前边不是 \"weiyi\" 的字符串 \".com\" (括号里面都不会输出,但会进行匹配)</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'(?&lt;!weiyi)\\.com'</span>,<span class=\"string\">'weiyii.com'</span>)   <span class=\"comment\">#匹配后</span></span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">6</span>, <span class=\"number\">10</span>), match=<span class=\"string\">'.com'</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#举个栗子：(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$) 是一个匹配邮件格式的正则表达式，可以匹配 &lt;user@fishc.com&gt; 和 'user@fishc.com'，但是不会匹配 '&lt;user@fishc.com' 或 'user@fishc.com&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$)'</span>,<span class=\"string\">'user@fish.com'</span>)  <span class=\"comment\">#注意前后的(&lt;)(&gt;)</span></span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">13</span>), match=<span class=\"string\">'user@fish.com'</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.search(<span class=\"string\">'(&lt;)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)&gt;|$)'</span>,<span class=\"string\">'&lt;user@fish.com&gt;'</span>)</span><br><span class=\"line\">&lt;re.Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">15</span>), match=<span class=\"string\">'&lt;user@fish.com&gt;'</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"0x01-re模块详解\"><a href=\"#0x01-re模块详解\" class=\"headerlink\" title=\"0x01 re模块详解\"></a>0x01 re模块详解</h4><p>Python 通过 re 模块为正则表达式引擎提供一个接口，同时允许你将正则表达式编译成模式对象，并用它们来进行匹配;re 模块仅仅是作为 C 的扩展模块包含在 Python 中，就像 socket 模块和 zlib 模块;</p>\n<p><em>正则表达式对象 re.RegexObject 与 re.MatchObject:</em></p>\n<ol>\n<li>re.compile() 返回 RegexObject 对象。</li>\n<li>re.match() 和 re.search 返回re.MatchObject对象;<br><br></li>\n</ol>\n<p><em>正则表达式修饰符 - 可选标志(flags)</em><br>描述：可选标志修饰符来控制匹配的模式,另外多个标志还可以同时使用（通过“|”），如：re.I | re.M 就是同时设置 I 和 M 标志。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.I|IGNORECASE\t<span class=\"comment\">#使匹配对大小写不敏感</span></span><br><span class=\"line\">re.L|LOCALE  \t<span class=\"comment\">#做本地化识别（locale-aware）匹配,示特殊字符集 \\w, \\W, \\b, \\B, \\s, \\S 依赖于当前环境</span></span><br><span class=\"line\">re.M|MULTILINE\t<span class=\"comment\">#多行匹配，影响 ^ 和 $</span></span><br><span class=\"line\">re.S|DOTALL\t    <span class=\"comment\">#使得 . 匹配任何符号，包括换行符,这个标志仅对 Unicode 模式有意义，并忽略字节模式。</span></span><br><span class=\"line\">re.A|ASCII      <span class=\"comment\">#使得转义符号如 \\w，\\b，\\s 和 \\d 只能匹配 ASCII 字符,这个标志仅对 Unicode 模式有意义，并忽略字节模式。</span></span><br><span class=\"line\">re.U|UNICODE\t<span class=\"comment\">#根据Unicode字符集解析字符,这个标志影响 \\w, \\W, \\b, \\B.</span></span><br><span class=\"line\">re.X|VERBOSE\t<span class=\"comment\">#使你的正则表达式可以写得更好看和更有条理，因为使用了这个标志，空格会被忽略（除了出现在字符类中和使用反斜杠转义的空格）；这个标志同时允许你在正则表达式字符串中使用注释，</span></span><br><span class=\"line\">                <span class=\"comment\"># 符号后边的内容是注释，不会递交给匹配引擎（除了出现在字符类中和使用反斜杠转义的 #  （后面详解）</span></span><br></pre></td></tr></table></figure></p>\n<p><em>Match匹配对象包含了很多方法和属性：</em><br>start()    返回匹配的开始位置<br>end()    返回匹配的结束位置<br>span()    返回一个元组表示匹配位置（开始，结束）<br>group(num=0)    返回匹配的字符串,输入参数表示提取元组<br>groups()        返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p>\n<p>(1) re.compile(pattern[, flags])： 编译正则表达式如果您需要重复的使用某个表达式的时候使用,生成一个正则表达式（ Pattern ）对象<br>(2) re.match(pattern, string, flags=0)  :扫描整个字符串并返回第一个成功的匹配。 （只匹配一次,成功返回一个匹配的对象，否则返回None）<br>(3) re.search(pattern, string, flags=0)  :遍历字符串，找到正则表达式匹配的第一个位置（只匹配一次,成功返回一个匹配的对象，否则返回None）<br>(4) re.findall(string[, pos[, endpos]]) :遍历字符串（位置点：pos,endpos），找到正则表达式匹配的所有位置，并以列表的形式返回<br>(5) re.findite(pattern, string, flags=0):遍历字符串，找到正则表达式匹配的所有位置，并以迭代器的形式返回<br>(6) re.sub(pattern, repl, string, count=0)：用于替换字符串中的匹配项(repl替换字符/函数,count=替换次数0表全部)<br>(7) re.split(pattern, string[, maxsplit=0, flags=0]) ：匹配的子串将字符串分割后返回列表 | maxsplit分隔次数</p>\n<p><em>re全局函数与re.compile编译正则表达式比较：</em></p>\n<ul>\n<li>程序是大量的使用正则表达式（例如在一个循环中使用）,那么建议你使用后一种方法，因为预编译的话可以节省一些函数调用。</li>\n<li>但如果是在循环外部，由于得益于内部缓存机制,两者效率相差无几。</li>\n</ul>\n<p>案例1：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\">#功能：re 模块基础方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.compile 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">p = re.compile(<span class=\"string\">r'[a-z]+'</span>,re.M|re.I)    <span class=\"comment\">#编译正则表达式 = r'[a-z]&#123;0,&#125;'</span></span><br><span class=\"line\">print(p,p.match(<span class=\"string\">'abcdefg'</span>))   <span class=\"comment\">#返回匹配对象 re.compile('[a-z]+', re.IGNORECASE|re.MULTILINE)  match='abcdefg'</span></span><br><span class=\"line\">print(p.match(<span class=\"string\">'abcdefg'</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>))  <span class=\"comment\">#从'b'的位置开始匹配，匹配两个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.match 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">print(re.match(<span class=\"string\">'www'</span>, <span class=\"string\">'www.weiyigeek.com'</span>).span())  <span class=\"comment\"># 在起始位置匹配  span=(0, 3)</span></span><br><span class=\"line\">print(re.match(<span class=\"string\">'com'</span>, <span class=\"string\">'www.baidu.com'</span>))          <span class=\"comment\"># 不在起始位置匹配 None</span></span><br><span class=\"line\">matchObj = re.match( <span class=\"string\">r'(.*) are (.*?) .*'</span>, <span class=\"string\">\"Cats are smarter than dogs\"</span>, re.M|re.I)  <span class=\"comment\">#任意匹配除换行符（\\n、\\r）之外的字符</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj: <span class=\"comment\">#判断是否为NONE</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"matchObj.group() : \"</span>, matchObj.group())   <span class=\"comment\">#元组的形式 上面整个字符串</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"matchObj.group(1) : \"</span>, matchObj.group(<span class=\"number\">1</span>)) <span class=\"comment\">#匹配的第一个元组 Cats</span></span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"matchObj.group(2) : \"</span>, matchObj.group(<span class=\"number\">2</span>)) <span class=\"comment\"># 匹配的第二元组 smarter</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"keyword\">print</span> (<span class=\"string\">\"No match!!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.search 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">print(re.search(<span class=\"string\">'www'</span>, <span class=\"string\">'www.weiyigeek.com'</span>).span())    <span class=\"comment\"># 在起始位置匹配 (0, 3)</span></span><br><span class=\"line\">print(re.search(<span class=\"string\">'com'</span>, <span class=\"string\">'www.weiyigeek.com'</span>).span())    <span class=\"comment\"># 不在起始位置匹配  （注意这里与上面match的不同） (11, 14)</span></span><br><span class=\"line\">print(re.search(<span class=\"string\">r'\\d+'</span>,<span class=\"string\">'123a456'</span>).group())       <span class=\"comment\"># 返回匹配的字符串 123</span></span><br><span class=\"line\">print(re.search(<span class=\"string\">r'\\d+'</span>,<span class=\"string\">'123a456'</span>).start())       <span class=\"comment\"># 返回0 , end 返回 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.findall 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">p = re.compile(<span class=\"string\">r'\\d+'</span>)</span><br><span class=\"line\">print(p.findall(<span class=\"string\">'3只甲鱼，15条腿，多出的3条在哪里？'</span>)) <span class=\"comment\">#['3', '15', '3']</span></span><br><span class=\"line\">print(p.findall(<span class=\"string\">'run88Weiyi123google456'</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>))   <span class=\"comment\">#['88']  指定查找位置前10个字符</span></span><br><span class=\"line\">print(p.findall(<span class=\"string\">'run88Weiyi123google456'</span>,<span class=\"number\">5</span>))       <span class=\"comment\">#从W开始匹配 ['123', '456']</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.finditer 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">it = re.finditer(<span class=\"string\">r\"\\d+\"</span>,<span class=\"string\">\"12a32bc43jf3\"</span>) </span><br><span class=\"line\"><span class=\"keyword\">for</span> match <span class=\"keyword\">in</span> it: </span><br><span class=\"line\">    <span class=\"keyword\">print</span> (match.group(),end=<span class=\"string\">\" \"</span>)  <span class=\"comment\">#12 32 43 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">iterator = p.finditer(<span class=\"string\">'3只甲鱼,15条腿,多出的3条在哪里？'</span>)</span><br><span class=\"line\">print(iterator)   <span class=\"comment\"># &lt;callable_iterator object at 0x00000250DC49DA20&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> iterator:</span><br><span class=\"line\">    print(each.group(),each.span())</span><br><span class=\"line\"><span class=\"comment\"># 3 (0, 1)</span></span><br><span class=\"line\"><span class=\"comment\"># 15 (5, 7)</span></span><br><span class=\"line\"><span class=\"comment\"># 3 (13, 14)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.sub 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">string = <span class=\"string\">'2004-959-559 # 这是一个电话号码'</span></span><br><span class=\"line\">print(re.sub(<span class=\"string\">r'#.*$'</span>, <span class=\"string\">\"\"</span>, string)) <span class=\"comment\"># 删除注释 2004-959-559</span></span><br><span class=\"line\">print(re.sub(<span class=\"string\">r'\\D'</span>, <span class=\"string\">\"\"</span>, string))  <span class=\"comment\"># 匹配电话号码 2004959559</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">'x*'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(<span class=\"string\">'-'</span>, <span class=\"string\">'abxd'</span>)</span><br><span class=\"line\"><span class=\"string\">'-a-b-d-'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">double</span><span class=\"params\">(matched)</span>:</span>  <span class=\"comment\"># 将匹配的数字乘于 2 （值得学习）</span></span><br><span class=\"line\">    value = int(matched.group(<span class=\"string\">'value'</span>))</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str(value * <span class=\"number\">2</span>)</span><br><span class=\"line\">print(re.sub(<span class=\"string\">'(?P&lt;value&gt;\\d+)'</span>, double, <span class=\"string\">'A23G4HFD567'</span>))  <span class=\"comment\">#采用了分组匹配数字</span></span><br><span class=\"line\"><span class=\"comment\">############# 执行结果 ##################</span></span><br><span class=\"line\"><span class=\"comment\"># 23</span></span><br><span class=\"line\"><span class=\"comment\"># 4</span></span><br><span class=\"line\"><span class=\"comment\"># 567</span></span><br><span class=\"line\"><span class=\"comment\"># A46G8HFD1134</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######## 值得学习 #########</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hexrepl</span><span class=\"params\">(match)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"string\">\"Return the hex string for a decimal number\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    value = int(match.group())</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> hex(value)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">r'\\d+'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(hexrepl, <span class=\"string\">'Call 65490 for printing, 49152 for user code.'</span>)</span><br><span class=\"line\"><span class=\"string\">'Call 0xffd2 for printing, 0xc000 for user code.'</span></span><br><span class=\"line\"><span class=\"comment\">#你需要指定正则表达式标志，那么你必须使用后者；或者使用模式内嵌修正器，例如 sub(\"(?i)b+\", \"x\", \"bbbb BBBB\") 返回 'x x'。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">re.split 案例</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">re.split(<span class=\"string\">'\\,'</span>, <span class=\"string\">'weiyigeek,weiyigeek, weiyigeek.'</span>) <span class=\"comment\">#['weiyigeek', 'weiyigeek', ' weiyigeek.']</span></span><br><span class=\"line\">p = re.compile(<span class=\"string\">r'\\W+'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.split(<span class=\"string\">'This is a test, short and sweet, of split().'</span>)   <span class=\"comment\">#分隔符是任何非字母数字字符：</span></span><br><span class=\"line\">[<span class=\"string\">'This'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'short'</span>, <span class=\"string\">'and'</span>, <span class=\"string\">'sweet'</span>, <span class=\"string\">'of'</span>, <span class=\"string\">'split'</span>, <span class=\"string\">''</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果使用了捕获组，那么作为分隔符的值也会被返回：</span></span><br><span class=\"line\">p2 = re.compile(<span class=\"string\">r'(\\W+)'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p2.split(<span class=\"string\">'This... is a test.'</span>)</span><br><span class=\"line\">[<span class=\"string\">'This'</span>, <span class=\"string\">'... '</span>, <span class=\"string\">'is'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'a'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'test'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">''</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####补充比较 match / search ###</span></span><br><span class=\"line\"><span class=\"comment\">#match() 函数只会检查 RE 是否在字符串的开始处匹配，而 search() 会遍历整个字符串搜索匹配的内容</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(re.match(<span class=\"string\">'super'</span>, <span class=\"string\">'superstition'</span>).span())</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(re.match(<span class=\"string\">'super'</span>, <span class=\"string\">'insuperable'</span>))</span><br><span class=\"line\"><span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(re.search(<span class=\"string\">'super'</span>, <span class=\"string\">'superstition'</span>).span())</span><br><span class=\"line\">(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(re.search(<span class=\"string\">'super'</span>, <span class=\"string\">'insuperable'</span>).span())</span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">7</span>)</span><br></pre></td></tr></table></figure></p>\n<p><em>补充：</em></p>\n<ul>\n<li>没有任何匹配的话 match() 和 search() 会返回 None,否则返回一个匹配对象match object</li>\n<li>re.match与re.search的区别,前者只匹配字符串的开始,后者匹配整个字符串直到找到一个匹配。</li>\n<li>如果列表很大那么使用返回迭代器的效率要高很多</li>\n</ul>\n<p>为了匹配反斜杠这个字符，我们需要在字符串中使用四个反斜杠才行。所以在正则表达式中频繁地使用反斜杠,会造成反斜杠风暴，进而导致你的字符串极其难懂,强烈建议使用原始字符串来表达正则表达式。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正则字符串\t原始字符串(推荐)</span><br><span class=\"line\"><span class=\"string\">\"ab*\"</span>\t        <span class=\"string\">r\"ab*\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\\\\\\\section\"</span>\t<span class=\"string\">r\"\\\\section\"</span></span><br><span class=\"line\"><span class=\"string\">\"\\\\w+\\\\s+\\\\1\"</span>\t<span class=\"string\">r\"\\w+\\s+\\1\"</span></span><br></pre></td></tr></table></figure></p>\n<p>在这些 REs 中，当编译正则表达式时指定 re.VERBOSE 标志是非常有帮助的。因为它允许你可以编辑正则表达式的格式，使之更清楚。<br>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#使用和没有使用re.VERBOSE之间的对比</span></span><br><span class=\"line\">charref = re.compile(<span class=\"string\">r\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"> &amp;[#]                # 开始数字引用</span></span><br><span class=\"line\"><span class=\"string\"> (</span></span><br><span class=\"line\"><span class=\"string\">     0[0-7]+         # 八进制格式</span></span><br><span class=\"line\"><span class=\"string\">   | [0-9]+          # 十进制格式</span></span><br><span class=\"line\"><span class=\"string\">   | x[0-9a-fA-F]+   # 十六进制格式</span></span><br><span class=\"line\"><span class=\"string\"> )</span></span><br><span class=\"line\"><span class=\"string\"> ;                   # 结尾分号</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span>, re.VERBOSE)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#没有设置 VERBOSE 标志</span></span><br><span class=\"line\">charref = re.compile(<span class=\"string\">\"&amp;#(0[0-7]+|[0-9]+|x[0-9a-fA-F]+);\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pat = re.compile(<span class=\"string\">r\"\"\"</span></span><br><span class=\"line\"><span class=\"string\"> \\s*                             # Skip leading whitespace</span></span><br><span class=\"line\"><span class=\"string\"> (?P&lt;header&gt;[^:]+)   # Header name</span></span><br><span class=\"line\"><span class=\"string\"> \\s* :                           # Whitespace, and a colon</span></span><br><span class=\"line\"><span class=\"string\"> (?P&lt;value&gt;.*?)          # The header's value -- *? used to</span></span><br><span class=\"line\"><span class=\"string\">                                  # lose the following trailing whitespace</span></span><br><span class=\"line\"><span class=\"string\"> \\s*$                           # Trailing whitespace to end-of-line</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span>, re.VERBOSE)</span><br><span class=\"line\"><span class=\"comment\"># 同样的内容，下边这个要难读得多：</span></span><br><span class=\"line\">pat = re.compile(<span class=\"string\">r\"\\s*(?P&lt;header&gt;[^:]+)\\s*:(?P&lt;value&gt;.*?)\\s*$\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"0x02-分组-重点难点\"><a href=\"#0x02-分组-重点难点\" class=\"headerlink\" title=\"0x02 分组 (重点难点)\"></a>0x02 分组 (重点难点)</h4><p>描述：分组显示的方法</p>\n<ul>\n<li>group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；</li>\n<li>start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li>\n<li>end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li>\n<li>span([group]) 方法返回 (start(group), end(group))。</li>\n</ul>\n<p>案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\">#分组案例：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#案例1：</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pattern = re.compile(<span class=\"string\">r'([a-z]+) ([a-z]+)'</span>, re.I)   <span class=\"comment\"># re.I 表示忽略大小写</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = pattern.match(<span class=\"string\">'Hello World Wide Web'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> m                               <span class=\"comment\"># 匹配成功，返回一个 Match 对象 &lt;_sre.SRE_Match object at 0x10bea83e8&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)                            <span class=\"comment\"># 返回匹配成功的整个子串 'Hello World'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.span(<span class=\"number\">0</span>)                             <span class=\"comment\"># 返回匹配成功的整个子串的索引 (0, 11)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)                            <span class=\"comment\"># 返回第一个分组匹配成功的子串 'Hello'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.span(<span class=\"number\">1</span>)                             <span class=\"comment\"># 返回第一个分组匹配成功的子串的索引  (0, 5)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">2</span>)                            <span class=\"comment\"># 返回第二个分组匹配成功的子串 'World'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.span(<span class=\"number\">2</span>)                             <span class=\"comment\"># 返回第二个分组匹配成功的子串  (6, 11)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.groups()                            <span class=\"comment\"># 等价于 (m.group(1), m.group(2), ...) ('Hello', 'World')</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">3</span>)                            <span class=\"comment\"># 不存在第三个分组  IndexError: no such group</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#案例2：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">'(a)b'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = p.match(<span class=\"string\">'ab'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group()  <span class=\"comment\">#'ab'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)  <span class=\"string\">'ab'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)  <span class=\"string\">'a'</span>  <span class=\"comment\">#显示元组本身字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 子组的索引值是从左到右进行编号，子组也允许嵌套，因此我们可以通过从左往右来统计左括号 ( 来确定子组的序号。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">'(a(b)c)d'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = p.match(<span class=\"string\">'abcd'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"string\">'abcd'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"comment\">#该方法可以一次传入多个子组的序号</span></span><br><span class=\"line\">(<span class=\"string\">'b'</span>, <span class=\"string\">'abc'</span>, <span class=\"string\">'abcd'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>1.非捕获组和命名组</strong></p>\n<p>它们都使用了一个公共的正则表达式扩展语法;精心设计的正则表达式可能会划分很多组，这些组不仅可以匹配相关的子串，还能够对正则表达式本身进行分组和结构化。</p>\n<p>产生原因：复杂的正则表达式中，由于有太多的组因此通过组的序号来跟踪和使用会变得困难。</p>\n<p>正则表达式的(?…)扩展语法：</p>\n<ul>\n<li>问号 ? 紧跟在左小括号 ( 后边，本身是一个语法错误的写法，因为 ? 前边没有东西可以重复，所以这样就解决了兼容性的问题（理由是语法正确的正则表达式肯定不会这么写嘛~）。</li>\n<li>然后紧跟在 ? 后边的字符则表示哪些扩展语法会被使用。例如 (?=foo) 表示一种新的扩展功能（前向断言），(?:foo) 则表示另一种扩展功能（一个包含子串 foo 的非捕获组）。</li>\n</ul>\n<p><em>非捕获组:</em><br>“捕获”就是匹配的意思啦，普通的子组都是捕获组，因为它们能从字符串中匹配到数据。<br>非捕获组案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = re.match(<span class=\"string\">\"([abc])+\"</span>, <span class=\"string\">\"abc\"</span>)  <span class=\"comment\">#捕获组 </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.groups()</span><br><span class=\"line\">(<span class=\"string\">'c'</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = re.match(<span class=\"string\">\"(?:[abc])+\"</span>, <span class=\"string\">\"abc\"</span>) <span class=\"comment\">#非捕获组   #&lt;re.Match object; span=(0, 3), match='abc'&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.groups()</span><br><span class=\"line\">()</span><br></pre></td></tr></table></figure><br>除了你不能从非捕获组获得匹配的内容之外，其他的非捕获组跟普通子组没有什么区别了。你可以在里边放任何东西，使用重复功能的元字符，或者跟其他子组进行嵌套（捕获的或者非捕获的子组都可以）。<br>当你需要修改一个现有的模式的时候，(?:…) 是非常有用的。原始是添加一个非捕获组并不会影响到其他（捕获）组的序号。值得一提的是，在搜索的速度上，捕获组和非捕获组的速度是没有任何区别的。</p>\n<p><em>命名组:</em><br>普通子组我们使用序列来访问它们，命名组则可以使用一个有意义的名字来进行访问。<br>命名组的语法是 Python 特有的扩展语法：(?P<name>)。很明显&lt; &gt; 里边的 name 就是命名组的名字啦。命名组除了有一个名字标识之外，跟其他捕获组是一样的。</p>\n<p>命名组案例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">r'(?P&lt;word&gt;\\b\\w+\\b)'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m = p.search( <span class=\"string\">'(((( Lots of punctuation )))'</span> )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"string\">'word'</span>)   <span class=\"comment\">#采用命名组关键字来访问</span></span><br><span class=\"line\"><span class=\"string\">'Lots'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>m.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'Lots'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#比如下面的案例使用了命名组, 很明显，使用 m.group('zonem') 访问匹配内容要比使用数字 9 更简单明了。</span></span><br><span class=\"line\">InternalDate = re.compile(<span class=\"string\">r'INTERNALDATE \"'</span></span><br><span class=\"line\">        <span class=\"string\">r'(?P&lt;day&gt;[ 123][0-9])-(?P&lt;mon&gt;[A-Z][a-z][a-z])-'</span></span><br><span class=\"line\">        <span class=\"string\">r'(?P&lt;year&gt;[0-9][0-9][0-9][0-9])'</span></span><br><span class=\"line\">        <span class=\"string\">r'(?P&lt;hour&gt;[0-9][0-9]):(?P&lt;min&gt;[0-9][0-9]):(?P&lt;sec&gt;[0-9][0-9])'</span></span><br><span class=\"line\">        <span class=\"string\">r'(?P&lt;zonen&gt;[-+])(?P&lt;zoneh&gt;[0-9][0-9])(?P&lt;zonem&gt;[0-9][0-9])'</span></span><br><span class=\"line\">        <span class=\"string\">r'\"'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#正则表达式中，反向引用的语法像 (...)\\1 是使用序号的方式来访问子组；在命名组里，显然也是有对应的变体：使用名字来代替序号。其扩展语法是 (?P=name)，</span></span><br><span class=\"line\"><span class=\"comment\">#含义是该 name 指向的组需要在当前位置再次引用。那么搜索两个单词的正则表达式可以写成 (\\b\\w+)\\s+\\1，也可以写成 (?P&lt;word&gt;\\b\\w+)\\s+(?P=word)：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">r'(?P&lt;word&gt;\\b\\w+)\\s+(?P=word)'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.search(<span class=\"string\">'Paris in the the spring'</span>).group()</span><br><span class=\"line\"><span class=\"string\">'the the'</span></span><br></pre></td></tr></table></figure><br><br><br><strong>2.分组进阶高级前向断言</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#需求与问题解决</span></span><br><span class=\"line\">.*[.].*$  <span class=\"comment\">#$ 确保字符串剩余的部分都包含在扩展名中。</span></span><br><span class=\"line\"><span class=\"comment\">#所以这个正则表达式可以匹配 fishc.txt，foo.bar，autoexec.bat，sendmail.cf，printers.conf 等。</span></span><br><span class=\"line\">.*[.][^b].*$ <span class=\"comment\"># 这里为了排除 bat，我们先尝试排除扩展名的第一个字符为非 b。但这是错误的开始，因为 foo.bar 后缀名的第一个字符也是 b。</span></span><br><span class=\"line\">.*[.]([^b]..|.[^a].|..[^t])$ <span class=\"comment\">#改进,这样正好可以接受 foo.bar，排除 autoexec.bat。但问题又来了，这样的正则表达式要求扩展名必须是三个字符，比如 sendmail.cf 就会被排除掉。</span></span><br><span class=\"line\">.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$ # 在第三次尝试中，我们让第二个和第三个字符变成可选的。这样就可以匹配稍短的扩展名，比如 sendmail.cf。</span><br><span class=\"line\"></span><br><span class=\"line\">.*[.](?!bat$).*$  #一个前向否定断言就可以解决你的难题</span><br><span class=\"line\">.*[.](?!bat$|exe$).*$  #有了前向否定断言，要同时排除 bat 和 exe 扩展名，也变得相当容易</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将匹配被 &#123; 和 &#125; 括起来的单词 section，并将 section 替换成 subsection：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">'section&#123; ( [^&#125;]* ) &#125;'</span>, re.VERBOSE) <span class=\"comment\">#将匹配到的元组进行切换</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(<span class=\"string\">r'subsection&#123;\\1&#125;'</span>,<span class=\"string\">'section&#123;First&#125; section&#123;second&#125;'</span>)</span><br><span class=\"line\"><span class=\"string\">'subsection&#123;First&#125; subsection&#123;second&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#1. 大家还记得吗？这里开启了 re.VERBOSE，空格将被忽略。因为这里一堆符号，用空格隔开看着才不会乱糟糟的......2. 这里 r'subsection&#123;\\1&#125;' 使用 \\1 引用匹配模式中的 ([^&#125;]*) 匹配的字符串内容。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用 Python 的扩展语法 (?P&lt;name&gt;...) 指定命名组，引用命名组的语法是 \\g&lt;name&gt;。\\g&lt;name&gt; 会将名字为 name 的组匹配的字符串替换进去。另外，\\g&lt;数字&gt; 是通过组的序号进行引用。</span></span><br><span class=\"line\"><span class=\"comment\">#\\g&lt;2&gt; 其实就相当于 \\2，但我们更提倡使用 \\g&lt;2&gt;，因为这样可以避免歧义。例如，\\g&lt;2&gt;0 的含义是引用序号为 2 的组，然后后边匹配一个字符 '0'，而你写成 \\20 就会被认为是引用序号为 20 的组了。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p = re.compile(<span class=\"string\">'section&#123; (?P&lt;name&gt; [^&#125;]* ) &#125;'</span>, re.VERBOSE)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(<span class=\"string\">r'subsection&#123;\\1&#125;'</span>,<span class=\"string\">'section&#123;First&#125;'</span>)  <span class=\"comment\">#这里\\20 表示分组(20) 而使用\\g&lt;2&gt;0 表示序号为2的组</span></span><br><span class=\"line\"><span class=\"string\">'subsection&#123;First&#125;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(<span class=\"string\">r'subsection&#123;\\g&lt;1&gt;&#125;'</span>,<span class=\"string\">'section&#123;First&#125;'</span>)  <span class=\"comment\">#关键点(分组1)</span></span><br><span class=\"line\"><span class=\"string\">'subsection&#123;First&#125;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>p.sub(<span class=\"string\">r'subsection&#123;\\g&lt;name&gt;&#125;'</span>,<span class=\"string\">'section&#123;First&#125;'</span>)</span><br><span class=\"line\"><span class=\"string\">'subsection&#123;First&#125;'</span></span><br></pre></td></tr></table></figure></p>\n<p><em>补充提示：</em></p>\n<ul>\n<li>有几对小括号就是分成了几个子组，例如 (a)(b) 和 (a(b)) 都是由两个子组构成的。</li>\n<li>Python 的字符串中会使用反斜杠加数字的方式来表示数字的值对应的 ASCII 字符，所以在使用反向索引的正则表达式中，我们依然强调要使用原始字符串。</li>\n<li>反向引用指的是你可以在后面的位置使用先前匹配过的内容，用法是反斜杠加上数字。例如 \\1 表示引用前边成功匹配的序号为 1 的子组。</li>\n</ul>\n<h4 id=\"0x03-常用正则表达式\"><a href=\"#0x03-常用正则表达式\" class=\"headerlink\" title=\"0x03 常用正则表达式\"></a>0x03 常用正则表达式</h4>","comments":true,"excerpt":"[TOC]正则表达式（Regular expressions 也称为 REs,或 regexes 或 regex patterns）本质上是一个微小的且高度专业化的编程语言。<br>它被嵌入到 Python 中并通过 re 模块提供给程序猿使用;而且Python 的正则表达式引擎是用 C 语言写的，所以效率是极高的。<br>","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"RegularExpression","path":"api/tags/RegularExpression.json"},{"name":"Python3","path":"api/tags/Python3.json"}]}