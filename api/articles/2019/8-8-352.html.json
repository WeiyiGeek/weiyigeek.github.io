{"title":"正则表达式介绍与使用","slug":"编程世界/TemplateSyntax/Go模板引擎基础入门使用","date":"2019-08-08T06:36:30.000Z","updated":"2020-10-10T02:37:48.866Z","url":"2019/8-8-352.html","path":"api/articles/2019/8-8-352.html.json","covers":null,"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x00-前言简述\"><a href=\"#0x00-前言简述\" class=\"headerlink\" title=\"0x00 前言简述\"></a>0x00 前言简述</h4><p>Q: 什么是模板?<br>答: MVC 框架（Model View Controller）： Model（模型，通常在服务端）用于处理数据、View（视图，客户端代码）用于展现结果、Controller（控制器）用于控制数据流，确保 M(模型改变) 和 V(视图) 的同步，即一旦 M 改变，V 也应该同步更新。</p>\n<p>常常对于 View 端的处理，在很多动态语言中是通过在静态 HTML 代码中插入动态数据来实现的。由于最终展示给用户的信息大部分是静态不变的，只有少部分数据会根据用户的不同而动态生成, 所以<code>将静态信息固化为模板可以复用代码，提高展示效率</code>;<br>例如：JSP 的 <code>&lt;%=....=%&gt; 和 PHP 的 &lt;?php.....?&gt;</code>语法。</p>\n<p>Go语言提供了简单灵活的模板支持，而基于 Go 开发的 Docker 继承了该强大能力，使其可以脱离 Shell 的相关操作，直接对结果进行格式化输出。<br>比如，对于 docker ls 的输出信息会根据附加参数的不同而不同，但其表头信息是固定的, 并且所有支持 –format 扩展的 <code>Docker CLI 指令</code>以及<code>kubectl查看相关命令</code>均支持该操作。</p>\n<hr>\n<h4 id=\"0x01-基础语法\"><a href=\"#0x01-基础语法\" class=\"headerlink\" title=\"0x01 基础语法\"></a>0x01 基础语法</h4><p>描述: 下面列举出Go模板的常用用法并进行简单的演示;</p>\n<h5 id=\"1-注释\"><a href=\"#1-注释\" class=\"headerlink\" title=\"1.注释\"></a>1.注释</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式： `&#123;&#123;/*注释内容*/&#125;&#125;`</span></span><br><span class=\"line\">docker inspect --format=<span class=\"string\">'&#123;&#123;/*查看容器的默认网关*/&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\">docker inspect --format=<span class=\"string\">'&#123;&#123;/*查看容器的默认网关*/&#125;&#125;&#123;&#123;.NetworkSettings.Networks.opt_default.Gateway&#125;&#125;'</span> dc1</span><br><span class=\"line\"><span class=\"comment\">#172.18.0.1</span></span><br></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"2-打印信息\"><a href=\"#2-打印信息\" class=\"headerlink\" title=\"2.打印信息\"></a>2.打印信息</h5><p>描述: Go template 中利用 go 语言的 <code>print 函数</code>对模板中的字符串进行输出, go中还包括两种相似println 和 printf等内置函数。</p>\n<ul>\n<li>print： 将传入的对象转换为字符串并写入到标准输出中。如果后跟多个参数，输出结果之间会自动填充空格进行分隔。</li>\n<li>println:功能和 print 类似，但会在结尾添加一个换行符。也可以直接使用 <code></code> 来换行。</li>\n<li>printf: 与 shell 等环境一致，可配合占位符用于格式化输出。</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.State.Pid&#125;&#125; &#123;&#123;.State.ExitCode&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\"><span class=\"comment\"># 24039 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;print .State.Pid .State.ExitCode&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\"><span class=\"comment\"># 24039 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例3</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.State.Pid&#125;&#125;&#123;&#123;println&#125;&#125;&#123;&#123;/*println 表示换行*/&#125;&#125;&#123;&#123;.State.ExitCode&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\"><span class=\"comment\"># 15516</span></span><br><span class=\"line\"><span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例7</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;printf \"Pid:%d ExitCode:%d\" .State.Pid .State.ExitCode&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\"><span class=\"comment\"># Pid:24039 ExitCode:0</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"3-变量\"><a href=\"#3-变量\" class=\"headerlink\" title=\"3.变量\"></a>3.变量</h5><p><strong>系统变量</strong><br>描述:通过下面的符号组合获取当前对象,因为点号表示当前对象及上下文，和 Java、C++ 中的 this 类似，另外如果返回结果也是一个 <code>Struct 对象（Json 中以花括号/大括号包含）</code>，则可以直接通过点号级联调用，获取子对象的指定属性值。</p>\n<p>注意： 如果需要获取的属性名称包含点号（比如下列示例数据）或者以数字开头，则不能直接通过级联调用获取信息。因为属性名称中的点号会被解析成级联信息，进而导致返回错误结果。即便使用引号将其包含也会提示语法格式错误。此时，需要通过 index 来读取指定属性信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  组合:`&#123;&#123;.&#125;&#125;`</span></span><br><span class=\"line\"><span class=\"string\">\"Options\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.bridge.default_bridge\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.bridge.enable_icc\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.bridge.enable_ip_masquerade\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.bridge.host_binding_ipv4\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.bridge.name\"</span>: <span class=\"string\">\"docker0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.docker.network.driver.mtu\"</span>: <span class=\"string\">\"1500\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1、可以通过级联调用直接读取子对象 State 的 Status 属性，以获取容器的状态信息：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;/*读取容器状态*/&#125;&#125;&#123;&#123;.State.Status&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2、直接级联调用会提示找不到数据：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.Options.com.docker.network.driver.mtu&#125;&#125;'</span> bridge</span><br><span class=\"line\">&lt;no value&gt;</span><br><span class=\"line\"><span class=\"comment\"># 用引号括起来会提示语法错误：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.Options.\"com.docker.network.driver.mtu\"&#125;&#125;'</span> bridge</span><br><span class=\"line\">Template parsing error: template: :1: bad character U+0022 <span class=\"string\">'\"'</span></span><br><span class=\"line\"><span class=\"comment\"># 正确的用法，必须用 index 读取指定属性名称的属性值：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;/*读取网络在hosts上的名称*/&#125;&#125;&#123;&#123;index .Options \"com.docker.network.bridge.name\"&#125;&#125;'</span> bridge</span><br><span class=\"line\">docker0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><strong>自定义变量</strong><br>描述:可以在处理过程中设置自定义变量，然后结合自定义变量做更复杂的处理。如果自定义变量的返回值是对象，则可以通过点号进一步级联访问其属性。比如 。</p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.结合变量的使用，对输出结果进行组装展现，以输出容器的所有绑定端口列表：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.NetworkSettings.Ports&#125;&#125;'</span> dc1</span><br><span class=\"line\"><span class=\"comment\"># map[80/tcp:[&#123;0.0.0.0 8081&#125;]]</span></span><br><span class=\"line\"><span class=\"comment\"># \"Ports\": &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   \"80/tcp\": [</span></span><br><span class=\"line\"><span class=\"comment\">#       &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#           \"HostIp\": \"0.0.0.0\",</span></span><br><span class=\"line\"><span class=\"comment\">#           \"HostPort\": \"8081\"</span></span><br><span class=\"line\"><span class=\"comment\">#       &#125;</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;/*通过变量组合展示容器绑定端口列表*/&#125;&#125;已绑定端口列表：&#123;&#123;println&#125;&#125;&#123;&#123;range $p,$conf := .NetworkSettings.Ports&#125;&#125;&#123;&#123;$p&#125;&#125; -&gt; &#123;&#123;(index $conf 0).HostPort&#125;&#125;&#123;&#123;println&#125;&#125;&#123;&#123;end&#125;&#125;'</span> dc1  <span class=\"comment\">#注意Index指令与range结合</span></span><br><span class=\"line\"><span class=\"comment\"># 示例输出信息</span></span><br><span class=\"line\">已绑定端口列表：</span><br><span class=\"line\">80/tcp -&gt; 32770</span><br><span class=\"line\">8081/tcp -&gt; 8081</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"4-索引\"><a href=\"#4-索引\" class=\"headerlink\" title=\"4.索引\"></a>4.索引</h5><p>描述:如果返回结果是一个 <code>map, slice, array 或 string</code>，则可以使用 index 加索引序号（从零开始计数）来读取属性值。</p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker inspect $INSTANCE_ID 查看容器绑定的端口信息，其 Config 属性就是一个 Map，包含了所有子网信息。</span></span><br><span class=\"line\">...</span><br><span class=\"line\"> <span class=\"string\">\"IPAM\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"Driver\"</span>: <span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Options\"</span>: null,</span><br><span class=\"line\">            <span class=\"string\">\"Config\"</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"Subnet\"</span>: <span class=\"string\">\"172.31.254.1/24\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Gateway\"</span>: <span class=\"string\">\"172.31.254.1\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;,    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"Ports\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"80/tcp\"</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"string\">\"HostIp\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"HostPort\"</span>: <span class=\"string\">\"8081\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例1.通过索引序号读取默认网关</span></span><br><span class=\"line\">docker inspect bridge --format <span class=\"string\">'&#123;&#123;/*查看网络的默认网关*/&#125;&#125;&#123;&#123;(index .IPAM.Config 0).Gateway&#125;&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.通过索引序号读取主机映射端口</span></span><br><span class=\"line\">docker inspect dc1 --format <span class=\"string\">'&#123;&#123;/*查看主机映射端口*/&#125;&#125;&#123;&#123;(index .NetworkSettings.Ports \"80/tcp\" 0).HostPort&#125;&#125;'</span> <span class=\"comment\">#注意:带有数字或者点号的对象必须用\"\"将其包括</span></span><br><span class=\"line\">8081</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"5-条件判断\"><a href=\"#5-条件判断\" class=\"headerlink\" title=\"5.条件判断\"></a>5.条件判断</h5><p>描述: 与其他一些编程语言一样，利用基本判断和<code>if .. else .. end</code>以及判断条件进行组合判断；</p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断条件</span></span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">if</span> pipeline&#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">if</span> pipeline&#125;&#125;&#123;&#123;<span class=\"keyword\">else</span>&#125;&#125;&#123;&#123;<span class=\"keyword\">if</span> pipeline&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;end&#125;&#125; <span class=\"comment\"># 内部嵌套判断</span></span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">if</span> pipeline&#125;&#125;&#123;&#123;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> pipeline&#125;&#125;&#123;&#123;<span class=\"keyword\">else</span>&#125;&#125;&#123;&#123;end&#125;&#125;   <span class=\"comment\"># 多层判断</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础判断</span></span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">if</span> not .State.Restarting&#125;&#125;&#123;&#123;/*条件为真执行*/&#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class=\"line\">&#123;&#123;or .State.Status .State.Restarting&#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"keyword\">if</span> 判断条件 .Var1 .Var2&#125;&#125;&#123;&#123;/*为真时候执行*/&#125;&#125;&#123;&#123;<span class=\"keyword\">else</span>&#125;&#125;&#123;&#123;/*为假时候执行*/&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基础判断说明:</p>\n<ul>\n<li><p>1)  not: 返回单一参数的布尔否定值，即返回输入参数的否定值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果容器的 restarting 设置为 false，则返回信息“容器没有配置重启策略”</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;if not .State.Restarting&#125;&#125;容器没有配置重启策略&#123;&#123;end&#125;&#125;'</span> $(docker ps -q)</span><br><span class=\"line\">容器没有配置重启策略</span><br><span class=\"line\">容器没有配置重启策略</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2) or: 除了 null（空）和 false 被识别为 false，其它值（字符串、数字、对象等）均被识别为 true。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `&#123;&#123;or x y&#125;&#125;`: 表示如果 x 为真返回 x，否则返回 y。</span><br><span class=\"line\">- `&#123;&#123;or x y z&#125;&#125;`：后面跟多个参数时会逐一判断每个参数，并返回第一个非空的参数。`如果都为 <span class=\"literal\">false</span>，则返回最后一个参数`。</span><br><span class=\"line\"></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;or .State.Status .State.Restarting&#125;&#125;'</span> $(docker ps -q)</span><br><span class=\"line\"><span class=\"comment\"># running</span></span><br><span class=\"line\"><span class=\"comment\"># running</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3) 判断方式:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1)  eq: 相等，即 arg1 == arg2。比较特殊的是，它支持多个参数进行与比较，此时它会将第一个参数和其余参数依次比较，返回下式的结果：</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#123;if eq true .Var1 .Var2 .Var3&#125;&#125;&#123;&#123;end&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 效果等同于：</span></span><br><span class=\"line\"><span class=\"comment\"># arg1==arg2 || arg1==arg3 || arg1==arg4 ...</span></span><br><span class=\"line\">2) ne: 不等，即 arg1 != arg2。</span><br><span class=\"line\">3) lt: 小于，即 arg1 &lt; arg2。</span><br><span class=\"line\">4) le: 小于等于，即 arg1 &lt;= arg2。</span><br><span class=\"line\">5) gt: 大于，即 arg1 &gt; arg2。</span><br><span class=\"line\">6) ge: 大于等于，即 arg1 &gt;= arg2。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.输出所有非正常已停止的容器名称：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;if ne 0 .State.ExitCode&#125;&#125;非正常停止的容器:&#123;&#123;.Name&#125;&#125;&#123;&#123;end&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># 非正常停止的容器:/unruffled_bhabha</span></span><br><span class=\"line\"><span class=\"comment\"># 非正常停止的容器:/intelligent_borg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例2.判断容器是否在运行之中</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;if ne \"exited\" .State.Status&#125;&#125;&#123;&#123;.Name&#125;&#125; 运行中&#123;&#123;else&#125;&#125;&#123;&#123;.Name&#125;&#125;  已停止&#123;&#123;end&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># /data-volume-1  已停止</span></span><br><span class=\"line\"><span class=\"comment\"># /unruffled_bhabha  已停止</span></span><br><span class=\"line\"><span class=\"comment\"># /intelligent_borg  已停止</span></span><br><span class=\"line\"><span class=\"comment\"># /test1 运行中</span></span><br><span class=\"line\"><span class=\"comment\"># /ldap-account-manager 运行中</span></span><br><span class=\"line\"><span class=\"comment\"># /phpldapadmin  已停止</span></span><br><span class=\"line\"><span class=\"comment\"># /openldap  已停止</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;if not .State.Running&#125;&#125;&#123;&#123;.Name&#125;&#125;&#123;&#123;else if .&#125;&#125;该容器&#123;&#123;.Name&#125;&#125;还在运行&#123;&#123;end&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># /data-volume-1</span></span><br><span class=\"line\"><span class=\"comment\"># /unruffled_bhabha</span></span><br><span class=\"line\"><span class=\"comment\"># /intelligent_borg</span></span><br><span class=\"line\"><span class=\"comment\"># 该容器/test1还在运行</span></span><br><span class=\"line\"><span class=\"comment\"># 该容器/ldap-account-manager还在运行</span></span><br><span class=\"line\"><span class=\"comment\"># /phpldapadmin</span></span><br><span class=\"line\"><span class=\"comment\"># /openldap</span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 示例3.输出所有已停止或配置了 Restarting 策略的容器名称</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;if eq \"exited\" .State.Status&#125;&#125;&#123;&#123;.Name&#125;&#125;&#123;&#123;else if eq .State.Restarting true&#125;&#125;容器&#123;&#123;.Name&#125;&#125;配置了Restarting策略.&#123;&#123;else&#125;&#125;容器&#123;&#123;.Name&#125;&#125;正在运行，但是没有配置Restarting策略&#123;&#123;end&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># /data-volume-1</span></span><br><span class=\"line\"><span class=\"comment\"># /unruffled_bhabha</span></span><br><span class=\"line\"><span class=\"comment\"># /intelligent_borg</span></span><br><span class=\"line\"><span class=\"comment\"># 容器/test1正在运行，但是没有配置Restarting策略</span></span><br><span class=\"line\"><span class=\"comment\"># 容器/ldap-account-manager正在运行，但是没有配置Restarting策略</span></span><br><span class=\"line\"><span class=\"comment\"># /phpldapadmin</span></span><br><span class=\"line\"><span class=\"comment\"># /openldap</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"6-遍历（循环）\"><a href=\"#6-遍历（循环）\" class=\"headerlink\" title=\"6.遍历（循环）\"></a>6.遍历（循环）</h5><p>描述:range 用于遍历结构内返回值的所有数据。支持的类型包括 <code>array, slice, map 和 channel</code>。使用要点：</p>\n<ul>\n<li>对应的值长度为 0 时 range 不会执行。</li>\n<li>结构内部如要使用外部的变量，需要在前面加引用比如Var2。</li>\n<li>range 也支持 else 操作。效果是当返回值为空或长度为 0 时执行 else 内的内容。</li>\n</ul>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;range pipeline&#125;&#125;&#123;&#123;.&#125;&#125;&#123;&#123;end&#125;&#125;</span><br><span class=\"line\">&#123;&#123;range pipeline&#125;&#125;&#123;&#123;.&#125;&#125;&#123;&#123;<span class=\"keyword\">else</span>&#125;&#125;&#123;&#123;.&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 容器健康检查时间一览</span></span><br><span class=\"line\">docker inspect dc1 --format=<span class=\"string\">'&#123;&#123;range .State.Health.Log&#125;&#125;&#123;&#123;.Start&#125;&#125;&#123;&#123;println&#125;&#125;&#123;&#123;end&#125;&#125;'</span></span><br><span class=\"line\">2020-07-07 16:25:51.354025918 +0800 CST</span><br><span class=\"line\">2020-07-07 16:26:51.423164721 +0800 CST</span><br><span class=\"line\">2020-07-07 16:27:51.56890628 +0800 CST</span><br><span class=\"line\">2020-07-07 16:28:51.635154369 +0800 CST</span><br><span class=\"line\">2020-07-07 16:29:51.70101931 +0800 CST</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取容器的IP (后面使用容器名或容器ID都可以)</span></span><br><span class=\"line\">docker inspect dc1 --format=<span class=\"string\">'&#123;&#123; .NetworkSettings.Networks&#125;&#125;'</span></span><br><span class=\"line\">map[opt_default:0xc0001e2f00]</span><br><span class=\"line\">docker inspect --format=<span class=\"string\">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> $(docker ps -q)</span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\">172.18.0.2</span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<h5 id=\"管道（Pipeline）\"><a href=\"#管道（Pipeline）\" class=\"headerlink\" title=\"管道（Pipeline）\"></a>管道（Pipeline）</h5><p>描述: 管道 即 pipeline 与 shell 中类似，可以是上下文的变量输出，也可以是函数通过管道传递的返回值。</p>\n<p>简单示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\">&#123;&#123;.Con | markdown | addlinks&#125;&#125;  <span class=\"comment\"># 管道拼接的是内置函数</span></span><br><span class=\"line\">&#123;&#123;.Name | <span class=\"built_in\">printf</span> <span class=\"string\">\"%s\"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>基础示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 示例1.管道参数传递</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.State.Status&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># exited</span></span><br><span class=\"line\"><span class=\"comment\"># running</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;.State.Status | len&#125;&#125;'</span> $(docker ps -aq)</span><br><span class=\"line\"><span class=\"comment\"># 6</span></span><br><span class=\"line\"><span class=\"comment\"># 7</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h5><h6 id=\"len-函数\"><a href=\"#len-函数\" class=\"headerlink\" title=\"len 函数\"></a>len 函数</h6><p>描述:返回相应对象的长度。<br>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;len .Name&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h4 id=\"0x02-扩展语法\"><a href=\"#0x02-扩展语法\" class=\"headerlink\" title=\"0x02 扩展语法\"></a>0x02 扩展语法</h4><p>描述:基于第三方进行增强模板及函数，例如Docker中基于go模板的基础上，构建了一些内置函数。</p>\n<h5 id=\"Docker-扩展\"><a href=\"#Docker-扩展\" class=\"headerlink\" title=\"Docker 扩展\"></a>Docker 扩展</h5><ul>\n<li><p>1.json: Docker 默认以字符串显示返回结果。而该函数可以将结果格式化为压缩后的 json 格式数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">join</span><br><span class=\"line\"><span class=\"comment\"># 获取 Config 字段对应的 json 数据</span></span><br><span class=\"line\">docker inspect --format=<span class=\"string\">'&#123;&#123;json .Config&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.join:用指定的字符串将返回结果连接后一起展示。操作对象必须是字符串数组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出容器配置的所有 Entrypoint 参数，以 \" , \" 分隔：</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;join .Config.Entrypoint \" , \"&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3.lower: 将返回结果中的字母全部转换为小写。操作对象必须是字符串。</p>\n</li>\n<li><p>4.upper: 将返回结果中的字母全部转换为大写。操作对象必须是字符串。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format <span class=\"string\">\"&#123;&#123;lower .Name&#125;&#125;\"</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">\"&#123;&#123;upper .Name&#125;&#125;\"</span> <span class=\"variable\">$INSTANCE_ID</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5.title: 将返回结果的首字母转换为大写。操作对象必须是字符串，而且不能是纯数字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format <span class=\"string\">\"&#123;&#123;title .State.Status&#125;&#125;\"</span> <span class=\"variable\">$INSTANCE_ID</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>6.split: 使用指定分隔符将返回结果拆分为字符串列表。操作对象必须是字符串且不能是纯数字。同时字符串中必须包含相应的分隔符，否则会直接忽略操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format <span class=\"string\">'&#123;&#123;split .HostsPath \"/\"&#125;&#125;'</span> <span class=\"variable\">$INSTANCE_ID</span></span><br><span class=\"line\"><span class=\"comment\"># [ var lib docker containers dc1cc7e934aa756ab9f1d5aa88b6fb3b9124a101f0f1313fca199bd942d24e5b hosts]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"TemplateSyntax","path":"api/categories/TemplateSyntax.json"}],"tags":[{"name":"Go","path":"api/tags/Go.json"}]}