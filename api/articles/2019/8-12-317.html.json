{"title":"Perl快速入门学习","slug":"编程世界/Perl/Perl快速入门学习","date":"2019-08-12T07:36:30.000Z","updated":"2023-01-31T02:29:10.671Z","url":"2019/8-12-317.html","path":"api/articles/2019/8-12-317.html.json","covers":["https://img.weiyigeek.top/2019/1/20190815093718.png","https://img.weiyigeek.top/2019/1/20190815113350.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h4><p>Perl 是 Practical Extraction and Report Language 的缩写”实用报表提取语言”是一种功能强大功能丰富的脚本编程语言，最初的设计者为拉里·沃尔（Larry Wall）诞生于20世纪80年代末期并由他不断更新和维护的编程语言。</p>\n<p>其思想借用了C、sed、awk、shell脚本以及很多其他编程语言的特性,所以它的文本处理能力是及其强大的是关于Web处理中最常用使用的工具;</p>\n<p><em>优点和特点：</em></p>\n<ul>\n<li>Perl是高级、通用、直译式、动态、灵活的程序脚本语言(不需要编译器和链接器来运行代码)</li>\n<li>Perl跨平台性 Dos/windows,MacOS,OS/2,VM2和Unix</li>\n<li>Perl语言直接提供泛型变量、动态数组、Hash表等更加便捷的编程元素，提供了许多冗余语法。</li>\n<li>Perl最重要的特性是Perl内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN可扩展性强</li>\n<li>Perl提供了许多其他紧凑的数据处理结果(data-handling contructs),能够减少所需的”简单重复的劳动”,把更多的精力放在程序设计和正则表达式上;</li>\n<li>Perl的mod_perl 的模块允许 Apache web 服务器使用 Perl 解释器。</li>\n</ul>\n<p>_缺点_：</p>\n<ul>\n<li>Perl程序可以写得很随意因为Perl的灵活性和”过度”的冗余语法，也因此获得了仅写（write-only）的”美誉”</li>\n<li>Perl程序的代码令人难以阅读，实现相同功能的程序代码长度可以相差十倍百倍</li>\n<li><p>perl进程某一时刻会占用很多的内存空间</p>\n<p>建议的解决方法是在程序里使用use strict;以及use warnings;，并统一代码风格，使用库，而不是自己使用”硬编码”。Perl同样可以将代码书写得像Python或Ruby等语言一样优雅。</p>\n</li>\n</ul>\n<hr>\n\n<h4 id=\"perl安装\"><a href=\"#perl安装\" class=\"headerlink\" title=\"perl安装\"></a>perl安装</h4><p>描述：Perl的官网网站：<a href=\"http://www.perl.org/\" target=\"_blank\" rel=\"noopener\">http://www.perl.org/</a> ,目前Perl版本5.30.0;<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190815093718.png\" alt=\"WeiyiGeek.Perl\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Perl</p>\n            </figure></p>\n<p>选择Unix中有两种版本：</p>\n<ul>\n<li>源代码 : <a href=\"https://www.cpan.org/src/5.0/perl-5.30.0.tar.gz\" target=\"_blank\" rel=\"noopener\">https://www.cpan.org/src/5.0/perl-5.30.0.tar.gz</a></li>\n<li>二进制包 : <a href=\"https://www.activestate.com/activeperl/downloads\" target=\"_blank\" rel=\"noopener\">https://www.activestate.com/activeperl/downloads</a></li>\n</ul>\n<p>Unix 和 Linux 安装 Perl:安装成功后Perl 的安装路径为/usr/local/bin,库安装在 /usr/local/lib/perlXX, XX 为版本号。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.cpan.org/src/5.0/perl-5.30.0.tar.gz</span><br><span class=\"line\">tar -xzf perl-5.30.0.tar.gz</span><br><span class=\"line\">./Configure -de</span><br><span class=\"line\">make &amp;&amp; make <span class=\"built_in\">test</span> &amp;&amp; make install</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/1/20190815113350.png\" alt=\"WeiyiGeek.PerlInstall\" title=\"\" class=\"\">\n                <p>WeiyiGeek.PerlInstall</p>\n            </figure></p>\n<p>接下来我们如果 perl -v 命令查看是否安装成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -v</span><br><span class=\"line\">This is perl 5, version 30, subversion 0 (v5.30.0) built <span class=\"keyword\">for</span> x86_64-linux</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Perl语法基础\"><a href=\"#Perl语法基础\" class=\"headerlink\" title=\"Perl语法基础\"></a>Perl语法基础</h4><p>CMD语法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl5.26.2 [switches] [--] [programfile] [arguments]</span><br></pre></td></tr></table></figure></p>\n<p>Perl参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e/E <span class=\"string\">\"Perl代码\"</span>  <span class=\"comment\">#直接执行代码</span></span><br><span class=\"line\">-l</span><br><span class=\"line\">-p <span class=\"comment\">#表示对目标文件的每一行进行查找和替换</span></span><br><span class=\"line\">-i <span class=\"comment\">#表示将替换的结果写回到文件之中</span></span><br><span class=\"line\">-w/W <span class=\"comment\">#warning 在程序执行可疑的地方发出警报</span></span><br></pre></td></tr></table></figure><br>变量的声明使用与php相似都是采用$变量名称进行定义变量和调用变量;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#基础示例1</span></span><br><span class=\"line\">perl -e <span class=\"string\">\"print 'This is a Demo'\"</span></span><br><span class=\"line\">This is a Demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.命令行替换文件中的文本</span></span><br><span class=\"line\">perl -p -i -e <span class=\"string\">'s/sysread/read/g'</span> file.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.额外的功能</span></span><br><span class=\"line\">perl -w script.pl string.txt <span class=\"comment\">#string是要被提取的源文本</span></span><br></pre></td></tr></table></figure>\n<p><strong>特殊变量</strong></p>\n<ul>\n<li>$/ 特殊变量能使用一种神奇的方式,让&lt;&gt;不再返回单行文字,而是返回或多或少的一段文件。返回的数据任然是一个字符串，只是这个字符串可能包含多个逻辑行;</li>\n</ul>\n<h5 id=\"Perl数据类型\"><a href=\"#Perl数据类型\" class=\"headerlink\" title=\"Perl数据类型:\"></a>Perl数据类型:</h5><ul>\n<li>数值</li>\n<li>字符串</li>\n<li>数组</li>\n<li>Hash(哈希)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><em>注意事项：</em></p>\n<ul>\n<li>Perl通常情况是不区分整数和浮点数;</li>\n</ul>\n<p><br></p>\n<h5 id=\"Perl运算操作符\"><a href=\"#Perl运算操作符\" class=\"headerlink\" title=\"Perl运算操作符:\"></a>Perl运算操作符:</h5><ul>\n<li>赋值</li>\n<li>判断</li>\n<li>逻辑 (and / or / not)</li>\n<li>位</li>\n<li>其他操作符号<ul>\n<li>&lt;&gt; 每次读取一行数据相当于其他语言中的getline()函数.注意不要混淆操作符&lt;&gt;与shell的重定向符号&gt;或者是Perl的大小于号;</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#读取每一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>($line = &lt;&gt;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">#处理$line</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>基础示例1:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/perl</span></span><br><span class=\"line\"><span class=\"comment\"># Function:计算华氏温度和摄氏温度</span></span><br><span class=\"line\"><span class=\"variable\">$celsius</span> = 30;</span><br><span class=\"line\"><span class=\"variable\">$fahrenheit</span> = (<span class=\"variable\">$celsius</span> * 9 / 5) + 32;</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"<span class=\"variable\">$fahrenheit</span> F, And <span class=\"variable\">$celsius</span> ℃\\n\"</span>;</span><br></pre></td></tr></table></figure><br>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl demo1.pl</span><br><span class=\"line\">86 F, And 30 ℃</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>(1)Perl符号=~ / = 和 \\=\\= 之间的差别,等于 \\=\\=测试两个数字是否相等, = 用来给变量赋值,<code>而=~用来连接正则表达式m/.../和待搜索的目标字符串</code>。</li>\n</ul>\n<h5 id=\"Perl控制结构\"><a href=\"#Perl控制结构\" class=\"headerlink\" title=\"Perl控制结构\"></a>Perl控制结构</h5><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#条件结构</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件)&#123;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#循环结构</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">last</span>; <span class=\"comment\">#停止while循环内的处理跳出循环</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Perl也提供与其他流行语言类似的控制结构:</p>\n<p>基础示例2：<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/perl</span></span><br><span class=\"line\"><span class=\"comment\">#FUNCTION: 实现判断语句与while循环</span></span><br><span class=\"line\">$num1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\">$num2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">$sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( $num1 != <span class=\"string\">\"\"</span> &amp;&amp; $num2 != <span class=\"string\">\"\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  $add = $num1 + $num2;</span><br><span class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"$num1 + $num2 = $add\\n\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>($num &lt;= <span class=\"number\">100</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  $sum = $sum + $num;</span><br><span class=\"line\">  $num++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"1+..+3+...+7+100 = $sum \\n\"</span>;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl demo2.pl</span><br><span class=\"line\">1024 + 1 = 1025</span><br><span class=\"line\">1+..+3+...+7+100 = 5050</span><br></pre></td></tr></table></figure></p>\n<hr>\n\n<h4 id=\"Perl正则表达式\"><a href=\"#Perl正则表达式\" class=\"headerlink\" title=\"Perl正则表达式\"></a>Perl正则表达式</h4><p>描述：perl和Egrep属于同一个流派，Perl支持Regex的一些修饰符的使用并且Perl正则表达式中的元字符更多;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$variable</span>=~ m/regularExpression/i <span class=\"comment\">#来判断一个正则表示是是否能匹配某个字符串;</span></span><br><span class=\"line\"><span class=\"comment\">#整个测试语句作为一个单元返回boolean类型返回TRUE或者FALSE;</span></span><br><span class=\"line\">m <span class=\"comment\">#表示进行整治match匹配;</span></span><br><span class=\"line\">s <span class=\"comment\">#表示进行替换replace操作</span></span><br><span class=\"line\">/ <span class=\"comment\">#斜线表示正则表达式的边界;</span></span><br><span class=\"line\">/i <span class=\"comment\">#该修饰符modifier表示不区分大小写匹配</span></span><br><span class=\"line\">/g <span class=\"comment\">#该修饰符表示全局匹配(global Macth)</span></span><br><span class=\"line\">/x <span class=\"comment\">#表示宽松排列的表达式(free-from expressions)允许我们重新编排这个表达式（大多空白字符会被忽略），增强可读性;</span></span><br><span class=\"line\">/m <span class=\"comment\">#增强的行瞄点(enhanced line anchor),^$将切换到逻辑行模式;</span></span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>Perl提供例如许多简洁的元字符：</li>\n</ol>\n<ul>\n<li>\\cx    匹配由X指明的控制字符</li>\n<li>\\n : 换行符</li>\n<li>\\f : ASCII 进制符号</li>\n<li>\\t : tab键符号</li>\n<li>\\b : 退格键</li>\n<li>\\v : 垂直制表符</li>\n</ul>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ perl -E <span class=\"string\">'if(\"a\\nb\\tc\" =~ m/\\cI|\\n/)&#123;print \"匹配成功\"&#125;'</span></span><br><span class=\"line\">匹配成功</span><br><span class=\"line\">$ perl -E <span class=\"string\">'if(\"a\\nbc\" =~ m/\\cI|\\n/)&#123;print \"匹配成功\"&#125;'</span></span><br><span class=\"line\">匹配成功</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<ol start=\"2\">\n<li>Perl支持捕获括号<code>()</code>我们叫元组与非捕获类型括号<code>(?:...)</code>表示只分组不补捕获;<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() <span class=\"comment\">#元组匹配成功之后Perl可以用$1 $2 $3 之类的变量来保存相对应的()括号内的子表达式匹配的文本;</span></span><br><span class=\"line\">(?:....)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><em>注意事项:</em></p>\n<ul>\n<li>在元组中子表达式的编号安装开括号的出现先后排序,从1开始子表达式可以嵌套例如(Washington(.DC)?)</li>\n<li>如果只是希望分组,也可以使用()但副作用是他们捕获的文本任然会保存在特殊的变量之中;</li>\n</ul>\n<p>3.Perl正则中的环视功能<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(?=pattern) <span class=\"comment\">#肯定型顺序环视(positive lookahread)(从左向右)  正向预查(能匹配pattern)</span></span><br><span class=\"line\"><span class=\"comment\">#例如(?=\\d)表示如果当前位置 右边字符 是数字则匹配成功；</span></span><br><span class=\"line\"><span class=\"comment\">#例如'Windows (?=95|98|NT|2000)' 能匹配 \"Windows 2000\" 中的 \"Windows\" ，但不能匹配 \"Windows 3.1\" 中的 \"Windows\"。</span></span><br><span class=\"line\"></span><br><span class=\"line\">(?!=pattern) <span class=\"comment\">#否定型顺序环视(negativ lookahread)(从左向右)  负向预查(不能匹配pattern)</span></span><br><span class=\"line\"><span class=\"comment\">#例如(?!=\\d)表示如果当前位置 右边字符 不能是数字则匹配成功；</span></span><br><span class=\"line\"><span class=\"comment\">#例如'Windows (?!95|98|NT|2000)' 能匹配 \"Windows 3.1\" 中的 \"Windows\"，但不能匹配 \"Windows 2000\" 中的 </span></span><br><span class=\"line\"></span><br><span class=\"line\">(?&lt;=pattern) <span class=\"comment\">#肯定型逆序环视(从右向左)查看文本 反向肯定预查与正向肯定预查类似，只是方向相反。注意空格</span></span><br><span class=\"line\"><span class=\"comment\">#例如(?&lt;=\\d)表示如果当前位置 左边字符 是数字则匹配成功；(?&lt;=19)99 则匹配1999后面的99</span></span><br><span class=\"line\"><span class=\"comment\">#例如Windows( ?&lt;=95|98|NT|2000|10)能匹配“98/NT/2000/10/Windows”中的“Windows”，但不能匹配“95Windows”中的“Windows”,软件不一定全部支持</span></span><br><span class=\"line\">perl -l -e <span class=\"string\">'$str=\"Windows2000  95Windows  2000Windows Windows95\";if($str =~ s/Windows( ?&lt;=95|98|NT|2000|10)/NOW/g)&#123;print \"匹配成功 $str\"&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># 匹配成功 NOW  95Windows  2000Windows Windows95</span></span><br><span class=\"line\"></span><br><span class=\"line\">(?&lt;!pattern) <span class=\"comment\">#肯定型逆序环视(从右向左)查看文本;</span></span><br><span class=\"line\"><span class=\"comment\">#例如(?&lt;!\\d)表示如果当前位置 左边字符 不能是数字则匹配成功；(?&lt;!19)99 则匹配非1999后面的99,比如这时匹配2099中的99</span></span><br><span class=\"line\"><span class=\"comment\">#例如Windows( ?&lt;!95|98|NT|2000|10)能匹配“95Windows”中的“Windows”  不能匹配“98/NT/2000/10/Windows”中的“Windows”</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>Perl多种方式使用正则表达式:<br>基础示例1：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/perl</span></span><br><span class=\"line\"><span class=\"comment\">#function:验证Perl正则表达式进行匹配</span></span><br><span class=\"line\"><span class=\"comment\">#方式1:接受用户输入并且判断校验输入</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">\"Please Enter a number(Eg:1024):\"</span>;</span><br><span class=\"line\"><span class=\"variable\">$demo</span> = &lt;STDIN&gt;;  <span class=\"comment\">#交互式接收用户输入</span></span><br><span class=\"line\">chomp(<span class=\"variable\">$demo</span>);  <span class=\"comment\">#去掉$demo变量中输入的换行符</span></span><br><span class=\"line\"><span class=\"comment\"># 关键点：注意=~符号后的 m/,匹配成功返回true否则false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$demo</span> =~ m/^[0-9]+$/) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span> <span class=\"string\">\"only digits\\n\"</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span> <span class=\"string\">\"not only digits\\n\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式2:精确匹配整数负数以及小数</span></span><br><span class=\"line\"><span class=\"variable\">$demo</span> =~ m/^[-+]?[0-9]+(\\.[0-9]*)?$/) <span class=\"comment\">#^配置行首 $匹配结尾</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#方式3:或者输入摄氏温度或者华氏温度进行转换</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span> <span class=\"string\">\"Please input 86 F or 30 C:\"</span>;</span><br><span class=\"line\"><span class=\"variable\">$value</span> = &lt;STDIN&gt;;</span><br><span class=\"line\">chomp(<span class=\"variable\">$value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#第一个括号: 整个正则表达式保存位$1</span></span><br><span class=\"line\"><span class=\"comment\">#第二个括号: 保存是输入的华氏温度还是摄氏温度保存位$2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$value</span> =~ m/^([-+]?[0-9]+)([CF])$/)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">#重点</span></span><br><span class=\"line\">  <span class=\"variable\">$number</span> = <span class=\"variable\">$1</span>; <span class=\"comment\">#将输入温度数据保存到变量中</span></span><br><span class=\"line\">  <span class=\"variable\">$type</span> = <span class=\"variable\">$2</span>;  <span class=\"comment\">#将输入变量的类型保存到变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#判断字符串是否相等</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable\">$type</span> eq <span class=\"string\">\"C\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable\">$cel</span> = <span class=\"variable\">$number</span>;</span><br><span class=\"line\">    <span class=\"variable\">$fah</span> = (<span class=\"variable\">$cel</span> * 9 / 5) + 32;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$fah</span> = <span class=\"variable\">$number</span>;</span><br><span class=\"line\">    <span class=\"variable\">$cel</span> = (<span class=\"variable\">$fah</span> - 32) * 5 / 9;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">#计算输入两个温度值采用printf函数(与C中函数类似)</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"%2.f C And %.2f F\\n\"</span>, <span class=\"variable\">$cel</span>, <span class=\"variable\">$fah</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span> <span class=\"string\">\"Matching Error!\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master perl]<span class=\"comment\"># perl demo3.pl</span></span><br><span class=\"line\">Please Enter a number(Eg:1024):1024bac</span><br><span class=\"line\">not only digits</span><br><span class=\"line\"></span><br><span class=\"line\">[root@master perl]<span class=\"variable\">$perl</span> -w demo4.pl</span><br><span class=\"line\">Please input 86 F or 30 C : 30C</span><br><span class=\"line\">30 C And 86.00 F</span><br><span class=\"line\"></span><br><span class=\"line\">[root@master perl]<span class=\"variable\">$perlperl</span> -w demo4.pl</span><br><span class=\"line\">Please input 86 F or 30 C : 86F</span><br><span class=\"line\">30 C And 86.00 F</span><br><span class=\"line\"></span><br><span class=\"line\">[root@master perl]<span class=\"variable\">$perl</span> -w demo4.pl</span><br><span class=\"line\">Please input 86 F or 30 C : 76F</span><br><span class=\"line\">24 C And 76.00 F</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>基础示例2：使用正则表达式修改文本<br>描述：Perl和其他许多语言提供的一个正则表达式特性：替换(substiution或者叫做查找和替换(search and replace))<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/perl</span></span><br><span class=\"line\"><span class=\"comment\">#替换修改文本</span></span><br><span class=\"line\"><span class=\"comment\">#示例1</span></span><br><span class=\"line\">$string = <span class=\"string\">\"this is a demo\"</span>;</span><br><span class=\"line\">$string =~ <span class=\"regexp\">s/is/test/gi</span>; <span class=\"comment\">#或者直接在源字符上操作(全局替换)</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"$string\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$string = <span class=\"string\">\"this is a demo\"</span>;</span><br><span class=\"line\">$string =~ <span class=\"regexp\">s/\\bis\\b/test/i</span>; <span class=\"comment\">#或者直接在源字符上操作(只替换一次)</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"$string\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##示例2.保留小数点后的两位</span></span><br><span class=\"line\">$iee = <span class=\"number\">12.375000392</span>;</span><br><span class=\"line\">$iee =~ <span class=\"regexp\">s/(\\d+)(\\.\\d\\d[1-9]?)\\d*/$1$2/</span>;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"$iee \"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$iee = <span class=\"number\">37.500000000925</span>;</span><br><span class=\"line\">$iee =~ <span class=\"regexp\">s/(\\d+)(\\.\\d\\d[1-9]?)\\d*/$1$2/</span>;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"$iee \"</span>;</span><br></pre></td></tr></table></figure><br>执行结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ perl replace.pl</span><br><span class=\"line\">thtest <span class=\"built_in\">test</span> a demo</span><br><span class=\"line\">this <span class=\"built_in\">test</span> a demo</span><br><span class=\"line\"></span><br><span class=\"line\">12.375</span><br><span class=\"line\">37.5</span><br></pre></td></tr></table></figure></p>\n<p><br><br>基础示例3：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.再perl的cmd中需要对一些字符进行八进制代替比如 ' = \\047 ，替换的时候也可以采用\\0nm模式</span></span><br><span class=\"line\">perl -l -e <span class=\"string\">'$str=\"Window\\047s 98\";if($str =~ s/\\47/\\057/g)&#123;print \"匹配成功 $str\"&#125;'</span></span><br><span class=\"line\">匹配成功 Window/s 98</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2./x修饰符重新编排表达式</span></span><br><span class=\"line\"><span class=\"variable\">$text</span> =~ s &#123;</span><br><span class=\"line\">  \\b</span><br><span class=\"line\">  (</span><br><span class=\"line\">    username</span><br><span class=\"line\">    \\@</span><br><span class=\"line\">    hostname</span><br><span class=\"line\">  )</span><br><span class=\"line\">  \\b</span><br><span class=\"line\">&#125;&#123;&lt;a href=<span class=\"string\">\"mailto:<span class=\"variable\">$1</span>\"</span>&gt;<span class=\"variable\">$1</span>&lt;/a&gt;&#125;gix</span><br></pre></td></tr></table></figure></p>\n<p><strong>补充说明：</strong><br><em>为什么有时候Perl在使用正则匹配的需要对$和@需要转义</em></p>\n<ul>\n<li>$符号既可以作为字符串结束字符,又可以在Perl中作为标记变量;</li>\n<li>@情况与之类似,Perl用@表示数组名,在Perl中的字符串或者正则表达式中也可以容许出现数组变量;如果需要使用@字符就需要进行转义避免把他作为数组名称;</li>\n</ul>\n<hr>\n\n<h4 id=\"perl内置函数\"><a href=\"#perl内置函数\" class=\"headerlink\" title=\"perl内置函数\"></a>perl内置函数</h4><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defined</span>($var);  <span class=\"comment\">#验证变量是否定义</span></span><br><span class=\"line\"><span class=\"keyword\">die</span> <span class=\"string\">\"Error Exit!\"</span>;   <span class=\"comment\">#类似于php中的die()函数发出错误信息</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"入坑解决\"><a href=\"#入坑解决\" class=\"headerlink\" title=\"入坑解决\"></a>入坑解决</h4><p><em>问题1.在编译perl源代码时候发生错误</em><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl: warning: Falling back to a fallback locale (<span class=\"string\">\"en_US.UTF-8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解决方法：</span></span><br><span class=\"line\">vim ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">export</span> LC_ALL=en_US.UTF-8</span><br><span class=\"line\">. ~/.bashrc  <span class=\"comment\">#然后加载该环境变量</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"}],"tags":[{"name":"Perl","path":"api/tags/Perl.json"}]}