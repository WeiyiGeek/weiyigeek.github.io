{"title":"8.Jenkins进阶之工作学习所遇补充","slug":"系统运维/自动化运维/CI-CD/Jenkins/8.Jenkins进阶之工作学习扩展补充","date":"2020-12-31T05:34:30.000Z","updated":"2022-05-19T14:19:49.371Z","url":"2020/12-31-618.html","path":"api/articles/2020/12-31-618.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518144836.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518150251.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518192632.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518192958.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-知识扩展\"><a href=\"#0x00-知识扩展\" class=\"headerlink\" title=\"0x00 知识扩展\"></a>0x00 知识扩展</h2><h3 id=\"1-Jenkins-如何根据代仓库的-webhook-自动触发拉取提交的分支代码并构建\"><a href=\"#1-Jenkins-如何根据代仓库的-webhook-自动触发拉取提交的分支代码并构建\" class=\"headerlink\" title=\"1.Jenkins 如何根据代仓库的 webhook 自动触发拉取提交的分支代码并构建?\"></a>1.Jenkins 如何根据代仓库的 webhook 自动触发拉取提交的分支代码并构建?</h3><p>描述: 通常每个项目代码库都会有不同的分支，（如果你没有用多分支流水线的情况下）对于普通的流水线项目我们可以让一条流水线来支持多个分支的发布，其实有时候你会发现每个分支的集成步骤都是差不多的，对于常规的我们可以安装使用<code>git parameter</code>插件，其次还需配置参数化构建过程。</p>\n<p><strong>方式1.手动动态拉取指定分支</strong></p>\n<ul>\n<li>1.配置 GitHub 或者 Gitlab 项目 URL 地址, 并指定 GitLab Connection。</li>\n<li>2.配置 参数化构建过程 , 使用 Git 参数 输入变量名称【TagBranchName】，选择参数类型【分支或标签】以及设置默认值【origin/master】。</li>\n<li>3.执行 <code>Build with Parameters</code> 选择查看构建部署可用的Tag或Branch名称?</li>\n</ul>\n<p>此时流水线代码可以这样写:<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # pipeline 片段</span></span><br><span class=\"line\">checkout([<span class=\"string\">$class:</span> <span class=\"string\">'GitSCM'</span>, <span class=\"string\">branches:</span> [[<span class=\"string\">name:</span> <span class=\"string\">\"origin/$&#123;params.TagBranchName&#125;\"</span>]], <span class=\"string\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"string\">extensions:</span> [], <span class=\"string\">submoduleCfg:</span> [], <span class=\"string\">userRemoteConfigs:</span> [[<span class=\"string\">credentialsId:</span> <span class=\"string\">\"$&#123;env.GITLAB_PUB&#125;\"</span>, <span class=\"string\">url:</span> <span class=\"string\">\"$&#123;env.GITLAB_URL&#125;\"</span>]]])</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518144836.png\" alt=\"WeiyiGeek.手动动态拉取分支\" title=\"\" class=\"\">\n                <p>WeiyiGeek.手动动态拉取分支</p>\n            </figure>\n<p><br/></p>\n<p><strong>方式2.使用 GitLab Plugin 让代码提交自动触发拉取</strong></p>\n<ul>\n<li><p>1.配置构建触发器, 此处启用<code>Enabled GitLab triggers</code>, 下拉到<code>Build when a change is pushed to GitLab</code>,获得 GitLab webhook URL，并点击高级获得 Secret Token, 注意需要安装【 GitLab Plugin 】插件以配置 GitLab 以向您的 Jenkins 实例（如 GitLab CI）发送 POST 请求。。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Build when a change is pushed to GitLab. GitLab webhook URL: http://jenkins.weiyigeek.top/project/HelloWorld</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2.通常企业内部代码仓库会采用Gitlab作为私有的代码仓库, 为了使项目可以自动触发我们需要针对指定项目设置Webhook, 打开方式-&gt;项目-&gt;设置-&gt;Webhook设置-&gt; 填入 GitLab webhook URL 以及 配置的 Secret token。</p>\n</li>\n<li><p>3.勾选【Tag push events】通常只是打Tag时触发。</p>\n</li>\n</ul>\n<p>此时流水线代码可以这样写:<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # pipeline 片段</span></span><br><span class=\"line\"><span class=\"comment\">// 判断是 gitlab 自动触发还是手动触发</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>( env.gitlabSourceBranch != <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">  checkout([<span class=\"string\">$class:</span> <span class=\"string\">'GitSCM'</span>, <span class=\"string\">branches:</span> [[<span class=\"string\">name:</span> <span class=\"string\">\"origin/$&#123;env.gitlabSourceBranch&#125;\"</span>]], <span class=\"string\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"string\">extensions:</span> [], <span class=\"string\">submoduleCfg:</span> [], <span class=\"string\">userRemoteConfigs:</span> [[<span class=\"string\">credentialsId:</span> <span class=\"string\">\"$&#123;env.GITLAB_PUB&#125;\"</span>, <span class=\"string\">url:</span> <span class=\"string\">\"$&#123;env.GITLAB_URL&#125;\"</span>]]])</span><br><span class=\"line\">  updateGitlabCommitStatus <span class=\"string\">name:</span> <span class=\"string\">'代码拉取'</span>, <span class=\"string\">state:</span> <span class=\"string\">'success'</span>  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  checkout([<span class=\"string\">$class:</span> <span class=\"string\">'GitSCM'</span>, <span class=\"string\">branches:</span> [[<span class=\"string\">name:</span> <span class=\"string\">\"$&#123;params.PREJECT_BRANCHTAG&#125;\"</span>]], <span class=\"string\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"string\">extensions:</span> [], <span class=\"string\">submoduleCfg:</span> [], <span class=\"string\">userRemoteConfigs:</span> [[<span class=\"string\">credentialsId:</span> <span class=\"string\">\"$&#123;env.GITLAB_PUB&#125;\"</span>, <span class=\"string\">url:</span> <span class=\"string\">\"$&#123;env.GITLAB_URL&#125;\"</span>]]])</span><br><span class=\"line\">  updateGitlabCommitStatus <span class=\"string\">name:</span> <span class=\"string\">'代码拉取'</span>, <span class=\"string\">state:</span> <span class=\"string\">'success'</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518150251.png\" alt=\"WeiyiGeek.webhook自动触发\" title=\"\" class=\"\">\n                <p>WeiyiGeek.webhook自动触发</p>\n            </figure>\n<p>插件参考地址: <a href=\"https://plugins.jenkins.io/gitlab-plugin/\" target=\"_blank\" rel=\"noopener\">https://plugins.jenkins.io/gitlab-plugin/</a></p>\n<p>温馨提示: 在 groovy 中如果变量不存在其值为null而非字符串类型的null。</p>\n<p><br/></p>\n<p><strong>方式3.使用 Generic Webhook Trigger Plugin 让代码提交自动触发拉取</strong><br>描述: 在 Github 或者 Gitlab 中的 webhook 触发到底给 Jenkins 发了什么, 以Gitlab为例我们从下述看到其发送的POST请求。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Request headers:</span></span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">X-Gitlab-Event: Tag Push Hook</span><br><span class=\"line\">X-Gitlab-Token: 11c503a496e0a573d278357836dd3e1c4f</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Request body:</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"object_kind\"</span>: <span class=\"string\">\"tag_push\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"event_name\"</span>: <span class=\"string\">\"tag_push\"</span>,            <span class=\"comment\"># 事件名称 Tag 触发</span></span><br><span class=\"line\">  <span class=\"string\">\"before\"</span>: <span class=\"string\">\"0000000000000000000000000000000000000000\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"after\"</span>: <span class=\"string\">\"013f157ce81016be5bce9fda641633ba28141055\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ref\"</span>: <span class=\"string\">\"refs/tags/Test_cet_v1.0.0\"</span>,  <span class=\"comment\"># 分支名称</span></span><br><span class=\"line\">  <span class=\"string\">\"checkout_sha\"</span>: <span class=\"string\">\"32a16de55f7d0c6bc6dcbb1b110db10016a2ba27\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"message\"</span>: <span class=\"string\">\"Test_cet_v1.0.0\"</span>,        <span class=\"comment\"># 分支信息</span></span><br><span class=\"line\">  <span class=\"string\">\"user_id\"</span>: 5,</span><br><span class=\"line\">  <span class=\"string\">\"user_name\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"user_username\"</span>: <span class=\"string\">\"project\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"user_email\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"user_avatar\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/uploads/-/system/user/avatar/5/avatar.png\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"project_id\"</span>: 70,</span><br><span class=\"line\">  <span class=\"string\">\"project\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: 70,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"信息上报管理端\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"web_url\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"avatar_url\"</span>: null,</span><br><span class=\"line\">    <span class=\"string\">\"git_ssh_url\"</span>: <span class=\"string\">\"ssh://git@gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"git_http_url\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"namespace\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"visibility_level\"</span>: 0,</span><br><span class=\"line\">    <span class=\"string\">\"path_with_namespace\"</span>: <span class=\"string\">\"project/xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"default_branch\"</span>: <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ci_config_path\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"ssh://git@gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ssh_url\"</span>: <span class=\"string\">\"ssh://git@gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"http_url\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt.git\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"commits\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>: <span class=\"string\">\"32a16de55f7d0c6bc6dcbb1b110db10016a2ba27\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: <span class=\"string\">\"xxsbpt cet\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"title\"</span>: <span class=\"string\">\"xxsbpt cet\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"timestamp\"</span>: <span class=\"string\">\"2022-05-18T09:34:39+08:00\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt/-/commit/32a16de55f7d0c6bc6dcbb1b110db10016a2ba27\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"weiyigeek\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"email\"</span>: <span class=\"string\">\"weiyigeek@weiyigeek.top\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">\"added\"</span>: [],</span><br><span class=\"line\">      <span class=\"string\">\"modified\"</span>: [<span class=\"string\">\"KsXxsbPt/pom.xml\"</span>],</span><br><span class=\"line\">      <span class=\"string\">\"removed\"</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"total_commits_count\"</span>: 1,</span><br><span class=\"line\">  <span class=\"string\">\"push_options\"</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"ssh://git@gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"信息上报管理端\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"homepage\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"git_http_url\"</span>: <span class=\"string\">\"http://gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"git_ssh_url\"</span>: <span class=\"string\">\"ssh://git@gitlab.weiyigeek.top/project/xxsbpt.git\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"visibility_level\"</span>: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>步骤 01.有了上面的请示例,我们可以在jenkins Job 里 Generic Webhook Trigger 构建触发器中进行设置，首先需要进行勾选，获取到触发URL (<a href=\"http://jenkins.weiyigeek.top/generic-webhook-trigger/invoke)。\" target=\"_blank\" rel=\"noopener\">http://jenkins.weiyigeek.top/generic-webhook-trigger/invoke)。</a></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked></input> Generic Webhook Trigger </li>\n</ul>\n<p>步骤 02.然后在Post content parameters中进行配置,例如此处我们想要获取到ref的值可以这样配置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义变量名称</span></span><br><span class=\"line\">Variable: ref</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 表达式采用 JSONPath 方式</span></span><br><span class=\"line\">Expression: $.ref      <span class=\"comment\"># ref 值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 表达式获取值过滤与匹配，例如 refs/tags/Test_cet_v1.0.0 , 当配置如下时则ref其值为 Test_cet_v1.0.0 </span></span><br><span class=\"line\">Value filter: refs/tags/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未匹配到默认值</span></span><br><span class=\"line\">Default value：master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518192632.png\" alt=\"WeiyiGeek.Post content parameters\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Post content parameters</p>\n            </figure>\n<p>温馨提示: 除此之外我们还可以获得<code>Header parameters</code>以及<code>Request parameters</code>, 并且新增 <code>Post content parameters</code> 参数例如再获取 message 信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Variable: message </span><br><span class=\"line\">Expression: $.message</span><br></pre></td></tr></table></figure></p>\n<p>步骤 03.为了保证webhook未授权访问, 我们可以对其设置 Token 在认证时可以采用如下方式。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Token：weiyigeek-secrets</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>Query parameter <code>invoke?token=weiyigeek-secrets</code></li>\n<li>A token header <code>token: TOKEN_HERE</code></li>\n<li>A Authorization: Bearer header <code>Authorization: Bearer TOKEN_HERE</code></li>\n</ul>\n<p>步骤 04.配置Optional filter, 此处作用是条件判断，当只有符合Expression中定义的正则的变量Text 才会触发发版（CICD）否则不会发版。Text处的变量是通过前面<code>Post content parameters</code>区域提取的变量 message 。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220518192958.png\" alt=\"WeiyiGeek.变量正则表达式匹配\" title=\"\" class=\"\">\n                <p>WeiyiGeek.变量正则表达式匹配</p>\n            </figure>\n<p>步骤 05.在Gitlab对应的项目中添加Webkook触发接口，即打开方式-&gt;项目-&gt;设置-&gt;Webhook设置-&gt; 填入 GitLab webhook URL (<code>http://jenkins.weiyigeek.top/generic-webhook-trigger/invoke?token=weiyigeek-secrets</code>)</p>\n<p>步骤 06.此时假如我们向代码仓库中打一个Tag, 例如 <code>git tag -a Test_devops_v1.0.0 -m &quot;Test_devops_v1.0.0&quot;</code> 等待触发 jenkins 拉取。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String BUILD_ENV = <span class=\"string\">\"\"</span></span><br><span class=\"line\">String BUILD_NAME = <span class=\"string\">\"\"</span></span><br><span class=\"line\">String BUILD_VERSION = <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  node(k8s) &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">'Generic Webhook Trigger'</span>) &#123;</span><br><span class=\"line\">      dir(<span class=\"string\">'/home/jenkins/agent/workspace/test'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> currentBranch = ref</span><br><span class=\"line\">        git <span class=\"string\">branch:</span> currentBranch, <span class=\"string\">credentialsId:</span> <span class=\"string\">'xxxx'</span>, <span class=\"string\">url:</span> <span class=\"string\">'http://gitlab.weiyigeek.top/devops.git'</span></span><br><span class=\"line\">        <span class=\"comment\">// 分隔 Tag 信息 或者 message 信息</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> arr = ref.split(<span class=\"string\">\"_\"</span>) <span class=\"keyword\">as</span> List</span><br><span class=\"line\">        <span class=\"comment\">// # 构建环境</span></span><br><span class=\"line\">        BUILD_ENV = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\">// # 构建名称</span></span><br><span class=\"line\">        BUILD_NAME = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\">// # 构建版本</span></span><br><span class=\"line\">        BUILD_VERSION = arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"2-如何在Jenkins-pipeline中获取shell命令得返回值\"><a href=\"#2-如何在Jenkins-pipeline中获取shell命令得返回值\" class=\"headerlink\" title=\"2.如何在Jenkins pipeline中获取shell命令得返回值?\"></a>2.如何在Jenkins pipeline中获取shell命令得返回值?</h3><p>描述: 在 Pipeline 流水线中通常需要对执行的sh命令获取其值，我们可以通过如下几种方式获取其标准输出或者其执行状态。</p>\n<ul>\n<li><p>无需返回值，仅执行shell命令</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 主要阶段以及子阶段流程</span></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [ 阶段.shell命令执行测试 ]</span></span><br><span class=\"line\">    stage (<span class=\"string\">'代码拉取'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 最简单的方式</span></span><br><span class=\"line\">        sh <span class=\"string\">'whoami &amp;&amp; uname -a'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取标准输出</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span> ,<span class=\"string\">script:</span> <span class=\"string\">\"&lt;shell command&gt;\"</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"string\">script:</span> <span class=\"string\">\"&lt;shell command&gt;\"</span>, <span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">\"&lt;shell command&gt; &gt; commandResult\"</span></span><br><span class=\"line\">result = readFile(<span class=\"string\">'commandResult'</span>).trim()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取执行状态</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span> ,<span class=\"string\">script:</span> <span class=\"string\">\"&lt;shell command&gt;\"</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"string\">script:</span> <span class=\"string\">\"&lt;shell command&gt;\"</span>, <span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">'&lt;shell command&gt;; echo $? &gt; status'</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> r = readFile(<span class=\"string\">'status'</span>).trim()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>温馨提示: <code>trim()</code> 方法用于删除字符串的头尾空白符，空白符包括：空格、制表符 tab、换行符等其他空白符等, 在 Jenkins 流水线中非常重要，因为命令执行后总是会在其末尾添加一个换行符。</p>\n<p><br/></p>\n<h3 id=\"3-如何在Jenkins-pipeline中获取项目的commit-id与commit-msg并设置为环境变量\"><a href=\"#3-如何在Jenkins-pipeline中获取项目的commit-id与commit-msg并设置为环境变量\" class=\"headerlink\" title=\"3.如何在Jenkins pipeline中获取项目的commit id与commit msg并设置为环境变量?\"></a>3.如何在Jenkins pipeline中获取项目的commit id与commit msg并设置为环境变量?</h3><p>描述: 在CICD中通常我们需要构建的消息提示, 而提示的相关信息必不可少的就是本次构建代码提交的id以及其代码提交主要修改信息等，方便运维以及开发人员进行后续测试、部署以及运维。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// # 1.获取完整 commit id, 例如：b34f93a7d4cbafb67d259edvf5a1f92dd6b4ddc5</span></span><br><span class=\"line\">sh <span class=\"string\">label:</span> <span class=\"string\">'commit_id'</span>,<span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span>  ,<span class=\"string\">script:</span> <span class=\"string\">'git rev-parse HEAD'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 2.获取 short commit id（如：bb4f92a）</span></span><br><span class=\"line\">sh <span class=\"string\">label:</span> <span class=\"string\">'short_commit_id'</span>,<span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span>  ,<span class=\"string\">script:</span> <span class=\"string\">'git rev-parse --short HEAD'</span></span><br><span class=\"line\">sh <span class=\"string\">label:</span> <span class=\"string\">'short_commit_id'</span>,<span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span>  ,<span class=\"string\">script:</span> <span class=\"string\">'git rev-parse --short HEAD $&#123;GIT_COMMIT&#125;'</span></span><br><span class=\"line\">sh <span class=\"string\">label:</span> <span class=\"string\">'short_commit_id'</span>,<span class=\"string\">returnStatus:</span> <span class=\"literal\">true</span>  ,<span class=\"string\">script:</span> <span class=\"string\">'git log --oneline -1 | awk \\'&#123;print \\$1&#125;\\''</span></span><br><span class=\"line\">sh <span class=\"string\">label:</span> <span class=\"string\">'git_commitid'</span>,<span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"string\">script:</span> <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  git show --oneline --ignore-all-space --text | head -n 1 | cut -d ' ' -f 1 |tr -d '\\\\n'</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// # 3.获取提交 messges 信息,并将其设置为环境变量</span></span><br><span class=\"line\">stage(<span class=\"string\">'get_commit_msg'</span>) &#123;</span><br><span class=\"line\">  steps &#123;</span><br><span class=\"line\">    script &#123;</span><br><span class=\"line\">      env.GIT_COMMIT_MSG = sh (<span class=\"string\">script:</span> <span class=\"string\">'git log -1 --pretty=%B $&#123;GIT_COMMIT&#125;'</span>, <span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\">      env.GIT_COMMIT_MSG = sh <span class=\"string\">label:</span> <span class=\"string\">'git_commitmsg'</span>,<span class=\"string\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"string\">script:</span> <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        git show --oneline --ignore-all-space --text | head -n 1 |tr -d '\\\\n'</span></span><br><span class=\"line\"><span class=\"string\">      \"\"\"</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<hr>\n<h2 id=\"0x01-入坑出坑\"><a href=\"#0x01-入坑出坑\" class=\"headerlink\" title=\"0x01 入坑出坑\"></a>0x01 入坑出坑</h2><h3 id=\"问题1-在Jenkins流水线中运行dockerIndocker镜像环境测试docker命令显示-dial-unix-var-run-docker-sock-connect-permission-denied-错误信息，解决方法如下\"><a href=\"#问题1-在Jenkins流水线中运行dockerIndocker镜像环境测试docker命令显示-dial-unix-var-run-docker-sock-connect-permission-denied-错误信息，解决方法如下\" class=\"headerlink\" title=\"问题1.在Jenkins流水线中运行dockerIndocker镜像环境测试docker命令显示 dial unix /var/run/docker.sock: connect: permission denied 错误信息，解决方法如下:\"></a>问题1.在Jenkins流水线中运行dockerIndocker镜像环境测试docker命令显示 dial unix /var/run/docker.sock: connect: permission denied 错误信息，解决方法如下:</h3><ul>\n<li>错误信息:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ $ docker ps</span><br><span class=\"line\">Got permission denied <span class=\"keyword\">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure></li>\n<li>问题原因: 由于镜像中的docker执行者权限较低或者不属于docker组，则无操作权限。</li>\n<li>解决办法: <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解决方案1:在docker命令前加sudo</span></span><br><span class=\"line\">sudo docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方案2: 只需要操作一次</span></span><br><span class=\"line\"><span class=\"comment\"># 1.将jenkins用户加入到docker组中</span></span><br><span class=\"line\">sudo usermod -a -G docker jenkins</span><br><span class=\"line\"><span class=\"comment\"># 2.将当前用户切换到docker组中</span></span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$USER</span> docker</span><br><span class=\"line\">newgrp - docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解决方案3: 设置socket文件权限，但是此种方式只要docker服务重启, 就需要重新设置一次</span></span><br><span class=\"line\">sudo chmod 666 /var/run/docker.sock</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n<h3 id=\"2-在Kubernetes集群中运行自定义动态slave工作节点时报hudson-remoting-Channel-CallSiteStackTrace-Remote-call-to-JNLP4-connect-connection错误\"><a href=\"#2-在Kubernetes集群中运行自定义动态slave工作节点时报hudson-remoting-Channel-CallSiteStackTrace-Remote-call-to-JNLP4-connect-connection错误\" class=\"headerlink\" title=\"2.在Kubernetes集群中运行自定义动态slave工作节点时报hudson.remoting.Channel$CallSiteStackTrace: Remote call to JNLP4-connect connection错误\"></a>2.在Kubernetes集群中运行自定义动态slave工作节点时报<code>hudson.remoting.Channel$CallSiteStackTrace: Remote call to JNLP4-connect connection</code>错误</h3><ul>\n<li><p>[] 错误信息: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Pipeline] End of Pipeline</span><br><span class=\"line\">Also:   hudson.remoting.Channel<span class=\"variable\">$CallSiteStackTrace</span>: Remote call to JNLP4-connect connection from 192.168.12.226/192.168.12.226:36221</span><br><span class=\"line\">    at hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1797)</span><br><span class=\"line\">java.lang.OutOfMemoryError: unable to create new native thread</span><br><span class=\"line\">  at java.lang.Thread.start0(Native Method)</span><br><span class=\"line\">  at java.lang.Thread.start(Thread.java:717)</span><br><span class=\"line\">  at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:957)</span><br><span class=\"line\">  at java.util.concurrent.ThreadPoolExecutor.ensurePrestart(ThreadPoolExecutor.java:1603)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[] Jenkins pipeline 流水线测试脚本</p>\n</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [Jenkins Pipeline 流水线 开始]</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 流水线运行的主机绑定,此处利用动态的K8s节点进行。</span></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    kubernetes &#123;</span><br><span class=\"line\">      cloud <span class=\"string\">'kubernetes'</span></span><br><span class=\"line\">      namespace <span class=\"string\">'devops'</span></span><br><span class=\"line\">      inheritFrom <span class=\"string\">'jenkins-slave'</span></span><br><span class=\"line\">      showRawYaml <span class=\"string\">'false'</span></span><br><span class=\"line\">      workingDir <span class=\"string\">'/home/jenkins/agent'</span></span><br><span class=\"line\">      nodeSelector <span class=\"string\">'kubernetes.io/hostname=weiyigeek-201'</span></span><br><span class=\"line\">      <span class=\"comment\">// yamlFile 'KubernetesPod.yaml'</span></span><br><span class=\"line\">      yaml <span class=\"string\">\"\"\"\\</span></span><br><span class=\"line\"><span class=\"string\">apiVersion:</span></span><br><span class=\"line\"><span class=\"string\">kind: Pod</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  labels:</span></span><br><span class=\"line\"><span class=\"string\">    app: 'jenkins-jnlp'</span></span><br><span class=\"line\"><span class=\"string\">    job: $&#123;JOB_NAME_NUMBER&#125;</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  serviceAccountName: 'jenkins-sa'</span></span><br><span class=\"line\"><span class=\"string\">  automountServiceAccountToken: false</span></span><br><span class=\"line\"><span class=\"string\">  securityContext:</span></span><br><span class=\"line\"><span class=\"string\">    runAsUser: 1000   # default UID of jenkins user in agent image</span></span><br><span class=\"line\"><span class=\"string\">  containers:</span></span><br><span class=\"line\"><span class=\"string\">  - name: 'jnlp'</span></span><br><span class=\"line\"><span class=\"string\">    image: 'alpine-jenkins-jnlp:v2.330'</span></span><br><span class=\"line\"><span class=\"string\">    imagePullPolicy: 'IfNotPresent'</span></span><br><span class=\"line\"><span class=\"string\">    command: [\"/bin/sh\"]</span></span><br><span class=\"line\"><span class=\"string\">    args: [\"-c\",\"/usr/local/bin/jenkins-agent.sh &amp;&amp; cat\"]</span></span><br><span class=\"line\"><span class=\"string\">    tty: true</span></span><br><span class=\"line\"><span class=\"string\">    env:</span></span><br><span class=\"line\"><span class=\"string\">    - name: JAVA_OPTS</span></span><br><span class=\"line\"><span class=\"string\">      value: '-Xms512m -Xmx1g -Xss1m'</span></span><br><span class=\"line\"><span class=\"string\">    resources:</span></span><br><span class=\"line\"><span class=\"string\">      limits: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">      requests:</span></span><br><span class=\"line\"><span class=\"string\">        memory: '512Mi'</span></span><br><span class=\"line\"><span class=\"string\">        cpu: '500m'</span></span><br><span class=\"line\"><span class=\"string\">    volumeMounts:</span></span><br><span class=\"line\"><span class=\"string\">    - name: 'maven-cache'</span></span><br><span class=\"line\"><span class=\"string\">      mountPath: '/home/jenkins/.m2'</span></span><br><span class=\"line\"><span class=\"string\">    - name: 'docker-socket'</span></span><br><span class=\"line\"><span class=\"string\">      mountPath: '/var/run/docker.sock'</span></span><br><span class=\"line\"><span class=\"string\">  volumes:</span></span><br><span class=\"line\"><span class=\"string\">  - name: maven-cache</span></span><br><span class=\"line\"><span class=\"string\">    hostPath: </span></span><br><span class=\"line\"><span class=\"string\">      path: /nfsdisk-31/appstorage/mavenRepo</span></span><br><span class=\"line\"><span class=\"string\">  - name: docker-socket</span></span><br><span class=\"line\"><span class=\"string\">    hostPath: </span></span><br><span class=\"line\"><span class=\"string\">      path: /var/run/docker.sock</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage (<span class=\"string\">'declarative Pipeline - kubernetes plugin Test'</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        echo <span class=\"string\">\"[*] kubernetes 插件测试\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"mvn -version\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"release-cli -v\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"sonar-scanner -v\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"kubectl version\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"sleep 666\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"docker --version &amp;&amp; sudo docker ps\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked></input> 解决方法: 由于我是自行构建jlnp镜像【教程参考：<a href=\"https://mp.weixin.qq.com/s/FWmQNinsYZwyeL3c-6x6tw】需要设置\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/FWmQNinsYZwyeL3c-6x6tw】需要设置</a> JAVA_OPTS 启动参数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env:</span><br><span class=\"line\">- name: JAVA_OPTS</span><br><span class=\"line\">  value: <span class=\"string\">'-Xms512m -Xmx1g -Xss1m'</span></span><br></pre></td></tr></table></figure>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"},{"name":"CI-CD","path":"api/categories/CI-CD.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}