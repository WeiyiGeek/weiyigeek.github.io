<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeiyiGeek Blog</title>
  
  <subtitle>花开堪折直须折，莫待无花空折枝。</subtitle>
  <link href="https://blog.weiyigeek.top/atom.xml" rel="self"/>
  
  <link href="https://blog.weiyigeek.top/"/>
  <updated>2022-10-09T11:18:57.214Z</updated>
  <id>https://blog.weiyigeek.top/</id>
  
  <author>
    <name>WeiyiGeek</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>资源分享|免费注册申请永久的eu.org顶级域名创建属于自己的域名,再也不用给博客域名续费了!</title>
    <link href="https://blog.weiyigeek.top/2022/10-9-688.html"/>
    <id>https://blog.weiyigeek.top/2022/10-9-688.html</id>
    <published>2022-10-09T14:47:25.000Z</published>
    <updated>2022-10-09T11:18:57.214Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述：在逛B站的时候发现可以免费注册申请永久的eu.org顶级网域，一想到自己现在域名【weiyigeek.top】后续续费要上百人民币, 所以我随手就马上去注册了一个（白嫖谁不爱），下面将快速申请注册 eu.org 域名注意事项进行说明，帮助需要申请免费 eu.org 域名的朋友。</p><p>EU.org 是一个从1996开始提供免费域名的组织, 其官网地址是 <a href="https://nic.eu.org/" target="_blank" rel="noopener">https://nic.eu.org/</a> ，他帮助学生、爱好者或者非营利组织不用花费购买域名就可能拥有自己的免费域名，虽然 <a href="https://nic.eu.org/" target="_blank" rel="noopener">eu.org</a> 网域切确来说这是一个子域名（Subdomain）或者二级域名，但是根据一些网站的资讯，有许多大型互联网公司，像是 Google, Cloudflare, Bing 等厂商都已经将eu.org域名当成是一个顶级网域了。</p><p>值得注意的是，我们虽然可以进行免费申请，但要滥用申请，作为申请者应该必须遵守互联网标准(Rfc)，不要利用其来发送垃圾邮件或网络钓鱼以及分发恶意软件，毕竟提供免费的域名的组织，谁也不想其取消免费服务，其次不要多次注册申请占用域名，尽量只是注册需要的域名，通常来说注册两个域名基本就满足日常使用，一个正式站点域名和一个测试站点域名。</p><a id="more"></a><p>EU.org 开域和政策参考地址：<a href="https://nic.eu.org/opendomains.html" target="_blank" rel="noopener">https://nic.eu.org/opendomains.html</a></p><hr><h2 id="0x01-注册申请"><a href="#0x01-注册申请" class="headerlink" title="0x01 注册申请"></a>0x01 注册申请</h2><p>在注册一个eu.org免费域名前，你需要先准备<code>好一个邮箱地址和注册一个Hostry账号</code>才能保证在注册的过程中不会遇到任何的阻碍。</p><ul><li>邮箱地址: google Gmail 、foxmail、QQ 都是可以的邮箱注册（此处相信大家都有邮箱）</li><li>注册Hostry账号以获取免费DNS解析服务（在申请时不建议采用 dnspod ）</li></ul><h3 id="如何注册Hostry获取免费DNS解析服务"><a href="#如何注册Hostry获取免费DNS解析服务" class="headerlink" title="如何注册Hostry获取免费DNS解析服务?"></a>如何注册Hostry获取免费DNS解析服务?</h3><p>描述：HOSTRY 作为一家可靠且成熟的托管服务提供商，HOSTRY为在线企业提供了大量不同的托管选项，专注于内容交付网络（CDN）、虚拟专用服务器（VPS）、专用服务器和其他解决方案，以确保为客户提供高质量的web托管服务。<br>此处我们主要使用 HOSTRY 其 DNS 解析服务来加快域名申请所占用审核的时间，没有选择 dnspod 是因为有可能在申请免费域名验证解析时会产生错误从而增加审核时间，其次是使用 dnspod 需要进行实名认证，所以推荐使用 HOSTRY 在域名审批通过后再使用 dnspod 来进行解析。</p><ol><li>访问 hostry 官网进行注册用户, 注册地址: <a href="https://hostry.com/register/" target="_blank" rel="noopener">https://hostry.com/register/</a>, 输入注册邮箱以及相关的注册信息（反正只用一次信息不一定填真的），然后你再邮箱中会收到一条激活信息进行（<code>ACTIVATE ACCOUNT</code>）即可。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009114727.png" alt="WeiyiGeek.注册hostry" title="" class="">                <p>WeiyiGeek.注册hostry</p>            </figure><p>温馨提示：注册地址邮编自行Google、百度即可。</p><ol start="2"><li>注册完毕后即可进行创建免费的DNS解析，创建地址：<a href="https://hostry.com/products/dns/，其无主机DNS使您的DNS更快、更安全，并且对条目或请求的数量没有限制。" target="_blank" rel="noopener">https://hostry.com/products/dns/，其无主机DNS使您的DNS更快、更安全，并且对条目或请求的数量没有限制。</a><blockquote><p>例如，输入要注册的域名 <code>wygk.eu.org &gt; CREATE</code> 进行创建即可。</p></blockquote></li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009124252.png" alt="WeiyiGeek.创建需要申请的域名解析" title="" class="">                <p>WeiyiGeek.创建需要申请的域名解析</p>            </figure><p>温馨提示：此处需要验证一下eu.org要注册的域名是否被注册过了，如果出现如下图片中的情况表示已注册 (此处这是我已经申请下的免费域名)，验证地址：<a href="https://tool.dnspod.cn/" target="_blank" rel="noopener">https://tool.dnspod.cn/</a></p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009115711.png" alt="WeiyiGeek.dnspod验证eu.org域名是否被注册" title="" class="">                <p>WeiyiGeek.dnspod验证eu.org域名是否被注册</p>            </figure><p>至此，注册完毕!</p><p><br/></p><h3 id="如何注册eu-org域名"><a href="#如何注册eu-org域名" class="headerlink" title="如何注册eu.org域名?"></a>如何注册eu.org域名?</h3><ol><li>在 Google Chrome 或其他浏览器 输入eu.org 然后登入 <a href="https://nic.eu.org/，点击" target="_blank" rel="noopener">https://nic.eu.org/，点击</a> Register 进行创建用户，输入如下账户邮箱、姓名、地址等相关信息,然后将会在邮箱里收到一封验证账户的短信。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009125606.png" alt="WeiyiGeek.注册验证 eu.org 账户" title="" class="">                <p>WeiyiGeek.注册验证 eu.org 账户</p>            </figure><p>温馨提示：输入Name时姓名首字母要大写，并且中间有空格，里面的地址随意在百度中找寻一个英文地址即可。</p><ol start="2"><li>注册成功登录后，点击 new Domain 创建上述自定义的域名，此处还是以<code>wygk.eu.org</code>申请的域名为例，填写如下信息以及NameServers信息，填写完毕后点击submit进行提交。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009131006.png" alt="WeiyiGeek.创建自定义eu.org二级域名" title="" class="">                <p>WeiyiGeek.创建自定义eu.org二级域名</p>            </figure><ol start="3"><li>提交后将进行域名 <code>server names + replies on SOA + replies on NS</code> 认证记录，如出现下图所示则表示申请提交验证域名NS记录成功审核审核下发，我在两天后便收到了成功的邮件信息。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---- Servers and domain names check</span><br><span class="line">Getting IP <span class="keyword">for</span> NS1.HOSTRY.COM: 185.186.246.19</span><br><span class="line">Getting IP <span class="keyword">for</span> NS2.HOSTRY.COM: 206.54.189.187</span><br><span class="line">Getting IP <span class="keyword">for</span> NS3.HOSTRY.COM: 195.123.233.100</span><br><span class="line">Getting IP <span class="keyword">for</span> NS4.HOSTRY.COM: 45.32.157.198</span><br><span class="line"></span><br><span class="line">---- Checking SOA records <span class="keyword">for</span> WYGK.EU.ORG</span><br><span class="line">SOA from NS1.HOSTRY.COM at 185.186.246.19: serial 2022100702 (12.916 ms)</span><br><span class="line">SOA from NS2.HOSTRY.COM at 206.54.189.187: serial 2022100702 (114.235 ms)</span><br><span class="line">SOA from NS3.HOSTRY.COM at 195.123.233.100: serial 2022100702 (74.804 ms)</span><br><span class="line">SOA from NS4.HOSTRY.COM at 45.32.157.198: serial 2022100702 (99.779 ms)</span><br><span class="line"></span><br><span class="line">---- Checking NS records <span class="keyword">for</span> WYGK.EU.ORG</span><br><span class="line">NS from NS1.HOSTRY.COM at 185.186.246.19: ok (12.374 ms)</span><br><span class="line">NS from NS2.HOSTRY.COM at 206.54.189.187: ok (114.638 ms)</span><br><span class="line">NS from NS3.HOSTRY.COM at 195.123.233.100: ok (75.439 ms)</span><br><span class="line">NS from NS4.HOSTRY.COM at 45.32.157.198: ok (101.228 ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">No error, storing <span class="keyword">for</span> validation...  <span class="comment"># 表示申请提交验证域名NS记录成功</span></span><br><span class="line">Saved as request 20221007160025-arf-37642</span><br><span class="line"></span><br><span class="line">Done</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009131635.png" alt="WeiyiGeek.域名申请审核成功" title="" class="">                <p>WeiyiGeek.域名申请审核成功</p>            </figure><hr><h2 id="0x02-解析配置"><a href="#0x02-解析配置" class="headerlink" title="0x02 解析配置"></a>0x02 解析配置</h2><h3 id="如何将注册eu-org域名解析改为Cloudflare并指向Github-Pages"><a href="#如何将注册eu-org域名解析改为Cloudflare并指向Github-Pages" class="headerlink" title="如何将注册eu.org域名解析改为Cloudflare并指向Github Pages?"></a>如何将注册eu.org域名解析改为Cloudflare并指向Github Pages?</h3><p>描述：此处dnspod实名认证不在累述，你不一定要选择dnspod你也可以继续使用HOSTRY提供的免费DNS服务，或者选择Cloudflare提供的DNS解析服务都是可以的，此处以Cloudflare为例（此处假设你已经有了Cloudflare账号，没有的朋友去注册一个即可）。</p><ol><li>访问并登录 cloudflare 面板，地址：<a href="https://dash.cloudflare.com/login" target="_blank" rel="noopener">https://dash.cloudflare.com/login</a> , 然后添加刚才注册的站点，选择 Free 套餐即可，点击继续。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009132752.png" alt="WeiyiGeek.在cloudflare添加域名" title="" class="">                <p>WeiyiGeek.在cloudflare添加域名</p>            </figure><ol start="2"><li>设置完成后我们需要到 eu.org 注册机构帐户中将,将 HOSTRY 替换为 Cloudflare 的名称服务器。</li></ol><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009133321.png" alt="WeiyiGeek.在注册机构中域名替换为 Cloudflare 的名称服务器" title="" class="">                <p>WeiyiGeek.在注册机构中域名替换为 Cloudflare 的名称服务器</p>            </figure><ol start="3"><li>验证 eu.org 域名修改后的 NameServer 服务器地址。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;nslookup -qt=ns wygk.eu.org</span><br><span class="line">服务器:  public2.alidns.com</span><br><span class="line">Address:  223.6.6.6</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">wygk.eu.org     nameserver = bayan.ns.cloudflare.com</span><br><span class="line">wygk.eu.org     nameserver = vita.ns.cloudflare.com</span><br></pre></td></tr></table></figure><ol start="4"><li>在 DNS 提供商 cloudflare 面板中添加 cname 记录解析，指向我 Github Pages 的 weiyigeek.github.io 博主主页。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt=a www.wygk.eu.org 223.6.6.6</span><br><span class="line">服务器:  public2.alidns.com</span><br><span class="line">Address:  223.6.6.6</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    weiyigeek.github.io</span><br><span class="line">Addresses:  185.199.111.153</span><br><span class="line">          185.199.110.153</span><br><span class="line">          185.199.109.153</span><br><span class="line">          185.199.108.153</span><br><span class="line">Aliases:  www.wygk.eu.org</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="https://www.wygk.eu.org/index.html" target="_blank" rel="noopener">https://www.wygk.eu.org/index.html</a> 站点，至此一个免费的域名申请到使用成果</p><figure class="image-box">                <img src="https://img.weiyigeek.top/2022/5/20221009143134.png" alt="WeiyiGeek.免费域名使用" title="" class="">                <p>WeiyiGeek.免费域名使用</p>            </figure><p>至此，实践完毕 !</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言简述&quot;&gt;&lt;a href=&quot;#0x00-前言简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言简述&quot;&gt;&lt;/a&gt;0x00 前言简述&lt;/h2&gt;&lt;p&gt;描述：在逛B站的时候发现可以免费注册申请永久的eu.org顶级网域，一想到自己现在域名【weiyigeek.top】后续续费要上百人民币, 所以我随手就马上去注册了一个（白嫖谁不爱），下面将快速申请注册 eu.org 域名注意事项进行说明，帮助需要申请免费 eu.org 域名的朋友。&lt;/p&gt;
&lt;p&gt;EU.org 是一个从1996开始提供免费域名的组织, 其官网地址是 &lt;a href=&quot;https://nic.eu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nic.eu.org/&lt;/a&gt; ，他帮助学生、爱好者或者非营利组织不用花费购买域名就可能拥有自己的免费域名，虽然 &lt;a href=&quot;https://nic.eu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;eu.org&lt;/a&gt; 网域切确来说这是一个子域名（Subdomain）或者二级域名，但是根据一些网站的资讯，有许多大型互联网公司，像是 Google, Cloudflare, Bing 等厂商都已经将eu.org域名当成是一个顶级网域了。&lt;/p&gt;
&lt;p&gt;值得注意的是，我们虽然可以进行免费申请，但要滥用申请，作为申请者应该必须遵守互联网标准(Rfc)，不要利用其来发送垃圾邮件或网络钓鱼以及分发恶意软件，毕竟提供免费的域名的组织，谁也不想其取消免费服务，其次不要多次注册申请占用域名，尽量只是注册需要的域名，通常来说注册两个域名基本就满足日常使用，一个正式站点域名和一个测试站点域名。&lt;/p&gt;</summary>
    
    
    
    <category term="网络资源分享" scheme="https://blog.weiyigeek.top/categories/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="域名申请" scheme="https://blog.weiyigeek.top/tags/%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7/"/>
    
  </entry>
  
  <entry>
    <title>自媒体文章/网络资源分享/test</title>
    <link href="https://blog.weiyigeek.top/2022/10-9-index.html"/>
    <id>https://blog.weiyigeek.top/2022/10-9-index.html</id>
    <published>2022-10-09T02:58:28.441Z</published>
    <updated>2022-10-09T02:58:28.441Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>个人规划/Untitled</title>
    <link href="https://blog.weiyigeek.top/2022/10-6-index.html"/>
    <id>https://blog.weiyigeek.top/2022/10-6-index.html</id>
    <published>2022-10-06T03:58:07.936Z</published>
    <updated>2022-10-06T03:58:07.936Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>9.使用RedisInsight工具对Redis集群CURD操作及数据可视化和性能监控</title>
    <link href="https://blog.weiyigeek.top/2022/9-20-686.html"/>
    <id>https://blog.weiyigeek.top/2022/9-20-686.html</id>
    <published>2022-09-20T14:35:30.000Z</published>
    <updated>2022-09-20T14:13:29.028Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-快速介绍"><a href="#0x00-快速介绍" class="headerlink" title="0x00 快速介绍"></a>0x00 快速介绍</h2><p><strong>什么是RedisInsight?</strong></p><blockquote><p>RedisInsight 是一个直观而高效的 Redis GUI (<code>可视化工具</code>)，它提供了设计、开发和优化 Redis 应用程序的功能，查询、分析您的 Redis 数据并与之交互，简化您的 Redis 应用程序开发 。（必备）<br>RedisInsight 现在采用了基于流行的 <code>Electron</code> 框架的全新技术堆栈, 它可以跨平台运行，支持 Linux、Windows 和 MacOS。 </p></blockquote><p><strong>为啥用RedisInsight?</strong><br>描述：RedisInsight 提供直观的 Redis 管理 GUI，有助于优化您在应用程序中对 Redis 的使用，相比于其他可视化工具，其实现的功能更强大、执行效率更改，通用性更好等特定，</p><p>下面列举出 RedisInsight 的亮点功能：</p><ul><li>唯一支持 Redis Cluster 的 GUI 工具；</li><li>可以基于 Browser 的界面来进行搜索键、查看和编辑数据；</li><li>支持基于 SSL/TLS 的连接，同时还可以在界面上进行内存分析；</li><li>支持连接 Redis Open Source、 Redis Stack 、 Redis Enterprise Software 、 Redis Enterprise Cloud 和 Amazon ElastiCache等系统；</li><li>支持自定义扩展插件实现更多功能。</li></ul><p><br/></p><p>RedisInsight 支持的功能：</p><ul><li>直观且高效的 GUI: 允许您与数据库交互、监控和管理您的数据。</li><li>CRUD支持更广泛：允许对列表、哈希、字符串、集、排序集以及流Stream 数据库结构支持 CRUD 。</li><li>多行查询编辑器：进行构建查询、探索结果、优化和快速迭代，支持 JSON 、 Search 、 Graph 、 Streams 、 Time Series 和 RedisGears 。 </li><li>内存分析：通过密钥模式、过期密钥和高级搜索来分析内存使用情况，以识别内存问题， 利用建议来减少内存使用量。 </li><li>命令调试: 识别顶部键、键模式和命令，按集群所有节点的客户端 IP 地址、密钥或命令进行过滤，有效地调试 Lua 脚本，并利用 Redis CLI 提供语法突出显示和自动完成功能，并采用集成帮助来提供直观的即时帮助。</li><li>指标监控：通过界面深入了解实时性能指标、检查慢速命令并管理 Redis 配置。 </li><li>发布/订阅：支持 Redis 发布/订阅，支持订阅频道并将消息发布到频道</li><li>数据浏览：浏览、筛选、可视化您的键值 Redis 数据结构，并查看不同格式（包括 JSON、十六进制、ASCII 等）的键值</li><li>平台兼容：适用于苹果操作系统（包括 M1）、Windows和 Linux</li></ul><p>补充：官方推荐的其他Redis数据库相关工具查看 [ <a href="https://redis.io/docs/tools/" target="_blank" rel="noopener">https://redis.io/docs/tools/</a> ]，当然你也可以可以选择客户端桌面管理工具(例如，AnotherRedisDesktopManage [ <a href="https://github.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">https://github.com/qishibo/AnotherRedisDesktopManager</a> ] )</p><hr><h2 id="0x01-安装部署"><a href="#0x01-安装部署" class="headerlink" title="0x01 安装部署"></a>0x01 安装部署</h2><p>描述：redis-insight 与现在大多数软件一样，有多种安装方式其中用得比较多的就是二进制、源码编译以及容器化部署的方式。</p><h3 id="二进制方式"><a href="#二进制方式" class="headerlink" title="二进制方式"></a>二进制方式</h3><p>描述：我们需要在Redis官方进行下载 redis-insight 二进制包然后进行安装部署，有可能国内下载比较缓慢，此时我已将其打包下来，方便大家下载。</p><p>Redis GUI redis-insight 工具 下载: </p><ul><li><a href="https://share.weiyigeek.top/d/36158960-51461225-1d5ee1?p=2088" target="_blank" rel="noopener">https://share.weiyigeek.top/d/36158960-51461225-1d5ee1?p=2088</a> (访问密码: 2088)</li><li><a href="https://url60.ctfile.com/d/36158960-51461225-1d5ee1?p=2088" target="_blank" rel="noopener">https://url60.ctfile.com/d/36158960-51461225-1d5ee1?p=2088</a> (访问密码: 2088)</li></ul><p><strong>环境依赖</strong></p><table><thead><tr><th style="text-align:center">Requirement</th><th style="text-align:center">Ubuntu</th><th style="text-align:center">MacOS</th><th style="text-align:center">Windows</th></tr></thead><tbody><tr><td style="text-align:center">Operating System</td><td style="text-align:center">Ubuntu 18.04 LTS or later</td><td style="text-align:center">MacOS 10.13 or later</td><td style="text-align:center">Windows 10</td></tr><tr><td style="text-align:center">Memory (RAM)</td><td style="text-align:center">8GB</td><td style="text-align:center">8GB</td><td style="text-align:center">8GB</td></tr><tr><td style="text-align:center">Processor</td><td style="text-align:center">64 bit</td><td style="text-align:center">64 bit</td><td style="text-align:center">32 bit or 64 bit</td></tr></tbody></table><p><br/></p><p><strong>安装环境</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release  -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04.3 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br><span class="line"></span><br><span class="line">$ lscpu  | grep <span class="string">"CPU(s)"</span></span><br><span class="line">CPU(s):                          4</span><br><span class="line">On-line CPU(s) list:             0-3</span><br><span class="line"></span><br><span class="line">$ lsmem  | grep <span class="string">"Total online memory"</span></span><br><span class="line">Total online memory:       8G</span><br></pre></td></tr></table></figure></p><p><br/></p><p><strong>安装流程</strong></p><p>步骤 01.官网下载 RedisInsight 上传到 /usr/local/bin 目录 并打开 shell 终端赋予其下载权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mv redisinsight-linux64-1.13.0 redisinsight-linux64</span><br><span class="line">chmod +x redisinsight-linux64</span><br></pre></td></tr></table></figure></p><p>步骤 02.设置Redisinsight启动所需的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.redisinsight</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIHOST=0.0.0.0"</span> &gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIPORT=8081"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RIHOMEDIR=~/.redisinsight"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export RILOGDIR=~/.redisinsight"</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>温馨提示：如果使用了<code>REDISINSIGHT_HOST, REDISINSIGHT_PORT, REDISINSIGHT_HOME_DIR and LOG_DIR</code>等环境变量便会出现如下提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING 2022-09-20 05:56:33,461 redisinsight_startup REDISINSIGHT_HOST, REDISINSIGHT_PORT, REDISINSIGHT_HOME_DIR and LOG_DIR environment variables will be deprecated in the version v1.9.</span><br><span class="line">Please use RIHOST, RIPORT, RIHOMEDIR and RILOGDIR environment variables for setting host, port, db directory and log directory respectively.</span><br></pre></td></tr></table></figure></p><p>步骤 03.启动Redisinsight并后台运行它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  后台运行</span></span><br><span class="line">nohup /usr/<span class="built_in">local</span>/bin/redisinsight-linux64 &gt; ~/.redisinsight/console.log 2&gt;&amp;1 &amp;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">步骤 04.查看 redisinsight 进程运行情况</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">root@weiyigeek:~<span class="comment"># ps aux | grep "redisinsight"</span></span><br><span class="line">root        6592  8.0  0.0   3220  2212 pts/0    S    13:59   0:00 /usr/<span class="built_in">local</span>/bin/redisinsight-linux64</span><br><span class="line">root        6593  8.9  0.9 602080 74616 pts/0    Sl   13:59   0:00 /usr/<span class="built_in">local</span>/bin/redisinsight-linux64</span><br><span class="line">root        6602  0.0  0.0   6432   724 pts/0    S+   13:59   0:00 grep redisinsight</span><br><span class="line">root@weiyigeek:~<span class="comment"># netstat -ano | grep ":8081"</span></span><br><span class="line">tcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN      off (0.00/0/0)</span><br></pre></td></tr></table></figure><p>步骤 05.访问部署的redisinsight站点 <a href="http://10.20.172.201:8081/" target="_blank" rel="noopener">http://10.20.172.201:8081/</a> 进行下一步配置，继续配置你的 Redis 数据库，此处我已经搭建好了一个redis数据库如需搭建请参考此篇文章【<a href="https://blog.weiyigeek.top/2022/4-24-653.html">https://blog.weiyigeek.top/2022/4-24-653.html</a>】，点击连接到 Redis 数据库进入到下一步。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143243.png" alt="WeiyiGeek.redisinsight站点" title="" class="">                <p>WeiyiGeek.redisinsight站点</p>            </figure><p>步骤 06.进行配置Redis数据库信息，此处我是单节点进行演示，输入主机、端口、名称、以及redis密码。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143416.png" alt="WeiyiGeek.配置Redis数据库信息" title="" class="">                <p>WeiyiGeek.配置Redis数据库信息</p>            </figure><p>至此安装配置完成，使用将在后续实践！</p><p><br/></p><h3 id="容器化方式"><a href="#容器化方式" class="headerlink" title="容器化方式"></a>容器化方式</h3><p>描述：当下大多数企业的应用都是在容器环境中运行，所以redis官方也提供了相应容器镜像以及在kubernetes中部署的资源清单，下述将演示在 Kubernetes 上安装 RedisInsight，安装高可用的K8S可以参照此篇文章 【 <a href="https://blog.weiyigeek.top/2022/6-7-664.html">https://blog.weiyigeek.top/2022/6-7-664.html</a> 】</p><p>镜像主页：<a href="https://hub.docker.com/r/redislabs/redisinsight/tags" target="_blank" rel="noopener">https://hub.docker.com/r/redislabs/redisinsight/tags</a><br>镜像名称：<code>docker pull redislabs/redisinsight:1.13.0</code></p><p><strong>部署方式</strong></p><p>步骤 01.在 k8s 集群中创建一个 RedisInsight 部署和服务 YAML 文件资源清单，注意此处我使用了动态存储卷，如果有需要的部署nfs动态存储卷可参考此篇文章（ <a href="https://blog.weiyigeek.top/2022/6-7-664.html">https://blog.weiyigeek.top/2022/6-7-664.html</a> ）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tee</span> <span class="string">redisinsight-1.13.0.yaml</span> <span class="string">&lt;&lt;'EOF'</span></span><br><span class="line"><span class="comment"># RedisInsight service with name 'redisinsight-service'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">LoadBalancer</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># RedisInsight persistant storage </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight-pv-claim</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOnce</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">2</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  storageClassName:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># RedisInsight deployment with name 'redisinsight'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redisinsight</span>   <span class="comment"># deployment name</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">redisinsight</span>  <span class="comment"># deployment label</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span>          <span class="comment"># a single replica pod</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">Recreate</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">redisinsight</span> <span class="comment"># which pods is the deployment managing, as defined by the pod template</span></span><br><span class="line"><span class="attr">  template:</span>             <span class="comment"># pod template</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">redisinsight</span> <span class="comment"># label for pod/s</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">          persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">            claimName:</span> <span class="string">redisinsight-pv-claim</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">init</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">          command:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'-c'</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">|</span></span><br><span class="line"><span class="string">                            chown -R 1001 /db</span></span><br><span class="line"><span class="string"></span><span class="attr">          resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/db</span></span><br><span class="line"><span class="attr">          terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">          terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span>  <span class="string">redisinsight</span>                  <span class="comment"># Container name (DNS_LABEL, unique)</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">redislabs/redisinsight:1.13.0</span> <span class="comment"># Hub Image</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span>        <span class="comment"># Pull Policy</span></span><br><span class="line"><span class="attr">          env:</span> </span><br><span class="line"><span class="attr">          - name:</span> <span class="string">RIHOST</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">RIPORT</span></span><br><span class="line"><span class="attr">            value:</span> <span class="string">"8001"</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">db</span> </span><br><span class="line"><span class="attr">            mountPath:</span> <span class="string">/db</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">8001</span>        <span class="comment"># exposed container port and protocol</span></span><br><span class="line"><span class="attr">            protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">          livenessProbe:</span></span><br><span class="line"><span class="attr">            httpGet:</span></span><br><span class="line">              <span class="string">path</span> <span class="string">:</span> <span class="string">/healthcheck/</span>     <span class="comment"># exposed RI endpoint for healthcheck</span></span><br><span class="line"><span class="attr">              port:</span> <span class="number">8001</span>               <span class="comment"># exposed container port</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">5</span>      <span class="comment"># number of seconds to wait after the container starts to perform liveness probe</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">5</span>            <span class="comment"># period in seconds after which liveness probe is performed</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">1</span>         <span class="comment"># number of liveness probe failures after which container restarts</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>步骤02.在k8s集群中部署 redisinsight v1.13.0 应用、服务以及持久化卷，查看其部署状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace dev</span><br><span class="line">namespace/dev created</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f redisinsight-1.13.0.yaml</span><br><span class="line">service/redisinsight-service created</span><br><span class="line">persistentvolumeclaim/redisinsight-pv-claim created</span><br><span class="line">deployment.apps/redisinsight created</span><br><span class="line"></span><br><span class="line">$ kubectl get pod,svc -n dev -o wide</span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/redisinsight-55d44b5bb-xzggg   1/1     Running   0          3m22s   10.66.182.217   weiyigeek-226   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE     SELECTOR</span><br><span class="line">service/redisinsight-service   LoadBalancer   10.108.198.8   &lt;pending&gt;     80:31793/TCP   3m22s   app=redisinsight</span><br><span class="line"></span><br><span class="line">$ curl -I 10.66.182.217:8001</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: max-age=0, no-cache, no-store, must-revalidate, private</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口转发</span></span><br><span class="line">$ kubectl -n dev port-forward deployment/redisinsight --address 0.0.0.0 30081:8001</span><br><span class="line">Forwarding from 0.0.0.0:30081 -&gt; 8001</span><br><span class="line">Handling connection <span class="keyword">for</span> 30081</span><br><span class="line">Handling connection <span class="keyword">for</span> 30081</span><br></pre></td></tr></table></figure><p>步骤 03.成功应用并完成部署和服务，我们可通过浏览器访问 192.168.1.107:31793 便可看到如下图所示界面。<br><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143243.png" alt="WeiyiGeek.redisinsight站点" title="" class="">                <p>WeiyiGeek.redisinsight站点</p>            </figure></p><p>至此，在k8s集群中部署完毕</p><hr><h2 id="0x02-实践应用"><a href="#0x02-实践应用" class="headerlink" title="0x02 实践应用"></a>0x02 实践应用</h2><h3 id="1-配置连接的Redis数据库"><a href="#1-配置连接的Redis数据库" class="headerlink" title="1.配置连接的Redis数据库"></a>1.配置连接的Redis数据库</h3><p>描述：在使用任何工具处理数据库之前，必须先添加数据库（Add Database），以便 RedisInsight 可以连接到该数据库，添加独立的 Redis 数据库 这是只有一台 Redis 服务器的 Redis 数据库最简单的设置，当然也支持独立 Redis 集群 Redis Sentinel 或者 具有TLS认证的Redis数据库。<br>注意：目前 RedisInsight 支持 Redis 版本 4 及更高版本。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920143416.png" alt="WeiyiGeek.配置Redis数据库信息" title="" class="">                <p>WeiyiGeek.配置Redis数据库信息</p>            </figure><h3 id="2-查看Redis数据库实时统计信息"><a href="#2-查看Redis数据库实时统计信息" class="headerlink" title="2.查看Redis数据库实时统计信息"></a>2.查看Redis数据库实时统计信息</h3><p>描述：点击配置好的Redis数据目标，即可看到如下overview页面</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920173633.png" alt="WeiyiGeek.此Redis数据库的实时统计信息" title="" class="">                <p>WeiyiGeek.此Redis数据库的实时统计信息</p>            </figure><h3 id="3-操作Redis数据库中的数据"><a href="#3-操作Redis数据库中的数据" class="headerlink" title="3.操作Redis数据库中的数据"></a>3.操作Redis数据库中的数据</h3><p>描述: 可以通过使用 Browser（图形） 或者 cli（命令行）进行Redis数据库的CURD，如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920174712.png" alt="WeiyiGeek.Redis数据库的CURD操作" title="" class="">                <p>WeiyiGeek.Redis数据库的CURD操作</p>            </figure><h3 id="4-操作Redis数据库中的流Streams数据"><a href="#4-操作Redis数据库中的流Streams数据" class="headerlink" title="4.操作Redis数据库中的流Streams数据"></a>4.操作Redis数据库中的流Streams数据</h3><p>描述: 可以通过使用 Streams 选项进行 Redis 流操作。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920174755.png" alt="WeiyiGeek.Redis数据库的流操作" title="" class="">                <p>WeiyiGeek.Redis数据库的流操作</p>            </figure><h3 id="5-性能内存、慢查询分析"><a href="#5-性能内存、慢查询分析" class="headerlink" title="5.性能内存、慢查询分析"></a>5.性能内存、慢查询分析</h3><p>描述：RedisInsight 提供了强大的分析功能，支持内存使用分析、分析器(<code>在Redis中执行的命令过程摘要分析</code>)以及慢日志查询。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920180241.png" alt="WeiyiGeek.Redis数据库分析" title="" class="">                <p>WeiyiGeek.Redis数据库分析</p>            </figure><h3 id="6-可视化配置redis数据库"><a href="#6-可视化配置redis数据库" class="headerlink" title="6.可视化配置redis数据库"></a>6.可视化配置redis数据库</h3><p>描述：在Database选项卡中我们可以直接配置Redis数据库，包括其网络配置、通用配置以及快照、配置等等。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220920175742.png" alt="WeiyiGeek.在线配置redis数据库" title="" class="">                <p>WeiyiGeek.在线配置redis数据库</p>            </figure><p>当然对应devops来说使用最多的还是CURD以及性能分析以及优化，此工具还是非常方便的，如需解更多其它功能需的朋友，可参考 redisinsight 用户使用文档：<a href="https://docs.redis.com/latest/ri/using-redisinsight/" target="_blank" rel="noopener">https://docs.redis.com/latest/ri/using-redisinsight/</a></p><hr><h2 id="0x03-入坑出坑"><a href="#0x03-入坑出坑" class="headerlink" title="0x03 入坑出坑"></a>0x03 入坑出坑</h2><h3 id="问题1-运行-RedisInsight-v2-linux-x86-64-时出现不存在libatk-1-0-so-0-libatk-bridge-2-0-so-0-libcups-so-2-libgtk-3-so-0等错误"><a href="#问题1-运行-RedisInsight-v2-linux-x86-64-时出现不存在libatk-1-0-so-0-libatk-bridge-2-0-so-0-libcups-so-2-libgtk-3-so-0等错误" class="headerlink" title="问题1.运行 RedisInsight-v2-linux-x86_64 时出现不存在libatk-1.0.so.0/libatk-bridge-2.0.so.0/libcups.so.2/libgtk-3.so.0等错误"></a>问题1.运行 RedisInsight-v2-linux-x86_64 时出现不存在<code>libatk-1.0.so.0/libatk-bridge-2.0.so.0/libcups.so.2/libgtk-3.so.0</code>等错误</h3><ul><li><p>错误信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># wget https://download.redisinsight.redis.com/latest/RedisInsight-v2-linux-x86_64.AppImage</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># mv RedisInsight-v2-linux-x86_64.AppImage RedisInsight</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># chmod +x RedisInsight</span></span><br><span class="line">root@weiyigeek:/usr/<span class="built_in">local</span>/bin<span class="comment"># ./RedisInsight</span></span><br><span class="line">/tmp/.mount_RedisIuCY68M/redisinsight: error <span class="keyword">while</span> loading shared libraries: libatk-1.0.so.0: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisIbwUuBs/redisinsight: error <span class="keyword">while</span> loading shared libraries: libatk-bridge-2.0.so.0: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisIb3qNiD/redisinsight: error <span class="keyword">while</span> loading shared libraries: libcups.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/tmp/.mount_RedisI9GZsHC/redisinsight: error <span class="keyword">while</span> loading shared libraries: libgtk-3.so.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></li><li><p>解决办法：由于我的测试系统是Ubuntu的则使用apt命令安装错误提示中的依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install libatk1.0-dev</span><br><span class="line">apt install libatk-bridge2.0-dev</span><br><span class="line">apt install libcups2-dev</span><br><span class="line">apt install libgtk-3-dev</span><br></pre></td></tr></table></figure></li></ul><p><br/></p><h3 id="问题2-运行-RedisInsight-v2-linux-x86-64-时出现-root-without-no-sandbox-is-not-supported-错误提示："><a href="#问题2-运行-RedisInsight-v2-linux-x86-64-时出现-root-without-no-sandbox-is-not-supported-错误提示：" class="headerlink" title="问题2.运行 RedisInsight-v2-linux-x86_64 时出现 root without --no-sandbox is not supported 错误提示："></a>问题2.运行 RedisInsight-v2-linux-x86_64 时出现 <code>root without --no-sandbox is not supported</code> 错误提示：</h3><p>错误信息：<code>[0920/133850.852943:FATAL:electron_main_delegate.cc(292)] Running as root without --no-sandbox is not supported. See https://crbug.com/638180.</code><br>解决办法：在低权限用户中执行<code>./RedisInsight</code>启动RedisInsight服务即可。</p><hr><h2 id="0x0n-参考来源"><a href="#0x0n-参考来源" class="headerlink" title="0x0n 参考来源"></a>0x0n 参考来源</h2><p>官网地址：<a href="https://redis.com/redis-enterprise/redis-insight/" target="_blank" rel="noopener">https://redis.com/redis-enterprise/redis-insight/</a><br>项目源码：<a href="https://github.com/RedisInsight/RedisInsight" target="_blank" rel="noopener">https://github.com/RedisInsight/RedisInsight</a><br>项目文档：<a href="https://docs.redis.com/latest/ri" target="_blank" rel="noopener">https://docs.redis.com/latest/ri</a><br>下载地址：<a href="https://redis.com/redis-enterprise/redis-insight/#insight-form" target="_blank" rel="noopener">https://redis.com/redis-enterprise/redis-insight/#insight-form</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Database" scheme="https://blog.weiyigeek.top/categories/Database/"/>
    
    
    <category term="Redis" scheme="https://blog.weiyigeek.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Kaniko在Kubernetes集群中快速构建推送容器镜像</title>
    <link href="https://blog.weiyigeek.top/2022/9-1-684.html"/>
    <id>https://blog.weiyigeek.top/2022/9-1-684.html</id>
    <published>2022-09-01T09:37:47.000Z</published>
    <updated>2022-09-09T02:45:54.933Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><h3 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h3><h4 id="什么是Kaniko"><a href="#什么是Kaniko" class="headerlink" title="什么是Kaniko?"></a>什么是Kaniko?</h4><blockquote><p>kaniko 是一个在 containerd 或 Kubernetes 集群内从 Dockerfile 构建容器镜像的工具 ( Build Container Images In Kubernetes )。</p></blockquote><figure class="image-box">                <img src="https://raw.githubusercontent.com/GoogleContainerTools/kaniko/main/docs/demo.gif" alt="官方介绍" title="" class="">                <p>官方介绍</p>            </figure><p>温馨提示: kaniko不是谷歌官方发布支持的产品.</p><h4 id="为啥用Kaniko"><a href="#为啥用Kaniko" class="headerlink" title="为啥用Kaniko?"></a>为啥用Kaniko?</h4><blockquote><p>由于 kaniko 不依赖于 Docker 守护进程，并且完全在用户空间中执行 Dockerfile 中的每个命令，这使得能够在轻松或安全地运行在<code>无Docker守护程序的环境</code>（如标准Kubernetes集群 V1.24.x）中构建容器映像。<br>在 Kubernetes V1.24.x 版本之后默认采用 containerd.io 作为缺省的cri，不在支持 docker-shim 意味着我们不需要安装 docker 环境</p></blockquote><h4 id="Kaniko-是如何工作的"><a href="#Kaniko-是如何工作的" class="headerlink" title="Kaniko 是如何工作的?"></a>Kaniko 是如何工作的?</h4><p>kaniko 执行器镜像负责从 Dockerfile 构建镜像并将其推送到注册表，其流程大致如下：</p><ul><li>首先在执行者图像中，我们提取基础镜像的文件系统（Dockerfile 中的 FROM 镜像）。 </li><li>其次我们执行 Dockerfile 中的命令，之后在用户空间中对文件系统进行快照每一个。 </li><li>然后在每个命令之后，我们将一层更改的文件附加到基础 图像（如果有）并更新图像元数据。 </li></ul><h4 id="Kaniko-已知功能问题"><a href="#Kaniko-已知功能问题" class="headerlink" title="Kaniko 已知功能问题"></a>Kaniko 已知功能问题</h4><ul><li>kaniko 不支持构建 Windows 容器。 </li><li>kaniko 不支持 v1 Registry API。(由于其不安全性当前基本都是使用V2协议, 例如 Harbor)</li><li>kaniko 不支持在除官方kaniko映像之外的任何Docker映像中运行二进制Kanico可执行文件（即YMMV）。</li></ul><h4 id="kaniko-构建上下文"><a href="#kaniko-构建上下文" class="headerlink" title="kaniko 构建上下文"></a>kaniko 构建上下文</h4><p>描述: kaniko 的构建上下文与您发送 Docker 守护程序以进行映像构建的构建上下文非常相似；它代表一个包含 Dockerfile 的目录，kaniko 将使用它来构建您的图像。<br>例如, Dockerfile 中的 COPY 命令应该引用构建上下文中的文件, 所以您需要将构建上下文存储在 kaniko 可以访问的位置。 </p><p>目前kaniko 支持以下存储解决方案：</p><ul><li>GCS Bucket</li><li>S3 Bucket</li><li>Azure Blob Storage</li><li>Local Directory</li><li>Local Tar</li><li>Standard Input</li><li>Git Repository</li></ul><p>运行 kaniko 时，使用 <code>--context</code> 带有适当前缀的标志指定构建上下文的位置, 如果您不指定前缀 kaniko 将假定一个本地目录, 该参数可用值：</p><table><thead><tr><th style="text-align:left">Source</th><th>Prefix</th><th>Example</th></tr></thead><tbody><tr><td style="text-align:left">Local Directory</td><td>dir://[path to a directory in the kaniko container]</td><td><code>dir:///workspace</code></td></tr><tr><td style="text-align:left">Local Tar Gz</td><td>tar://[path to a .tar.gz in the kaniko container]</td><td><code>tar://path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Standard Input</td><td>tar://[stdin]</td><td><code>tar://stdin</code></td></tr><tr><td style="text-align:left">GCS Bucket</td><td>gs://[bucket name]/[path to .tar.gz]</td><td><code>gs://kaniko-bucket/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">S3 Bucket</td><td>s3://[bucket name]/[path to .tar.gz]</td><td><code>s3://kaniko-bucket/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Azure Blob Storage</td><td>https://[account].[azureblobhostsuffix]/[container]/[path to .tar.gz]</td><td><code>https://myaccount.blob.core.windows.net/container/path/to/context.tar.gz</code></td></tr><tr><td style="text-align:left">Git Repository</td><td>git://[repository url][#reference][#commit-id]</td><td><code>git://github.com/acme/myproject.git#refs/heads/mybranch#</code></td></tr></tbody></table><p>例如，要使用名为 kaniko-bucket 的 GCS 存储桶，您需要传入 <code>--context=gs://kaniko-bucket/path/to/context.tar.gz</code> 。</p><p>温馨提示：kaniko 允许的唯一标准输入是 <code>.tar.gz</code> 格式, 如果要创建压缩 tar，您可以运行 <code>tar -C &lt;path to build context&gt; -zcvf context.tar.gz .</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ls cache/</span><br><span class="line">Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩上下文目录</span></span><br><span class="line">$ tar -C cache/ -zcvf context.tar.gz .</span><br><span class="line">./</span><br><span class="line">./Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩文件</span></span><br><span class="line">$ tar -ztvf context.tar.gz</span><br><span class="line">drwxr-xr-x root/root         0 2022-09-08 23:03 ./</span><br><span class="line">-rw-r--r-- root/root        52 2022-09-08 23:04 ./Dockerfile</span><br></pre></td></tr></table></figure><h4 id="kaniko-缓存构建"><a href="#kaniko-缓存构建" class="headerlink" title="kaniko 缓存构建"></a>kaniko 缓存构建</h4><ul><li>Caching Layers ：kaniko 可以在远程存储库中缓存由RUN（由flag–cache-RUN-layers配置）和COPY（由flag–cache-COPY-layeers配置）命令创建的层。<blockquote><p>在执行命令之前 kaniko 会检查层的缓存，如果存在 kaniko将拉取并提取缓存层，而不是执行命令。如果没有 kaniko将执行命令，然后将新创建的层推送到缓存。<br>用户可以通过设置 <code>--cache=true</code> 标志选择缓存,并且可以通过<code>--cache-repo</code> 标志提供用于存储缓存层的远程存储库, 如果未提供此标志则将从提供的<code>--destination</code>推断缓存的repo。<br>温馨提示: 在缓存未命中后，kaniko无法从缓存中找到读取层，所有后续层都将在本地构建，而无需咨询缓存。</p></blockquote></li><li>Caching Base Images: kaniko 可以将图像缓存在本地目录中，该目录可以卷装载到KanikoPod中。为此必须首先填充缓存, 我们在 <code>gcr.io/kaniko-project/warmer</code> 提供了一个kaniko缓存预热映像：<blockquote><p>–image : 指定所需任意数量的图像, 填充缓存后 使用与上述相同的 <code>--cache=true</code> 标志选择缓存, 本地缓存的位置通过 <code>--cache-dir</code> 标志提供，默认为 <code>/cache</code> 与缓存预热器一样, 在实践中通常与 Kubernetes 集群和持久缓存卷一起使用。<br>示例： <code>docker run -v $(pwd):/workspace gcr.io/kaniko-project/warmer:latest --cache-dir=/workspace/cache --image=&lt;image to cache&gt; --image=&lt;another image to cache&gt;</code></p></blockquote></li></ul><hr><h2 id="0x01-部署使用"><a href="#0x01-部署使用" class="headerlink" title="0x01 部署使用"></a>0x01 部署使用</h2><h3 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h3><ul><li>kaniko 图像镜像</li><li>一个 Kubernetes 集群 或者 一个 Containerd 容器运行环境。</li><li>一个 dockerhub 帐户 用于将构建的图像公开。</li></ul><p><br/></p><h3 id="小试牛刀之在Kubernetes集群中构建并发布镜像"><a href="#小试牛刀之在Kubernetes集群中构建并发布镜像" class="headerlink" title="小试牛刀之在Kubernetes集群中构建并发布镜像"></a>小试牛刀之在Kubernetes集群中构建并发布镜像</h3><p>描述: 此处我们准备在一个K8S集群中使用kaniko提供的镜像，按照提供的Dockerfile指令进行镜像构建，并上传到 docker hub 仓库中，以下为操作流程、</p><p><strong>操作流程</strong><br>步骤 01.首先, 为了加快构建速度, 我们提前在集群中拉取 <code>gcr.io/kaniko-project/executor</code> 镜像到本地, 由于国内无法直接拉取此处我采用这篇<a href="https://blog.weiyigeek.top/2022/6-1-663.html">【使用Aliyun容器镜像服务对海外gcr、quay仓库镜像进行镜像拉取构建】</a> 文章中的方法进行拉取构建国外gcr.io仓库中的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处我已经创建了国内可以访问拉取的 executor 镜像, 不想在Aliyun容器镜像服务中进行创建拉取的朋友可以直接使用如下仓库地址。</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ctr 或者 crictl 进行镜像拉取</span></span><br><span class="line">$ crictl pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line">$ crictl images | grep <span class="string">"kaniko-executor"</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor  latest  da9592dbe1de3   25.8MB</span><br></pre></td></tr></table></figure><p>步骤 02.准备一个 Dockerfile 此处将 <code>registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor</code> 镜像打包上传到hub中作为演示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建存放dockerfile目录以及持久化缓存目录</span></span><br><span class="line">mkdir -vp /storage/dev/soft/kaniko/&#123;cache,demo&#125;</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTYPE=kaniko</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>步骤 03.创建一个授权令牌的 Secret , 此处以公共的docker hub为例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:</span></span><br><span class="line">~$ kubectl create secret docker-registry dockerhub --docker-server=&lt;your-registry-server&gt; --docker-username=&lt;your-name&gt; --docker-password=&lt;your-pword&gt; --docker-email=&lt;your-email&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数值:</span></span><br><span class="line"><span class="comment"># &lt;your-registry-server&gt; is your Private Docker Registry FQDN. (https://index.docker.io/v1/ for DockerHub)</span></span><br><span class="line"><span class="comment"># &lt;your-name&gt; is your Docker username.</span></span><br><span class="line"><span class="comment"># &lt;your-pword&gt; is your Docker password.</span></span><br><span class="line"><span class="comment"># &lt;your-email&gt; is your Docker email.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建示例: 此 docker-registry 将在 pod.yaml 配置中使用</span></span><br><span class="line">~$ kubectl create secret docker-registry dockerhub \</span><br><span class="line">--docker-server=https://index.docker.io/v1/ \</span><br><span class="line">--docker-username=weiyigeek \</span><br><span class="line">--docker-password=PASSWORD \</span><br><span class="line">--docker-email=master@weiyigeek.top</span><br><span class="line"><span class="comment"># secret/dockerhub created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建的 secrets 情况</span></span><br><span class="line">~$ kubectl get secrets dockerhub</span><br><span class="line">NAME        TYPE                             DATA   AGE</span><br><span class="line">dockerhub   kubernetes.io/dockerconfigjson   1      16s</span><br><span class="line"></span><br><span class="line">~$ kubectl get secrets dockerhub -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: eyJhdXRo*******VhsbE1qQXhPUT09In19fQ==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: dockerhub</span><br></pre></td></tr></table></figure></p><p>步骤 04.创建一个在k8s集群中运行的Pod，其资源清单如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tee</span> <span class="string">kaniko.yaml</span> <span class="string">&lt;&lt;'EOF'</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kaniko</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">kaniko</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="attr">    env:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">DOCKERHUB</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"docker.io"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">AUTHOR</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"weiyigeek"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">IMAGE_NAME</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"kaniko-executor"</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">IMAGE_VERSION</span></span><br><span class="line"><span class="attr">      value:</span> <span class="string">"v1.9.0"</span></span><br><span class="line"><span class="attr">    args:</span> <span class="string">[</span> <span class="string">"--dockerfile=/workspace/dockerfile"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--context=dir://workspace"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--destination=docker.io/weiyigeek/kaniko-executor:v1.9.0"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--cache"</span><span class="string">,</span></span><br><span class="line">            <span class="string">"--cache-dir=/cache"</span><span class="string">]</span></span><br><span class="line"><span class="attr">    volumeMounts:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kaniko-secret</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/kaniko/.docker</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">dockerfile-storage</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/workspace</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kaniko-cache</span></span><br><span class="line"><span class="attr">        mountPath:</span> <span class="string">/cache</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="attr">  nodeSelector:</span></span><br><span class="line">    <span class="string">kubernetes.io/hostname:</span> <span class="string">"weiyigeek-226"</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">kaniko-secret</span></span><br><span class="line"><span class="attr">      secret:</span></span><br><span class="line"><span class="attr">        secretName:</span> <span class="string">dockerhub</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">.dockerconfigjson</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">config.json</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">dockerfile-storage</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/storage/dev/soft/kaniko/demo</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">kaniko-cache</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/storage/dev/soft/kaniko/cache</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># args 参数说明</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-dockerfile=/workspace/dockerfile</span>   <span class="comment"># 指定 dockerfile 路径</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-context=dir://workspace</span>            <span class="comment"># 指定构建上下文</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-destination=docker.io/weiyigeek/kaniko-executor:v1.9.0</span>  <span class="comment"># 指定生成镜像的tag</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-cache</span>     <span class="comment"># 使用缓存</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-cache-dir</span> <span class="comment"># 指定缓存目录</span></span><br></pre></td></tr></table></figure><p>温馨提示: kaniko 中的二进制可执行文件 executor 支持的参数详解(<a href="https://github.com/GoogleContainerTools/kaniko/#additional-flags" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/kaniko/#additional-flags</a>)</p><p>步骤 05.执行 <code>kubectl apply</code> 部署资源清单生成运行 pod , 此处通过 <code>kubectl logs</code> 日志命令可以发现kaniko执行镜像构建，以及上传镜像到docker hub之中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kaniko.yaml</span><br><span class="line"><span class="comment"># pod/kaniko created</span></span><br><span class="line"></span><br><span class="line">kubectl logs -f kaniko</span><br><span class="line"><span class="comment"># INFO[0005] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="comment"># INFO[0005] Retrieving image registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest from registry registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="comment"># INFO[0006] Built cross stage deps: map[]</span></span><br><span class="line"><span class="comment"># INFO[0006] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span></span><br><span class="line"><span class="comment"># INFO[0006] Returning cached image manifest</span></span><br><span class="line"><span class="comment"># INFO[0006] Executing 0 build triggers</span></span><br><span class="line"><span class="comment"># INFO[0006] Building stage 'registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest' [idx: '0', base-idx: '-1']</span></span><br><span class="line"><span class="comment"># INFO[0006] Skipping unpacking as no commands require it.</span></span><br><span class="line"><span class="comment"># INFO[0006] LABEL MAINTAINER=master@weiyigeeek.top BUILDTYPE=kaniko</span></span><br><span class="line"><span class="comment"># INFO[0006] Applying label MAINTAINER=master@weiyigeeek.top</span></span><br><span class="line"><span class="comment"># INFO[0006] Applying label BUILDTYPE=kaniko</span></span><br><span class="line"><span class="comment"># INFO[0006] Pushing image to docker.io/weiyigeek/kaniko-executor:v1.9.0</span></span><br></pre></td></tr></table></figure><p>步骤 06.在客户端中可以使用 docker 或者 ctr 、crictl 命令将上传到hub中的镜像进行拉取, 并且查看hub仓库中的 <code>kaniko-executor:v1.9.0</code> 镜像信息（<a href="https://hub.docker.com/r/weiyigeek/kaniko-executor）。" target="_blank" rel="noopener">https://hub.docker.com/r/weiyigeek/kaniko-executor）。</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull weiyigeek/kaniko-executor:v1.9.0</span><br><span class="line">9d4299bbd943: Already exists</span><br><span class="line">..............</span><br><span class="line">a8dae3110e38: Already exists</span><br><span class="line">v1.9.0: Pulling from weiyigeek/kaniko-executor</span><br><span class="line">Digest: sha256:9b0ef02e7650d00d24bbca683e317bc103d6d842311ff13ec6daee60c37b1e62</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> weiyigeek/kaniko-executor:v1.9.0</span><br><span class="line">docker.io/weiyigeek/kaniko-executor:v1.9.0</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908153522.png" alt="WeiyiGeek.K8S集群中kaniko-executor" title="" class="">                <p>WeiyiGeek.K8S集群中kaniko-executor</p>            </figure><p>步骤 07.扩展补充，除了上述方式指定dockerfile文件和上下文外，我们还可以在运行 kaniko 时使用标准输入构建上下文，但需要添加 <code>-i, --interactive</code>参数, 一旦kaniko运行它将从STDIN获取数据，并将构建上下文创建为压缩tar，然后它将在启动映像构建之前解包构建上下文的压缩tar。</p><p>如何使用 .tar.gz 标准输入数据交互运行 kaniko 的完整示例，使用带有临时容器和完全无 docker 环境的 Kubernetes 命令行来进行镜像构建与发布：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'FROM alpine \nRUN echo "created from standard input"'</span> &gt; Dockerfile | tar -cf - Dockerfile | gzip -9 | kubectl run kaniko-executor \</span><br><span class="line">--rm --stdin=<span class="literal">true</span> \</span><br><span class="line">--image=registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest --restart=Never \</span><br><span class="line">--overrides=<span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "apiVersion": "v1",</span></span><br><span class="line"><span class="string">  "spec": &#123;</span></span><br><span class="line"><span class="string">    "containers": [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-executor",</span></span><br><span class="line"><span class="string">        "image": "registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest",</span></span><br><span class="line"><span class="string">        "stdin": true,</span></span><br><span class="line"><span class="string">        "stdinOnce": true,</span></span><br><span class="line"><span class="string">        "args": [</span></span><br><span class="line"><span class="string">          "--dockerfile=Dockerfile",</span></span><br><span class="line"><span class="string">          "--context=tar://stdin",</span></span><br><span class="line"><span class="string">          "--destination=docker.io/weiyigeek/alpine:v4.2"</span></span><br><span class="line"><span class="string">        ],</span></span><br><span class="line"><span class="string">        "volumeMounts": [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            "name": "kaniko-secret",</span></span><br><span class="line"><span class="string">            "mountPath": "/kaniko/.docker/"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    "nodeSelector": &#123; </span></span><br><span class="line"><span class="string">      "kubernetes.io/hostname": "weiyigeek-226"</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "volumes": [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-secret",</span></span><br><span class="line"><span class="string">        "secret": &#123;</span></span><br><span class="line"><span class="string">          "secretName": "dockerhub",</span></span><br><span class="line"><span class="string">          "items": [&#123;"key":".dockerconfigjson", "path": "config.json"&#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "dockerfile-storage",</span></span><br><span class="line"><span class="string">        "hostPath": &#123;</span></span><br><span class="line"><span class="string">          "path": "/storage/dev/soft/kaniko/demo",</span></span><br><span class="line"><span class="string">          "type": "DirectoryOrCreate"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "name": "kaniko-cache",</span></span><br><span class="line"><span class="string">        "hostPath": &#123;</span></span><br><span class="line"><span class="string">          "path": "/storage/dev/soft/kaniko/cache",</span></span><br><span class="line"><span class="string">          "type": "DirectoryOrCreate"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INFO[0003] Retrieving image manifest alpine</span><br><span class="line">INFO[0003] Retrieving image alpine from registry index.docker.io</span><br><span class="line">INFO[0009] Built cross stage deps: map[]</span><br><span class="line">INFO[0009] Retrieving image manifest alpine</span><br><span class="line">INFO[0009] Returning cached image manifest</span><br><span class="line">INFO[0009] Executing 0 build triggers</span><br><span class="line">INFO[0009] Building stage <span class="string">'alpine'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0009] Unpacking rootfs as cmd RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span> requires it.</span><br><span class="line">INFO[0036] RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span></span><br><span class="line">INFO[0036] Initializing snapshotter ...</span><br><span class="line">INFO[0036] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0036] Cmd: /bin/sh</span><br><span class="line">INFO[0036] Args: [-c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">INFO[0036] Running: [/bin/sh -c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">created from standard input</span><br><span class="line">INFO[0036] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0037] No files were changed, appending empty layer to config. No layer added to image.</span><br><span class="line">INFO[0037] Pushing image to docker.io/weiyigeek/alpine:v4.2</span><br><span class="line">INFO[0042] Pushed index.docker.io/weiyigeek/alpine@sha256:0ef53bcc0a6f261124e5f292fa17041d7e5f81f5542802b89c249351597167e4</span><br><span class="line">pod <span class="string">"kaniko-executor"</span> deleted</span><br></pre></td></tr></table></figure></p><p>至此在 K8s 集群中使用 kaniko 构建镜像简单演示结束。</p><p><br/></p><h3 id="小试牛刀之在Containerd-io中构建并发布镜像"><a href="#小试牛刀之在Containerd-io中构建并发布镜像" class="headerlink" title="小试牛刀之在Containerd.io中构建并发布镜像"></a>小试牛刀之在Containerd.io中构建并发布镜像</h3><p>描述：当我们的环境中只安装了containerd.io 容器运行时没有 Docker 或者 Kubernetes 环境时，我们也可以采用kaniko进行镜像构建与发布，具体操作流程步骤如下：</p><p><strong>环境说明</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04.3 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br><span class="line"></span><br><span class="line">$ containerd -v</span><br><span class="line">containerd containerd.io 1.4.12 7b11cfaabd73bb80907dd23182b9347b4245eb5d</span><br><span class="line"></span><br><span class="line">$ ctr -v</span><br><span class="line">ctr containerd.io 1.4.12</span><br></pre></td></tr></table></figure></p><p>温馨提示: 此处使用的是 Ubuntu 20.04 操作系统, 该系统已做安全加固和内核优化符合等保2.0要求【<a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">SecOpsDev/Ubuntu-InitializeSecurity.sh at master · WeiyiGeek/SecOpsDev</a> 】, 如你的Linux未进行相应配置环境可能与读者有些许差异, 如需要进行(windows server、Ubuntu、CentOS)安全加固请参照如下加固脚本进行加固, <span style="color:red">请大家疯狂的star </span>。<br>加固脚本地址:【 <a href="https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/blob/master/OS-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux/Ubuntu/Ubuntu-InitializeSecurity.sh</a> 】</p><p>温馨提示：如果你使用的是最新 Ubuntu 22.04 操作系统，并需要对其安全加固和内核优化以满足等保2.0要求可参考如下加固脚本 【<a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/OperatingSystem/Security/Ubuntu" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/OperatingSystem/Security/Ubuntu</a>】。</p><figure class="image-box">                <img src="https://github.com/WeiyiGeek/SecOpsDev/raw/master/OperatingSystem/Security/Ubuntu/Readme.assets/image-20220823143235577.png" alt="Ubuntu 22.04加固脚本示例图" title="" class="">                <p>Ubuntu 22.04加固脚本示例图</p>            </figure><p><br/></p><p><strong>操作流程</strong></p><p>步骤 01.此处假设你已经安装配置好containerd.io了，如果没有安装配置请参考此篇文章【 1.Containerd容器运行时初识与尝试 - <a href="https://blog.weiyigeek.top/2021/6-27-570.html">https://blog.weiyigeek.top/2021/6-27-570.html</a> 】，此处不再累述。</p><p>步骤 02.验证 containerd.io 服务状态以及提前拉取 <code>kaniko-executor:latest</code> 镜像以加快构建速度，此处将镜像拉到默认的名称空间下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status containerd.service</span><br><span class="line">● containerd.service - containerd container runtime</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/containerd.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (running) since Thu 2022-09-08 11:48:30 CST; 4h 49min ago</span><br><span class="line">       Docs: https://containerd.io</span><br><span class="line">    Process: 561811 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)</span><br><span class="line">   Main PID: 561812 (containerd)</span><br><span class="line">      Tasks: 106</span><br><span class="line">     Memory: 4.0G</span><br><span class="line"></span><br><span class="line">$ ctr -n default images pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br></pre></td></tr></table></figure><p>步骤 03.准备登录 hub docker 的账号以及密码，你可以按照下述的流程进行生成config.json文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/&#123;config,demo1&#125;</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/config</span><br><span class="line"><span class="comment"># 生成认证所需的凭据</span></span><br><span class="line"><span class="comment"># BASE64 编码，注意下述为格式为 你的hub账号:你的hub密码</span></span><br><span class="line">AUTH=$(<span class="built_in">echo</span> -n <span class="string">"weiyigeek:password"</span> | base64)</span><br><span class="line"><span class="comment"># BASE64 解码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;AUTH&#125;</span> | base64 -d</span><br><span class="line"><span class="comment"># 使用该方法可以解析变量 AUTH (值得注意)</span></span><br><span class="line">cat &gt; config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"auths"</span>: &#123;</span><br><span class="line">    <span class="string">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"<span class="variable">$&#123;AUTH&#125;</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成结果</span></span><br><span class="line">cat config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"auths"</span>: &#123;</span><br><span class="line">    <span class="string">"https://index.docker.io/v1/"</span>: &#123;</span><br><span class="line">        <span class="string">"auth"</span>: <span class="string">"d2VpeWlnZ************AxOQ=="</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤 04.准备dockerfile文件，此处将<code>busybox:1.35.0</code>镜像重新构建后上传到我的账户下的hub仓库中，该文件示例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo1</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM docker.io/library/busybox:1.35.0</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=containerd.io;</span><br><span class="line">ENTRYPOINT [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello,busybox"</span>]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>步骤 05.当上述都准备完成后我们便可以执行containerd.io提供的ctr客户端工具直接创建容器，例如如下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ctr -n default run --rm --net-host --env DOCKERHUB=docker.io \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/storage/dev/soft/kaniko/config,dst=/kaniko/.docker,options=rbind:ro \</span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/storage/dev/soft/kaniko/demo1,dst=/workspace,options=rbind:rw \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest kaniko-executor \</span><br><span class="line">/kaniko/executor --dockerfile=/workspace/dockerfile --context=dir://workspace --destination=docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-n 指定名称空间</span><br><span class="line">--rm 在退出容器时删除容器</span><br><span class="line">--net-host 使用主机网络</span><br><span class="line">--env 指定容器内部shell变量</span><br><span class="line">--mount 指定挂载到容器内部的本地文件，src是指定宿主机上文件目录路径，而dst是指定容器内部目录。</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INFO[0002] Retrieving image manifest docker.io/library/busybox:1.35.0</span><br><span class="line">INFO[0002] Retrieving image docker.io/library/busybox:1.35.0 from registry index.docker.io</span><br><span class="line">INFO[0006] Built cross stage deps: map[]</span><br><span class="line">INFO[0006] Retrieving image manifest docker.io/library/busybox:1.35.0</span><br><span class="line">INFO[0006] Returning cached image manifest</span><br><span class="line">INFO[0006] Executing 0 build triggers</span><br><span class="line">INFO[0006] Building stage <span class="string">'docker.io/library/busybox:1.35.0'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0006] Skipping unpacking as no commands require it.</span><br><span class="line">INFO[0006] LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=containerd.io;</span><br><span class="line">INFO[0006] Applying label MAINTAINER=master@weiyigeeek.top</span><br><span class="line">INFO[0006] Applying label BUILDTOOLS=kaniko</span><br><span class="line">INFO[0006] Applying label BUILDENV=containerd.io;</span><br><span class="line">INFO[0006] ENTRYPOINT [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo hello,busybox"</span>]</span><br><span class="line">INFO[0006] Pushing image to docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line">INFO[0010] Pushed index.docker.io/weiyigeek/busybox@sha256:d6ed480cc7864b9e19b40f09263abfad4689a9244a5abeb2e3eaf14a439cc55f</span><br></pre></td></tr></table></figure></p><p>步骤 06.查看上传到docker hub中 的 busybox:1.35.0 镜像信息以及拉取到本地进行运行测试验证。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctr -n default images pull docker.io/weiyigeek/busybox:1.35.0</span><br><span class="line">ctr -n default run --rm docker.io/weiyigeek/busybox:1.35.0 busybox</span><br><span class="line">hello,busybox</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908214417.png" alt="WeiyiGeek.在containerd.io进行镜像构建并发布到hub中"></p><p>至此，在containerd.io 环境中，进行镜像构建并发布到hub中实践完毕!</p><p><br/></p><h3 id="小试牛刀之在Docker中使用kaniko构建并发布镜像"><a href="#小试牛刀之在Docker中使用kaniko构建并发布镜像" class="headerlink" title="小试牛刀之在Docker中使用kaniko构建并发布镜像"></a>小试牛刀之在Docker中使用kaniko构建并发布镜像</h3><p>描述：前面说到kaniko的出现实际是为了在没有docker环境的情况之下，按照 Dockerfile 文件中的指令进行镜像构建，不过此处还是简单的介绍一下在docker环境中的使用。 (实际情况中不建议如此多此一举)</p><p>步骤 01.执行如下命令生成 docker hub 认证票据（存储路径为 ~/.docker/config.json）以及提前拉取 kaniko 项目中 executor:latest 镜像。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login -u weiyigeek</span><br><span class="line"><span class="comment"># Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line"><span class="comment"># Login Succeeded</span></span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</span><br></pre></td></tr></table></figure></p><p>步骤 02.创建 dockerfile 文件其中 FROM 指定 K8S 集群中常用的NFS动态持久卷镜像，我们将其上传到 hub 仓库中的WeiyiGeek账户下面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/demo2</span><br><span class="line"><span class="built_in">cd</span> /storage/dev/soft/kaniko/demo2</span><br><span class="line">tee dockerfile &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=docker;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>步骤 03.使用如下示例命令进行 kaniko-executor 容器的创建运行，并进行镜像构建并上传到公共的docker hub 仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f kaniko-executor</span><br><span class="line">docker run --rm --name kaniko-executor \</span><br><span class="line">    -v <span class="variable">$HOME</span>/.docker/:/kaniko/.docker \</span><br><span class="line">    -v /storage/dev/soft/kaniko/demo2:/workspace \</span><br><span class="line">    registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest \</span><br><span class="line">    --dockerfile=/workspace/dockerfile --context=dir://workspace --destination=docker.io/weiyigeek/nfs-subdir-external-provisioner:latest</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INFO[0002] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0002] Retrieving image registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest from registry registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">INFO[0003] Built cross stage deps: map[]</span><br><span class="line">INFO[0003] Retrieving image manifest registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0003] Returning cached image manifest</span><br><span class="line">INFO[0003] Executing 0 build triggers</span><br><span class="line">INFO[0003] Building stage <span class="string">'registry.cn-hangzhou.aliyuncs.com/weiyigeek/nfs-subdir-external-provisioner:latest'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0003] Skipping unpacking as no commands require it.</span><br><span class="line">INFO[0003] LABEL MAINTAINER=master@weiyigeeek.top BUILDTOOLS=kaniko BUILDENV=docker;</span><br><span class="line">INFO[0003] Applying label MAINTAINER=master@weiyigeeek.top</span><br><span class="line">INFO[0003] Applying label BUILDTOOLS=kaniko</span><br><span class="line">INFO[0003] Applying label BUILDENV=docker;</span><br><span class="line">INFO[0003] Pushing image to docker.io/weiyigeek/nfs-subdir-external-provisioner:latest</span><br><span class="line">INFO[0012] Pushed index.docker.io/weiyigeek/nfs-subdir-external-provisioner@sha256:4dc0d27b8fa4608c9e2d8a6f2368d2029df32b9b55f96f27a9218a620ea14828</span><br></pre></td></tr></table></figure><p>步骤 04.查看上传到docker hub 仓库中的 nfs-subdir-external-provisioner:latest 信息 (<a href="https://hub.docker.com/r/weiyigeek/nfs-subdir-external-provisioner" target="_blank" rel="noopener">https://hub.docker.com/r/weiyigeek/nfs-subdir-external-provisioner</a>) 。</p><p><img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220908215842.png" alt="WeiyiGeek.在 Docker 中使用 kaniko 进行镜像构建与发布"></p><p>步骤 05.当然我们也可以在安装有docker环境中使用上下文使用标准输入，并采用docker进行创建kaniko-executor容器，从标准输入接收dockerfile文件并进行镜像构建与推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /storage/dev/soft/kaniko/demo3</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'FROM alpine \nRUN echo "created from standard input"'</span> &gt; Dockerfile | tar -cf - Dockerfile | gzip -9 | docker run \</span><br><span class="line">  --interactive -v /storage/dev/soft/kaniko/demo3:/workspace  -v <span class="variable">$HOME</span>/.docker/:/kaniko/.docker \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest \</span><br><span class="line">  --context tar://stdin \</span><br><span class="line">  --destination=docker.io/weiyigeek/alpine:4.2</span><br></pre></td></tr></table></figure><p>执行结果: 如果在交互运行期间没有数据管道传输，则需要按Ctrl+D自行发送EOF信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] To simulate EOF and <span class="built_in">exit</span>, press <span class="string">'Ctrl+D'</span></span><br><span class="line">INFO[0002] Retrieving image manifest alpine</span><br><span class="line">INFO[0002] Retrieving image alpine from registry index.docker.io</span><br><span class="line">INFO[0005] Built cross stage deps: map[]</span><br><span class="line">INFO[0005] Retrieving image manifest alpine</span><br><span class="line">INFO[0005] Returning cached image manifest</span><br><span class="line">INFO[0005] Executing 0 build triggers</span><br><span class="line">INFO[0005] Building stage <span class="string">'alpine'</span> [idx: <span class="string">'0'</span>, base-idx: <span class="string">'-1'</span>]</span><br><span class="line">INFO[0005] Unpacking rootfs as cmd RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span> requires it.</span><br><span class="line">INFO[0008] RUN <span class="built_in">echo</span> <span class="string">"created from standard input"</span></span><br><span class="line">INFO[0008] Initializing snapshotter ...</span><br><span class="line">INFO[0008] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0008] Cmd: /bin/sh</span><br><span class="line">INFO[0008] Args: [-c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">INFO[0008] Running: [/bin/sh -c <span class="built_in">echo</span> <span class="string">"created from standard input"</span>]</span><br><span class="line">created from standard input</span><br><span class="line">INFO[0008] Taking snapshot of full filesystem...</span><br><span class="line">INFO[0008] No files were changed, appending empty layer to config. No layer added to image.</span><br><span class="line">INFO[0008] Pushing image to docker.io/weiyigeek/alpine:4.2</span><br><span class="line">INFO[0016] Pushed index.docker.io/weiyigeek/alpine@sha256:49360dc74ecf57ea94fbec9d7a3b5cf59dfba8aa5e60f8802cc6299e668a3e1e</span><br></pre></td></tr></table></figure></p><p>至此，在 Docker 中使用 kaniko 进行镜像构建与发布实践完毕。</p><hr><h2 id="0x0n-参考来源"><a href="#0x0n-参考来源" class="headerlink" title="0x0n 参考来源"></a>0x0n 参考来源</h2><p>项目地址: <a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">https://github.com/GoogleContainerTools/kaniko</a><br>kaniko 图像镜像仓库: gcr.io/kaniko-project/executor<br>kaniko 国内镜像仓库源：<code>weiyigeek/kaniko-executor:latest</code> 或者 <code>registry.cn-hangzhou.aliyuncs.com/weiyigeek/kaniko-executor:latest</code></p><p>首发地址：<br>原文地址: <a href="https://blog.weiyigeek.top/2022/9-1-684.html">https://blog.weiyigeek.top/2022/9-1-684.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.weiyigeek.top/categories/kubernetes/"/>
    
    <category term="Containers" scheme="https://blog.weiyigeek.top/categories/kubernetes/Containers/"/>
    
    <category term="OperationTools" scheme="https://blog.weiyigeek.top/categories/kubernetes/Containers/OperationTools/"/>
    
    
    <category term="Kaniko" scheme="https://blog.weiyigeek.top/tags/Kaniko/"/>
    
  </entry>
  
  <entry>
    <title>Gitalk-基于Github项目issue的评论系统在博客系统中实践</title>
    <link href="https://blog.weiyigeek.top/2022/8-17-682.html"/>
    <id>https://blog.weiyigeek.top/2022/8-17-682.html</id>
    <published>2022-08-17T05:34:30.000Z</published>
    <updated>2022-08-18T01:06:21.774Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-Gitalk-基于Github的评论系统"><a href="#0x00-Gitalk-基于Github的评论系统" class="headerlink" title="0x00 Gitalk - 基于Github的评论系统"></a>0x00 Gitalk - 基于Github的评论系统</h2><p>描述: 我想对于所有使用hexo、Hugo或者WordPress自建博客的博主来说GitTalk应该不陌生，GitTalk通过Github的OpenAPI以及issues功能实现社区评论确实还是很方便的，除开对国内访问速度较慢就没啥毛病，但是考虑到新手朋友此处还是简单介绍一下。</p><h3 id="1-快速介绍"><a href="#1-快速介绍" class="headerlink" title="1.快速介绍"></a>1.快速介绍</h3><p>描述: Gitalk 是一个基于 Github Issue 和 Preact 的现代评论组件。<br>功能： </p><ul><li>使用 github 帐号进行身份验证</li><li>无服务器，所有评论将存储为 github 问题</li><li>个人和组织的github项目都可以用来存储评论</li><li>本地化，支持多国语言 [en, zh-CN, zh-TW, es-ES, fr, ru, de, pl, ko, fa, ja]</li><li>类似 Facebook 的无干扰模式（可以通过 DistentionFreeMode 选项启用）</li><li>热键提交评论（cmd|ctrl + enter）</li></ul><p>项目地址：<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a><br>帮助文档：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p><p>温馨提示: 当前 Gitalk 最新版本为 1.7.2 (Mar 3, 2021), 如后续随着时间推移，可能会有些许变化，建议参考官网（<a href="https://github.com/gitalk/gitalk/tags）" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/tags）</a></p><p><br/></p><h3 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2.安装部署"></a>2.安装部署</h3><p>描述：安装引用Gitalk评论系统的两种方式，</p><p><strong>安装实践</strong></p><ul><li>方式1.在你的HTML页面中使用 link 与 script 标签引入。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式2.使用 npm 安装 gital 模块。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块安装</span></span><br><span class="line">npm i --save gitalk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目导入</span></span><br><span class="line">import <span class="string">'gitalk/dist/gitalk.css'</span></span><br><span class="line">import Gitalk from <span class="string">'gitalk'</span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>配置实践</strong></p><p>首先，您需要为商店评论选择一个公共 github 存储库（已存在或创建一个新存储库），然后创建一个 GitHub 应用程序，如果你没有，点击这里 (<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a>) 注册一个新的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name : BlogTalk</span><br><span class="line">Homepage URL : https://blog.weiyigeek.top</span><br><span class="line">Application description : 欢迎访问 WeiyiGeek blog\<span class="string">'s [blog.weiyigeek.top] talk about , 欢迎留言骚扰哟，亲!</span></span><br><span class="line"><span class="string">Authorization callback URL : https://blog.weiyigeek.top</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817100949.png" alt="WeiyiGeek.Register a new OAuth application" title="" class="">                <p>WeiyiGeek.Register a new OAuth application</p>            </figure><p>注意：您必须在授权回调 URL 字段中指定网站域 url。</p><p>然后，创建完成后你将获取Client ID 与 Client Secret，如下所示：</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817101619.png" alt="WeiyiGeek.application ID and Secret" title="" class="">                <p>WeiyiGeek.application ID and Secret</p>            </figure><p>注意：后续更新修改可以进行访问 <code>Settings/Developer settings</code> ( <a href="https://github.com/settings/developers" target="_blank" rel="noopener">https://github.com/settings/developers</a> )</p><p>最后，创建一个公共仓库此处我创建的是<a href="https://github.com/WeiyiGeek/blogtalk" target="_blank" rel="noopener">blogtalk</a>，创建完后在项目的(<a href="https://github.com/WeiyiGeek/blogtalk/settings)中启用" target="_blank" rel="noopener">https://github.com/WeiyiGeek/blogtalk/settings)中启用</a> issue 即可</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817102221.png" alt="WeiyiGeek.blogtalk" title="" class="">                <p>WeiyiGeek.blogtalk</p>            </figure><p><br/></p><p><strong>使用方式1.将如下代码添加到您的页面：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">          clientID: <span class="string">'GitHub Application Client ID'</span>,          <span class="comment">// 8d8e96********797026d3</span></span></span><br><span class="line"><span class="actionscript">          clientSecret: <span class="string">'GitHub Application Client Secret'</span>,  <span class="comment">// secrets**********secrets</span></span></span><br><span class="line"><span class="actionscript">          repo: <span class="string">'GitHub repo'</span>,          <span class="comment">// blogtalk</span></span></span><br><span class="line"><span class="actionscript">          owner: <span class="string">'GitHub repo owner'</span>,   <span class="comment">// WeiyiGeek</span></span></span><br><span class="line"><span class="actionscript">          admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>], <span class="comment">// ['WeiyiGeek']</span></span></span><br><span class="line"><span class="actionscript">          id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span></span><br><span class="line"><span class="actionscript">          distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="actionscript">        gitalk.render(<span class="string">'gitalk-container'</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>使用方式2.在React中使用</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> GitalkComponent <span class="keyword">from</span> <span class="string">"gitalk/dist/gitalk-component"</span>;</span><br><span class="line"><span class="comment">// 并使用类似的组件</span></span><br><span class="line">&lt;GitalkComponent options=&#123;&#123;</span><br><span class="line">  clientID: <span class="string">"..."</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// options below</span></span><br><span class="line">&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p>温馨提示: Gitalk 对象实例化参数参考 (<a href="https://github.com/gitalk/gitalk#options" target="_blank" rel="noopener">https://github.com/gitalk/gitalk#options</a>)</p><p><br/></p><h3 id="3-使用实践"><a href="#3-使用实践" class="headerlink" title="3.使用实践"></a>3.使用实践</h3><p><strong>在 Hexo 中使用</strong><br>描述: 此处以我的博客[<a href="https://blog.weiyigeek.top]">https://blog.weiyigeek.top]</a> 为例进行演示配置，此处笔者使用的是 hexo + mellow 主题 , 已经经过二次魔改（有需要该博客主题请在公众号回复【mellow博客主题】或者访问 <a href="https://weiyigeek.top/wechat.html?key=mellow博客主题" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=mellow博客主题</a> ）。</p><ul><li>Step 1.在 Hexo 主题中的 _config.yaml 配置加入如下配置片段。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gittalk 评论系统</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">WeiyiGeek</span>  <span class="comment"># github账号</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">blogtalk</span>    <span class="comment"># 留言仓库</span></span><br><span class="line"><span class="attr">  proxy:</span> <span class="string">/github/login/oauth/access_token</span> <span class="comment"># 反向代理解决跨域问题,后续将会主要讲解哦。</span></span><br><span class="line"><span class="attr">  oauth:</span></span><br><span class="line"><span class="attr">    client_id:</span> <span class="number">8</span><span class="string">d8e965c******97026d3</span>       <span class="comment"># Github App Auth ID </span></span><br><span class="line"><span class="attr">    client_secret:</span> <span class="string">e9c6141cb1f02f721********d01cb4d7a8f069</span> <span class="comment">#  Github App Auth secret</span></span><br><span class="line"><span class="attr">  perPage:</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><ul><li>Step 2.在主题文档引擎中加入如下片段。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实际上是将 &lt;script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"&gt;&lt;/script&gt; js 下载到了本地 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%- url_for(theme_js('/js/plugins/gitalk.min', cache)) %&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%- url_for(theme_js('/js/custom/gitalk.init', cache)) %&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- themes\mellow\source\js\custom\gitalk.init.js --&gt;</span></span><br><span class="line">var gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.client_id</span> %&gt;</span>',</span><br><span class="line">  clientSecret: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.oauth.client_secret</span> %&gt;</span>',</span><br><span class="line">  repo: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.repo</span> %&gt;</span>',</span><br><span class="line">  owner: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.owner</span> %&gt;</span>',</span><br><span class="line">  admin: ['<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.owner</span> %&gt;</span>'],</span><br><span class="line">  id: location.pathname,</span><br><span class="line">  proxy: '<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.gitalk.proxy</span> %&gt;</span>',</span><br><span class="line">  distractionFreeMode: true</span><br><span class="line">&#125;)</span><br><span class="line">#  hexo g 生成静态文件后的样子</span><br><span class="line"># var gitalk = new Gitalk(&#123;</span><br><span class="line">#   clientID: '8d8e965c******97026d3',</span><br><span class="line">#   clientSecret: 'e9c6141cb1f02f721********d01cb4d7a8f069',</span><br><span class="line">#   repo: 'blogtalk',</span><br><span class="line">#   owner: 'WeiyiGeek',</span><br><span class="line">#   admin: ['WeiyiGeek'],</span><br><span class="line">#   id: location.pathname,</span><br><span class="line">#   proxy: '/github/login/oauth/access_token',</span><br><span class="line">#   distractionFreeMode: false</span><br><span class="line"># &#125;)</span><br><span class="line"></span><br><span class="line"># 创建 gitalk-container </span><br><span class="line">gitalk.render('gitalk-container')</span><br></pre></td></tr></table></figure><p>温馨提示: 建议将<code>distractionFreeMode</code>设置为false,因为True真心难看。<br>温馨提示: 为了 Github Apps ID 与 Secrets 的安全，我们需要针对上面 <code>new Gitalk</code> 实例化参数进行js加密混淆 (<a href="http://www.esjson.com/jsEncrypt.html" target="_blank" rel="noopener">http://www.esjson.com/jsEncrypt.html</a>)</p><p><br/></p><h3 id="n-入坑出坑"><a href="#n-入坑出坑" class="headerlink" title="n.入坑出坑"></a>n.入坑出坑</h3><h4 id="1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法"><a href="#1-使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法" class="headerlink" title="1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法"></a>1.使用Gitalk进行Github的Oauth认证无法跨域获取Token问题解决办法</h4><p>描述: 在最开始之初我们也是使用官方演示代码中，使用的第三方提供的CORS代理服务，他会默认放行所有CORS请求，但是随着而来的问题是登陆会出现网络错误 Error: Network Error 或者在使用时出现 Forbidden 错误 (<a href="https://github.com/gitalk/gitalk/issues/514" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/514</a>) 。</p><p>目前由于该CORS代理服务遭到滥用，因此做了限制，导致GitTalk失效，在实践中发现如下CORS代理服务其要么有限制要么根本不能使用，所以实践的朋友们就不要像使用如下CORS代理服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限流</span></span><br><span class="line">https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</span><br><span class="line"><span class="comment"># 被墙</span></span><br><span class="line">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure><p>温馨提示: CORS Anywhere 是一个 NodeJS 代理，它将 CORS 标头添加到代理请求中。 项目地址 (<a href="https://github.com/Rob--W/cors-anywhere" target="_blank" rel="noopener">https://github.com/Rob--W/cors-anywhere</a>)</p><p><br/></p><p>在 百度 CSDN 中捡了一圈垃圾之后，还是没有最好的解决方案，然后通过某种方式Google了一下，找到两种替代的方式<code>利用cloudflare worker (不幸得是默认的cf worker的域名workers.dev被墙了)或者 Vercel 搭建在线代理（无vps推荐使用Vercel）</code> 或者 <code>使用VPS中的nginx服务器来反代 https://github.com (比较推荐-当前博主正在使用)</code>。</p><p><strong>方式1.没有VPS或者自己的服务器（想白嫖的）</strong><br>描述: 在 cloudflare (<a href="https://dash.cloudflare.com/login/" target="_blank" rel="noopener">https://dash.cloudflare.com/login/</a>) 上创建一个免费的在线代理来解决gitalk授权登录跨域问题，利用CloudFlare Worker创建在线代理，不需要我们有服务器，也不需要搭建Node.js服务，只需要注册一个CloudFlare账号，创建一个Worker，部署一个JS脚本就可以了，简单方便，下面我们就来看看如何创建吧。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817113313.png" alt="WeiyiGeek.cloudflare-cors-anywhere" title="" class="">                <p>WeiyiGeek.cloudflare-cors-anywhere</p>            </figure><p>创建好之后我们便可编辑其 Worker 服务代码，如下代码也可通过 <a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> 获得。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exclude = [];     <span class="comment">// Regexp for blacklisted urls</span></span><br><span class="line"><span class="keyword">const</span> include = [<span class="regexp">/^https?:\/\/.*weiyigeek\.top$/</span>, /^https?:\/\/localhost/]; <span class="comment">// Regexp for whitelisted origins e.g.</span></span><br><span class="line"><span class="keyword">const</span> apiKeys = &#123;</span><br><span class="line">  EZWTLwVEqFnaycMzdhBz: &#123;</span><br><span class="line">    name: <span class="string">'Test App'</span>,</span><br><span class="line">    expired: <span class="literal">false</span>,</span><br><span class="line">    expiresAt: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2023-01-01'</span>),</span><br><span class="line">    exclude: [], <span class="comment">// Regexp for blacklisted urls</span></span><br><span class="line">    include: [<span class="string">"^http.?://www.weiyigeek.top$"</span>, <span class="string">"weiyigeek.top$"</span>, <span class="string">"^https?://localhost/"</span>], <span class="comment">// Regexp for whitelisted origins</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config is all above this line.</span></span><br><span class="line"><span class="comment">// It should not be necessary to change anything below.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Throws exception on verification failure.</span></span><br><span class="line">  <span class="keyword">const</span> requestApiKey = request.headers.get(<span class="string">'x-cors-proxy-api-key'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(apiKeys).includes(requestApiKey)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">'Invalid authorization key.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (apiKeys[requestApiKey].expired) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">'Expired authorization key.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (apiKeys[requestApiKey].expiresAt &amp;&amp; apiKeys[requestApiKey].expiresAt.getTime() &lt; <span class="built_in">Date</span>.now()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="string">`Expired authorization key.\nKey was valid until: <span class="subst">$&#123;apiKeys[requestApiKey].expiresAt&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> apiKeys[requestApiKey];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRequiredHeadersPresent</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Throws exception on verification failure.</span></span><br><span class="line">  <span class="keyword">if</span> (!request.headers.get(<span class="string">'Origin'</span>) &amp;&amp; !request.headers.get(<span class="string">'x-requested-with'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Missing required request header. Must specify one of: origin,x-requested-with'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UnauthorizedException</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="number">401</span>;</span><br><span class="line">  <span class="keyword">this</span>.statusText = <span class="string">'Unauthorized'</span>;</span><br><span class="line">  <span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BadRequestException</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.status = <span class="number">400</span>;</span><br><span class="line">  <span class="keyword">this</span>.statusText = <span class="string">'Bad Request'</span>;</span><br><span class="line">  <span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isListed</span>(<span class="params">uri, listing</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> returnValue = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(uri);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> uri === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> m <span class="keyword">of</span> listing) &#123;</span><br><span class="line">      <span class="keyword">if</span> (uri.match(m) !== <span class="literal">null</span>) &#123;</span><br><span class="line">        returnValue = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//   Decide what to do when Origin is null</span></span><br><span class="line">    returnValue = <span class="literal">true</span>; <span class="comment">// True accepts null origins false rejects them.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fix</span>(<span class="params">myHeaders, request, isOPTIONS</span>) </span>&#123;</span><br><span class="line">  myHeaders.set(<span class="string">'Access-Control-Allow-Origin'</span>, request.headers.get(<span class="string">'Origin'</span>));</span><br><span class="line">  <span class="keyword">if</span> (isOPTIONS) &#123;</span><br><span class="line">    myHeaders.set(<span class="string">'Access-Control-Allow-Methods'</span>, request.headers.get(<span class="string">'access-control-request-method'</span>));</span><br><span class="line">    <span class="keyword">const</span> acrh = request.headers.get(<span class="string">'access-control-request-headers'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (acrh) &#123;</span><br><span class="line">      myHeaders.set(<span class="string">'Access-Control-Allow-Headers'</span>, acrh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myHeaders.delete(<span class="string">'X-Content-Type-Options'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> myHeaders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseURL</span>(<span class="params">requestUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> match = requestUrl.match(<span class="regexp">/^(?:(https?:)?\/\/)?(([^/?]+?)(?::(\d&#123;0,5&#125;)(?=[/?]|$))?)([/?][\S\s]*|$)/i</span>);</span><br><span class="line">  <span class="comment">//                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^</span></span><br><span class="line">  <span class="comment">//                            1:protocol       3:hostname     4:port                 5:path + query string</span></span><br><span class="line">  <span class="comment">//                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line">  <span class="comment">//                                            2:host</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'no match'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'parseURL:match:'</span>, match);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!match[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nothing in match group 1'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^https?:/i</span>.test(requestUrl)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'The pattern at top could mistakenly parse "http:///" as host="http:" and path=///.'</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scheme is omitted.</span></span><br><span class="line">    <span class="keyword">if</span> (requestUrl.lastIndexOf(<span class="string">'//'</span>, <span class="number">0</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'"//" is omitted'</span>);</span><br><span class="line">      requestUrl = <span class="string">'//'</span> + requestUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestUrl = (match[<span class="number">4</span>] === <span class="string">'443'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + requestUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsed = <span class="keyword">new</span> URL(requestUrl);</span><br><span class="line">  <span class="keyword">if</span> (!parsed.hostname) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'"http://:1/" and "http:/notenoughslashes" could end up here.'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Invalid URL for proxy request.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parsed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">proxyRequest</span>(<span class="params">request, activeApiKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOPTIONS = (request.method === <span class="string">'OPTIONS'</span>);</span><br><span class="line">  <span class="keyword">const</span> originUrl = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">const</span> origin = request.headers.get(<span class="string">'Origin'</span>);</span><br><span class="line">  <span class="comment">// ParseURL throws when the url is invalid</span></span><br><span class="line">  <span class="keyword">const</span> fetchUrl = parseURL(request.url.replace(originUrl.origin, <span class="string">''</span>).slice(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Throws if it fails the check</span></span><br><span class="line">  checkRequiredHeadersPresent(request);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Excluding urls which are not allowed as destination urls</span></span><br><span class="line">  <span class="comment">// Exclude origins which are not int he included ones</span></span><br><span class="line">  <span class="keyword">if</span> (isListed(fetchUrl.toString(), [...exclude, ...(activeApiKey?.exclude || [])]) || !isListed(origin, [...include, ...(activeApiKey?.include || [])])) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Origin or Destination URL is not allowed.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> corsHeaders = request.headers.get(<span class="string">'x-cors-headers'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (corsHeaders !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      corsHeaders = <span class="built_in">JSON</span>.parse(corsHeaders);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!originUrl.pathname.startsWith(<span class="string">'/'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Pathname does not start with "/"'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> recvHpaireaders = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> request.headers.entries()) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((pair[<span class="number">0</span>].match(<span class="string">'^origin'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'eferer'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^cf-'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^x-forw'</span>) === <span class="literal">null</span>)</span><br><span class="line">        &amp;&amp; (pair[<span class="number">0</span>].match(<span class="string">'^x-cors-headers'</span>) === <span class="literal">null</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      recvHpaireaders[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (corsHeaders !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> <span class="built_in">Object</span>.entries(corsHeaders)) &#123;</span><br><span class="line">      recvHpaireaders[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newRequest = <span class="keyword">new</span> Request(request, &#123;</span><br><span class="line">    headers: recvHpaireaders,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(fetchUrl, newRequest);</span><br><span class="line">  <span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers(response.headers);</span><br><span class="line">  <span class="keyword">const</span> newCorsHeaders = [];</span><br><span class="line">  <span class="keyword">const</span> allh = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> pair <span class="keyword">of</span> response.headers.entries()) &#123;</span><br><span class="line">    newCorsHeaders.push(pair[<span class="number">0</span>]);</span><br><span class="line">    allh[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newCorsHeaders.push(<span class="string">'cors-received-headers'</span>);</span><br><span class="line">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class="line"></span><br><span class="line">  myHeaders.set(<span class="string">'Access-Control-Expose-Headers'</span>, newCorsHeaders.join(<span class="string">','</span>));</span><br><span class="line"></span><br><span class="line">  myHeaders.set(<span class="string">'cors-received-headers'</span>, <span class="built_in">JSON</span>.stringify(allh));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> body = isOPTIONS ? <span class="literal">null</span> : <span class="keyword">await</span> response.arrayBuffer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(body, &#123;</span><br><span class="line">    headers: myHeaders,</span><br><span class="line">    status: (isOPTIONS ? <span class="number">200</span> : response.status),</span><br><span class="line">    statusText: (isOPTIONS ? <span class="string">'OK'</span> : response.statusText),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">homeRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOPTIONS = (request.method === <span class="string">'OPTIONS'</span>);</span><br><span class="line">  <span class="keyword">const</span> originUrl = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">const</span> origin = request.headers.get(<span class="string">'Origin'</span>);</span><br><span class="line">  <span class="keyword">const</span> remIp = request.headers.get(<span class="string">'CF-Connecting-IP'</span>);</span><br><span class="line">  <span class="keyword">const</span> corsHeaders = request.headers.get(<span class="string">'x-cors-headers'</span>);</span><br><span class="line">  <span class="keyword">let</span> myHeaders = <span class="keyword">new</span> Headers();</span><br><span class="line">  myHeaders = fix(myHeaders, request, isOPTIONS);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> country = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> colo = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> request.cf !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    country = <span class="keyword">typeof</span> request.cf.country === <span class="string">'undefined'</span> ? <span class="literal">false</span> : request.cf.country;</span><br><span class="line">    colo = <span class="keyword">typeof</span> request.cf.colo === <span class="string">'undefined'</span> ? <span class="literal">false</span> : request.cf.colo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(</span><br><span class="line">    <span class="string">'CLOUDFLARE-CORS-ANYWHERE\n\n'</span></span><br><span class="line">        + <span class="string">'Source:\nhttps://github.com/chrisspiegl/cloudflare-cors-anywhere\n\n'</span></span><br><span class="line">        + <span class="string">'Usage:\n'</span></span><br><span class="line">        + originUrl.origin + <span class="string">'/&#123;uri&#125;\n'</span></span><br><span class="line">        + <span class="string">'Header x-cors-proxy-api-key must be set with valid api key\n'</span></span><br><span class="line">        + <span class="string">'Header origin or x-requested-with must be set\n\n'</span></span><br><span class="line">        <span class="comment">// + 'Limits: 100,000 requests/day\n'</span></span><br><span class="line">        <span class="comment">// + '          1,000 requests/10 minutes\n\n'</span></span><br><span class="line">        + (origin === <span class="literal">null</span> ? <span class="string">''</span> : <span class="string">'Origin: '</span> + origin + <span class="string">'\n'</span>)</span><br><span class="line">        + <span class="string">'Ip: '</span> + remIp + <span class="string">'\n'</span></span><br><span class="line">        + (country ? <span class="string">'Country: '</span> + country + <span class="string">'\n'</span> : <span class="string">''</span>)</span><br><span class="line">        + (colo ? <span class="string">'Datacenter: '</span> + colo + <span class="string">'\n'</span> : <span class="string">''</span>) + <span class="string">'\n'</span></span><br><span class="line">        + ((corsHeaders === <span class="literal">null</span>) ? <span class="string">''</span> : <span class="string">'\nx-cors-headers: '</span> + <span class="built_in">JSON</span>.stringify(corsHeaders)),</span><br><span class="line">    &#123;<span class="attr">status</span>: <span class="number">200</span>, <span class="attr">headers</span>: myHeaders&#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;protocol, pathname&#125; = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="comment">// In the case of a "Basic" authentication, the exchange MUST happen over an HTTPS (TLS) connection to be secure.</span></span><br><span class="line">  <span class="keyword">if</span> (protocol !== <span class="string">'https:'</span> || request.headers.get(<span class="string">'x-forwarded-proto'</span>) !== <span class="string">'https'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">'Must use a HTTPS connection.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (pathname) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/favicon.ico'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/robots.txt'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;<span class="attr">status</span>: <span class="number">204</span>&#125;);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">      <span class="keyword">return</span> homeRequest(request);</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      <span class="comment">// Not 100% sure if this is a good idea…</span></span><br><span class="line">      <span class="comment">// Right now all OPTIONS requests are just simply replied to because otherwise they fail.</span></span><br><span class="line">      <span class="comment">// This is necessary because apparently, OPTIONS requests do not carry the `x-cors-proxy-api-key` header so this can not be authorized.</span></span><br><span class="line">      <span class="keyword">if</span> (request.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;</span><br><span class="line">          headers: fix(<span class="keyword">new</span> Headers(), request, <span class="literal">true</span>),</span><br><span class="line">          status: <span class="number">200</span>,</span><br><span class="line">          statusText: <span class="string">'OK'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The "x-cors-proxy-api-key" header is sent when authenticated.</span></span><br><span class="line">      <span class="comment">//if (request.headers.has('x-cors-proxy-api-key')) &#123;</span></span><br><span class="line">        <span class="comment">// Throws exception when authorization fails.</span></span><br><span class="line">        <span class="comment">//const activeApiKey = verifyCredentials(request);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only returns this response when no exception is thrown.</span></span><br><span class="line">        <span class="keyword">return</span> proxyRequest(request);</span><br><span class="line">      <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Not authenticated.</span></span><br><span class="line">      <span class="comment">//throw new UnauthorizedException('Valid x-cors-proxy-api-key header has to be provided.');</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, <span class="keyword">async</span> event =&gt; &#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    handleRequest(event.request).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> message = error.reason || error.stack || <span class="string">'Unknown Error'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Response(message, &#123;</span><br><span class="line">        status: error.status || <span class="number">500</span>,</span><br><span class="line">        statusText: error.statusText || <span class="literal">null</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/plain;charset=UTF-8'</span>,</span><br><span class="line">          <span class="comment">// Disables caching by default.</span></span><br><span class="line">          <span class="string">'Cache-Control'</span>: <span class="string">'no-store'</span>,</span><br><span class="line">          <span class="comment">// Returns the "Content-Length" header for HTTP HEAD requests.</span></span><br><span class="line">          <span class="string">'Content-Length'</span>: message.length,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>部署结果: <a href="https://cors-anywhere.weiyigeek.workers.dev/" target="_blank" rel="noopener">https://cors-anywhere.weiyigeek.workers.dev/</a></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817113707.png" alt="WeiyiGeek.cloudflare-cors-anywhere-code" title="" class="">                <p>WeiyiGeek.cloudflare-cors-anywhere-code</p>            </figure><p>温馨提示: cloudflare 构建无服务器应用程序免费版本每天限额10万次请求，所有为了避免其它 people 恶意使用，请在使用时设置访问白名单, 上述源码来源于 (<a href="https://github.com/chrisspiegl/cloudflare-cors-anywhere)。" target="_blank" rel="noopener">https://github.com/chrisspiegl/cloudflare-cors-anywhere)。</a></p><p>温馨提示: 除了使用 cloudflare 还可以使用 Vercel 免费部署node.js项目解决跨域问题，你可参考该项目 (<a href="https://github.com/Dedicatus546/cors-server" target="_blank" rel="noopener">https://github.com/Dedicatus546/cors-server</a>) ，此处就不在累述。</p><p><br/> </p><p><strong>方式2.有公网VPS、服务器</strong><br>描述: 由于我自己有VPS所以就不借用 cloudflare 与 Vercel，因为其国内网络原因，时而通畅时而有缓慢 , 此处我将使用Nginx服务在blog.conf配置Nginx文件中加入如下location指令片段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https - www.weiyigeek.top</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  listen       443 ssl http2;</span><br><span class="line">  server_name  blog.weiyigeek.top;</span><br><span class="line">   </span><br><span class="line">  <span class="comment"># CORS</span></span><br><span class="line">  add_header Access-Control-Allow-Origin <span class="string">'*.weiyigeek.top'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET,POST,OPTIONS'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gitalk Auth Use</span></span><br><span class="line">  location /github &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      <span class="built_in">return</span> 204;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_pass https://github.com/; <span class="comment"># 注意尾部斜杠不能少</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  error_page  403          /warn/403.html;</span><br><span class="line">  error_page  404          /warn/404.html;</span><br><span class="line">  error_page  500 502 503  /warn/500.html;</span><br><span class="line">  error_page  504          /warn/504.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后检测blog.conf配置以及重载nginx服务 <code>nginx -t &amp;&amp; nginx -s reload</code>, 然后修改Hexo 主题中的 _config.yaml 将 Gitalk 的 proxy 配置为 <code>proxy: /github/login/oauth/access_token</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gittalk 评论系统</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  owner: WeiyiGeek  <span class="comment"># github账号</span></span><br><span class="line">  repo: blogtalk    <span class="comment"># 留言仓库</span></span><br><span class="line">  proxy: /github/login/oauth/access_token <span class="comment"># 关键点 （前台请求是https://blog.weiyigeek.top/github/login/oauth/access_token, 而实际请求是https://github.com/login/oauth/access_token，所以解决了跨域问题）</span></span><br><span class="line">  oauth:</span><br><span class="line">    client_id: 8d8e965c******97026d3       <span class="comment"># Github App Auth ID </span></span><br><span class="line">    client_secret: e9c6141cb1f02f721********d01cb4d7a8f069 <span class="comment">#  Github App Auth secret</span></span><br><span class="line">  perPage: 15</span><br></pre></td></tr></table></figure><p>之后，我们需要批量初始每篇文章issue根据其路径<code>/2020/3-20-658.html</code>，此处采用了<code>gitalk-auto-init.js</code>脚本进行批量初始化文章issue。</p><p>温馨提示: 下述 <code>gitalk-auto-init.js</code> 脚本可以通过如下连接( <a href="https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk" target="_blank" rel="noopener">https://github.com/WeiyiGeek/SecOpsDev/tree/master/Application/Blog/Hexo/Gitalk</a> )进行获取</p><p>脚本依赖:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S hexo-generator-sitemap</span><br><span class="line">$ npm i -D md5 moment request xml-parser</span><br><span class="line">+ moment@2.29.2</span><br><span class="line">+ request@2.88.2</span><br><span class="line">+ md5@2.3.0</span><br><span class="line">+ xml-parser@1.2.1</span><br><span class="line">added 55 packages from 70 contributors in 8.467s</span><br></pre></td></tr></table></figure></p><p>配置运行:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gitalk-auto-init.js 脚本部分片段</span></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  username: <span class="string">'weiyigeek'</span>,   <span class="comment">// GitHub repository 所有者，可以是个人或者组织。对应Gitalk配置中的owner</span></span><br><span class="line">  repo: <span class="string">"blogtalk"</span>,         <span class="comment">// 储存评论issue的github仓库名，仅需要仓库名字即可。对应 Gitalk配置中的repo</span></span><br><span class="line">  token: <span class="string">'ghp_wnpWqL********6RIf0NR5iD'</span>,   <span class="comment">// 前面在Github中的 personal access token</span></span><br><span class="line">  sitemap: path.join(__dirname, <span class="string">'./public/sitemap.xml'</span>), <span class="comment">// 自己站点的 sitemap 文件地址</span></span><br><span class="line">  cache: <span class="literal">true</span>, <span class="comment">// 是否启用缓存，启用缓存会将已经初始化的数据写入配置的 gitalkCacheFile 文件，下一次直接通过缓存文件判断</span></span><br><span class="line">  gitalkCacheFile: path.join(__dirname, <span class="string">'./gitalk-init-cache.json'</span>), <span class="comment">// 用于保存 gitalk 已经初始化的 id 列表</span></span><br><span class="line">  gitalkErrorFile: path.join(__dirname, <span class="string">'./gitalk-init-error.json'</span>), <span class="comment">// 用于保存 gitalk 初始化报错的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sitemap.xml 示例</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;urlset xmlns=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span><br><span class="line">    &lt;url&gt;</span><br><span class="line">    &lt;loc&gt;https:<span class="comment">//blog.weiyigeek.top/2020/5-28-588.html&lt;/loc&gt;</span></span><br><span class="line">    &lt;lastmod&gt;<span class="number">2022</span><span class="number">-08</span><span class="number">-15</span>T14:<span class="number">39</span>:<span class="number">08.638</span>Z&lt;<span class="regexp">/lastmod&gt;</span></span><br><span class="line"><span class="regexp">    &lt;title&gt;Ingress-Nginx进阶学习实践扩充配置记录&lt;/</span>title&gt;</span><br><span class="line">  &lt;<span class="regexp">/url&gt;</span></span><br><span class="line"><span class="regexp">    ....</span></span><br><span class="line"><span class="regexp">&lt;/u</span>rlset&gt;</span><br></pre></td></tr></table></figure><br><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817123646.png" alt="WeiyiGeek.批量初始化文章issue" title="" class="">                <p>WeiyiGeek.批量初始化文章issue</p>            </figure></p><p>执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------- 运行结果 ---------</span><br><span class="line"></span><br><span class="line">报错数据： 1 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-error.json。</span><br><span class="line">本次成功： 27 条。</span><br><span class="line">写入缓存： 90 条，已初始化 63 条，本次成功： 27 条。参考文件 /mnt/e/githubProject/blog/gitalk-init-cache.json。</span><br></pre></td></tr></table></figure></p><p>我们也可以通过 blogtalk 项目中 issue (<a href="https://github.com/WeiyiGeek/blogtalk/issues" target="_blank" rel="noopener">https://github.com/WeiyiGeek/blogtalk/issues</a>) 查看初始化结果以及最新评论。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817125424.png" alt="WeiyiGeek.blogtalk-issue" title="" class="">                <p>WeiyiGeek.blogtalk-issue</p>            </figure><p>在初始化issue完成之后，我们可以找到一篇 <a href="https://blog.weiyigeek.top/about/">https://blog.weiyigeek.top/about/</a> 文章进行留言验证。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220817124230.png" alt="WeiyiGeek.Gitalk 留言验证" title="" class="">                <p>WeiyiGeek.Gitalk 留言验证</p>            </figure><p><strong>首发地址</strong>: <a href="https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/2LLVDf7Fj4cX3IRZUtUfnA</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="Blog" scheme="https://blog.weiyigeek.top/categories/Blog/"/>
    
    
    <category term="Hexo" scheme="https://blog.weiyigeek.top/tags/Hexo/"/>
    
    <category term="Gitalk" scheme="https://blog.weiyigeek.top/tags/Gitalk/"/>
    
  </entry>
  
  <entry>
    <title>网安等保-Linux服务器之最新Ubuntu-22.04-LTS系统内核优化与安全加固配置脚本分享</title>
    <link href="https://blog.weiyigeek.top/2022/8-13-683.html"/>
    <id>https://blog.weiyigeek.top/2022/8-13-683.html</id>
    <published>2022-08-13T06:36:30.000Z</published>
    <updated>2022-08-26T03:29:56.979Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><p>描述: Ubuntu 22.04 LTS 是Canonical于2022年4月21日发布的操作系统，代号为Jammy Jellyfish（果酱水母）, 其采用GNOME电源配置文件和流线型工作空间过渡，提高优化图形驱动程序上的桌面帧速率，使用新的加密算法迁移到OpenSSL v3以提高安全性,并且为内存安全的系统级编程添加了Rus。</p><p>而又由于CentOS发行版在最近几年时内将不在进行维护更新了，所以为了考虑到系统的安全性、可维护性、以及后期运维成本，我们企业内部在2020年时就已经将ubuntu作为主要的服务器系统，所以在我公司新上的业务系统基本采用debian系的发行版服务器来承载基础应用业务，而使用最多当然是Ubuntu此发行版。</p><p>现在 Ubuntu 推出了22.04 ， 想到原来每次都需要手动一台一台的进行主机安全加固以符合等保要求，所以了节约工作时间提高工作效率，有更多时间进行学习进步，则需要将将我们公司所使用的系统基线镜像进行更新迭代，编写适用于ubuntu 22.04系统的安全加固脚本，并且总结此篇文章并在文章末尾附上自动化安全加固脚本，谢谢大家支持。</p><p>此处我依据在我从前编写的 Ubuntu 20.04 系统安全加固脚本中对其根据最新的22.04版本进行更新了等保相关规定策略，以及更新适用最新版本的 Ubuntu，针对脚本进行结构调整，更加方便大家一起参参与维护，若脚本有Bug请大家发送到我的邮箱 <a href="mailto:&#109;&#x61;&#115;&#116;&#x65;&#x72;&#64;&#x77;&#x65;&#105;&#x79;&#105;&#103;&#x65;&#101;&#x6b;&#46;&#x74;&#x6f;&#x70;">&#109;&#x61;&#115;&#116;&#x65;&#x72;&#64;&#x77;&#x65;&#105;&#x79;&#105;&#103;&#x65;&#101;&#x6b;&#46;&#x74;&#x6f;&#x70;</a>。</p><p>想要获取该加固脚本的朋友可以在WX公众号【WeiyiGeek】中回复【ubuntu系统加固】即可获得，或者访问【<a href="https://weiyigeek.top/wechat.html?key=ubuntu%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=ubuntu系统加固</a>】</p><p>​<br><strong>首发地址</strong>: <a href="https://mp.weixin.qq.com/s/dO1bV0tfXKn4ZmqlMcUrrQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dO1bV0tfXKn4ZmqlMcUrrQ</a><br><strong>实践视频</strong>：<a href="https://www.bilibili.com/video/BV1fe4y1o7ov" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1fe4y1o7ov</a></p><hr><h2 id="0x01-加固实践"><a href="#0x01-加固实践" class="headerlink" title="0x01 加固实践"></a>0x01 加固实践</h2><p>描述: Ubuntu 22.04 主机系统安全加固的 <code>Ubuntu22.04-InitializeReinforce.sh</code> 脚本相关上的使用说明以及实践。</p><h3 id="book-​-帮助文档"><a href="#book-​-帮助文档" class="headerlink" title=":book:​ 帮助文档"></a>:book:​ 帮助文档</h3><p>描述: 本工具集主要针对于 Ubuntu 22.04 、20.04  LTS 操作系统进行安全加固以及系统初始化操作。</p><p>:hammer_and_wrench: <strong>脚本说明:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">root@Ubuntu-Security:/home/ubuntu/Ubuntu<span class="comment"># ./Ubuntu22.04-InitializeReinforce.sh</span></span><br><span class="line">     __          __  _       _  _____           _</span><br><span class="line">     \ \        / / (_)     (_)/ ____|         | |</span><br><span class="line">     \ \  /\  / /__ _ _   _ _| |  __  ___  ___| | __</span><br><span class="line">       \ \/  \/ / _ \ | | | | | | |_ |/ _ \/ _ \ |/ /</span><br><span class="line">       \  /\  /  __/ | |_| | | |__| |  __/  __/   &lt;</span><br><span class="line">         \/  \/ \___|_|\__, |_|\_____|\___|\___|_|\_\</span><br><span class="line">                      __/ |</span><br><span class="line">                      |___/</span><br><span class="line">======================================================================</span><br><span class="line">@ Desc: Ubuntu 22.04 Security Reinforce and System initialization</span><br><span class="line">@ Mail bug reports: master@weiyigeek.top or pull request (pr)</span><br><span class="line">@ Author : WeiyiGeek</span><br><span class="line">@ Follow me on Blog   : https://blog.weiyigeek.top/</span><br><span class="line">@ Follow me on Wechat : https://weiyigeek.top/wechat.html?key=欢迎关注</span><br><span class="line">@ Communication group : https://weiyigeek.top/visit.html</span><br><span class="line">======================================================================</span><br><span class="line"></span><br><span class="line">Usage: ./Ubuntu22.04-InitializeReinforce.sh [--start ] [--network] [--<span class="keyword">function</span>] [--clear] [--version] [--<span class="built_in">help</span>]</span><br><span class="line">Option:</span><br><span class="line">  --start            Start System initialization and security reinforcement.</span><br><span class="line">  --network          Configure the system network and DNS resolution server.</span><br><span class="line">  --<span class="keyword">function</span>         PCall the specified shell <span class="keyword">function</span>.</span><br><span class="line">  --clear            Clear all system logs, cache and backup files.</span><br><span class="line">  --version          Print version and <span class="built_in">exit</span>.</span><br><span class="line">  --<span class="built_in">help</span>             Print <span class="built_in">help</span> and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">Mail bug reports or suggestions to &lt;master@weiyigeek.top&gt; or pull request (pr).</span><br><span class="line">current version : 1.0</span><br><span class="line"></span><br><span class="line">WARNING: 温馨提示：使用前先请配置机器上网环境,若没有配置请在 Ubuntu22.04.conf 文件中进行网络配置.</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823140038.png" alt="WeiyiGeek.运行加固脚本" title="" class="">                <p>WeiyiGeek.运行加固脚本</p>            </figure><p><br/></p><p>:atom_symbol:<strong>脚本函数:</strong></p><p>描述: 如下脚本将根据参数在 <code>Ubuntu22.04-InitializeReinforce.sh</code> 分别进行调用执行, 也可采用<code>--function</code>参数进行指定调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">❯ grep -r -n  <span class="string">"函数名称"</span> -A 1 *</span><br><span class="line">scripts/os-base.sh:26:<span class="comment"># 函数名称: base_hostname</span></span><br><span class="line">scripts/os-base.sh-27-<span class="comment"># 函数用途: 主机名称设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:55:<span class="comment"># 函数名称: ubuntu_mirror</span></span><br><span class="line">scripts/os-base.sh-56-<span class="comment"># 函数用途: ubuntu 系统主机软件仓库镜像源</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:126:<span class="comment"># 函数名称: ubuntu_software</span></span><br><span class="line">scripts/os-base.sh-127-<span class="comment"># 函数用途: ubuntu 系统主机内核版本升级以常规软件安装</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:153:<span class="comment"># 函数名称: base_timezone</span></span><br><span class="line">scripts/os-base.sh-154-<span class="comment"># 函数用途: 主机时间同步校准与时区设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:192:<span class="comment"># 函数名称: base_banner</span></span><br><span class="line">scripts/os-base.sh-193-<span class="comment"># 函数用途: 远程本地登陆主机信息展示</span></span><br><span class="line">--</span><br><span class="line">scripts/os-base.sh:345:<span class="comment"># 函数名称: base_reboot</span></span><br><span class="line">scripts/os-base.sh-346-<span class="comment"># 函数用途: 是否进行重启或者关闭服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-clean.sh:27:<span class="comment"># 函数名称: system_clean</span></span><br><span class="line">scripts/os-clean.sh-28-<span class="comment"># 函数用途: 删除安全加固过程临时文件清理为基线镜像做准备</span></span><br><span class="line">--</span><br><span class="line">scripts/os-exceptions.sh:26:<span class="comment"># 函数名称: problem_usercrond</span></span><br><span class="line">scripts/os-exceptions.sh-27-<span class="comment"># 函数用途: 解决普通用户定时任务无法定时执行问题</span></span><br><span class="line">--</span><br><span class="line">scripts/os-exceptions.sh:45:<span class="comment"># 函数名称: problem_multipath</span></span><br><span class="line">scripts/os-exceptions.sh-46-<span class="comment"># 函数用途: 解决 ubuntu multipath add missing path 错误</span></span><br><span class="line">--</span><br><span class="line">scripts/os-network.sh:27:<span class="comment"># 函数名称: net_config</span></span><br><span class="line">scripts/os-network.sh-28-<span class="comment"># 函数用途: 主机IP地址与网关设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-network.sh:70:<span class="comment"># 函数名称: net_dns</span></span><br><span class="line">scripts/os-network.sh-71-<span class="comment"># 函数用途: 设置主机DNS解析服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:27:<span class="comment"># 函数名称: optimize_kernel</span></span><br><span class="line">scripts/os-optimize.sh-28-<span class="comment"># 函数用途: 系统内核参数的优化配置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:84:<span class="comment"># 函数名称: resources_limits</span></span><br><span class="line">scripts/os-optimize.sh-85-<span class="comment"># 函数用途: 系统资源文件打开句柄数优化配置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-optimize.sh:115:<span class="comment"># 函数名称: swap_partition</span></span><br><span class="line">scripts/os-optimize.sh-116-<span class="comment"># 函数用途: 创建系统swap分区</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:27:<span class="comment"># 函数名称: sec_usercheck</span></span><br><span class="line">scripts/os-security.sh-28-<span class="comment"># 函数用途: 用于锁定或者删除多余的系统账户</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:65:<span class="comment"># 函数名称: sec_userconfig</span></span><br><span class="line">scripts/os-security.sh-66-<span class="comment"># 函数用途: 针对拥有ssh远程登陆权限的用户进行密码口令设置。</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:131:<span class="comment"># 函数名称: sec_passpolicy</span></span><br><span class="line">scripts/os-security.sh-132-<span class="comment"># 函数用途: 用户密码复杂性策略设置 (密码过期周期0~90、到期前15天提示、密码长度至少12、复杂度设置至少有一个大小写、数字、特殊字符、密码三次不能一样、尝试次数为三次）</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:166:<span class="comment"># 函数名称: sec_sshdpolicy</span></span><br><span class="line">scripts/os-security.sh-167-<span class="comment"># 函数用途: 系统sshd服务安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:194:<span class="comment"># 函数名称: sec_loginpolicy</span></span><br><span class="line">scripts/os-security.sh-195-<span class="comment"># 函数用途: 用户登陆安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:230:<span class="comment"># 函数名称: sec_historypolicy</span></span><br><span class="line">scripts/os-security.sh-231-<span class="comment"># 函数用途: 用户终端执行的历史命令记录安全策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:261:<span class="comment"># 函数名称: sec_grubpolicy</span></span><br><span class="line">scripts/os-security.sh-262-<span class="comment"># 函数用途: 系统 GRUB 安全设置防止物理接触从grub菜单中修改密码</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:304:<span class="comment"># 函数名称: sec_firewallpolicy</span></span><br><span class="line">scripts/os-security.sh-305-<span class="comment"># 函数用途: 系统防火墙策略设置, 建议操作完成后重启计算机.</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:335:<span class="comment"># 函数名称: sec_ctrlaltdel</span></span><br><span class="line">scripts/os-security.sh-336-<span class="comment"># 函数用途: 禁用 ctrl+alt+del 组合键对系统重启 (必须要配置我曾入过坑)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:355:<span class="comment"># 函数名称: sec_recyclebin</span></span><br><span class="line">scripts/os-security.sh-356-<span class="comment"># 函数用途: 设置文件删除回收站别名(防止误删文件)(必须要配置,我曾入过坑)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:405:<span class="comment"># 函数名称: sec_supolicy</span></span><br><span class="line">scripts/os-security.sh-406-<span class="comment"># 函数用途: 切换用户日志记录和切换命令更改名称为SU(可选)</span></span><br><span class="line">--</span><br><span class="line">scripts/os-security.sh:425:<span class="comment"># 函数名称: sec_privilegepolicy</span></span><br><span class="line">scripts/os-security.sh-426-<span class="comment"># 函数用途: 系统用户sudo权限与文件目录创建权限策略设置</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:26:<span class="comment"># 函数名称: svc_apport</span></span><br><span class="line">scripts/os-service.sh-27-<span class="comment"># 函数用途: 禁用烦人的apport错误报告</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:52:<span class="comment"># 函数名称: svc_snapd</span></span><br><span class="line">scripts/os-service.sh-53-<span class="comment"># 函数用途: 不使用snapd容器的环境下禁用或者卸载多余的snap软件及其服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:75:<span class="comment"># 函数名称: svc_cloud-init</span></span><br><span class="line">scripts/os-service.sh-76-<span class="comment"># 函数用途: 非云的环境下禁用或者卸载多余的cloud-init软件及其服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-service.sh:101:<span class="comment"># 函数名称: svc_debugshell</span></span><br><span class="line">scripts/os-service.sh-102-<span class="comment"># 函数用途: 在系统启动时禁用debug-shell服务</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:26:<span class="comment"># 函数名称: install_chrony</span></span><br><span class="line">scripts/os-software.sh-27-<span class="comment"># 函数用途: 安装配置 chrony 时间同步服务器</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:79:<span class="comment"># 函数名称: install_java</span></span><br><span class="line">scripts/os-software.sh-80-<span class="comment"># 函数用途: 安装配置java环境</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:110:<span class="comment">## 函数名称: install_docker</span></span><br><span class="line">scripts/os-software.sh-111-<span class="comment">## 函数用途: 在 Ubuntu 主机上安装最新版本的Docker</span></span><br><span class="line">--</span><br><span class="line">scripts/os-software.sh:201:<span class="comment">## 函数名称: install_cockercompose</span></span><br><span class="line">scripts/os-software.sh-202-<span class="comment">## 函数用途: 在 Ubuntu 主机上安装最新版本的Dockercompose</span></span><br></pre></td></tr></table></figure><p><br></p><p>​:coffee:​ <strong>配置文件:</strong><br>描述: 在 Ubuntu22.04.conf 配置文件中定义脚本所需的安全策略以及日志、历史记录存放路径, 以模板的初始密码与防火墙配置等，其中最主要的是一定要配置好IP地址，以成功拉取软件仓库中的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">$ vim Ubuntu22.04.conf</span><br><span class="line"><span class="comment"># Show  Script Execute result (Y/N)</span></span><br><span class="line">VAR_VERIFY_RESULT=Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Script vertify timeout (unit s)</span></span><br><span class="line">VAR_VERIFY_TIMEOUT=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Script run time</span></span><br><span class="line">VAR_RUNDATE=$(date +%Y%m%d-%s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to logfile.</span></span><br><span class="line">LOGFILE=/var/<span class="built_in">log</span>/weiyigeek-<span class="variable">$&#123;VAR_RUNDATE&#125;</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to Backup directory.</span></span><br><span class="line">BACKUPDIR=/var/<span class="built_in">log</span>/.backup/<span class="variable">$&#123;VAR_RUNDATE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Path to history record directory.</span></span><br><span class="line">HISTORYDIR=/var/<span class="built_in">log</span>/.<span class="built_in">history</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify su command execute log file path.</span></span><br><span class="line">SU_LOG_FILE=<span class="variable">$&#123;HISTORYDIR&#125;</span>/su.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the hostname</span></span><br><span class="line">VAR_HOSTNAME=<span class="string">"Ubuntu-Security"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the IP/MASK and Gateway</span></span><br><span class="line">VAR_IP=10.20.172.152/24</span><br><span class="line">VAR_GATEWAY=10.20.172.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the DNS server</span></span><br><span class="line"><span class="comment"># DNSPod: 119.29.29.29      Alidns: 223.5.5.5 223.6.6.6</span></span><br><span class="line"><span class="comment"># Google: 8.8.8.8 8.8.4.4   Cloudflare: 1.1.1.1 1.0.0.1</span></span><br><span class="line"><span class="comment"># Internal : Your intranet domain name resolution server</span></span><br><span class="line">VAR_DNS_SERVER=(<span class="string">"223.5.5.5"</span> <span class="string">"223.6.6.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the SSHD server</span></span><br><span class="line">VAR_SSHD_PORT=20221</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the super user and normal user</span></span><br><span class="line"><span class="comment"># 建议将密码设置最小长度10（最好设置为12以上，等保要求），数字、大写字母、小写字母、特殊符号，密码包含三种及以上, 且无规律。</span></span><br><span class="line"><span class="comment"># 温馨提示: 下面设置的密码为初始密码，在系统登陆后会要求更改。</span></span><br><span class="line">VAR_SUPER_USER=root</span><br><span class="line">VAR_SUPER_PASS=R2022.weiyigeek.top</span><br><span class="line"><span class="comment"># normal user</span></span><br><span class="line">VAR_USER_NAME=ubuntu</span><br><span class="line">VAR_USER_PASS=U2022.weiyigeek.top</span><br><span class="line"><span class="comment"># low privilege application users</span></span><br><span class="line">VAR_APP_USER=app</span><br><span class="line">VAR_APP_PASS=A2022.weiyigeek.top</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the NTP server</span></span><br><span class="line">VAR_NTP_SERVER=( <span class="string">"ntp.aliyun.com"</span> <span class="string">"ntp.tencent.com"</span> <span class="string">"192.168.10.254"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the timezone</span></span><br><span class="line">VAR_TIMEZONE=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify Password policy</span></span><br><span class="line"><span class="comment"># 默认密码最大使用为90天、过期前15天提示, 密码最小长度为12</span></span><br><span class="line">PASS_MIN_DAYS=1</span><br><span class="line">PASS_MAX_DAYS=90</span><br><span class="line">PASS_WARN_AGE=15</span><br><span class="line">PASS_MIN_LEN=12</span><br><span class="line"><span class="comment"># 默认加密方式为SHA512, 重试次数为3, 新密码与旧密码至少有6个字符不同, 至少包含3种密码类型，不限制密码中包含大写字母、小写字母、数字、特殊符号的最大数量，记住三次旧密码。</span></span><br><span class="line">VAR_PASS_ENCRYPT=SHA512</span><br><span class="line">VAR_PASS_RETRY=3</span><br><span class="line">VAR_PASS_DIFOK=6</span><br><span class="line">VAR_PASS_MINCLASS=3</span><br><span class="line">VAR_PASS_UCREDIT=-1</span><br><span class="line">VAR_PASS_LCREDIT=-1</span><br><span class="line">VAR_PASS_DCREDIT=-1</span><br><span class="line">VAR_PASS_OCREDIT=-1</span><br><span class="line">VAR_PASS_REMEMBER=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止没有主目录的用户登录</span></span><br><span class="line">VAR_DEFAULT_HOME=no</span><br><span class="line"><span class="comment"># 删除用户时禁止同步删除用户组</span></span><br><span class="line">VAR_USERGROUPS_ENAB=no</span><br><span class="line"><span class="comment"># 启用成功登录的日志记录</span></span><br><span class="line">VAR_LOG_OK_LOGINS=yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify file or Dirctory privilege policy</span></span><br><span class="line">VAR_UMASK=022</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify user login failed count policy</span></span><br><span class="line"><span class="comment"># 默认在5分钟之内登陆失败次数超过6次将锁定10分钟,终端超时10分钟</span></span><br><span class="line">VAR_LOGIN_FAIL_COUNT=6</span><br><span class="line">VAR_LOGIN_FAIL_INTERVAL=300</span><br><span class="line">VAR_LOGIN_LOCK_TIME=600</span><br><span class="line">VAR_LOGIN_TIMEOUT=300</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify history record count policy</span></span><br><span class="line">VAR_HISTSIZE=128</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify firewall policy tcp or udp port .</span></span><br><span class="line">VAR_ALLOW_PORT=(<span class="string">"22,80,443,<span class="variable">$&#123;VAR_SSHD_PORT&#125;</span>/tcp"</span> <span class="string">"53/udp"</span>)</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="​-running-​-脚本使用"><a href="#​-running-​-脚本使用" class="headerlink" title="​:running:​ 脚本使用"></a>​:running:​ 脚本使用</h3><ul><li><p>Step 1.上传到需要加固的主机服务器中，此处我上传到ubuntu用户的家目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OperatingSystem\Security&gt; scp -r .\Ubuntu\ ubuntu@10.20.172.152:~</span><br><span class="line">ubuntu@10.20.172.152\<span class="string">'s password:</span></span><br><span class="line"><span class="string">Ubuntu22.04.conf                                                                      100% 2979   976.9KB/s   00:00</span></span><br><span class="line"><span class="string">os-base.sh                                                                            100%   14KB   5.4MB/s   00:00</span></span><br><span class="line"><span class="string">os-clean.sh                                                                           100% 2446     2.1MB/s   00:00</span></span><br><span class="line"><span class="string">os-exceptions.sh                                                                      100% 2634     2.5MB/s   00:00</span></span><br><span class="line"><span class="string">os-info.sh                                                                            100% 1169     1.3MB/s   00:00</span></span><br><span class="line"><span class="string">os-manual.sh                                                                          100% 1860     2.0MB/s   00:00</span></span><br><span class="line"><span class="string">os-network.sh                                                                         100% 3774     1.8MB/s   00:00</span></span><br><span class="line"><span class="string">os-optimize.sh                                                                        100% 7752     3.7MB/s   00:00</span></span><br><span class="line"><span class="string">os-security.sh                                                                        100% 23KB     5.7MB/s   00:00</span></span><br><span class="line"><span class="string">os-service.sh                                                                         100% 3969     2.0MB/s   00:00</span></span><br><span class="line"><span class="string">os-software.sh                                                                        100% 8007     3.3MB/s   00:00</span></span><br><span class="line"><span class="string">Ubuntu22.04-InitializeReinforce.sh                                                    100% 7989     5.0MB/s   00:00</span></span><br></pre></td></tr></table></figure></li><li><p>Step 2.登陆服务器并切换到root用户, 查看 <code>/home/ubuntu</code> 目录下上传的加固版本。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 22 ubuntu@10.20.172.152</span><br><span class="line">ubuntu@Ubuntu-Security:~$ tree Ubuntu/</span><br><span class="line">Ubuntu/</span><br><span class="line">├── Readme.assets</span><br><span class="line">│   ├── image-20220823143235577.png</span><br><span class="line">│   └── image-20220823143354742.png</span><br><span class="line">├── Readme.md</span><br><span class="line">├── Ubuntu22.04-InitializeReinforce.sh</span><br><span class="line">├── config</span><br><span class="line">│   └── Ubuntu22.04.conf</span><br><span class="line">├── example</span><br><span class="line">│   └── 22.04</span><br><span class="line">│       ├── 00-custom-header</span><br><span class="line">│       ├── common-auth</span><br><span class="line">│       ├── common-password</span><br><span class="line">│       ├── issue</span><br><span class="line">│       ├── issue.net</span><br><span class="line">│       ├── login.defs</span><br><span class="line">│       ├── profile</span><br><span class="line">│       ├── resolved.conf</span><br><span class="line">│       ├── sshd_config</span><br><span class="line">│       └── su</span><br><span class="line">└── scripts</span><br><span class="line">    ├── os-base.sh</span><br><span class="line">    ├── os-clean.sh</span><br><span class="line">    ├── os-exceptions.sh</span><br><span class="line">    ├── os-info.sh</span><br><span class="line">    ├── os-manual.sh</span><br><span class="line">    ├── os-network.sh</span><br><span class="line">    ├── os-optimize.sh</span><br><span class="line">    ├── os-security.sh</span><br><span class="line">    ├── os-service.sh</span><br><span class="line">    └── os-software.sh</span><br><span class="line"></span><br><span class="line">ubuntu@Ubuntu-Security:~$ sudo -i</span><br></pre></td></tr></table></figure><ul><li>Step 3.切换root用户后进入 <code>/home/ubuntu/Ubuntu</code>，安全加固脚本存放目录，首先将所有的sh文件赋予可执行去那些，其次需要在 <code>Ubuntu22.04.conf</code> 中进行相应配置，最后运行<code>Ubuntu22.04-InitializeReinforce.sh  --start</code>即可，最后等待系统重启即可。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ubuntu/Ubuntu</span><br><span class="line">chmod +x -R *</span><br><span class="line">Ubuntu22.04-InitializeReinforce.sh  --start</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823140038.png" alt="WeiyiGeek.运行加固脚本" title="" class="">                <p>WeiyiGeek.运行加固脚本</p>            </figure><ul><li>Step 4.中途请根据需求输入Y/N，然后等待重启即可，在重启后请注意sshd服务端口更改为20221所以此时你需要指定ssh连接端口。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 20221 ubuntu@10.20.172.152  <span class="comment"># Ubuntu22.04.conf 定义的 ubuntu 初始化密码，登陆后会提示你进行更改。</span></span><br><span class="line">su - root  <span class="comment"># 只能有ubuntu用户切换到root用户，其它低权限以及app用户无法通过su进行用户切换</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220823115958.png" alt="WeiyiGeek.加固结果" title="" class="">                <p>WeiyiGeek.加固结果</p>            </figure><p>温馨提示: 如果执行到密码更新策略时，选择输入了(N) 否将不会更新其在<code>Ubuntu22.04.conf</code>脚本中定义的密码。</p><p>温馨提示：脚本中默认root密码为R2022.weiyigeek.top。</p><p>温馨提示: 防火墙策略只开放了80，443，22，20221等端口。</p><p><br/></p><p>:hammer_and_wrench: <strong>脚本视频演示:</strong></p><p>[<figure class="image-box">                <img src="https://www.bilibili.com/video/BV1fe4y1o7ov" alt="企业网络安全-等保2.0主机安全测评之Linux-Ubuntu22.04服务器系统安全加固实践与基线系统制作](http://i2.hdslb.com/bfs/archive/a6739f92517a8cd7b0f0e7bbbd1dd610cdf9ab12.jpg)" title="" class="">                <p>企业网络安全-等保2.0主机安全测评之Linux-Ubuntu22.04服务器系统安全加固实践与基线系统制作](http://i2.hdslb.com/bfs/archive/a6739f92517a8cd7b0f0e7bbbd1dd610cdf9ab12.jpg)</p>            </figure></p><iframe src="//player.bilibili.com/player.html?bvid=BV1fe4y1o7ov&cid=813962656&page=1" scrolling="no" border="0" frameborder="no" framespacing="0"></iframe><p>温馨提示: 点击上方图像进行观看视频。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="安全加固" scheme="https://blog.weiyigeek.top/categories/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/"/>
    
    <category term="Host_Security" scheme="https://blog.weiyigeek.top/categories/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/Host-Security/"/>
    
    
    <category term="Linux" scheme="https://blog.weiyigeek.top/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="https://blog.weiyigeek.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>十五分钟让你快速学习Markdown语法到精通排版实践</title>
    <link href="https://blog.weiyigeek.top/2022/7-28-675.html"/>
    <id>https://blog.weiyigeek.top/2022/7-28-675.html</id>
    <published>2022-07-27T19:34:30.000Z</published>
    <updated>2022-08-28T06:58:20.234Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-前言简述"><a href="#0x00-前言简述" class="headerlink" title="0x00 前言简述"></a>0x00 前言简述</h2><h3 id="Markdown-初识"><a href="#Markdown-初识" class="headerlink" title="Markdown 初识"></a>Markdown 初识</h3><p>描述: Markdown 是一种轻量级标记语言于2004年推出，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。</p><p>Markdown 的目标是实现「易读易写」，通过在文档中的某部分加入特殊的字符，用来修饰文档中的文本，</p><p>博主使用Markdown一段时间以后，才发现Markdown原来那么强大有用、并且能提升工作效率，比如：</p><ul><li>github、stackoverflow、技术论坛</li><li>写博客、写日记、电子书</li><li>编辑微信公众号文章</li><li>编辑日常技术文章</li></ul><p>所以博主将常用的Markdown语法整理处理，方便大家入门学习以及备忘。</p><p><strong>本文来源:</strong> <a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a> :cat:</p><p><br/></p><h3 id="Markdown-特点"><a href="#Markdown-特点" class="headerlink" title="Markdown 特点"></a>Markdown 特点</h3><p>描述: 由 Markdown 语法的目标是：成为一种适用于网络的书写语言，对于我们来说它是兼容 HTML 的。其主要特点 (轻量化、跨平台、易读易写 )</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分，Markdown 的构想不是要使得 HTML 文档更容易书写。</p><p>在我看来， HTML 已经很容易写了，Markdown 的理念是，能让文档更容易读、写和随意改。</p><p>HTML 是一种发布的格式，Markdown 是一种书写的格式，就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写，不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如<code>&lt;div&gt;、&lt;table&gt;、 &lt;pre&gt;、 &lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。</p><p>Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的<code>&lt;p&gt;</code>标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格, 这是一个普通段落。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- # HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MD --&gt;</span></span><br><span class="line"></span><br><span class="line">|Header|</span><br><span class="line">|:------:|</span><br><span class="line">|Foo|</span><br></pre></td></tr></table></figure></p><p>温馨提示: 在 HTML 区块标签间的 Markdown 格式语法将不会被处理，比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用，依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。</p><p><br/></p><p><strong>举例说明：</strong><br>如果比较喜欢 HTML 的 <code>&lt;a&gt; 或 &lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法，和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><p>特殊字符自动转换:<br>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp;符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是<code>(&lt;) &amp;lt;</code>和 <code>(&amp;) &amp;amp;</code>。<br>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成<code>「AT&amp;amp;T」</code>。</p><p>而网址中的 &amp; 字符也要转换，比如你要链接到：<code>http://images.google.com/images?num=30&amp;q=larry+bird</code>, 你必须要把网址转换写为：<code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code>.</p><p>才能放到链接标签的 href 属性里,不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了，如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。</p><p>所以你如果要在文档中插入一个版权符号 ©，你可以这样写：<code>&amp;copy;</code> Markdown 会保留它不动。而若你写<code>AT&amp;T</code>Markdown 就会将它转为：<code>AT&amp;amp;T</code>。</p><p>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：<code>4 &lt; 5</code>  Markdown 将会把它转换为： <code>4 &amp;lt; 5</code></p><p>不过需要注意的是，code 范围内，不论是<code>行内</code>还是<code>区块</code>， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><p><br></p><h3 id="Markdown-客户端"><a href="#Markdown-客户端" class="headerlink" title="Markdown 客户端"></a>Markdown 客户端</h3><p>描述: 此节将会根据时间递进（看博主心情）进行更新。</p><p><strong>Mac OS X</strong><br>描述: 我强烈建议你用 Mou 这款免费且十分好用的 Markdown 编辑器，它支持实时预览，既左边是你编辑 Markdown 语言，右边会实时的生成预览效果。不仅如此，Mou 还有一些有趣的偏好设置（Preference），例如主题（Themes）与样式（CSS），它们可以配置出定制化的文本编辑效果与导出效果，如果你对自带的主题与样式不满意还可以到 GitHub 上搜索其它爱好者为 Mou 编写的更多主题样式，导入的方式可以在偏好设置的 Themes 或 CSS 选项中 选择 reload。</p><p><strong>IOS</strong><br>描述: 在端很多 app 早已经支持了 Markdown 录入，例如 Drafts，Day One，iA writer 等，另外 Ulysses for iPad 现在已经上架，可以说是 iOS 平台最好的编辑器了。</p><p><strong>Windows</strong><br>描述: 有两款还算不错，一款叫做 MarkdownPad ，另一款叫做 MarkPad , 不过笔者此处推荐 <code>VSCode + Markdown Preview Enhanced (插件)</code> ，或者使用 Typora (貌似当下收费了)可以找之前不收费的版本, 一般来说使用基础的足够了。 </p><p>MarkdownPad - <a href="http://markdownpad.com/" target="_blank" rel="noopener">http://markdownpad.com/</a><br>typora - <a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a> (比较好用不然也不会收费)</p><p><strong>Web 端</strong></p><ul><li>51CTO / 简书博客 / 博客园 / segmentfault</li><li>dillinger - 漂亮强大，支持md, html, pdf 文件导出，支持dropbox, onedrive，google drive, github. 来自国外，可能不够稳定。</li></ul><p><br/></p><h2 id="0x01-语法学习"><a href="#0x01-语法学习" class="headerlink" title="0x01 语法学习"></a>0x01 语法学习</h2><h3 id="段落换行"><a href="#段落换行" class="headerlink" title="段落换行"></a>段落换行</h3><p>在讲解Markdown语法时我们首先先提一下 <code>段落和换行</code>。</p><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行, 即空白行表示另起一个段落。</p><p>比方说，若某一行只包含空格和制表符，则该行也会被视为空行）, 普通段落不该用空格或制表符来缩进。</p><p>Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成<code>&lt;br/&gt;</code>标签, 所以在换行时你可以通过<code>&lt;br/&gt;</code>进行换行（针对某些MD客户端可能不会生效）。</p><p><strong>换行</strong>: 单一段落( <code>&lt;p&gt;</code>) 用一个空白行, 连续两个空格 会变成一个 <code>&lt;br&gt;</code>, 连续2个回车表示是空行.</p><p><strong>空格</strong>:<br>1）两个全角空格 ：因为一个全角空格（space）的宽度是整整一个汉字，输入两个全角空格正好是两个汉字的宽度。<br>全角空格的输入方法为：一般的中文输入法都是按 shift + space，可以切换到全角模式下，输完后再次按 shift + space 切换回正常输入状态。<br>2）使用特殊占位符 ： 使用特殊占位符，不同占位符所占空白是不一样大的。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;ensp; or &amp;#8194;  表示一个半角的空格</span><br><span class="line">&amp;emsp; or &amp;#8195;  表示一个全角的空格</span><br><span class="line">&amp;emsp;&amp;emsp;       两个全角的空格（用的比较多）</span><br><span class="line">&amp;nbsp; or &amp;#160;   不断行的空白格</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- #解析结果 --&gt;</span></span></span><br><span class="line">  表示一个半角的空格</span><br><span class="line">  表示一个全角的空格</span><br><span class="line">   两个全角的空格（用的比较多）</span><br><span class="line">  不断行的空白格</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="目录标题"><a href="#目录标题" class="headerlink" title="目录标题"></a>目录标题</h3><p>描述: Markdown 支持两种标题的语法，类 Setext 和类 atx 形式, 并且可以使用<code>[TOC]</code>来显示设置标题的文本并带有跳转功能。</p><p><strong>标题-类 Setext</strong>: 是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）,任何数量的 = 和 - 都可以有效果</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p><strong>标题-类 Atx 形式</strong>: 是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）, 例如</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是 H1 #</span></span><br><span class="line"><span class="section">## 这是 H2 ##</span></span><br><span class="line"><span class="section">### 这是 H3 ###</span></span><br><span class="line">....</span><br><span class="line"><span class="section">###### 这是 H6 ######</span></span><br></pre></td></tr></table></figure><p><strong>目录</strong>: 此语法支持根据标题生成文档目录, 注意有得Markdown解析器不区分TOC字母大小写。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line"><span class="section"># Heading</span></span><br><span class="line"><span class="section">## Sub heading 1</span></span><br><span class="line">Some nice text</span><br><span class="line"><span class="section">## Sub heading 2</span></span><br><span class="line">Some even nicer text</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="文字标记、粗体、斜体"><a href="#文字标记、粗体、斜体" class="headerlink" title="文字标记、粗体、斜体"></a>文字标记、粗体、斜体</h3><p><strong>文字标记</strong>: 使用==进行文字的标记，对应者HTML的mark。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 示例2 --&gt;</span></span></span><br><span class="line">==我是带背景的标记==</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mark</span>&gt;</span></span>marked<span class="xml"><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>==我是带背景的标记==</p><p><strong>关键字标记</strong>: 行内代码使用反斜杠`表示，默认不会换行，分别对应html的code，pre标签</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 示例1 --&gt;</span></span></span><br><span class="line"><span class="code">`我是标记`</span></span><br><span class="line">Use the <span class="code">`printf()`</span> function.</span><br></pre></td></tr></table></figure><p>Use the <code>printf()</code> function.  </p><p><br/></p><p><strong>粗体和斜体</strong>：用星号*或者下划线_ (注意无空格)</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*这是文字斜体格式*</span>  == <span class="emphasis">_这是文字斜体格式_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这是文字粗体格式**</span>  ==   <span class="strong">__这是文字粗体格式__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***这是文字粗斜体格式**</span>*   ==  <span class="strong">___这是文字粗斜体格式__</span>_</span><br><span class="line"></span><br><span class="line">~~在文字上添加删除线~~</span><br></pre></td></tr></table></figure><p><em>这是文字斜体格式</em>  == <em>这是文字斜体格式</em></p><p><strong>这是文字粗体格式</strong>  ==   <strong>这是文字粗体格式</strong></p><p><strong><em>这是文字粗斜体格式</em></strong>   ==  <strong><em>这是文字粗斜体格式</em></strong></p><p><del>在文字上添加删除线</del></p><p><br/></p><p><strong>文字引用:</strong> 如果需要引用某些内容，可以在第一行加上 <code>“&gt;”和一个空格</code>，表示代码引用还可以嵌套, 并且引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is the first level of quoting.</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;&gt; This is nested blockquote. (嵌套的blockquote)</span><br><span class="line">&gt;</span><br><span class="line"><span class="quote">&gt; Back to the first level.</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; 引用</span><br><span class="line"> &gt;&gt; 引用中的引用</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 嵌套其它 Markdown --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; ## 这是一个标题。</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 1.   这是第一行列表项。</span></span><br><span class="line"><span class="quote">&gt; 2.   这是第二行列表项。</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; 给出一些例子代码：</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; return shell_exec("echo $input | $Markdown_script");</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="上下划线、分割线、上下标"><a href="#上下划线、分割线、上下标" class="headerlink" title="上下划线、分割线、上下标"></a>上下划线、分割线、上下标</h3><p><strong>上、下划线</strong>: 原生没有但是可以借助Latex公式插件进行实现。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- # 上划线 --&gt;</span></span></span><br><span class="line">$\overline&#123;\text&#123;上划线&#125;&#125;$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 下划线 --&gt;</span></span></span><br><span class="line">++inserted++</span><br><span class="line">$\underline&#123;\text&#123;下划线&#125;&#125;$</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ins</span>&gt;</span></span>inserted<span class="xml"><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>分隔线</strong>: 在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格, 下面每种写法都可以建立分隔线：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---  (常用)</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>上、下标</strong>: 我们可以在Markdown使用两个<code>~</code>包含字符渲染下标（sub），使用两个<code>^</code>包含字符渲染上标（sup） 。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">H~2~0  =&gt; H<span class="xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>2<span class="xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span>0</span><br><span class="line">29^th^ =&gt; 29<span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>th<span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>渲染结果: H~2~0 / 29^th^</p><p><br/></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>描述: Markdown 支持插入表格。</p><p><strong>基础语法</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">------------ | ------------- | ------------</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure></p><p><strong>表头位置</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">居中 | 靠左 | 靠右</span><br><span class="line">:---------:|:----------|---------:</span><br><span class="line"> https://www.weiyigeek.top | https://blog.weiyigeek.top | https://www.weiyigeek.top</span><br></pre></td></tr></table></figure><p>渲染结果:</p><table><thead><tr><th style="text-align:center">居中</th><th style="text-align:left">靠左</th><th style="text-align:right">靠右</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.weiyigeek.top" target="_blank" rel="noopener">https://www.weiyigeek.top</a></td><td style="text-align:left"><a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a></td><td style="text-align:right"><a href="https://www.weiyigeek.top" target="_blank" rel="noopener">https://www.weiyigeek.top</a></td></tr></tbody></table><p><br></p><h3 id="有序、无序、任务列表"><a href="#有序、无序、任务列表" class="headerlink" title="有序、无序、任务列表"></a>有序、无序、任务列表</h3><p>描述: Markdown 支持有序列表和无序列表, 使用*,+,-加上一个空格来表示 , 可以支持嵌套</p><p><strong>有序列表</strong>: 用<code>数字+英文点+空格来表示</code>, 当列表内容很长，不需要手工输入换行符，css控制段落的宽度，会自动的缩放的。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序项目1</span><br><span class="line"><span class="bullet">2. </span>有序项目2 </span><br><span class="line"><span class="bullet">4. </span>有序项目3</span><br></pre></td></tr></table></figure><p>温馨提示 Markdown会自动的排序从第一个数字顺序，进行递增所以你可以完全不用在意数字的正确性。</p><p><strong>无序列表</strong>: 用星号*、加号+或是减号-在加空格来作为列表标记：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>项目1</span><br><span class="line"><span class="bullet">+ </span>项目2</span><br><span class="line"><span class="bullet">- </span>项目3</span><br></pre></td></tr></table></figure><p>例如，在MD中，你可以选取文字后然后从选单中选择增加引用阶层。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">  Welcome to visit https://weiyigeek.top</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line"></span><br><span class="line">Welcome to visit https://blog.weiyigeek.top</span><br></pre></td></tr></table></figure><p><br></p><p><strong>任务列表</strong>: 如果需要标记某些待办事项，可以使用以下语法：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成的事项1</span><br><span class="line"><span class="bullet">- </span>[ ] 未完成的事项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>[x] 已完成事项1</span><br><span class="line"><span class="bullet">- </span>[x] 已完成事项2</span><br></pre></td></tr></table></figure><ul><li><p>[ ] 未完成的事项2</p></li><li><p>[x] 已完成事项1</p></li></ul><p><br></p><h3 id="链接、锚、缩写、脚注、引用"><a href="#链接、锚、缩写、脚注、引用" class="headerlink" title="链接、锚、缩写、脚注、引用"></a>链接、锚、缩写、脚注、引用</h3><p><strong>行内链接</strong>: 为文字设置href与alt备注或者简写用尖括号&lt;&gt;包裹url，这样生成的url锚文本就是url本身, 但其标签的属性将会 <code>rel=&quot;nofollow&quot;</code>。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">个人主页链接</span>](<span class="link">https://weiyigeek.top "WeiyiGeek"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>自动链接</strong>: Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只需用 &lt; &gt; 包起来，Markdown 就会自动把它转成链接。例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">weiyigeek.top</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">master@weiyigeek.top</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>温馨提示: 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：<a href="mailto:&#x6d;&#97;&#x73;&#x74;&#x65;&#114;&#x40;&#119;&#x65;&#x69;&#x79;&#105;&#x67;&#101;&#101;&#107;&#x2e;&#x74;&#x6f;&#112;">&#x6d;&#97;&#x73;&#x74;&#x65;&#114;&#x40;&#119;&#x65;&#x69;&#x79;&#105;&#x67;&#101;&#101;&#107;&#x2e;&#x74;&#x6f;&#112;</a>。</p><p><br/></p><p><strong>锚标记</strong>：可以把这个标记的链接内容定义出来；链接内容定义的形式为，下面这三种链接的定义都是相同：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例1.链接跳转 --&gt;</span></span></span><br><span class="line">This is [id] reference-style link.</span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/  "Optional Title Here"</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例2.数字形式 --&gt;</span></span></span><br><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol">1</span>] than from</span><br><span class="line">[<span class="string">Yahoo</span>][<span class="symbol">2</span>] or [<span class="string">MSN</span>][<span class="symbol">3</span>].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        "Google"</span><br><span class="line">  [2]: http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [3]: http://search.msn.com/    "MSN Search"</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- # 示例3.链接名称的方式 --&gt;</span></span></span><br><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol"></span>] than from</span><br><span class="line">[<span class="string">Yahoo</span>][<span class="symbol"></span>] or [<span class="string">MSN</span>][<span class="symbol"></span>].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        "Google"</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"</span><br><span class="line">  [msn]:    http://search.msn.com/    "MSN Search"</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>缩写（abbr）</strong> : 为网页中的文字创建一个描述介绍, 鼠标放在文字上即可。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*[HTML]: Hyper Text Markup Language</span><br><span class="line">*[W3C]:  World Wide Web Consortium </span><br><span class="line">The HTML specification</span><br><span class="line">is maintained by the W3C.</span><br></pre></td></tr></table></figure></p><p>显示结果:<br><em>[HTML]: Hyper Text Markup Language</em>[W3C]:  World Wide Web Consortium<br>The HTML specification<br>is maintained by the W3C.</p><p><br/></p><p><strong>脚注</strong>: <code>[^footnote]</code> 可以是任意英文字符,脚注的内容可以放在文章的任意位置（一般放最后），如果脚注显示在文章末尾；脚注后方的链接可以直接跳转回到加注的地方。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 Markdown[^1] 可以效率的书写文档，直接转换成 HTML[^2], 你可以使用 Typora[^T] 软件。</span><br><span class="line">[<span class="symbol">^1</span>]:<span class="link">Markdown 是一种纯文本标记语言。</span></span><br><span class="line">[<span class="symbol">^2</span>]:<span class="link">HyperText Markup Language 超文本标记语言。</span></span><br><span class="line">[<span class="symbol">^T</span>]:<span class="link">Typora 官网 &lt;https://typora.io/&gt;</span></span><br></pre></td></tr></table></figure><p>结果展示:使用 Markdown[^1] 可以效率的书写文档，直接转换成 HTML[^2], 你可以使用 Typora[^T] 软件。<br>[^1]:Markdown 是一种纯文本标记语言。<br>[^2]:HyperText Markup Language 超文本标记语言。<br>[^T]:Typora 官网 <a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><p><br></p><h3 id="图片、音乐、视频、地图、内容折叠"><a href="#图片、音乐、视频、地图、内容折叠" class="headerlink" title="图片、音乐、视频、地图、内容折叠"></a>图片、音乐、视频、地图、内容折叠</h3><p><strong>图片</strong>: 如果需要插入图片需要给出图片的链接，只是在中括号前加叹号.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1. --&gt;</span></span></span><br><span class="line">![<span class="string">alt_text</span>](<span class="link">https://blog.weiyigeek.top/img/avatar.jpg "WeiyiGeek avatar"</span>)</span><br><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2. --&gt;</span></span></span><br><span class="line">[<span class="symbol">avatar</span>]:<span class="link">https://blog.weiyigeek.top/img/avatar.jpg "WeiyiGeek avatar"</span></span><br><span class="line">![<span class="string">WeiyiGeek</span>][<span class="symbol">avatar</span>]</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>音乐</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1.audio 标签 --&gt;</span></span></span><br><span class="line">​<span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">controls</span>=<span class="string">""</span> <span class="attr">preload</span>=<span class="string">"none"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp3"</span> <span class="attr">src</span>=<span class="string">"音频地址"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span></span><br><span class="line">  你的浏览器不支持 audio 标签。</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2.iframe --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1488737309&amp;auto=1&amp;height=66"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>视频</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式1.video 标签, 原生仅支持播放 ogg/mp4/webm 格式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"http://v2v.cc/320x240.ogg"</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></span></span><br><span class="line">  你的浏览器不支持 <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>video<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span> 标签。</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方式2.iframe --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=59317437&amp;bvid=BV1Pt411G7qh&amp;cid=103365806&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><br></p><p><strong>地图:</strong> Markdown 中我们可以利用<code>iframe</code>标签插入各地图功能提供平台的地图Api功能(<a href="https://lbsyun.baidu.com/index.php?title=jspopularGL)。" target="_blank" rel="noopener">https://lbsyun.baidu.com/index.php?title=jspopularGL)。</a></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span></span></span></span><br><span class="line"><span class="xml">  src="https://map.weiyigeek.top/baiduMap.html" </span></span><br><span class="line"><span class="xml">  width="600" </span></span><br><span class="line"><span class="xml">  height="300" </span></span><br><span class="line"><span class="xml">  frameborder="0" </span></span><br><span class="line"><span class="xml">  scrolling="no"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><p><strong>内容折叠</strong></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span> <span class="xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>Title<span class="xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line">contents ...</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>结果展示:</p><details> <summary>Title</summary><br>contents …<br></details><p>温馨提示: 内容里面可以嵌套使用 Markdown 语法和 HTML 语法。</p><p><br></p><h3 id="嵌入代码"><a href="#嵌入代码" class="headerlink" title="嵌入代码"></a>嵌入代码</h3><p><strong>代码段落</strong>：则是在每行文字前加4个空格或者1个缩进符<code>[Tab]键</code>表示。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Tab]键 <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span> Tab <span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;p&gt; 前面四个空格 &lt;/p&gt;</span></span><br></pre></td></tr></table></figure><pre><code>&lt;p&gt; 前面四个空格 &lt;/p&gt;</code></pre><p><br/></p><p><strong>嵌入代码块</strong>: 以3个反引号`为开始与结束，反引号键一般在键盘按键1左侧，需要在英文状态下输入。</p><ul><li>在反引号之后加上脚本编程语言名称就会进行代码高亮的处理，例如: <code>python、php、go、bash</code>, 不一定所有的Markdown都支持。</li></ul><p>`<code>pythonimport osprint &#39;something&#39; \`</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> <span class="string">'something'</span></span><br></pre></td></tr></table></figure><ul><li>如果语言后面多一个:n，则会显示代码的行号，也是不一定所有的Markdown都支持。</li></ul><p>`<code>ruby:ndef add(a, b)return a + bend\`</code></p><p>温馨提示: 代码的高亮的具体样式是由CSS控制的，由Pygments生成,你可以访问<code>Pygments Styles</code>查看常见的几种风格。</p><p><br/></p><h3 id="特殊符号、Emoji"><a href="#特殊符号、Emoji" class="headerlink" title="特殊符号、Emoji"></a>特殊符号、Emoji</h3><p>描述: 特殊字符是相对于传统或常用的符号外，使用频率较少字符且难以直接输入的符号。比如数学符号；单位符号；制表符等。</p><ul><li>常用排版： ▌▍◆★☆☁➤➜❤➊➋➌</li><li>TodoList： ✅☑✓✔√☓☒✘ㄨ✕✖✗❌❎</li><li>emoji：🌹🍀🌙🍂🍃🌷💎🔥⭐🍄🏆</li></ul><p><br/></p><p><strong>转义：</strong>: 利用反斜杠来插入一些在语法中有其它意义的符号, 例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用标签），你可以在星号的前面加上反斜杠：<code>\*literal asterisks\*</code></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+   </span>加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>HTML 符号</strong>: HTML 支持的特殊符号：数学符号 / 希腊字母 / 其他 (<a href="https://www.w3school.com.cn/tags/html_ref_symbols.html" target="_blank" rel="noopener">https://www.w3school.com.cn/tags/html_ref_symbols.html</a>)</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">←left arrow        &amp;larr;&amp;#8592;</span><br><span class="line">↑up arrow        &amp;uarr;&amp;#8593;</span><br><span class="line">→right arrow        &amp;rarr;&amp;#8594;</span><br><span class="line">↓down arrow        &amp;darr;&amp;#8595;</span><br><span class="line">↔left right arrow&amp;harr;&amp;#8596;</span><br><span class="line">↵carriage return arrow&amp;crarr;&amp;#8629;</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>Emoji</strong>: Markdown 是支持Emoji的其语法为<code>:emoji:</code>,所有表情符号名称都是官方 Unicode 字符数据库或 CLDR 名称, 更多官方Emoji参考 (<a href="https://emojipedia.org/)" target="_blank" rel="noopener">https://emojipedia.org/)</a>, Markdown 原生支持的 Emoji 参考 (<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a>) , 值得注意不一定全部浏览器都支持。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:100:</span><br><span class="line">:smile:</span><br><span class="line">:kissing_heart:</span><br><span class="line">:smiley: </span><br><span class="line">:heart:</span><br><span class="line">:one:</span><br><span class="line">:o:</span><br><span class="line">:heavy<span class="emphasis">_check_</span>mark:</span><br><span class="line">:fire:</span><br></pre></td></tr></table></figure><p>结果展示:<br>:100: :smile:    :kissing_heart:    :smiley:    :heart:    :one:    :o:    :heavy_check_mark:    :fire:</p><p><br/></p><h3 id="位置、字体、字号、颜色"><a href="#位置、字体、字号、颜色" class="headerlink" title="位置、字体、字号、颜色"></a>位置、字体、字号、颜色</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>文字居中<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0099ff</span> <span class="attr">size</span>=<span class="string">12</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span></span>null<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>gray<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">      &lt;td bgcolor=#FF4500&gt;背景色是：OrangeRed，十六进制颜色值：#FF4500，rgb(255, 69, 0)&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>渲染结果:</strong></p><p><center>文字居中</center></p><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color=#0099ff size=12 face="黑体">黑体</font></p><p><font color=#00ffff size=3>null</font></p><p><font color=gray size=5>gray</font></p><table><tr><td bgcolor=#FF4500><br>    这里的背景色是：OrangeRed，十六进制颜色值：#FF4500，rgb(255, 69, 0)<br></td></tr></table><p><br/></p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>描述: Markdown 是通过数学公式渲染的插件来解析支持公式的，其中最常用的就是 <code>Katex</code>, 如果主题没有支持，可以在系统设置的 自定义内容页 head： 中加入以下代码：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/katex@0.12.0/dist/katex.min.css&quot; /&gt;</code></p><p>如果需要插入数学公式，可以使用以下语法：<br>`<code>mathE = mc^2U = IR\`</code></p><p>显示结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E &#x3D; mc^2 \\</span><br><span class="line">U &#x3D; IR</span><br></pre></td></tr></table></figure><p><br></p><p>可以创建行内公式，例如：<code>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</code> 和 <code>$\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$</code></p><p>显示结果：</p><p>$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><p>$\mathbf{y} = \mathbf{X}\boldsymbol\beta + \boldsymbol\varepsilon$</p><p><br></p><p>或者块级公式，例如：<code>$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</code></p><p>显示结果：</p><p>$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>例如，一写简单的数学公式<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 平方根 --&gt;</span></span></span><br><span class="line">$\sqrt&#123;3x-1&#125;+(1+x)^2$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 求圆的面积 --&gt;</span></span></span><br><span class="line">$$</span><br><span class="line">S=\pi r^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$ x &#123;=&#125; y^2 + 1 $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\left [ – \frac&#123;\hbar^2&#125;&#123;2 m&#125; \frac&#123;\partial^2&#125;&#123;\partial x^2&#125; + V \right ] \Psi = i \hbar \frac&#123;\partial&#125;&#123;\partial t&#125; \Psi</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><p>显示结果：</p><p>$\sqrt{3x-1}+(1+x)^2$</p><p>$$<br>S=\pi r^2<br>$$</p><p>$$ x {=} y^2 + 1 $$</p><p>$$<br>\left [ – \frac{\hbar^2}{2 m} \frac{\partial^2}{\partial x^2} + V \right ] \Psi = i \hbar \frac{\partial}{\partial t} \Psi<br>$$</p><p><br/></p><p><strong>大括号范围表达式</strong><br>描述：在进行数据算法学习时候常常会遇到大括号包含的范围表达式，此时我们可在markdown使用如下方式进行展示公式。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法一： --&gt;</span></span></span><br><span class="line">$$ f(x)=\left\&#123;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">x &amp; = &amp; \cos(t) \\</span><br><span class="line">y &amp; = &amp; \sin(t) \\</span><br><span class="line">z &amp; = &amp; \frac xy</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\right.</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法二： --&gt;</span></span></span><br><span class="line">$$ F^&#123;HLLC&#125;=\left\&#123;</span><br><span class="line">\begin&#123;array&#125;&#123;rcl&#125;</span><br><span class="line">F<span class="emphasis">_L       &amp;      &amp; &#123;0      &lt;      S_</span>L&#125;\\</span><br><span class="line">F^*<span class="emphasis">_L     &amp;      &amp; &#123;S_</span>L \leq 0 <span class="xml"><span class="tag">&lt; <span class="attr">S_M</span>&#125;\\</span></span></span><br><span class="line"><span class="xml">F^*_R     &amp;      &amp; &#123;S_M \leq 0 <span class="tag">&lt; <span class="attr">S_R</span>&#125;\\</span></span></span><br><span class="line"><span class="xml">F_R       &amp;      &amp; &#123;S_R \leq 0&#125;</span></span><br><span class="line"><span class="xml">\end&#123;array&#125; \right. $$</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 方法三: --&gt;</span></span></span><br><span class="line">$$f(x)=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0&amp; \text&#123;x=0&#125;\\</span><br><span class="line">1&amp; \text&#123;x!=0&#125;</span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p>结果显示：</p><p>方法一：<br>$$ f(x)=\left{<br>\begin{aligned}<br>x &amp; = &amp; \cos(t) \<br>y &amp; = &amp; \sin(t) \<br>z &amp; = &amp; \frac xy<br>\end{aligned}<br>\right.<br>$$</p><p>方法二：<br>$$ F^{HLLC}=\left{<br>\begin{array}{rcl}<br>F_L       &amp;      &amp; {0      &lt;      S_L}\<br>F^<em>_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\<br>F^</em>_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\<br>F_R       &amp;      &amp; {S_R \leq 0}<br>\end{array} \right. $$</p><p>方法三:<br>$$f(x)=<br>\begin{cases}<br>0&amp; \text{x=0}\<br>1&amp; \text{x!=0}<br>\end{cases}$$</p><p><br/></p><p>扩展知识: 有的Markdown解析同时也支持 HTML 属性，需要插件进行支持。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$ </span><br><span class="line">(x+1)^2 = \class&#123;hidden&#125;&#123;(x+1)(x+1)&#125; </span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">(x+1)^2 = \cssId&#123;step1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><p>温馨提示: 请注意 Markdown 特殊字符需要使用反斜杠进行转义，因此它们被视为数学而不是 Markdown。 如，<em> 和 _ 分别变为 \</em> 和 _。</p><p><br/></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>支持渲染 Mermaid 图表为 svg 内容，并直接保存渲染后的内容，所以无需在前台引入 Mermaid 插件进行渲染。 </p><p>如果需要插入流程图，可以使用以下语法, 但是需要注意不一定所有Markdown</p><p><strong>横向流程图：</strong></p><ul><li>示例1</li></ul><p>`<code>mermaidgraph LR;A--&gt;BB--&gt;CB--&gt;D\`</code></p><p>渲染结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A--&gt;B</span><br><span class="line">B--&gt;C</span><br><span class="line">B--&gt;D</span><br></pre></td></tr></table></figure></p><ul><li>示例2</li></ul><p>`<code>mermaidgraph LR;  A[Hard edge] --&gt;|Label| B(Round edge)  B --&gt; C{Decision}  C --&gt;|One| D[Result one]  C --&gt;|Two| E[Result two]\`</code></p><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A[Hard edge] --&gt;|Label| B(Round edge)</span><br><span class="line">  B --&gt; C&#123;Decision&#125;</span><br><span class="line">  C --&gt;|One| D[Result one]</span><br><span class="line">  C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>纵向流程图:</strong></p><ul><li>示例1<br>`<code>mermaidgraph TD;A[christmas] --&gt;B(Go shopping)B --&gt; C{Let me think}C --&gt;|One| D[Laptop]C --&gt;|Two| E[iPhone]C --&gt;|Three|F[Car]\`</code></li></ul><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><ul><li>示例2</li></ul><p>`<code>mermaidsequenceDiagram  participant Alice  participant Bob  Alice-&gt;&gt;John: Hello John, how are you?  loop Healthcheck      John-&gt;&gt;John: Fight against hypochondria  end  Note right of John: Rational thoughts &lt;br/&gt;prevail!  John--&gt;&gt;Alice: Great!  John-&gt;&gt;Bob: How about you?  Bob--&gt;&gt;John: Jolly good!\`</code></p><p>渲染结果: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">  participant Alice</span><br><span class="line">  participant Bob</span><br><span class="line">  Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">  loop Healthcheck</span><br><span class="line">      John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">  end</span><br><span class="line">  Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail!</span><br><span class="line">  John--&gt;&gt;Alice: Great!</span><br><span class="line">  John-&gt;&gt;Bob: How about you?</span><br><span class="line">  Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>代码流程图</strong></p><p>`<code></code>flow<br>st=&gt;start: Start  //start:开始<br>e=&gt;end: End        //end:结束<br>op1=&gt;operation: My Operation    //操作框<br>sub1=&gt;subroutine: My Subroutine   //子程序<br>cond=&gt;condition: Yes or No?  //条件判断框<br>io=&gt;inputoutput: catch something…   //输入输出框</p><p>st-&gt;op1-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op1<br>`<code></code></p><p>渲染效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start  </span><br><span class="line">e&#x3D;&gt;end: End     </span><br><span class="line">op1&#x3D;&gt;operation: My Operation  </span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine </span><br><span class="line">cond&#x3D;&gt;condition: Yes or No? </span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...  </span><br><span class="line">    </span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><p><br/></p><h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><p>例如，如果需要插入序列图，可以使用以下语法：<br><strong>示例1</strong></p><p>`<code>mermaidsequenceDiagram  Client-&gt;&gt;Server: How are you?  Server-&gt;&gt;Client: Great!\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Client-&gt;&gt;Server: How are you?</span><br><span class="line">Server-&gt;&gt;Client: Great!</span><br></pre></td></tr></table></figure><p><br/></p><p><strong>示例2</strong><br>`<code>sequenceAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><p><strong>非常注意：</strong></p><ul><li>1) 关键词（start、end、operation、subroutine、condition和inputoutput）后的冒号后要紧跟一个空格。</li><li>2) 使用-&gt;来连接两个元素，对于condition类型，有yes和no两个分支，如示例中的cond(yes)和cond(no)。</li></ul><p>更多关于流程图的语法说明：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><p><br></p><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><p>描述: 如果需要插入甘特图，可以使用以下语法：</p><p><strong>示例1</strong></p><p>`<code>mermaid  gantt  dateFormat YYYY-MM-DD  section S1  T1: 2014-01-01, 9d  section S2  T2: 2014-01-11, 9d  section S3  T3: 2014-01-02, 9d\`</code></p><p>渲染结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 9d</span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 9d</span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure><p>更多关于时序图的语法说明：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="工作效率" scheme="https://blog.weiyigeek.top/categories/%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/"/>
    
    
    <category term="Markdown" scheme="https://blog.weiyigeek.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>NextCloud私有云盘进阶扩展配置使用</title>
    <link href="https://blog.weiyigeek.top/2022/7-22-682.html"/>
    <id>https://blog.weiyigeek.top/2022/7-22-682.html</id>
    <published>2022-07-22T11:35:30.000Z</published>
    <updated>2022-09-09T04:57:25.047Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h1 id="0x01-扩展配置"><a href="#0x01-扩展配置" class="headerlink" title="0x01 扩展配置"></a>0x01 扩展配置</h1><h2 id="1-NextCloud之olnyOffice添加中文字体实践"><a href="#1-NextCloud之olnyOffice添加中文字体实践" class="headerlink" title="1.NextCloud之olnyOffice添加中文字体实践"></a>1.NextCloud之olnyOffice添加中文字体实践</h2><p>描述: 在NextCloud安装好olnyOffice插件后，打开示例word文档会发现其没有中文相关的字体，这对于处理企业内部共享办公文档使用中文字体来说是不行，所通过本章帮助遇到相同问题的朋友解决olnyoffice中没有中文字体的问题。</p><p><strong>大致流程:</strong></p><ul><li>1、安装 Docker (在前面已经讲解, 参考地址: <a href="https://blog.weiyigeek.top/2019/5-3-455.html#0x01-Docker-安装实践">https://blog.weiyigeek.top/2019/5-3-455.html#0x01-Docker-安装实践</a> )</li><li>2、部署 Onlyoffice (在前面已经讲解, 参考地址: <a href="https://blog.weiyigeek.top/2020/5-22-100.html#2-Docker安装-推荐">https://blog.weiyigeek.top/2020/5-22-100.html#2-Docker安装-推荐</a>)</li><li>3、删除 Onlyoffice 自带字体 (本节从此处开始实践)</li><li>4、将修改好的字体cp到容器 (或者直接映射到容器custom目录中)</li><li>5、在容器下执行/usr/bin/documentserver-generate-allfonts.sh</li></ul><p><strong>实践流程:</strong></p><ul><li>Step 1.准备文档需要用到的中文字体，此处我已经准备好了办公文档所需的中文方正字体，如需下载地址: <a href="https://share.weiyigeek.top/f/36158960-649385450-ac6168" target="_blank" rel="noopener">https://share.weiyigeek.top/f/36158960-649385450-ac6168</a> (网盘密码回复【onlyoffice中文字体】即获得, 回复地址：<a href="https://weiyigeek.top/wechat.html?key=onlyoffice中文字体" target="_blank" rel="noopener">https://weiyigeek.top/wechat.html?key=onlyoffice中文字体</a> )</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220815144138.png" alt="WeiyiGeek.onlyoffice中文字体" title="" class="">                <p>WeiyiGeek.onlyoffice中文字体</p>            </figure><p><br/></p><ul><li>Step 2.下载完成后上传到部署onlyoffice服务器中，此处我放置在<code>/app/onlyoffice/front/</code>目录之中.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/onlyoffice/front/ &amp;&amp; ls</span><br><span class="line">FZBSJW.TTF   FZDHTJW.TTF  FZHTJW.TTF    FZLSK.ttf    FZS3JW.TTF   FZSTK.TTF    FZXH1K.TTF   FZY3FW.TTF    FZYXK.ttf         方正中等线简体.ttf    方正少儿简体.ttf      方正祥隶简体.ttf     方正艺黑简体.ttf</span><br><span class="line">Fzbsk.ttf    FZDHTK.ttf   FZHTK.TTF     FZMHJW.TTF   FZS3K.ttf    FZSYFW.TTF   FZXKFW.TTF   FZY3JW.TTF    FZZBHFW.TTF       方正书宋简体.ttf      方正平和简体.ttf      方正稚艺简体.ttf     方正行楷简体.ttf</span><br><span class="line">FZCCHFW.TTF  FZFSFW.TTF   FZKANGFW.TTF  FZMHK.ttf    FZSEFW.TTF   FZSYJW.TTF   FZXKJW.TTF   FZY3K.TTF     FZZBHJW.TTF       方正仿宋简体.ttf      方正幼线简体.ttf      方正粗倩简体.ttf     方正超粗黑简体.ttf</span><br><span class="line">FZCCHJW.TTF  FZFSJW.TTF   FZKANGJW.TTF  FZNBSJW.TTF  FZSEJW.TTF   FZSYK.TTF    FZXKK.ttf    FZY4FW.TTF    FZZDXFW.TTF       方正准圆简体.ttf      方正康体简体.ttf      方正粗圆简体.ttf     方正铁筋隶书简体.ttf</span><br><span class="line">FZCCHK.ttf   FZFSK.TTF    FZKANGK.ttf   FZNBSK.ttf   FZSEK.ttf    FZSZFW.TTF   FZXLFW.TTF   FZY4JW.TTF    FZZDXJW.TTF       方正剪纸简体.ttf      方正彩云简体.ttf      方正粗宋简体.ttf     方正隶书简体.ttf</span><br><span class="line">FZCQFW.TTF   FZGLFW.TTF   FZKATFW.TTF   FZNSTFW.TTF  FZSHHFW.TTF  FZSZJW.TTF   FZXQFW.TTF   FZY4K.ttf     FZZDXK.TTF        方正北魏楷书简体.ttf  方正报宋简体.ttf      方正粗活意简体-.ttf  方正隶二简体.ttf</span><br><span class="line">FZCQJW.TTF   FZGLJW.TTF   FZKATJW.TTF   FZNSTJW.TTF  FZSHHJW.TTF  FZSZK.ttf    FZXQJW.TTF   FZYBKSFW.TTF  FZZHYFW.TTF       方正华隶简体.ttf      方正新报宋简体.ttf    方正粗活意简体.ttf   方正隶变简体.ttf</span><br><span class="line">FZCQK.ttf    FZH4FW.TTF   FZKTFW.TTF    FZNSTK.ttf   FZSHJW.TTF   FZWBFW.TTF   FZXQK.ttf    FZYBKSJW.TTF  FZZHYJW.TTF       方正卡通简体.ttf      方正新舒体简体.ttf    方正细倩简体.ttf     方正魏碑简体.ttf</span><br><span class="line">FZCSFW.TTF   FZHCJW.TTF   FZKTJW.TTF    FZPHFW.TTF   FZSHK.ttf    FZWBJW.TTF   FZXSHFW.TTF  FZYBXSFW.TTF  FZZHYK.ttf        方正古隶简体.ttf      方正楷体简体.ttf      方正细圆简体.ttf     方正黄草简体.ttf</span><br><span class="line">FZCSJW.TTF   FZHCK.ttf    FZKTK.TTF     FZPHTFW.TTF  FZSJSFW.TTF  FZWBK.ttf    FZXSHJW.TTF  FZYBXSJW.TTF  FZZKFW.TTF        方正启体简体.ttf      方正毡笔黑简体.ttf    方正细珊瑚简体.ttf   方正黑体简体.TTF</span><br><span class="line">FZCSK.ttf    FZHLFW.TTF   FZL2FW.TTF    FZPHTJW.TTF  FZSJSJW.TTF  FZXBSFW.TTF  FZXSHK.ttf   FZYHFW.TTF    FZZQFW.TTF        方正大标宋简体.ttf    方正水柱简体.ttf      方正细等线简体.ttf</span><br><span class="line">FZCYFW.TTF   FZHLJW.TTF   FZL2JW.TTF    FZPHTK.ttf   FZSJSK.ttf   FZXBSJW.TTF  FZXSSFW.TTF  FZYHJW.TTF    FZZQJW.TTF        方正大黑简体.ttf      方正水黑简体.ttf      方正细黑一简体.ttf</span><br><span class="line">FZCYJW.TTF   FZHLK.ttf    FZL2K.ttf     FZPWFW.TTF   FZSSFW.TTF   FZXBSK.TTF   FZXXLFW.TTF  FZYTFW.TTF    FZZQK.ttf         方正姚体简体.ttf      方正流行体简体.ttf    方正综艺简体.ttf</span><br><span class="line">FZCYK.ttf    FZHPFW.TTF   FZLBFW.TTF    FZPWJW.TTF   FZSSJW.TTF   FZXDXJW.TTF  FZXZTFW.TTF  FZYTJW.TTF    FZZYFW.TTF        方正宋一简体.ttf      方正琥珀简体.ttf      方正美黑简体.ttf</span><br><span class="line">FZDBSFW.TTF  FZHPJW.TTF   FZLBJW.TTF    FZPWK.ttf    FZSSK.TTF    FZXDXK.ttf   FZY1FW.TTF   FZYTK.TTF     FZZYJW.TTF        方正宋三简体.ttf      方正瘦金书简体.ttf    方正胖头鱼简体.ttf</span><br><span class="line">FZDBSJW.TTF  FZHPK.ttf    FZLBK.TTF     FZQTFW.TTF   FZSTFW.TTF   FZXH1FW.TTF  FZY1JW.TTF   FZYXFW.TTF    FZZYK.ttf         方正宋黑简体.ttf      方正硬笔楷书简体.ttf  方正胖娃简体.ttf</span><br><span class="line">FZDBSK.ttf   FZHTFW.TTF   FZLSJW.TTF    FZQTJW.TTF   FZSTJW.TTF   FZXH1JW.TTF  FZY1K.TTF    FZYXJW.TTF    方正中倩简体.ttf  方正小标宋简体.ttf    方正硬笔行书简体.ttf  方正舒体简体.ttf</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 3.此处onlyoffice是采用docker部署的所以我们需要进入到容器内部shell中，删除自带的一些没有字体，为中文字体腾出位置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps | grep <span class="string">"onlyoffice"</span></span><br><span class="line">45a356ff9fce   onlyoffice/documentserver   <span class="string">"/app/ds/run-documen…"</span>   2 months ago   Up 2 months   0.0.0.0:9000-&gt;80/tcp, :::9000-&gt;80/tcp, 0.0.0.0:9001-&gt;443/tcp, :::9001-&gt;443/tcp   onlyoffice</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it 45a356ff9fce bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器内部Shell终端</span></span><br><span class="line">$ rm -rf /var/www/onlyoffice/documentserver/core-fonts/*</span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/fonts/truetype &amp;&amp; ls </span><br><span class="line">custom  msttcorefonts liberation dejavu</span><br><span class="line">$ rm -rf liberation/ dejavu/</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 4.复制我准备的中文字体到onlyoffice容器的<code>/usr/share/fonts/truetype/custom</code>目录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/onlyoffice/front</span><br><span class="line">docker cp 方正黑体简体.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正楷体简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正仿宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正小标宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp 方正大标宋简体.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZKANGFW.TTF  onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZLSJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZPWJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZXQJW.TTF onlyoffice:/usr/share/fonts/truetype/custom</span><br><span class="line">docker cp FZZHYK.ttf onlyoffice:/usr/share/fonts/truetype/custom</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 5.当复制完成后我们又要重新进入onlyoffice容器中，执行<code>/usr/bin/documentserver-generate-allfonts.sh</code>命令生成onlyoffice可用字体。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/documentserver-generate-allfonts.sh</span><br><span class="line">Generating AllFonts.js, please wait...Done</span><br><span class="line">Generating presentation themes, please wait...Done</span><br><span class="line">ds:docservice: stopped</span><br><span class="line">ds:docservice: started</span><br><span class="line">ds:converter: stopped</span><br><span class="line">ds:converter: started</span><br></pre></td></tr></table></figure><p><br/></p><ul><li>Step 6.之后我们便可访问nextcloud网页端进行验证是否支持我们导入的中文字体，例如：</li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220815150432.png" alt="WeiyiGeek.字体验证" title="" class="">                <p>WeiyiGeek.字体验证</p>            </figure><p>至此完毕！</p><hr><h1 id="0x01-插件使用"><a href="#0x01-插件使用" class="headerlink" title="0x01 插件使用"></a>0x01 插件使用</h1><h2 id="安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报"><a href="#安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报" class="headerlink" title="安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报"></a>安装使用自建的Nextcloud云盘提供的Forms插件创建自托管互联网问卷调查实现每日健康上报</h2><p>描述：该 Forms 插件基于NextCloud实现自托管简单的调查和问卷调查，其主要功能有问卷表单创建、简单的分享和回复、问卷数据可视化展示与导出，对于内部人员问卷告别互联网<code>上某卷星、以及某问卷</code>吧。</p><p>NextCloud商店地址：<a href="https://apps.nextcloud.com/apps/forms" target="_blank" rel="noopener">https://apps.nextcloud.com/apps/forms</a></p><p>插件项目地址: <a href="https://github.com/nextcloud/forms" target="_blank" rel="noopener">https://github.com/nextcloud/forms</a> </p><p><strong>Form 插件特点</strong></p><ul><li>📝 简单的设计： 没有大量的选择，只有必需品, 当然在移动设备上运行良好。</li></ul><figure class="image-box">                <img src="https://github.com/nextcloud/forms/raw/master/screenshots/forms2.png" alt="简单的分享和回复" title="" class="">                <p>简单的分享和回复</p>            </figure><ul><li>📊 查看和导出结果： 结果可视化，也可以以与 Google 表单使用的相同格式导出为 CSV。</li></ul><figure class="image-box">                <img src="https://github.com/nextcloud/forms/raw/master/screenshots/forms3.png" alt="响应可视化和导出" title="" class="">                <p>响应可视化和导出</p>            </figure><ul><li>🔒 数据尽在掌握！ 与 Google Forms、Typeform、Doodle 等不同，调查信息和回复在您的实例上是保密的，不像一些公共的问卷系统会过渡收集个人信息。</li></ul><p><br/></p><p><strong>Form 安装使用</strong></p><p>步骤 01.此处以离线安装Forms为例, 首先查看我们部署的Nextcloud版本, 点击 头像 -&gt; 关于 -&gt; 将会显示实例版本号 (此处我的实践环境是 V23.0.0)</p><p>步骤 02.访问NextCloud商店中<a href="https://apps.nextcloud.com/apps/forms" target="_blank" rel="noopener">forms插件地址</a>, 找到尾部的<code>Downloads</code>下载对应实例版本支持的forms插件版本，例如，此处下载Nextcloud 23 版本对应 V2.5.1 版本的 forms 插件。</p><blockquote><p>下载地址：<a href="https://github.com/nextcloud/forms/releases/download/v2.5.1/forms.tar.gz" target="_blank" rel="noopener">https://github.com/nextcloud/forms/releases/download/v2.5.1/forms.tar.gz</a></p></blockquote><p>步骤 03.由于进行的是离线安装，则下载完成后需要将该 forms.tar.gz 插件压缩包上传至nextcloud服务器中，此处我使用scp命令上传到家目录，然后在复制或者移动到 nextcloud 安装的apps目录中进行解压, 解压后如下图所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 forms.tar.gz ubuntu@doc.weiyigeek.top:~</span><br><span class="line">cp forms.tar.gz /app/nextcloud/data/apps/</span><br><span class="line"><span class="built_in">cd</span> /app/nextcloud/data/apps/ &amp;&amp; tar -zxvf forms.tar.gz</span><br><span class="line">ls /app/nextcloud/data/apps/</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907131344.png" alt="WeiyiGeek.离线安装forms插件" title="" class="">                <p>WeiyiGeek.离线安装forms插件</p>            </figure><p>温馨提示：此处 Nextcloud 是通过 Docker 容器方式安装, 持久化的目录是<code>/app/nextcloud/data/</code>。</p><p>步骤 04.解压完成后使用浏览器访问搭建部署的 nextcloud 应用，此处我的环境地址是 doc.weiyigeek.top ，登录后点击头像 -&gt; + 应用 -&gt; 您的应用 -&gt; 启用 Forms 插件即可，如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907132145.png" alt="WeiyiGeek.启用Forms插件" title="" class="">                <p>WeiyiGeek.启用Forms插件</p>            </figure><p>步骤 05.启用后我们便可以使用Forms创建问卷调查表单了，首先点击头部菜单栏中的 表单图标 -&gt; +新表单 -&gt; 输入表单标题以及描述 -&gt; +添加一个新问题 ，如下图所示：</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907132802.png" alt="WeiyiGeek.使用Forms创建问卷调查表单" title="" class="">                <p>WeiyiGeek.使用Forms创建问卷调查表单</p>            </figure><p>步骤 06.问卷输入完成后点击右上角的共享链接，即可获得问卷调查链接（ <a href="http://doc.weiyigeek.top/apps/forms/3E9cGTcgkoXjnbWS" target="_blank" rel="noopener">http://doc.weiyigeek.top/apps/forms/3E9cGTcgkoXjnbWS</a> ）将其发送到需要统计的人员中即可。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907134430.png" alt="WeiyiGeek.问卷采集" title="" class="">                <p>WeiyiGeek.问卷采集</p>            </figure><p>步骤 07.问卷调查填写结束后,可以在<code>forms</code>表单中查看结果以及可以导出填写结果为CSV格式, 如下图所示</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220907134603.png" alt="WeiyiGeek.查看问卷调查结果" title="" class="">                <p>WeiyiGeek.查看问卷调查结果</p>            </figure><p>在此基础之上，我们也可以针对企业/学校需要了解员工/师生健康情况的需求，设置“每日健康上报”的系统调查表单。</p><figure class="image-box">                <img src="https://img2022.cnblogs.com/blog/2176087/202209/2176087-20220909112837800-1088211719.png" alt="每日健康上报" title="" class="">                <p>每日健康上报</p>            </figure><p>至此完毕! 希望大家玩的开心！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="私有云盘" scheme="https://blog.weiyigeek.top/categories/%E7%A7%81%E6%9C%89%E4%BA%91%E7%9B%98/"/>
    
    
    <category term="NextCloud" scheme="https://blog.weiyigeek.top/tags/NextCloud/"/>
    
  </entry>
  
  <entry>
    <title>使用WebP-Server-Go无缝转换图片为Google的webp格式让你网站访问加载速度飞起来</title>
    <link href="https://blog.weiyigeek.top/2022/7-18-674.html"/>
    <id>https://blog.weiyigeek.top/2022/7-18-674.html</id>
    <published>2022-07-18T05:36:30.000Z</published>
    <updated>2022-07-30T03:48:54.086Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><a id="more"></a><h2 id="0x00-快速入门"><a href="#0x00-快速入门" class="headerlink" title="0x00 快速入门"></a>0x00 快速入门</h2><h3 id="WebP-介绍"><a href="#WebP-介绍" class="headerlink" title="WebP 介绍"></a>WebP 介绍</h3><p><strong>什么是 WebP?</strong><br>WebP是由Google推出的一种全新图片文件格式，也是Telegram Stickers 主力使用的文件格式，可为 Web 上的图像提供卓越的无损和有损压缩, 它是在保证原有的图像质量前提下尽可能减少图形体积的一种格式, 使用WebP网站管理员和 Web 开发人员可以创建更小、更丰富的图像，从而使 Web 加载性能的提升更快。</p><ul><li>WebP的有损压缩算法是基于VP8视频格式的帧内编码，并以RIFF作为容器格式。 因此，它是一个具有八位色彩深度和以1:2的比例进行色度子采样的亮度-色度模型（YCbCr 4:2:0）的基于块的转换方案。不含内容的情况下，RIFF容器要求只需20字节的开销，依然能保存额外的元数据(metadata)。</li><li>WebP图像的边长限制为16383像素。</li></ul><p>在 WebP 的官网中，我们可以发现 Google 是这样宣传 WebP 的：<code>WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller than comparable JPEG images at equivalent SSIM quality index</code>.(与 PNG 相比，WebP 无损图像的大小要小 26%。在同等 SSIM 质量指数下，WebP 有损图像比可比较的 JPEG 图像小 25-34%)</p><p>通过是否对图片进行压缩，我们可以分为：</p><ul><li>无压缩。不对图片数据进行压缩处理，能准确地呈现原图片。 BMP 格式就是其中之一。</li><li>无损压缩。压缩算法对图片的所有的数据进行编码压缩，能在保证图片的质量的同时降低图片的尺寸。 png 是其中的代表。</li><li>有损压缩。压缩算法不会对图片所有的数据进行编码压缩，而是在压缩的时候，去除了人眼无法识别的图片细节。因此有损压缩可以在同等图片质量的情况下大幅降低图片的尺寸。 其中的代表是 jpg。</li></ul><p>简单来说，WebP 图片格式的存在，让我们在 WebP 上展示的图片体积可以有较大幅度的缩小，也就带来了加载性能的提升。</p><p><br/></p><p><strong>如何创建(转换)一个webp格式图片?</strong></p><p>要生成一个 WebP 图片非常简单，只需要下载 Google 提供的 cwebp 工具，并且使用 <code>cwebp -q 70 picture_with_alpha.png -o picture_with_alpha.webp</code> 命令就可以转换了, 并且转换出来的 webp 图片比原图会小不少，但是这个是单张图片，我们的目的是让站点的图片可以无痛地以 WebP 格式输出，如果我们的博客上有 100+ 张图片转换该如何操作呢？如果是更多呢？</p><p><br></p><p><strong>需求背景</strong><br>那么开发人员如何优雅的在不替换图片地址的情况下，将图片转为 webp 格式然后输出呢？</p><blockquote><p>答: 此时可以使用 webp-sh 组织最新开源的 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">webp_server_go</a> 项目，其原理是当我们请求一张图片的时候使用 web 代理工具转发到 webp_server_go 应用进行处理，处理完成之后返回 webp 格式的图片，并且会保留处理后的图片以供后面的 Nginx Web访问。</p></blockquote><p><br></p><h3 id="Webp-Server-介绍"><a href="#Webp-Server-介绍" class="headerlink" title="Webp-Server 介绍"></a>Webp-Server 介绍</h3><p><strong>Webp-Server</strong><br>描述: WebP-Server工具，可将您的 JPG/PNG (有损压缩与无损压缩以及常用图片格式) 即时压缩为 WebP 格式，非常高效可以大幅度的减少图片体积，减少出口带宽，提高用户体验。目前支持的图片格式：JPEG、PNG、BMP、GIF（暂时为静态图片。</p><p>例如，使用Webp-Server并争取配置号Nginx代理后，当你访问 <code>https://weiyigeek.top/1.jpg</code> 时，它将作为 image/webp ，而不会更改 URL, 但对于 Safari 用户，将使用原始图像。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220726201430.png" alt="WeiyiGeek.VS WebP-Server" title="" class="">                <p>WeiyiGeek.VS WebP-Server</p>            </figure><p><br/></p><p><strong>支持多开发语言</strong><br>描述: 其实 webp server 有多种语言都实现了，并且这些仓库还都放在了 webp-sh 该 Organizations 下, 但是对于当下Go语言在编程开发语言中流行程度，官方也非常建议使用go开发的webp-server版本，并且其支持多个webp-server Feature。</p><p>Tips: WebP Server is under the GPLv3.</p><p>webp_server_go - 主要更新仓库 当前版本 (WebP Server Go 0.4.5)<br>webp_server_node - 最后更新 2020 年 7 月 6 日<br>webp_server_java - 最后更新 2020 年 3 月 6 日<br>webp_server_python - 最后更新时间 2020 年 3 月 2 日</p><p>温馨提示: 不同版本之间的比较参考地址<a href="https://docs.webp.sh/comparisons" target="_blank" rel="noopener">https://docs.webp.sh/comparisons</a>.</p><p><br/></p><p><strong>Webp-server 的当前问题?</strong></p><ul><li>Safari doesn’t support it. 不支持 Safari。</li><li>Tons of Nginx and JavaScript works. 工作需要依赖于Nginx与JavaScript。</li><li>It need a tool to transfer. 它需要一个工具来传输。</li><li>mod_pagespeed is not easy to use. mod_pagespeed 不好用。</li></ul><p><br/></p><p><strong>学习参考</strong><br>官网地址: <a href="https://webp.sh" target="_blank" rel="noopener">https://webp.sh</a><br>文档说明: <a href="https://docs.webp.sh/" target="_blank" rel="noopener">https://docs.webp.sh/</a><br>项目地址: <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">https://github.com/webp-sh/webp_server_go</a><br>下载地址: <a href="https://github.com/webp-sh/webp_server_go/releases/" target="_blank" rel="noopener">https://github.com/webp-sh/webp_server_go/releases/</a><br>WebP Cloud Services：<a href="https://webp.se/we" target="_blank" rel="noopener">https://webp.se/we</a></p><hr><h2 id="0x01-安装实践"><a href="#0x01-安装实践" class="headerlink" title="0x01 安装实践"></a>0x01 安装实践</h2><h3 id="二进制安装部署"><a href="#二进制安装部署" class="headerlink" title="二进制安装部署"></a>二进制安装部署</h3><p>描述: 此处采用 WebP 服务器的 Go 版本进行实践，此时我已经进行了Nginx的安装配置, 如没有你还安装配置安全的Nginx的读者可以浏览此篇入门文章【<a href="https://blog.weiyigeek.top/2019/9-1-121.html">1.Nginx基础介绍与安装配置实践指南 - https://blog.weiyigeek.top/2019/9-1-121.html</a>】进行学习。</p><p><strong>快速部署</strong><br>Step 1.获取 WebP server-Go 版本的二进制方式进行安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前置环境，您需要安装一些依赖项（AVIF 编码器需要它）：</span></span><br><span class="line">INSTALL_HOME=/opt/webps</span><br><span class="line">WEBP_HOST=127.0.0.1</span><br><span class="line">WEBP_PORT=3333</span><br><span class="line">WEBP_QUALITY=80</span><br><span class="line">IMG_PATH=/usr/share/nginx/html</span><br><span class="line">EXHAUST_PATH=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class="line"></span><br><span class="line"><span class="comment">## Ubuntu</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/bin/apt ];<span class="keyword">then</span></span><br><span class="line">  apt install libaom-dev -y</span><br><span class="line">  ln -s /usr/lib/x86_64-linux-gnu/libaom.so /usr/lib/x86_64-linux-gnu/libaom.so.3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/bin/yum ];<span class="keyword">then</span></span><br><span class="line">  yum install libaom-devel -y</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载、可执行权限、软连接</span></span><br><span class="line">mkdir -vp <span class="variable">$&#123;INSTALL_HOME&#125;</span>/cache</span><br><span class="line">wget --no-check-certificate https://github.com/webp-sh/webp_server_go/releases/download/0.4.5/webp-server-linux-amd64-80aa8cb63a85a986f83a88579e8d2b4b -O <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class="line">chmod +x <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server</span><br><span class="line">ln -s <span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server /usr/<span class="built_in">local</span>/bin/webp-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -dump-config &gt; <span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line">sed -i -e <span class="string">"s#127.0.0.1#<span class="variable">$&#123;WEBP_HOST&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#3333#<span class="variable">$&#123;WEBP_PORT&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#80#<span class="variable">$&#123;WEBP_QUALITY&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#./pics#<span class="variable">$&#123;IMG_PATH&#125;</span>#"</span> \</span><br><span class="line">  -e <span class="string">"s#./exhaust#<span class="variable">$&#123;EXHAUST_PATH&#125;</span>#"</span> <span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动运行 webp-server 服务 (前台运行)</span></span><br><span class="line"><span class="variable">$&#123;INSTALL_HOME&#125;</span>/webp-server --config=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br></pre></td></tr></table></figure></p><p><br></p><p>使用参数一览:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webp-server --<span class="built_in">help</span></span><br><span class="line">Usage of webp-server:</span><br><span class="line">  -V    Show version information.</span><br><span class="line">  -config string /path/to/config.json. (Default: ./config.json) (default <span class="string">"config.json"</span>)</span><br><span class="line">  -dump-config  Print sample config.json</span><br><span class="line">  -dump-systemd Print sample systemd service file.</span><br><span class="line">  -<span class="built_in">jobs</span> int     Prefetch thread, default is all. (default 2)</span><br><span class="line">  -prefetch     Prefetch and convert image to webp</span><br><span class="line">  -v    Verbose, <span class="built_in">print</span> out debug info.</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727111423.png" alt="WeiyiGeek.Start webp-server 服务" title="" class="">                <p>WeiyiGeek.Start webp-server 服务</p>            </figure><p>温馨提示: webp-server 默认生成的<code>config.json</code>配置文件实例及其参数解释。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /opt/webps/config.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="string">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="string">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="string">"IMG_PATH"</span>: <span class="string">"/usr/share/nginx/html"</span>,</span><br><span class="line">  <span class="string">"EXHAUST_PATH"</span>: <span class="string">"/opt/webps/cache"</span>,</span><br><span class="line">  <span class="string">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>],</span><br><span class="line">  <span class="string">"ENABLE_AVIF"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>HOST：一般不修改。</li><li>PORT：webp_server_go 的运行端口。</li><li>QUALITY：转换质量，默认为 80%。</li><li>IMG_PATH：固定格式，可以为 <code>/usr/share/nginx/html</code> 目录路径 或者 Remote Backend 站点 <code>&quot;IMG_PATH&quot;: &quot;https://test.webp.sh&quot;</code></li><li>EXHAUST_PATH：固定格式，/运行 Halo 的用户名/.halo/cache</li><li>ALLOWED_TYPES：需要转换的格式</li></ul><p>温馨提示: 默认情况下<code>&quot;ENABLE_AVIF&quot;: false</code>是禁用 AVIF 支持，因为将图像转换为 AVIF 会消耗 CPU。<br>温馨提示: 使用 <code>prefetch</code> 参数会将您的所有图像转换为 WebP, 如果要在预取时控制要使用的线程，请添加 -jobs=4, 默认情况下它将使用您所有的 CPU 内核。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地 CPU 内核数</span></span><br><span class="line">$ lscpu  | grep <span class="string">"^CPU(s)"</span></span><br><span class="line">CPU(s):   2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 webp 预取时使用的内核数</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -prefetch -<span class="built_in">jobs</span>=1 --config=<span class="variable">$&#123;INSTALL_HOME&#125;</span>/config.json</span><br><span class="line">  <span class="comment"># INFO[2022-07-27 11:47:25][153:main.convertLog()] WebP@80.00%: /usr/local/app/weiyigeek/img/wechat-search.png-&gt;/opt/webps/cache/img/wechat-search.png.1647996506.webp 32641-&gt;12416 38.04% deflated</span></span><br></pre></td></tr></table></figure><p><br/></p><p>Step 2.当然也可使用systemd来管理webp服务，好在 webp 为我们提供标准的 systemd 服务文件, 可使用如下命令进行生成与配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/webp-server -dump-systemd &gt; /lib/systemd/system/webp-server.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> webp-server.service</span><br><span class="line">systemctl start webp-server.service</span><br></pre></td></tr></table></figure><p>温馨提示: 使用 <code>-dump-systemd</code> 参数生成的配置文件，其中默认的 webp-server 路径为 <code>/opt/webps/webp-server</code>，并且配置文件路径为 <code>/opt/webps/config.json</code>，如果你的安装路径不是上述安装路径请更改<code>/lib/systemd/system/webp-server.service</code>中对应路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat /lib/systemd/system/webp-server.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=WebP Server Go</span><br><span class="line">Documentation=https://github.com/webp-sh/webp_server_go</span><br><span class="line">After=nginx.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">StandardError=journal</span><br><span class="line">WorkingDirectory=/opt/webps</span><br><span class="line">ExecStart=/opt/webps/webp-server --config /opt/webps/config.json</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>扩展补充: 使用Supervisor托管启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[program:webpserver]</span><br><span class="line"><span class="built_in">command</span>=/your/webservergo/path/webp-server-linux-amd64 --config=/your/webservergo/path/config.json</span><br><span class="line">directory=/your/webservergo/path</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=3</span><br><span class="line">startretries=3</span><br><span class="line">stdout_logfile=/your/<span class="built_in">log</span>/path/webpserver.out.log</span><br><span class="line">stderr_logfile=/your/<span class="built_in">log</span>/path/webpserver.err.log</span><br><span class="line">stdout_logfile_maxbytes=2MB</span><br><span class="line">stderr_logfile_maxbytes=2MB</span><br><span class="line">user=root</span><br><span class="line">priority=999</span><br><span class="line">numprocs=1</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br></pre></td></tr></table></figure><p><br></p><p>Step 3.Nginx 配置示例只允许图像发送到 WebP Server Go，其他扩展应该只发送原始文件，让您的 Nginx 访问图片后端代理到 <code>proxy_pass http://localhost:3333/</code>，你的 webp-server 就可以运行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># static.conf</span></span><br><span class="line"><span class="comment"># https - static.weiyigeek.top</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  listen       443 ssl http2;</span><br><span class="line">  server_name  static.weiyigeek.top;</span><br><span class="line"></span><br><span class="line">  charset utf-8;</span><br><span class="line">  access_log /var/<span class="built_in">log</span>/nginx/static/static.log custom buffer=128k flush=3m;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># CORS</span></span><br><span class="line">  add_header Access-Control-Allow-Origin <span class="string">'*.weiyigeek.top'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Methods <span class="string">'GET,POST'</span>;</span><br><span class="line">  add_header Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># HSTS</span></span><br><span class="line">  add_header Strict-Transport-Security <span class="string">"max-age=15768000;includeSubDomains;preload"</span> always;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># XXS-Protection</span></span><br><span class="line">  add_header X-XSS-Protection <span class="string">"1; mode=block"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ssl 证书</span></span><br><span class="line">  ssl_certificate      /root/.acme.sh/weiyigeek.top_ecc/fullchain.cer;</span><br><span class="line">  ssl_certificate_key  /root/.acme.sh/weiyigeek.top_ecc/weiyigeek.top.key;</span><br><span class="line">  ssl_session_cache    shared:MozSSL:10m;</span><br><span class="line">  ssl_session_timeout  1d;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE:ECDH:AES:HIGH:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!NULL:!aNULL:!eNULL:!EXPORT:!PSK:!ADH:!DH:!DES:!MD5:!RC4;</span><br><span class="line">  ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 访问规则</span></span><br><span class="line">  location ~* \.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:3333;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_hide_header X-Powered-By;</span><br><span class="line">    proxy_set_header HOST <span class="variable">$http_host</span>;</span><br><span class="line">    add_header Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果您的网站使用 CDN（如 Cloudflare），我们建议您添加一个私有标头以防止 Cloudflare 缓存这些图像，如下例所示</span></span><br><span class="line">  location ^~ /wp-content/uploads/ &#123;</span><br><span class="line">    add_header Cache-Control <span class="string">'private'</span>;</span><br><span class="line">    proxy_pass http://127.0.0.1:3333;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查并重载Nginx配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查配置文件是否有问题</span></span><br><span class="line">nginx -t </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载 Nginx 配置</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p><p>温馨提示: 上述配置中我添加了Nginx安全方面的配置，如果你只是测试验证则可以取消上述ssl等安全配置。</p><p><br></p><p>Step 4.重载 nginx 后查看源站图片相应头与通过webp-server图片响应头的区别。</p><ul><li>源站图片地址: <a href="https://www.weiyigeek.top/img/wechat-search.png" target="_blank" rel="noopener">https://www.weiyigeek.top/img/wechat-search.png</a></li><li>webp格式图片地址:  <a href="https://static.weiyigeek.top/img/wechat-search.png" target="_blank" rel="noopener">https://static.weiyigeek.top/img/wechat-search.png</a></li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727142451.png" alt="WeiyiGeek.webp-server images" title="" class="">                <p>WeiyiGeek.webp-server images</p>            </figure><p>温馨提示: WebP Server Go 将呈现以下标头<code>etag</code>和<code>x-compression-rate</code>作为响应, 前者格式为<code>W/&quot;&lt;content length&gt;-&lt;CRC Checksum of the file&gt;&quot;</code>,而后者格式为 <code>size(webp_image)/size(original_image)</code> 如果超过1则返回原图。</p><p><br></p><p>Step 5.我们还可以在webp服务器中支持多路径，仅仅只需要一个创建链接符号 ,例如：<code>ln -s  /app/weiyigeek.gitee.io/img/ /usr/share/nginx/html/blog/</code>，然后在分别访问如下验证区别。</p><ul><li>源站图片地址: <a href="https://blog.weiyigeek.top/img/banner.jpg">https://blog.weiyigeek.top/img/banner.jpg</a></li><li>webp格式图片地址: <a href="https://static.weiyigeek.top/blog/banner.jpg" target="_blank" rel="noopener">https://static.weiyigeek.top/blog/banner.jpg</a></li></ul><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220727143937.png" alt="WeiyiGeek.webp-server banner" title="" class="">                <p>WeiyiGeek.webp-server banner</p>            </figure><p>从上述两个对比结果中可以看到使用webp-server转换后的图片体积直线下降, 此处以<code>banner.jpg</code>图片文件为例，可以看到从原图98K下降到了17.57K。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原图大小 (98K)</span></span><br><span class="line">$ ls -alh banner.jpg</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 98K Apr 13 20:40 banner.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx Gzip 源站图片大小 80.57KB ~ (原图 98KB) 下载于：220 毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Webp 格式图片大小  17.57 KB ~ (18 kB) 下载于：187 毫秒</span></span><br><span class="line">$ ls /opt/webps/cache/blog</span><br><span class="line">-rw-r--r-- 1 root root  18K Jul 27 14:33 banner.jpg.1649853609.webp</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="Docker安装部署"><a href="#Docker安装部署" class="headerlink" title="Docker安装部署"></a>Docker安装部署</h3><p>描述: 如果要运行 webp-server insider docker 容器，可以运行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker command</span></span><br><span class="line">docker run -d -p 3333:3333 -v /path/to/pics:/opt/pics --name webp-server webpsh/webp-server-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">tee docker-compose.yml &lt;&lt;<span class="string">'EOF'</span></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  webp:</span><br><span class="line">    image: webpsh/webp-server-go</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./path/to/pics:/opt/pics</span><br><span class="line">      - ./path/to/exhaust:/opt/exhaust</span><br><span class="line">      - ./config.json:/etc/config.json</span><br><span class="line">    ports:</span><br><span class="line">      -  127.0.0.1:3333:3333</span><br><span class="line">    deploy:</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          memory: 200M</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><br></p><hr><h2 id="0x02-博客网站图片资源访问优化实践"><a href="#0x02-博客网站图片资源访问优化实践" class="headerlink" title="0x02 博客网站图片资源访问优化实践"></a>0x02 博客网站图片资源访问优化实践</h2><p>描述: 此处我利用自己的博客网站 (<a href="https://blog.weiyigeek.top">https://blog.weiyigeek.top</a>) 进行将使用webp_server_go，将网站中的图片优化前后的访问情况进行对比。</p><p>步骤 01.首先将webp_server的config.json文件中<code>IMG_PATH</code>指向我们的博客在Linux中的绝对地址目录，随后重启webp-server.service.</p><p><br/></p><p>步骤 02.然后修改Nginx中针对博客站点的配置(<code>/usr/local/nginx/conf.d/blog.conf</code>)，将图片访问全都代理到本地的3333端口(127.0.0.1:3333)，修改后重载nginx;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ more /usr/<span class="built_in">local</span>/nginx/conf.d/blog.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问规则 (关键部分)</span></span><br><span class="line">location ~* \.(?:jpg|jpeg|gif|png)$ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:3333;</span><br><span class="line">  proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  proxy_hide_header X-Powered-By;</span><br><span class="line">  proxy_set_header HOST <span class="variable">$http_host</span>;</span><br><span class="line">  add_header Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置核验 &amp; 重载Nginx</span></span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><br/></p><p>步骤 03.当Nginx重载后我们便可观察开启webp_server访问后端图片与直接访问后端图片网站访问速度的区别（在开启前我已经进行相应的测试截图）。</p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220728130434.png" alt="WeiyiGeek.优化后访问速度VS" title="" class="">                <p>WeiyiGeek.优化后访问速度VS</p>            </figure><p>从图中我们可以得出在未使用<code>webp_server</code>进行图片转换时其传输的字节数以及完成耗时，都要大于开启<code>webp_server</code>图片转换的站点。</p><p><br/></p><p>步骤 04.为了更加直观的展示 Web 站点性能如何，我们可以使用 Google 的 <a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> 进行分析，并按照分析结果中的优化推荐进行操作。</p><p>站点性能结果地址: <a href="https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top" target="_blank" rel="noopener">https://pagespeed.web.dev/report?url=https://blog.weiyigeek.top</a></p><figure class="image-box">                <img src="https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2022/5/20220728131209.png" alt="WeiyiGeek.PageSpeed Insights result" title="" class="">                <p>WeiyiGeek.PageSpeed Insights result</p>            </figure><p>从上述图中可看到左边图为优化前、而右边图则优化后的结果，可知引入 WebP Server Go 可以无缝转换图片为 WebP，可以让站点图片加载速度更快，并且无需更改现有网站上图片资源路径，极大的方便各位博客以及网站站长。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="网站优化" scheme="https://blog.weiyigeek.top/categories/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="webp_server_go" scheme="https://blog.weiyigeek.top/tags/webp-server-go/"/>
    
  </entry>
  
</feed>
