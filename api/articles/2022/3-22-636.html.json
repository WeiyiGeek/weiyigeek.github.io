{"title":"Harbor记异常迁移恢复实践","slug":"虚拟云容/云容器/Harbor/Harbor异常迁移恢复实践记录","date":"2022-03-22T09:37:47.000Z","updated":"2023-01-31T02:29:10.471Z","url":"2022/3-22-636.html","path":"api/articles/2022/3-22-636.html.json","covers":["https://img.weiyigeek.top/2022/2/20220406224803.png","https://img.weiyigeek.top/2022/2/20220406225255.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"0x00-记一次k8s集群搭建的Harbor私有仓库无法进行镜像拉取迁移恢复实践\"><a href=\"#0x00-记一次k8s集群搭建的Harbor私有仓库无法进行镜像拉取迁移恢复实践\" class=\"headerlink\" title=\"0x00 记一次k8s集群搭建的Harbor私有仓库无法进行镜像拉取迁移恢复实践\"></a>0x00 记一次k8s集群搭建的Harbor私有仓库无法进行镜像拉取迁移恢复实践</h2><p>描述: Harbor 是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源 Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。</p>\n<p><strong>前置知识了解:</strong></p>\n<ul>\n<li>Harbor之企业级私有镜像存储仓库入门实践（<a href=\"https://blog.weiyigeek.top/2020/6/22/510.html）\">https://blog.weiyigeek.top/2020/6/22/510.html）</a></li>\n<li>如何使用Skopeo做一个优雅的镜像搬运工（<a href=\"https://blog.weiyigeek.top/2022/1/20/584.html）\">https://blog.weiyigeek.top/2022/1/20/584.html）</a></li>\n</ul>\n<p><br/></p>\n<p><strong>环境说明:</strong> 由于Harbor是安装在Kubernetes集群内部,由于在调整集群的网络通信插件时, 无法通过浏览器访问工作节点+nodePort方式访问集群中的Harbor服务，同时外部也不能通过ingress来代理转发harbor,所以为了尽快的恢复镜像仓库，采用Skopeo工具以及如下方式进行镜像的迁移。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kubernetes 版本: v1.22.2</span><br><span class=\"line\">  kubeadm version: &amp;version.Info&#123;Major:<span class=\"string\">\"1\"</span>, Minor:<span class=\"string\">\"22\"</span>, GitVersion:<span class=\"string\">\"v1.22.2\"</span>, GitCommit:<span class=\"string\">\"8b5a19147530eaac9476b0ab82980b4088bbc1b2\"</span>, GitTreeState:<span class=\"string\">\"clean\"</span>, BuildDate:<span class=\"string\">\"2021-09-15T21:37:34Z\"</span>, GoVersion:<span class=\"string\">\"go1.16.8\"</span>, Compiler:<span class=\"string\">\"gc\"</span>, Platform:<span class=\"string\">\"linux/amd64\"</span>&#125;</span><br><span class=\"line\">skopeo 版本: 1.5.3-dev commit: df4d82b960572c19e9333381a203c0ac475766d7</span><br><span class=\"line\">Harbor 版本: v2.1.3-b6de84c5</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deploy -n harbor</span><br><span class=\"line\">  <span class=\"comment\"># NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-chartmuseum     1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-clair           1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-core            1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-jobservice      1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-notary-server   1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-notary-signer   1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-portal          1/1     1            1           300d</span></span><br><span class=\"line\">  <span class=\"comment\"># harbor-harbor-registry        1/1     1            1           300d</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p><strong>操作步骤:</strong></p>\n<ul>\n<li>Step 1.在工作节点上执行如下命令，查看仓库中存在的镜像信息。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Harbor 默认用户和认证密钥(正式环境一定要更改哟)</span></span><br><span class=\"line\">USER=<span class=\"string\">\"admin\"</span></span><br><span class=\"line\">TOKEN=<span class=\"string\">\"Harbor12345\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过 Harbor API 查看镜像名称</span></span><br><span class=\"line\">curl --insecure -u <span class=\"variable\">$&#123;USER&#125;</span>:<span class=\"variable\">$&#123;TOKEN&#125;</span> https://harbor.cloud/v2/_catalog 2&gt;/dev/null|jq .repositories[]|tr -d <span class=\"string\">'\"'</span> &gt;&gt; image_names.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 image_names.txt 输出结果</span></span><br><span class=\"line\">devops/bianmin</span><br><span class=\"line\">devops/bitnami-redis-cluster</span><br><span class=\"line\">devops/bmcx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 2.利用for循环获取Tags并拼接镜像与tag信息<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> $(cat image_names.txt);<span class=\"keyword\">do</span></span><br><span class=\"line\">  tags=`curl -u admin:Harbor12345 --insecure https://harbor.cloud/v2/<span class=\"variable\">$&#123;name&#125;</span>/tags/list 2&gt;/dev/null|jq <span class=\"string\">\".tags[]\"</span>|tr -d <span class=\"string\">'\"'</span>`</span><br><span class=\"line\">  <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> <span class=\"variable\">$tags</span>;<span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$name</span>:<span class=\"variable\">$tag</span> &gt;&gt;image_tags.txt; <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 image_tags.txt 输出结果</span></span><br><span class=\"line\">devops/bianmin:1.0.7-SNAPSHOT</span><br><span class=\"line\">devops/bianmin:stress</span><br><span class=\"line\">devops/bitnami-redis-cluster:6.0.10-debian-10-r5</span><br><span class=\"line\">devops/bmcx:1.0.7-SNAPSHOT</span><br><span class=\"line\">devops/bmcx:1.1.0-SNAPSHOT</span><br><span class=\"line\">devops/bmcx:latest</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 3.例如，我们找一个<code>devops/bmcx:1.1.0-SNAPSHOT</code>镜像分析其路径特征。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.环境变量设置</span></span><br><span class=\"line\">REPO_DIR=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\">BLOB_DIR=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /storage/pvc/devops/harbor-harbor-harbor-registry-pvc-151479ef-44f1-44dd-960c-afcbf12ba8a8/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.查看repositories目录中存在的所有镜像current路径</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> $(find <span class=\"variable\">$&#123;REPO_DIR&#125;</span> -<span class=\"built_in\">type</span> d -name <span class=\"string\">\"current\"</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;image&#125;</span> &gt;&gt; repo_current.txt</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.查看指定bmcx:1.1.0-SNAPSHOT镜像的current路径</span></span><br><span class=\"line\">grep <span class=\"string\">\"1.1.0-SNAPSHOT\"</span> repo_current.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.提取路径中的镜像相关信息</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'docker/registry/v2/repositories/devops/bmcx/_manifests/tags/1.1.0-SNAPSHOT/current'</span> | awk -F <span class=\"string\">'/'</span> <span class=\"string\">'&#123;print $5\"/\"$6\":\"$9&#125;'</span></span><br><span class=\"line\"><span class=\"comment\"># devops/bmcx:1.1.0-SNAPSHOT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5.查看该镜像link信息</span></span><br><span class=\"line\">cat <span class=\"string\">'docker/registry/v2/repositories/devops/bmcx/_manifests/tags/1.1.0-SNAPSHOT/current/link'</span> | sed <span class=\"string\">'s/sha256://'</span></span><br><span class=\"line\">  <span class=\"comment\"># 68acf0f6c61b11bb79d6787146ed3bd88850b9071b3b59d86439d55ae5e31928</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 6.查看该镜像link中各层</span></span><br><span class=\"line\">link=68acf0f6c61b11bb79d6787146ed3bd88850b9071b3b59d86439d55ae5e31928</span><br><span class=\"line\">cat docker/registry/v2/blobs/sha256/<span class=\"variable\">$&#123;link:0:2&#125;</span>/<span class=\"variable\">$&#123;link&#125;</span>/data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"schemaVersion\"</span>: 2,</span><br><span class=\"line\">  <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.container.image.v1+json\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"size\"</span>: 2429,</span><br><span class=\"line\">    <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:b938271c3bd17a187e5c95508adf49093f042cb176a3652c74a76e6d9770eb5b\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"layers\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 723146,</span><br><span class=\"line\">      <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:07a152489297fc2bca20be96fab3527ceac5668328a30fd543a160cd689ee548\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 132,</span><br><span class=\"line\">      <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:8142e84f0be01a60008360c5d5592e3f02507968b548797513ef7d5080dd5d0c\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"mediaType\"</span>: <span class=\"string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"size\"</span>: 43984533,</span><br><span class=\"line\">      <span class=\"string\">\"digest\"</span>: <span class=\"string\">\"sha256:702d51e3f3237c8ffbabeefec12934cc2a9e5b6f01fc414cf17f708ec1c09d0f\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 7.使用正则匹配出所有的 sha256 值然后排序去重</span></span><br><span class=\"line\">images_layer=docker/registry/v2/blobs/sha256/<span class=\"variable\">$&#123;link:0:2&#125;</span>/<span class=\"variable\">$&#123;link&#125;</span>/data</span><br><span class=\"line\">layers=$(grep -Eo <span class=\"string\">\"\\b[a-f0-9]&#123;64&#125;\\b\"</span> <span class=\"variable\">$&#123;images_layer&#125;</span> | sort -n | uniq)</span><br><span class=\"line\">b938271c3bd17a187e5c95508adf49093f042cb176a3652c74a76e6d9770eb5b</span><br><span class=\"line\">07a152489297fc2bca20be96fab3527ceac5668328a30fd543a160cd689ee548   <span class=\"comment\"># 以此层为例</span></span><br><span class=\"line\">702d51e3f3237c8ffbabeefec12934cc2a9e5b6f01fc414cf17f708ec1c09d0f</span><br><span class=\"line\">8142e84f0be01a60008360c5d5592e3f02507968b548797513ef7d5080dd5d0c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 8.查看镜像各层的数据压缩文件</span></span><br><span class=\"line\">layer=07a152489297fc2bca20be96fab3527ceac5668328a30fd543a160cd689ee548</span><br><span class=\"line\">ls <span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data  <span class=\"comment\"># application/vnd.docker.image.rootfs.diff.tar.gzip</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 4.将registry-v2存储的镜像转换为skopeo工具可以识别的目录架构, 即将 harbor 中的镜像导出为 skopeo dir 的形式。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义生成 skopeo 目录</span></span><br><span class=\"line\">mkdir ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT</span><br><span class=\"line\">ln ./docker/registry/v2/blobs/sha256/<span class=\"variable\">$&#123;link:0:2&#125;</span>/<span class=\"variable\">$&#123;link&#125;</span>/data ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT/manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建镜像各层硬链接</span></span><br><span class=\"line\">ln ./docker/registry/v2/blobs/sha256/b9/b938271c3bd17a187e5c95508adf49093f042cb176a3652c74a76e6d9770eb5b/data ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT/b938271c3bd17a187e5c95508adf49093f042cb176a3652c74a76e6d9770eb5b</span><br><span class=\"line\"></span><br><span class=\"line\">ln ./docker/registry/v2/blobs/sha256/07/</span><br><span class=\"line\">07a152489297fc2bca20be96fab3527ceac5668328a30fd543a160cd689ee548/data ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT/07a152489297fc2bca20be96fab3527ceac5668328a30fd543a160cd689ee548</span><br><span class=\"line\"></span><br><span class=\"line\">ln ./docker/registry/v2/blobs/sha256/70/702d51e3f3237c8ffbabeefec12934cc2a9e5b6f01fc414cf17f708ec1c09d0f/data ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT/702d51e3f3237c8ffbabeefec12934cc2a9e5b6f01fc414cf17f708ec1c09d0f</span><br><span class=\"line\"></span><br><span class=\"line\">ln ./docker/registry/v2/blobs/sha256/81/8142e84f0be01a60008360c5d5592e3f02507968b548797513ef7d5080dd5d0c</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 5.最后利用如下<code>skopeo copy</code>命令将将 dir 格式的镜像复制到harbor中。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> --src dir --dest docker ./docker/skopeo/devops/bmcx:1.1.0-SNAPSHOT harbor.weiyigeek.top/devops/bmcx:1.1.0-SNAPSHOT</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br/></p>\n<ul>\n<li>Step 6.最后采用木子提供的shell脚本进行将k8s中harbor的registry数据进行批量同步操作。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Desc：Harbor v2.x</span></span><br><span class=\"line\">REGISTRY_DOMAIN=<span class=\"string\">\"harbor.weiyigeek.top\"</span></span><br><span class=\"line\">REGISTRY_PATH=<span class=\"string\">\"/storage/pvc/devops/harbor-harbor-harbor-registry-pvc-151479ef-44f1-44dd-960c-afcbf12ba8a8\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到 registry 存储主目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;REGISTRY_PATH&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 生成 skopeo sync 同步所需目录格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">gen_skopeo_dir</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\"># 定义 registry 存储的 blob 目录 和 repositories 目录，方便后面使用</span></span><br><span class=\"line\">  BLOB_DIR=<span class=\"string\">\"docker/registry/v2/blobs/sha256\"</span></span><br><span class=\"line\">  REPO_DIR=<span class=\"string\">\"docker/registry/v2/repositories\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 定义生成 skopeo 目录</span></span><br><span class=\"line\">  SKOPEO_DIR=<span class=\"string\">\"docker/skopeo\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 通过 find 出 current 文件夹可以得到所有带 tag 的镜像，因为一个 tag 对应一个 current 目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> image <span class=\"keyword\">in</span> $(find <span class=\"variable\">$&#123;REPO_DIR&#125;</span> -<span class=\"built_in\">type</span> d -name <span class=\"string\">\"current\"</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"comment\"># 根据镜像的 tag 提取镜像的名字</span></span><br><span class=\"line\">    <span class=\"comment\"># 例如 image 的值为 \"docker/registry/v2/repositories/devops/kubectl/_manifests/tags/1.16.6/current\"</span></span><br><span class=\"line\">    name=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;image&#125;</span> | awk -F <span class=\"string\">'/'</span> <span class=\"string\">'&#123;print $5\"/\"$6\":\"$9&#125;'</span>)</span><br><span class=\"line\">    link=$(cat <span class=\"variable\">$&#123;image&#125;</span>/link | sed <span class=\"string\">'s/sha256://'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断镜像是否需要同步，如不需则跳过，否则创建skopeo需要的对应目录。</span></span><br><span class=\"line\">    <span class=\"comment\"># flag=$(grep -c \"$&#123;name&#125;\" /tmp/image_tags.txt)</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果不行进行镜像过滤筛选则可以置为1即可。</span></span><br><span class=\"line\">    flag=1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$flag</span> -ne 1 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$&#123;name&#125;</span>\"</span> &gt;&gt; /tmp/not_push_image_tags.txt</span><br><span class=\"line\">      <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"comment\"># 创建镜像的硬链接需要的目录</span></span><br><span class=\"line\">      mkdir -vp <span class=\"string\">\"<span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>\"</span></span><br><span class=\"line\">      mfs=<span class=\"string\">\"<span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;link:0:2&#125;</span>/<span class=\"variable\">$&#123;link&#125;</span>/data\"</span></span><br><span class=\"line\">      <span class=\"comment\"># 硬链接镜像的 manifests 文件到目录的 manifest 文件</span></span><br><span class=\"line\">      ln <span class=\"variable\">$&#123;mfs&#125;</span> <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>/manifest.json</span><br><span class=\"line\">      <span class=\"comment\"># 使用正则匹配出manifest.json文件中所有的 sha256 值，然后进行排序去重。</span></span><br><span class=\"line\">      layers=$(grep -Eo <span class=\"string\">\"\\b[a-f0-9]&#123;64&#125;\\b\"</span> <span class=\"variable\">$&#123;mfs&#125;</span> | sort -n | uniq)</span><br><span class=\"line\">      <span class=\"comment\"># 遍历镜像各层的sha256编码，按照指定方式进行创建硬链接</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;layers&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\"># 硬链接 registry 存储目录里的镜像 layer 和 images config 到镜像的 dir 目录</span></span><br><span class=\"line\">        ln <span class=\"variable\">$&#123;BLOB_DIR&#125;</span>/<span class=\"variable\">$&#123;layer:0:2&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span>/data <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;name&#125;</span>/<span class=\"variable\">$&#123;layer&#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># - 使用 skopeo sync 将 dir 格式的镜像同步到 harbor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">sync_image</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> project <span class=\"keyword\">in</span> $(ls <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>); <span class=\"keyword\">do</span></span><br><span class=\"line\">    skopeo sync --insecure-policy --src-tls-verify=<span class=\"literal\">false</span> --dest-tls-verify=<span class=\"literal\">false</span> --src dir --dest docker <span class=\"variable\">$&#123;SKOPEO_DIR&#125;</span>/<span class=\"variable\">$&#123;project&#125;</span> <span class=\"variable\">$&#123;REGISTRY_DOMAIN&#125;</span>/<span class=\"variable\">$&#123;project&#125;</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gen_skopeo_dir</span><br><span class=\"line\">sync_image</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行结果如下:<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/2/20220406224803.png\" alt=\"WeiyiGeek.skopeo 镜像同步\" title=\"\" class=\"\">\n                <p>WeiyiGeek.skopeo 镜像同步</p>\n            </figure></p>\n<p><br/></p>\n<p>Step 7.镜像同步完成后，我们可以通过访问harbor前端UI界面进行查看同步后的镜像以及其tags信息。<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2022/2/20220406225255.png\" alt=\"WeiyiGeek.Harbor-UI\" title=\"\" class=\"\">\n                <p>WeiyiGeek.Harbor-UI</p>\n            </figure></p>\n<p>参考地址: <a href=\"https://blog.k8s.li/select-registry-images.html\" target=\"_blank\" rel=\"noopener\">https://blog.k8s.li/select-registry-images.html</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Harbor","path":"api/categories/Harbor.json"},{"name":"Containers","path":"api/categories/Containers.json"},{"name":"OperationTools","path":"api/categories/OperationTools.json"}],"tags":[{"name":"Harbor","path":"api/tags/Harbor.json"},{"name":"Docker镜像","path":"api/tags/Docker镜像.json"}]}