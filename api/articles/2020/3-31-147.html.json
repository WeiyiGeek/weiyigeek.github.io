{"title":"系统性能测试工具","slug":"系统运维/Linux/常用命令/基础运维配置/系统性能测试工具","date":"2020-03-31T11:36:30.000Z","updated":"2023-01-31T02:29:09.216Z","url":"2020/3-31-147.html","path":"api/articles/2020/3-31-147.html.json","covers":["https://img.weiyigeek.top/2020/1/20200721232302.png","https://img.weiyigeek.top/2020/1/20200428213149.png","https://img.weiyigeek.top/2020/1/20200412133557.png","https://img.weiyigeek.top/2020/1/20200412134511.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x01-处理器性能测试\"><a href=\"#0x01-处理器性能测试\" class=\"headerlink\" title=\"0x01 处理器性能测试\"></a>0x01 处理器性能测试</h4><h5 id=\"stress-命令-系统压力基础测试-拷机\"><a href=\"#stress-命令-系统压力基础测试-拷机\" class=\"headerlink\" title=\"stress 命令 - 系统压力基础测试(拷机)\"></a>stress 命令 - 系统压力基础测试(拷机)</h5><p>描述:Stress/Stress-NG是Linux下两个常用的系统级压力测试工具，stress命令简单易用stress-ng是stress的升级版，支持数百个参数定制各种压CPU、内存、IO、网络的姿势。在系统过载的场景下，应用服务可能会出现意想不到的错误或异常，在测试负载均衡和熔断降级时非常有用。<br>这里只列举了几个常用的命令，详细使用参考”stress-ng –help”或”man stress-ng”。另外这些<code>&quot;烤机&quot;命令</code>来测试服务器性能也是不错的。</p>\n<p>安装&amp;语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install</span></span><br><span class=\"line\">RHRL/CentOS</span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install stress stress-ng</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Debian/Ubuntu</span></span><br><span class=\"line\">apt install stress stress-ng</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Syntax</span></span><br><span class=\"line\"><span class=\"comment\"># stress-ng 基本用法与stress完全兼容，但有更多的参数可选，并且可以查看统计信息;</span></span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.在两个CPU核心上跑开方运算，并且启动一个不断分配释放1G内存的线程，运行10秒后停止</span></span><br><span class=\"line\">stress --cpu 2 --vm 1 --vm-bytes 1G  -v --timeout 120</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2.启动一个线程不断执行sync系统调用回写磁盘缓存，并且启动一个线程不停地写入删除512MB数据，运行10秒停止</span></span><br><span class=\"line\">stress --io 1 --hdd 1 --hdd-bytes 512M -v --timeout 10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3.--sock 可以模拟大量的socket连接断开以及数据的发送接收等等</span></span><br><span class=\"line\">stress-ng --sock 2 -v --timeout 10 --metrics-brief</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4.Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).</span></span><br><span class=\"line\">Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s -v</span><br><span class=\"line\"></span><br><span class=\"line\">Example: stress --cpu 24 --hdd 8 --hdd-bytes 1G --io 8 --vm 4 --vm-bytes 4G --timeout 1200s -v</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200721232302.png\" alt=\"WeiyiGeek.stress\" title=\"\" class=\"\">\n                <p>WeiyiGeek.stress</p>\n            </figure></p>\n<hr>\n<h4 id=\"0x02-磁盘性能测试\"><a href=\"#0x02-磁盘性能测试\" class=\"headerlink\" title=\"0x02 磁盘性能测试\"></a>0x02 磁盘性能测试</h4><h5 id=\"fio-命令-磁盘基准IO测试\"><a href=\"#fio-命令-磁盘基准IO测试\" class=\"headerlink\" title=\"fio 命令 - 磁盘基准IO测试\"></a>fio 命令 - 磁盘基准IO测试</h5><p>描述:FIO是测试IOPS的非常好的工具(<code>多线程或进程并执行</code>)，用来对磁盘进行基准测试和压力测试以及硬件验证等运维场景。磁盘IO是检查磁盘性能的重要指标，可以按照负载情况分成照<code>顺序读写，随机读写</code>两大类<br>特点: 19种不同类型的I/O引擎<code>sync，mmap，libaio，posixaio，SG v3，splice，null，network，syslet，guasi，solarisaio</code>等<br>用途:编写和模拟的I/O负载匹配的作业文件测试磁盘设备的性能和网络存储的IO测试;<br>官网地址: <a href=\"http://freshmeat.net/projects/fio/\" target=\"_blank\" rel=\"noopener\">http://freshmeat.net/projects/fio/</a><br>食用地址: <a href=\"https://github.com/axboe/fio\" target=\"_blank\" rel=\"noopener\">https://github.com/axboe/fio</a></p>\n<p><em>注意事项</em>:<code>千万不能在系统所在的分区测试硬盘性能</code>否则您将跑路;</p>\n<p>如何安装fio?<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install fio -y</span><br></pre></td></tr></table></figure></p>\n<p><strong>Fio命令参数</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=/dev/sdb1 <span class=\"comment\">#测试文件名称通常选择需要测试的盘的data目录(测试必须指定切勿在系统分区做测试会破坏系统分区而导致系统崩溃无法启动)</span></span><br><span class=\"line\">directory=/app/    <span class=\"comment\">#在根目录下创建一个空目录，在测试命令中使用directory参数指定该目录，而不使用filename参数。</span></span><br><span class=\"line\">direct=1         <span class=\"comment\">#使用directIO绕过OS自带的 buffer 使测试磁盘的结果更真实(bool类型)。</span></span><br><span class=\"line\">rw=<span class=\"built_in\">read</span>          <span class=\"comment\">#read(顺序读)| randread(随机读) | write(顺序写) | randwrite (随机写) | randrw (混合随机读写模式) 5种方式</span></span><br><span class=\"line\">rwmixwrite=30    <span class=\"comment\">#在混合读写的模式下写占30%</span></span><br><span class=\"line\">rwmixread=70     <span class=\"comment\">#在混合读写的模式下写占70%</span></span><br><span class=\"line\">bs=16k           <span class=\"comment\">#设置I/O block块文件大小为16k(默认4k)</span></span><br><span class=\"line\">bsrange=512-2048 <span class=\"comment\">#提定数据块的大小范围</span></span><br><span class=\"line\">name=jobname     <span class=\"comment\">#任务的名称（且任务名称可以相同）</span></span><br><span class=\"line\">numjobs=1        <span class=\"comment\">#每个job（任务）开1个线程  最终线程数=任务数(几个name=jobx) * numjobs</span></span><br><span class=\"line\">size=5G          <span class=\"comment\">#指定job处理的文件的大小及每个线程读写的数据量</span></span><br><span class=\"line\">runtime=1000     <span class=\"comment\">#指定在多少秒后停止进程，此处测试时间为1000秒</span></span><br><span class=\"line\">ioengine=libaio <span class=\"comment\">#I/O引擎选择(一共19种)，默认值是sync同步阻塞I/O , libaio是Linux的本地native异步I/O。</span></span><br><span class=\"line\">iodepth=16      <span class=\"comment\">#队列的深度,如果ioengine采用异步方式，该参数表示一批提交保持的io单元数 </span></span><br><span class=\"line\">lockmem=1g      <span class=\"comment\">#使用1g内存进行测试。</span></span><br><span class=\"line\">nrfiles=8       <span class=\"comment\">#每个进程生成文件的数量。</span></span><br><span class=\"line\">time_based      <span class=\"comment\">#如果在runtime指定的时间还没到时文件就被读写完成，将继续重复知道runtime时间结束。</span></span><br><span class=\"line\">thread          <span class=\"comment\">#使用pthread_create创建线程，另一种是fork创建进程，由于进程的开销比线程要大所以一般都采用thread测试；</span></span><br><span class=\"line\">zero_buffers    <span class=\"comment\">#用0初始化系统buffer。</span></span><br><span class=\"line\">group_reporting <span class=\"comment\">#当同时指定了numjobs了时，输出结果按组显示</span></span><br></pre></td></tr></table></figure></p>\n<p><em>磁盘读写常用测试点：</em></p>\n<ol>\n<li>Read=100% Ramdon=100% rw=randread (100%随机读)</li>\n<li>Read=100% Sequence=100% rw=read （100%顺序读）</li>\n<li>Write=100% Sequence=100% rw=write （100%顺序写）</li>\n<li>Write=100% Ramdon=100% rw=randwrite （100%随机写）</li>\n<li>Read=70% Sequence=100% rw=rw, rwmixread=70, rwmixwrite=30 （70%顺序读，30%顺序写）</li>\n<li>Read=70% Ramdon=100% rw=randrw, rwmixread=70, rwmixwrite=30 (70%随机读，30%随机写)</li>\n</ol>\n<p><br></p>\n<p>补充说明:</p>\n<ul>\n<li>Linux读写的时候内核维护了缓存数据先写到缓存后面再后台写到SSD(<code>一般的raid卡何sas卡都带有缓存机制</code>)。读的时候也优先读缓存里的数据(速度可以加快)，但是一旦掉电缓存里的数据就没了;<code>所以有一种模式叫做DirectIO跳过缓存直接读写SSD</code>。 </li>\n<li>在异步模式下CPU不能一直无限的发命令到SSD:比如SSD执行读写如果发生了卡顿，那有可能系统会一直不停的发命令/几千个/甚至几万个，这样一方面SSD扛不住，另一方面这么多命令会很占内存，系统也要挂掉了，所以就带来一个参数叫做队列深度。</li>\n</ul>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实例1.本地异步I/O 4k 块 不使用系统缓存  读测试 测试深度16 时间60s</span></span><br><span class=\"line\"><span class=\"variable\">$fio</span> -filename=/dev/sdb/ -name=<span class=\"string\">\"BS 4KB read test\"</span> -ioengine=libaio -direct=1 -thread -rw=<span class=\"built_in\">read</span> -size=1M -numjobs=16 -bs=4k -iodepth=16 -runtime=60 -time_based -group_reporting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$fio</span> -directory=/app/ -name=<span class=\"string\">\"BS 4KB read test\"</span> -ioengine=libaio -direct=1 -thread -rw=<span class=\"built_in\">read</span> -size=1M -numjobs=16 -bs=4k -iodepth=16 -runtime=60 -time_based -group_reporting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$fio</span> --bs=4k --ioengine=libaio --iodepth=1 --direct=1 --rw=<span class=\"built_in\">read</span> --time_based --runtime=60 --refill_buffers --norandommap --randrepeat=0 --group_reporting --name=fio-read --size=500M --filename=/dev/sdb1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">示例2.配置文件形式:fio.conf</span><br><span class=\"line\"><span class=\"comment\">#测试命令</span></span><br><span class=\"line\">fio fio.conf</span><br><span class=\"line\">cat &gt; fio.comf &lt;&lt;END</span><br><span class=\"line\">[global]</span><br><span class=\"line\">ioengine=libaio</span><br><span class=\"line\">direct=1</span><br><span class=\"line\">thread=1</span><br><span class=\"line\">norandommap=1</span><br><span class=\"line\">randrepeat=0</span><br><span class=\"line\">runtime=60</span><br><span class=\"line\">ramp_time=6</span><br><span class=\"line\">size=1g</span><br><span class=\"line\">directory=/data</span><br><span class=\"line\">[read4k-rand]</span><br><span class=\"line\">stonewall</span><br><span class=\"line\">group_reporting</span><br><span class=\"line\">bs=4k</span><br><span class=\"line\">rw=randread</span><br><span class=\"line\">numjobs=8</span><br><span class=\"line\">iodepth=32</span><br><span class=\"line\">[read64k-seq]</span><br><span class=\"line\">stonewall</span><br><span class=\"line\">group_reporting</span><br><span class=\"line\">bs=64k</span><br><span class=\"line\">rw=<span class=\"built_in\">read</span></span><br><span class=\"line\">numjobs=4</span><br><span class=\"line\">iodepth=8</span><br><span class=\"line\">[write4k-rand]</span><br><span class=\"line\">stonewall</span><br><span class=\"line\">group_reporting</span><br><span class=\"line\">bs=4k</span><br><span class=\"line\">rw=randwrite</span><br><span class=\"line\">numjobs=2</span><br><span class=\"line\">iodepth=4</span><br><span class=\"line\">[write64k-seq]</span><br><span class=\"line\">stonewall</span><br><span class=\"line\">group_reporting</span><br><span class=\"line\">bs=64k</span><br><span class=\"line\">rw=write</span><br><span class=\"line\">numjobs=2</span><br><span class=\"line\">iodepth=4</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></p>\n<p>测试结果以及说明:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#测试2：</span></span><br><span class=\"line\">Jobs: 16 (f=16): [R(16)][100.0%][r=9941KiB/s,w=0KiB/s][r=2485,w=0 IOPS][eta 00m:00s]</span><br><span class=\"line\">BS 4KB <span class=\"built_in\">read</span> <span class=\"built_in\">test</span>: (groupid=0, <span class=\"built_in\">jobs</span>=16): err= 0: pid=2637: Tue Apr 28 21:27:01 2020</span><br><span class=\"line\">   <span class=\"comment\">#读IOPS          #BW=平均IO带宽         #runt=线程运行时间</span></span><br><span class=\"line\">   <span class=\"built_in\">read</span>: IOPS=2457, BW=9830KiB/s (10.1MB/s)(577MiB/60060msec)</span><br><span class=\"line\">   <span class=\"comment\">#slat=提交延迟，提交该IO请求到kernel所花的时间（不包括kernel处理的时间）</span></span><br><span class=\"line\">    slat (nsec): min=1665, max=243925k, avg=5226953.48, stdev=13063402.61</span><br><span class=\"line\">   <span class=\"comment\">#clat=完成延迟, 提交该IO请求到kernel后，处理所花的时间</span></span><br><span class=\"line\">    clat (usec): min=85, max=698388, avg=98913.96, stdev=63432.35</span><br><span class=\"line\">   <span class=\"comment\">#lat=响应时间</span></span><br><span class=\"line\">     lat (usec): min=88, max=698392, avg=104141.19, stdev=67428.64</span><br><span class=\"line\">    clat percentiles (msec):</span><br><span class=\"line\">     |  1.00th=[   41],  5.00th=[   47], 10.00th=[   50], 20.00th=[   53],</span><br><span class=\"line\">     | 30.00th=[   56], 40.00th=[   61], 50.00th=[   77], 60.00th=[   95],</span><br><span class=\"line\">     | 70.00th=[  114], 80.00th=[  140], 90.00th=[  182], 95.00th=[  224],</span><br><span class=\"line\">     | 99.00th=[  326], 99.50th=[  380], 99.90th=[  489], 99.95th=[  550],</span><br><span class=\"line\">     | 99.99th=[  625]</span><br><span class=\"line\">   <span class=\"comment\">#带宽</span></span><br><span class=\"line\">   bw (  KiB/s): min=   40, max= 1696, per=6.24%, avg=613.88, stdev=285.96, samples=1920</span><br><span class=\"line\">   iops        : min=   10, max=  424, avg=153.45, stdev=71.50, samples=1920</span><br><span class=\"line\">  lat (usec)   : 100=0.01%, 250=0.02%, 500=0.16%, 750=0.07%, 1000=0.04%</span><br><span class=\"line\">  lat (msec)   : 2=0.08%, 4=0.01%, 10=0.02%, 20=0.04%, 50=12.59%</span><br><span class=\"line\">  lat (msec)   : 100=49.84%, 250=33.90%, 500=3.12%, 750=0.09%</span><br><span class=\"line\">  <span class=\"comment\">#利用率</span></span><br><span class=\"line\">  cpu          : usr=0.02%, sys=0.11%, ctx=74903, majf=0, minf=285</span><br><span class=\"line\">  <span class=\"comment\">#io队列深度</span></span><br><span class=\"line\">  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=99.8%, 32=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     <span class=\"comment\">#单个IO提交要提交的IO数</span></span><br><span class=\"line\">     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     <span class=\"comment\">#类似于上面的提交号，但是用于补全。</span></span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.1%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     <span class=\"comment\">#发出的读/写请求的数量，</span></span><br><span class=\"line\">     issued rwts: total=147602,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class=\"line\">     <span class=\"comment\">#IO完延迟的分布</span></span><br><span class=\"line\">     latency   : target=0, window=0, percentile=100.00%, depth=16</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all <span class=\"built_in\">jobs</span>):</span><br><span class=\"line\">   READ: bw=9830KiB/s (10.1MB/s), 9830KiB/s-9830KiB/s (10.1MB/s-10.1MB/s), io=577MiB (605MB), run=60060-60060msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (<span class=\"built_in\">read</span>/write):</span><br><span class=\"line\">  <span class=\"comment\"># ios=所有group总共执行的IO数.</span></span><br><span class=\"line\">  <span class=\"comment\"># merge=总共发生的IO合并数.</span></span><br><span class=\"line\">  <span class=\"comment\"># ticks=Number of ticks we kept the disk busy.</span></span><br><span class=\"line\">  <span class=\"comment\"># io_queue=花费在队列上的总共时间.</span></span><br><span class=\"line\">  <span class=\"comment\"># util=磁盘利用率</span></span><br><span class=\"line\">  vda: ios=147591/7, merge=0/3, ticks=7606987/26, in_queue=7607671, util=99.88%</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试3</span></span><br><span class=\"line\">Starting 1 process</span><br><span class=\"line\">Jobs: 1 (f=0): [R] [38.4% <span class=\"keyword\">done</span>] [4031KB/0KB/0KB /s] [1007/0/0 iops] [eta 01m:38s]</span><br><span class=\"line\">fio-read: (groupid=0, <span class=\"built_in\">jobs</span>=1): err= 0: pid=15639: Tue Apr 28 21:45:02 2020</span><br><span class=\"line\">  <span class=\"built_in\">read</span> : io=195600KB, bw=3259.1KB/s, iops=814, runt= 60001msec</span><br><span class=\"line\">    slat (usec): min=14, max=5370, avg=34.54, stdev=89.26</span><br><span class=\"line\">    clat (usec): min=3, max=1537.2K, avg=1179.49, stdev=8932.97</span><br><span class=\"line\">     lat (usec): min=75, max=1537.2K, avg=1216.66, stdev=8933.38</span><br><span class=\"line\">    clat percentiles (usec):</span><br><span class=\"line\">     |  1.00th=[  141],  5.00th=[  227], 10.00th=[  290], 20.00th=[  410],</span><br><span class=\"line\">     | 30.00th=[  532], 40.00th=[  684], 50.00th=[  844], 60.00th=[  988],</span><br><span class=\"line\">     | 70.00th=[ 1176], 80.00th=[ 1448], 90.00th=[ 1864], 95.00th=[ 2320],</span><br><span class=\"line\">     | 99.00th=[ 6112], 99.50th=[13760], 99.90th=[23680], 99.95th=[31104],</span><br><span class=\"line\">     | 99.99th=[154624]</span><br><span class=\"line\">    bw (KB  /s): min=   19, max= 4552, per=100.00%, avg=3371.60, stdev=989.34</span><br><span class=\"line\">    lat (usec) : 4=0.01%, 10=0.02%, 50=0.01%, 100=0.23%, 250=6.35%</span><br><span class=\"line\">    lat (usec) : 500=20.69%, 750=16.90%, 1000=16.37%</span><br><span class=\"line\">    lat (msec) : 2=31.73%, 4=6.07%, 10=0.86%, 20=0.59%, 50=0.15%</span><br><span class=\"line\">    lat (msec) : 100=0.01%, 250=0.01%, 2000=0.01%</span><br><span class=\"line\">  cpu          : usr=1.62%, sys=5.57%, ctx=49057, majf=0, minf=9</span><br><span class=\"line\">  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class=\"line\">     issued    : total=r=48900/w=0/d=0, short=r=0/w=0/d=0</span><br><span class=\"line\"></span><br><span class=\"line\">Run status group 0 (all <span class=\"built_in\">jobs</span>):</span><br><span class=\"line\">   READ: io=195600KB, aggrb=3259KB/s, minb=3259KB/s, maxb=3259KB/s, mint=60001msec, maxt=60001msec</span><br><span class=\"line\"></span><br><span class=\"line\">Disk stats (<span class=\"built_in\">read</span>/write):</span><br><span class=\"line\">  sdb: ios=48651/0, merge=0/0, ticks=55536/0, in_queue=55468, util=92.82%</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200428213149.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<hr>\n<h4 id=\"0x03-网络性能测试\"><a href=\"#0x03-网络性能测试\" class=\"headerlink\" title=\"0x03 网络性能测试\"></a>0x03 网络性能测试</h4><h5 id=\"iperf-命令-C-S结构下网络性能测试\"><a href=\"#iperf-命令-C-S结构下网络性能测试\" class=\"headerlink\" title=\"iperf 命令 - C/S结构下网络性能测试\"></a>iperf 命令 - C/S结构下网络性能测试</h5><p>描述:Iperf是一款强大的网络性能测试工具基于CS模式。主要测试一些网络设备如路由器，防火墙，交换机等的性能。</p>\n<p>Iperf具有跨平台的特性，它支持Linux、Windows，Android，MacOS X，FreeBSD，OpenBSD，NetBSD，Vxworks，Solaris等；</p>\n<p>Iperf3是最新版本，也是功能最强大的一个版本, Iperf3与原始Iperf版本不共享代码，也不向后兼容。</p>\n<p>iPerf分为iperf2和iperf3版本，iperf3不支持全双工模式。</p>\n<p>主要功能:</p>\n<ul>\n<li>网络测速测试TCP和UDP带宽（bandwidth）、延迟抖动（jitter）和数据包丢失(lost packet rate)。</li>\n<li>开发的宽带集群通信系统中</li>\n</ul>\n<p>下载地址：<a href=\"https://iperf.fr/iperf-download.php\" target=\"_blank\" rel=\"noopener\">https://iperf.fr/iperf-download.php</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令安装</span></span><br><span class=\"line\">tar xvfiperf-3.0b5.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> iperf-3.0b5</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#yum安装</span></span><br><span class=\"line\">yum install iperf</span><br></pre></td></tr></table></figure>\n<p><br/></p>\n<p>服务器的特定参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s,-server</span><br><span class=\"line\">在服务器模式下运行iperf，且一次只允许一个iperf连接。</span><br><span class=\"line\">-D,-damon</span><br><span class=\"line\">在后台运行服务器作为守护程序。</span><br><span class=\"line\">-I,-pidfile文件</span><br><span class=\"line\">使用进程ID编写一个文件，作为守护进程运行时最为有用（iperf3.1版本新功能）</span><br><span class=\"line\">-p：后接服务端监听的端口</span><br></pre></td></tr></table></figure></p>\n<p>客户端的特定参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-c, -c  主机地址</span><br><span class=\"line\">在客户端模式下运行Iperf，连接到在主机上运行的Iperf服务器</span><br><span class=\"line\">-u 使用UDP而不是TCP，详见-b选项</span><br><span class=\"line\">-b, bandwidth n 将目标带宽设置为n bits/sec（UDP默认为1  Mbits / sec，TCP无限制）。</span><br><span class=\"line\">-t, -time n 设置传输的时间（以秒为单位），默认发送10秒的数据</span><br><span class=\"line\">-R, 上传速度机械能测试</span><br><span class=\"line\">-4 指定ipv4</span><br><span class=\"line\">-f 格式化带宽数输出</span><br><span class=\"line\">-n 指定传输的字节数</span><br></pre></td></tr></table></figure></p>\n<p>通用参数:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-i：设置带宽报告的时间间隔，单位为秒</span><br><span class=\"line\">-B: 绑定C/S的ip地址</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实例1.机器带宽检测</span></span><br><span class=\"line\">iperf3 -s -i 1  <span class=\"comment\">#Server</span></span><br><span class=\"line\">iperf3 -c 172.31.0.25 -i 1 -t 10 60 <span class=\"comment\">#Client</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd</span><br><span class=\"line\">[  4]   0.00-1.00   sec   697 MBytes  5.84 Gbits/sec    0   3.01 MBytes</span><br><span class=\"line\"></span><br><span class=\"line\">[ ID] Interval           Transfer     Bandwidth (带宽数)      Retr</span><br><span class=\"line\">[  4]   0.00-10.00  sec  7.07 GBytes  6.07 Gbits/sec  2006  sender</span><br><span class=\"line\">[  4]   0.00-10.00  sec  7.07 GBytes  6.07 Gbits/sec        receiver</span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200412133557.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例2.测试单线程UDP</span></span><br><span class=\"line\">iperf -s -u </span><br><span class=\"line\">iperf -c 172.31.0.25-u -t 15 -i 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例3.测试流量为10Mbps</span></span><br><span class=\"line\">iperf -u -c 192.168.90.234 -b 10M-i -2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例4.Linux设备和Android设备测试UDP带宽</span></span><br><span class=\"line\">iperf -s -u <span class=\"comment\">#以在本服务器启用iperf，并运行于udp模式</span></span><br><span class=\"line\">iperf -c server-ip -u -t 15 -i 1 <span class=\"comment\"># 在客户端（Android）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例5.上传速度测试</span></span><br><span class=\"line\">iperf -c ip -p 5204 -R</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例6.绑定指定IP</span></span><br><span class=\"line\">iperf -s -p 25001 -B 192.168.33.103 (-u)</span><br><span class=\"line\">iperf -c -p 25001 -B 192.168.33.104 -4 -f K -n 10M -b 10M （-u）</span><br></pre></td></tr></table></figure>\n<p>执行效果:在此时间段，用户的终端到服务器的UDP带宽大致为683Kbps，时延抖动为9.730ms，已知的云服务器的总带宽约为136KBps,即1.06Mbps（可以多次测量求得用户终端到服务器的实际带宽）<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2020/1/20200412134511.png\" alt=\"WeiyiGeek.\" title=\"\" class=\"\">\n                <p>WeiyiGeek.</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"qperf-命令-网络连接传输性能测试\"><a href=\"#qperf-命令-网络连接传输性能测试\" class=\"headerlink\" title=\"qperf 命令 - 网络连接传输性能测试\"></a>qperf 命令 - 网络连接传输性能测试</h5><p>描述:该qperf命令是测试两个节点之间的带宽和延时(测量RDMA和IP性能)，为此需要一个当作服务端一个当作客户端即(C/S架构)。其中服务端直接运行qperf无需任何参数。该工具使用本身和<code>netperf/iperf</code>非常类似，但是除了支持tcp/udp/sctp外还可以支持RDMA测量，以及进行循环遍历测试。</p>\n<p>安装与帮助:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install</span></span><br><span class=\"line\">yum install -y qperf</span><br><span class=\"line\">apt install qperf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基础语法</span></span><br><span class=\"line\">qperf SERVERNODE [OPTIONS] TESTS</span><br><span class=\"line\">qperf --<span class=\"built_in\">help</span> examples  <span class=\"comment\">#Some examples of using qperf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数说明</span></span><br><span class=\"line\">man qperf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试选项</span></span><br><span class=\"line\">Miscellaneous</span><br><span class=\"line\">    conf                    Show configuration</span><br><span class=\"line\">    quit                    Cause the server to quit</span><br><span class=\"line\">Socket Based</span><br><span class=\"line\">    rds_bw                  RDS streaming one way bandwidth</span><br><span class=\"line\">    rds_lat                 RDS one way latency</span><br><span class=\"line\">    sctp_bw                 SCTP streaming one way bandwidth</span><br><span class=\"line\">    sctp_lat                SCTP one way latency</span><br><span class=\"line\">    tcp_bw                  TCP streaming one way bandwidth</span><br><span class=\"line\">    tcp_lat                 TCP one way latency</span><br><span class=\"line\">    udp_bw                  UDP streaming one way bandwidth</span><br><span class=\"line\">    udp_lat                 UDP one way latency</span><br><span class=\"line\">RDMA Send/Receive</span><br><span class=\"line\">    rc_bi_bw                RC streaming two way bandwidth</span><br><span class=\"line\">    rc_bw                   RC streaming one way bandwidth</span><br><span class=\"line\">    rc_lat                  RC one way latency</span><br><span class=\"line\">    uc_bi_bw                UC streaming two way bandwidth</span><br><span class=\"line\">    uc_bw                   UC streaming one way bandwidth</span><br><span class=\"line\">    uc_lat                  UC one way latency</span><br><span class=\"line\">    ud_bi_bw                UD streaming two way bandwidth</span><br><span class=\"line\">    ud_bw                   UD streaming one way bandwidth</span><br><span class=\"line\">    ud_lat                  UD one way latency</span><br><span class=\"line\">    xrc_bi_bw               XRC streaming two way bandwidth</span><br><span class=\"line\">    xrc_bw                  XRC streaming one way bandwidth</span><br><span class=\"line\">    xrc_lat                 XRC one way latency</span><br><span class=\"line\">RDMA</span><br><span class=\"line\">    rc_rdma_read_bw         RC RDMA <span class=\"built_in\">read</span> streaming one way bandwidth</span><br><span class=\"line\">    rc_rdma_read_lat        RC RDMA <span class=\"built_in\">read</span> one way latency</span><br><span class=\"line\">    rc_rdma_write_bw        RC RDMA write streaming one way bandwidth</span><br><span class=\"line\">    rc_rdma_write_lat       RC RDMA write one way latency</span><br><span class=\"line\">    rc_rdma_write_poll_lat  RC RDMA write one way polling latency</span><br><span class=\"line\">    uc_rdma_write_bw        UC RDMA write streaming one way bandwidth</span><br><span class=\"line\">    uc_rdma_write_lat       UC RDMA write one way latency</span><br><span class=\"line\">    uc_rdma_write_poll_lat  UC RDMA write one way polling latency</span><br><span class=\"line\">InfiniBand Atomics</span><br><span class=\"line\">    rc_compare_swap_mr      RC compare and swap messaging rate</span><br><span class=\"line\">    rc_fetch_add_mr         RC fetch and add messaging rate</span><br><span class=\"line\">Verification</span><br><span class=\"line\">    ver_rc_compare_swap     Verify RC compare and swap</span><br><span class=\"line\">    ver_rc_fetch_add        Verify RC fetch and add</span><br></pre></td></tr></table></figure></p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 0.服务端直接运行如下，无需任何参数</span></span><br><span class=\"line\">$ qperf  <span class=\"comment\">#此时终端阻塞</span></span><br><span class=\"line\"><span class=\"comment\"># 默认开启端口号：19765</span></span><br><span class=\"line\"><span class=\"comment\"># 通过netstat查看，如下:</span></span><br><span class=\"line\">$ netstat -tunlup</span><br><span class=\"line\"><span class=\"comment\"># tcp 0 0 0.0.0.0:19765 0.0.0.0:* LISTEN 53755/qperf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.客户端运行TCP/UDP带宽和延迟测试:</span></span><br><span class=\"line\">qperf -t 30 10.10.107.192 -v tcp_bw udp_bw tcp_lat udp_lat conf</span><br><span class=\"line\"><span class=\"comment\"># tcp_bw:</span></span><br><span class=\"line\"><span class=\"comment\">#     bw              =   672 MB/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     msg_rate        =  10.2 K/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     time            =    30 sec</span></span><br><span class=\"line\"><span class=\"comment\">#     send_cost       =  1.52 sec/GB</span></span><br><span class=\"line\"><span class=\"comment\">#     recv_cost       =  1.78 sec/GB</span></span><br><span class=\"line\"><span class=\"comment\">#     send_cpus_used  =   102 % cpus</span></span><br><span class=\"line\"><span class=\"comment\">#     recv_cpus_used  =   120 % cpus</span></span><br><span class=\"line\"><span class=\"comment\"># udp_bw:</span></span><br><span class=\"line\"><span class=\"comment\">#     send_bw         =   514 MB/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     recv_bw         =  3.52 MB/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     msg_rate        =   108 /sec</span></span><br><span class=\"line\"><span class=\"comment\">#     time            =    30 sec</span></span><br><span class=\"line\"><span class=\"comment\">#     send_cost       =  1.91 sec/GB</span></span><br><span class=\"line\"><span class=\"comment\">#     recv_cost       =   101 sec/GB</span></span><br><span class=\"line\"><span class=\"comment\">#     send_cpus_used  =    98 % cpus</span></span><br><span class=\"line\"><span class=\"comment\">#     recv_cpus_used  =  35.5 % cpus</span></span><br><span class=\"line\"><span class=\"comment\"># tcp_lat:</span></span><br><span class=\"line\"><span class=\"comment\">#     latency        =  95.9 us</span></span><br><span class=\"line\"><span class=\"comment\">#     msg_rate       =  10.4 K/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     time           =    30 sec</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_cpus_used  =  32.8 % cpus</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_cpus_used  =  28.6 % cpus</span></span><br><span class=\"line\"><span class=\"comment\"># udp_lat:</span></span><br><span class=\"line\"><span class=\"comment\">#     latency        =  83.4 us</span></span><br><span class=\"line\"><span class=\"comment\">#     msg_rate       =    12 K/sec</span></span><br><span class=\"line\"><span class=\"comment\">#     time           =    30 sec</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_cpus_used  =  29.6 % cpus</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_cpus_used  =  28.2 % cpus</span></span><br><span class=\"line\"><span class=\"comment\"># conf:</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_node   =  master-01</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_cpu    =  2 Cores: Intel Core i3  540 @ 3.07GHz</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_os     =  Linux 5.7.0-1.el7.elrepo.x86_64</span></span><br><span class=\"line\"><span class=\"comment\">#     loc_qperf  =  0.4.9</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_node   =  master-02</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_cpu    =  2 Cores: Intel Core i3  540 @ 3.07GHz</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_os     =  Linux 5.7.0-1.el7.elrepo.x86_64</span></span><br><span class=\"line\"><span class=\"comment\">#     rem_qperf  =  0.4.9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.客户端运行测量RDMA UD的延迟和带宽:</span></span><br><span class=\"line\">qperf myserver ud_lat ud_bw</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.客户端运行测量RDMA UC双向带宽:</span></span><br><span class=\"line\">qperf myserver rc_bi_bw</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.客户端运行获取消息大小从1到64K的TCP延时范围</span></span><br><span class=\"line\">qperf myserver -oo msg_size:1:64K:*2 -vu tcp_lat</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h4 id=\"0x04-网站压力测试\"><a href=\"#0x04-网站压力测试\" class=\"headerlink\" title=\"0x04 网站压力测试\"></a>0x04 网站压力测试</h4><h5 id=\"wrk-命令-HTTP-压力测试工\"><a href=\"#wrk-命令-HTTP-压力测试工\" class=\"headerlink\" title=\"wrk 命令 - HTTP 压力测试工\"></a>wrk 命令 - HTTP 压力测试工</h5><p>描述:wrk 是一个比较先进的 HTTP 压力测试工具，当在单个多核 CPU 上运行时，能够产生大量负载。它结合了多线程设计和可扩展的事件通知系统，例如 epoll 和 kqueue。</p>\n<p>下载地址:</p>\n<ul>\n<li>Github: <a href=\"https://github.com/wg/wrk/\" target=\"_blank\" rel=\"noopener\">https://github.com/wg/wrk/</a></li>\n<li><a href=\"https://github.com/wg/wrk/archive/master.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/wg/wrk/archive/master.zip</a></li>\n</ul>\n<p>安装&amp;语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/wg/wrk.git --depth=1 &amp;&amp; <span class=\"built_in\">cd</span> wrk &amp;&amp; make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Syntax</span></span><br><span class=\"line\">Usage: wrk &lt;options&gt; &lt;url&gt;</span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -c, --connections &lt;N&gt;  Connections to keep open 需要模拟的个并发请求连接数量</span><br><span class=\"line\">  -d, --duration    &lt;T&gt;  Duration of <span class=\"built_in\">test</span> 测试的测试时长</span><br><span class=\"line\">  -t, --threads     &lt;N&gt;  Number of threads to use 并发线程数量</span><br><span class=\"line\">  -s, --script      &lt;S&gt;  Load Lua script file  指定 Lua 脚本的路径</span><br><span class=\"line\">  -H, --header      &lt;H&gt;  Add header to request 指定请求带的 Header 参数</span><br><span class=\"line\">      --latency          Print latency statistics 是否打印请求延迟统计</span><br><span class=\"line\">      --timeout     &lt;T&gt;  Socket/request timeout 设置请求超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">Numeric arguments may include a SI unit (1k, 1M, 1G)</span><br><span class=\"line\">Time arguments may include a time unit (2s, 2m, 2h)</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实例1.八线程400个请求测试10分钟</span></span><br><span class=\"line\">wrk -t8 -c400 -d10m http://localhost:8080/index.html</span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\">Making 10000000 requests to http://localhost:8080/index.html</span><br><span class=\"line\">  8 threads and 400 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency   439.75us  350.49us   7.60ms   92.88%</span><br><span class=\"line\">    Req/Sec    61.13k     8.26k   72.00k    87.54%</span><br><span class=\"line\">  10000088 requests <span class=\"keyword\">in</span> 19.87s, 3.42GB <span class=\"built_in\">read</span></span><br><span class=\"line\">Requests/sec: 503396.23  <span class=\"comment\">#QPS</span></span><br><span class=\"line\">Transfer/sec:    176.16MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#示例2.#实例1.八线程400个请求测试10分钟</span></span><br><span class=\"line\">wrk -t8 -c400 -H <span class=\"string\">\"accept-encoding: gzip\"</span> -d1m http://localhost:8080/index.html</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"httperf-命令-高效的-http-压力测试工具\"><a href=\"#httperf-命令-高效的-http-压力测试工具\" class=\"headerlink\" title=\"httperf 命令 - 高效的 http 压力测试工具\"></a>httperf 命令 - 高效的 http 压力测试工具</h5><p>描述:Httperf 是由HP开发的一个衡量Web服务器性能的工具，它提供了用于产生各种HTTP工作量和测定服务器性能的柔性设施。使用它可以模拟出超过1千的并发访问，能充分测试出 web server 的性能;</p>\n<p>httperf的重点不是实现一个特定的基准，但在提供一个强大的，高性能的工具，有利于微观和宏观层面的基准建设,httperf的三个显着特征是其鲁棒性，其包括，以产生和维持服务器过载，为对HTTP/1.1和SSL协议的支持，并且它的可扩展到新工作负荷发电机和性能测量的能力。</p>\n<p>官网地址: <a href=\"https://github.com/httperf/httperf\" target=\"_blank\" rel=\"noopener\">https://github.com/httperf/httperf</a></p>\n<ul>\n<li><a href=\"https://github.com/httperf/httperf/archive/master.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/httperf/httperf/archive/master.zip</a></li>\n</ul>\n<p>应用场景: </p>\n<ul>\n<li>1.Nginx性能测试</li>\n</ul>\n<p>安装&amp;语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Centos 安装 autoreconf</span></span><br><span class=\"line\">$ yum -y install install autoconf automake libtool</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/httperf/httperf.git</span><br><span class=\"line\"><span class=\"comment\"># 注意：如果从CVS仓库出口建设的源代码，而不是官方的gzip压缩的源tar文件，下面的命令必须在前面的那些之前执行</span></span><br><span class=\"line\">$ autoreconf -i</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成二进制程序路径 ./src/httperf</span></span><br><span class=\"line\"><span class=\"comment\"># 所有可用选项的列表可以通过指定--help选项得到（全选名称可以，只要他们保持明确的缩写）</span></span><br><span class=\"line\">httperf -h</span><br><span class=\"line\">Usage: httperf [-hdvV] [--add-header S] [--burst-length N] [--client N/N]</span><br><span class=\"line\">        [--close-with-reset] [--debug N] [--failure-status N]</span><br><span class=\"line\">        [--<span class=\"built_in\">help</span>] [--hog] [--http-version S] [--max-connections N]</span><br><span class=\"line\">        [--max-piped-calls N] [--method S] [--no-host-hdr]</span><br><span class=\"line\">        [--num-calls N] [--num-conns N] [--session-cookies]</span><br><span class=\"line\">        [--period [d|u|e]T1[,T2]|[v]T1,D1[,T2,D2]...[,Tn,Dn]</span><br><span class=\"line\">        [--<span class=\"built_in\">print</span>-reply [header|body]] [--<span class=\"built_in\">print</span>-request [header|body]]</span><br><span class=\"line\">        [--rate X] [--recv-buffer N] [--retry-on-failure] [--send-buffer N]</span><br><span class=\"line\">        [--server S|--servers file] [--server-name S] [--port N] [--uri S] [--myaddr S]</span><br><span class=\"line\">        [--think-timeout X] [--timeout X] [--verbose] [--version]</span><br><span class=\"line\">        [--wlog y|n,file] [--wsess N,N,X] [--wsesslog N,X,file]</span><br><span class=\"line\">        [--wset N,X]</span><br><span class=\"line\">        [--runtime X]</span><br><span class=\"line\">        [--use-timer-cache]</span><br><span class=\"line\">        [--periodic-stats]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数解释:</span></span><br><span class=\"line\">--client=I/N  <span class=\"comment\">#指定当前客户端I，是N个客户端中的第几个。用于多个客户端发请求，希望确保每个客户端发的请求不是完全一致。一般不用指定</span></span><br><span class=\"line\">--server URL <span class=\"comment\"># 指定测试地址 域名或者IP</span></span><br><span class=\"line\">--port 端口  <span class=\"comment\"># 指定服务端口</span></span><br><span class=\"line\">--uri  路径  <span class=\"comment\"># 指定测试web端的地址</span></span><br><span class=\"line\">--rate 速率  <span class=\"comment\"># 指定请求速率</span></span><br><span class=\"line\">--num-conns 连接数     <span class=\"comment\"># 指定创建的连接数</span></span><br><span class=\"line\">--num-calls 调用数     <span class=\"comment\"># 指定每个连接发送多少请求</span></span><br><span class=\"line\">--send-buffer          <span class=\"comment\"># 指定发送http请求的最大buffer，默认为4K，一般不用指</span></span><br><span class=\"line\">--recv-buffer          <span class=\"comment\"># 指定接受http请求的最大buffer，默认为16K，一般不用指定</span></span><br><span class=\"line\">--timeout    <span class=\"comment\"># 设置超时时间</span></span><br></pre></td></tr></table></figure></p>\n<p>基础语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.调用的httperf的最简单的方法</span></span><br><span class=\"line\">httperf --server blog.weiyigeek.top --port 443 <span class=\"comment\"># 默认请求参数如下即实际执行命令如下</span></span><br><span class=\"line\"><span class=\"comment\"># 实际执行: httperf --client=0/1 --server=blog.weiyigeek.top --port=443 --uri=/ --send-buffer=4096 --recv-buffer=16384 --num-conns=1 --num-calls=1</span></span><br><span class=\"line\">Maximum connect burst length: 0</span><br><span class=\"line\"><span class=\"comment\"># 结果总结：多个TCP连接是如何由客户端，有多少请求而发送的，有多少收到答复，什么总测试时间为启动。</span></span><br><span class=\"line\"><span class=\"comment\">#下面表明1个连接被启动的线，进行1个请求和收到1页的答复。它还表明总测试时间为0.435秒，意味着平均请求速率为每秒几乎正好0.5请求。</span></span><br><span class=\"line\">Total: connections 1 requests 1 replies 1 <span class=\"built_in\">test</span>-duration 0.435 s</span><br><span class=\"line\"><span class=\"comment\"># 用来与Web服务器通信的TCP连接的信息，连接被以每秒2.3连接的速率启动，该速度对应于周期的每个连接434.6毫秒。</span></span><br><span class=\"line\">Connection rate: 2.3 conn/s (434.6 ms/conn, &lt;=1 concurrent connections)</span><br><span class=\"line\"><span class=\"comment\"># 成功的连接寿命的统计数据</span></span><br><span class=\"line\">Connection time [ms]: min 434.6 avg 434.6 max 434.6 median 434.5 stddev 0.0</span><br><span class=\"line\"><span class=\"comment\"># 统计是平均花费的时间建立一个TCP连接到服务器(所有成功的TCP连接机构进行计数，可能已经最终未能甚至连接)</span></span><br><span class=\"line\">Connection time [ms]: connect 217.3</span><br><span class=\"line\"><span class=\"comment\"># 每个连接中接收到答复的平均数量。与常规的HTTP/1.0，该值至多为1.0（当没有故障），但随着保持HTTP或HTTP / 1.1持久连接，这个值可以是任意高的，其表明在相同的连接被用来接收多个响应。</span></span><br><span class=\"line\">Connection length [replies/conn]: 1.000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求速率与以字节为单位的HTTP请求的大小</span></span><br><span class=\"line\">Request rate: 2.3 req/s (434.6 ms/req)</span><br><span class=\"line\">Request size [B]: 71.0</span><br><span class=\"line\"><span class=\"comment\"># 为获得有意义的标准偏差，建议运行每个测试足够长的时间，以便获得至少30个样品，这将对应于至少150秒，即两分半钟的测试持续时间。</span></span><br><span class=\"line\">Reply rate [replies/s]: min 0.0 avg 0.0 max 0.0 stddev 0.0 (0 samples)</span><br><span class=\"line\"><span class=\"comment\"># 过了多长时间的服务器响应多久它采取收到回复信息</span></span><br><span class=\"line\">Reply time [ms]: response 217.3 transfer 0.0</span><br><span class=\"line\">Reply size [B]: header 161.0 content 253.0 footer 0.0 (total 414.0)</span><br><span class=\"line\">Reply status: 1xx=0 2xx=0 3xx=0 4xx=1 5xx=0</span><br><span class=\"line\"></span><br><span class=\"line\">CPU time [s]: user 0.20 system 0.24 (user 45.1% system 54.9% total 100.0%)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以每秒千字节的平均网络吞吐量（其中一千字节是1024个字节）和以每秒兆比特（其中，a是兆位10 ^ 6位）</span></span><br><span class=\"line\">Net I/O: 1.1 KB/s (0.0*10^6 bps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在测试期间发生的错误的统计数据</span></span><br><span class=\"line\">Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0</span><br><span class=\"line\">Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例3.设置连接数以及速率</span></span><br><span class=\"line\">$ httperf --server 10.20.172.196 --port 80 --num-conns 300 --rate 100 --timeout 5</span><br><span class=\"line\"><span class=\"comment\"># 实际执行: httperf --timeout=5 --client=0/1--server=10.0.172.196 --port=80 --uri=/index.html --rate=100 --send-buffer=4096--recv-buffer=16384 --num-conns=300 --num-calls=5 </span></span><br><span class=\"line\"></span><br><span class=\"line\">Maximum connect burst length: 13</span><br><span class=\"line\"><span class=\"comment\">#• 最大并发连接数：13</span></span><br><span class=\"line\">Total: connections 300 requests 1475 replies 1475test-duration 6.204 s</span><br><span class=\"line\"><span class=\"comment\">#• 一共300个连接，1475个请求，应答了1475个，测试耗时：6.204秒</span></span><br><span class=\"line\">Connection rate: 48.4 conn/s (20.7 ms/conn, &lt;=189concurrent connections)</span><br><span class=\"line\"><span class=\"comment\">#• 连接速率：48.4个每秒（每个连接耗时20.7 ms, 小于指定的300个并发连接）</span></span><br><span class=\"line\">Connection time [ms]: min 663.4 avg 1937.6 max 3808.4median 1720.5 stddev 964.7</span><br><span class=\"line\"><span class=\"comment\">#• 连接时间（微秒）：最小663.4，平均1937.6，最大3808.4，中位数 1720.5， 标准偏差964.7</span></span><br><span class=\"line\">Connection time [ms]: connect 1098.4</span><br><span class=\"line\"><span class=\"comment\">#• 连接时间（微秒）：连接1098.4</span></span><br><span class=\"line\">Connection length [replies/conn]: 5.000</span><br><span class=\"line\"><span class=\"comment\">#• 连接长度（应答/连接）：5.000</span></span><br><span class=\"line\">Request rate: 237.7 req/s (4.2 ms/req)</span><br><span class=\"line\"><span class=\"comment\">#• 请求速率：237.7(pqs)，每个请求4.2 ms</span></span><br><span class=\"line\">Request size : 79.0</span><br><span class=\"line\"><span class=\"comment\">#• 连接长度（应答/连接）： 79.0</span></span><br><span class=\"line\">Reply rate [replies/s]: min 268.8 avg 268.8 max 268.8stddev 0.0 (1 samples)</span><br><span class=\"line\"><span class=\"comment\">#• 响应速率（响应个数/秒）：最小268.8， 平均268.8，最大268.8，标准偏差 0.0（一个例样）</span></span><br><span class=\"line\">Reply time [ms]: response 80.7 transfer 87.2</span><br><span class=\"line\"><span class=\"comment\">#• 响应时间（微妙）：响应80.7，传输87.2</span></span><br><span class=\"line\">Reply size : header 283.0 content 21895.0 footer 0.0(total 22178.0)</span><br><span class=\"line\"><span class=\"comment\">#• 应包长度（字节）：响应头283.0 内容：21895.0 响应末端 -0.0（总共22178.0）</span></span><br><span class=\"line\">Reply status: 1xx=0 2xx=1475 3xx=0 4xx=0 5xx=0</span><br><span class=\"line\"><span class=\"comment\">#• 响应包状态： 2xx 有1475个，其他没有</span></span><br><span class=\"line\">CPU time [s]: user 0.45 system 5.48 (user 7.3% system88.3% total 95.6%)</span><br><span class=\"line\"><span class=\"comment\">#• CPU时间（秒）: 用户0.45 系统5.48（用户占了7.3% 系统占88.3% 总共95.6%）</span></span><br><span class=\"line\">Net I/O: 5167.4 KB/s (42.3*10^6 bps)</span><br><span class=\"line\"><span class=\"comment\">#• 网络I/O：5167.4 KB/s</span></span><br><span class=\"line\">Errors: total 5 client-timo 5 socket-timo 0 connrefused 0connreset 0</span><br><span class=\"line\"><span class=\"comment\">#• 错误：总数5 客户端超时5 套接字超时0 连接拒绝0 连接重置0</span></span><br><span class=\"line\">Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0</span><br><span class=\"line\"><span class=\"comment\">#• 错误：fd不正确0 地址不正确0 ftab占满0其他0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实例4.以下是 gzip 格式访问的测试数据（因缓存文件以 gzip 格式保存，所以性能是最高的）</span></span><br><span class=\"line\">httperf --server weiyigeek.top -num-conns 2000 --add-header <span class=\"string\">\"accept-encoding: gzip\"</span></span><br><span class=\"line\"><span class=\"comment\">#deflate (2级压缩率)格式访问的统计数据（需要从 gzip 解压，再压缩为 deflate 的数据处理）</span></span><br><span class=\"line\">httperf --server weiyigeek.top -num-conns 2000 --add-header <span class=\"string\">\"accept-encoding: deflate\"</span></span><br><span class=\"line\"><span class=\"comment\">#normal 文本格式访问的统计数据</span></span><br><span class=\"line\">httperf --server weiyigeek.top --num-conns 2000 --add-header <span class=\"string\">\"accept-encoding: normal\"</span></span><br><span class=\"line\"><span class=\"comment\"># 实际运行:httperf --client=0/1 -server=weiyigeek.top --port=80 --uri=/ --send-buffer=4096 --recv-buffer=16384 --add-header='accept-encoding: gzip' --num-conns=2000 --num-calls=1</span></span><br></pre></td></tr></table></figure></p>\n<p>补充说明:</p>\n<ul>\n<li>(1) 计算并发处理结果 = <code>Num-conns / Request rate</code></li>\n<li>(2) 连接时间中位数，每组数中如果是奇数则取中间值，偶数则取两个中间值/2</li>\n</ul>\n<p><br></p>\n<h5 id=\"ab-命令-Apache的HTTP服务器基准测试工具\"><a href=\"#ab-命令-Apache的HTTP服务器基准测试工具\" class=\"headerlink\" title=\"ab 命令 - Apache的HTTP服务器基准测试工具\"></a>ab 命令 - Apache的HTTP服务器基准测试工具</h5><p>描述:AB(是apachebench命令缩写)是标杆Apache的超文本传输​​协议（HTTP）服务器的工具。它的目的是给你如何你当前的Apache安装执行的印象。这尤其显示了每秒Apache安装能够服务的多少个请求,它还可以用于nginx、tomcat、IIS等服务;</p>\n<p>官网帮助文档地址:<a href=\"http://httpd.apache.org/docs/2.4/programs/ab.html\" target=\"_blank\" rel=\"noopener\">http://httpd.apache.org/docs/2.4/programs/ab.html</a></p>\n<p>安装&amp;语法:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1.源码安装apache后ab命令存放在apache安装目录的bin目录下</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/apache2/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2.通过yum的RPM包方式安装的ab命令默认存放在/usr/bin目录下</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> ab</span><br><span class=\"line\">$/usr/bin/ab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式3.如果不想安装apache但是又想使用ab命令情况下</span></span><br><span class=\"line\">yum -y install httpd-tools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Syntax</span></span><br><span class=\"line\">-n 在测试会话中所执行的请求个数。默认时，仅执行一个请求。</span><br><span class=\"line\">-c 一次产生的请求个数。默认是一次一个。</span><br><span class=\"line\">-t 测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</span><br><span class=\"line\">-p 包含了需要POST的数据的文件。</span><br><span class=\"line\">-P 对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class=\"line\">-T POST数据所使用的Content-type头信息。</span><br><span class=\"line\">-v 设置显示信息的详细程度-4或更大值会显示头信息，3或更大值可以显示响应代码(404,200等),2或更大值可以显示警告和其他信息。</span><br><span class=\"line\">-V 显示版本号并退出。</span><br><span class=\"line\">-w 以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</span><br><span class=\"line\">-i 执行HEAD请求，而不是GET。</span><br><span class=\"line\">-x 设置&lt;table&gt;属性的字符串。</span><br><span class=\"line\">-X 对请求使用代理服务器。</span><br><span class=\"line\">-y 设置&lt;tr&gt;属性的字符串。</span><br><span class=\"line\">-z 设置&lt;td&gt;属性的字符串。</span><br><span class=\"line\">-C 对请求附加一个Cookie:行。其典型形式是name=value的一个参数对，此参数可以重复。</span><br><span class=\"line\">-H 对请求附加额外的头信息。此参数的典型形式是一个有效的头信息行，其中包含了以冒号分隔的字段和值的对(如,<span class=\"string\">\"Accept-Encoding:zip/zop;8bit\"</span>)。</span><br><span class=\"line\">-A 对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</span><br><span class=\"line\">-h 显示使用方法。</span><br><span class=\"line\">-d 不显示<span class=\"string\">\"percentage served within XX [ms] table\"</span>的消息(为以前的版本提供支持)。</span><br><span class=\"line\">-e 产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经<span class=\"string\">\"二进制化\"</span>，所以比<span class=\"string\">'gnuplot'</span>格式更有用。</span><br><span class=\"line\">-g 把所有测试结果写入一个<span class=\"string\">'gnuplot'</span>或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。</span><br><span class=\"line\">-i 执行HEAD请求，而不是GET。</span><br><span class=\"line\">-k 启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。</span><br><span class=\"line\">-q 如果处理的请求数大于150，ab每处理大约10%或者100个请求时，会在stderr输出一个进度计数。此-q标记可以抑制这些信息。</span><br></pre></td></tr></table></figure></p>\n<p>基础实例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实例1.ab命令常用选项参数</span></span><br><span class=\"line\">╭─root@<span class=\"built_in\">test</span> ~</span><br><span class=\"line\">╰─<span class=\"variable\">$ab</span> -n 1000 -c 1000 http://10.20.172.196/</span><br><span class=\"line\">This is ApacheBench, Version 2.3 &lt;<span class=\"variable\">$Revision</span>: 1430300 $&gt;</span><br><span class=\"line\">Benchmarking 10.20.172.196 (be patient)</span><br><span class=\"line\">Completed 100 requests</span><br><span class=\"line\">....</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Finished 1000 requests</span><br><span class=\"line\"><span class=\"comment\"># 测试目标站点信息 #</span></span><br><span class=\"line\"><span class=\"comment\">#被测试的Web服务器软件名称</span></span><br><span class=\"line\">Server Software:        nginx/1.15.8.1</span><br><span class=\"line\"><span class=\"comment\">#表示请求的URL主机名</span></span><br><span class=\"line\">Server Hostname:        10.20.172.196</span><br><span class=\"line\"><span class=\"comment\">#表示被测试的Web服务器软件的监听端口</span></span><br><span class=\"line\">Server Port:            80</span><br><span class=\"line\"><span class=\"comment\">#表示请求的URL中的根绝对路径，通过该文件的后缀名</span></span><br><span class=\"line\">Document Path:          /</span><br><span class=\"line\"><span class=\"comment\">#表示HTTP响应数据的正文长度。</span></span><br><span class=\"line\">Document Length:        649 bytes</span><br><span class=\"line\"><span class=\"comment\">#表示并发用户数，我们设置的参数之一。</span></span><br><span class=\"line\">Concurrency Level:      1000</span><br><span class=\"line\"><span class=\"comment\">#表示所有这些请求被处理完成所花费的总时间。</span></span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   0.107 seconds</span><br><span class=\"line\"><span class=\"comment\">#表示总请求数量，我们设置的参数之一。</span></span><br><span class=\"line\">Complete requests:      1000</span><br><span class=\"line\"><span class=\"comment\">#表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况</span></span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Write errors:           0</span><br><span class=\"line\"><span class=\"comment\">#表示所有请求的响应数据长度总和，包括每个HTTP响应数据的头信息和正文数据的长度</span></span><br><span class=\"line\">Total transferred:      888000 bytes</span><br><span class=\"line\"><span class=\"comment\">#表示所有请求的响应数据中正文数据的总和,实际是减去了Total transferred中HTTP响应数据中的头信息的长度。</span></span><br><span class=\"line\">HTML transferred:       649000 bytes</span><br><span class=\"line\"><span class=\"comment\">#[重点] QPS 吞吐率 =  Complete requests/Time taken for tests (越高，服务器性能越好)</span></span><br><span class=\"line\">Requests per second:    9313.50 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\"><span class=\"comment\">#[重点] 用户平均请求等待时间= Time token for tests/ (Complete requests/Concurrency Level)</span></span><br><span class=\"line\">Time per request:       107.371 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.107 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\"><span class=\"comment\">#[重点] 表示这些请求在单位时间内从服务器获取的数据长度=Total trnasferred/Time taken for tests，该统计很好的说明服务器的处理能力达到极限时，其出口宽带的需求量。</span></span><br><span class=\"line\">Transfer rate:          8076.55 [Kbytes/sec] received</span><br><span class=\"line\"><span class=\"comment\"># 每次请求平均连接时间</span></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">          min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0   29   8.1     29      42</span><br><span class=\"line\">Processing:    17   36  14.3     45      51</span><br><span class=\"line\">Waiting:        0   35  14.3     44      50</span><br><span class=\"line\">Total:         42   65   9.0     64      87</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于描述每个请求处理时间的分布情况</span></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%     64</span><br><span class=\"line\">  66%     69</span><br><span class=\"line\">  75%     71</span><br><span class=\"line\">  80%     73</span><br><span class=\"line\">  90%     78</span><br><span class=\"line\">  95%     81</span><br><span class=\"line\">  98%     84</span><br><span class=\"line\">  99%     86</span><br><span class=\"line\"> 100%     87 (longest request)</span><br></pre></td></tr></table></figure></p>\n<p><strong>补充说明:</strong></p>\n<ul>\n<li>(1) ab软件在进行性能测试过程主要性能指标:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.吞吐率（Requests per second）</span></span><br><span class=\"line\">服务器并发处理能力的量化描述(单位是reqs/s)，指的是在某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</span><br><span class=\"line\"></span><br><span class=\"line\">记住：吞吐率是基于并发用户数的,代表了两个含义：</span><br><span class=\"line\">a、吞吐率和并发用户数相关</span><br><span class=\"line\">b、不同的并发用户数下，吞吐率一般是不同的</span><br><span class=\"line\"></span><br><span class=\"line\">计算公式：总请求数/处理完成这些请求数所花费的时间，即 Request per second=Complete requests/Time taken <span class=\"keyword\">for</span> tests</span><br><span class=\"line\">必须要说明的是，这个数值表示当前机器的整体性能，值越大越好。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#2、并发连接数（The number of concurrent connections）</span></span><br><span class=\"line\">并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3、并发用户数（Concurrency Level）</span></span><br><span class=\"line\">要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#4、用户平均请求等待时间（Time per request）</span></span><br><span class=\"line\">计算公式：处理完成所有请求数所花费的时间/(总请求数/并发用户数)，即：</span><br><span class=\"line\">Time per request = Time taken <span class=\"keyword\">for</span> tests/(Complete requests/Concurrency Level)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5、服务器平均请求等待时间（Time per request:across all concurrent requests）</span></span><br><span class=\"line\">计算公式：处理完成所有请求数所花费的时间/总请求数，即：</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span>/testsComplete requests</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到，它是吞吐率的倒数。</span><br><span class=\"line\">同时，它也等于用户平均请求等待时间/并发用户数，即 Time per request/Concurrency Level</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><br></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Linux命令","path":"api/categories/Linux命令.json"}],"tags":[{"name":"基础运维类","path":"api/tags/基础运维类.json"}]}