{"title":"操作系统学习代码编写实例.md","slug":"书籍笔记/计算机操作系统原理/操作系统学习代码实例","date":"2019-03-31T07:35:30.000Z","updated":"2022-03-29T05:39:06.313Z","url":"2019/3-31-24.html","path":"api/articles/2019/3-31-24.html.json","covers":["https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331150825.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331181220.png","https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331184818.png"],"content":"<h4 id=\"文章目录结构\"><a href=\"#文章目录结构\" class=\"headerlink\" title=\"文章目录结构\"></a>文章目录结构</h4><p>(1) 进程控制(创建/中止/切换)</p>\n<h5 id=\"1-进程控制\"><a href=\"#1-进程控制\" class=\"headerlink\" title=\"1.进程控制\"></a>1.进程控制</h5><p>进程控制的主要任务就是系统使用一些具有特定功能的程序端来创建、撤销进程以及完成进程各状态之间的转换，从而达到多进程、高效率、并发的执行和协调，实现资源共享的目的。<br><a id=\"more\"></a></p>\n<h6 id=\"1-1-进程标识符\"><a href=\"#1-1-进程标识符\" class=\"headerlink\" title=\"1.1) 进程标识符\"></a>1.1) 进程标识符</h6><p>进程标识符(PID)是一个进程的基本属性，其作用类似于每个人的身份证号码;根据进程标识符，用户可以精确地定位一个进程;<em>一个进程标识符唯一对应一个进程，而多个进程标识符可以对应同一个程序。</em><br>进程标识符类型: pid_t ,其本质上是一个无符号整型的类型别名(typedef)。</p>\n<p>进程与程序的关系: 所谓程序不过是指可运行的二进制代码文件,并且加载到内存中运行就得到了一个进程,同一个程序文件可以被加载多次成为不同的进程。<br>因此 <em>进程与进程标识符之间是一对一的关系，而与程序文件之间是多对一的关系</em> 。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331150825.png\" alt=\"WeiyiGeek.进程标识符与进程与程序之间的关系\" title=\"\" class=\"\">\n                <p>WeiyiGeek.进程标识符与进程与程序之间的关系</p>\n            </figure>\n<p><em>1.1.1 进程中重要的标识符：</em><br>每个进程都有6个重要的ID值，分别是：进程ID、父进程ID、有效用户ID、有效组ID、实际用户ID和实际组ID,这6个ID保存在内核中的数据结构中，有些时候用户程序需要得到这些ID。</p>\n<p>例如：在/proc文件系统中，每一个进程都拥有一个子目录，里面存有进程的信息。当使用进程读取这些文件时，应该先得到当前进程的ID才能确定进入哪一个进程的相关子目录。由于这些ID存储在内核之中，因此Linux提供一组专门的接口函数来访问这些ID值。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> getpid(<span class=\"keyword\">void</span>);    <span class=\"comment\">//获取进程ID</span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> getppid(<span class=\"keyword\">void</span>);  <span class=\"comment\">//获取父进程ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uid_t</span> getuid(<span class=\"keyword\">void</span>);    <span class=\"comment\">//获取用户ID</span></span><br><span class=\"line\"><span class=\"keyword\">uid_t</span> geteuid(<span class=\"keyword\">void</span>);    <span class=\"comment\">//获取有效用户ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">gid_t</span> getgid(<span class=\"keyword\">void</span>);    <span class=\"comment\">//获取组ID</span></span><br><span class=\"line\"><span class=\"keyword\">gid_t</span> getegid(<span class=\"keyword\">void</span>);    <span class=\"comment\">//获取有效组ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#函数执行成功，返回当前进程的相关ID，执行失败，则返回-1。</span></span><br></pre></td></tr></table></figure><br>执行案例：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Linux下的进程标识符 **/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//进程 process</span></span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid=<span class=\"number\">0</span>,ppid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//用户 user</span></span><br><span class=\"line\">    <span class=\"keyword\">uid_t</span> uid=<span class=\"number\">0</span>,euid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//组 group</span></span><br><span class=\"line\">    <span class=\"keyword\">gid_t</span> gid=<span class=\"number\">0</span>,egid=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    uid = getuid(); euid = geteuid();</span><br><span class=\"line\">    gid = getgid(); egid = getegid();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"当前进程ID:%u\\t,父进程ID:%u\\n\"</span>,pid,ppid);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"用户ID:%u\\t,有效用户ID:%u\\n\"</span>,uid,euid);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"组ID:%u\\t,有效组ID:%u\\n\"</span>,gid,egid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########################### 执行结果 ##########################################</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# gcc process-demo0.c -o demo0</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# ./demo0</span></span><br><span class=\"line\"><span class=\"comment\">// 当前进程ID:21287        ,父进程ID:18480</span></span><br><span class=\"line\"><span class=\"comment\">// 用户ID:0        ,有效用户ID:0</span></span><br><span class=\"line\"><span class=\"comment\">// 组ID:0  ,有效组ID:0</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h6 id=\"1-2-创建进程-fork\"><a href=\"#1-2-创建进程-fork\" class=\"headerlink\" title=\"1.2) 创建进程-fork\"></a>1.2) 创建进程-fork</h6><p>Linux系统中最基本的执行单位进程。Linux系统允许任何一个用户创建一个子进程。创建之后，子进程存在于系统之中，并且独立于父进程。<br>该子进程可以接受系统调度，可以分配到系统资源。系统能检测到它的存在，并且会赋予它与父进程同样的权利。</p>\n<p>Linux系统中，使用函数fork()可以创建一个子进程，其函数原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;     /*#包含&lt;unistd.h&gt;*/</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;   /*#包含&lt;sys/types.h&gt;*/</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> fork(<span class=\"keyword\">void</span>);   <span class=\"comment\">//pid_t 是一个宏定义，其实质是int 被定义在#include&lt;sys/types.h&gt;中</span></span><br><span class=\"line\"></span><br><span class=\"line\">fork() creates a <span class=\"keyword\">new</span> process by duplicating the calling process. The <span class=\"keyword\">new</span> process, referred to as the child, is an exact duplicate of the calling process</span><br><span class=\"line\"></span><br><span class=\"line\">fork() 函数会创建一个新的进程，并从内核中为此进程分配一个新的可用的进程标识符(PID)，之后，为这个新进程分配进程空间，并将父进程的进程空间中的内容复制到子进程的进程空间中，包括父进程的数据段和堆栈段，并且和父进程共享代码段。这时候系统中又多了一个进程，这个进程和父进程一模一样，两个进程都要接受系统的调度。</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：若成功调用一次则返回两个值 </span><br><span class=\"line\">(<span class=\"number\">1</span>)在父进程中，fork返回新创建子进程的进程ID；</span><br><span class=\"line\">(<span class=\"number\">2</span>)在子进程中，fork返回<span class=\"number\">0</span>； 由于系统的<span class=\"number\">0</span>号进程是内核进程，所以子进程的进程号不可能是<span class=\"number\">0</span>，由此可以区分父进程和子进程。</span><br><span class=\"line\">(<span class=\"number\">3</span>)如果出现错误，fork返回一个负值。</span><br></pre></td></tr></table></figure></p>\n<p>fork的一个特性是父进程的所有打开文件描述符都被复制到子进程中去,在fork之后处理的文件描述符有两种常见的情况：</p>\n<ol>\n<li>父进程等待子进程完成。父进程无需对其描述符做任何处理。当子进程终止后，子进程对文件偏移量的修改和已执行的更新。</li>\n<li>父子进程各自执行不同的程序段。在fork之后父子进程各自关闭他们不需要使用的文件描述符，这样就不会干扰对方使用文件描述符(网络服务进程中经常使用)。</li>\n</ol>\n<p>函数fork()会创建一个新的进程，并从内核中为此进程得到一个新的可用的进程ID，之后为这个新进程分配进程空间，并将父进程的进程空间中的内容复制到子进程的进程空间中，包括父进程的数据段和堆栈段，并且和父进程共享代码段。这时候，系统中又多出一个进程，这个进程和父进程一样，两个进程都要接受系统的调用。</p>\n<p>执行案例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 进程的创建-fork()</span></span><br><span class=\"line\"><span class=\"comment\"> ****/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> value = <span class=\"number\">1023</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid =  fork();  <span class=\"comment\">//创建新进程的进程，即调用函数fork()的进程就是父进程。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"fork Error\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value++;    <span class=\"comment\">//注意点不会受到父进程改变value值的影响, ,如果这里变成 value+=5 ,这是输出的是 value = 1028 = 1023 + 5</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Child Process -PID:%u  -PPID:%u, (子)创建的第二个进程 %d, Child ID= %d\\n\\n\"</span>,getpid(),getppid(),value,pid); </span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        value++;   <span class=\"comment\">//注意点</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Parent Process -PID:%u  -PPID:%u, (父)创建的第一个进程 %d,返回子进程PID = %d\\n\\n\"</span>,getpid(),getppid(),value,pid);</span><br><span class=\"line\">    \twaitpid(pid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);  <span class=\"comment\">//确保父进程后结束</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########################### 执行结果 ##########################################</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# ./demo1</span></span><br><span class=\"line\"><span class=\"comment\">// Parent Process -PID:21631  -PPID:18480, (父)创建的第一个进程 1024,返回子进程PID = 21632</span></span><br><span class=\"line\"><span class=\"comment\">// Child Process -PID:21632  -PPID:21631, (子)创建的第二个进程 1024, Child ID= 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//由于创建的新进程和父进程在系统看来是地位平等的两个进程，所以运行机会也是一样的，我们不能够对其执行先后顺序进行假设，先执行哪一个进程取决于系统的调度算法(不同的系统是不同的)。如果想要指定运行的顺序，则需要执行额外的操作。</span></span><br><span class=\"line\"><span class=\"comment\">//正因为如此，程序在运行时并不能保证输出顺序和上面所描述的一致。</span></span><br></pre></td></tr></table></figure></p>\n<p><em>Q:在以上的程序中经过多次执行，有时候会出现父进程先执行造成子进程变成孤儿进程?</em><br>A: 解决方法:使用 waitpid() 函数,确保父进程后结束;</p>\n<p>linux系统提供了函数wait()和waitpid()来回收子进程资源，其函数原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//#函数说明</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#定义函数 </span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> wait(<span class=\"keyword\">int</span> *statloc);  </span><br><span class=\"line\"><span class=\"comment\">//参数statloc是一个整型指针。如果statloc不是一个空指针，则终止状态就存放到它所指向的单元内。如果不关心终止状态则将statloc设为空指针。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> waitpid(<span class=\"keyword\">pid_t</span> pid,<span class=\"keyword\">int</span> *status,<span class=\"keyword\">int</span> options);  <span class=\"comment\">//会暂时停止目前进程的执行，直到有信号来到或子进程结束。</span></span><br><span class=\"line\"><span class=\"comment\">//参数PID：</span></span><br><span class=\"line\">pid&lt;<span class=\"number\">-1</span> 等待进程组识别码为 pid 绝对值的任何子进程。</span><br><span class=\"line\">pid=<span class=\"number\">-1</span> 等待任何子进程,相当于 wait()。</span><br><span class=\"line\">pid=<span class=\"number\">0</span> 等待进程组识别码与目前进程相同的任何子进程。</span><br><span class=\"line\">pid&gt;<span class=\"number\">0</span> 等待任何子进程识别码为 pid 的子进程。</span><br><span class=\"line\"></span><br><span class=\"line\">函数区别:</span><br><span class=\"line\">(<span class=\"number\">1</span>) wait 如果在子进程终止前调用则会阻塞(wait是只要有一个子进程终止就返回);</span><br><span class=\"line\">(<span class=\"number\">2</span>) waitpid 可以使调用者不阻塞并不等待第一个终止的子进程--它有多个选项，可以控制它所等待的进程。</span><br></pre></td></tr></table></figure></p>\n<p><em>Q:fork 创建的子进程 与 父进程 到底有什么关系呢 ?</em><br>A：1.子进程 完全复制 父进程的资源; 2.”写时复制”比如上面的代码中的value++; 3.子进程 与 父进程 占用不同的虚拟内存空间<br>简单的说：创建一个子进程，子进程完全拥有父进程的资源，但是fork的字符进程有自己的独立空间，也就是当子进程在进行写入等数据改变的时候，操作系统会分派新的空间。</p>\n<p><em>“写时复制”体现：</em> Linux内核实现fork()函数时往往实现了在创建子进程时并不立即复制父进程的数据段和堆栈段，而是当子进程修改这些数据内容时复制才会发生，内核才会给子进程分配进程空间，将父进程的内容复制过来，然后继续后面的操作,为了复制自身完成一些工作的进程来效率会更高。</p>\n<p><em>Q:下列两种情况可能会导致fork()的出错?</em><br>A:系统中已经存在了太多的进程;调用函数fork()的用户进程太多（系统中对每个用户所创建的进程数是有限的，如果数量不加限制，那么可以利用这一缺陷恶意攻击系统。）<br>下面是一个利用进程的特性编写的一个病毒程序，该程序是一个死循环，在循环中不断调用fork()函数来创建子进程，直到系统中不能容纳如此多的进程而崩溃为止。 </p>\n<p>两个进程都停留在了fork()函数中等待返回(由于在复制时复制了父进程的堆栈段)。因此fork()函数会返回两次(代码有两份,都是从fork函数中返回的)，一次是在父进程中返回，另一次是在子进程中返回两次的返回值是不一样的。</p>\n<figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331181220.png\" alt=\"WeiyiGeek.fork函数\" title=\"\" class=\"\">\n                <p>WeiyiGeek.fork函数</p>\n            </figure>\n<p><em>总结：</em></p>\n<ul>\n<li>除了0号进程以外，任何一个进程都是由其他进程创建的。</li>\n<li>进过多次执行,可以发现 子进程号 与 父进程号 是连在一起的,且子进程号 比 父进程号 大1;</li>\n</ul>\n<p><br></p>\n<h6 id=\"1-3-进程创建-vfork\"><a href=\"#1-3-进程创建-vfork\" class=\"headerlink\" title=\"1.3) 进程创建-vfork\"></a>1.3) 进程创建-vfork</h6><p><em>父子进程的共享资源：</em> 父子进程是两个独立的进程，接受系统调度和分配系统资源的机会均等，子进程完全复制了父进程的地址空间的内容(堆栈段和数据段的内容);此时子进程并没有复制代码段，而是和父进程共用代码段。</p>\n<p>因为子进程可能执行不同的流程，那么就会改变数据段和堆栈段，因此需要分开存储父子进程各自的数据段和堆栈段。但是代码段是只读的，不存在被修改的问题，因此这一个段可以让父子进程共享(子进程代码段指向父进程的代码段)，以节省存储空间;</p>\n<p>vfork()函数：fork()函数类似的函数也可以用来创建一个子进程，只不过新进程与父进程共用父进程的地址空间，其函数原型如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> vfork(<span class=\"keyword\">void</span>);</span><br></pre></td></tr></table></figure><br>(1) vfork()函数产生的子进程和父进程完全共享地址空间，包括代码段、数据段和堆栈段，子进程对这些共享资源所做的修改，可以影响到父进程。<em>vfork()函数与其说是产生了一个进程，还不如说是产生了一个线程。</em><br>(2) vfork()函数产生的子进程一定比父进程先运行，也就是说父进程调用了vfork()函数后会等待子进程运行后再运行。</p>\n<p>由于父子进程的运行顺序是不确定的，因此我们让父进程休眠了2秒钟以释放CPU控制权(会导致其他线程先运行),子进程先于父进程运行;<br>vfork 示例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**父子进程的共享资源**/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> global = <span class=\"number\">1</span>;   <span class=\"comment\">//global variable, stored at data section</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span> = <span class=\"number\">1</span>; <span class=\"comment\">//local variable, stored at stack</span></span><br><span class=\"line\">    <span class=\"keyword\">pid_t</span> pid = vfork();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"Vfork Error\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>)  <span class=\"comment\">//子进程会被先执行</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        global++;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Child-Process,pid = %u, global=%d, stack=%d\\n\"</span>,getpid(),global,<span class=\"built_in\">stack</span>);</span><br><span class=\"line\"> \t    <span class=\"comment\">//execl(\"/root/demo2\",\"./demo2\",NULL);  //子进程中另起一个新进程 (会导致循环执行)</span></span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);   <span class=\"comment\">//子进程需手动退出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      sleep(<span class=\"number\">2</span>);  <span class=\"comment\">//父进程延迟2秒执行</span></span><br><span class=\"line\">        global++;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Parent-Process,fork = %u, global=%d, stack=%d\\n\"</span>,pid,global,<span class=\"built_in\">stack</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//########################### 执行结果 ##########################################</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# ./demo2</span></span><br><span class=\"line\"><span class=\"comment\">// Child-Process,pid = 7533, global=2, stack=2</span></span><br><span class=\"line\"><span class=\"comment\">// Parent-Process,fork = 7533, global=3, stack=3</span></span><br></pre></td></tr></table></figure></p>\n<p><em>Q:vfork 子进程 与 父进程 又有什么关系呢?</em><br>A:相似一对亲兄弟享受的母爱是均等的,即共用堆栈段和数据段的内容</p>\n<p><em>Q:vfork 与 fork 的区别与联系:</em><br>A：fork与vfork不同的是,建立的父子线程 不能/能 共用堆栈段和数据段的内容。</p>\n<ul>\n<li>子进程需要手动退出 (与fork不同)</li>\n<li>每次都是子进程先执行, 父进程后执行  (与fork不同)</li>\n<li>创建的 子进程 与 父进程 共享空间    (与fork不同)</li>\n<li>当然与fork 的相同点是: 都可以创建进程</li>\n</ul>\n<p><em>总结：</em></p>\n<ol>\n<li>vfork创建的子进程在改变了变量之后父进程的资源也被改变了，所以vfork创建的子进程是一种“浅拷贝”。</li>\n<li>先在子进程中修改数据段和堆栈段中的内容,且子进程对这些数据段和堆栈段中内容的修改并不会影响到父进程的进程环境。</li>\n</ol>\n<p>子进程继承的资源情况如下表所示：<br><figure class=\"image-box\">\n                <img src=\"https://cdn.jsdelivr.net/gh/WeiyiGeek/blogimage/2019/20190331184818.png\" alt=\"WeiyiGeek.子进程继承\" title=\"\" class=\"\">\n                <p>WeiyiGeek.子进程继承</p>\n            </figure></p>\n<p><br></p>\n<h6 id=\"1-4-进程终止-exit\"><a href=\"#1-4-进程终止-exit\" class=\"headerlink\" title=\"1.4) 进程终止-exit\"></a>1.4) 进程终止-exit</h6><p>进程的退出场景:</p>\n<ul>\n<li>代码运行完毕，结果正确</li>\n<li>代码运行完毕，结果错误</li>\n<li>代码异常中断</li>\n</ul>\n<p>进程正常退出的退出方法：</p>\n<ul>\n<li>调用exit() : 被认为是温和型退出进程，在进程的任意地方调用都会使得进程退出，在退出的过程中会做 执行用户定义的清理函数，冲刷缓冲区，关闭流等的操作。</li>\n<li>调用_exit: 被认为是强制退出进程，在任意地方调用直接退出，不做任何清理工作</li>\n<li>调用return : return仅仅是在main函数中才退出进程 </li>\n</ul>\n<p>Linux退出码查询:echo $?<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exit</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> _exit(<span class=\"keyword\">int</span> status);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">0</span>)  函数的参数表示进程的退出状态，这个状态的值是一个整型;</span><br><span class=\"line\">_exit(<span class=\"number\">0</span>) 直接退出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0 &lt;= i  &lt;133</span></span><br><span class=\"line\">strerror(i); <span class=\"comment\">//返回字符串类型</span></span><br></pre></td></tr></table></figure></p>\n<p>exit与_exit()区别案例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;                                                        </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;                                                       </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;                                                       </span></span></span><br><span class=\"line\">                                                                          </span><br><span class=\"line\"><span class=\"comment\">//exit 与 _exit 区别                                                         </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>                                                            </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                                                         </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"exit 与 _exit 区别\"</span>);                                            </span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);      <span class=\"comment\">//在进程结束之前做了清理工作，刷新缓冲区所以才将字符串显示出来                           </span></span><br><span class=\"line\">    _exit(<span class=\"number\">0</span>);      <span class=\"comment\">//直接退出不做任何操作                                             </span></span><br><span class=\"line\">&#125;                                                                         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########################### 执行结果 #######################</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# ./demo3</span></span><br><span class=\"line\"><span class=\"comment\">// exit 与 _exit 区别</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用_exit() 输出为空</span></span><br></pre></td></tr></table></figure></p>\n<p><em>总结：</em></p>\n<ul>\n<li>exit() 函数会深入内核注销掉进程的内核数据结构，并且释放掉进程的资源(刷新缓冲区并退出);</li>\n<li>_exit()函数直接进入内核释放用户进程的地址空间, 所有用户空间的缓冲区内容都将丢失(直接退出)。</li>\n<li>其实exit与main函数的return 在底层的实现是调用了_exit;</li>\n</ul>\n<p><br></p>\n<h6 id=\"1-5-父进程写子进程读\"><a href=\"#1-5-父进程写子进程读\" class=\"headerlink\" title=\"1.5) 父进程写子进程读\"></a>1.5) 父进程写子进程读</h6><p>案例代码：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 父进程写 子进程读 */</span></span><br><span class=\"line\"><span class=\"comment\">/* waitpid.c 案例应用 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ChildRead</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fd,ret;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">20</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        fd = open(<span class=\"string\">\"hello.txt\"</span>,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == fd)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"ChildRead Error\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = read(fd,buf,<span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == ret)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"File read Error\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"Read from txt:%s\\n\"</span>,buf);</span><br><span class=\"line\">                <span class=\"built_in\">memset</span>(buf,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(buf));  <span class=\"comment\">//清空缓存区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ParentWrite</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">20</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        system(<span class=\"string\">\"touch hello.txt\"</span>);</span><br><span class=\"line\">        fd = open(<span class=\"string\">\"hello.txt\"</span>,O_WRONLY | O_CREAT);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == fd)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"Rarent File open write Error!\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please input the string:\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,buf);</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = write(fd,buf,<span class=\"built_in\">strlen</span>(buf));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == ret)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"write\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">pid_t</span> pid = fork();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == pid)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"fork Error\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == pid)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                sleep(<span class=\"number\">4</span>); <span class=\"comment\">//延迟4秒执行</span></span><br><span class=\"line\">                ChildRead();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                ParentWrite();</span><br><span class=\"line\">                waitpid(pid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>); <span class=\"comment\">//等待子进程结束,父进程回收</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//########################### 执行结果 #######################</span></span><br><span class=\"line\"><span class=\"comment\">// [root@izwz9biz2m4sd3bb3k38pgz ~]# ./demo4</span></span><br><span class=\"line\"><span class=\"comment\">// Please input the string:</span></span><br><span class=\"line\"><span class=\"comment\">// This is demo</span></span><br><span class=\"line\"><span class=\"comment\">// Read from txt:This</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"文章目录结构(1) 进程控制(创建/中止/切换)1.进程控制进程控制的主要任务就是系统使用一些具有特定功能的程序端来创建、撤销进程以及完成进程各状态之间的转换，从而达到多进程、高效率、并发的执行和协调，实现资源共享的目的。<br>","categories":[{"name":"计算机基础","path":"api/categories/计算机基础.json"}],"tags":[{"name":"OperatingSystem","path":"api/tags/OperatingSystem.json"}]}