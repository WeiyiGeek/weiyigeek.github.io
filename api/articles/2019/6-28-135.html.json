{"title":"shell脚本编程之路3","slug":"系统运维/Linux/Shell编程/shell脚本编程之路4","date":"2019-06-28T11:35:30.000Z","updated":"2023-01-31T02:29:10.385Z","url":"2019/6-28-135.html","path":"api/articles/2019/6-28-135.html.json","covers":["https://img.weiyigeek.top/2019/20190709201210.png","https://img.weiyigeek.top/2019/20190709202335.png","https://img.weiyigeek.top/2019/20190709213246.png","https://img.weiyigeek.top/2019/20190709210444.png","https://img.weiyigeek.top/2019/20190713141033.png","https://img.weiyigeek.top/2019/20190713142421.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h4 id=\"0x09-shell编程函数\"><a href=\"#0x09-shell编程函数\" class=\"headerlink\" title=\"0x09 shell编程函数\"></a>0x09 shell编程函数</h4><p>描述：<code>Bash（Bourne Again shell）也跟其他编程语言一样也支持函数</code>，一般在编写大型脚本中需要用到，函数可以让我们将一个复杂功能划分成若干模块，让程序结构更加清晰，代码重复利用率更高，像其他编程语言一样，Shell 也支持函数。但是bash作为一种解释性语言，bash 在编程能力方面提供的支持并不像其他编译性的语言（例如 C 语言）那样完善，执行效率也会低很多。</p>\n<ul>\n<li>Shell 函数<code>必须先定义后使用</code></li>\n<li>Shell 函数与其他高级语言的函数有相似之处，也有<code>返回值、删除函数、在终端调用函数(传参和递归)</code>等等.</li>\n</ul>\n<p>函数的定义格式如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常用格式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">funname</span></span> () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ <span class=\"built_in\">return</span> value ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在函数名前加上关键字 function：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">function_name</span></span> () &#123;</span><br><span class=\"line\">    list of commands</span><br><span class=\"line\">    [ <span class=\"built_in\">return</span> value ]  <span class=\"comment\"># 函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用函数只需要给出函数名，不需要加括号</span></span><br><span class=\"line\">function_name</span><br></pre></td></tr></table></figure></p>\n<p>Shell 函数<code>返回值只能是整数</code>，一般用来表示函数执行成功与否[ 用 $? 接收返回得数值 ]，0表示成功，其他值表示失败</p>\n<ul>\n<li>如果 return 其他数据比如一个字符串，往往会得到错误提示：“numeric argument required”。</li>\n<li>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果，脚本在需要的时候访问这个变量来获得函数返回值</li>\n</ul>\n<p>实际案例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#功能：使用函数Hello直接调用函数与带有return语句的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Hello</span></span> () &#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Url is http://see.xidian.edu.cn/cpp/shell/\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">funWithReturn</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The function is to get the sum of two numbers...\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Input first number: \"</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> aNum</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Input another number: \"</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span> anotherNum</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The two numbers are <span class=\"variable\">$aNum</span> and <span class=\"variable\">$anotherNum</span> !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> $((<span class=\"variable\">$aNum</span>+<span class=\"variable\">$anotherNum</span>))  <span class=\"comment\">#返回值为整数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用函数</span></span><br><span class=\"line\">Hello </span><br><span class=\"line\">funWithReturn</span><br><span class=\"line\"></span><br><span class=\"line\">ret=$?  <span class=\"comment\"># Capture(捕获) value returnd by last command </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"The sum of two numbers is <span class=\"variable\">$ret</span> !\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果#</span></span><br><span class=\"line\">Url is http://see.xidian.edu.cn/cpp/shell/</span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709201210.png\" alt=\"WeiyiGeek.shell函数返回值\" title=\"\" class=\"\">\n                <p>WeiyiGeek.shell函数返回值</p>\n            </figure></p>\n<p><br></p>\n<h5 id=\"全局与局部变量\"><a href=\"#全局与局部变量\" class=\"headerlink\" title=\"全局与局部变量\"></a>全局与局部变量</h5><p>描述：在shell函数中也存在局部和全局变量的说法,以下面的案例来看使用了local关键字;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">aa=<span class=\"string\">\"this is aa\"</span>  <span class=\"comment\">#全局变量 $aa 和 $bb</span></span><br><span class=\"line\">bb=<span class=\"string\">\"this is bb\"</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">name</span></span>() &#123;                  <span class=\"comment\">#定义函数name</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> cc=<span class=\"string\">\"this is cc\"</span>      <span class=\"comment\">#定义局部变量$cc</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> dd=<span class=\"string\">\"this is dd\"</span>      <span class=\"comment\">#定义局部变量$dd</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$aa</span>, <span class=\"variable\">$bb</span>              <span class=\"comment\">#访问参数1和参数2</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$cc</span>                   <span class=\"comment\">#打印局部变量</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span> 10                <span class=\"comment\">#shell函数返回值是整形，并且在0~257之间。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$dd</span>   <span class=\"comment\">#这里将会打印不生效，因为dd是局部变量。</span></span><br><span class=\"line\">name   <span class=\"comment\">#函数调用</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"函数返回值为：$?\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果#</span></span><br><span class=\"line\">[返回空值]</span><br><span class=\"line\">this is aa, this is bb</span><br><span class=\"line\">this is cc</span><br><span class=\"line\">函数返回值为：0</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h5 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h5><p>在Shell中，调用函数时可以向其传递参数，在函数体内部，通过 $n 的形式来获取参数的值，<br>例如，$1表示第一个参数，$2表示第二个参数（前面有说），这里与高级编程语言有所不同，就是参数没有使用括号包含，而是放在函数名后以空格分割即可;</p>\n<p>函数示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">funWithParam</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The value of the first parameter is <span class=\"variable\">$1</span> !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The value of the second parameter is <span class=\"variable\">$2</span> !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The value of the tenth parameter is <span class=\"variable\">$10</span> !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The value of the tenth parameter is <span class=\"variable\">$&#123;10&#125;</span> !\"</span> <span class=\"comment\">#注意获取第10个参数时候的必须采用这样的形式;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The value of the eleventh parameter is <span class=\"variable\">$&#123;11&#125;</span> !\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The amount of the parameters is <span class=\"variable\">$#</span> !\"</span>  <span class=\"comment\"># 参数个数 (前面所说的特殊变量)</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The string of the parameters is $* !\"</span>  <span class=\"comment\"># 传递给函数的所有参数</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"The string of the Single parameters is <span class=\"variable\">$@</span> !\"</span>  <span class=\"comment\"># 传递给函数的单个参数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funWithParam 1 2 3 4 5 6 7 8 9 34 73  <span class=\"comment\">#注意这里传递给函数的参数</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709202335.png\" alt=\"WeiyiGeek.函数参数传递\" title=\"\" class=\"\">\n                <p>WeiyiGeek.函数参数传递</p>\n            </figure>\n<p><br></p>\n<h5 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h5><p>bash也支持递归函数（能够调用自身的函数),那什么是递归函数?<br>答：说白了就是函数本身自我调用;</p>\n<p>简单实例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实例1.脚本不断自我调用打印hello function,结束请按Ctrl+C结束。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">name</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"variable\">$1</span></span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        name <span class=\"string\">\"hello fucntion\"</span>   <span class=\"comment\">#自己调用自己own</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果 ##</span></span><br><span class=\"line\">$ ./test.sh</span><br><span class=\"line\">hello fucntion</span><br><span class=\"line\">hello fucntion</span><br><span class=\"line\">hello fucntion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#实例2.再来看一个函数嵌套的例子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">number_one</span></span> () &#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Url_1 is http://see.edu.cn/cpp/shell/\"</span></span><br><span class=\"line\">   number_two</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">number_two</span></span> () &#123;</span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"Url_2 is http://see.edu.cn/cpp/\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number_one <span class=\"comment\">#调用需要放在number_two后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行结果 ##</span></span><br><span class=\"line\">Url_1 is http://see.edu.cn/cpp/shell/</span><br><span class=\"line\">Url_2 is http://see.edu.cn/cpp/</span><br></pre></td></tr></table></figure></p>\n<p><strong>补充知识点：</strong><br>递归经典：可能很多人都曾经听说过 <code>fork 炸弹</code>，它实际上只是一个非常简单的递归程序，程序所做的事情只有一样：这个递归函数能够调用自身，不算的生成新的进程，这会导致这个简单的程序迅速耗尽系统里面的所有资源，造成拒绝服务攻击！（denial of service attack）</p>\n<p>它定义了一个叫”.”的函数，调用了自己两次，一次是在前台，一次是在后台;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">.|.&amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">;</span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#或者</span></span><br><span class=\"line\">:( )&#123;:|:&amp;&#125;;: <span class=\"comment\"># ：的函数</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709213246.png\" alt=\"WeiyiGeek.递归函数炸弹\" title=\"\" class=\"\">\n                <p>WeiyiGeek.递归函数炸弹</p>\n            </figure></p>\n<p><br></p>\n<p>shell脚本函数常用脚本编写方法 (重点)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 函数实现输入格式效验与web应用监测</span></span><br><span class=\"line\"></span><br><span class=\"line\">RETVAL=0</span><br><span class=\"line\"><span class=\"comment\">#包含脚本 让后面的函数聚可以使用里面的 action 函数与变量  (值得学习)</span></span><br><span class=\"line\">[ -f /etc/init.d/<span class=\"built_in\">functions</span> ] &amp;&amp; . /etc/init.d/<span class=\"built_in\">functions</span>  <span class=\"comment\">#由于ubuntu中没有所以下面直接简单的写了一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run some action. Log its output.</span></span><br><span class=\"line\"><span class=\"comment\"># action() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   local STRING rc</span></span><br><span class=\"line\"><span class=\"comment\">#   STRING=$1;$2</span></span><br><span class=\"line\"><span class=\"comment\">#   rc=$?</span></span><br><span class=\"line\"><span class=\"comment\">#   if [ $rc -eq 0 ];then</span></span><br><span class=\"line\"><span class=\"comment\">#     echo -n \"$STRING   [成功]\"</span></span><br><span class=\"line\"><span class=\"comment\">#   else</span></span><br><span class=\"line\"><span class=\"comment\">#     echo -n \"$STRING   [失败]\"</span></span><br><span class=\"line\"><span class=\"comment\">#   fi</span></span><br><span class=\"line\"><span class=\"comment\">#   echo .</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> -e <span class=\"string\">\"Usage: <span class=\"variable\">$0</span> USERNAME URL \\nUsername:只能是子母大小写数字以及下划线\\nURL:支持https与http协议\"</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">usernameFormat</span></span>()&#123;</span><br><span class=\"line\">  [ 0 -lt $(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> | grep -E <span class=\"string\">'[^a-zA-Z0-9_]'</span>|wc -l) ] &amp;&amp; <span class=\"built_in\">return</span> 1 || <span class=\"built_in\">return</span> 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">urlFormat</span></span>()&#123;</span><br><span class=\"line\">  format=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span>|grep -oE <span class=\"string\">\"(^http|^https)\\://\\w.+\\.\\w+\"</span> | grep -oE <span class=\"string\">\"(^http|^https)\"</span>)  <span class=\"comment\"># -o 选项值得学习</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$format</span>\"</span> == <span class=\"string\">\"\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"url Format Error!\"</span></span><br><span class=\"line\">    usage</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$format</span>\"</span> == <span class=\"string\">\"https\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$format</span>\"</span> == <span class=\"string\">\"http\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 2</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> 3</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">checkweb</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$2</span> -eq 1 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    wget -T 10 --spider --no-check-certificate -t 2 <span class=\"variable\">$1</span> &amp;&gt;/dev/null   <span class=\"comment\">#https</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ <span class=\"variable\">$2</span> -eq 2 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    wget -T 10 --spider -t 2 <span class=\"variable\">$1</span> &amp;&gt;/dev/null   <span class=\"comment\">#http  #值得学习的地方探测web服务</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"checkweb Error!\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  RETVAL=$?</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$RETVAL</span> -eq 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    action <span class=\"string\">\"<span class=\"variable\">$1</span> url\"</span> /bin/<span class=\"literal\">true</span>   <span class=\"comment\">#值得学习的地方 </span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    action <span class=\"string\">\"<span class=\"variable\">$1</span> url\"</span> /bin/<span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">main</span></span>()&#123;</span><br><span class=\"line\">  usernameFormat <span class=\"variable\">$1</span></span><br><span class=\"line\">  check=$?</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ 1 -eq <span class=\"string\">\"<span class=\"variable\">$check</span>\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">     <span class=\"built_in\">echo</span> <span class=\"string\">\"Username format Error!\"</span></span><br><span class=\"line\">     usage</span><br><span class=\"line\">  <span class=\"keyword\">fi</span> </span><br><span class=\"line\">  urlFormat <span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">  check=$?</span><br><span class=\"line\">  checkweb <span class=\"string\">\"<span class=\"variable\">$2</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$check</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关键点(这里是$*)</span></span><br><span class=\"line\">main $*</span><br></pre></td></tr></table></figure></p>\n<p>执行结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./webcheck.sh weiyegeek <span class=\"string\">\"https://www.baidu.com\"</span></span><br><span class=\"line\">https://www.baidu.com url   [成功].</span><br><span class=\"line\">./webcheck.sh weiyegeek <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">http://www.baidu.com url   [成功].</span><br><span class=\"line\"></span><br><span class=\"line\">./webcheck.sh weiyegeek <span class=\"string\">\"http://www.baiducom.com\"</span></span><br><span class=\"line\">http://www.baiducom.com url   [失败].</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Centos7执行</span></span><br><span class=\"line\">./demo.sh weiyigeek http://www.baidu1.com</span><br><span class=\"line\">http://www.baidu1.com url                                  [FAILED]</span><br></pre></td></tr></table></figure></p>\n<p><strong>函数总结：</strong></p>\n<ul>\n<li>shell的位置参数($1,${n},$#,$*,$@,$?)都是函数的参数;</li>\n<li>shell返回值是 exit 输出返回值(并且退出当前shell),函数里用 return 输出返回值(退出当前函数),都采用$?来获取执行的结果;</li>\n<li>shell中函数传参与脚本传参是一致的，但是得注意 $0 代表任然是父脚本的名称;</li>\n</ul>\n<p><br></p>\n<h5 id=\"删除函数\"><a href=\"#删除函数\" class=\"headerlink\" title=\"删除函数\"></a>删除函数</h5><p>描述：像删除变量一样，删除函数也可以使用 unset 命令，不过要加上 .f 选项，如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> -f function_name   <span class=\"comment\">#放在调用的前面！！！</span></span><br></pre></td></tr></table></figure><br>如果你希望直接从终端调用函数可以将函数定义在主目录下的 .profile 文件，这样每次登录后在命令提示符后面输入函数名字就可以立即调用。</p>\n<figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190709210444.png\" alt=\"WeiyiGeek.函数嵌套删除\" title=\"\" class=\"\">\n                <p>WeiyiGeek.函数嵌套删除</p>\n            </figure>\n<hr>\n\n<h4 id=\"0x09-shell脚本包含\"><a href=\"#0x09-shell脚本包含\" class=\"headerlink\" title=\"0x09 shell脚本包含\"></a>0x09 shell脚本包含</h4><p>描述：Shell文件包含像其他语言一样，Shell 也可以包含外部脚本，将外部脚本的内容合并到当前脚本，也能在函数中进行调用外部变量</p>\n<p>脚本包含：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#两种方式效果相同,一般常使用点号(.)，但是注意号(.)与文件名中间有一空格</span></span><br><span class=\"line\">. filename</span><br><span class=\"line\"><span class=\"built_in\">source</span> filename</span><br></pre></td></tr></table></figure></p>\n<p>基础示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#例如，创建两个脚本，一个是被调用脚本 subscript.sh，内容如下：</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"sub Script\"</span></span><br><span class=\"line\">url=<span class=\"string\">\"weiyigeek.github.io\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">一个是主文件 main.sh，内容如下：</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">. ./subscript.sh  <span class=\"comment\">#注意：被包含脚本不需要有执行权限</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"我的个人网站地址: <span class=\"variable\">$&#123;url&#125;</span>\"</span>  <span class=\"comment\"># 调用subscript里面的变量.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行脚本：</span></span><br><span class=\"line\"><span class=\"variable\">$chomd</span> +x main.sh  </span><br><span class=\"line\">./main.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行结果</span></span><br><span class=\"line\">http://see.edu.cn/2738.html</span><br></pre></td></tr></table></figure></p>\n<p><em>注意事项：</em></p>\n<ul>\n<li>如果subscript.sh没有权限main.sh将不会被执行;</li>\n</ul>\n<hr>\n\n<h4 id=\"0x10-补充知识\"><a href=\"#0x10-补充知识\" class=\"headerlink\" title=\"0x10 补充知识\"></a>0x10 补充知识</h4><h5 id=\"shell-脚本调试\"><a href=\"#shell-脚本调试\" class=\"headerlink\" title=\"shell 脚本调试\"></a>shell 脚本调试</h5><p>描述：脚本调试功能是每一种编程语言具备得特性之一,出现一些始料未及得情况;使用调试功能可以弄清除是声明原因发生了错误或者异常；<br>shell脚本自身已经包含调试选项，能打印出脚本接收得参数和输入;</p>\n<p><em>方法1：</em>使用 <code>_DEBUG</code>环境变量：如果需要自定义格式显示调式信息可以通过<code>_DEBUG</code>环境变量来建立<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#shell脚本调试</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">DEBUG</span></span>() &#123;</span><br><span class=\"line\">  [ <span class=\"string\">\"<span class=\"variable\">$_DEBUG</span>\"</span> = <span class=\"string\">\"on\"</span> ] &amp;&amp; <span class=\"variable\">$@</span> || :</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..5&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">DEBUG <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure><br>将调试功能设置为“on”来运行脚本：<code>_DEBUG=on ./script.sh</code><br>将需要调式的行前加上DEBUG，运行脚本前没有加_DEBUG=on就不会显示任何信息，脚本中“:”告诉shell不要进行任何操作。<br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190713141033.png\" alt=\"WeiyiGeek.debug\" title=\"\" class=\"\">\n                <p>WeiyiGeek.debug</p>\n            </figure></p>\n<p><br/></p>\n<p><em>方法2:使用shebang调式方法：</em><br>把<code>注释头从#!/bin/bash 修改成 #!/bin/bash -xv</code>，其他就不用做任何操作了，这是最便捷的方法.</p>\n<p><br/></p>\n<h5 id=\"shell切分和提取\"><a href=\"#shell切分和提取\" class=\"headerlink\" title=\"shell切分和提取\"></a>shell切分和提取</h5><p>在进行<code>切分文件名，提取文件名 与 提取文件扩展名</code>,需要用到的几个操作符有：%、%%、#、##。</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${VAR%[通配符]}</td>\n<td>% 属于非贪婪操作符，他是从右向左匹配最短结果</td>\n</tr>\n<tr>\n<td>${VAR%%[通配符]}</td>\n<td>%% 属于贪婪操作符，会从右向左匹配符合条件的最长字符串</td>\n</tr>\n<tr>\n<td>${VAR#[通配符]}</td>\n<td># 属于非贪婪操作符，他是从左向右匹配最短结果</td>\n</tr>\n<tr>\n<td>${VAR##[通配符]}</td>\n<td>%% 属于贪婪操作符，会从左向右匹配符合条件的最长字符串</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>实际案例1：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例1.从右向左匹配 ：% 和 %% 操作符的示例（&lt;&lt;）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#提取文件名或者删除后缀</span></span><br><span class=\"line\">file_name=<span class=\"string\">\"text.gif\"</span></span><br><span class=\"line\"><span class=\"comment\">#从$VAR中删除位于 % 右侧的通配符左右匹配的字符串,通配符从右向左进行匹配,现在给变量 name 赋值，name=text.gif，那么通配符从右向左就会匹配到 .gif，所有从 $VAR 中删除匹配结果</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;file_name%.*&#125;</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> file name is: <span class=\"variable\">$name</span>  <span class=\"comment\">#file name is: test</span></span><br><span class=\"line\"></span><br><span class=\"line\">file_name=<span class=\"string\">\"text.gif.bak.2012\"</span></span><br><span class=\"line\">name=<span class=\"variable\">$&#123;file_name%.*&#125;</span></span><br><span class=\"line\">name2=<span class=\"variable\">$&#123;file_name%%.*&#125;</span>  <span class=\"comment\"># 操作符 %% 使用 .* 从右向左贪婪匹配到 .gif.bak.2012</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> file name is: <span class=\"variable\">$name</span> <span class=\"comment\">#file name is: test.gif.bak #使用 %,匹配到right到left得第一个\".\" &lt;&lt;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> file name is: <span class=\"variable\">$name2</span> <span class=\"comment\">#file name is: test  #使用 %%,匹配到从left到right得第一个\".\" &gt;&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><br/></p>\n<p>实际案例2:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#示例2.从左向右匹配：# 和 ## 操作符示例（&lt;&lt;）</span></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#提取后缀，删除文件名。</span></span><br><span class=\"line\">file_name=<span class=\"string\">\"text.gif\"</span></span><br><span class=\"line\"><span class=\"comment\"># $&#123;VAR#*.&#125; 含义：从 $VAR 中删除位于 # 右侧的通配符所匹配的字符串，通配符是左向右进行匹配。</span></span><br><span class=\"line\">suffix=<span class=\"variable\">$&#123;file_name#*.&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> suffix is: <span class=\"variable\">$suffix</span>  <span class=\"comment\">#suffix is: gif</span></span><br><span class=\"line\"></span><br><span class=\"line\">file_name=<span class=\"string\">\"text.gif.bak.2012.txt\"</span></span><br><span class=\"line\">suffix=<span class=\"variable\">$&#123;file_name#*.&#125;</span>   <span class=\"comment\"># 与  %%.* 结果 相反</span></span><br><span class=\"line\">suffix2=<span class=\"variable\">$&#123;file_name##*.&#125;</span> <span class=\"comment\"># 与 %.* 结果 相反</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> suffix is: <span class=\"variable\">$suffix</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> suffix is: <span class=\"variable\">$suffix2</span>  <span class=\"comment\">#操作符 ## 使用 *. 从左向右贪婪匹配到 text.gif.bak.2012</span></span><br><span class=\"line\"><span class=\"comment\"># suffix is: text.gif.bak.2012   使用 # ,取第一小数点开始到结尾的进行匹配 &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># suffix2 is: txt  使用 ## ,取最后一个小数点的suffix(后缀名) &lt;&lt;</span></span><br></pre></td></tr></table></figure><br><figure class=\"image-box\">\n                <img src=\"https://img.weiyigeek.top/2019/20190713142421.png\" alt=\"WeiyiGeek.名称切分案例\" title=\"\" class=\"\">\n                <p>WeiyiGeek.名称切分案例</p>\n            </figure></p>\n<p><br/></p>\n<p>实际案例3:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ## 取最后 一个 / 到末尾的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// # 取第一个 / 到末尾的字符串</span></span><br><span class=\"line\">demo=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i in $(ls /nas_log/logs/student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span>-&#123;<span class=\"number\">27</span>,<span class=\"number\">28</span>,<span class=\"number\">29</span>,<span class=\"number\">30</span>&#125;.*.gz);do echo <span class=\"string\">\"$&#123;i##*/&#125;\"</span>;demo=$(($demo+<span class=\"number\">1</span>));cp $&#123;i&#125; /tmp/backup/$&#123;demo&#125;-$&#123;i##*/&#125;;done</span><br><span class=\"line\">gzip -d student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-30</span><span class=\"number\">-0.</span>gz</span><br></pre></td></tr></table></figure><br>输出说明:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp/backup$ ls | more</span><br><span class=\"line\"><span class=\"number\">1000</span>-student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-30.6</span></span><br><span class=\"line\"><span class=\"number\">1001</span>-student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-30.7</span></span><br><span class=\"line\"><span class=\"number\">1002</span>-student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-30.8</span></span><br><span class=\"line\"><span class=\"number\">1003</span>-student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-30.9</span></span><br><span class=\"line\"><span class=\"number\">1004</span>-student.log<span class=\"number\">.2021</span><span class=\"number\">-06</span><span class=\"number\">-27.0</span></span><br></pre></td></tr></table></figure></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Development","path":"api/categories/Development.json"},{"name":"Programming","path":"api/categories/Programming.json"}],"tags":[{"name":"Shell","path":"api/tags/Shell.json"}]}