{"title":"云原生收集未整理","slug":"虚拟云容/收集","date":"2020-02-11T13:34:33.000Z","updated":"2022-03-11T03:12:10.831Z","url":"2020/2-11-590.html","path":"api/articles/2020/2-11-590.html.json","covers":["收集.assets/image-20210725115217390.png","收集.assets/image-20210725153229573.png","收集.assets/image-20210725115154571.png","收集.assets/image-20210725115339664.png","收集.assets/image-20210725115657592.png","收集.assets/image-20210725115741523.png","收集.assets/image-20210726145805590.png","收集.assets/image-20210725115829456.png","收集.assets/image-20210725120259500.png","收集.assets/image-20210725120404011.png","收集.assets/image-20210725120624642.png","收集.assets/image-20210725142931929.png","收集.assets/image-20210725141912134.png","收集.assets/image-20210725143134999.png","收集.assets/image-20210725143338536.png","收集.assets/image-20210725143735070.png","收集.assets/image-20210725143959696.png","收集.assets/image-20210725144823022.png","收集.assets/image-20210725144923953.png","收集.assets/image-20210725145003025.png","收集.assets/image-20210725145035621.png","收集.assets/image-20210725145216050.png","收集.assets/image-20210725145335687.png","收集.assets/image-20210725145425672.png","收集.assets/image-20210725145622236.png","收集.assets/image-20210725145629243.png","收集.assets/image-20210725145713062.png","收集.assets/image-20210725145824583.png","收集.assets/image-20210725150022221.png","收集.assets/image-20210725150136973.png","收集.assets/image-20210725150205159.png","收集.assets/image-20210725150256825.png","收集.assets/image-20210725152233496.png","收集.assets/image-20210725153617670.png","收集.assets/image-20210725153806936.png","收集.assets/image-20210725154114365.png","收集.assets/image-20210725153939275.png","收集.assets/image-20210725154148261.png","收集.assets/image-20210725154357329.png","收集.assets/image-20210725154418703.png","收集.assets/image-20210725154534499.png","收集.assets/image-20210725154831348.png","收集.assets/image-20210725155042855.png","收集.assets/image-20210725155133990.png","收集.assets/image-20210725155249452.png","收集.assets/image-20210725155906243.png","收集.assets/image-20210725155817798.png","收集.assets/image-20210725160312283.png","收集.assets/image-20210725160459633.png","收集.assets/image-20210725221126321.png","收集.assets/image-20210725221316057.png","收集.assets/image-20210725221531427.png","收集.assets/image-20210725221651848.png","收集.assets/image-20210725222023620.png","收集.assets/image-20210725223400063.png","收集.assets/image-20210725223721810.png","收集.assets/image-20210725223942484.png","收集.assets/image-20210725224330473.png","收集.assets/image-20210725224445887.png","收集.assets/image-20210725224555868.png","收集.assets/image-20210726093052846.png","收集.assets/image-20210726093218144.png","收集.assets/image-20210726093309276.png","收集.assets/image-20210726093335727.png","收集.assets/image-20210725224746030.png","收集.assets/image-20210725224940307.png","收集.assets/image-20210725225053900.png","收集.assets/image-20210725225259489.png","收集.assets/image-20210725225338252.png","收集.assets/image-20210725225419454.png","收集.assets/image-20210726093402688.png","收集.assets/image-20210726093736894.png","收集.assets/image-20210726094612968.png","收集.assets/image-20210726095353400.png","收集.assets/image-20210726095711573.png","收集.assets/image-20210726095811499.png","收集.assets/image-20210726095547183.png","收集.assets/image-20210726100319077.png","收集.assets/image-20210726095034804.png","收集.assets/image-20210726095135348.png","收集.assets/image-20210726095221475.png","收集.assets/image-20210726100433403.png","收集.assets/image-20210726101243353.png","收集.assets/image-20210726102100187.png","收集.assets/image-20210726102316263.png","收集.assets/image-20210726102948709.png","收集.assets/image-20210726113346954.png","收集.assets/image-20210726112358866.png","收集.assets/image-20210726112433848.png","收集.assets/image-20210726113156857.png","收集.assets/image-20210726113539619.png","收集.assets/image-20210726113659654.png","收集.assets/image-20210726113837474.png","收集.assets/image-20210726113756536.png","收集.assets/image-20210726114034203.png","收集.assets/image-20210726114138602.png","收集.assets/image-20210726114350831.png","收集.assets/image-20210726114418282.png","收集.assets/image-20210726124129667.png","收集.assets/image-20210726124204449.png","收集.assets/image-20210726142457030.png","收集.assets/image-20210726141253895.png","收集.assets/image-20210726141342151.png","收集.assets/image-20210726141511246.png","收集.assets/image-20210726141540326.png","收集.assets/image-20210726124627790.png","收集.assets/image-20210726141834099.png","收集.assets/image-20210726141915683.png","收集.assets/image-20210726142021060.png","收集.assets/image-20210726142121233.png","收集.assets/image-20210726125010351.png","收集.assets/image-20210726145830112.png","收集.assets/image-20210726150053431.png","收集.assets/image-20210726150259727.png","收集.assets/image-20210726150312499.png","收集.assets/image-20210726152310217.png","收集.assets/image-20210726175018553.png","收集.assets/image-20210726175202745.png","收集.assets/image-20210726185348964.png","收集.assets/image-20210726185544130.png","收集.assets/image-20210726191420464.png","收集.assets/image-20210727092420661.png","收集.assets/image-20210727092715986.png","收集.assets/image-20210727092830384.png","收集.assets/image-20210727093013015.png","收集.assets/image-20210727093223066.png","收集.assets/image-20210727093233635.png","收集.assets/image-20210727093912750.png","收集.assets/image-20210727094050838.png","收集.assets/image-20210727094229186.png","收集.assets/image-20210727095332199.png","收集.assets/image-20210727095448677.png","收集.assets/image-20210727095723572.png","收集.assets/image-20210727100204030.png","收集.assets/image-20210727100625418.png","收集.assets/image-20210727100635568.png","收集.assets/image-20210727100733725.png","收集.assets/image-20210727100745604.png","收集.assets/image-20210727101309762.png","收集.assets/image-20210727101438755.png","收集.assets/image-20210727101553487.png","收集.assets/image-20210727101721013.png","收集.assets/image-20210727101839486.png","收集.assets/image-20210727102003563.png","收集.assets/image-20210727102049602.png","收集.assets/image-20210727102412997.png","收集.assets/image-20210727102429034.png","收集.assets/image-20210727102629033.png","收集.assets/image-20210727102616820.png","收集.assets/image-20210727102949265.png","收集.assets/image-20210727103209827.png"],"content":"<p>[TOC]</p>\n<a id=\"more\"></a>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><p> 十年云计算浪潮下，DevOps、容器、微服务等技术飞速发展，云原生成为潮流。<br>云原生2.0是企业化从“ON Cloud”走向“IN Cloud”，成为“新云原生企业”，新生能力与既有能力立而不破、有机协同，实现资源高效、应用敏捷、业务智能、安全可信。</p>\n<h2 id=\"云原生基础介绍\"><a href=\"#云原生基础介绍\" class=\"headerlink\" title=\"云原生基础介绍\"></a>云原生基础介绍</h2><h3 id=\"云原生技术发展历程\"><a href=\"#云原生技术发展历程\" class=\"headerlink\" title=\"云原生技术发展历程\"></a>云原生技术发展历程</h3><p>了解云原生的发展历程，学习云原生的基本概念以及技术体系。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725115217390.png\" alt=\"image-20210725115217390\" title=\"\" class=\"\">\n                <p>image-20210725115217390</p>\n            </figure>\n<p>云计算发展历程</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725153229573.png\" alt=\"image-20210725153229573\" title=\"\" class=\"\">\n                <p>image-20210725153229573</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210725115154571.png\" alt=\"image-20210725115154571\"></p>\n<p>凭借其先进的理念以及活跃的社区生态，kubernetes 是近 三十年来增长最快的开源项目之一。带领了云原生的发展。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725115339664.png\" alt=\"image-20210725115339664\" title=\"\" class=\"\">\n                <p>image-20210725115339664</p>\n            </figure>\n<p>CNCF 在国内有60➕企业成员参与</p>\n<p><img src=\"收集.assets/image-20210725115657592.png\" alt=\"image-20210725115657592\"></p>\n<p><img src=\"收集.assets/image-20210725115741523.png\" alt=\"image-20210725115741523\"></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726145805590.png\" alt=\"image-20210726145805590\" title=\"\" class=\"\">\n                <p>image-20210726145805590</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725115829456.png\" alt=\"image-20210725115829456\" title=\"\" class=\"\">\n                <p>image-20210725115829456</p>\n            </figure>\n<h3 id=\"云原生核心概念\"><a href=\"#云原生核心概念\" class=\"headerlink\" title=\"云原生核心概念\"></a>云原生核心概念</h3><p><img src=\"收集.assets/image-20210725120259500.png\" alt=\"image-20210725120259500\"></p>\n<p>声明式API 面向开发者提供全新分布式原语</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725120404011.png\" alt=\"image-20210725120404011\" title=\"\" class=\"\">\n                <p>image-20210725120404011</p>\n            </figure>\n<p>服务网格，剥离业务代码和分布式框架</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725120624642.png\" alt=\"image-20210725120624642\" title=\"\" class=\"\">\n                <p>image-20210725120624642</p>\n            </figure>\n<h3 id=\"云原生技术体系\"><a href=\"#云原生技术体系\" class=\"headerlink\" title=\"云原生技术体系\"></a>云原生技术体系</h3><p>CNCF(云原生基金会) 已成为云计算领域新的 “标准” 制定者。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725142931929.png\" alt=\"image-20210725142931929\" title=\"\" class=\"\">\n                <p>image-20210725142931929</p>\n            </figure>\n<p>开源社区是云原生技术的推动者(加快技术的普及)，同时是相关技术标准的制定者(厂商共同联合开发)。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725141912134.png\" alt=\"image-20210725141912134\" title=\"\" class=\"\">\n                <p>image-20210725141912134</p>\n            </figure>\n<p>云原生技术版图</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725143134999.png\" alt=\"image-20210725143134999\" title=\"\" class=\"\">\n                <p>image-20210725143134999</p>\n            </figure>\n<p>CNCF 的项目成熟度模型  </p>\n<ul>\n<li><p><img src=\"收集.assets/image-20210725143338536.png\" alt=\"image-20210725143338536\"></p>\n</li>\n</ul>\n<ul>\n<li><p>Graduation （毕业）:</p>\n</li>\n<li><p>Incubating  （孵化）:</p>\n</li>\n<li><p>Sandbox（模型） ： 宽松的许可比如apache 2.0，让更改多厂商参与</p>\n</li>\n</ul>\n<p><img src=\"收集.assets/image-20210725143735070.png\" alt=\"image-20210725143735070\"></p>\n<p>云原生平台技术架构发展方向：以 “应用” 为中心的云 “OS”</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725143959696.png\" alt=\"image-20210725143959696\" title=\"\" class=\"\">\n                <p>image-20210725143959696</p>\n            </figure>\n<p>判断题</p>\n<p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。</p>\n<p>​                                          true                       正确                       </p>\n<p>​                                          false                      </p>\n<p>​    </p>\n<p>单选题</p>\n<p>云原生技术的官方推广组织是哪个？</p>\n<p>​                                          openstack社区                      </p>\n<p>​                                          CNCF                       正确                       </p>\n<p>​                                          Docker公司                      </p>\n<p>​    </p>\n<p>多选题</p>\n<p>以下哪些是云原生的代表技术？</p>\n<p>​                                          容器                      </p>\n<p>​                                          微服务                      </p>\n<p>​                                          服务网格                      </p>\n<p>​                                          声明式API                      </p>\n<p>​               正确     </p>\n<p>以下关于云原生理念的说法正确的是？</p>\n<p>​                                          解耦软件开发，提高灵活性和可维护性                      </p>\n<p>​                                          多云支持，避免厂商锁定                      </p>\n<p>​                                          避免侵入式定制                      </p>\n<p>​                                          提高工作效率和资源利用率                      </p>\n<p>​               正确     </p>\n<hr>\n<h2 id=\"容器技术基础介绍-加深学习\"><a href=\"#容器技术基础介绍-加深学习\" class=\"headerlink\" title=\"容器技术基础介绍 加深学习\"></a>容器技术基础介绍 加深学习</h2><p>介绍云原生技术体系中的基石容器技术。</p>\n<p>容器技术基础，详细阐述了整个容器的结构和技术构成，清晰的分解了容器的架构和技术交互原理，方便理解核心基础的相关知识能力，为集群构建的理解奠定基础</p>\n<h3 id=\"第1章-容器技术发展简介\"><a href=\"#第1章-容器技术发展简介\" class=\"headerlink\" title=\"第1章 容器技术发展简介\"></a>第1章 容器技术发展简介</h3><p>引入容器技术的背景</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725144823022.png\" alt=\"image-20210725144823022\" title=\"\" class=\"\">\n                <p>image-20210725144823022</p>\n            </figure>\n<p>基础概况:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725144923953.png\" alt=\"image-20210725144923953\" title=\"\" class=\"\">\n                <p>image-20210725144923953</p>\n            </figure>\n<p>Cgroup</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145003025.png\" alt=\"image-20210725145003025\" title=\"\" class=\"\">\n                <p>image-20210725145003025</p>\n            </figure>\n<p>Namespace  概念</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145035621.png\" alt=\"image-20210725145035621\" title=\"\" class=\"\">\n                <p>image-20210725145035621</p>\n            </figure>\n<p>Linux Namespace是一种资源限制的方案。</p>\n<p>​                                          true                      </p>\n<p>​                                          false                       正确                       </p>\n<p>​    </p>\n<p>单线题</p>\n<p>以下哪个命令不是docker命令？</p>\n<p>​                                          docker run                      </p>\n<p>​                                          docker build                      </p>\n<p>​                                          docker kill                       正确                       </p>\n<p>​    </p>\n<p>多选题</p>\n<p>Cgroups包含以下哪些子系统？</p>\n<p>​                                          cpu 子系统                      </p>\n<p>​                                          memory 子系统                      </p>\n<p>​                                          devices 子系统                      </p>\n<p>​                                          swap子系统         x  </p>\n<p>​               正确     </p>\n<p>Linux Namespace包含以下哪些类型？</p>\n<p>​                                          pid namespace                      </p>\n<p>​                                          uts namespace                      </p>\n<p>​                                          user namespace                      </p>\n<p>​                                          mount namespace                      </p>\n<h3 id=\"第2章-Docker容器和容器镜像技术介绍\"><a href=\"#第2章-Docker容器和容器镜像技术介绍\" class=\"headerlink\" title=\"第2章 Docker容器和容器镜像技术介绍\"></a>第2章 Docker容器和容器镜像技术介绍</h3><figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145216050.png\" alt=\"image-20210725145216050\" title=\"\" class=\"\">\n                <p>image-20210725145216050</p>\n            </figure>\n<p>Docker VS VM</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145335687.png\" alt=\"image-20210725145335687\" title=\"\" class=\"\">\n                <p>image-20210725145335687</p>\n            </figure>\n<p>使用流程</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145425672.png\" alt=\"image-20210725145425672\" title=\"\" class=\"\">\n                <p>image-20210725145425672</p>\n            </figure>\n<p>docker 镜像</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145622236.png\" alt=\"image-20210725145622236\" title=\"\" class=\"\">\n                <p>image-20210725145622236</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145629243.png\" alt=\"image-20210725145629243\" title=\"\" class=\"\">\n                <p>image-20210725145629243</p>\n            </figure>\n<p>优势与分层结构</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145713062.png\" alt=\"image-20210725145713062\" title=\"\" class=\"\">\n                <p>image-20210725145713062</p>\n            </figure> \n<h3 id=\"第3章-镜像仓库介绍\"><a href=\"#第3章-镜像仓库介绍\" class=\"headerlink\" title=\"第3章 镜像仓库介绍\"></a>第3章 镜像仓库介绍</h3><figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725145824583.png\" alt=\"image-20210725145824583\" title=\"\" class=\"\">\n                <p>image-20210725145824583</p>\n            </figure>\n<h3 id=\"第4章-如何使用Dockerfile进行构建\"><a href=\"#第4章-如何使用Dockerfile进行构建\" class=\"headerlink\" title=\"第4章 如何使用Dockerfile进行构建\"></a>第4章 如何使用Dockerfile进行构建</h3><p><strong>什么是dockerfile?</strong></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725150022221.png\" alt=\"image-20210725150022221\" title=\"\" class=\"\">\n                <p>image-20210725150022221</p>\n            </figure>\n<p>使用dockerfile构建</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725150136973.png\" alt=\"image-20210725150136973\" title=\"\" class=\"\">\n                <p>image-20210725150136973</p>\n            </figure>\n<p>常用参数：</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725150205159.png\" alt=\"image-20210725150205159\" title=\"\" class=\"\">\n                <p>image-20210725150205159</p>\n            </figure>\n<p>新的镜像构建工具产生背景</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725150256825.png\" alt=\"image-20210725150256825\" title=\"\" class=\"\">\n                <p>image-20210725150256825</p>\n            </figure>\n<p>总结 : </p>\n<p><img src=\"收集.assets/image-20210725152233496.png\" alt=\"image-20210725152233496\"></p>\n<h2 id=\"Kubernetes-系统快速入门\"><a href=\"#Kubernetes-系统快速入门\" class=\"headerlink\" title=\"Kubernetes 系统快速入门\"></a>Kubernetes 系统快速入门</h2><p>介绍云原生技术体系中Kubernetes的相关概念和技术架构。</p>\n<p>kubernetes的系统入门，简介明了的讲解kubernetes整体组件和构成，加深对kubernetes的结构认识以及各个模块如何技术交互完成应用的部署和管理，非常使用的基础课程讲解</p>\n<h3 id=\"第1章-kubernetes介绍\"><a href=\"#第1章-kubernetes介绍\" class=\"headerlink\" title=\"第1章 kubernetes介绍\"></a>第1章 kubernetes介绍</h3><p>kubernetes 架构 生态主要层次</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725153617670.png\" alt=\"image-20210725153617670\" title=\"\" class=\"\">\n                <p>image-20210725153617670</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210725153806936.png\" alt=\"image-20210725153806936\"></p>\n<p>kubernetes 模型对象 、功能组件 与 特性</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725154114365.png\" alt=\"image-20210725154114365\" title=\"\" class=\"\">\n                <p>image-20210725154114365</p>\n            </figure>\n<h3 id=\"第2章-Kubernetes基本概念\"><a href=\"#第2章-Kubernetes基本概念\" class=\"headerlink\" title=\"第2章 Kubernetes基本概念\"></a>第2章 Kubernetes基本概念</h3><p>Pod 概念:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725153939275.png\" alt=\"image-20210725153939275\" title=\"\" class=\"\">\n                <p>image-20210725153939275</p>\n            </figure>\n<p>Pod Containers </p>\n<p>基础容器:</p>\n<p>$ vim /var/lib/kubelet/kubeadm-flags.env</p>\n<p>–pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.4.1   K8s v1.23.1</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725154148261.png\" alt=\"image-20210725154148261\" title=\"\" class=\"\">\n                <p>image-20210725154148261</p>\n            </figure>\n<p>容器基础组成 </p>\n<p><img src=\"收集.assets/image-20210725154357329.png\" alt=\"image-20210725154357329\"></p>\n<p><img src=\"收集.assets/image-20210725154418703.png\" alt=\"image-20210725154418703\"></p>\n<p>Pod 与 Work 负载关系 </p>\n<p>label-selector : 在 brog 中学习到的经验</p>\n<p>ownReference ： 1.15 或者 1.16 之后，希望Pod有唯一的控制者 (指向的关系)</p>\n<p>HA : </p>\n<p><img src=\"收集.assets/image-20210725154534499.png\" alt=\"image-20210725154534499\"></p>\n<p>ReplicaSet ： 保证Pod副本的数量，用于无状态服务，现在主要使用Deployment</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725154831348.png\" alt=\"image-20210725154831348\" title=\"\" class=\"\">\n                <p>image-20210725154831348</p>\n            </figure>\n<p>Deployment </p>\n<p><img src=\"收集.assets/image-20210725155042855.png\" alt=\"image-20210725155042855\"></p>\n<h3 id=\"第3章-kubernetes总体架构\"><a href=\"#第3章-kubernetes总体架构\" class=\"headerlink\" title=\"第3章 kubernetes总体架构\"></a>第3章 kubernetes总体架构</h3><p>系统组件:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725155133990.png\" alt=\"image-20210725155133990\" title=\"\" class=\"\">\n                <p>image-20210725155133990</p>\n            </figure>\n<p>总体架构:</p>\n<p><img src=\"收集.assets/image-20210725155249452.png\" alt=\"image-20210725155249452\"></p>\n<p>基于List-Watch机制的控制器架构</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725155906243.png\" alt=\"image-20210725155906243\" title=\"\" class=\"\">\n                <p>image-20210725155906243</p>\n            </figure>\n<p>kubernetes Controllers ： 保持副本数量</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725155817798.png\" alt=\"image-20210725155817798\" title=\"\" class=\"\">\n                <p>image-20210725155817798</p>\n            </figure>\n<p>Scheduler ： 为Pod找到一个合适的Node , 后续涉及 节点 亲和 、Pod 亲和</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725160312283.png\" alt=\"image-20210725160312283\" title=\"\" class=\"\">\n                <p>image-20210725160312283</p>\n            </figure>\n<p>Default Scheduler:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725160459633.png\" alt=\"image-20210725160459633\" title=\"\" class=\"\">\n                <p>image-20210725160459633</p>\n            </figure>\n<p>判断题</p>\n<p>Kubernetes属于CNCF基金会。</p>\n<p>​                                          true                       正确                       </p>\n<p>​                                          false                      </p>\n<p>​    </p>\n<p>单选题</p>\n<p>Kubernetes中，能够创建、调度、和管理的最小部署单元是什么？</p>\n<p>​                                          Pod                       正确                       </p>\n<p>​                                          container                      </p>\n<p>​                                          ReplicaSet                      </p>\n<p>​                                          Deployment                      </p>\n<p>​    </p>\n<p>多选题</p>\n<p>Pod 中的容器包含哪几种？</p>\n<p>​                                          基础容器                      </p>\n<p>​                                          初始化容器                      </p>\n<p>​                                          业务容器                      </p>\n<p>​                                          回收容器                      </p>\n<p>​               正确     </p>\n<p>Kubernetes架构共分为哪几层？</p>\n<p>​                                          生态层                      </p>\n<p>​                                          接口层                      </p>\n<p>​                                          治理层                      </p>\n<p>​                                          应用层                      </p>\n<p>​                                          内核层                      </p>\n<p>​               正确     </p>\n<hr>\n<h2 id=\"Kubernetes-集群管理\"><a href=\"#Kubernetes-集群管理\" class=\"headerlink\" title=\"Kubernetes 集群管理\"></a>Kubernetes 集群管理</h2><p>清晰讲解了Kubernetes集群的整体架构和各个组件运行机理，方便快速理解设计思路，为后续kubernetes管理运维奠定基础，非常受用的课程讲解。</p>\n<h3 id=\"1-1-kubernetes集群生命周期管理介绍\"><a href=\"#1-1-kubernetes集群生命周期管理介绍\" class=\"headerlink\" title=\"1.1 kubernetes集群生命周期管理介绍\"></a>1.1 kubernetes集群生命周期管理介绍</h3><p>常见的部署形态:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725221126321.png\" alt=\"image-20210725221126321\" title=\"\" class=\"\">\n                <p>image-20210725221126321</p>\n            </figure>\n<p>常用部署方式：</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725221316057.png\" alt=\"image-20210725221316057\" title=\"\" class=\"\">\n                <p>image-20210725221316057</p>\n            </figure>\n<p>kubernetes 生产集群</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725221531427.png\" alt=\"image-20210725221531427\" title=\"\" class=\"\">\n                <p>image-20210725221531427</p>\n            </figure>\n<p>CCE 集群</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725221651848.png\" alt=\"image-20210725221651848\" title=\"\" class=\"\">\n                <p>image-20210725221651848</p>\n            </figure>\n<h3 id=\"1-2-kubernetes节点与节点池生命周期管理介绍\"><a href=\"#1-2-kubernetes节点与节点池生命周期管理介绍\" class=\"headerlink\" title=\"1.2 kubernetes节点与节点池生命周期管理介绍\"></a>1.2 kubernetes节点与节点池生命周期管理介绍</h3><p>Node 定义</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725222023620.png\" alt=\"image-20210725222023620\" title=\"\" class=\"\">\n                <p>image-20210725222023620</p>\n            </figure>\n<p>下面哪一项不属于Kubernetes生产集群的关键诉求？</p>\n<p>​                                          高可用 Availability                      </p>\n<p>​                                          弹性伸缩 Scale                      </p>\n<p>​                                        V  无服务器化 Serverless                      </p>\n<p>​                                          安全和权限管理 Security and access management                      </p>\n<h2 id=\"Kubernetes工作负载管理\"><a href=\"#Kubernetes工作负载管理\" class=\"headerlink\" title=\"Kubernetes工作负载管理\"></a>Kubernetes工作负载管理</h2><h3 id=\"1-1-deployment概念及使用场景\"><a href=\"#1-1-deployment概念及使用场景\" class=\"headerlink\" title=\"1.1 deployment概念及使用场景\"></a>1.1 deployment概念及使用场景</h3><p> 工作负载介绍</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725223400063.png\" alt=\"image-20210725223400063\" title=\"\" class=\"\">\n                <p>image-20210725223400063</p>\n            </figure>\n<p>Deployment 概述</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725223721810.png\" alt=\"image-20210725223721810\" title=\"\" class=\"\">\n                <p>image-20210725223721810</p>\n            </figure>\n<p>语法:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725223942484.png\" alt=\"image-20210725223942484\" title=\"\" class=\"\">\n                <p>image-20210725223942484</p>\n            </figure>\n<p>常用操作</p>\n<p>kubectl create deployment -n test –image=nginx:latest –replicas 1 nginx-demo </p>\n<p>-l app=nginx</p>\n<p>deployment.apps/nginx-demo created</p>\n<p>kubectl get pod<br>NAME                         READY   STATUS    RESTARTS   AGE<br>nginx-demo-9454dc46c-9g8mb   1/1     Running   0          102s<br>nginx-demo-9454dc46c-mc4bh   1/1     Running   0          102s<br>nginx-demo-9454dc46c-w4cch   1/1     Running   0          102s</p>\n<p>kubectl get deployments.apps<br>NAME         READY   UP-TO-DATE   AVAILABLE   AGE<br>nginx-demo   3/3     3            3           2m27s</p>\n<p><img src=\"收集.assets/image-20210725224330473.png\" alt=\"image-20210725224330473\"></p>\n<p><img src=\"收集.assets/image-20210725224445887.png\" alt=\"\"></p>\n<p>使用总结:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725224555868.png\" alt=\"image-20210725224555868\" title=\"\" class=\"\">\n                <p>image-20210725224555868</p>\n            </figure>\n<h3 id=\"1-2-daemonset概念及使用场景\"><a href=\"#1-2-daemonset概念及使用场景\" class=\"headerlink\" title=\"1.2 daemonset概念及使用场景\"></a>1.2 daemonset概念及使用场景</h3><p>概述</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726093052846.png\" alt=\"image-20210726093052846\" title=\"\" class=\"\">\n                <p>image-20210726093052846</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726093218144.png\" alt=\"image-20210726093218144\"></p>\n<p>json 获取</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726093309276.png\" alt=\"image-20210726093309276\" title=\"\" class=\"\">\n                <p>image-20210726093309276</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726093335727.png\" alt=\"image-20210726093335727\" title=\"\" class=\"\">\n                <p>image-20210726093335727</p>\n            </figure>\n<h3 id=\"1-3-job-cronjob概念及使用场景\"><a href=\"#1-3-job-cronjob概念及使用场景\" class=\"headerlink\" title=\"1.3 job/cronjob概念及使用场景\"></a>1.3 job/cronjob概念及使用场景</h3><p>Job / CronJob 概述</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725224746030.png\" alt=\"image-20210725224746030\" title=\"\" class=\"\">\n                <p>image-20210725224746030</p>\n            </figure>\n<p>语法</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725224940307.png\" alt=\"image-20210725224940307\" title=\"\" class=\"\">\n                <p>image-20210725224940307</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210725225053900.png\" alt=\"image-20210725225053900\"></p>\n<p><img src=\"收集.assets/image-20210725225259489.png\" alt=\"image-20210725225259489\"></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725225338252.png\" alt=\"image-20210725225338252\" title=\"\" class=\"\">\n                <p>image-20210725225338252</p>\n            </figure>\n<p>总结记录</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210725225419454.png\" alt=\"image-20210725225419454\" title=\"\" class=\"\">\n                <p>image-20210725225419454</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726093402688.png\" alt=\"image-20210726093402688\"></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726093736894.png\" alt=\"image-20210726093736894\" title=\"\" class=\"\">\n                <p>image-20210726093736894</p>\n            </figure>\n<p>单选题</p>\n<p>下面哪条命令可以对Deployment进行回滚？    </p>\n<p>​                                          kubectl rollout history deploy/nginx                      </p>\n<p>​                                          kubectl rollout undo deploy/nginx                       正确                       </p>\n<p>​                                          kubectl rollout status deploy/nginx                      </p>\n<p>​    </p>\n<p>当CronJob在创建任务执行时，发生重叠时的处理策略可以通过以下哪个字段设置？</p>\n<p>​                                          Schedule                      </p>\n<p>​                                          ConcurrencyPolicy                       正确                       </p>\n<p>​                                          Suspend                      </p>\n<p>​    </p>\n<p>多选题</p>\n<p>以下哪些命令可以对Deployment进行更新？</p>\n<p>​                                          kubectl edit deploy/nginx                  v    </p>\n<p>​                                          kubectl apply -f nginx.yaml                 v     </p>\n<p>​                                          kubectl set image deploy/nginx nginx=nginx:1.9.1               v        </p>\n<p>​                                          kubectl create -f nginx.yaml                      </p>\n<p>​               正确     </p>\n<p>下列哪些应用适合用DaemonSet部署？</p>\n<p>​                                          fluentd                      v</p>\n<p>​                                          node problem detector       v                </p>\n<p>​                                          gpu device plugin             v         </p>\n<p>​                                          nginx                      </p>\n<p>​               正确     </p>\n<h2 id=\"Kubernetes持久化数据卷管理\"><a href=\"#Kubernetes持久化数据卷管理\" class=\"headerlink\" title=\"Kubernetes持久化数据卷管理\"></a>Kubernetes持久化数据卷管理</h2><h3 id=\"1-1PersistentVolume的概念及使用场景\"><a href=\"#1-1PersistentVolume的概念及使用场景\" class=\"headerlink\" title=\"1.1PersistentVolume的概念及使用场景\"></a>1.1PersistentVolume的概念及使用场景</h3><p>无状态与有状态应用对比说明</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726094612968.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<h3 id=\"1-2-PersistentVolumeClaim的概念及使用场景\"><a href=\"#1-2-PersistentVolumeClaim的概念及使用场景\" class=\"headerlink\" title=\"1.2 PersistentVolumeClaim的概念及使用场景\"></a>1.2 PersistentVolumeClaim的概念及使用场景</h3><p>PV/PVC/SC 基础介绍</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726095353400.png\" alt=\"image-20210726095353400\" title=\"\" class=\"\">\n                <p>image-20210726095353400</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726095711573.png\" alt=\"image-20210726095711573\"></p>\n<p><img src=\"收集.assets/image-20210726095811499.png\" alt=\"image-20210726095811499\"></p>\n<p><img src=\"收集.assets/image-20210726095547183.png\" alt=\"image-20210726095547183\"></p>\n<p><img src=\"收集.assets/image-20210726100319077.png\" alt=\"image-20210726100319077\"></p>\n<h3 id=\"1-3-Statefulset的概念和使用\"><a href=\"#1-3-Statefulset的概念和使用\" class=\"headerlink\" title=\"1.3 Statefulset的概念和使用\"></a>1.3 Statefulset的概念和使用</h3><p>statefulset 概念</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726095034804.png\" alt=\"image-20210726095034804\" title=\"\" class=\"\">\n                <p>image-20210726095034804</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726095135348.png\" alt=\"image-20210726095135348\"></p>\n<p><img src=\"收集.assets/image-20210726095221475.png\" alt=\"image-20210726095221475\"></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726100433403.png\" alt=\"image-20210726100433403\" title=\"\" class=\"\">\n                <p>image-20210726100433403</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726101243353.png\" alt=\"image-20210726101243353\"></p>\n<h2 id=\"Kubernetes-网络与服务管理\"><a href=\"#Kubernetes-网络与服务管理\" class=\"headerlink\" title=\"Kubernetes 网络与服务管理\"></a>Kubernetes 网络与服务管理</h2><p>详细介绍Kubernetes service和Kubernetes ingress的概念及使用场景。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726102100187.png\" alt=\"\" title=\"\" class=\"\">\n                <p></p>\n            </figure>\n<h3 id=\"第1章-Kubernetes-service-概念及使用场景介绍\"><a href=\"#第1章-Kubernetes-service-概念及使用场景介绍\" class=\"headerlink\" title=\"第1章 Kubernetes service 概念及使用场景介绍\"></a>第1章 Kubernetes service 概念及使用场景介绍</h3><p>基础概念:</p>\n<p><img src=\"收集.assets/image-20210726102316263.png\" alt=\"image-20210726102316263\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get ep -n weiyigeek</span><br><span class=\"line\">NAME            ENDPOINTS                             AGE</span><br><span class=\"line\">nginx-service   192.168.109.74:80,192.168.109.75:80   12d</span><br></pre></td></tr></table></figure>\n<p>Service 定义</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726102948709.png\" alt=\"image-20210726102948709\" title=\"\" class=\"\">\n                <p>image-20210726102948709</p>\n            </figure>\n<p>​    </p>\n<p>ClusterIP 集群内部微服务之间访问。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726113346954.png\" alt=\"image-20210726113346954\" title=\"\" class=\"\">\n                <p>image-20210726113346954</p>\n            </figure>\n<p>Service类型1 ：Services Without Selectors （服务转发）</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726112358866.png\" alt=\"image-20210726112358866\" title=\"\" class=\"\">\n                <p>image-20210726112358866</p>\n            </figure>\n<p>主要用于有状态服务的场景。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726112433848.png\" alt=\"image-20210726112433848\" title=\"\" class=\"\">\n                <p>image-20210726112433848</p>\n            </figure>\n<p>$num=0;Get-ChildItem -Path . -Recurse  -Name 111.txt | %{ echo $_ ; $num += (GC $_ | Measure-Object).count };echo $num</p>\n<p><img src=\"收集.assets/image-20210726113156857.png\" alt=\"image-20210726113156857\"></p>\n<p><img src=\"收集.assets/image-20210726113539619.png\" alt=\"image-20210726113539619\"></p>\n<p><img src=\"收集.assets/image-20210726113659654.png\" alt=\"image-20210726113659654\"></p>\n<p>ExternalName Service</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726113837474.png\" alt=\"image-20210726113837474\" title=\"\" class=\"\">\n                <p>image-20210726113837474</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726113756536.png\" alt=\"image-20210726113756536\"></p>\n<p>Kube-proxy 实现 Services 原理</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726114034203.png\" alt=\"image-20210726114034203\" title=\"\" class=\"\">\n                <p>image-20210726114034203</p>\n            </figure>\n<h3 id=\"第2章-Kubernetes-ingress概念及使用场景介绍\"><a href=\"#第2章-Kubernetes-ingress概念及使用场景介绍\" class=\"headerlink\" title=\"第2章 Kubernetes ingress概念及使用场景介绍\"></a>第2章 Kubernetes ingress概念及使用场景介绍</h3><p>七层流量转发(http)</p>\n<p>ingress 模型，依赖Service</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726114138602.png\" alt=\"image-20210726114138602\" title=\"\" class=\"\">\n                <p>image-20210726114138602</p>\n            </figure>ingress 定义<br><br><br><br><img src=\"收集.assets/image-20210726114350831.png\" alt=\"image-20210726114350831\"><br><br><br><br>ingress 实现<br><br><figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726114418282.png\" alt=\"image-20210726114418282\" title=\"\" class=\"\">\n                <p>image-20210726114418282</p>\n            </figure>\n<h2 id=\"Kubernetes应用配置管理\"><a href=\"#Kubernetes应用配置管理\" class=\"headerlink\" title=\"Kubernetes应用配置管理\"></a>Kubernetes应用配置管理</h2><p>Configmap是应用部署配置必备的资源，数据库配置、环境变量使用很频繁，Secret密码或者类似的安全认证或证书等基本都通过它来使用也是很常用的基本能力</p>\n<p>前言： <figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726124129667.png\" alt=\"image-20210726124129667\" title=\"\" class=\"\">\n                <p>image-20210726124129667</p>\n            </figure></p>\n<p>配置概述:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726124204449.png\" alt=\"image-20210726124204449\" title=\"\" class=\"\">\n                <p>image-20210726124204449</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726142457030.png\" alt=\"image-20210726142457030\" title=\"\" class=\"\">\n                <p>image-20210726142457030</p>\n            </figure>\n<h3 id=\"1-1-Configmap应用配置概念及使用场景\"><a href=\"#1-1-Configmap应用配置概念及使用场景\" class=\"headerlink\" title=\"1.1 Configmap应用配置概念及使用场景\"></a>1.1 Configmap应用配置概念及使用场景</h3><figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726141253895.png\" alt=\"image-20210726141253895\" title=\"\" class=\"\">\n                <p>image-20210726141253895</p>\n            </figure>\n<p><img src=\"收集.assets/image-20210726141342151.png\" alt=\"image-20210726141342151\"></p>\n<p>ConfigMap 创建</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726141511246.png\" alt=\"image-20210726141511246\" title=\"\" class=\"\">\n                <p>image-20210726141511246</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726141540326.png\" alt=\"image-20210726141540326\" title=\"\" class=\"\">\n                <p>image-20210726141540326</p>\n            </figure>\n<p>总结说明: 数据块不能超过 1MB, 特别注意挂载配置文件和配置环境变量时的区别。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726124627790.png\" alt=\"image-20210726124627790\" title=\"\" class=\"\">\n                <p>image-20210726124627790</p>\n            </figure>\n<h3 id=\"1-2-Secret概念及使用场景\"><a href=\"#1-2-Secret概念及使用场景\" class=\"headerlink\" title=\"1.2 Secret概念及使用场景\"></a>1.2 Secret概念及使用场景</h3><p>概述:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726141834099.png\" alt=\"image-20210726141834099\" title=\"\" class=\"\">\n                <p>image-20210726141834099</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726141915683.png\" alt=\"image-20210726141915683\" title=\"\" class=\"\">\n                <p>image-20210726141915683</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726142021060.png\" alt=\"image-20210726142021060\" title=\"\" class=\"\">\n                <p>image-20210726142021060</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726142121233.png\" alt=\"image-20210726142121233\" title=\"\" class=\"\">\n                <p>image-20210726142121233</p>\n            </figure>\n<p>使用小结</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726125010351.png\" alt=\"image-20210726125010351\" title=\"\" class=\"\">\n                <p>image-20210726125010351</p>\n            </figure>\n<p>判断题</p>\n<p>Pod只能使用相同命名空间（namespace）中的ConfigMap。</p>\n<p>​                                          true                       正确                       </p>\n<p>​                                          false                      </p>\n<p>​    </p>\n<p>Secret专用于保存敏感数据，Kubernetes默认会对其进行加密来提供安全保障。</p>\n<p>​                                          true                      </p>\n<p>​                                          false                       正确                       </p>\n<p>​    </p>\n<p>单选题</p>\n<p>下面说法正确的是？</p>\n<p>​                                          ConfigMap大小不受限制。                      </p>\n<p>​                                          ConfigMap必须先于Pod创建，否则Pod无法启动。                       正确                       </p>\n<p>​                                          ConfigMap是一种不安全的配置资源，不推荐使用。                      </p>\n<p>​    </p>\n<p>多选题</p>\n<p>下面说法正确的是？</p>\n<p>​                                          ConfigMap常用于保存非敏感应用配置。                      </p>\n<p>​                                          Secret常用于保存敏感的应用配置。                      </p>\n<p>​                                          Secret的安全性需要管理员配置RBAC规则等手段进行保证。                      </p>\n<p>​                                          ConfigMap和Secret可以同时使用。                      </p>\n<hr>\n<h2 id=\"Istio服务网格快速入门\"><a href=\"#Istio服务网格快速入门\" class=\"headerlink\" title=\"Istio服务网格快速入门\"></a>Istio服务网格快速入门</h2><p>详细介绍服务网格的概念和Istio服务网格架构及使用场景。</p>\n<p>官网链接: <a href=\"https://istio.io/\" target=\"_blank\" rel=\"noopener\">https://istio.io/</a></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726145830112.png\" alt=\"image-20210726145830112\" title=\"\" class=\"\">\n                <p>image-20210726145830112</p>\n            </figure>\n<h3 id=\"1-1-服务网格的概念介绍\"><a href=\"#1-1-服务网格的概念介绍\" class=\"headerlink\" title=\"1.1 服务网格的概念介绍\"></a>1.1 服务网格的概念介绍</h3><p>基本概念:</p>\n<p>服务网格是承载微服务架构理念的云原生技术形态。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726150053431.png\" alt=\"image-20210726150053431\" title=\"\" class=\"\">\n                <p>image-20210726150053431</p>\n            </figure>\n<p>发展历程:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726150259727.png\" alt=\"image-20210726150259727\" title=\"\" class=\"\">\n                <p>image-20210726150259727</p>\n            </figure>\n<h3 id=\"1-2-Istio服务网格架构及使用场景介绍\"><a href=\"#1-2-Istio服务网格架构及使用场景介绍\" class=\"headerlink\" title=\"1.2 Istio服务网格架构及使用场景介绍\"></a>1.2 Istio服务网格架构及使用场景介绍</h3><p>基本概念:</p>\n<p>What：Istio是什么；</p>\n<p>Why：为什么要用Istio；</p>\n<p>How：怎么使用Istio。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726150312499.png\" alt=\"image-20210726150312499\" title=\"\" class=\"\">\n                <p>image-20210726150312499</p>\n            </figure>\n<p>例子: 实现 80% 流量 去往 微服务1 ， 20% 流量去往微服务2。</p>\n<p>四个特性:<code>Connect 、Secure、Observe、Control</code></p>\n<p>Proxy: 数据面代理</p>\n<p>Ingress Gateway 资源: 网格入口，所有访问流量都要经过他。</p>\n<p>Virtual Services:  所有的功能都是通过配置策略来实现的，例如实现服务之间的访问互通，流量注入，重试，超时功能等</p>\n<p>Destination Rule: 服务集合，流量治理策略、负载均衡模式，  LPS的通信，熔断</p>\n<p>Tips ： 所有的配置文件都是通过yaml格式实现的。</p>\n<p>控制面组件与功能: 然后通过Galley组件来解析配置并通过Pilot组件下发到proxy并执行策略，最后 Citadel 安全方面的服务治理（服务间认证、与授权），由上述三个组件共同组建成为了<code>lstiod</code>作为一个Pod运行在集群之中。</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726152310217.png\" alt=\"image-20210726152310217\" title=\"\" class=\"\">\n                <p>image-20210726152310217</p>\n            </figure>\n<p>基础示例:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726175018553.png\" alt=\"image-20210726175018553\" title=\"\" class=\"\">\n                <p>image-20210726175018553</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726175202745.png\" alt=\"image-20210726175202745\" title=\"\" class=\"\">\n                <p>image-20210726175202745</p>\n            </figure>\n<p>技术架构\\:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726185348964.png\" alt=\"image-20210726185348964\" title=\"\" class=\"\">\n                <p>image-20210726185348964</p>\n            </figure>\n<p>功能特性:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726185544130.png\" alt=\"image-20210726185544130\" title=\"\" class=\"\">\n                <p>image-20210726185544130</p>\n            </figure>\n<p>应用场景:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210726191420464.png\" alt=\"image-20210726191420464\" title=\"\" class=\"\">\n                <p>image-20210726191420464</p>\n            </figure>\n<p>判断题</p>\n<p>对于云原生应用，采用 Kubernetes 构建微服务部署和集群管理能力，采用 Istio 构建服务治理能力，将逐渐成为应用微服务转型的标准配置。<br>true 正确<br>false</p>\n<p>单选题</p>\n<p>以下哪个组件不是Istio的核心组件？<br>Pilot<br>kubelet 正确<br>Galley<br>Citadel</p>\n<p>多选题</p>\n<p>Istio的基本资源包括哪些？<br>Gateway<br>Virtual Service<br>Deployment<br>Destination Rule<br>正确</p>\n<p>Istio的应用场景有哪些？<br>灰度发布<br>流量管理<br>访问可视化<br>开发应用<br>正确</p>\n<h2 id=\"Istio灰度发布管理\"><a href=\"#Istio灰度发布管理\" class=\"headerlink\" title=\"Istio灰度发布管理\"></a>Istio灰度发布管理</h2><p>复习:  </p>\n<p><img src=\"收集.assets/image-20210727092420661.png\" alt=\"image-20210727092420661\"></p>\n<p>前言: 详细介绍灰度发布的定义，分类，流程及ASM灰度发布功能与使用场景。</p>\n<h3 id=\"1-1-业务灰度发布概述\"><a href=\"#1-1-业务灰度发布概述\" class=\"headerlink\" title=\"1.1 业务灰度发布概述\"></a>1.1 业务灰度发布概述</h3><p>WHAT : 什么是灰度发布? (概念和分类以及流程)</p>\n<p>金丝雀发布 : 平滑升级、安全迭代。</p>\n<p>蓝绿发布  : 零停机、快速升级、一键回退。</p>\n<p><img src=\"收集.assets/image-20210727092715986.png\" alt=\"image-20210727092715986\"></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727092830384.png\" alt=\"image-20210727092830384\" title=\"\" class=\"\">\n                <p>image-20210727092830384</p>\n            </figure>\n<p>流程:<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727093013015.png\" alt=\"image-20210727093013015\" title=\"\" class=\"\">\n                <p>image-20210727093013015</p>\n            </figure></p>\n<h3 id=\"1-2-灰度发布功能与使用场景介绍\"><a href=\"#1-2-灰度发布功能与使用场景介绍\" class=\"headerlink\" title=\"1.2 灰度发布功能与使用场景介绍\"></a>1.2 灰度发布功能与使用场景介绍</h3><p>WHY : 为什么要用灰度发布? （功能优势以及使用场景）</p>\n<p>HOW : 如何使用灰度发布？(实践)</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727093223066.png\" alt=\"image-20210727093223066\" title=\"\" class=\"\">\n                <p>image-20210727093223066</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727093233635.png\" alt=\"image-20210727093233635\" title=\"\" class=\"\">\n                <p>image-20210727093233635</p>\n            </figure>\n<p>基于权重的灰度发布与上面基于内容发布的区别在于VirtualService</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727093912750.png\" alt=\"image-20210727093912750\" title=\"\" class=\"\">\n                <p>image-20210727093912750</p>\n            </figure>\n<p>蓝绿发布 （与灰度发布的类似）</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727094050838.png\" alt=\"image-20210727094050838\" title=\"\" class=\"\">\n                <p>image-20210727094050838</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727094229186.png\" alt=\"image-20210727094229186\" title=\"\" class=\"\">\n                <p>image-20210727094229186</p>\n            </figure>\n<p>判断题</p>\n<p>灰度发布是软件开发的一种重要手段。<br>true<br>false 正确</p>\n<p>单选题</p>\n<p>关于蓝绿发布，以下哪个描述不正确？<br>蓝绿发布提供了一种零宕机的部署方式。<br>蓝绿发布支持在新旧两个版本间快速切换。<br>蓝绿发布指的是引一部分实际流量对一个新版本进行测试。 正确</p>\n<p>多选题</p>\n<p>灰度发布具体包括以下哪些类型？<br>蓝绿发布<br>基于权重的灰度发布<br>基于内容的灰度发布<br>基于请求体的灰度发布<br>正确</p>\n<h2 id=\"Istio流量治理与监控管理\"><a href=\"#Istio流量治理与监控管理\" class=\"headerlink\" title=\"Istio流量治理与监控管理\"></a>Istio流量治理与监控管理</h2><p>详细介绍Istio典型、常用的流量治理策略，Istio的可观测性：访问日志、调用链、监控指标等。</p>\n<h3 id=\"1-1-Istio非侵入式服务治理概念介绍\"><a href=\"#1-1-Istio非侵入式服务治理概念介绍\" class=\"headerlink\" title=\"1.1 Istio非侵入式服务治理概念介绍\"></a>1.1 Istio非侵入式服务治理概念介绍</h3><p><strong>（1）微服务</strong></p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727095332199.png\" alt=\"image-20210727095332199\" title=\"\" class=\"\">\n                <p>image-20210727095332199</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727095448677.png\" alt=\"image-20210727095448677\" title=\"\" class=\"\">\n                <p>image-20210727095448677</p>\n            </figure>\n<p>微服务框架 与 服务网格间的差别。</p>\n<p>  pageid: 480</p>\n<ul>\n<li>Sidecar模式：下一代微服务架构的关键<br><a href=\"https://www.jianshu.com/p/330b00dc40d7\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/330b00dc40d7</a></li>\n</ul>\n<ul>\n<li>Envoy 是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线，经常被用在 Service Mesh 中作为 Sidecar。<br><a href=\"https://www.jianshu.com/p/d9db52330c0f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d9db52330c0f</a><br><a href=\"https://www.sohu.com/a/244966023_268033\" target=\"_blank\" rel=\"noopener\">https://www.sohu.com/a/244966023_268033</a></li>\n</ul>\n<p><img src=\"收集.assets/image-20210727095723572.png\" alt=\"image-20210727095723572\"></p>\n<h3 id=\"1-2-流量治理\"><a href=\"#1-2-流量治理\" class=\"headerlink\" title=\"1.2 流量治理\"></a>1.2 流量治理</h3><p>流量治理策略 （限流 、发布）</p>\n<ul>\n<li>1.2.1 服务注册与发现</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727100204030.png\" alt=\"image-20210727100204030\" title=\"\" class=\"\">\n                <p>image-20210727100204030</p>\n            </figure>\n<ul>\n<li><p>1.2.2 负载均衡与API 对象</p>\n<p><img src=\"收集.assets/image-20210727100625418.png\" alt=\"image-20210727100625418\"></p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727100635568.png\" alt=\"image-20210727100635568\" title=\"\" class=\"\">\n                <p>image-20210727100635568</p>\n            </figure>\n<p>使用案例:</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727100733725.png\" alt=\"image-20210727100733725\" title=\"\" class=\"\">\n                <p>image-20210727100733725</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727100745604.png\" alt=\"image-20210727100745604\" title=\"\" class=\"\">\n                <p>image-20210727100745604</p>\n            </figure>\n<ul>\n<li>1.2.3 <strong>路由匹配</strong>（流量切分、灰度发布）</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727101309762.png\" alt=\"image-20210727101309762\" title=\"\" class=\"\">\n                <p>image-20210727101309762</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727101438755.png\" alt=\"image-20210727101438755\" title=\"\" class=\"\">\n                <p>image-20210727101438755</p>\n            </figure>\n<ul>\n<li>1.2.4 <strong>熔断降级:</strong></li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727101553487.png\" alt=\"image-20210727101553487\" title=\"\" class=\"\">\n                <p>image-20210727101553487</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727101721013.png\" alt=\"image-20210727101721013\" title=\"\" class=\"\">\n                <p>image-20210727101721013</p>\n            </figure>\n<ul>\n<li>1.2.5 <strong>故障注入</strong> 以及 使用说明</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727101839486.png\" alt=\"image-20210727101839486\" title=\"\" class=\"\">\n                <p>image-20210727101839486</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102003563.png\" alt=\"image-20210727102003563\" title=\"\" class=\"\">\n                <p>image-20210727102003563</p>\n            </figure>\n<ul>\n<li><p>1.2.6 限流</p>\n<p>本地限流 好处是 响应更快、因为它不需要发送限流请求到中心限流服务中</p>\n</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102049602.png\" alt=\"image-20210727102049602\" title=\"\" class=\"\">\n                <p>image-20210727102049602</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102412997.png\" alt=\"image-20210727102412997\" title=\"\" class=\"\">\n                <p>image-20210727102412997</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102429034.png\" alt=\"image-20210727102429034\" title=\"\" class=\"\">\n                <p>image-20210727102429034</p>\n            </figure>\n<ul>\n<li>1.2.7 失败重试(failr retry)</li>\n</ul>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102629033.png\" alt=\"image-20210727102629033\" title=\"\" class=\"\">\n                <p>image-20210727102629033</p>\n            </figure>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102616820.png\" alt=\"image-20210727102616820\" title=\"\" class=\"\">\n                <p>image-20210727102616820</p>\n            </figure>\n<h3 id=\"1-3-基本监控功能与使用场景介绍\"><a href=\"#1-3-基本监控功能与使用场景介绍\" class=\"headerlink\" title=\"1.3 基本监控功能与使用场景介绍\"></a>1.3 基本监控功能与使用场景介绍</h3><figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727102949265.png\" alt=\"image-20210727102949265\" title=\"\" class=\"\">\n                <p>image-20210727102949265</p>\n            </figure>\n<p>Istio 访问日志</p>\n<figure class=\"image-box\">\n                <img src=\"收集.assets/image-20210727103209827.png\" alt=\"image-20210727103209827\" title=\"\" class=\"\">\n                <p>image-20210727103209827</p>\n            </figure>\n<p>判断题<br>Istio故障注入只支持访问时延注入。<br>true<br>false 正确</p>\n<p>单选题</p>\n<p>Istio负载均衡通过哪个API设置？<br>Virtual Service<br>Destination Rule 正确<br>ServiceEntry</p>\n<p>多选题</p>\n<p>下面哪些属于服务网格的优势？<br>业务代码无侵入<br>开发语言无关<br>动态配置策略<br>支持业务优雅升级<br>正确</p>\n<p>Istio支持的Trace后端包括哪些？<br>Zipkin<br>Jaeger<br>LightStep<br>Datadog<br>正确</p>\n<hr>\n<ul>\n<li>Hugo 是 Go 编写的静态网站生成器，速度快，易用，可配置。Hugo 有一个内容和模板目录，把他们渲染到完全的 HTML 网站。<br><a href=\"https://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">https://www.gohugo.org/</a><br><a href=\"https://gohugo.io/getting-started/\" target=\"_blank\" rel=\"noopener\">https://gohugo.io/getting-started/</a></li>\n</ul>\n<p>ugo 依赖于 Markdown 文件，元数据字体 。用户可以从任意的目录中运行 Hugo，支持共享主机和其他系统。</p>\n<p>Hugo 只需要几分之一秒就可以渲染一个经典的中型网站，最好网站的每个部分渲染只需 1 毫秒。</p>\n<p>Hugo 非常适合博客，文档等等网站的生成。</p>\n<p>Hugo 当前提供 Windows，Linux，FreeBSD，NetBSD 和 OS X (Darwin) 的 x64, i386 和 ARM 架构的二进制预构建包。</p>\n<p>Hugo 的源代码可以通过 Go 编译器工具链编译到任意地方运行，例如： DragonFly BSD, OpenBSD, Plan 9 和 Solaris。</p>\n<p><a href=\"https://www.cnblogs.com/20175211lyz/\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/20175211lyz/</a></p>\n","comments":true,"excerpt":"[TOC]","categories":[{"name":"Database","path":"api/categories/Database.json"}],"tags":[{"name":"Oracle","path":"api/tags/Oracle.json"}]}